{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
    "id": 547842828,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NTQ3ODQyODI4",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20833",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/20833.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/20833.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20833",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20833/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
    "number": 20833,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "rpc/validation: enable packages through testmempoolaccept",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This PR enables validation dry-runs of packages through the `testmempoolaccept` RPC. The expectation is that the results returned from `testmempoolaccept` are what you'd get from test-then-submitting each transaction individually, in that order (this means the package is expected to be sorted in topological order, for now at least). The validation is also atomic: in the case of failure, it immediately halts and may return \"unfinished\" `MempoolAcceptResult`s for transactions that weren't fully validated. The API for 1 transaction stays the same.\r\n\r\n**Motivation:** \r\n- This allows you to test validity for transaction chains (e.g. with multiple spending paths and where you don't want to broadcast yet); closes #18480.\r\n- It's also a first step towards package validation in a minimally invasive way.\r\n- The RPC commit happens to close #21074 by clarifying the \"allowed\" key.\r\n\r\nThere are a few added restrictions on the packages, mostly to simplify the logic for areas that aren't critical to main package use cases:\r\n- No package can have conflicts, i.e. none of them can spend the same inputs, even if it would be a valid BIP125 replacement.\r\n- The package cannot conflict with the mempool, i.e. RBF is disabled.\r\n- The total count of the package cannot exceed 25 (the default descendant count limit), and total size cannot exceed 101KvB (the default descendant size limit).\r\n\r\nIf you're looking for review comments and github isn't loading them, I have a gist compiling some topics of discussion [here](https://gist.github.com/glozow/c3acaf161c95bba491fce31585b2aaf7)\r\n",
    "labels": [
      {
        "id": 98279177,
        "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
        "name": "RPC/REST/ZMQ",
        "color": "0052cc",
        "default": false
      },
      {
        "id": 98298007,
        "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
        "name": "P2P",
        "color": "006b75",
        "default": false
      },
      {
        "id": 118379652,
        "node_id": "MDU6TGFiZWwxMTgzNzk2NTI=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Validation",
        "name": "Validation",
        "color": "6060aa",
        "default": false
      },
      {
        "id": 164208572,
        "node_id": "MDU6TGFiZWwxNjQyMDg1NzI=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Mempool",
        "name": "Mempool",
        "color": "fef2c0",
        "default": false
      }
    ],
    "active_lock_reason": "resolved",
    "created_at": "2021-01-03T07:16:31Z",
    "updated_at": "2022-08-18T18:24:21Z",
    "closed_at": "2021-05-27T20:41:05Z",
    "mergeable_state": "unknown",
    "merged_at": "2021-05-27T20:41:05Z",
    "merge_commit_sha": "7257e50dba36328be60f69c998632408802b9a29",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "glozow:package-testmempoolaccept",
      "ref": "package-testmempoolaccept",
      "sha": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 244262754,
        "node_id": "MDEwOlJlcG9zaXRvcnkyNDQyNjI3NTQ=",
        "name": "bitcoin",
        "full_name": "glozow/bitcoin",
        "owner": {
          "login": "glozow",
          "id": 25183001,
          "node_id": "MDQ6VXNlcjI1MTgzMDAx",
          "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/glozow",
          "html_url": "https://github.com/glozow",
          "followers_url": "https://api.github.com/users/glozow/followers",
          "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
          "organizations_url": "https://api.github.com/users/glozow/orgs",
          "repos_url": "https://api.github.com/users/glozow/repos",
          "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/glozow/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/glozow/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/glozow/bitcoin",
        "archive_url": "https://api.github.com/repos/glozow/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/glozow/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/glozow/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/glozow/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/glozow/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/glozow/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/glozow/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/glozow/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/glozow/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/glozow/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/glozow/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/glozow/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/glozow/bitcoin/events",
        "forks_url": "https://api.github.com/repos/glozow/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/glozow/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/glozow/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/glozow/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/glozow/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/glozow/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/glozow/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/glozow/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/glozow/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/glozow/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/glozow/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/glozow/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/glozow/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/glozow/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/glozow/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/glozow/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:glozow/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/glozow/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/glozow/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/glozow/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/glozow/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/glozow/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/glozow/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/glozow/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/glozow/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/glozow/bitcoin/hooks",
        "svn_url": "https://github.com/glozow/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 1,
        "stargazers_count": 7,
        "watchers_count": 7,
        "size": 225090,
        "default_branch": "master",
        "open_issues_count": 1,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-02T10:00:34Z",
        "created_at": "2020-03-02T02:31:56Z",
        "updated_at": "2022-01-07T17:55:23Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "b295395664bd37e26d168c329f238237b34aef8c",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69819,
        "watchers_count": 69819,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T22:42:00Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-07T04:47:18Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 841,
    "deletions": 87,
    "changed_files": 16,
    "commits": 14,
    "review_comments": 413,
    "comments": 35
  },
  "events": [
    {
      "event": "labeled",
      "id": 4162271525,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQxNjIyNzE1MjU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4162271525",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-03T08:29:26Z",
      "label": {
        "name": "Mempool",
        "color": "fef2c0"
      }
    },
    {
      "event": "labeled",
      "id": 4162271526,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQxNjIyNzE1MjY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4162271526",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-03T08:29:26Z",
      "label": {
        "name": "P2P",
        "color": "006b75"
      }
    },
    {
      "event": "labeled",
      "id": 4162271529,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQxNjIyNzE1Mjk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4162271529",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-03T08:29:26Z",
      "label": {
        "name": "RPC/REST/ZMQ",
        "color": "0052cc"
      }
    },
    {
      "event": "labeled",
      "id": 4162271530,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQxNjIyNzE1MzA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4162271530",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-03T08:29:26Z",
      "label": {
        "name": "Validation",
        "color": "6060aa"
      }
    },
    {
      "event": "commented",
      "id": 753589415,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc1MzU4OTQxNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/753589415",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-03T09:20:23Z",
      "updated_at": "2021-01-03T09:20:23Z",
      "author_association": "MEMBER",
      "body": "Thanks for working on this. Strong Concept ACK!",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-753589415",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20833"
    },
    {
      "event": "commented",
      "id": 753597483,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc1MzU5NzQ4Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/753597483",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-03T10:38:42Z",
      "updated_at": "2021-01-03T10:38:42Z",
      "author_association": "MEMBER",
      "body": "Concept ACK and approach ACK.",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-753597483",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20833"
    },
    {
      "event": "commented",
      "id": 753602927,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc1MzYwMjkyNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/753602927",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-03T11:29:21Z",
      "updated_at": "2021-05-27T08:15:57Z",
      "author_association": "MEMBER",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #10443 (Add fee_est tool for debugging fee estimation code by ryanofsky)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-753602927",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20833"
    },
    {
      "event": "reviewed",
      "id": 562088788,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYyMDg4Nzg4",
      "url": null,
      "actor": null,
      "commit_id": "25412b8d13a5287670033d6bab7730e978bbb6be",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#pullrequestreview-562088788",
      "submitted_at": "2021-01-05T19:57:33Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
    },
    {
      "event": "reviewed",
      "id": 562884556,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYyODg0NTU2",
      "url": null,
      "actor": null,
      "commit_id": "10860308da57ae417aeb6a0e35515235e5f9360a",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#pullrequestreview-562884556",
      "submitted_at": "2021-01-06T17:07:27Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4177429301,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDE3NzQyOTMwMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4177429301",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-06T22:50:02Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4182530973,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDE4MjUzMDk3Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4182530973",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-08T02:13:04Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4182566057,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDE4MjU2NjA1Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4182566057",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-08T02:30:54Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4185500664,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDE4NTUwMDY2NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4185500664",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-08T18:05:47Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4186065098,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDE4NjA2NTA5OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4186065098",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-08T21:02:47Z"
    },
    {
      "event": "ready_for_review",
      "id": 4186390085,
      "node_id": "MDE5OlJlYWR5Rm9yUmV2aWV3RXZlbnQ0MTg2MzkwMDg1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4186390085",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-08T23:09:46Z"
    },
    {
      "event": "commented",
      "id": 757042159,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc1NzA0MjE1OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/757042159",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-08T23:10:14Z",
      "updated_at": "2021-01-08T23:10:14Z",
      "author_association": "MEMBER",
      "body": "5th time's the charm I guess 😂 this is ready for review!",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-757042159",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20833"
    },
    {
      "event": "commented",
      "id": 757357961,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc1NzM1Nzk2MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/757357961",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-09T19:48:26Z",
      "updated_at": "2021-01-09T19:48:26Z",
      "author_association": "MEMBER",
      "body": "Concept ACK :) ",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-757357961",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20833"
    },
    {
      "event": "commented",
      "id": 759396273,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc1OTM5NjI3Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/759396273",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-13T11:45:49Z",
      "updated_at": "2021-01-13T11:45:49Z",
      "author_association": "MEMBER",
      "body": "<!--4a62be1de6b64f3ed646cdc7932c8cf5-->\n🕵️ @sipa has been requested to review this pull request as specified in the REVIEWERS file.",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-759396273",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20833"
    },
    {
      "event": "mentioned",
      "id": 4200810374,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDIwMDgxMDM3NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4200810374",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-13T11:45:49Z"
    },
    {
      "event": "subscribed",
      "id": 4200810383,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQyMDA4MTAzODM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4200810383",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-13T11:45:49Z"
    },
    {
      "event": "reviewed",
      "id": 567995465,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY3OTk1NDY1",
      "url": null,
      "actor": null,
      "commit_id": "c97fae1011c4bd376898af73576756f163eeaf58",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "left some nits in the first commit",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#pullrequestreview-567995465",
      "submitted_at": "2021-01-14T08:26:53Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
    },
    {
      "event": "labeled",
      "id": 4207122753,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQyMDcxMjI3NTM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4207122753",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-14T16:34:15Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 568454011,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY4NDU0MDEx",
      "url": null,
      "actor": null,
      "commit_id": "79e5512206fa91acc09b843bd2962903fb2b6b8d",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "So far I've reviewed the functional and unit tests and they look great! Well done doing that in a way that doesn't require the wallet - very thorough\r\n\r\nI think soon `test/functional/rpc_packages.py` can be done with `MiniWallet` and get rid of some code. It would probably need https://github.com/bitcoin/bitcoin/pull/20889 though\r\nbc we'd have to catch some exceptions where we expect `from_node.testmempoolaccept` to fail. Anyways I wouldn't expect that to be done in this PR or delay anything, tests look great as is",
      "user": {
        "login": "mjdietzx",
        "id": 7217256,
        "node_id": "MDQ6VXNlcjcyMTcyNTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mjdietzx",
        "html_url": "https://github.com/mjdietzx",
        "followers_url": "https://api.github.com/users/mjdietzx/followers",
        "following_url": "https://api.github.com/users/mjdietzx/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mjdietzx/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mjdietzx/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
        "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
        "repos_url": "https://api.github.com/users/mjdietzx/repos",
        "events_url": "https://api.github.com/users/mjdietzx/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#pullrequestreview-568454011",
      "submitted_at": "2021-01-14T18:13:44Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
    },
    {
      "event": "commented",
      "id": 760395006,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc2MDM5NTAwNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/760395006",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-14T18:45:05Z",
      "updated_at": "2021-01-14T18:51:32Z",
      "author_association": "MEMBER",
      "body": "@mjdietzx thanks for review! :)\r\n\r\n> I think soon `test/functional/rpc_packages.py` can be done with `MiniWallet` and get rid of some code.\r\n\r\nI didn't feel like `MiniWallet` suited my needs at the moment - I needed to chain transactions and wanted more control over the scripts. I considered just adding more functionality to `MiniWallet` but it might not be needed elsewhere and would conflict with a lot of the PRs that stem from #20078 (which I am a huge fan of) 😃. Certainly interested in putting more of the code in test_framework/wallet.py in the future, if it could be reused!",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-760395006",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20833"
    },
    {
      "event": "mentioned",
      "id": 4207671095,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDIwNzY3MTA5NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4207671095",
      "actor": {
        "login": "mjdietzx",
        "id": 7217256,
        "node_id": "MDQ6VXNlcjcyMTcyNTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mjdietzx",
        "html_url": "https://github.com/mjdietzx",
        "followers_url": "https://api.github.com/users/mjdietzx/followers",
        "following_url": "https://api.github.com/users/mjdietzx/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mjdietzx/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mjdietzx/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
        "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
        "repos_url": "https://api.github.com/users/mjdietzx/repos",
        "events_url": "https://api.github.com/users/mjdietzx/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-14T18:45:06Z"
    },
    {
      "event": "subscribed",
      "id": 4207671108,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQyMDc2NzExMDg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4207671108",
      "actor": {
        "login": "mjdietzx",
        "id": 7217256,
        "node_id": "MDQ6VXNlcjcyMTcyNTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mjdietzx",
        "html_url": "https://github.com/mjdietzx",
        "followers_url": "https://api.github.com/users/mjdietzx/followers",
        "following_url": "https://api.github.com/users/mjdietzx/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mjdietzx/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mjdietzx/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
        "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
        "repos_url": "https://api.github.com/users/mjdietzx/repos",
        "events_url": "https://api.github.com/users/mjdietzx/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-14T18:45:06Z"
    },
    {
      "event": "reviewed",
      "id": 570114670,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcwMTE0Njcw",
      "url": null,
      "actor": null,
      "commit_id": "c97fae1011c4bd376898af73576756f163eeaf58",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "I think this PR needs to be better motivated. I believe the gradual package validation introduction is a good idea but I do have questions around the following rational:\r\n\r\n> This allows you to test validity for second-layer application transaction chains (i.e. with multiple spending paths and where you don't want to broadcast yet).\r\n\r\nI've a hard time envisioning a deployed/soon-to-be-deployed L2 protocol security model where it does make sense to test mempool validity of a transaction chain as this PR allows. \r\n\r\nIf you don't have the need to broadcast your chain of transactions, its feerate might not be finalized and thus minimal, under your current mempool feerate. Or if second-stage transactions are malleable (anchor output format in LN) you might aggregate them to reduce the fee cost at broadcast and thus rendering the previous mempool evaluation irrelevant.\r\n\r\nOr the second-stage of your chain might be under an absolute timelocks according to protocol transaction format (e.g HTLC-timeout) and as such will be also rejected by `testmempoolaccept` but it's valid according to protocol semantics.\r\n\r\nFurther, if the second-stage of your chain are constrained by an off-chain covenant (a.k,a double-signed by both protocol parties), forcing to produce the local signature for testing mempool validity isn't the best security advice.\r\n\r\nIn most L2s, chain of transactions validity is more liberal than mempool one. Integrating this new `testmempoolaccept` might break it...\r\n\r\n@darosior do you intend to use this for a vault stack ? If yes that would be great if could you describe the interaction between this new `testmempoolaccept` and your verification flow!",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#pullrequestreview-570114670",
      "submitted_at": "2021-01-18T03:21:13Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
    },
    {
      "event": "commented",
      "id": 762080588,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc2MjA4MDU4OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/762080588",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-18T08:34:14Z",
      "updated_at": "2021-01-18T08:34:14Z",
      "author_association": "MEMBER",
      "body": "@ariard i think it is only intended to be a convenient way to sanity check for \"static\" standardness bounds, not for testing the whole validity prior to broadcast (which is intractable..). ",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-762080588",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20833"
    },
    {
      "event": "mentioned",
      "id": 4216864780,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDIxNjg2NDc4MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4216864780",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-18T08:34:14Z"
    },
    {
      "event": "subscribed",
      "id": 4216864785,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQyMTY4NjQ3ODU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4216864785",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-18T08:34:14Z"
    },
    {
      "event": "commented",
      "id": 762553705,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc2MjU1MzcwNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/762553705",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-19T02:05:06Z",
      "updated_at": "2021-01-19T02:07:33Z",
      "author_association": "MEMBER",
      "body": "@darosior Yes but as `testmempoolaccept` result is `{success, failure}` so for e.g if a package tx is time-locked in the future, you will get a failure and wrongly fail your L2 flow ? I don't think \"static\" (or stateless?) standardness bounds is more defined.",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-762553705",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20833"
    },
    {
      "event": "mentioned",
      "id": 4220383205,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDIyMDM4MzIwNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4220383205",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-19T02:05:06Z"
    },
    {
      "event": "subscribed",
      "id": 4220383206,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQyMjAzODMyMDY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4220383206",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-19T02:05:06Z"
    },
    {
      "event": "commented",
      "id": 762794603,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc2Mjc5NDYwMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/762794603",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-19T11:54:32Z",
      "updated_at": "2021-01-19T11:54:32Z",
      "author_association": "MEMBER",
      "body": "@ariard i think it would be useful to test the first stage -non timelocked- flow (in specific for Revault, the deposit-emergency, deposit-unvault-cancel, and deposit-unvault-emergency scenarii) without mocking actual tx sending and block generation. I don't think it'd be really useful for \"check at runtime\" either.\r\nAs for the \"static\" bounds, there are for instance the maximum standard witscript size or minimum relay fee that are time (and fee-bumping) independent.",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-762794603",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20833"
    },
    {
      "event": "mentioned",
      "id": 4222168836,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDIyMjE2ODgzNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4222168836",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-19T11:54:32Z"
    },
    {
      "event": "subscribed",
      "id": 4222168842,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQyMjIxNjg4NDI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4222168842",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-19T11:54:32Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4224715846,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDIyNDcxNTg0Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4224715846",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-19T21:24:22Z"
    },
    {
      "event": "commented",
      "id": 763168517,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc2MzE2ODUxNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/763168517",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-19T21:59:14Z",
      "updated_at": "2021-01-19T21:59:14Z",
      "author_association": "MEMBER",
      "body": "Rebased, split up the refactoring commit (hopefully now very digestible chunks), and took some of the review suggestions so far. Thanks a ton for your reviews @jnewbery @MarcoFalke @sdaftuar @mjdietzx @darosior @ariard 🤗 hope you take a look again!\r\n\r\n@ariard Re: timelocks, off-chain covenants, etc. yep this obviously has some limitations and I wouldn't consider this a perfect tester for L2 transactions. If we could come up with some test vectors where, for example, the option to ignore timelocks in dry-runs would be extremely useful, I think we could consider it. Regardless, I think a basic package accept like this moves in that direction :)",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-763168517",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20833"
    },
    {
      "event": "mentioned",
      "id": 4224847539,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDIyNDg0NzUzOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4224847539",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-19T21:59:14Z"
    },
    {
      "event": "subscribed",
      "id": 4224847543,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQyMjQ4NDc1NDM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4224847543",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-19T21:59:14Z"
    },
    {
      "event": "mentioned",
      "id": 4224847551,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDIyNDg0NzU1MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4224847551",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-19T21:59:14Z"
    },
    {
      "event": "subscribed",
      "id": 4224847556,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQyMjQ4NDc1NTY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4224847556",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-19T21:59:14Z"
    },
    {
      "event": "mentioned",
      "id": 4224847560,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDIyNDg0NzU2MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4224847560",
      "actor": {
        "login": "mjdietzx",
        "id": 7217256,
        "node_id": "MDQ6VXNlcjcyMTcyNTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mjdietzx",
        "html_url": "https://github.com/mjdietzx",
        "followers_url": "https://api.github.com/users/mjdietzx/followers",
        "following_url": "https://api.github.com/users/mjdietzx/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mjdietzx/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mjdietzx/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
        "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
        "repos_url": "https://api.github.com/users/mjdietzx/repos",
        "events_url": "https://api.github.com/users/mjdietzx/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-19T21:59:14Z"
    },
    {
      "event": "subscribed",
      "id": 4224847561,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQyMjQ4NDc1NjE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4224847561",
      "actor": {
        "login": "mjdietzx",
        "id": 7217256,
        "node_id": "MDQ6VXNlcjcyMTcyNTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mjdietzx",
        "html_url": "https://github.com/mjdietzx",
        "followers_url": "https://api.github.com/users/mjdietzx/followers",
        "following_url": "https://api.github.com/users/mjdietzx/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mjdietzx/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mjdietzx/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
        "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
        "repos_url": "https://api.github.com/users/mjdietzx/repos",
        "events_url": "https://api.github.com/users/mjdietzx/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-19T21:59:14Z"
    },
    {
      "event": "mentioned",
      "id": 4224847564,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDIyNDg0NzU2NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4224847564",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-19T21:59:14Z"
    },
    {
      "event": "subscribed",
      "id": 4224847568,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQyMjQ4NDc1Njg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4224847568",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-19T21:59:14Z"
    },
    {
      "event": "mentioned",
      "id": 4224847573,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDIyNDg0NzU3Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4224847573",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-19T21:59:14Z"
    },
    {
      "event": "subscribed",
      "id": 4224847578,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQyMjQ4NDc1Nzg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4224847578",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-19T21:59:14Z"
    },
    {
      "event": "mentioned",
      "id": 4224847580,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDIyNDg0NzU4MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4224847580",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-19T21:59:14Z"
    },
    {
      "event": "subscribed",
      "id": 4224847583,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQyMjQ4NDc1ODM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4224847583",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-19T21:59:14Z"
    },
    {
      "event": "unlabeled",
      "id": 4224952353,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDIyNDk1MjM1Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4224952353",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-19T22:28:00Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4228760546,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDIyODc2MDU0Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4228760546",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-20T16:17:00Z"
    },
    {
      "event": "reviewed",
      "id": 573537979,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTczNTM3OTc5",
      "url": null,
      "actor": null,
      "commit_id": "c75f7052921bc15c39d4b4272ef2c18550a51a0d",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#pullrequestreview-573537979",
      "submitted_at": "2021-01-21T16:56:51Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
    },
    {
      "event": "commented",
      "id": 765057102,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc2NTA1NzEwMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/765057102",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-22T01:45:11Z",
      "updated_at": "2021-01-22T01:45:39Z",
      "author_association": "MEMBER",
      "body": "@glozow @darosior I think we need distinctions to understand better what this package-`testmempoolaccept` is achieving for transaction chains. I agree that it lets L2 application devs manually test the mempool validity of a _static_ chain of transactions, and that way avoid to deploy a completely broken stack in production. Just note the caveat, `fRequireStandard` is false for testnet, so be careful to do dry-run in regtest.\r\n\r\nBut beyond, L2s may have _dynamic_ chain of transactions, i.e transactions function of counterparty contributions (e.g LN `update_add_htlc`) or behaviors (e.g a remote commitment broadcast). Asserting mempool validity of this type of chain is irrelevant as soon as you start to be in production, a malicious counterparty might hit a standard bound you forgot or weren't able to test during dry-runs. As a L2 dev what you're aiming for is a _txstandardness verifier_, a tool encapsulating ATMP checks. Maybe with some configurable options like `fRelaxTimelocks` or `fBypassFees` to morph the checks to your protocol flow.\r\n\r\nMy final point, we should be careful to scope this new `testmempoolaccept` to the first usage in the release notes. Just to avoid someone hoping to achieve the second usage after this change and potentially breaking stuff on dumb-or-edge cases :)\r\n\r\nI'll be back to code review soon.",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-765057102",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20833"
    },
    {
      "event": "mentioned",
      "id": 4236364752,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDIzNjM2NDc1Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4236364752",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-22T01:45:11Z"
    },
    {
      "event": "subscribed",
      "id": 4236364758,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQyMzYzNjQ3NTg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4236364758",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-22T01:45:11Z"
    },
    {
      "event": "mentioned",
      "id": 4236364760,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDIzNjM2NDc2MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4236364760",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-22T01:45:11Z"
    },
    {
      "event": "subscribed",
      "id": 4236364761,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQyMzYzNjQ3NjE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4236364761",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-22T01:45:11Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4239574788,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDIzOTU3NDc4OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4239574788",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-22T17:14:04Z"
    },
    {
      "event": "commented",
      "id": 765569041,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc2NTU2OTA0MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/765569041",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-22T17:26:14Z",
      "updated_at": "2021-01-22T17:26:14Z",
      "author_association": "MEMBER",
      "body": "@ariard\r\n> Just note the caveat, `fRequireStandard` is false for testnet, so be careful to do dry-run in regtest.\r\n\r\nI think `fRequireStandard` is [true for regtest](https://github.com/bitcoin/bitcoin/blob/32b191fb66e644c690c94cbfdae6ddbc754769d7/src/chainparams.cpp#L424) and [false for testnet](https://github.com/bitcoin/bitcoin/blob/32b191fb66e644c690c94cbfdae6ddbc754769d7/src/chainparams.cpp#L243).\r\n\r\n> My final point, we should be careful to scope this new `testmempoolaccept` to the first usage in the release notes. Just to avoid someone hoping to achieve the second usage after this change and potentially breaking stuff on dumb-or-edge cases :)\r\n\r\nI certainly hope it didn't seem like I was over-promising what this enables, agree about clearly defining the (limited) scope. I'll be sure to tag you for release notes review :)",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-765569041",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20833"
    },
    {
      "event": "mentioned",
      "id": 4239623209,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDIzOTYyMzIwOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4239623209",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-22T17:26:14Z"
    },
    {
      "event": "subscribed",
      "id": 4239623212,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQyMzk2MjMyMTI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4239623212",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-22T17:26:14Z"
    },
    {
      "event": "reviewed",
      "id": 574845534,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc0ODQ1NTM0",
      "url": null,
      "actor": null,
      "commit_id": "ebca80d81124fac369e18467e17a1bacfdbfefec",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Strong Concept ACK!",
      "user": {
        "login": "robot-dreams",
        "id": 4276679,
        "node_id": "MDQ6VXNlcjQyNzY2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4276679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/robot-dreams",
        "html_url": "https://github.com/robot-dreams",
        "followers_url": "https://api.github.com/users/robot-dreams/followers",
        "following_url": "https://api.github.com/users/robot-dreams/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/robot-dreams/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/robot-dreams/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/robot-dreams/subscriptions",
        "organizations_url": "https://api.github.com/users/robot-dreams/orgs",
        "repos_url": "https://api.github.com/users/robot-dreams/repos",
        "events_url": "https://api.github.com/users/robot-dreams/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/robot-dreams/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#pullrequestreview-574845534",
      "submitted_at": "2021-01-23T14:59:37Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
    },
    {
      "event": "reviewed",
      "id": 575534904,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc1NTM0OTA0",
      "url": null,
      "actor": null,
      "commit_id": "ebca80d81124fac369e18467e17a1bacfdbfefec",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#pullrequestreview-575534904",
      "submitted_at": "2021-01-25T15:50:51Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4256516799,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDI1NjUxNjc5OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4256516799",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-27T15:36:07Z"
    },
    {
      "event": "reviewed",
      "id": 577515495,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc3NTE1NDk1",
      "url": null,
      "actor": null,
      "commit_id": "70f84b22199cd0afffd12ea8e8934d22b0f0c7f4",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "satsie",
        "id": 1823216,
        "node_id": "MDQ6VXNlcjE4MjMyMTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1823216?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/satsie",
        "html_url": "https://github.com/satsie",
        "followers_url": "https://api.github.com/users/satsie/followers",
        "following_url": "https://api.github.com/users/satsie/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/satsie/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/satsie/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/satsie/subscriptions",
        "organizations_url": "https://api.github.com/users/satsie/orgs",
        "repos_url": "https://api.github.com/users/satsie/repos",
        "events_url": "https://api.github.com/users/satsie/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/satsie/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#pullrequestreview-577515495",
      "submitted_at": "2021-01-27T16:19:51Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
    },
    {
      "event": "commented",
      "id": 768423929,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc2ODQyMzkyOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/768423929",
      "actor": {
        "login": "dunxen",
        "id": 3072149,
        "node_id": "MDQ6VXNlcjMwNzIxNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3072149?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dunxen",
        "html_url": "https://github.com/dunxen",
        "followers_url": "https://api.github.com/users/dunxen/followers",
        "following_url": "https://api.github.com/users/dunxen/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dunxen/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dunxen/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dunxen/subscriptions",
        "organizations_url": "https://api.github.com/users/dunxen/orgs",
        "repos_url": "https://api.github.com/users/dunxen/repos",
        "events_url": "https://api.github.com/users/dunxen/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dunxen/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-27T16:56:13Z",
      "updated_at": "2021-01-27T16:56:13Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK. A great first step for packages!",
      "user": {
        "login": "dunxen",
        "id": 3072149,
        "node_id": "MDQ6VXNlcjMwNzIxNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3072149?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dunxen",
        "html_url": "https://github.com/dunxen",
        "followers_url": "https://api.github.com/users/dunxen/followers",
        "following_url": "https://api.github.com/users/dunxen/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dunxen/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dunxen/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dunxen/subscriptions",
        "organizations_url": "https://api.github.com/users/dunxen/orgs",
        "repos_url": "https://api.github.com/users/dunxen/repos",
        "events_url": "https://api.github.com/users/dunxen/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dunxen/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-768423929",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20833"
    },
    {
      "event": "reviewed",
      "id": 577522548,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc3NTIyNTQ4",
      "url": null,
      "actor": null,
      "commit_id": "70f84b22199cd0afffd12ea8e8934d22b0f0c7f4",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "I've reviewed the first two commits (up to f14f8b7390 _[refactor] return MempoolAcceptResult_)",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#pullrequestreview-577522548",
      "submitted_at": "2021-01-27T19:19:16Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4264049736,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDI2NDA0OTczNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4264049736",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-29T02:06:32Z"
    },
    {
      "event": "commented",
      "id": 769526936,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc2OTUyNjkzNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/769526936",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-29T02:14:17Z",
      "updated_at": "2021-01-29T02:14:17Z",
      "author_association": "MEMBER",
      "body": "Thanks for your review @jnewbery, addressed your comments and some other style stuff in the last push!",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-769526936",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20833"
    },
    {
      "event": "mentioned",
      "id": 4264066155,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDI2NDA2NjE1NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4264066155",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-29T02:14:17Z"
    },
    {
      "event": "subscribed",
      "id": 4264066158,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQyNjQwNjYxNTg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4264066158",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-29T02:14:17Z"
    },
    {
      "event": "reviewed",
      "id": 579491912,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc5NDkxOTEy",
      "url": null,
      "actor": null,
      "commit_id": "2fac0136138012ae26c8e12ef77e9486ad5cd831",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Reviewed Functional tests and everything looks very good. I just had a hanging question, is there a limit to the number of rawtx a user can send in a package `testmempoolaccept`?  or is the limit even necessary?",
      "user": {
        "login": "stackman27",
        "id": 26356227,
        "node_id": "MDQ6VXNlcjI2MzU2MjI3",
        "avatar_url": "https://avatars.githubusercontent.com/u/26356227?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stackman27",
        "html_url": "https://github.com/stackman27",
        "followers_url": "https://api.github.com/users/stackman27/followers",
        "following_url": "https://api.github.com/users/stackman27/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stackman27/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stackman27/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stackman27/subscriptions",
        "organizations_url": "https://api.github.com/users/stackman27/orgs",
        "repos_url": "https://api.github.com/users/stackman27/repos",
        "events_url": "https://api.github.com/users/stackman27/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stackman27/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#pullrequestreview-579491912",
      "submitted_at": "2021-01-29T17:59:51Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
    },
    {
      "event": "commented",
      "id": 770023093,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc3MDAyMzA5Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/770023093",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-29T20:08:38Z",
      "updated_at": "2021-01-29T20:08:38Z",
      "author_association": "MEMBER",
      "body": "@stackman27 that's a good point, no package limits could be a bit of a footgun even in `testmempoolaccept`. Maybe limit 25, which would be the same as `DEFAULT_DESCENDANT_LIMIT`? Mempool wouldn't consider packages larger than that anyway, and if it's not 1 package then they don't need to put it in one call.",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-770023093",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20833"
    },
    {
      "event": "mentioned",
      "id": 4267834367,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDI2NzgzNDM2Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4267834367",
      "actor": {
        "login": "stackman27",
        "id": 26356227,
        "node_id": "MDQ6VXNlcjI2MzU2MjI3",
        "avatar_url": "https://avatars.githubusercontent.com/u/26356227?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stackman27",
        "html_url": "https://github.com/stackman27",
        "followers_url": "https://api.github.com/users/stackman27/followers",
        "following_url": "https://api.github.com/users/stackman27/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stackman27/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stackman27/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stackman27/subscriptions",
        "organizations_url": "https://api.github.com/users/stackman27/orgs",
        "repos_url": "https://api.github.com/users/stackman27/repos",
        "events_url": "https://api.github.com/users/stackman27/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stackman27/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-29T20:08:39Z"
    },
    {
      "event": "subscribed",
      "id": 4267834368,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQyNjc4MzQzNjg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4267834368",
      "actor": {
        "login": "stackman27",
        "id": 26356227,
        "node_id": "MDQ6VXNlcjI2MzU2MjI3",
        "avatar_url": "https://avatars.githubusercontent.com/u/26356227?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stackman27",
        "html_url": "https://github.com/stackman27",
        "followers_url": "https://api.github.com/users/stackman27/followers",
        "following_url": "https://api.github.com/users/stackman27/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stackman27/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stackman27/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stackman27/subscriptions",
        "organizations_url": "https://api.github.com/users/stackman27/orgs",
        "repos_url": "https://api.github.com/users/stackman27/repos",
        "events_url": "https://api.github.com/users/stackman27/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stackman27/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-29T20:08:39Z"
    },
    {
      "event": "reviewed",
      "id": 577896489,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc3ODk2NDg5",
      "url": null,
      "actor": null,
      "commit_id": "f14f8b73900d2da4e15119780e19683c8499b700",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK\r\n\r\nI don't have a full understanding of the approach yet but leaving some comments and questions.",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#pullrequestreview-577896489",
      "submitted_at": "2021-01-31T20:03:14Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
    },
    {
      "event": "reviewed",
      "id": 580367672,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTgwMzY3Njcy",
      "url": null,
      "actor": null,
      "commit_id": "2fac0136138012ae26c8e12ef77e9486ad5cd831",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#pullrequestreview-580367672",
      "submitted_at": "2021-02-01T13:57:25Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
    },
    {
      "event": "reviewed",
      "id": 580388483,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTgwMzg4NDgz",
      "url": null,
      "actor": null,
      "commit_id": "2fac0136138012ae26c8e12ef77e9486ad5cd831",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "I've reviewed all the commits apart from the final _functional test for packages in RPCs_. This is looking really great!\r\n\r\nThis is turning into quite a large PR to review, with refactors and new functionality. I think it could be split to focus and aid review:\r\n\r\n- _clean up redundant conditional_, _return MempoolAcceptResult_ and _const ATMPArgs and non-const Workspace_ could be one PR. They're fairly mechanical refactors.\r\n- _remove mviewmempool backend for coins_to_uncache_ and _add CheckSequenceLocks with coinsview_ could be a second PR. They're refactors, but they need quite careful consideration because of the way you're moving around the coins views.\r\n- The rest of the commits could be a third PR.\r\n\r\nA few other comments:\r\n\r\n- In commit _[refactor] return MempoolAcceptResult_, the commit log says \"It returns a const result\". I'm not sure that makes sense.\r\n- In commit _[validation] remove mviewmempool backend for coins_to_uncache_, change mviewmempool to m_viewmempool",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#pullrequestreview-580388483",
      "submitted_at": "2021-02-01T16:19:17Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4276723950,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDI3NjcyMzk1MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4276723950",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-02T01:23:41Z"
    },
    {
      "event": "convert_to_draft",
      "id": 4276794510,
      "node_id": "MDE5OkNvbnZlcnRUb0RyYWZ0RXZlbnQ0Mjc2Nzk0NTEw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4276794510",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-02T01:53:35Z"
    },
    {
      "event": "commented",
      "id": 771294064,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc3MTI5NDA2NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/771294064",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-02T02:07:49Z",
      "updated_at": "2021-02-03T19:01:26Z",
      "author_association": "MEMBER",
      "body": "To all the lovely reviewers, as @jnewbery [pointed out](https://github.com/bitcoin/bitcoin/pull/20833#pullrequestreview-580388483), this PR is getting a little big 😅 so I've split off the refactoring commits to #21062.\r\n\r\nThanks a ton for the review @fjahr 🙏 I think I've addressed all your comments/questions.\r\n\r\n@jnewbery I've addressed most of your comments - I agree with you on returning a vector (all success) || (maybe some succeeded, one failed, and all others not-fully-validated) from `ProcessNewPackage`. Do you also recommend doing that for the `testmempoolaccept` API? Marking this as a draft so I can figure this out while the refactors are cooking, heh.",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-771294064",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20833"
    },
    {
      "event": "mentioned",
      "id": 4276828715,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDI3NjgyODcxNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4276828715",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-02T02:07:49Z"
    },
    {
      "event": "subscribed",
      "id": 4276828719,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQyNzY4Mjg3MTk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4276828719",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-02T02:07:49Z"
    },
    {
      "event": "mentioned",
      "id": 4276828720,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDI3NjgyODcyMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4276828720",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-02T02:07:49Z"
    },
    {
      "event": "subscribed",
      "id": 4276828722,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQyNzY4Mjg3MjI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4276828722",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-02T02:07:49Z"
    },
    {
      "event": "referenced",
      "id": 4319924533,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQzMTk5MjQ1MzM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4319924533",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "8e1913ae025ad8912457abe24ae5c61da02fc17a",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e1913ae025ad8912457abe24ae5c61da02fc17a",
      "created_at": "2021-02-11T13:47:12Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4322226927,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDMyMjIyNjkyNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4322226927",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-11T22:13:37Z"
    },
    {
      "event": "commented",
      "id": 777833961,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc3NzgzMzk2MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/777833961",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-11T22:26:25Z",
      "updated_at": "2021-03-02T18:28:12Z",
      "author_association": "MEMBER",
      "body": "To reviewers: #21062 is merged.\r\n~Next chunk is #21146, which is centered around `MemPoolAccept`'s interaction with the coins cache.\r\nThis PR is up-to-date so feel free to review, but we need #21146 first 😊~",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-777833961",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20833"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4361354284,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDM2MTM1NDI4NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4361354284",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-22T18:49:01Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4367024812,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDM2NzAyNDgxMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4367024812",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-23T19:32:37Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4397435003,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDM5NzQzNTAwMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4397435003",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-02T18:26:02Z"
    },
    {
      "event": "ready_for_review",
      "id": 4397474175,
      "node_id": "MDE5OlJlYWR5Rm9yUmV2aWV3RXZlbnQ0Mzk3NDc0MTc1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4397474175",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-02T18:34:21Z"
    },
    {
      "event": "commented",
      "id": 789126577,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc4OTEyNjU3Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/789126577",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-02T18:41:54Z",
      "updated_at": "2021-03-02T18:41:54Z",
      "author_association": "MEMBER",
      "body": "This is ready for review 💃  no blockers anymore\r\nThe approach has slightly changed - I'm now extending `CCoinsViewCache` to create a `CCoinsViewTemporary` (used only in mempool validation) to track package coins. They're stored at the top layer of the `MemPoolAccept` coins hierarchy, in `m_view` instead of `m_viewmempool`. And we can clear the temporary coins to reset the state without deleting`cacheCoins` :)",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-789126577",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20833"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4398658736,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDM5ODY1ODczNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4398658736",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-02T23:40:02Z"
    },
    {
      "event": "commented",
      "id": 789389804,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc4OTM4OTgwNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/789389804",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-03T02:59:39Z",
      "updated_at": "2021-03-03T02:59:39Z",
      "author_association": "MEMBER",
      "body": "Fixed CI failure",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-789389804",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20833"
    },
    {
      "event": "labeled",
      "id": 4408277121,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQ0MDgyNzcxMjE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4408277121",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-04T14:11:40Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4409066292,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDQwOTA2NjI5Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4409066292",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-04T16:32:19Z"
    },
    {
      "event": "unlabeled",
      "id": 4409608070,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDQwOTYwODA3MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4409608070",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-04T18:21:52Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 602147210,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjAyMTQ3MjEw",
      "url": null,
      "actor": null,
      "commit_id": "4b891df74160a8df0ca69ef35eedf22bf5f39a93",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#pullrequestreview-602147210",
      "submitted_at": "2021-03-04T23:35:29Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4423562399,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDQyMzU2MjM5OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4423562399",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-08T21:01:15Z"
    },
    {
      "event": "commented",
      "id": 793080147,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc5MzA4MDE0Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/793080147",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-08T21:10:50Z",
      "updated_at": "2021-03-08T21:10:50Z",
      "author_association": "MEMBER",
      "body": "Addressed @Xekyo's comments, added more tests",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-793080147",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20833"
    },
    {
      "event": "mentioned",
      "id": 4423602920,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDQyMzYwMjkyMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4423602920",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-08T21:10:51Z"
    },
    {
      "event": "subscribed",
      "id": 4423602921,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQ0MjM2MDI5MjE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4423602921",
      "actor": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-08T21:10:51Z"
    },
    {
      "event": "added_to_project",
      "id": 4454027336,
      "node_id": "MDE5OkFkZGVkVG9Qcm9qZWN0RXZlbnQ0NDU0MDI3MzM2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4454027336",
      "actor": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-13T17:00:20Z",
      "project_card": {
        "id": 56832398,
        "url": "https://api.github.com/projects/columns/cards/56832398",
        "project_id": 3826895,
        "project_url": "https://api.github.com/projects/3826895",
        "column_name": "Package Relay"
      }
    },
    {
      "event": "reviewed",
      "id": 612313192,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjEyMzEzMTky",
      "url": null,
      "actor": null,
      "commit_id": "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#pullrequestreview-612313192",
      "submitted_at": "2021-03-15T17:12:58Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
    },
    {
      "event": "reviewed",
      "id": 614162419,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjE0MTYyNDE5",
      "url": null,
      "actor": null,
      "commit_id": "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Looking really good. Some comments inline.",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#pullrequestreview-614162419",
      "submitted_at": "2021-03-17T12:36:45Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
    },
    {
      "event": "labeled",
      "id": 4470004612,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQ0NzAwMDQ2MTI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4470004612",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-17T12:45:07Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4479699304,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDQ3OTY5OTMwNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4479699304",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-19T02:32:52Z"
    },
    {
      "event": "unlabeled",
      "id": 4480009131,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDQ4MDAwOTEzMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4480009131",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-19T04:25:17Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 616250661,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjE2MjUwNjYx",
      "url": null,
      "actor": null,
      "commit_id": "917d4b7cc5347c2bc6f17acd267ea3cccd5f1b75",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#pullrequestreview-616250661",
      "submitted_at": "2021-03-19T11:04:45Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4524398604,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDUyNDM5ODYwNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4524398604",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-29T23:49:16Z"
    },
    {
      "event": "added_to_project",
      "id": 4542956654,
      "node_id": "MDE5OkFkZGVkVG9Qcm9qZWN0RXZlbnQ0NTQyOTU2NjU0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4542956654",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-01T19:10:51Z",
      "project_card": {
        "id": 58200513,
        "url": "https://api.github.com/projects/columns/cards/58200513",
        "project_id": 481835,
        "project_url": "https://api.github.com/projects/481835",
        "column_name": "Blockers"
      }
    },
    {
      "event": "commented",
      "id": 812293370,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgxMjI5MzM3MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/812293370",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-02T03:12:33Z",
      "updated_at": "2021-04-02T03:14:18Z",
      "author_association": "MEMBER",
      "body": "Thanks for the update, I'll review back soon, especially the well-foundness of new packages limits (`MAX_PACKAGE_COUNT`/`MAX_PACKAGE_SIZE`). \r\n\r\nWhat do you think about disabling RBF logic for package-testmempoolaccept ? I.e returning a package failure if one utxo is already spent, no matter the signaling of the conflicting transaction. It would fix this current [issue](https://github.com/bitcoin/bitcoin/pull/20833/#discussion_r594478671) and I believe we'll need to rethink rbf-handling of package in future works anyway.\r\n\r\nAlso, as L2 protocols are in fine transactions caching layers, if while testing pre-signed transactions testmempool acceptance you already have a conflicting transactions, that's a hint something is wrong. Like either the off-chain contract is already broken or your private keys for the shared-utxo have already leaked.\r\n\r\nBeyond what do you think about auditing how current mempool logic is servicing L2s before to complexify further with this PR ? We might already have issues there.",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-812293370",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20833"
    },
    {
      "event": "reviewed",
      "id": 627115608,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjI3MTE1NjA4",
      "url": null,
      "actor": null,
      "commit_id": "78ab8b1da104e76445e65aa7e2db54d338e0b99a",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#pullrequestreview-627115608",
      "submitted_at": "2021-04-02T18:22:58Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
    },
    {
      "event": "commented",
      "id": 812744661,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgxMjc0NDY2MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/812744661",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-02T22:47:42Z",
      "updated_at": "2021-04-02T22:48:17Z",
      "author_association": "MEMBER",
      "body": "> What do you think about disabling RBF logic for package-testmempoolaccept ? I.e returning a package failure if one utxo is already spent, no matter the signaling of the conflicting transaction. It would fix this current issue and I believe we'll need to rethink rbf-handling of package in future works anyway.\r\n\r\nYes, I'd prefer this. I don't think there's a use case for having RBFing in packages - if there is, we can add it later after thinking through the edge cases. Will update this to disable RBF.",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-812744661",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20833"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4587838852,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDU4NzgzODg1Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4587838852",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-13T12:44:32Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4587884842,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDU4Nzg4NDg0Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4587884842",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-13T12:53:54Z"
    },
    {
      "event": "commented",
      "id": 818714189,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgxODcxNDE4OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/818714189",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-13T12:57:33Z",
      "updated_at": "2021-04-13T15:32:07Z",
      "author_association": "MEMBER",
      "body": "Thanks for the reviews so far! Pushed a bunch of stuff (mostly tests):\r\n- Separated package limits, sorting, and RBF stuff for packages as [policy] since they are opinionated.\r\n- Added the logic to disallow all conflicts with mempool transactions (thereby disabling RBF) in packages.\r\n- Extended the mempool fuzzer to check that test accepting using ATMP and ProcessNewPackage (always just 1 transaction) should be identical. Will be sure to update with package submission when I add that (in a future PR).\r\n- Added some logic + tests for detecting mempool and package ancestor/descendant limits. I'm using a heuristic where I count every transaction in the package as each other's ancestor and descendant. The idea is that their total ancestor and descendant chains should never exceed what we'd allow for a single transaction without exhaustively checking every ancestor/descendant count. The heuristic can overestimate the \"family\" sizes for packages of size > 2 where not every transaction is interdependent, but I don't think it's significant for the use cases we care about (usually a package of parent + child).",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-818714189",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20833"
    },
    {
      "event": "reviewed",
      "id": 636089652,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjM2MDg5NjUy",
      "url": null,
      "actor": null,
      "commit_id": "cc00a859deef3701f5d9fb8e7076a074b26f7892",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#pullrequestreview-636089652",
      "submitted_at": "2021-04-14T21:19:31Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
    },
    {
      "event": "reviewed",
      "id": 636091017,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjM2MDkxMDE3",
      "url": null,
      "actor": null,
      "commit_id": "cc00a859deef3701f5d9fb8e7076a074b26f7892",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#pullrequestreview-636091017",
      "submitted_at": "2021-04-14T21:21:25Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
    },
    {
      "event": "reviewed",
      "id": 636099760,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjM2MDk5NzYw",
      "url": null,
      "actor": null,
      "commit_id": "cc00a859deef3701f5d9fb8e7076a074b26f7892",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#pullrequestreview-636099760",
      "submitted_at": "2021-04-14T21:34:45Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
    },
    {
      "event": "reviewed",
      "id": 636101131,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjM2MTAxMTMx",
      "url": null,
      "actor": null,
      "commit_id": "cc00a859deef3701f5d9fb8e7076a074b26f7892",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#pullrequestreview-636101131",
      "submitted_at": "2021-04-14T21:36:47Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
    },
    {
      "event": "reviewed",
      "id": 636103144,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjM2MTAzMTQ0",
      "url": null,
      "actor": null,
      "commit_id": "cc00a859deef3701f5d9fb8e7076a074b26f7892",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#pullrequestreview-636103144",
      "submitted_at": "2021-04-14T21:39:59Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
    },
    {
      "event": "reviewed",
      "id": 636118199,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjM2MTE4MTk5",
      "url": null,
      "actor": null,
      "commit_id": "cc00a859deef3701f5d9fb8e7076a074b26f7892",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#pullrequestreview-636118199",
      "submitted_at": "2021-04-14T22:05:59Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
    },
    {
      "event": "reviewed",
      "id": 636120004,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjM2MTIwMDA0",
      "url": null,
      "actor": null,
      "commit_id": "cc00a859deef3701f5d9fb8e7076a074b26f7892",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#pullrequestreview-636120004",
      "submitted_at": "2021-04-14T22:09:26Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
    },
    {
      "event": "reviewed",
      "id": 636125639,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjM2MTI1NjM5",
      "url": null,
      "actor": null,
      "commit_id": "cc00a859deef3701f5d9fb8e7076a074b26f7892",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#pullrequestreview-636125639",
      "submitted_at": "2021-04-14T22:19:30Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
    },
    {
      "event": "reviewed",
      "id": 636126651,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjM2MTI2NjUx",
      "url": null,
      "actor": null,
      "commit_id": "cc00a859deef3701f5d9fb8e7076a074b26f7892",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#pullrequestreview-636126651",
      "submitted_at": "2021-04-14T22:21:30Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
    },
    {
      "event": "reviewed",
      "id": 636140114,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjM2MTQwMTE0",
      "url": null,
      "actor": null,
      "commit_id": "cc00a859deef3701f5d9fb8e7076a074b26f7892",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#pullrequestreview-636140114",
      "submitted_at": "2021-04-14T22:49:54Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
    },
    {
      "event": "reviewed",
      "id": 636142309,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjM2MTQyMzA5",
      "url": null,
      "actor": null,
      "commit_id": "cc00a859deef3701f5d9fb8e7076a074b26f7892",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#pullrequestreview-636142309",
      "submitted_at": "2021-04-14T22:54:56Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
    },
    {
      "event": "reviewed",
      "id": 636153480,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjM2MTUzNDgw",
      "url": null,
      "actor": null,
      "commit_id": "cc00a859deef3701f5d9fb8e7076a074b26f7892",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#pullrequestreview-636153480",
      "submitted_at": "2021-04-14T23:18:35Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
    },
    {
      "event": "reviewed",
      "id": 636154571,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjM2MTU0NTcx",
      "url": null,
      "actor": null,
      "commit_id": "cc00a859deef3701f5d9fb8e7076a074b26f7892",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#pullrequestreview-636154571",
      "submitted_at": "2021-04-14T23:21:14Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
    },
    {
      "event": "reviewed",
      "id": 636156477,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjM2MTU2NDc3",
      "url": null,
      "actor": null,
      "commit_id": "cc00a859deef3701f5d9fb8e7076a074b26f7892",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#pullrequestreview-636156477",
      "submitted_at": "2021-04-14T23:25:51Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
    },
    {
      "event": "reviewed",
      "id": 636162504,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjM2MTYyNTA0",
      "url": null,
      "actor": null,
      "commit_id": "cc00a859deef3701f5d9fb8e7076a074b26f7892",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#pullrequestreview-636162504",
      "submitted_at": "2021-04-14T23:40:51Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
    },
    {
      "event": "reviewed",
      "id": 636162946,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjM2MTYyOTQ2",
      "url": null,
      "actor": null,
      "commit_id": "cc00a859deef3701f5d9fb8e7076a074b26f7892",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#pullrequestreview-636162946",
      "submitted_at": "2021-04-14T23:41:57Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
    },
    {
      "event": "reviewed",
      "id": 636183952,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjM2MTgzOTUy",
      "url": null,
      "actor": null,
      "commit_id": "cc00a859deef3701f5d9fb8e7076a074b26f7892",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#pullrequestreview-636183952",
      "submitted_at": "2021-04-15T00:40:48Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
    },
    {
      "event": "reviewed",
      "id": 636191699,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjM2MTkxNjk5",
      "url": null,
      "actor": null,
      "commit_id": "cc00a859deef3701f5d9fb8e7076a074b26f7892",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#pullrequestreview-636191699",
      "submitted_at": "2021-04-15T01:03:25Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
    },
    {
      "event": "reviewed",
      "id": 636195304,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjM2MTk1MzA0",
      "url": null,
      "actor": null,
      "commit_id": "cc00a859deef3701f5d9fb8e7076a074b26f7892",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#pullrequestreview-636195304",
      "submitted_at": "2021-04-15T01:14:00Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
    },
    {
      "event": "reviewed",
      "id": 636196417,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjM2MTk2NDE3",
      "url": null,
      "actor": null,
      "commit_id": "cc00a859deef3701f5d9fb8e7076a074b26f7892",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#pullrequestreview-636196417",
      "submitted_at": "2021-04-15T01:17:09Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
    },
    {
      "event": "reviewed",
      "id": 636199424,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjM2MTk5NDI0",
      "url": null,
      "actor": null,
      "commit_id": "cc00a859deef3701f5d9fb8e7076a074b26f7892",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#pullrequestreview-636199424",
      "submitted_at": "2021-04-15T01:26:13Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
    },
    {
      "event": "commented",
      "id": 819954128,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgxOTk1NDEyOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/819954128",
      "actor": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-15T01:30:21Z",
      "updated_at": "2021-04-15T01:30:21Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK and approach ack.\r\n\r\ncode looks pretty decent, didn't do a fine tooth combed review yet though.\r\n",
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-819954128",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20833"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4606813895,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDYwNjgxMzg5NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4606813895",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-16T20:54:29Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4606961919,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDYwNjk2MTkxOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4606961919",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-16T21:43:38Z"
    },
    {
      "event": "labeled",
      "id": 4608116200,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQ2MDgxMTYyMDA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4608116200",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-17T16:26:51Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4608150343,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDYwODE1MDM0Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4608150343",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-17T17:03:37Z"
    },
    {
      "event": "commented",
      "id": 821854801,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgyMTg1NDgwMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/821854801",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-17T17:06:08Z",
      "updated_at": "2021-04-17T17:06:08Z",
      "author_association": "MEMBER",
      "body": "Rebased. Looking into the fuzzer issue",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-821854801",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20833"
    },
    {
      "event": "unlabeled",
      "id": 4608255890,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDYwODI1NTg5MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4608255890",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-17T18:31:19Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 638277032,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjM4Mjc3MDMy",
      "url": null,
      "actor": null,
      "commit_id": "b93442473f4f929912740682865397411e84be9b",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#pullrequestreview-638277032",
      "submitted_at": "2021-04-17T21:45:04Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
    },
    {
      "event": "reviewed",
      "id": 638277554,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjM4Mjc3NTU0",
      "url": null,
      "actor": null,
      "commit_id": "b93442473f4f929912740682865397411e84be9b",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#pullrequestreview-638277554",
      "submitted_at": "2021-04-17T21:56:18Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4615051286,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDYxNTA1MTI4Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4615051286",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-19T20:33:27Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4615233391,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDYxNTIzMzM5MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4615233391",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-19T21:09:13Z"
    },
    {
      "event": "reviewed",
      "id": 642501858,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjQyNTAxODU4",
      "url": null,
      "actor": null,
      "commit_id": "9ce7b0f3850a0d69e81a68f18906a9d1aa4356fb",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#pullrequestreview-642501858",
      "submitted_at": "2021-04-22T18:30:21Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
    },
    {
      "event": "reviewed",
      "id": 642547262,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjQyNTQ3MjYy",
      "url": null,
      "actor": null,
      "commit_id": "9ce7b0f3850a0d69e81a68f18906a9d1aa4356fb",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Okay, submission of independent groups of transaction is the last concern I've about the API, otherwise I think it's good. Still reviewing code modularity/test coverage.",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#pullrequestreview-642547262",
      "submitted_at": "2021-04-22T18:33:12Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
    },
    {
      "event": "reviewed",
      "id": 643096783,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjQzMDk2Nzgz",
      "url": null,
      "actor": null,
      "commit_id": "9ce7b0f3850a0d69e81a68f18906a9d1aa4356fb",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#pullrequestreview-643096783",
      "submitted_at": "2021-04-23T09:17:46Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
    },
    {
      "event": "reviewed",
      "id": 643022948,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjQzMDIyOTQ4",
      "url": null,
      "actor": null,
      "commit_id": "9ce7b0f3850a0d69e81a68f18906a9d1aa4356fb",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "This is looking really, really good now. The tests especially are very thorough and easy to read. Excellent work!\r\n\r\nI've left a bunch of comments, but they're mainly style related.\r\n\r\nThis will also need a release note explaining the new functionality, and particularly the limitations (ancestor/descendant limits, no RBF, etc).",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#pullrequestreview-643022948",
      "submitted_at": "2021-04-23T12:28:26Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4646207503,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDY0NjIwNzUwMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4646207503",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-26T17:02:15Z"
    },
    {
      "event": "commented",
      "id": 827248427,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgyNzI0ODQyNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/827248427",
      "actor": {
        "login": "adamjonas",
        "id": 755825,
        "node_id": "MDQ6VXNlcjc1NTgyNQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/755825?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/adamjonas",
        "html_url": "https://github.com/adamjonas",
        "followers_url": "https://api.github.com/users/adamjonas/followers",
        "following_url": "https://api.github.com/users/adamjonas/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/adamjonas/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/adamjonas/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/adamjonas/subscriptions",
        "organizations_url": "https://api.github.com/users/adamjonas/orgs",
        "repos_url": "https://api.github.com/users/adamjonas/repos",
        "events_url": "https://api.github.com/users/adamjonas/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/adamjonas/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-27T01:46:58Z",
      "updated_at": "2021-04-27T01:46:58Z",
      "author_association": "MEMBER",
      "body": "I'm having difficulty tracking down the cause, but one can reproduce the fuzzer crash with this:\r\n```\r\necho 'dXXi9XV1Dv//X3AAAd3gMMCvoUAAAP//AAABCzYBAL//MQDQ' | base64 --decode  > /tmp/a\r\nFUZZ=tx_pool_standard ./src/test/fuzz/fuzz /tmp/a\r\n```\r\n\r\nUsing the added fuzzer from the last commit, I was able to go back to 2f1d035 to trigger a crash (which is where the methods are added).",
      "user": {
        "login": "adamjonas",
        "id": 755825,
        "node_id": "MDQ6VXNlcjc1NTgyNQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/755825?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/adamjonas",
        "html_url": "https://github.com/adamjonas",
        "followers_url": "https://api.github.com/users/adamjonas/followers",
        "following_url": "https://api.github.com/users/adamjonas/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/adamjonas/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/adamjonas/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/adamjonas/subscriptions",
        "organizations_url": "https://api.github.com/users/adamjonas/orgs",
        "repos_url": "https://api.github.com/users/adamjonas/repos",
        "events_url": "https://api.github.com/users/adamjonas/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/adamjonas/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-827248427",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20833"
    },
    {
      "event": "reviewed",
      "id": 646021893,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjQ2MDIxODkz",
      "url": null,
      "actor": null,
      "commit_id": "8d95509150111b4fd77d2232f9c7d096b66abd23",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#pullrequestreview-646021893",
      "submitted_at": "2021-04-27T18:03:41Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4653496805,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDY1MzQ5NjgwNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4653496805",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-27T22:39:19Z"
    },
    {
      "event": "referenced",
      "id": 4654610600,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ2NTQ2MTA2MDA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4654610600",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "edf679503c55f4a119e6c64b76ba20e71a46d27a",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/edf679503c55f4a119e6c64b76ba20e71a46d27a",
      "created_at": "2021-04-28T06:07:38Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4657938498,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDY1NzkzODQ5OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4657938498",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-28T16:19:46Z"
    },
    {
      "event": "referenced",
      "id": 4658084392,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ2NTgwODQzOTI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4658084392",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "dd929c7eea913692fbb0e90122d8e7d5c584e62f",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/dd929c7eea913692fbb0e90122d8e7d5c584e62f",
      "created_at": "2021-04-28T16:47:36Z"
    },
    {
      "event": "commented",
      "id": 828725998,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgyODcyNTk5OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/828725998",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-28T19:37:46Z",
      "updated_at": "2021-04-28T19:37:46Z",
      "author_association": "MEMBER",
      "body": "Note to reviewers:\r\n\r\n#21783 shaved off the first commit 🍧 \r\nI've reordered the commits and moved the ancestor/descendant limit stuff to #21800. I feel that this is safe to do because ancestor/descendant limits are designed to protect us from heavy computation due to large families _in the mempool_. This PR may underestimate during the test accept, but the only way to submit these transactions is one-by-one through ATMP (which enforces the actual ancestor/descendant limits). Thus, this code doesn't create a risk of the mempool exceeding our normal limits. The only problem is that `testmempoolaccept` might incorrectly report success because it underestimates ancestors, so I've noted that in the release notes.\r\n\r\nI've also deferred the fuzz test (which asserted identical results between `ProcessNewPackage(1 tx)` and `ATMP(1 tx)` since package policies are starting to diverge from normal policy and have been changing a bunch.\r\n\r\ntldr: this PR is now smaller, and hopefully easier to review!",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-828725998",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20833"
    },
    {
      "event": "reviewed",
      "id": 649923450,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjQ5OTIzNDUw",
      "url": null,
      "actor": null,
      "commit_id": "03fdad5ce2c2d9c592e2516251a4b2b3b61bbe00",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#pullrequestreview-649923450",
      "submitted_at": "2021-05-02T16:48:31Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4679283735,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDY3OTI4MzczNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4679283735",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-03T17:24:59Z"
    },
    {
      "event": "commented",
      "id": 831410252,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgzMTQxMDI1Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/831410252",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-03T17:26:42Z",
      "updated_at": "2021-05-03T17:26:42Z",
      "author_association": "MEMBER",
      "body": "Thanks @mzumsande! Last push:\r\n- Added some checks and tests for empty package, nullptrs, and null transactions\r\n- Fixed `resize()` -> `reserve()` in https://github.com/bitcoin/bitcoin/pull/20833#discussion_r624705935\r\n- Added a quick call to `ProcessNewPackage` in the tx_pool fuzzer. All it does is make sure it doesn't throw and gets a fully validated result.\r\n- Fixed rpc doc typo https://github.com/bitcoin/bitcoin/pull/20833#discussion_r624711515\r\n- Rebased on master for the p2p_segwit.py fix",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-831410252",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20833"
    },
    {
      "event": "mentioned",
      "id": 4679291360,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDY3OTI5MTM2MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4679291360",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-03T17:26:42Z"
    },
    {
      "event": "subscribed",
      "id": 4679291366,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQ2NzkyOTEzNjY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4679291366",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-03T17:26:42Z"
    },
    {
      "event": "reviewed",
      "id": 651417784,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjUxNDE3Nzg0",
      "url": null,
      "actor": null,
      "commit_id": "d8642c19991ca91ae7edeab82d3409a73fcfdb56",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#pullrequestreview-651417784",
      "submitted_at": "2021-05-04T17:14:03Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4685969539,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDY4NTk2OTUzOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4685969539",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-04T22:22:09Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4689931536,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDY4OTkzMTUzNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4689931536",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-05T15:54:17Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4690233767,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDY5MDIzMzc2Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4690233767",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-05T16:49:02Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4692174183,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDY5MjE3NDE4Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4692174183",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-06T00:27:04Z"
    },
    {
      "event": "commented",
      "id": 833141681,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgzMzE0MTY4MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/833141681",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-06T00:35:52Z",
      "updated_at": "2021-05-06T00:35:52Z",
      "author_association": "MEMBER",
      "body": "Recent pushes\r\n\r\n* Added `assert`s for the precondition of non-empty packages and no nullptrs in packages (context: https://github.com/bitcoin/bitcoin/pull/20833#discussion_r624955595 and https://github.com/bitcoin/bitcoin/pull/20833#discussion_r626148257)\r\n* Added a function `assert_testres_equal()` that shuffles packages before asserting that the testmempoolaccept result matches, edited the tests to use this function in all cases where the order shouldn't matter (context: https://github.com/bitcoin/bitcoin/pull/20833#discussion_r625954431).\r\n* Removed the `::ChainstateActive()` calls I had accidentally re-introduced in unit tests\r\n* Rebased to fix CI issues",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-833141681",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20833"
    },
    {
      "event": "reviewed",
      "id": 655769596,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjU1NzY5NTk2",
      "url": null,
      "actor": null,
      "commit_id": "aae6c0b7ef41c39770371a9f7cca4a0138c6fb4b",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#pullrequestreview-655769596",
      "submitted_at": "2021-05-10T15:17:29Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
    },
    {
      "event": "reviewed",
      "id": 655648021,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjU1NjQ4MDIx",
      "url": null,
      "actor": null,
      "commit_id": "d93d51f1132bc6ae54f7d23a5bbb434ce01b7c37",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "I had a look on my previous reviews and I think all my comments have been addressed or noted for follow-ups (at least the ones not swallowed by GH).\r\n\r\nAs other comments unresolved I think we have this [one](https://github.com/bitcoin/bitcoin/pull/20833/files#r619141139), do we have others ? ",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#pullrequestreview-655648021",
      "submitted_at": "2021-05-10T16:54:02Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
    },
    {
      "event": "reviewed",
      "id": 654422532,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjU0NDIyNTMy",
      "url": null,
      "actor": null,
      "commit_id": "116fc35d2d8dd66a14d90b598f9bbafcee032467",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK. Not too experienced in validation, but I reviewed the code and played around with the tests and the RPC, and it looks really good to me - some small points below.",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#pullrequestreview-654422532",
      "submitted_at": "2021-05-10T21:21:29Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
    },
    {
      "event": "reviewed",
      "id": 656398992,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjU2Mzk4OTky",
      "url": null,
      "actor": null,
      "commit_id": "d93d51f1132bc6ae54f7d23a5bbb434ce01b7c37",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#pullrequestreview-656398992",
      "submitted_at": "2021-05-11T08:00:15Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
    },
    {
      "event": "reviewed",
      "id": 656426559,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjU2NDI2NTU5",
      "url": null,
      "actor": null,
      "commit_id": "d93d51f1132bc6ae54f7d23a5bbb434ce01b7c37",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#pullrequestreview-656426559",
      "submitted_at": "2021-05-11T08:44:57Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4730189714,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDczMDE4OTcxNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4730189714",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-11T18:25:04Z"
    },
    {
      "event": "commented",
      "id": 838968982,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgzODk2ODk4Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/838968982",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-11T18:34:45Z",
      "updated_at": "2021-05-11T18:34:45Z",
      "author_association": "MEMBER",
      "body": "Bigger changes:\r\n\r\n- Rolled the “disable RBF” logic into the package accept commit, because it’s a key part of why the logic is correct (mainly just reordering the commits, overall diff is the same).\r\n- An offline discussion with @sdaftuar helped me realize that the temporary coins fit more naturally in `m_viewmempool`. I’ve reverted back to adding a temporary map in `CCoinsViewMemPool` instead of creating a new `CoinsViewTemporary`. Also removed `m_temp_spent`  which is no longer necessary since conflicts are checked ahead of time and RBF is disabled from the get-go. This also has the added benefit of simplifying the diff, not touching coins.h, and bloating validation.cpp much less.\r\n\r\nSmaller changes:\r\n\r\n- Added check for empty array passed into testmempoolaccept (also added a test case for that in mempool_accept.py), see https://github.com/bitcoin/bitcoin/pull/20833#discussion_r628185183\r\n- Fixed indentation issues, use references in for range loop, report which tx fails to decode\r\n- Updated the release notes to hopefully be more clear\r\n",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-838968982",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20833"
    },
    {
      "event": "mentioned",
      "id": 4730276855,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDczMDI3Njg1NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4730276855",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-11T18:34:45Z"
    },
    {
      "event": "subscribed",
      "id": 4730276859,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQ3MzAyNzY4NTk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4730276859",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-11T18:34:45Z"
    },
    {
      "event": "commented",
      "id": 839081655,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgzOTA4MTY1NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/839081655",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-11T19:57:28Z",
      "updated_at": "2021-05-11T19:57:28Z",
      "author_association": "MEMBER",
      "body": "Github is struggling to load past comments, so I've compiled summaries/links for most of the hawt topics of discussion in this [gist](https://gist.github.com/glozow/c3acaf161c95bba491fce31585b2aaf7). It's not an exhaustive list of everything that's been discussed, but if you're wondering \"has this already been discussed?\" you might find something useful there. I also don't mind if you write a review comment that's been said before.\r\n\r\nPlease note that while this PR is hoping to lay some groundwork for Package Relay, we're only trying to do test accepts via RPC here :) some discussions might be better for #14895. I appreciate everyone's feedback! 🤗 ",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-839081655",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20833"
    },
    {
      "event": "reviewed",
      "id": 657267849,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjU3MjY3ODQ5",
      "url": null,
      "actor": null,
      "commit_id": "ff79bbfbdf8d630b80583000f4ce79f553cb562c",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Code Review ACK d93d51f1132bc6ae54f7d23a5bbb434ce01b7c37",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#pullrequestreview-657267849",
      "submitted_at": "2021-05-11T22:10:05Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
    },
    {
      "event": "reviewed",
      "id": 660969199,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjYwOTY5MTk5",
      "url": null,
      "actor": null,
      "commit_id": "1bb8fa3a454a8e47972234855efe8f81ab18f355",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Code review ACK 1bb8fa3a454a8e47972234855efe8f81ab18f355",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#pullrequestreview-660969199",
      "submitted_at": "2021-05-17T13:30:43Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
    },
    {
      "event": "labeled",
      "id": 4775793071,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQ3NzU3OTMwNzE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4775793071",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-20T20:20:06Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MmNmOGIyNWRmMDdjNDU1NjJiNzIxMGUwZTE1YzNmZDVlZGIyYzEx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/42cf8b25df07c45562b7210e0e15c3fd5edb2c11",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/42cf8b25df07c45562b7210e0e15c3fd5edb2c11",
      "tree": {
        "sha": "4de5e6b16a997889faf3a055f6037b5e5f68ffc9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4de5e6b16a997889faf3a055f6037b5e5f68ffc9"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/710c8ba82953c5fdb7c3c8c9ad6ecf0fd88dface",
          "sha": "710c8ba82953c5fdb7c3c8c9ad6ecf0fd88dface",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/710c8ba82953c5fdb7c3c8c9ad6ecf0fd88dface"
        }
      ],
      "message": "[validation] make CheckSequenceLocks context-free\n\nAllow CheckSequenceLocks to use heights and coins from any CoinsView and\nCBlockIndex provided. This means that CheckSequenceLocks() doesn't need\nto hold the mempool lock or cs_main. The caller is responsible for\nensuring the CoinsView and CBlockIndex are consistent before passing\nthem in. The typical usage is still to create a CCoinsViewMemPool from\nthe mempool and grab the CBlockIndex from the chainstate tip.",
      "committer": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-05-20T20:34:31Z"
      },
      "author": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-02-11T17:36:20Z"
      },
      "sha": "42cf8b25df07c45562b7210e0e15c3fd5edb2c11"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4OTdlMzQ4ZjU5ODdlYWRkODU1OTk4MWE5NzNjMDQ1YzQ3MWIzYWQ4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/897e348f5987eadd8559981a973c045c471b3ad8",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/897e348f5987eadd8559981a973c045c471b3ad8",
      "tree": {
        "sha": "945a1f4e40e229d19b74db6029441ad8a055fa1b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/945a1f4e40e229d19b74db6029441ad8a055fa1b"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/42cf8b25df07c45562b7210e0e15c3fd5edb2c11",
          "sha": "42cf8b25df07c45562b7210e0e15c3fd5edb2c11",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/42cf8b25df07c45562b7210e0e15c3fd5edb2c11"
        }
      ],
      "message": "[coins/mempool] extend CCoinsViewMemPool to track temporary coins",
      "committer": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-05-20T20:34:31Z"
      },
      "author": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-05-10T16:30:14Z"
      },
      "sha": "897e348f5987eadd8559981a973c045c471b3ad8"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNDlmNDNmM2NjNTJiMGZmZGYyYzQ3YWFkOTViYTlkMTk1ZjZhNDVl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/249f43f3cc52b0ffdf2c47aad95ba9d195f6a45e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/249f43f3cc52b0ffdf2c47aad95ba9d195f6a45e",
      "tree": {
        "sha": "9d30476398a6c46828da3770a26b6c79d26e1443",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9d30476398a6c46828da3770a26b6c79d26e1443"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/897e348f5987eadd8559981a973c045c471b3ad8",
          "sha": "897e348f5987eadd8559981a973c045c471b3ad8",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/897e348f5987eadd8559981a973c045c471b3ad8"
        }
      ],
      "message": "[refactor] add option to disable RBF\n\nThis is a mere refactor for now. We will use this to disable RBFing in\npackage validation.",
      "committer": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-05-20T20:34:31Z"
      },
      "author": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-04-05T19:36:57Z"
      },
      "sha": "249f43f3cc52b0ffdf2c47aad95ba9d195f6a45e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiODhkNzdhZWM1ZTdiZWY1MzA1YTY2OGQxNTAzMTM1MWMwNTQ4YjRk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b88d77aec5e7bef5305a668d15031351c0548b4d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/b88d77aec5e7bef5305a668d15031351c0548b4d",
      "tree": {
        "sha": "f579f8c5ab082d4e928bd1e5d793572b4125c1cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f579f8c5ab082d4e928bd1e5d793572b4125c1cd"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/249f43f3cc52b0ffdf2c47aad95ba9d195f6a45e",
          "sha": "249f43f3cc52b0ffdf2c47aad95ba9d195f6a45e",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/249f43f3cc52b0ffdf2c47aad95ba9d195f6a45e"
        }
      ],
      "message": "[policy] Define packages\n\nDefine the Package type as an alias for a vector of transactions for now.\nAdd PackageValidationResult, similar to TxValidationResult and\nBlockValidationResult for package-wide errors that cannot be reported\nwithin a single transaction result, such as having too many\ntransactions in the package. We can update the concept of\nwhat a package is and have different logic for packages vs lists of\ntransactions in the future, e.g. for package relay.",
      "committer": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-05-20T20:34:31Z"
      },
      "author": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-02-11T17:50:42Z"
      },
      "sha": "b88d77aec5e7bef5305a668d15031351c0548b4d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NzgxNDhkZWQ2MjgyOGE5ODIwMzk4MTY1YzQxNjcwZjRkYmI1MjNk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/578148ded62828a9820398165c41670f4dbb523d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/578148ded62828a9820398165c41670f4dbb523d",
      "tree": {
        "sha": "d8fd7377ba8777ccfa475f777090a53b807144d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d8fd7377ba8777ccfa475f777090a53b807144d5"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b88d77aec5e7bef5305a668d15031351c0548b4d",
          "sha": "b88d77aec5e7bef5305a668d15031351c0548b4d",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/b88d77aec5e7bef5305a668d15031351c0548b4d"
        }
      ],
      "message": "[validation] explicit Success/Failure ctors for MempoolAcceptResult\n\nMakes code more clear and prevents accidentally calling the wrong ctor.",
      "committer": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-05-20T20:34:31Z"
      },
      "author": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-05-20T20:22:35Z"
      },
      "sha": "578148ded62828a9820398165c41670f4dbb523d"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4775908760,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDc3NTkwODc2MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4775908760",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-20T20:44:09Z"
    },
    {
      "event": "commented",
      "id": 845504743,
      "node_id": "MDEyOklzc3VlQ29tbWVudDg0NTUwNDc0Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/845504743",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-20T21:59:09Z",
      "updated_at": "2021-05-20T21:59:29Z",
      "author_association": "MEMBER",
      "body": "Rebased on master, split up a commit into 2 (https://github.com/bitcoin/bitcoin/pull/20833#discussion_r630571069), made a release-notes-20833.md. No other changes.",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-845504743",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20833"
    },
    {
      "event": "unlabeled",
      "id": 4776293300,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDc3NjI5MzMwMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4776293300",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-20T22:25:34Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 666022819,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjY2MDIyODE5",
      "url": null,
      "actor": null,
      "commit_id": "930c6d3b12a6d3647dc47177c4d625956c77a77f",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Still reviewing, thanks for the changes related to ctors and dropping CoinsViewTemporary, make the PR clearer.",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#pullrequestreview-666022819",
      "submitted_at": "2021-05-21T23:10:07Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZWYxODc5NDFkYjQzOWM1YjNlNTI5ZjA4YjZhYjE1M2ZmMDYxZmM1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2ef187941db439c5b3e529f08b6ab153ff061fc5",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/2ef187941db439c5b3e529f08b6ab153ff061fc5",
      "tree": {
        "sha": "e0b09e18c6e411566b0a4db3e210bde2b7a73133",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e0b09e18c6e411566b0a4db3e210bde2b7a73133"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/578148ded62828a9820398165c41670f4dbb523d",
          "sha": "578148ded62828a9820398165c41670f4dbb523d",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/578148ded62828a9820398165c41670f4dbb523d"
        }
      ],
      "message": "[validation] package validation for test accepts\n\nOnly allow test accepts for now. Use the CoinsViewTemporary to keep\ntrack of coins created by each transaction so that subsequent\ntransactions can spend them. Uncache all coins since we only\never do test accepts (Note this is different from ATMP which doesn't\nuncache for valid test_accepts) to minimize impact on the coins cache.\n\nRequire that the input txns have no conflicts and be ordered\ntopologically. This commit isn't able to detect unsorted packages.",
      "committer": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-05-24T13:42:10Z"
      },
      "author": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-04-05T17:12:58Z"
      },
      "sha": "2ef187941db439c5b3e529f08b6ab153ff061fc5"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZDlhMTFhYzk2YzAxZTIwMGQwMDg2YjJmMDExZjRhNjE0ZjVhNzA1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cd9a11ac96c01e200d0086b2f011f4a614f5a705",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/cd9a11ac96c01e200d0086b2f011f4a614f5a705",
      "tree": {
        "sha": "ec61ab3f21b187c43bf2a8d56e90187edb253343",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ec61ab3f21b187c43bf2a8d56e90187edb253343"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2ef187941db439c5b3e529f08b6ab153ff061fc5",
          "sha": "2ef187941db439c5b3e529f08b6ab153ff061fc5",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/2ef187941db439c5b3e529f08b6ab153ff061fc5"
        }
      ],
      "message": "[test] make submit optional in CreateValidMempoolTransaction\n\nThis allows us to easily create transaction chains for package\nvalidation. We don't test_accept if submit=false because we want to be\nable to make transactions that wouldn't pass ATMP (i.e. a child\ntransaction in a package would fail due to missing inputs).",
      "committer": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-05-24T13:42:10Z"
      },
      "author": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-05-04T15:05:43Z"
      },
      "sha": "cd9a11ac96c01e200d0086b2f011f4a614f5a705"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNjNlM2Q5MTZjYzAzNjQ4ODc4M2JiNGJkY2ZkZDM2NjVhZWNmNzEx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/363e3d916cc036488783bb4bdcfdd3665aecf711",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/363e3d916cc036488783bb4bdcfdd3665aecf711",
      "tree": {
        "sha": "f705c1f1d5841ca576a64c80f7a90e49929f3c5a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f705c1f1d5841ca576a64c80f7a90e49929f3c5a"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cd9a11ac96c01e200d0086b2f011f4a614f5a705",
          "sha": "cd9a11ac96c01e200d0086b2f011f4a614f5a705",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/cd9a11ac96c01e200d0086b2f011f4a614f5a705"
        }
      ],
      "message": "[test] unit tests for ProcessNewPackage\n\nKey functionality = a transaction with UTXOs not present in UTXO set\nor mempool can be fully validated instead of being considered an orphan.",
      "committer": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-05-24T13:42:10Z"
      },
      "author": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-05-03T16:51:13Z"
      },
      "sha": "363e3d916cc036488783bb4bdcfdd3665aecf711"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOWUxYTI2ZDFmMTdjOGI5ODYzMmI3Nzk2ZmZhOGY4Nzg4YjVhODNj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c9e1a26d1f17c8b98632b7796ffa8f8788b5a83c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c9e1a26d1f17c8b98632b7796ffa8f8788b5a83c",
      "tree": {
        "sha": "6dbb7b3fb1b4d5b9002eb7c4f06112c4185472a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6dbb7b3fb1b4d5b9002eb7c4f06112c4185472a7"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/363e3d916cc036488783bb4bdcfdd3665aecf711",
          "sha": "363e3d916cc036488783bb4bdcfdd3665aecf711",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/363e3d916cc036488783bb4bdcfdd3665aecf711"
        }
      ],
      "message": "[fuzz] add ProcessNewPackage call in tx_pool fuzzer",
      "committer": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-05-24T13:42:10Z"
      },
      "author": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-04-10T22:37:47Z"
      },
      "sha": "c9e1a26d1f17c8b98632b7796ffa8f8788b5a83c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZThlNmRmNzA5ZmYzZDUyYjhlOTkxOGUwOWNhY2I2NGY4M2FlMzc5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ae8e6df709ff3d52b8e9918e09cacb64f83ae379",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ae8e6df709ff3d52b8e9918e09cacb64f83ae379",
      "tree": {
        "sha": "bfbd17da9d061c54cb724cada601096965fc8155",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bfbd17da9d061c54cb724cada601096965fc8155"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c9e1a26d1f17c8b98632b7796ffa8f8788b5a83c",
          "sha": "c9e1a26d1f17c8b98632b7796ffa8f8788b5a83c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c9e1a26d1f17c8b98632b7796ffa8f8788b5a83c"
        }
      ],
      "message": "[policy] limit package sizes\n\nMaximum number of transactions allowed in a package is 25, equal to the\ndefault mempool descendant limit: if a package has more transactions\nthan this, either it would fail default mempool descendant limit or the\ntransactions don't all have a dependency relationship (but then they\nshouldn't be in a package together). Same rationale for 101KvB virtual\nsize package limit.\n\nNote that these policies are only used in test accepts so far.",
      "committer": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-05-24T13:42:10Z"
      },
      "author": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-04-05T18:13:27Z"
      },
      "sha": "ae8e6df709ff3d52b8e9918e09cacb64f83ae379"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZWRlMzRhNmYyMDM3OGU4NmM1Mjg5ZWJkMjBkZDM5NGE1OTE1MTIz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9ede34a6f20378e86c5289ebd20dd394a5915123",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/9ede34a6f20378e86c5289ebd20dd394a5915123",
      "tree": {
        "sha": "d9fed6c6596a26580eb54f6449c5b697f44ab7a0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d9fed6c6596a26580eb54f6449c5b697f44ab7a0"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ae8e6df709ff3d52b8e9918e09cacb64f83ae379",
          "sha": "ae8e6df709ff3d52b8e9918e09cacb64f83ae379",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ae8e6df709ff3d52b8e9918e09cacb64f83ae379"
        }
      ],
      "message": "[rpc] allow multiple txns in testmempoolaccept\n\nOnly allow \"packages\" with no conflicts, sorted in order of dependency,\nand no more than 25 for now.  Note that these groups of transactions\ndon't necessarily need to adhere to some strict definition of a package\nor have any dependency relationships. Clients are free to pass in a\nbatch of 25 unrelated transactions if they want to.",
      "committer": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-05-24T14:45:01Z"
      },
      "author": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-02-11T18:50:45Z"
      },
      "sha": "9ede34a6f20378e86c5289ebd20dd394a5915123"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNDI1OWY0YjdlZTIzZWY2ZTBlYzgyYzVkNWI5ZGZhOWNhZGQ1YmVk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c4259f4b7ee23ef6e0ec82c5d5b9dfa9cadd5bed",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c4259f4b7ee23ef6e0ec82c5d5b9dfa9cadd5bed",
      "tree": {
        "sha": "c08505b469f437f4d2fee8f55707cdc28ff655e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c08505b469f437f4d2fee8f55707cdc28ff655e4"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9ede34a6f20378e86c5289ebd20dd394a5915123",
          "sha": "9ede34a6f20378e86c5289ebd20dd394a5915123",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/9ede34a6f20378e86c5289ebd20dd394a5915123"
        }
      ],
      "message": "[test] functional test for packages in RPCs",
      "committer": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-05-24T14:48:32Z"
      },
      "author": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-02-23T03:32:58Z"
      },
      "sha": "c4259f4b7ee23ef6e0ec82c5d5b9dfa9cadd5bed"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZWY2NDNlMjFiNDRmOTlmNGJjZTU0MDc3Nzg4ZDBhZDRkODFmN2Nk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9ef643e21b44f99f4bce54077788d0ad4d81f7cd",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/9ef643e21b44f99f4bce54077788d0ad4d81f7cd",
      "tree": {
        "sha": "dce986182b09a26e6ee40b0a0f56e4bb1fa7db3b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dce986182b09a26e6ee40b0a0f56e4bb1fa7db3b"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c4259f4b7ee23ef6e0ec82c5d5b9dfa9cadd5bed",
          "sha": "c4259f4b7ee23ef6e0ec82c5d5b9dfa9cadd5bed",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c4259f4b7ee23ef6e0ec82c5d5b9dfa9cadd5bed"
        }
      ],
      "message": "[doc] add release note for package testmempoolaccept",
      "committer": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-05-24T14:48:32Z"
      },
      "author": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-04-27T21:43:48Z"
      },
      "sha": "9ef643e21b44f99f4bce54077788d0ad4d81f7cd"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMzY1MGZlMmU1MjdiZjBjZjVkOTc3YmY1ZjNmMTU2M2I4NTNlY2Rj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "tree": {
        "sha": "dea774530d56871d155998c466a5fbc33951e5f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dea774530d56871d155998c466a5fbc33951e5f1"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9ef643e21b44f99f4bce54077788d0ad4d81f7cd",
          "sha": "9ef643e21b44f99f4bce54077788d0ad4d81f7cd",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/9ef643e21b44f99f4bce54077788d0ad4d81f7cd"
        }
      ],
      "message": "[policy] detect unsorted packages",
      "committer": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-05-24T14:48:32Z"
      },
      "author": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-04-05T20:15:56Z"
      },
      "sha": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4787192372,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDc4NzE5MjM3Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4787192372",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-24T15:04:01Z"
    },
    {
      "event": "commented",
      "id": 847118121,
      "node_id": "MDEyOklzc3VlQ29tbWVudDg0NzExODEyMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/847118121",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-24T15:22:48Z",
      "updated_at": "2021-05-24T15:22:48Z",
      "author_association": "MEMBER",
      "body": "Thanks @ariard for reminding me about the `max-fee-exceeded` API discussion. I've just pushed an update similar to @jnewbery's suggestion in https://github.com/bitcoin/bitcoin/pull/20833/files#r619141139. If we're satisfied with this API for `max-fee-exceeded`, then all of the discussions will have been addressed.\r\n\r\nMy proposal is: If a transaction in the package exceeds maxfeerate, the \"reject-reason\" is \"max-fee-exceeded\" and all subsequent transactions have blank validation results (i.e. only \"txid\" and \"wtxid\" fields). This is the same as what we do if a transaction fails validation and is still compatible with the API on master.\r\n\r\nTo respond to @mzumsande's suggestion in that comment thread:\r\n\r\n> Also, would it make sense to apply the maxfeerate limit on a combined package level, and not for each transaction separately?\r\n\r\nIn the future, yes. I plan to open a followup PR to have `ProcessNewPackage` calculate (and `testmempoolaccept` return) the descendant feerate and ancestor feerate for each transaction in the package. The intent is to enable the CPFP use case where parent doesn't meet minimum fee but descendant feerate with child is sufficient.\r\nThen, we can apply mempool min fee policy to descendant feerate (so that packages can fee-bump) and enforce the client-specified maxfeerate on the ancestor feerate. This would apply the protection for \"I'm trying to fee-bump this transaction's ancestor(s), but I don't want to overshoot it,\" which is what I believe the user's intent would be.",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-847118121",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20833"
    },
    {
      "event": "mentioned",
      "id": 4787286327,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDc4NzI4NjMyNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4787286327",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-24T15:22:48Z"
    },
    {
      "event": "subscribed",
      "id": 4787286334,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQ3ODcyODYzMzQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4787286334",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-24T15:22:48Z"
    },
    {
      "event": "mentioned",
      "id": 4787286340,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDc4NzI4NjM0MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4787286340",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-24T15:22:48Z"
    },
    {
      "event": "subscribed",
      "id": 4787286343,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQ3ODcyODYzNDM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4787286343",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-24T15:22:48Z"
    },
    {
      "event": "mentioned",
      "id": 4787286348,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDc4NzI4NjM0OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4787286348",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-24T15:22:48Z"
    },
    {
      "event": "subscribed",
      "id": 4787286350,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQ3ODcyODYzNTA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4787286350",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-24T15:22:48Z"
    },
    {
      "event": "reviewed",
      "id": 668950511,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjY4OTUwNTEx",
      "url": null,
      "actor": null,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Code review ACK 13650fe2e527bf0cf5d977bf5f3f1563b853ecdc\r\n\r\nA few minor comments inline. A couple more:\r\n\r\n- The commit log for 2ef18794 (_[validation] package validation for test accepts_) refers to `CoinsViewTemporary`, which has now been removed.\r\n- maybe move the _[policy] detect unsorted packages_ to before the _[rpc] allow multiple txns in testmempoolaccept_ (so you don't have to add tests and then change them later)",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#pullrequestreview-668950511",
      "submitted_at": "2021-05-26T16:03:38Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
    },
    {
      "event": "reviewed",
      "id": 669619379,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjY5NjE5Mzc5",
      "url": null,
      "actor": null,
      "commit_id": "9ede34a6f20378e86c5289ebd20dd394a5915123",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "I like the way `max-fee-exceeded` is handled now. Some comments below, feel free to ignore if too nitty.",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#pullrequestreview-669619379",
      "submitted_at": "2021-05-27T01:04:22Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
    },
    {
      "event": "reviewed",
      "id": 669714132,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjY5NzE0MTMy",
      "url": null,
      "actor": null,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK 13650fe\r\n\r\nOverall code sounds robust enough for now. I did check again test coverage, both functional/unit and it seems exhaustive. I think we can still argue on few improvements around comments but not blockers IMO.\r\n\r\n> My proposal is: If a transaction in the package exceeds maxfeerate, the \"reject-reason\" is \"max-fee-exceeded\" and all subsequent transactions have blank validation results (i.e. only \"txid\" and \"wtxid\" fields). This is the same as what we do if a transaction fails validation and is still compatible with the API on master.\r\n\r\nThat's a good-enough API for now and I agree with your proposed follow-up to calculate and evaluate the aggregated package feerate.\r\n\r\nOther follow-ups I do have in mind :\r\n* weight units or vbytes : https://github.com/bitcoin/bitcoin/pull/20833#discussion_r618629408\r\n* mempool ancestor/descendants limit for packages (#21800)\r\n* package-policy checks encapsulation : https://github.com/bitcoin/bitcoin/pull/20833#discussion_r621466059 (mostly motivated to have a future shared library `libtxstandardness` a la `libbitcoinconsensus`, marrying well with #21413)\r\n\r\nWhat else ? I don't think ordering really matter.",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#pullrequestreview-669714132",
      "submitted_at": "2021-05-27T06:34:02Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
    },
    {
      "event": "commented",
      "id": 849925844,
      "node_id": "MDEyOklzc3VlQ29tbWVudDg0OTkyNTg0NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/849925844",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-27T20:38:44Z",
      "updated_at": "2021-05-27T20:38:44Z",
      "author_association": "MEMBER",
      "body": "Code review re-ACK 13650fe2e527bf0cf5d977bf5f3f1563b853ecdc\r\nMy understanding is that the rest of the comments (which tend to be relating to comments, documentation, asserts, argument naming, and error messages) will be addressed in the follow-up PR, so are not blocking the merge of this feature.\r\n",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-849925844",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20833"
    },
    {
      "event": "merged",
      "id": 4808141326,
      "node_id": "MDExOk1lcmdlZEV2ZW50NDgwODE0MTMyNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4808141326",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "7257e50dba36328be60f69c998632408802b9a29",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7257e50dba36328be60f69c998632408802b9a29",
      "created_at": "2021-05-27T20:41:05Z"
    },
    {
      "event": "closed",
      "id": 4808141341,
      "node_id": "MDExOkNsb3NlZEV2ZW50NDgwODE0MTM0MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4808141341",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-27T20:41:05Z"
    },
    {
      "event": "removed_from_project",
      "id": 4808174264,
      "node_id": "MDIzOlJlbW92ZWRGcm9tUHJvamVjdEV2ZW50NDgwODE3NDI2NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4808174264",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-27T20:49:00Z",
      "project_card": {
        "id": 58200513,
        "url": "https://api.github.com/projects/columns/cards/58200513",
        "project_id": 481835,
        "project_url": "https://api.github.com/projects/481835",
        "column_name": "Blockers"
      }
    },
    {
      "event": "referenced",
      "id": 4809068137,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ4MDkwNjgxMzc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4809068137",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "09fd8fccd1a4356ceba93b3de27ea0412401b54f",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/09fd8fccd1a4356ceba93b3de27ea0412401b54f",
      "created_at": "2021-05-28T00:52:39Z"
    },
    {
      "event": "head_ref_deleted",
      "id": 4810936343,
      "node_id": "MDE5OkhlYWRSZWZEZWxldGVkRXZlbnQ0ODEwOTM2MzQz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4810936343",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-28T08:37:28Z"
    },
    {
      "event": "referenced",
      "id": 4870683046,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ4NzA2ODMwNDY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4870683046",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "ef8f2966ac8e486f622f9803f24bd4021c6ff9ed",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef8f2966ac8e486f622f9803f24bd4021c6ff9ed",
      "created_at": "2021-06-10T11:10:11Z"
    },
    {
      "event": "referenced",
      "id": 6723197897,
      "node_id": "REFE_lADOABII584uWQ3CzwAAAAGQu9vJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6723197897",
      "actor": {
        "login": "gwillen",
        "id": 458997,
        "node_id": "MDQ6VXNlcjQ1ODk5Nw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/458997?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gwillen",
        "html_url": "https://github.com/gwillen",
        "followers_url": "https://api.github.com/users/gwillen/followers",
        "following_url": "https://api.github.com/users/gwillen/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gwillen/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gwillen/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gwillen/subscriptions",
        "organizations_url": "https://api.github.com/users/gwillen/orgs",
        "repos_url": "https://api.github.com/users/gwillen/repos",
        "events_url": "https://api.github.com/users/gwillen/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gwillen/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "8a669eccfb8ae65596b581afcee55f64a5ead14f",
      "commit_url": "https://api.github.com/repos/ElementsProject/elements/commits/8a669eccfb8ae65596b581afcee55f64a5ead14f",
      "created_at": "2022-06-01T21:22:26Z"
    },
    {
      "event": "locked",
      "id": 7216540767,
      "node_id": "LOE_lADOABII584uWQ3CzwAAAAGuI6xf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7216540767",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-18T18:24:21Z",
      "lock_reason": "resolved"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552161033",
      "pull_request_review_id": 562088788,
      "id": 552161033,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjE2MTAzMw==",
      "diff_hunk": "@@ -1024,46 +993,104 @@ bool MemPoolAccept::Finalize(ATMPArgs& args, Workspace& ws)\n     return true;\n }\n \n-bool MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n+MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n {\n     AssertLockHeld(cs_main);\n     LOCK(m_pool.cs); // mempool \"read lock\" (held through GetMainSignals().TransactionAddedToMempool())\n \n     Workspace workspace(ptx);\n+    MempoolAcceptResult result(ptx);\n \n-    if (!PreChecks(args, workspace)) return false;\n+    if (!PreChecks(args, result, workspace)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, workspace, txdata)) return false;\n+    if (!PolicyScriptChecks(args, result, workspace, txdata)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n-    if (!ConsensusScriptChecks(args, workspace, txdata)) return false;\n+    if (!ConsensusScriptChecks(args, result, workspace, txdata)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     // Tx was accepted, but not added\n-    if (args.m_test_accept) return true;\n+    if (args.m_test_accept) {\n+        result.m_accepted = true;\n+        return result;\n+    }\n \n-    if (!Finalize(args, workspace)) return false;\n+    if (!Finalize(args, result, workspace)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return true;\n+    result.m_accepted = true;\n+    return result;\n+}\n+\n+std::vector<MempoolAcceptResult> MemPoolAccept::AcceptMultipleTransactions(std::vector<const CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    LOCK(m_pool.cs);\n+    std::vector<MempoolAcceptResult> results{};\n+    std::vector<Workspace> workspaces{};\n+    workspaces.reserve(txns.size());\n+    std::transform(txns.begin(), txns.end(), std::back_inserter(workspaces), [](const CTransactionRef& tx) {\n+        return Workspace(tx);\n+    });\n+    // Do all PreChecks first and fail fast to avoid running expensive script\n+    // checks when unnecessary.\n+    for (unsigned int i = 0; i < txns.size(); ++i) {\n+        MempoolAcceptResult result(txns[i]);\n+        if (!PreChecks(args, result, workspaces[i])) {\n+            result.m_accepted = false;\n+            return std::vector<MempoolAcceptResult> {std::move(result)};\n+        }\n+        result.m_accepted = true; // Allowed so far\n+        m_viewmempool.AddPackageTransaction(txns[i]);\n+        results.push_back(result);\n+    }\n+\n+    // TODO: Enforce package-level feerate and other policies before script checks.\n+\n+    for (unsigned int i = 0; i < txns.size(); ++i) {\n+        PrecomputedTransactionData txdata;\n+\n+        if (!PolicyScriptChecks(args, results[i], workspaces[i], txdata)) {\n+            results[i].m_accepted = false;\n+            return std::vector<MempoolAcceptResult> {std::move(results[i])};\n+        }\n+\n+        if (!ConsensusScriptChecks(args, results[i], workspaces[i], txdata)) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 398,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "25412b8d13a5287670033d6bab7730e978bbb6be",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This means that we will update our script cache with transactions that might not ultimately get accepted to the mempool?  This would need to be restructured before exposing to the p2p network to avoid becoming a DoS vector.",
      "created_at": "2021-01-05T19:57:33Z",
      "updated_at": "2021-05-11T18:25:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r552161033",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552161033"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1075,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552168344",
      "pull_request_review_id": 562098520,
      "id": 552168344,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjE2ODM0NA==",
      "diff_hunk": "@@ -1024,46 +993,104 @@ bool MemPoolAccept::Finalize(ATMPArgs& args, Workspace& ws)\n     return true;\n }\n \n-bool MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n+MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n {\n     AssertLockHeld(cs_main);\n     LOCK(m_pool.cs); // mempool \"read lock\" (held through GetMainSignals().TransactionAddedToMempool())\n \n     Workspace workspace(ptx);\n+    MempoolAcceptResult result(ptx);\n \n-    if (!PreChecks(args, workspace)) return false;\n+    if (!PreChecks(args, result, workspace)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, workspace, txdata)) return false;\n+    if (!PolicyScriptChecks(args, result, workspace, txdata)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n-    if (!ConsensusScriptChecks(args, workspace, txdata)) return false;\n+    if (!ConsensusScriptChecks(args, result, workspace, txdata)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     // Tx was accepted, but not added\n-    if (args.m_test_accept) return true;\n+    if (args.m_test_accept) {\n+        result.m_accepted = true;\n+        return result;\n+    }\n \n-    if (!Finalize(args, workspace)) return false;\n+    if (!Finalize(args, result, workspace)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return true;\n+    result.m_accepted = true;\n+    return result;\n+}\n+\n+std::vector<MempoolAcceptResult> MemPoolAccept::AcceptMultipleTransactions(std::vector<const CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    LOCK(m_pool.cs);\n+    std::vector<MempoolAcceptResult> results{};\n+    std::vector<Workspace> workspaces{};\n+    workspaces.reserve(txns.size());\n+    std::transform(txns.begin(), txns.end(), std::back_inserter(workspaces), [](const CTransactionRef& tx) {\n+        return Workspace(tx);\n+    });\n+    // Do all PreChecks first and fail fast to avoid running expensive script\n+    // checks when unnecessary.\n+    for (unsigned int i = 0; i < txns.size(); ++i) {\n+        MempoolAcceptResult result(txns[i]);\n+        if (!PreChecks(args, result, workspaces[i])) {\n+            result.m_accepted = false;\n+            return std::vector<MempoolAcceptResult> {std::move(result)};\n+        }\n+        result.m_accepted = true; // Allowed so far\n+        m_viewmempool.AddPackageTransaction(txns[i]);\n+        results.push_back(result);\n+    }\n+\n+    // TODO: Enforce package-level feerate and other policies before script checks.\n+\n+    for (unsigned int i = 0; i < txns.size(); ++i) {\n+        PrecomputedTransactionData txdata;\n+\n+        if (!PolicyScriptChecks(args, results[i], workspaces[i], txdata)) {\n+            results[i].m_accepted = false;\n+            return std::vector<MempoolAcceptResult> {std::move(results[i])};\n+        }\n+\n+        if (!ConsensusScriptChecks(args, results[i], workspaces[i], txdata)) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 398,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "25412b8d13a5287670033d6bab7730e978bbb6be",
      "in_reply_to_id": 552161033,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "On further thought: if you're only implementing this for testmempoolaccept anyway, why bother with the call to ConsensusScriptChecks?  It can only return failure if our software is broken -- it's a safeguard against miners creating invalid blocks, not something that users should expect to ever run into.\r\n\r\nIf you drop this call, then dropping CIFMAC is also no longer necessary, right?",
      "created_at": "2021-01-05T20:12:32Z",
      "updated_at": "2021-05-11T18:25:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r552168344",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552168344"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1075,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552180013",
      "pull_request_review_id": 562113660,
      "id": 552180013,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjE4MDAxMw==",
      "diff_hunk": "@@ -1024,46 +993,104 @@ bool MemPoolAccept::Finalize(ATMPArgs& args, Workspace& ws)\n     return true;\n }\n \n-bool MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n+MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n {\n     AssertLockHeld(cs_main);\n     LOCK(m_pool.cs); // mempool \"read lock\" (held through GetMainSignals().TransactionAddedToMempool())\n \n     Workspace workspace(ptx);\n+    MempoolAcceptResult result(ptx);\n \n-    if (!PreChecks(args, workspace)) return false;\n+    if (!PreChecks(args, result, workspace)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, workspace, txdata)) return false;\n+    if (!PolicyScriptChecks(args, result, workspace, txdata)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n-    if (!ConsensusScriptChecks(args, workspace, txdata)) return false;\n+    if (!ConsensusScriptChecks(args, result, workspace, txdata)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     // Tx was accepted, but not added\n-    if (args.m_test_accept) return true;\n+    if (args.m_test_accept) {\n+        result.m_accepted = true;\n+        return result;\n+    }\n \n-    if (!Finalize(args, workspace)) return false;\n+    if (!Finalize(args, result, workspace)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return true;\n+    result.m_accepted = true;\n+    return result;\n+}\n+\n+std::vector<MempoolAcceptResult> MemPoolAccept::AcceptMultipleTransactions(std::vector<const CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    LOCK(m_pool.cs);\n+    std::vector<MempoolAcceptResult> results{};\n+    std::vector<Workspace> workspaces{};\n+    workspaces.reserve(txns.size());\n+    std::transform(txns.begin(), txns.end(), std::back_inserter(workspaces), [](const CTransactionRef& tx) {\n+        return Workspace(tx);\n+    });\n+    // Do all PreChecks first and fail fast to avoid running expensive script\n+    // checks when unnecessary.\n+    for (unsigned int i = 0; i < txns.size(); ++i) {\n+        MempoolAcceptResult result(txns[i]);\n+        if (!PreChecks(args, result, workspaces[i])) {\n+            result.m_accepted = false;\n+            return std::vector<MempoolAcceptResult> {std::move(result)};\n+        }\n+        result.m_accepted = true; // Allowed so far\n+        m_viewmempool.AddPackageTransaction(txns[i]);\n+        results.push_back(result);\n+    }\n+\n+    // TODO: Enforce package-level feerate and other policies before script checks.\n+\n+    for (unsigned int i = 0; i < txns.size(); ++i) {\n+        PrecomputedTransactionData txdata;\n+\n+        if (!PolicyScriptChecks(args, results[i], workspaces[i], txdata)) {\n+            results[i].m_accepted = false;\n+            return std::vector<MempoolAcceptResult> {std::move(results[i])};\n+        }\n+\n+        if (!ConsensusScriptChecks(args, results[i], workspaces[i], txdata)) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 398,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "25412b8d13a5287670033d6bab7730e978bbb6be",
      "in_reply_to_id": 552161033,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "AFAIK we only use the script cache when it passes, so I don't think it's a DoS vector? On master, if you call `testmempoolaccept`, it caches the successful script executions with consensus flags.\r\n\r\n> On further thought: if you're only implementing this for testmempoolaccept anyway, why bother with the call to ConsensusScriptChecks?\r\n\r\nGood point, `PolicyScriptChecks` is stricter so `ConsensusScriptChecks` is unnecessary. And yes, we could then keep CIFMAC. But in order to do actual, non-test-accepts, we'll have to revisit the issue again (since I assume we'll want to call `ConsensusScriptChecks` then). It'd be \"kicking the can down the road.\"",
      "created_at": "2021-01-05T20:37:04Z",
      "updated_at": "2021-05-11T18:25:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r552180013",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552180013"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1075,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552684985",
      "pull_request_review_id": 562770282,
      "id": 552684985,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjY4NDk4NQ==",
      "diff_hunk": "@@ -1024,46 +993,104 @@ bool MemPoolAccept::Finalize(ATMPArgs& args, Workspace& ws)\n     return true;\n }\n \n-bool MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n+MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n {\n     AssertLockHeld(cs_main);\n     LOCK(m_pool.cs); // mempool \"read lock\" (held through GetMainSignals().TransactionAddedToMempool())\n \n     Workspace workspace(ptx);\n+    MempoolAcceptResult result(ptx);\n \n-    if (!PreChecks(args, workspace)) return false;\n+    if (!PreChecks(args, result, workspace)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, workspace, txdata)) return false;\n+    if (!PolicyScriptChecks(args, result, workspace, txdata)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n-    if (!ConsensusScriptChecks(args, workspace, txdata)) return false;\n+    if (!ConsensusScriptChecks(args, result, workspace, txdata)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     // Tx was accepted, but not added\n-    if (args.m_test_accept) return true;\n+    if (args.m_test_accept) {\n+        result.m_accepted = true;\n+        return result;\n+    }\n \n-    if (!Finalize(args, workspace)) return false;\n+    if (!Finalize(args, result, workspace)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return true;\n+    result.m_accepted = true;\n+    return result;\n+}\n+\n+std::vector<MempoolAcceptResult> MemPoolAccept::AcceptMultipleTransactions(std::vector<const CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    LOCK(m_pool.cs);\n+    std::vector<MempoolAcceptResult> results{};\n+    std::vector<Workspace> workspaces{};\n+    workspaces.reserve(txns.size());\n+    std::transform(txns.begin(), txns.end(), std::back_inserter(workspaces), [](const CTransactionRef& tx) {\n+        return Workspace(tx);\n+    });\n+    // Do all PreChecks first and fail fast to avoid running expensive script\n+    // checks when unnecessary.\n+    for (unsigned int i = 0; i < txns.size(); ++i) {\n+        MempoolAcceptResult result(txns[i]);\n+        if (!PreChecks(args, result, workspaces[i])) {\n+            result.m_accepted = false;\n+            return std::vector<MempoolAcceptResult> {std::move(result)};\n+        }\n+        result.m_accepted = true; // Allowed so far\n+        m_viewmempool.AddPackageTransaction(txns[i]);\n+        results.push_back(result);\n+    }\n+\n+    // TODO: Enforce package-level feerate and other policies before script checks.\n+\n+    for (unsigned int i = 0; i < txns.size(); ++i) {\n+        PrecomputedTransactionData txdata;\n+\n+        if (!PolicyScriptChecks(args, results[i], workspaces[i], txdata)) {\n+            results[i].m_accepted = false;\n+            return std::vector<MempoolAcceptResult> {std::move(results[i])};\n+        }\n+\n+        if (!ConsensusScriptChecks(args, results[i], workspaces[i], txdata)) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 398,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "25412b8d13a5287670033d6bab7730e978bbb6be",
      "in_reply_to_id": 552161033,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I assume that the ultimate goal of package validation is to only accept the whole set of transactions if each one individually makes it into the mempool (probably along with some other properties on the feerate of the package being used rather than individual feerates).  If that's correct, then calling `ConsensusScriptChecks` on anything (which will add to the script cache) before you finish calling `PolicyScriptChecks` on later transactions in the package will mean that a policy failure in a later transaction could cause the whole package to be rejected, while still having updated the cache.\r\n\r\nIf exposed on the p2p network, an attacker could wipe out a target's script cache for free this way, which is the DoS vector I was referring to.\r\n\r\nSo instead, you can make this loop just call `PolicyScriptChecks`, which is good enough for test_accept.  Once you implement adding to the mempool on success, you could have a new loop over the set of transactions in the package (topologically sorted) that invokes `ConsensusScriptChecks` and then adds the transaction to the mempool.  This way, CIFMAC doesn't need to be touched at all, because all a transaction's inputs are already in the utxo set or the mempool at the time `ConsensusScriptChecks` is invoked.  (This is essentially the structure I proposed in #16401.)",
      "created_at": "2021-01-06T14:53:09Z",
      "updated_at": "2021-05-11T18:25:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r552684985",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552684985"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1075,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552814597",
      "pull_request_review_id": 562884556,
      "id": 552814597,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjgxNDU5Nw==",
      "diff_hunk": "@@ -889,7 +888,7 @@ static RPCHelpMan testmempoolaccept()\n                 },\n                 RPCResult{\n                     RPCResult::Type::ARR, \"\", \"The result of the mempool acceptance test for each raw transaction in the input array.\\n\"\n-                        \"Length is exactly one for now.\",\n+                        \"Length is exactly one if any failures occur.\",",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "10860308da57ae417aeb6a0e35515235e5f9360a",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Do we want to commit to that?",
      "created_at": "2021-01-06T17:05:54Z",
      "updated_at": "2021-05-11T18:25:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r552814597",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552814597"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 891,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552815366",
      "pull_request_review_id": 562884556,
      "id": 552815366,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjgxNTM2Ng==",
      "diff_hunk": "@@ -921,56 +920,80 @@ static RPCHelpMan testmempoolaccept()\n         UniValueType(), // VNUM or VSTR, checked inside AmountFromValue()\n     });\n \n-    if (request.params[0].get_array().size() != 1) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array must contain exactly one raw transaction for now\");\n-    }\n-\n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_array()[0].get_str())) {\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n-    }\n-    CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-    const uint256& tx_hash = tx->GetHash();\n-\n+    UniValue transactions = request.params[0].get_array();\n+    const size_t num_txns = {transactions.size()};",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 35,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "10860308da57ae417aeb6a0e35515235e5f9360a",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This syntax seems strange?",
      "created_at": "2021-01-06T17:06:38Z",
      "updated_at": "2021-05-11T18:25:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r552815366",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552815366"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 924,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552930655",
      "pull_request_review_id": 562998317,
      "id": 552930655,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjkzMDY1NQ==",
      "diff_hunk": "@@ -1024,46 +993,104 @@ bool MemPoolAccept::Finalize(ATMPArgs& args, Workspace& ws)\n     return true;\n }\n \n-bool MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n+MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n {\n     AssertLockHeld(cs_main);\n     LOCK(m_pool.cs); // mempool \"read lock\" (held through GetMainSignals().TransactionAddedToMempool())\n \n     Workspace workspace(ptx);\n+    MempoolAcceptResult result(ptx);\n \n-    if (!PreChecks(args, workspace)) return false;\n+    if (!PreChecks(args, result, workspace)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, workspace, txdata)) return false;\n+    if (!PolicyScriptChecks(args, result, workspace, txdata)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n-    if (!ConsensusScriptChecks(args, workspace, txdata)) return false;\n+    if (!ConsensusScriptChecks(args, result, workspace, txdata)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     // Tx was accepted, but not added\n-    if (args.m_test_accept) return true;\n+    if (args.m_test_accept) {\n+        result.m_accepted = true;\n+        return result;\n+    }\n \n-    if (!Finalize(args, workspace)) return false;\n+    if (!Finalize(args, result, workspace)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return true;\n+    result.m_accepted = true;\n+    return result;\n+}\n+\n+std::vector<MempoolAcceptResult> MemPoolAccept::AcceptMultipleTransactions(std::vector<const CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    LOCK(m_pool.cs);\n+    std::vector<MempoolAcceptResult> results{};\n+    std::vector<Workspace> workspaces{};\n+    workspaces.reserve(txns.size());\n+    std::transform(txns.begin(), txns.end(), std::back_inserter(workspaces), [](const CTransactionRef& tx) {\n+        return Workspace(tx);\n+    });\n+    // Do all PreChecks first and fail fast to avoid running expensive script\n+    // checks when unnecessary.\n+    for (unsigned int i = 0; i < txns.size(); ++i) {\n+        MempoolAcceptResult result(txns[i]);\n+        if (!PreChecks(args, result, workspaces[i])) {\n+            result.m_accepted = false;\n+            return std::vector<MempoolAcceptResult> {std::move(result)};\n+        }\n+        result.m_accepted = true; // Allowed so far\n+        m_viewmempool.AddPackageTransaction(txns[i]);\n+        results.push_back(result);\n+    }\n+\n+    // TODO: Enforce package-level feerate and other policies before script checks.\n+\n+    for (unsigned int i = 0; i < txns.size(); ++i) {\n+        PrecomputedTransactionData txdata;\n+\n+        if (!PolicyScriptChecks(args, results[i], workspaces[i], txdata)) {\n+            results[i].m_accepted = false;\n+            return std::vector<MempoolAcceptResult> {std::move(results[i])};\n+        }\n+\n+        if (!ConsensusScriptChecks(args, results[i], workspaces[i], txdata)) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 398,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "25412b8d13a5287670033d6bab7730e978bbb6be",
      "in_reply_to_id": 552161033,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> I assume that the ultimate goal of package validation is to only accept the whole set of transactions if each one individually makes it into the mempool... \r\nIf that's correct, then calling ConsensusScriptChecks on anything (which will add to the script cache) before you finish calling PolicyScriptChecks on later transactions in the package will mean that a policy failure in a later transaction could cause the whole package to be rejected, while still having updated the cache.\r\n\r\nRight, I have the same vision in mind, and absolutely agree. I should change these two be separate loops - all `PolicyScriptChecks`, then all `ConsensusScriptChecks`. This would mean that we would only be calling `ConsensusScriptChecks` (which is effectively just used to cache script results) if all of them would pass - there's no way for any of them to fail consensus if they passed policy.",
      "created_at": "2021-01-06T19:53:47Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r552930655",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552930655"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1075,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552997459",
      "pull_request_review_id": 563082415,
      "id": 552997459,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjk5NzQ1OQ==",
      "diff_hunk": "@@ -1024,46 +993,104 @@ bool MemPoolAccept::Finalize(ATMPArgs& args, Workspace& ws)\n     return true;\n }\n \n-bool MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n+MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n {\n     AssertLockHeld(cs_main);\n     LOCK(m_pool.cs); // mempool \"read lock\" (held through GetMainSignals().TransactionAddedToMempool())\n \n     Workspace workspace(ptx);\n+    MempoolAcceptResult result(ptx);\n \n-    if (!PreChecks(args, workspace)) return false;\n+    if (!PreChecks(args, result, workspace)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, workspace, txdata)) return false;\n+    if (!PolicyScriptChecks(args, result, workspace, txdata)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n-    if (!ConsensusScriptChecks(args, workspace, txdata)) return false;\n+    if (!ConsensusScriptChecks(args, result, workspace, txdata)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     // Tx was accepted, but not added\n-    if (args.m_test_accept) return true;\n+    if (args.m_test_accept) {\n+        result.m_accepted = true;\n+        return result;\n+    }\n \n-    if (!Finalize(args, workspace)) return false;\n+    if (!Finalize(args, result, workspace)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return true;\n+    result.m_accepted = true;\n+    return result;\n+}\n+\n+std::vector<MempoolAcceptResult> MemPoolAccept::AcceptMultipleTransactions(std::vector<const CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    LOCK(m_pool.cs);\n+    std::vector<MempoolAcceptResult> results{};\n+    std::vector<Workspace> workspaces{};\n+    workspaces.reserve(txns.size());\n+    std::transform(txns.begin(), txns.end(), std::back_inserter(workspaces), [](const CTransactionRef& tx) {\n+        return Workspace(tx);\n+    });\n+    // Do all PreChecks first and fail fast to avoid running expensive script\n+    // checks when unnecessary.\n+    for (unsigned int i = 0; i < txns.size(); ++i) {\n+        MempoolAcceptResult result(txns[i]);\n+        if (!PreChecks(args, result, workspaces[i])) {\n+            result.m_accepted = false;\n+            return std::vector<MempoolAcceptResult> {std::move(result)};\n+        }\n+        result.m_accepted = true; // Allowed so far\n+        m_viewmempool.AddPackageTransaction(txns[i]);\n+        results.push_back(result);\n+    }\n+\n+    // TODO: Enforce package-level feerate and other policies before script checks.\n+\n+    for (unsigned int i = 0; i < txns.size(); ++i) {\n+        PrecomputedTransactionData txdata;\n+\n+        if (!PolicyScriptChecks(args, results[i], workspaces[i], txdata)) {\n+            results[i].m_accepted = false;\n+            return std::vector<MempoolAcceptResult> {std::move(results[i])};\n+        }\n+\n+        if (!ConsensusScriptChecks(args, results[i], workspaces[i], txdata)) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 398,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "25412b8d13a5287670033d6bab7730e978bbb6be",
      "in_reply_to_id": 552161033,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The more I think about this, the more it makes sense 😅 \r\nIn actual package accept, we don't need CoinsViewMempool after `PolicyScriptChecks`, we can actually just go one by one in the package (after topological sort) and run `ConsensusScriptChecks` + submit to mempool. And subsequent txns should have all of the Coins they need from the pool. Apologies if this was obvious to you - is this what you had in mind?",
      "created_at": "2021-01-06T22:31:20Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r552997459",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552997459"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1075,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/553003781",
      "pull_request_review_id": 563090036,
      "id": 553003781,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzAwMzc4MQ==",
      "diff_hunk": "@@ -889,7 +888,7 @@ static RPCHelpMan testmempoolaccept()\n                 },\n                 RPCResult{\n                     RPCResult::Type::ARR, \"\", \"The result of the mempool acceptance test for each raw transaction in the input array.\\n\"\n-                        \"Length is exactly one for now.\",\n+                        \"Length is exactly one if any failures occur.\",",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "10860308da57ae417aeb6a0e35515235e5f9360a",
      "in_reply_to_id": 552814597,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I believe we plan to validate packages atomically, so we would never have a situation of \"these txns passed, but those didn't.\" That's why I believed length 1 for failure would be alright, especially since this wouldn't be an API-breaking change. I imagine it could be helpful to return more information to the client, but don't know what that would look like concretely.",
      "created_at": "2021-01-06T22:49:39Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r553003781",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/553003781"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 891,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/553011795",
      "pull_request_review_id": 563099740,
      "id": 553011795,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzAxMTc5NQ==",
      "diff_hunk": "@@ -889,7 +888,7 @@ static RPCHelpMan testmempoolaccept()\n                 },\n                 RPCResult{\n                     RPCResult::Type::ARR, \"\", \"The result of the mempool acceptance test for each raw transaction in the input array.\\n\"\n-                        \"Length is exactly one for now.\",\n+                        \"Length is exactly one if any failures occur.\",",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "10860308da57ae417aeb6a0e35515235e5f9360a",
      "in_reply_to_id": 552814597,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "(Open to ideas)",
      "created_at": "2021-01-06T23:14:02Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r553011795",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/553011795"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 891,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/553349758",
      "pull_request_review_id": 563513837,
      "id": 553349758,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzM0OTc1OA==",
      "diff_hunk": "@@ -1024,46 +993,104 @@ bool MemPoolAccept::Finalize(ATMPArgs& args, Workspace& ws)\n     return true;\n }\n \n-bool MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n+MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n {\n     AssertLockHeld(cs_main);\n     LOCK(m_pool.cs); // mempool \"read lock\" (held through GetMainSignals().TransactionAddedToMempool())\n \n     Workspace workspace(ptx);\n+    MempoolAcceptResult result(ptx);\n \n-    if (!PreChecks(args, workspace)) return false;\n+    if (!PreChecks(args, result, workspace)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, workspace, txdata)) return false;\n+    if (!PolicyScriptChecks(args, result, workspace, txdata)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n-    if (!ConsensusScriptChecks(args, workspace, txdata)) return false;\n+    if (!ConsensusScriptChecks(args, result, workspace, txdata)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     // Tx was accepted, but not added\n-    if (args.m_test_accept) return true;\n+    if (args.m_test_accept) {\n+        result.m_accepted = true;\n+        return result;\n+    }\n \n-    if (!Finalize(args, workspace)) return false;\n+    if (!Finalize(args, result, workspace)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return true;\n+    result.m_accepted = true;\n+    return result;\n+}\n+\n+std::vector<MempoolAcceptResult> MemPoolAccept::AcceptMultipleTransactions(std::vector<const CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    LOCK(m_pool.cs);\n+    std::vector<MempoolAcceptResult> results{};\n+    std::vector<Workspace> workspaces{};\n+    workspaces.reserve(txns.size());\n+    std::transform(txns.begin(), txns.end(), std::back_inserter(workspaces), [](const CTransactionRef& tx) {\n+        return Workspace(tx);\n+    });\n+    // Do all PreChecks first and fail fast to avoid running expensive script\n+    // checks when unnecessary.\n+    for (unsigned int i = 0; i < txns.size(); ++i) {\n+        MempoolAcceptResult result(txns[i]);\n+        if (!PreChecks(args, result, workspaces[i])) {\n+            result.m_accepted = false;\n+            return std::vector<MempoolAcceptResult> {std::move(result)};\n+        }\n+        result.m_accepted = true; // Allowed so far\n+        m_viewmempool.AddPackageTransaction(txns[i]);\n+        results.push_back(result);\n+    }\n+\n+    // TODO: Enforce package-level feerate and other policies before script checks.\n+\n+    for (unsigned int i = 0; i < txns.size(); ++i) {\n+        PrecomputedTransactionData txdata;\n+\n+        if (!PolicyScriptChecks(args, results[i], workspaces[i], txdata)) {\n+            results[i].m_accepted = false;\n+            return std::vector<MempoolAcceptResult> {std::move(results[i])};\n+        }\n+\n+        if (!ConsensusScriptChecks(args, results[i], workspaces[i], txdata)) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 398,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "25412b8d13a5287670033d6bab7730e978bbb6be",
      "in_reply_to_id": 552161033,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes -- sounds like we're on the same page!",
      "created_at": "2021-01-07T14:10:06Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r553349758",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/553349758"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1075,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557161651",
      "pull_request_review_id": 567995465,
      "id": 557161651,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzE2MTY1MQ==",
      "diff_hunk": "@@ -194,12 +194,22 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/** Per-transaction result from trying to accept a transaction to the memory pool. */\n+struct MempoolAcceptResult {\n+    MempoolAcceptResult(const CTransactionRef& ptx) : txid(ptx->GetHash()) {}\n+\n+    uint256 txid;",
      "path": "src/validation.h",
      "position": null,
      "original_position": 30,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "c97fae1011c4bd376898af73576756f163eeaf58",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in commit c97fae1011c4bd376898af73576756f163eeaf58:\r\n\r\nThis member seems currently unused? Also, what is the point of copying the (already cached) txid once more? If you need a reference to the tx, maybe store the `CTransactionRef`, but that seems redundant, because the caller is already aware of the tx.",
      "created_at": "2021-01-14T08:11:02Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r557161651",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557161651"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 201,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557163163",
      "pull_request_review_id": 567995465,
      "id": 557163163,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzE2MzE2Mw==",
      "diff_hunk": "@@ -194,12 +194,22 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/** Per-transaction result from trying to accept a transaction to the memory pool. */\n+struct MempoolAcceptResult {\n+    MempoolAcceptResult(const CTransactionRef& ptx) : txid(ptx->GetHash()) {}\n+\n+    uint256 txid;\n+    bool m_accepted = false;\n+    TxValidationState m_state;\n+    std::list<CTransactionRef> m_replaced_transactions{};\n+    CAmount m_fee = CAmount(0);",
      "path": "src/validation.h",
      "position": null,
      "original_position": 34,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "c97fae1011c4bd376898af73576756f163eeaf58",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Would be nice to clarify what kind of fee this is. Probably base fee and not prioritized fee?",
      "created_at": "2021-01-14T08:12:09Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r557163163",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557163163"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 205,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557185885",
      "pull_request_review_id": 567995465,
      "id": 557185885,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzE4NTg4NQ==",
      "diff_hunk": "@@ -194,12 +194,22 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/** Per-transaction result from trying to accept a transaction to the memory pool. */\n+struct MempoolAcceptResult {\n+    MempoolAcceptResult(const CTransactionRef& ptx) : txid(ptx->GetHash()) {}\n+\n+    uint256 txid;\n+    bool m_accepted = false;\n+    TxValidationState m_state;\n+    std::list<CTransactionRef> m_replaced_transactions{};\n+    CAmount m_fee = CAmount(0);",
      "path": "src/validation.h",
      "position": null,
      "original_position": 34,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "c97fae1011c4bd376898af73576756f163eeaf58",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Not sure if it makes sense to return a fee of `0` when the tx was rejected. At the very least the members that are optional, should be `std::optional`. Though, I am thinking that it could make sense to return two completely different types, based on whether the tx was accepted? I.e. a struct with `{fee, replaced_txs}` if the tx was accepted and a struct with `{state}` if the tx was rejected.\r\n\r\nThis would make it harder at the call sites to make mistakes such as returning the fee of a rejected tx.",
      "created_at": "2021-01-14T08:26:35Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r557185885",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557185885"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 205,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557530738",
      "pull_request_review_id": 568412951,
      "id": 557530738,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzUzMDczOA==",
      "diff_hunk": "@@ -194,12 +194,22 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/** Per-transaction result from trying to accept a transaction to the memory pool. */\n+struct MempoolAcceptResult {\n+    MempoolAcceptResult(const CTransactionRef& ptx) : txid(ptx->GetHash()) {}\n+\n+    uint256 txid;",
      "path": "src/validation.h",
      "position": null,
      "original_position": 30,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "c97fae1011c4bd376898af73576756f163eeaf58",
      "in_reply_to_id": 557161651,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Right, it's not used in https://github.com/bitcoin/bitcoin/commit/c97fae1011c4bd376898af73576756f163eeaf58. I ended up needing it for multi-accept on the failure case to indicate which tx failed. It might fit better in https://github.com/bitcoin/bitcoin/pull/20833/commits/2f36f0743158817635a39f7efb60541fe0c4b31d",
      "created_at": "2021-01-14T16:35:31Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r557530738",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557530738"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 201,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557561211",
      "pull_request_review_id": 568454011,
      "id": 557561211,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzU2MTIxMQ==",
      "diff_hunk": "@@ -0,0 +1,186 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"RPCs that handle raw transaction packages.\"\"\"\n+\n+from decimal import Decimal\n+from io import BytesIO\n+\n+from test_framework.address import ADDRESS_BCRT1_P2WSH_OP_TRUE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    BIP125_SEQUENCE_NUMBER,\n+    COIN,\n+    CTransaction,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+    hex_str_to_bytes,\n+)\n+\n+class RPCPackagesTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [[]]",
      "path": "test/functional/rpc_packages.py",
      "position": null,
      "original_position": 25,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "79e5512206fa91acc09b843bd2962903fb2b6b8d",
      "in_reply_to_id": null,
      "user": {
        "login": "mjdietzx",
        "id": 7217256,
        "node_id": "MDQ6VXNlcjcyMTcyNTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mjdietzx",
        "html_url": "https://github.com/mjdietzx",
        "followers_url": "https://api.github.com/users/mjdietzx/followers",
        "following_url": "https://api.github.com/users/mjdietzx/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mjdietzx/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mjdietzx/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
        "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
        "repos_url": "https://api.github.com/users/mjdietzx/repos",
        "events_url": "https://api.github.com/users/mjdietzx/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: you can probably ditch`self.extra_args = [[]]` right?",
      "created_at": "2021-01-14T17:19:03Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r557561211",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557561211"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 25,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557562563",
      "pull_request_review_id": 568454011,
      "id": 557562563,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzU2MjU2Mw==",
      "diff_hunk": "@@ -65,7 +65,6 @@ def run_test(self):\n \n         self.log.info('Should not accept garbage to testmempoolaccept')\n         assert_raises_rpc_error(-3, 'Expected type array, got string', lambda: node.testmempoolaccept(rawtxs='ff00baar'))\n-        assert_raises_rpc_error(-8, 'Array must contain exactly one raw transaction for now', lambda: node.testmempoolaccept(rawtxs=['ff00baar', 'ff22']))",
      "path": "test/functional/mempool_accept.py",
      "position": 4,
      "original_position": 4,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "79e5512206fa91acc09b843bd2962903fb2b6b8d",
      "in_reply_to_id": null,
      "user": {
        "login": "mjdietzx",
        "id": 7217256,
        "node_id": "MDQ6VXNlcjcyMTcyNTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mjdietzx",
        "html_url": "https://github.com/mjdietzx",
        "followers_url": "https://api.github.com/users/mjdietzx/followers",
        "following_url": "https://api.github.com/users/mjdietzx/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mjdietzx/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mjdietzx/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
        "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
        "repos_url": "https://api.github.com/users/mjdietzx/repos",
        "events_url": "https://api.github.com/users/mjdietzx/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "would it be better to check that this now passes without throwing rather than removing it?",
      "created_at": "2021-01-14T17:21:04Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r557562563",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557562563"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 70,
      "original_line": 70,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557600992",
      "pull_request_review_id": 568506197,
      "id": 557600992,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzYwMDk5Mg==",
      "diff_hunk": "@@ -65,7 +65,6 @@ def run_test(self):\n \n         self.log.info('Should not accept garbage to testmempoolaccept')\n         assert_raises_rpc_error(-3, 'Expected type array, got string', lambda: node.testmempoolaccept(rawtxs='ff00baar'))\n-        assert_raises_rpc_error(-8, 'Array must contain exactly one raw transaction for now', lambda: node.testmempoolaccept(rawtxs=['ff00baar', 'ff22']))",
      "path": "test/functional/mempool_accept.py",
      "position": 4,
      "original_position": 4,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "79e5512206fa91acc09b843bd2962903fb2b6b8d",
      "in_reply_to_id": 557562563,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I preferred keeping the package-related tests in rpc_package.py",
      "created_at": "2021-01-14T18:24:33Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r557600992",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557600992"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 70,
      "original_line": 70,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557601346",
      "pull_request_review_id": 568506667,
      "id": 557601346,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzYwMTM0Ng==",
      "diff_hunk": "@@ -65,7 +65,6 @@ def run_test(self):\n \n         self.log.info('Should not accept garbage to testmempoolaccept')\n         assert_raises_rpc_error(-3, 'Expected type array, got string', lambda: node.testmempoolaccept(rawtxs='ff00baar'))\n-        assert_raises_rpc_error(-8, 'Array must contain exactly one raw transaction for now', lambda: node.testmempoolaccept(rawtxs=['ff00baar', 'ff22']))",
      "path": "test/functional/mempool_accept.py",
      "position": 4,
      "original_position": 4,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "79e5512206fa91acc09b843bd2962903fb2b6b8d",
      "in_reply_to_id": 557562563,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "(also these 2 are not well-formed transactions, so it would return a deserialization error)",
      "created_at": "2021-01-14T18:25:08Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r557601346",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557601346"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 70,
      "original_line": 70,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557603719",
      "pull_request_review_id": 568509766,
      "id": 557603719,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzYwMzcxOQ==",
      "diff_hunk": "@@ -65,7 +65,6 @@ def run_test(self):\n \n         self.log.info('Should not accept garbage to testmempoolaccept')\n         assert_raises_rpc_error(-3, 'Expected type array, got string', lambda: node.testmempoolaccept(rawtxs='ff00baar'))\n-        assert_raises_rpc_error(-8, 'Array must contain exactly one raw transaction for now', lambda: node.testmempoolaccept(rawtxs=['ff00baar', 'ff22']))",
      "path": "test/functional/mempool_accept.py",
      "position": 4,
      "original_position": 4,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "79e5512206fa91acc09b843bd2962903fb2b6b8d",
      "in_reply_to_id": 557562563,
      "user": {
        "login": "mjdietzx",
        "id": 7217256,
        "node_id": "MDQ6VXNlcjcyMTcyNTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mjdietzx",
        "html_url": "https://github.com/mjdietzx",
        "followers_url": "https://api.github.com/users/mjdietzx/followers",
        "following_url": "https://api.github.com/users/mjdietzx/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mjdietzx/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mjdietzx/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
        "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
        "repos_url": "https://api.github.com/users/mjdietzx/repos",
        "events_url": "https://api.github.com/users/mjdietzx/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "OK, that makes sense. All good 👍",
      "created_at": "2021-01-14T18:29:15Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r557603719",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557603719"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 70,
      "original_line": 70,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557613939",
      "pull_request_review_id": 568522776,
      "id": 557613939,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzYxMzkzOQ==",
      "diff_hunk": "@@ -194,12 +194,22 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/** Per-transaction result from trying to accept a transaction to the memory pool. */\n+struct MempoolAcceptResult {\n+    MempoolAcceptResult(const CTransactionRef& ptx) : txid(ptx->GetHash()) {}\n+\n+    uint256 txid;\n+    bool m_accepted = false;\n+    TxValidationState m_state;\n+    std::list<CTransactionRef> m_replaced_transactions{};\n+    CAmount m_fee = CAmount(0);",
      "path": "src/validation.h",
      "position": null,
      "original_position": 34,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "c97fae1011c4bd376898af73576756f163eeaf58",
      "in_reply_to_id": 557185885,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ah true! I'm also starting to think that `m_accepted == m_state.IsValid()` always?? 🤔 maybe could get rid of that and do\r\n\r\n```c\r\nTxValidationState m_state;\r\nstd::optional<std::list<CTransactionRef>> m_replaced_transactions;\r\nstd::optional<CAmount> m_base_fee;\r\n```",
      "created_at": "2021-01-14T18:47:14Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r557613939",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557613939"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 205,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557615182",
      "pull_request_review_id": 568524233,
      "id": 557615182,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzYxNTE4Mg==",
      "diff_hunk": "@@ -0,0 +1,186 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"RPCs that handle raw transaction packages.\"\"\"\n+\n+from decimal import Decimal\n+from io import BytesIO\n+\n+from test_framework.address import ADDRESS_BCRT1_P2WSH_OP_TRUE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    BIP125_SEQUENCE_NUMBER,\n+    COIN,\n+    CTransaction,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+    hex_str_to_bytes,\n+)\n+\n+class RPCPackagesTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [[]]",
      "path": "test/functional/rpc_packages.py",
      "position": null,
      "original_position": 25,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "79e5512206fa91acc09b843bd2962903fb2b6b8d",
      "in_reply_to_id": 557561211,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ya i think you're right",
      "created_at": "2021-01-14T18:49:28Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r557615182",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557615182"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 25,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557626960",
      "pull_request_review_id": 568539848,
      "id": 557626960,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzYyNjk2MA==",
      "diff_hunk": "@@ -194,12 +194,22 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/** Per-transaction result from trying to accept a transaction to the memory pool. */\n+struct MempoolAcceptResult {\n+    MempoolAcceptResult(const CTransactionRef& ptx) : txid(ptx->GetHash()) {}\n+\n+    uint256 txid;\n+    bool m_accepted = false;\n+    TxValidationState m_state;\n+    std::list<CTransactionRef> m_replaced_transactions{};\n+    CAmount m_fee = CAmount(0);",
      "path": "src/validation.h",
      "position": null,
      "original_position": 34,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "c97fae1011c4bd376898af73576756f163eeaf58",
      "in_reply_to_id": 557185885,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Not sure about the equivalence right now, but `if m_accepted then m_state.IsValid()` should hold.\r\n\r\nSo you don't need to return a validation state if the tx was accepted. Though, instead of having a return struct with\r\n```\r\noptional<state>\r\noptional<fee>\r\noptional<txs>\r\n...\r\n```\r\n\r\nIt could make sense to have one struct `Success` with \r\n```\r\nfee\r\ntxs\r\n```\r\nand then return `std::variant<Sucess, TxValidationState>`\r\n\r\n\r\nwdyt?",
      "created_at": "2021-01-14T19:10:50Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r557626960",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557626960"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 205,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559265297",
      "pull_request_review_id": 570114670,
      "id": 559265297,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTI2NTI5Nw==",
      "diff_hunk": "@@ -48,9 +48,8 @@ static void AssembleBlock(benchmark::Bench& bench)\n         LOCK(::cs_main); // Required for ::AcceptToMemoryPool.\n \n         for (const auto& txr : txs) {\n-            TxValidationState state;\n-            bool ret{::AcceptToMemoryPool(*test_setup.m_node.mempool, state, txr, nullptr /* plTxnReplaced */, false /* bypass_limits */)};\n-            assert(ret);\n+            const MempoolAcceptResult res = ::AcceptToMemoryPool(*test_setup.m_node.mempool, txr, false /* bypass_limits */);",
      "path": "src/bench/block_assemble.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "c97fae1011c4bd376898af73576756f163eeaf58",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think we have a coding style recommendation for this, but IMO it's more intuitive to have `comment - arg` rather than `arg - comment`. At least other codebase callsites are following this.",
      "created_at": "2021-01-18T00:39:09Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r559265297",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559265297"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 51,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559265704",
      "pull_request_review_id": 570114670,
      "id": 559265704,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTI2NTcwNA==",
      "diff_hunk": "@@ -50,23 +50,21 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n     }\n     if (!node.mempool->exists(hashTx)) {\n         // Transaction is not already in the mempool.\n-        TxValidationState state;\n         if (max_tx_fee > 0) {\n             // First, call ATMP with test_accept and check the fee. If ATMP\n             // fails here, return error immediately.\n-            CAmount fee{0};\n-            if (!AcceptToMemoryPool(*node.mempool, state, tx,\n-                nullptr /* plTxnReplaced */, false /* bypass_limits */, /* test_accept */ true, &fee)) {\n-                return HandleATMPError(state, err_string);\n-            } else if (fee > max_tx_fee) {\n+            const MempoolAcceptResult result =\n+                AcceptToMemoryPool(*node.mempool, tx, false /* bypass_limits */, true /* test_accept */);",
      "path": "src/node/transaction.cpp",
      "position": null,
      "original_position": 14,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "c97fae1011c4bd376898af73576756f163eeaf58",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why breaking line for rvalue ?",
      "created_at": "2021-01-18T00:42:09Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r559265704",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559265704"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 57,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559269796",
      "pull_request_review_id": 570114670,
      "id": 559269796,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTI2OTc5Ng==",
      "diff_hunk": "@@ -194,12 +194,22 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/** Per-transaction result from trying to accept a transaction to the memory pool. */",
      "path": "src/validation.h",
      "position": null,
      "original_position": 26,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "c97fae1011c4bd376898af73576756f163eeaf58",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "\"Evaluation result of a single-transaction mempool acceptance\", better than repeating twice transaction ?",
      "created_at": "2021-01-18T01:07:36Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r559269796",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559269796"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 197,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559286531",
      "pull_request_review_id": 570114670,
      "id": 559286531,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTI4NjUzMQ==",
      "diff_hunk": "@@ -659,11 +659,6 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, MempoolAcceptResult& result, Works\n     // Bring the best block into scope\n     m_view.GetBestBlock();\n \n-    // we have all inputs cached now, so switch back to dummy (to protect\n-    // against bugs where we pull more inputs from disk that miss being added\n-    // to coins_to_uncache)\n-    m_view.SetBackend(m_dummy);",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "4a8e3e1a1767865a32905e8043b7c2e28b0cfd6a",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I need to dig more but if we do have a bug slips in, you might inflate the utxo cache and not update accurately `coins_to_uncache`. Thus in case of invalid transactions it avoids wasting cache space with junks. I don't understand your commit rational to deprecate this belt-and-suspender. ",
      "created_at": "2021-01-18T02:34:08Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r559286531",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559286531"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 684,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559287607",
      "pull_request_review_id": 570114670,
      "id": 559287607,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTI4NzYwNw==",
      "diff_hunk": "@@ -602,6 +605,11 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, MempoolAcceptResult& result, Works\n         return state.Invalid(TxValidationResult::TX_CONFLICT, \"txn-already-in-mempool\");\n     }\n \n+    // Check for duplicates in package",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 14,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "2f36f0743158817635a39f7efb60541fe0c4b31d",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think you need mempool state for this new check and the other one. You're verifying package element against each other (txid-vs-txid, input-vs-input). \r\n\r\nMaybe they could be gathered in some `SanitizePackage` function called in `ProcessNewPackage`. This would avoid encumbering more `PreChecks()` code path.",
      "created_at": "2021-01-18T02:38:39Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r559287607",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559287607"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 608,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559288304",
      "pull_request_review_id": 570114670,
      "id": 559288304,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTI4ODMwNA==",
      "diff_hunk": "@@ -921,56 +920,78 @@ static RPCHelpMan testmempoolaccept()\n         UniValueType(), // VNUM or VSTR, checked inside AmountFromValue()\n     });\n \n-    if (request.params[0].get_array().size() != 1) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array must contain exactly one raw transaction for now\");\n-    }\n-\n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_array()[0].get_str())) {\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n-    }\n-    CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-    const uint256& tx_hash = tx->GetHash();\n-\n+    UniValue transactions = request.params[0].get_array();\n     const CFeeRate max_raw_tx_fee_rate = request.params[1].isNull() ?\n                                              DEFAULT_MAX_RAW_TX_FEE_RATE :\n                                              CFeeRate(AmountFromValue(request.params[1]));\n \n     CTxMemPool& mempool = EnsureMemPool(request.context);\n-    int64_t virtual_size = GetVirtualTransactionSize(*tx);\n-    CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n \n-    UniValue result(UniValue::VARR);\n-    UniValue result_0(UniValue::VOBJ);\n-    result_0.pushKV(\"txid\", tx_hash.GetHex());\n+    std::vector<CTransactionRef> txns;\n \n-    MempoolAcceptResult accept_result(std::move(tx));\n-    {\n-        LOCK(cs_main);\n-        accept_result = AcceptToMemoryPool(mempool, std::move(tx),\n-            false /* bypass_limits */, true /* test_accept */);\n+    for (unsigned int i = 0; i < transactions.size(); ++i) {\n+        CMutableTransaction mtx;\n+        if (!DecodeHexTx(mtx, transactions[i].get_str())) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n+        }\n+        txns.emplace_back(MakeTransactionRef(std::move(mtx)));\n     }\n-    const bool test_accept_res = accept_result.m_accepted;\n-    const TxValidationState state = accept_result.m_state;\n-    const CAmount fee = accept_result.m_fee;\n \n-    // Check that fee does not exceed maximum fee\n-    if (test_accept_res && max_raw_tx_fee && fee > max_raw_tx_fee) {\n-        result_0.pushKV(\"allowed\", false);\n-        result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n-        result.push_back(std::move(result_0));\n-        return result;\n+    std::vector<MempoolAcceptResult> validation_results;\n+    if (transactions.size() == 1) {\n+        {\n+            LOCK(cs_main);\n+            validation_results.emplace_back(\n+                AcceptToMemoryPool(mempool, txns[0], false /* bypass_limits */, true /* test_accept */));\n+        }\n+    } else {\n+        {\n+            LOCK(cs_main);\n+            validation_results = ProcessNewPackage(mempool, txns, true);",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 80,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "2f36f0743158817635a39f7efb60541fe0c4b31d",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think you can split `ProcessNewPackage()`/`AcceptMultipleTransactions` in its own commit. Better to isolate mempool changes from rpc-level ones IMO.",
      "created_at": "2021-01-18T02:41:59Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r559288304",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559288304"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 950,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559619214",
      "pull_request_review_id": 570558793,
      "id": 559619214,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTYxOTIxNA==",
      "diff_hunk": "@@ -659,11 +659,6 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, MempoolAcceptResult& result, Works\n     // Bring the best block into scope\n     m_view.GetBestBlock();\n \n-    // we have all inputs cached now, so switch back to dummy (to protect\n-    // against bugs where we pull more inputs from disk that miss being added\n-    // to coins_to_uncache)\n-    m_view.SetBackend(m_dummy);",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "4a8e3e1a1767865a32905e8043b7c2e28b0cfd6a",
      "in_reply_to_id": 559286531,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Let me try to elaborate a bit: when validating packages, we have each coin in the `m_viewmempool`, which at this point is the `m_view` backend. If we set the backend to dummy, we lose the ability to look up those coins. Typically, the backend allows for going to disk (which would be unnecessary after this line and be the source of a `coins_to_uncache` leak). Since we need the coins in `CheckSequenceLocks` right afterward, and then for `CheckInputScripts` again later, I got rid of it 🤔 maybe a little aggressive oops\r\n\r\nThe lines above for each input:\r\n\r\n```c\r\n        if (!coins_cache.HaveCoinInCache(txin.prevout)) {\r\n            coins_to_uncache.push_back(txin.prevout);\r\n        }\r\n```\r\n\r\nshould catch all of the coins that we need to uncache. It's a belt-and-suspenders check I would prefer not to remove, but we would need to implement a little differently. Perhaps a boolean in `CCoinsViewMemPool` for allowing fetching from disk?",
      "created_at": "2021-01-18T14:51:11Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r559619214",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559619214"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 684,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559722425",
      "pull_request_review_id": 570690922,
      "id": 559722425,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTcyMjQyNQ==",
      "diff_hunk": "@@ -194,12 +194,22 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/** Per-transaction result from trying to accept a transaction to the memory pool. */\n+struct MempoolAcceptResult {\n+    MempoolAcceptResult(const CTransactionRef& ptx) : txid(ptx->GetHash()) {}\n+\n+    uint256 txid;\n+    bool m_accepted = false;\n+    TxValidationState m_state;\n+    std::list<CTransactionRef> m_replaced_transactions{};\n+    CAmount m_fee = CAmount(0);",
      "path": "src/validation.h",
      "position": null,
      "original_position": 34,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "c97fae1011c4bd376898af73576756f163eeaf58",
      "in_reply_to_id": 557185885,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah I agree - I just started writing this and I think we should actually put the `TxValidationState` and `m_base_fees` into the `MemPoolAccept::Workspace` (since we need access throughout validation), then return whichever is appropriate at the end.\r\n\r\nHow does this look?\r\n```c\r\n\r\nstruct MempoolAcceptSuccess {\r\n    std::list<CTransactionRef> m_replaced_transactions;\r\n    CAmount m_base_fee;\r\n}\r\n\r\nusing MempoolAcceptResult = std::variant<MempoolAcceptSuccess, TxValidationState>;\r\nusing PackageAcceptResult = std::variant<std::vector<MempoolAcceptSuccess>, std::tuple<uint256, TxValidationState>>;\r\n```\r\n",
      "created_at": "2021-01-18T17:45:53Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r559722425",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559722425"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 205,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559745529",
      "pull_request_review_id": 570719254,
      "id": 559745529,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTc0NTUyOQ==",
      "diff_hunk": "@@ -194,12 +194,22 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/** Per-transaction result from trying to accept a transaction to the memory pool. */\n+struct MempoolAcceptResult {\n+    MempoolAcceptResult(const CTransactionRef& ptx) : txid(ptx->GetHash()) {}\n+\n+    uint256 txid;\n+    bool m_accepted = false;\n+    TxValidationState m_state;\n+    std::list<CTransactionRef> m_replaced_transactions{};\n+    CAmount m_fee = CAmount(0);",
      "path": "src/validation.h",
      "position": null,
      "original_position": 34,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "c97fae1011c4bd376898af73576756f163eeaf58",
      "in_reply_to_id": 557185885,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Looks good",
      "created_at": "2021-01-18T18:43:50Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r559745529",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559745529"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 205,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/560327691",
      "pull_request_review_id": 571445634,
      "id": 560327691,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDMyNzY5MQ==",
      "diff_hunk": "@@ -194,12 +194,22 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/** Per-transaction result from trying to accept a transaction to the memory pool. */\n+struct MempoolAcceptResult {\n+    MempoolAcceptResult(const CTransactionRef& ptx) : txid(ptx->GetHash()) {}\n+\n+    uint256 txid;\n+    bool m_accepted = false;\n+    TxValidationState m_state;\n+    std::list<CTransactionRef> m_replaced_transactions{};\n+    CAmount m_fee = CAmount(0);",
      "path": "src/validation.h",
      "position": null,
      "original_position": 34,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "c97fae1011c4bd376898af73576756f163eeaf58",
      "in_reply_to_id": 557185885,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ay @MarcoFalke, the `std::variant` method is a bit hairy... see [this branch](https://github.com/glozow/bitcoin/commit/7d9151afc0d95e232bf1f57e8e052f5dc3bef7e7). It works, but has a larger diff so I'm worried it might encumber reviewers. If you think it's an improvement, I can leave it for a followup or something?",
      "created_at": "2021-01-19T16:51:46Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r560327691",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/560327691"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 205,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/560506055",
      "pull_request_review_id": 571673426,
      "id": 560506055,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDUwNjA1NQ==",
      "diff_hunk": "@@ -50,23 +50,21 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n     }\n     if (!node.mempool->exists(hashTx)) {\n         // Transaction is not already in the mempool.\n-        TxValidationState state;\n         if (max_tx_fee > 0) {\n             // First, call ATMP with test_accept and check the fee. If ATMP\n             // fails here, return error immediately.\n-            CAmount fee{0};\n-            if (!AcceptToMemoryPool(*node.mempool, state, tx,\n-                nullptr /* plTxnReplaced */, false /* bypass_limits */, /* test_accept */ true, &fee)) {\n-                return HandleATMPError(state, err_string);\n-            } else if (fee > max_tx_fee) {\n+            const MempoolAcceptResult result =\n+                AcceptToMemoryPool(*node.mempool, tx, false /* bypass_limits */, true /* test_accept */);",
      "path": "src/node/transaction.cpp",
      "position": null,
      "original_position": 14,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "c97fae1011c4bd376898af73576756f163eeaf58",
      "in_reply_to_id": 559265704,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't like long lines 🤷 I put it back since it's not too bad",
      "created_at": "2021-01-19T21:25:13Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r560506055",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/560506055"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 57,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/560507542",
      "pull_request_review_id": 571675057,
      "id": 560507542,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDUwNzU0Mg==",
      "diff_hunk": "@@ -602,6 +605,11 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, MempoolAcceptResult& result, Works\n         return state.Invalid(TxValidationResult::TX_CONFLICT, \"txn-already-in-mempool\");\n     }\n \n+    // Check for duplicates in package",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 14,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "2f36f0743158817635a39f7efb60541fe0c4b31d",
      "in_reply_to_id": 559287607,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Right good point. I've removed it since checking inputs is a better way to test duplicates/conflicts. I'll note for the future to do context-free sanitization checks before taking the lock :) ",
      "created_at": "2021-01-19T21:27:35Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r560507542",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/560507542"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 608,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/560507626",
      "pull_request_review_id": 571675166,
      "id": 560507626,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDUwNzYyNg==",
      "diff_hunk": "@@ -921,56 +920,78 @@ static RPCHelpMan testmempoolaccept()\n         UniValueType(), // VNUM or VSTR, checked inside AmountFromValue()\n     });\n \n-    if (request.params[0].get_array().size() != 1) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array must contain exactly one raw transaction for now\");\n-    }\n-\n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_array()[0].get_str())) {\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n-    }\n-    CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-    const uint256& tx_hash = tx->GetHash();\n-\n+    UniValue transactions = request.params[0].get_array();\n     const CFeeRate max_raw_tx_fee_rate = request.params[1].isNull() ?\n                                              DEFAULT_MAX_RAW_TX_FEE_RATE :\n                                              CFeeRate(AmountFromValue(request.params[1]));\n \n     CTxMemPool& mempool = EnsureMemPool(request.context);\n-    int64_t virtual_size = GetVirtualTransactionSize(*tx);\n-    CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n \n-    UniValue result(UniValue::VARR);\n-    UniValue result_0(UniValue::VOBJ);\n-    result_0.pushKV(\"txid\", tx_hash.GetHex());\n+    std::vector<CTransactionRef> txns;\n \n-    MempoolAcceptResult accept_result(std::move(tx));\n-    {\n-        LOCK(cs_main);\n-        accept_result = AcceptToMemoryPool(mempool, std::move(tx),\n-            false /* bypass_limits */, true /* test_accept */);\n+    for (unsigned int i = 0; i < transactions.size(); ++i) {\n+        CMutableTransaction mtx;\n+        if (!DecodeHexTx(mtx, transactions[i].get_str())) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n+        }\n+        txns.emplace_back(MakeTransactionRef(std::move(mtx)));\n     }\n-    const bool test_accept_res = accept_result.m_accepted;\n-    const TxValidationState state = accept_result.m_state;\n-    const CAmount fee = accept_result.m_fee;\n \n-    // Check that fee does not exceed maximum fee\n-    if (test_accept_res && max_raw_tx_fee && fee > max_raw_tx_fee) {\n-        result_0.pushKV(\"allowed\", false);\n-        result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n-        result.push_back(std::move(result_0));\n-        return result;\n+    std::vector<MempoolAcceptResult> validation_results;\n+    if (transactions.size() == 1) {\n+        {\n+            LOCK(cs_main);\n+            validation_results.emplace_back(\n+                AcceptToMemoryPool(mempool, txns[0], false /* bypass_limits */, true /* test_accept */));\n+        }\n+    } else {\n+        {\n+            LOCK(cs_main);\n+            validation_results = ProcessNewPackage(mempool, txns, true);",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 80,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "2f36f0743158817635a39f7efb60541fe0c4b31d",
      "in_reply_to_id": 559288304,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "taken",
      "created_at": "2021-01-19T21:27:44Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r560507626",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/560507626"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 950,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/560508663",
      "pull_request_review_id": 571676452,
      "id": 560508663,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDUwODY2Mw==",
      "diff_hunk": "@@ -48,9 +48,8 @@ static void AssembleBlock(benchmark::Bench& bench)\n         LOCK(::cs_main); // Required for ::AcceptToMemoryPool.\n \n         for (const auto& txr : txs) {\n-            TxValidationState state;\n-            bool ret{::AcceptToMemoryPool(*test_setup.m_node.mempool, state, txr, nullptr /* plTxnReplaced */, false /* bypass_limits */)};\n-            assert(ret);\n+            const MempoolAcceptResult res = ::AcceptToMemoryPool(*test_setup.m_node.mempool, txr, false /* bypass_limits */);",
      "path": "src/bench/block_assemble.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "c97fae1011c4bd376898af73576756f163eeaf58",
      "in_reply_to_id": 559265297,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I agree, really, but didn't change it because I'd rather put all my opinion-energy into having a `MempoolAcceptResult` struct 😛 ",
      "created_at": "2021-01-19T21:29:38Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r560508663",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/560508663"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 51,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/560509157",
      "pull_request_review_id": 571677074,
      "id": 560509157,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDUwOTE1Nw==",
      "diff_hunk": "@@ -194,12 +194,22 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/** Per-transaction result from trying to accept a transaction to the memory pool. */\n+struct MempoolAcceptResult {\n+    MempoolAcceptResult(const CTransactionRef& ptx) : txid(ptx->GetHash()) {}\n+\n+    uint256 txid;\n+    bool m_accepted = false;\n+    TxValidationState m_state;\n+    std::list<CTransactionRef> m_replaced_transactions{};\n+    CAmount m_fee = CAmount(0);",
      "path": "src/validation.h",
      "position": null,
      "original_position": 34,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "c97fae1011c4bd376898af73576756f163eeaf58",
      "in_reply_to_id": 557163163,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "taken!",
      "created_at": "2021-01-19T21:30:35Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r560509157",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/560509157"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 205,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/560509955",
      "pull_request_review_id": 571678081,
      "id": 560509955,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDUwOTk1NQ==",
      "diff_hunk": "@@ -194,12 +194,22 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/** Per-transaction result from trying to accept a transaction to the memory pool. */\n+struct MempoolAcceptResult {\n+    MempoolAcceptResult(const CTransactionRef& ptx) : txid(ptx->GetHash()) {}\n+\n+    uint256 txid;",
      "path": "src/validation.h",
      "position": null,
      "original_position": 30,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "c97fae1011c4bd376898af73576756f163eeaf58",
      "in_reply_to_id": 557161651,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Moved it to the relevant commit. Putting a `CTransactionRef` in the `MempoolAcceptResult` when returning failure so that we know which tx failed; we need it to get the txid and wtxid in `testmempoolaccept`.",
      "created_at": "2021-01-19T21:32:05Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r560509955",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/560509955"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 201,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/562041253",
      "pull_request_review_id": 573537979,
      "id": 562041253,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjA0MTI1Mw==",
      "diff_hunk": "@@ -187,12 +187,34 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/**\n+* Validation result for a single transaction mempool acceptance.\n+* When m_accepted = true, m_replaced_transactions contains a list\n+* of replaced transactions and m_base_fees contains the tx fees.\n+*/\n+struct MempoolAcceptResult {\n+    bool m_accepted;\n+    TxValidationState m_state;\n+\n+    // Valid when m_accepted = true\n+    std::list<CTransactionRef> m_replaced_transactions;\n+    CAmount m_base_fees;",
      "path": "src/validation.h",
      "position": null,
      "original_position": 37,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "c75f7052921bc15c39d4b4272ef2c18550a51a0d",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Unless I am mistaken, incorrectly reading this will result in an uninitialized read, which is only detected by valgrind. Wouldn't it be better to make this safe for non-valgrind use via an std::optional at least. Or is that also a bit too verbose (like the std::variant approach)?",
      "created_at": "2021-01-21T16:56:51Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r562041253",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/562041253"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 204,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/562779844",
      "pull_request_review_id": 574456709,
      "id": 562779844,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjc3OTg0NA==",
      "diff_hunk": "@@ -187,12 +187,34 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/**\n+* Validation result for a single transaction mempool acceptance.\n+* When m_accepted = true, m_replaced_transactions contains a list\n+* of replaced transactions and m_base_fees contains the tx fees.\n+*/\n+struct MempoolAcceptResult {\n+    bool m_accepted;\n+    TxValidationState m_state;\n+\n+    // Valid when m_accepted = true\n+    std::list<CTransactionRef> m_replaced_transactions;\n+    CAmount m_base_fees;",
      "path": "src/validation.h",
      "position": null,
      "original_position": 37,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "c75f7052921bc15c39d4b4272ef2c18550a51a0d",
      "in_reply_to_id": 562041253,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah good point, let me whip up the `std::optional` method real quick and get back to you on the verbosity",
      "created_at": "2021-01-22T17:14:23Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r562779844",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/562779844"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 204,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563150542",
      "pull_request_review_id": 574845534,
      "id": 563150542,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzE1MDU0Mg==",
      "diff_hunk": "@@ -0,0 +1,186 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"RPCs that handle raw transaction packages.\"\"\"\n+\n+from decimal import Decimal\n+from io import BytesIO\n+\n+from test_framework.address import ADDRESS_BCRT1_P2WSH_OP_TRUE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    BIP125_SEQUENCE_NUMBER,\n+    COIN,\n+    CTransaction,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+    hex_str_to_bytes,\n+)\n+\n+class RPCPackagesTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.privkeys = [node.get_deterministic_priv_key().key]\n+        self.address = node.get_deterministic_priv_key().address\n+        self.coins = []\n+        # The last 100 coinbase transactions are premature\n+        for b in node.generatetoaddress(120, self.address)[:20]:\n+            coinbase = node.getblock(blockhash=b, verbosity=2)[\"tx\"][0]\n+            self.coins.append({\n+                \"txid\": coinbase[\"txid\"],\n+                \"amount\": coinbase[\"vout\"][0][\"value\"],\n+                \"scriptPubKey\": coinbase[\"vout\"][0][\"scriptPubKey\"],\n+            })\n+\n+        # Create some transactions that can be reused throughout the test. Never submit these to mempool.\n+        self.independent_txns_hex = []\n+        self.independent_txns_testres = []\n+        for _ in range(3):\n+            coin = self.coins.pop()\n+            rawtx = node.createrawtransaction([{\"txid\" : coin[\"txid\"], \"vout\" : 0}],\n+                {self.address : coin[\"amount\"] - Decimal(\"0.0001\")})\n+            signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n+            assert signedtx[\"complete\"]\n+            testres = node.testmempoolaccept([signedtx[\"hex\"]])\n+            assert testres[0][\"allowed\"]\n+            self.independent_txns_hex.append(signedtx[\"hex\"])\n+            # testmempoolaccept returns a list of length one, avoid creating a 2D list\n+            self.independent_txns_testres.append(testres[0])\n+\n+        self.test_independent()\n+        self.test_chain()\n+        self.test_conflicting()\n+        self.test_rbf()\n+\n+    def chain_transaction(self, parent_txid, value, parent_scriptPubKey=None):\n+        \"\"\"Build a transaction that spends parent_txid:vout. Return tuple (transaction id, raw hex).\"\"\"\n+        node = self.nodes[0]\n+        inputs = [{\"txid\" : parent_txid, \"vout\" : 0}]\n+        outputs = {self.address : value}\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+        prevtxs = [{\n+            \"txid\": parent_txid,\n+            \"vout\": 0,\n+            \"scriptPubKey\": parent_scriptPubKey,\n+            \"amount\": value + Decimal(\"0.0001\"),\n+        }] if parent_scriptPubKey else None\n+        signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys, prevtxs=prevtxs)\n+        tx = CTransaction()\n+        assert signedtx[\"complete\"]\n+        tx.deserialize(BytesIO(hex_str_to_bytes(signedtx[\"hex\"])))\n+        return (tx.rehash(), signedtx[\"hex\"], tx.vout[0].scriptPubKey.hex())\n+\n+    def test_independent(self):\n+        self.log.info(\"Test multiple independent transactions in a package\")\n+        node = self.nodes[0]\n+        assert_equal(self.independent_txns_testres, node.testmempoolaccept(rawtxs=self.independent_txns_hex))\n+\n+        self.log.info(\"Test a valid package with garbage inserted\")\n+        garbage_tx = node.createrawtransaction([{\"txid\": \"00\" * 32, \"vout\": 5}], {self.address: 1})\n+        tx = CTransaction()\n+        tx.deserialize(BytesIO(hex_str_to_bytes(garbage_tx)))\n+        testres_bad = node.testmempoolaccept(self.independent_txns_hex + [garbage_tx])\n+        assert_equal(testres_bad, [{\"txid\": tx.rehash(), \"wtxid\": tx.getwtxid(), \"allowed\": False, \"reject-reason\": \"missing-inputs\"}])\n+\n+    def test_chain(self):\n+        node = self.nodes[0]\n+        first_coin = self.coins.pop()\n+\n+        self.log.info(\"Create a chain of three transactions\")\n+        scriptPubKey = None\n+        txid = first_coin[\"txid\"]\n+        chain = []\n+        value = first_coin[\"amount\"]\n+\n+        for _ in range(3):\n+            value -= Decimal(\"0.0001\") # Deduct reasonable fee\n+            (txid, txhex, scriptPubKey) = self.chain_transaction(txid, value, scriptPubKey)\n+            chain.append(txhex)\n+\n+        self.log.info(\"Testmempoolaccept with entire package\")",
      "path": "test/functional/rpc_packages.py",
      "position": null,
      "original_position": 107,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "ebca80d81124fac369e18467e17a1bacfdbfefec",
      "in_reply_to_id": null,
      "user": {
        "login": "robot-dreams",
        "id": 4276679,
        "node_id": "MDQ6VXNlcjQyNzY2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4276679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/robot-dreams",
        "html_url": "https://github.com/robot-dreams",
        "followers_url": "https://api.github.com/users/robot-dreams/followers",
        "following_url": "https://api.github.com/users/robot-dreams/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/robot-dreams/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/robot-dreams/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/robot-dreams/subscriptions",
        "organizations_url": "https://api.github.com/users/robot-dreams/orgs",
        "repos_url": "https://api.github.com/users/robot-dreams/repos",
        "events_url": "https://api.github.com/users/robot-dreams/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/robot-dreams/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Would it be useful to add a short check here that `testmempoolaccept` fails if the transactions aren't sorted? For example:\r\n\r\n```\r\n        self.log.info(\"Test package with unsorted transactions isn't accepted\")\r\n        unsorted_chain = [chain[0], chain[2], chain[1]]\r\n        orphaned = CTransaction()\r\n        orphaned.deserialize(BytesIO(hex_str_to_bytes(unsorted_chain[1])))\r\n        testres_bad = node.testmempoolaccept(rawtxs=unsorted_chain)\r\n        assert_equal(testres_bad, [{\"txid\": orphaned.rehash(), \"wtxid\": orphaned.getwtxid(), \"allowed\": False, \"reject-reason\": \"missing-inputs\"}])\r\n```",
      "created_at": "2021-01-23T13:04:29Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r563150542",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563150542"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 155,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563151242",
      "pull_request_review_id": 574845534,
      "id": 563151242,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzE1MTI0Mg==",
      "diff_hunk": "@@ -889,7 +888,7 @@ static RPCHelpMan testmempoolaccept()\n                 },\n                 RPCResult{\n                     RPCResult::Type::ARR, \"\", \"The result of the mempool acceptance test for each raw transaction in the input array.\\n\"",
      "path": "src/rpc/rawtransaction.cpp",
      "position": 31,
      "original_position": 13,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "ebca80d81124fac369e18467e17a1bacfdbfefec",
      "in_reply_to_id": null,
      "user": {
        "login": "robot-dreams",
        "id": 4276679,
        "node_id": "MDQ6VXNlcjQyNzY2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4276679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/robot-dreams",
        "html_url": "https://github.com/robot-dreams",
        "followers_url": "https://api.github.com/users/robot-dreams/followers",
        "following_url": "https://api.github.com/users/robot-dreams/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/robot-dreams/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/robot-dreams/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/robot-dreams/subscriptions",
        "organizations_url": "https://api.github.com/users/robot-dreams/orgs",
        "repos_url": "https://api.github.com/users/robot-dreams/repos",
        "events_url": "https://api.github.com/users/robot-dreams/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/robot-dreams/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nit: Is it worth explicitly mentioning that on failure, the one entry in the result array corresponds to the first transaction in the package that failed validation?",
      "created_at": "2021-01-23T13:11:27Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r563151242",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563151242"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 906,
      "original_line": 906,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563152582",
      "pull_request_review_id": 574845534,
      "id": 563152582,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzE1MjU4Mg==",
      "diff_hunk": "@@ -880,15 +880,28 @@ class CTxMemPool\n  * It also allows you to sign a double-spend directly in\n  * signrawtransactionwithkey and signrawtransactionwithwallet,\n  * as long as the conflicting transaction is not yet confirmed.\n+ * It can also serve as temporary scratch space for some set",
      "path": "src/txmempool.h",
      "position": null,
      "original_position": 4,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "ebca80d81124fac369e18467e17a1bacfdbfefec",
      "in_reply_to_id": null,
      "user": {
        "login": "robot-dreams",
        "id": 4276679,
        "node_id": "MDQ6VXNlcjQyNzY2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4276679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/robot-dreams",
        "html_url": "https://github.com/robot-dreams",
        "followers_url": "https://api.github.com/users/robot-dreams/followers",
        "following_url": "https://api.github.com/users/robot-dreams/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/robot-dreams/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/robot-dreams/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/robot-dreams/subscriptions",
        "organizations_url": "https://api.github.com/users/robot-dreams/orgs",
        "repos_url": "https://api.github.com/users/robot-dreams/repos",
        "events_url": "https://api.github.com/users/robot-dreams/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/robot-dreams/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Style nit (feel free to ignore):\r\n\r\nRather than extending `CCoinsViewMemPool`, would it make sense to instead add something like `CCoinsViewPackage : CCoinsViewBacked`? Doing so might have the following advantages:\r\n\r\n* The backing `CCoinsView` doesn't have to be a `CCoinsViewMemPool` (e.g. what if you want to submit a package to a block-relay-only node in the future)\r\n* It separates the concerns of tracking mempool coins and having scratch space\r\n* It makes it more obvious that each time you validate a package, you need a separate instance of `CCoinsViewPackage` (and that you shouldn't reuse an existing `CCoinsViewMemPool`)",
      "created_at": "2021-01-23T13:26:29Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r563152582",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563152582"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 891,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563155678",
      "pull_request_review_id": 574845534,
      "id": 563155678,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzE1NTY3OA==",
      "diff_hunk": "@@ -187,12 +187,48 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/**\n+* Validation result for a single transaction mempool acceptance.\n+* When m_accepted = true, m_replaced_transactions contains a list\n+* of replaced transactions and m_base_fees contains the tx fees.\n+*/\n+struct MempoolAcceptResult {\n+    bool m_accepted;\n+    CTransactionRef ptx;\n+\n+    // Valid when m_accepted = false\n+    TxValidationState m_state;\n+\n+    // Valid when m_accepted = true\n+    std::list<CTransactionRef> m_replaced_transactions;\n+    CAmount m_base_fees;\n+\n+    explicit MempoolAcceptResult(const CTransactionRef& tx, const TxValidationState& state) : ptx(tx), m_state(state) {\n+        m_accepted = false;\n+    }\n+\n+    /** Constructor for success case */\n+    explicit MempoolAcceptResult(std::list<CTransactionRef>&& replaced_txns, CAmount fees) :\n+        m_replaced_transactions(std::move(replaced_txns)), m_base_fees(fees) {\n+        m_accepted = true;\n+    }\n+};\n+\n+/**\n+ * (Try to) add a transaction to the memory pool.\n+ */\n+MempoolAcceptResult AcceptToMemoryPool(CTxMemPool& pool, const CTransactionRef &tx,\n+                        bool bypass_limits, bool test_accept=false) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+\n+/**\n+* Atomically test acceptance of multiple transactions.\n+* If validation fails for any individual transaction, this returns\n+* a single MempoolAcceptResult with the failure. If all successful,",
      "path": "src/validation.h",
      "position": null,
      "original_position": 62,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "ebca80d81124fac369e18467e17a1bacfdbfefec",
      "in_reply_to_id": null,
      "user": {
        "login": "robot-dreams",
        "id": 4276679,
        "node_id": "MDQ6VXNlcjQyNzY2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4276679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/robot-dreams",
        "html_url": "https://github.com/robot-dreams",
        "followers_url": "https://api.github.com/users/robot-dreams/followers",
        "following_url": "https://api.github.com/users/robot-dreams/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/robot-dreams/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/robot-dreams/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/robot-dreams/subscriptions",
        "organizations_url": "https://api.github.com/users/robot-dreams/orgs",
        "repos_url": "https://api.github.com/users/robot-dreams/repos",
        "events_url": "https://api.github.com/users/robot-dreams/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/robot-dreams/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nit: Is it worth saying \"with the **first** failure\"?",
      "created_at": "2021-01-23T13:57:18Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r563155678",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563155678"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 226,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563156391",
      "pull_request_review_id": 574845534,
      "id": 563156391,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzE1NjM5MQ==",
      "diff_hunk": "@@ -5011,10 +5071,10 @@ bool LoadMempool(CTxMemPool& pool)\n             TxValidationState state;",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 371,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "ebca80d81124fac369e18467e17a1bacfdbfefec",
      "in_reply_to_id": null,
      "user": {
        "login": "robot-dreams",
        "id": 4276679,
        "node_id": "MDQ6VXNlcjQyNzY2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4276679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/robot-dreams",
        "html_url": "https://github.com/robot-dreams",
        "followers_url": "https://api.github.com/users/robot-dreams/followers",
        "following_url": "https://api.github.com/users/robot-dreams/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/robot-dreams/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/robot-dreams/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/robot-dreams/subscriptions",
        "organizations_url": "https://api.github.com/users/robot-dreams/orgs",
        "repos_url": "https://api.github.com/users/robot-dreams/repos",
        "events_url": "https://api.github.com/users/robot-dreams/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/robot-dreams/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nit: Is `state` still needed here?",
      "created_at": "2021-01-23T14:04:12Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r563156391",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563156391"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5071,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563157572",
      "pull_request_review_id": 574845534,
      "id": 563157572,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzE1NzU3Mg==",
      "diff_hunk": "@@ -922,67 +921,77 @@ static RPCHelpMan testmempoolaccept()\n         UniValueType(), // VNUM or VSTR, checked inside AmountFromValue()\n     });\n \n-    if (request.params[0].get_array().size() != 1) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array must contain exactly one raw transaction for now\");\n-    }\n-\n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_array()[0].get_str())) {\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n-    }\n-    CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-\n+    const UniValue raw_transactions = request.params[0].get_array();\n     const CFeeRate max_raw_tx_fee_rate = request.params[1].isNull() ?\n                                              DEFAULT_MAX_RAW_TX_FEE_RATE :\n                                              CFeeRate(AmountFromValue(request.params[1]));\n \n     CTxMemPool& mempool = EnsureMemPool(request.context);\n-    int64_t virtual_size = GetVirtualTransactionSize(*tx);\n-    CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n-\n-    UniValue result(UniValue::VARR);\n-    UniValue result_0(UniValue::VOBJ);\n-    result_0.pushKV(\"txid\", tx->GetHash().GetHex());\n-    result_0.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n+    std::vector<CTransactionRef> txns;\n \n-    TxValidationState state;\n-    bool test_accept_res;\n-    CAmount fee{0};\n-    {\n-        LOCK(cs_main);\n-        test_accept_res = AcceptToMemoryPool(mempool, state, std::move(tx),\n-            nullptr /* plTxnReplaced */, false /* bypass_limits */, /* test_accept */ true, &fee);\n+    for (unsigned int i = 0; i < raw_transactions.size(); ++i) {\n+        CMutableTransaction mtx;\n+        if (!DecodeHexTx(mtx, raw_transactions[i].get_str())) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 58,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "ebca80d81124fac369e18467e17a1bacfdbfefec",
      "in_reply_to_id": null,
      "user": {
        "login": "robot-dreams",
        "id": 4276679,
        "node_id": "MDQ6VXNlcjQyNzY2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4276679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/robot-dreams",
        "html_url": "https://github.com/robot-dreams",
        "followers_url": "https://api.github.com/users/robot-dreams/followers",
        "following_url": "https://api.github.com/users/robot-dreams/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/robot-dreams/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/robot-dreams/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/robot-dreams/subscriptions",
        "organizations_url": "https://api.github.com/users/robot-dreams/orgs",
        "repos_url": "https://api.github.com/users/robot-dreams/repos",
        "events_url": "https://api.github.com/users/robot-dreams/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/robot-dreams/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Is it worth keeping some flavor of the \"Make sure the tx has at least one input.\" message that was removed above?",
      "created_at": "2021-01-23T14:15:43Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r563157572",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563157572"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 939,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563160249",
      "pull_request_review_id": 574845534,
      "id": 563160249,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzE2MDI0OQ==",
      "diff_hunk": "@@ -922,67 +921,77 @@ static RPCHelpMan testmempoolaccept()\n         UniValueType(), // VNUM or VSTR, checked inside AmountFromValue()\n     });\n \n-    if (request.params[0].get_array().size() != 1) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array must contain exactly one raw transaction for now\");\n-    }\n-\n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_array()[0].get_str())) {\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n-    }\n-    CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-\n+    const UniValue raw_transactions = request.params[0].get_array();\n     const CFeeRate max_raw_tx_fee_rate = request.params[1].isNull() ?\n                                              DEFAULT_MAX_RAW_TX_FEE_RATE :\n                                              CFeeRate(AmountFromValue(request.params[1]));\n \n     CTxMemPool& mempool = EnsureMemPool(request.context);\n-    int64_t virtual_size = GetVirtualTransactionSize(*tx);\n-    CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n-\n-    UniValue result(UniValue::VARR);\n-    UniValue result_0(UniValue::VOBJ);\n-    result_0.pushKV(\"txid\", tx->GetHash().GetHex());\n-    result_0.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n+    std::vector<CTransactionRef> txns;\n \n-    TxValidationState state;\n-    bool test_accept_res;\n-    CAmount fee{0};\n-    {\n-        LOCK(cs_main);\n-        test_accept_res = AcceptToMemoryPool(mempool, state, std::move(tx),\n-            nullptr /* plTxnReplaced */, false /* bypass_limits */, /* test_accept */ true, &fee);\n+    for (unsigned int i = 0; i < raw_transactions.size(); ++i) {\n+        CMutableTransaction mtx;\n+        if (!DecodeHexTx(mtx, raw_transactions[i].get_str())) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n+        }\n+        txns.emplace_back(MakeTransactionRef(std::move(mtx)));\n     }\n \n-    // Check that fee does not exceed maximum fee\n-    if (test_accept_res && max_raw_tx_fee && fee > max_raw_tx_fee) {\n-        result_0.pushKV(\"allowed\", false);\n-        result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n-        result.push_back(std::move(result_0));\n-        return result;\n+    std::vector<MempoolAcceptResult> validation_results;\n+    if (txns.size() == 1) {\n+        validation_results.emplace_back(WITH_LOCK(cs_main,\n+            return AcceptToMemoryPool(mempool, txns[0], false /* bypass_limits */, true /* test_accept */)));\n+    } else {\n+        validation_results = WITH_LOCK(cs_main, return ProcessNewPackage(mempool, txns, true));\n     }\n-    result_0.pushKV(\"allowed\", test_accept_res);\n \n-    // Only return the fee and vsize if the transaction would pass ATMP.\n-    // These can be used to calculate the feerate.\n-    if (test_accept_res) {\n-        result_0.pushKV(\"vsize\", virtual_size);\n-        UniValue fees(UniValue::VOBJ);\n-        fees.pushKV(\"base\", ValueFromAmount(fee));\n-        result_0.pushKV(\"fees\", fees);\n-    } else {\n-        if (state.IsInvalid()) {\n-            if (state.GetResult() == TxValidationResult::TX_MISSING_INPUTS) {\n-                result_0.pushKV(\"reject-reason\", \"missing-inputs\");\n+    auto tx_accepted = [](MempoolAcceptResult& res) { return res.m_accepted; };\n+    const bool all_valid = std::all_of(validation_results.begin(), validation_results.end(), tx_accepted);\n+    // ProcessNewPackage should return a MempoolAcceptResult per transaction\n+    // or exactly 1 for the first error that occurs.\n+    CHECK_NONFATAL(all_valid || validation_results.size() == 1);\n+\n+    // TODO: Report absurd fees for packages.\n+\n+    UniValue result(UniValue::VARR);\n+    if (all_valid) {\n+        for (unsigned int i = 0; i < validation_results.size(); ++i) {",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 99,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "ebca80d81124fac369e18467e17a1bacfdbfefec",
      "in_reply_to_id": null,
      "user": {
        "login": "robot-dreams",
        "id": 4276679,
        "node_id": "MDQ6VXNlcjQyNzY2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4276679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/robot-dreams",
        "html_url": "https://github.com/robot-dreams",
        "followers_url": "https://api.github.com/users/robot-dreams/followers",
        "following_url": "https://api.github.com/users/robot-dreams/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/robot-dreams/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/robot-dreams/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/robot-dreams/subscriptions",
        "organizations_url": "https://api.github.com/users/robot-dreams/orgs",
        "repos_url": "https://api.github.com/users/robot-dreams/repos",
        "events_url": "https://api.github.com/users/robot-dreams/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/robot-dreams/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Just confirming, does the requirement \"either return all successes or just the first failure\" apply to the RPC as a whole, or only to the internal call `ProcessNewPackage`?\r\n\r\nI ask because it looks like you could add rejected transactions inside this loop. For example, if I update `test_chain` in `rpc_packages.py` so that the 2nd transaction in the chain has an unreasonable fee, the RPC response `testres_multiple` is as follows:\r\n\r\n```\r\n[\r\n{'txid': ..., 'wtxid': ..., 'allowed': True, 'vsize': 191, 'fees': {'base': Decimal('0.00010000')}},\r\n{'txid': ..., 'wtxid': ..., 'allowed': False, 'reject-reason': 'max-fee-exceeded'},\r\n{'txid': ..., 'wtxid': ..., 'allowed': True, 'vsize': 191, 'fees': {'base': Decimal('0.00010000')}}\r\n]\r\n```",
      "created_at": "2021-01-23T14:40:23Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r563160249",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563160249"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 961,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563815372",
      "pull_request_review_id": 575515777,
      "id": 563815372,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzgxNTM3Mg==",
      "diff_hunk": "@@ -187,12 +187,34 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/**\n+* Validation result for a single transaction mempool acceptance.\n+* When m_accepted = true, m_replaced_transactions contains a list\n+* of replaced transactions and m_base_fees contains the tx fees.\n+*/\n+struct MempoolAcceptResult {\n+    bool m_accepted;\n+    TxValidationState m_state;\n+\n+    // Valid when m_accepted = true\n+    std::list<CTransactionRef> m_replaced_transactions;\n+    CAmount m_base_fees;",
      "path": "src/validation.h",
      "position": null,
      "original_position": 37,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "c75f7052921bc15c39d4b4272ef2c18550a51a0d",
      "in_reply_to_id": 562041253,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Please see [this branch](https://github.com/glozow/bitcoin/commit/408a32b5c70a6c2d657304ae0a874dadb635f4fa), it's not too bad verbosity-wise, I have a couple ternary operators like this:\r\n\r\n```c\r\nconst TxValidationState state = result.m_state == nullopt ? TxValidationState{} : result.m_state.value();\r\n```\r\n\r\nincorrect read throws a `bad optional access`",
      "created_at": "2021-01-25T15:32:37Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r563815372",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563815372"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 204,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563815889",
      "pull_request_review_id": 575516497,
      "id": 563815889,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzgxNTg4OQ==",
      "diff_hunk": "@@ -0,0 +1,186 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"RPCs that handle raw transaction packages.\"\"\"\n+\n+from decimal import Decimal\n+from io import BytesIO\n+\n+from test_framework.address import ADDRESS_BCRT1_P2WSH_OP_TRUE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    BIP125_SEQUENCE_NUMBER,\n+    COIN,\n+    CTransaction,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+    hex_str_to_bytes,\n+)\n+\n+class RPCPackagesTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.privkeys = [node.get_deterministic_priv_key().key]\n+        self.address = node.get_deterministic_priv_key().address\n+        self.coins = []\n+        # The last 100 coinbase transactions are premature\n+        for b in node.generatetoaddress(120, self.address)[:20]:\n+            coinbase = node.getblock(blockhash=b, verbosity=2)[\"tx\"][0]\n+            self.coins.append({\n+                \"txid\": coinbase[\"txid\"],\n+                \"amount\": coinbase[\"vout\"][0][\"value\"],\n+                \"scriptPubKey\": coinbase[\"vout\"][0][\"scriptPubKey\"],\n+            })\n+\n+        # Create some transactions that can be reused throughout the test. Never submit these to mempool.\n+        self.independent_txns_hex = []\n+        self.independent_txns_testres = []\n+        for _ in range(3):\n+            coin = self.coins.pop()\n+            rawtx = node.createrawtransaction([{\"txid\" : coin[\"txid\"], \"vout\" : 0}],\n+                {self.address : coin[\"amount\"] - Decimal(\"0.0001\")})\n+            signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n+            assert signedtx[\"complete\"]\n+            testres = node.testmempoolaccept([signedtx[\"hex\"]])\n+            assert testres[0][\"allowed\"]\n+            self.independent_txns_hex.append(signedtx[\"hex\"])\n+            # testmempoolaccept returns a list of length one, avoid creating a 2D list\n+            self.independent_txns_testres.append(testres[0])\n+\n+        self.test_independent()\n+        self.test_chain()\n+        self.test_conflicting()\n+        self.test_rbf()\n+\n+    def chain_transaction(self, parent_txid, value, parent_scriptPubKey=None):\n+        \"\"\"Build a transaction that spends parent_txid:vout. Return tuple (transaction id, raw hex).\"\"\"\n+        node = self.nodes[0]\n+        inputs = [{\"txid\" : parent_txid, \"vout\" : 0}]\n+        outputs = {self.address : value}\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+        prevtxs = [{\n+            \"txid\": parent_txid,\n+            \"vout\": 0,\n+            \"scriptPubKey\": parent_scriptPubKey,\n+            \"amount\": value + Decimal(\"0.0001\"),\n+        }] if parent_scriptPubKey else None\n+        signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys, prevtxs=prevtxs)\n+        tx = CTransaction()\n+        assert signedtx[\"complete\"]\n+        tx.deserialize(BytesIO(hex_str_to_bytes(signedtx[\"hex\"])))\n+        return (tx.rehash(), signedtx[\"hex\"], tx.vout[0].scriptPubKey.hex())\n+\n+    def test_independent(self):\n+        self.log.info(\"Test multiple independent transactions in a package\")\n+        node = self.nodes[0]\n+        assert_equal(self.independent_txns_testres, node.testmempoolaccept(rawtxs=self.independent_txns_hex))\n+\n+        self.log.info(\"Test a valid package with garbage inserted\")\n+        garbage_tx = node.createrawtransaction([{\"txid\": \"00\" * 32, \"vout\": 5}], {self.address: 1})\n+        tx = CTransaction()\n+        tx.deserialize(BytesIO(hex_str_to_bytes(garbage_tx)))\n+        testres_bad = node.testmempoolaccept(self.independent_txns_hex + [garbage_tx])\n+        assert_equal(testres_bad, [{\"txid\": tx.rehash(), \"wtxid\": tx.getwtxid(), \"allowed\": False, \"reject-reason\": \"missing-inputs\"}])\n+\n+    def test_chain(self):\n+        node = self.nodes[0]\n+        first_coin = self.coins.pop()\n+\n+        self.log.info(\"Create a chain of three transactions\")\n+        scriptPubKey = None\n+        txid = first_coin[\"txid\"]\n+        chain = []\n+        value = first_coin[\"amount\"]\n+\n+        for _ in range(3):\n+            value -= Decimal(\"0.0001\") # Deduct reasonable fee\n+            (txid, txhex, scriptPubKey) = self.chain_transaction(txid, value, scriptPubKey)\n+            chain.append(txhex)\n+\n+        self.log.info(\"Testmempoolaccept with entire package\")",
      "path": "test/functional/rpc_packages.py",
      "position": null,
      "original_position": 107,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "ebca80d81124fac369e18467e17a1bacfdbfefec",
      "in_reply_to_id": 563150542,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "good point! will add that test",
      "created_at": "2021-01-25T15:33:20Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r563815889",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563815889"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 155,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563828396",
      "pull_request_review_id": 575532879,
      "id": 563828396,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzgyODM5Ng==",
      "diff_hunk": "@@ -187,12 +187,34 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/**\n+* Validation result for a single transaction mempool acceptance.\n+* When m_accepted = true, m_replaced_transactions contains a list\n+* of replaced transactions and m_base_fees contains the tx fees.\n+*/\n+struct MempoolAcceptResult {\n+    bool m_accepted;\n+    TxValidationState m_state;\n+\n+    // Valid when m_accepted = true\n+    std::list<CTransactionRef> m_replaced_transactions;\n+    CAmount m_base_fees;",
      "path": "src/validation.h",
      "position": null,
      "original_position": 37,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "c75f7052921bc15c39d4b4272ef2c18550a51a0d",
      "in_reply_to_id": 562041253,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Cool, thanks for looking. Not sure if the ternary makes sense. It seems `state` is currently assumed to be always properly initialized (redundantly to the boolean return value). So maybe it could make sense to not make this optional. I do like that the other members (fee and replaced txs) are optional in your branch.",
      "created_at": "2021-01-25T15:48:53Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r563828396",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563828396"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 204,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563829921",
      "pull_request_review_id": 575534904,
      "id": 563829921,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzgyOTkyMQ==",
      "diff_hunk": "@@ -187,12 +187,48 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/**\n+* Validation result for a single transaction mempool acceptance.\n+* When m_accepted = true, m_replaced_transactions contains a list\n+* of replaced transactions and m_base_fees contains the tx fees.\n+*/\n+struct MempoolAcceptResult {\n+    bool m_accepted;\n+    CTransactionRef ptx;\n+\n+    // Valid when m_accepted = false",
      "path": "src/validation.h",
      "position": null,
      "original_position": 35,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "ebca80d81124fac369e18467e17a1bacfdbfefec",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Note that m_state.IsValid() holds when m_accpeted = *true*, so this comment could be confusing. I think the comment can just be removed.",
      "created_at": "2021-01-25T15:50:51Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r563829921",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563829921"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 201,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563860484",
      "pull_request_review_id": 575574819,
      "id": 563860484,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mzg2MDQ4NA==",
      "diff_hunk": "@@ -187,12 +187,34 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/**\n+* Validation result for a single transaction mempool acceptance.\n+* When m_accepted = true, m_replaced_transactions contains a list\n+* of replaced transactions and m_base_fees contains the tx fees.\n+*/\n+struct MempoolAcceptResult {\n+    bool m_accepted;\n+    TxValidationState m_state;\n+\n+    // Valid when m_accepted = true\n+    std::list<CTransactionRef> m_replaced_transactions;\n+    CAmount m_base_fees;",
      "path": "src/validation.h",
      "position": null,
      "original_position": 37,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "c75f7052921bc15c39d4b4272ef2c18550a51a0d",
      "in_reply_to_id": 562041253,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ah yeah! That makes sense, leave state as-is, and optional members when they only make sense for valid transactions.",
      "created_at": "2021-01-25T16:29:48Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r563860484",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563860484"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 204,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563867627",
      "pull_request_review_id": 575584080,
      "id": 563867627,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mzg2NzYyNw==",
      "diff_hunk": "@@ -922,67 +921,77 @@ static RPCHelpMan testmempoolaccept()\n         UniValueType(), // VNUM or VSTR, checked inside AmountFromValue()\n     });\n \n-    if (request.params[0].get_array().size() != 1) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array must contain exactly one raw transaction for now\");\n-    }\n-\n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_array()[0].get_str())) {\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n-    }\n-    CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-\n+    const UniValue raw_transactions = request.params[0].get_array();\n     const CFeeRate max_raw_tx_fee_rate = request.params[1].isNull() ?\n                                              DEFAULT_MAX_RAW_TX_FEE_RATE :\n                                              CFeeRate(AmountFromValue(request.params[1]));\n \n     CTxMemPool& mempool = EnsureMemPool(request.context);\n-    int64_t virtual_size = GetVirtualTransactionSize(*tx);\n-    CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n-\n-    UniValue result(UniValue::VARR);\n-    UniValue result_0(UniValue::VOBJ);\n-    result_0.pushKV(\"txid\", tx->GetHash().GetHex());\n-    result_0.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n+    std::vector<CTransactionRef> txns;\n \n-    TxValidationState state;\n-    bool test_accept_res;\n-    CAmount fee{0};\n-    {\n-        LOCK(cs_main);\n-        test_accept_res = AcceptToMemoryPool(mempool, state, std::move(tx),\n-            nullptr /* plTxnReplaced */, false /* bypass_limits */, /* test_accept */ true, &fee);\n+    for (unsigned int i = 0; i < raw_transactions.size(); ++i) {\n+        CMutableTransaction mtx;\n+        if (!DecodeHexTx(mtx, raw_transactions[i].get_str())) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n+        }\n+        txns.emplace_back(MakeTransactionRef(std::move(mtx)));\n     }\n \n-    // Check that fee does not exceed maximum fee\n-    if (test_accept_res && max_raw_tx_fee && fee > max_raw_tx_fee) {\n-        result_0.pushKV(\"allowed\", false);\n-        result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n-        result.push_back(std::move(result_0));\n-        return result;\n+    std::vector<MempoolAcceptResult> validation_results;\n+    if (txns.size() == 1) {\n+        validation_results.emplace_back(WITH_LOCK(cs_main,\n+            return AcceptToMemoryPool(mempool, txns[0], false /* bypass_limits */, true /* test_accept */)));\n+    } else {\n+        validation_results = WITH_LOCK(cs_main, return ProcessNewPackage(mempool, txns, true));\n     }\n-    result_0.pushKV(\"allowed\", test_accept_res);\n \n-    // Only return the fee and vsize if the transaction would pass ATMP.\n-    // These can be used to calculate the feerate.\n-    if (test_accept_res) {\n-        result_0.pushKV(\"vsize\", virtual_size);\n-        UniValue fees(UniValue::VOBJ);\n-        fees.pushKV(\"base\", ValueFromAmount(fee));\n-        result_0.pushKV(\"fees\", fees);\n-    } else {\n-        if (state.IsInvalid()) {\n-            if (state.GetResult() == TxValidationResult::TX_MISSING_INPUTS) {\n-                result_0.pushKV(\"reject-reason\", \"missing-inputs\");\n+    auto tx_accepted = [](MempoolAcceptResult& res) { return res.m_accepted; };\n+    const bool all_valid = std::all_of(validation_results.begin(), validation_results.end(), tx_accepted);\n+    // ProcessNewPackage should return a MempoolAcceptResult per transaction\n+    // or exactly 1 for the first error that occurs.\n+    CHECK_NONFATAL(all_valid || validation_results.size() == 1);\n+\n+    // TODO: Report absurd fees for packages.\n+\n+    UniValue result(UniValue::VARR);\n+    if (all_valid) {\n+        for (unsigned int i = 0; i < validation_results.size(); ++i) {",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 99,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "ebca80d81124fac369e18467e17a1bacfdbfefec",
      "in_reply_to_id": 563160249,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "it applies to the RPC as well, only 1 result on failure",
      "created_at": "2021-01-25T16:39:03Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r563867627",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563867627"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 961,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/564004706",
      "pull_request_review_id": 575759633,
      "id": 564004706,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDAwNDcwNg==",
      "diff_hunk": "@@ -880,15 +880,28 @@ class CTxMemPool\n  * It also allows you to sign a double-spend directly in\n  * signrawtransactionwithkey and signrawtransactionwithwallet,\n  * as long as the conflicting transaction is not yet confirmed.\n+ * It can also serve as temporary scratch space for some set",
      "path": "src/txmempool.h",
      "position": null,
      "original_position": 4,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "ebca80d81124fac369e18467e17a1bacfdbfefec",
      "in_reply_to_id": 563152582,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Rather than extending CCoinsViewMemPool, would it make sense to instead add something like CCoinsViewPackage : CCoinsViewBacked?\r\n\r\nThis is a really interesting idea, and I think it should be the case to have the \"top level\" have the package caches -> \"bottom level\" backend is the `CCoinsViewMemPool`. Let me try to do it this way and see what happens!",
      "created_at": "2021-01-25T19:57:56Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r564004706",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/564004706"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 891,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/564005481",
      "pull_request_review_id": 575760578,
      "id": 564005481,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDAwNTQ4MQ==",
      "diff_hunk": "@@ -880,15 +880,28 @@ class CTxMemPool\n  * It also allows you to sign a double-spend directly in\n  * signrawtransactionwithkey and signrawtransactionwithwallet,\n  * as long as the conflicting transaction is not yet confirmed.\n+ * It can also serve as temporary scratch space for some set",
      "path": "src/txmempool.h",
      "position": null,
      "original_position": 4,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "ebca80d81124fac369e18467e17a1bacfdbfefec",
      "in_reply_to_id": 563152582,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Note that `CCoinsViewMemPool` is created with `MemPoolAccept` instances so we don't really reuse an existing one.",
      "created_at": "2021-01-25T19:59:13Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r564005481",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/564005481"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 891,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565391428",
      "pull_request_review_id": 577444676,
      "id": 565391428,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTM5MTQyOA==",
      "diff_hunk": "@@ -659,11 +659,6 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, MempoolAcceptResult& result, Works\n     // Bring the best block into scope\n     m_view.GetBestBlock();\n \n-    // we have all inputs cached now, so switch back to dummy (to protect\n-    // against bugs where we pull more inputs from disk that miss being added\n-    // to coins_to_uncache)\n-    m_view.SetBackend(m_dummy);",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "4a8e3e1a1767865a32905e8043b7c2e28b0cfd6a",
      "in_reply_to_id": 559286531,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@ariard, thanks for the push to look into this. I got a pretty simple solution: we shouldn't do `m_view.SetBackend(dummy)`, we should do `m_viewmempool.SetBackend(dummy)`, since that's the backend that's actually pointing to the coins cache.\r\n\r\nThe hierarchy is `m_view -> m_viewmempool -> coinscache`.",
      "created_at": "2021-01-27T15:16:27Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r565391428",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565391428"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 684,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565409230",
      "pull_request_review_id": 577468931,
      "id": 565409230,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTQwOTIzMA==",
      "diff_hunk": "@@ -5011,10 +5071,10 @@ bool LoadMempool(CTxMemPool& pool)\n             TxValidationState state;",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 371,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "ebca80d81124fac369e18467e17a1bacfdbfefec",
      "in_reply_to_id": 563156391,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "good catch, removed 👍 \r\n(btw, how did you comment on a non-diff line? 😱 )",
      "created_at": "2021-01-27T15:37:23Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r565409230",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565409230"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5071,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565409820",
      "pull_request_review_id": 577469624,
      "id": 565409820,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTQwOTgyMA==",
      "diff_hunk": "@@ -889,7 +888,7 @@ static RPCHelpMan testmempoolaccept()\n                 },\n                 RPCResult{\n                     RPCResult::Type::ARR, \"\", \"The result of the mempool acceptance test for each raw transaction in the input array.\\n\"",
      "path": "src/rpc/rawtransaction.cpp",
      "position": 31,
      "original_position": 13,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "ebca80d81124fac369e18467e17a1bacfdbfefec",
      "in_reply_to_id": 563151242,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done!",
      "created_at": "2021-01-27T15:38:02Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r565409820",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565409820"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 906,
      "original_line": 906,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565414051",
      "pull_request_review_id": 577475332,
      "id": 565414051,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTQxNDA1MQ==",
      "diff_hunk": "@@ -187,12 +187,48 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/**\n+* Validation result for a single transaction mempool acceptance.\n+* When m_accepted = true, m_replaced_transactions contains a list\n+* of replaced transactions and m_base_fees contains the tx fees.\n+*/\n+struct MempoolAcceptResult {\n+    bool m_accepted;\n+    CTransactionRef ptx;\n+\n+    // Valid when m_accepted = false",
      "path": "src/validation.h",
      "position": null,
      "original_position": 35,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "ebca80d81124fac369e18467e17a1bacfdbfefec",
      "in_reply_to_id": 563829921,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I now have the comment \"Valid when m_accepted = false\" for the tx pointer, not for  the TxValidationState",
      "created_at": "2021-01-27T15:42:58Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r565414051",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565414051"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 201,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565444091",
      "pull_request_review_id": 577515495,
      "id": 565444091,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTQ0NDA5MQ==",
      "diff_hunk": "@@ -922,67 +924,77 @@ static RPCHelpMan testmempoolaccept()\n         UniValueType(), // VNUM or VSTR, checked inside AmountFromValue()\n     });\n \n-    if (request.params[0].get_array().size() != 1) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array must contain exactly one raw transaction for now\");\n-    }\n-\n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_array()[0].get_str())) {\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n-    }\n-    CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-\n+    const UniValue raw_transactions = request.params[0].get_array();\n     const CFeeRate max_raw_tx_fee_rate = request.params[1].isNull() ?\n                                              DEFAULT_MAX_RAW_TX_FEE_RATE :\n                                              CFeeRate(AmountFromValue(request.params[1]));\n \n     CTxMemPool& mempool = EnsureMemPool(request.context);\n-    int64_t virtual_size = GetVirtualTransactionSize(*tx);\n-    CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n-\n-    UniValue result(UniValue::VARR);\n-    UniValue result_0(UniValue::VOBJ);\n-    result_0.pushKV(\"txid\", tx->GetHash().GetHex());\n-    result_0.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n+    std::vector<CTransactionRef> txns;\n \n-    TxValidationState state;\n-    bool test_accept_res;\n-    CAmount fee{0};\n-    {\n-        LOCK(cs_main);\n-        test_accept_res = AcceptToMemoryPool(mempool, state, std::move(tx),\n-            nullptr /* plTxnReplaced */, false /* bypass_limits */, /* test_accept */ true, &fee);\n+    for (unsigned int i = 0; i < raw_transactions.size(); ++i) {\n+        CMutableTransaction mtx;\n+        if (!DecodeHexTx(mtx, raw_transactions[i].get_str())) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n+        }\n+        txns.emplace_back(MakeTransactionRef(std::move(mtx)));\n     }\n \n-    // Check that fee does not exceed maximum fee\n-    if (test_accept_res && max_raw_tx_fee && fee > max_raw_tx_fee) {\n-        result_0.pushKV(\"allowed\", false);\n-        result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n-        result.push_back(std::move(result_0));\n-        return result;\n+    std::vector<MempoolAcceptResult> validation_results;\n+    if (txns.size() == 1) {\n+        validation_results.emplace_back(WITH_LOCK(cs_main,\n+            return AcceptToMemoryPool(mempool, txns[0], false /* bypass_limits */, true /* test_accept */)));\n+    } else {\n+        validation_results = WITH_LOCK(cs_main, return ProcessNewPackage(mempool, txns, true));\n     }\n-    result_0.pushKV(\"allowed\", test_accept_res);\n \n-    // Only return the fee and vsize if the transaction would pass ATMP.\n-    // These can be used to calculate the feerate.\n-    if (test_accept_res) {\n-        result_0.pushKV(\"vsize\", virtual_size);\n-        UniValue fees(UniValue::VOBJ);\n-        fees.pushKV(\"base\", ValueFromAmount(fee));\n-        result_0.pushKV(\"fees\", fees);\n-    } else {\n-        if (state.IsInvalid()) {\n-            if (state.GetResult() == TxValidationResult::TX_MISSING_INPUTS) {\n-                result_0.pushKV(\"reject-reason\", \"missing-inputs\");\n+    auto tx_accepted = [](MempoolAcceptResult& res) { return res.m_accepted; };\n+    const bool all_valid = std::all_of(validation_results.begin(), validation_results.end(), tx_accepted);\n+    // ProcessNewPackage should return a MempoolAcceptResult per transaction\n+    // or exactly 1 for the first error that occurs.\n+    CHECK_NONFATAL(all_valid || validation_results.size() == 1);",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 94,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "70f84b22199cd0afffd12ea8e8934d22b0f0c7f4",
      "in_reply_to_id": null,
      "user": {
        "login": "satsie",
        "id": 1823216,
        "node_id": "MDQ6VXNlcjE4MjMyMTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1823216?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/satsie",
        "html_url": "https://github.com/satsie",
        "followers_url": "https://api.github.com/users/satsie/followers",
        "following_url": "https://api.github.com/users/satsie/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/satsie/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/satsie/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/satsie/subscriptions",
        "organizations_url": "https://api.github.com/users/satsie/orgs",
        "repos_url": "https://api.github.com/users/satsie/repos",
        "events_url": "https://api.github.com/users/satsie/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/satsie/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm not very familiar with `CHECK_NONFATAL` but see it throws an error if either condition here evaluates to false. \r\n\r\nIf `validation_results.size() == 1` that means one of the transactions failed validation, so we want to throw an error. Should this line be changed to `CHECK_NONFATAL(all_valid || validation_results.size() != 1);`?",
      "created_at": "2021-01-27T16:19:51Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r565444091",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565444091"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 955,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565449378",
      "pull_request_review_id": 577522548,
      "id": 565449378,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTQ0OTM3OA==",
      "diff_hunk": "@@ -378,10 +387,9 @@ static void UpdateMempoolForReorg(CTxMemPool& mempool, DisconnectedBlockTransact\n     auto it = disconnectpool.queuedTx.get<insertion_order>().rbegin();\n     while (it != disconnectpool.queuedTx.get<insertion_order>().rend()) {\n         // ignore validation errors in resurrected transactions\n-        TxValidationState stateDummy;\n-        if (!fAddToMempool || (*it)->IsCoinBase() ||\n-            !AcceptToMemoryPool(mempool, stateDummy, *it,\n-                                nullptr /* plTxnReplaced */, true /* bypass_limits */)) {\n+        const MempoolAcceptResult result = AcceptToMemoryPool(mempool, *it, true /* bypass_limits */);\n+\n+        if (!fAddToMempool || (*it)->IsCoinBase() || !result.m_accepted) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 51,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "70f84b22199cd0afffd12ea8e8934d22b0f0c7f4",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is a change in behavior. Previously, if `fAddToMempool` is false or `(*it)->IsCoinBase()`, we'd short circuit and not call `AcceptToMemoryPool()`",
      "created_at": "2021-01-27T16:26:32Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r565449378",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565449378"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": 390,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 392,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565450892",
      "pull_request_review_id": 577522548,
      "id": 565450892,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTQ1MDg5Mg==",
      "diff_hunk": "@@ -189,12 +189,52 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/**\n+* Validation result for a single transaction mempool acceptance.\n+* When m_accepted = true, m_replaced_transactions contains a list\n+* of replaced transactions and m_base_fees contains the tx fees.\n+*/\n+struct MempoolAcceptResult {\n+    bool m_accepted;\n+    TxValidationState m_state;\n+\n+    // Valid when m_accepted = false\n+    std::optional<CTransactionRef> m_ptx;",
      "path": "src/validation.h",
      "position": null,
      "original_position": 36,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "70f84b22199cd0afffd12ea8e8934d22b0f0c7f4",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Is it necessary to wrap the `std::shared_ptr` in a `std::optional`? Can you just use a null pointer to mean not present?",
      "created_at": "2021-01-27T16:28:12Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r565450892",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565450892"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 202,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565451590",
      "pull_request_review_id": 577522548,
      "id": 565451590,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTQ1MTU5MA==",
      "diff_hunk": "@@ -189,12 +189,52 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/**\n+* Validation result for a single transaction mempool acceptance.\n+* When m_accepted = true, m_replaced_transactions contains a list\n+* of replaced transactions and m_base_fees contains the tx fees.\n+*/\n+struct MempoolAcceptResult {\n+    bool m_accepted;\n+    TxValidationState m_state;\n+\n+    // Valid when m_accepted = false\n+    std::optional<CTransactionRef> m_ptx;\n+\n+    // Valid when m_accepted = true\n+    std::optional<std::list<CTransactionRef>> m_replaced_transactions;\n+    std::optional<CAmount> m_base_fees;\n+\n+    /** Constructor for failure case */\n+    explicit MempoolAcceptResult(TxValidationState state, CTransactionRef ptx) : m_state(state), m_ptx(ptx) {\n+        m_accepted = false;\n+        m_replaced_transactions = nullopt;\n+        m_base_fees = nullopt;\n+    }\n+\n+    /** Constructor for success case */\n+    explicit MempoolAcceptResult(TxValidationState state, std::list<CTransactionRef>&& replaced_txns, CAmount fees) :\n+        m_state(state), m_replaced_transactions(std::move(replaced_txns)), m_base_fees(fees) {\n+        m_accepted = true;\n+        m_ptx = nullopt;\n+    }\n+};\n+\n+/**\n+ * (Try to) add a transaction to the memory pool.\n+ */\n+MempoolAcceptResult AcceptToMemoryPool(CTxMemPool& pool, const CTransactionRef &tx,\n+                        bool bypass_limits, bool test_accept=false) EXCLUSIVE_LOCKS_REQUIRED(cs_main);",
      "path": "src/validation.h",
      "position": null,
      "original_position": 61,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "70f84b22199cd0afffd12ea8e8934d22b0f0c7f4",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe clean up the style while you're here:\r\n\r\n- `CTransactionRef &tx` -> `CTransactionRef& tx`\r\n- align second line with opening parens",
      "created_at": "2021-01-27T16:28:58Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r565451590",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565451590"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": 226,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 227,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565454965",
      "pull_request_review_id": 577522548,
      "id": 565454965,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTQ1NDk2NQ==",
      "diff_hunk": "@@ -1029,46 +1040,84 @@ bool MemPoolAccept::Finalize(ATMPArgs& args, Workspace& ws)\n     return true;\n }\n \n-bool MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n+MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n {\n     AssertLockHeld(cs_main);\n     LOCK(m_pool.cs); // mempool \"read lock\" (held through GetMainSignals().TransactionAddedToMempool())\n \n     Workspace workspace(ptx);\n \n-    if (!PreChecks(args, workspace)) return false;\n+    if (!PreChecks(args, workspace)) return MempoolAcceptResult(workspace.m_state, workspace.m_ptx);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, workspace, txdata)) return false;\n+    if (!PolicyScriptChecks(args, workspace, txdata)) return MempoolAcceptResult(workspace.m_state, workspace.m_ptx);\n \n-    if (!ConsensusScriptChecks(args, workspace, txdata)) return false;\n+    if (!ConsensusScriptChecks(args, workspace, txdata)) return MempoolAcceptResult(workspace.m_state, workspace.m_ptx);\n \n     // Tx was accepted, but not added\n-    if (args.m_test_accept) return true;\n+    if (args.m_test_accept) {\n+        return MempoolAcceptResult(workspace.m_state, std::move(workspace.m_replaced_transactions), workspace.m_base_fees);\n+    }\n \n-    if (!Finalize(args, workspace)) return false;\n+    if (!Finalize(args, workspace)) return MempoolAcceptResult(workspace.m_state, workspace.m_ptx);\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return true;\n+    return MempoolAcceptResult(workspace.m_state, std::move(workspace.m_replaced_transactions), workspace.m_base_fees);\n+}\n+\n+std::vector<MempoolAcceptResult> MemPoolAccept::AcceptMultipleTransactions(std::vector<CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    std::vector<Workspace> workspaces{};\n+    workspaces.reserve(txns.size());\n+    std::transform(txns.begin(), txns.end(), std::back_inserter(workspaces), [](CTransactionRef& tx) {\n+        return Workspace(tx);\n+    });\n+\n+    LOCK(m_pool.cs);\n+    // Do all PreChecks first and fail fast to avoid running expensive script\n+    // checks when unnecessary.\n+    for (unsigned int i = 0; i < txns.size(); ++i) {\n+        Workspace& workspace = workspaces[i];\n+        if (!PreChecks(args, workspace)) {\n+            return std::vector<MempoolAcceptResult> { MempoolAcceptResult(workspace.m_state, workspace.m_ptx) };\n+        }\n+        m_viewmempool.AddPackageTransaction(txns[i]);\n+    }\n+\n+    // TODO: Enforce package-level feerate and other policies before script checks.\n+    for (unsigned int i = 0; i < txns.size(); ++i) {\n+        PrecomputedTransactionData txdata;\n+        Workspace& workspace = workspaces[i];\n+\n+        if (!PolicyScriptChecks(args, workspace, txdata)) {\n+            return std::vector<MempoolAcceptResult> { MempoolAcceptResult(workspace.m_state, workspace.m_ptx) };\n+        }\n+    }\n+    std::vector<MempoolAcceptResult> results;\n+    std::transform(workspaces.begin(), workspaces.end(), std::back_inserter(results), [](Workspace& ws) {\n+        return MempoolAcceptResult(ws.m_state, std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+    });\n+    return results;\n }\n \n } // anon namespace\n \n /** (try to) add transaction to memory pool with a specified acceptance time **/\n-static bool AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        int64_t nAcceptTime, std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+static MempoolAcceptResult AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPool& pool, const CTransactionRef &tx,\n+                        int64_t nAcceptTime, bool bypass_limits, bool test_accept) EXCLUSIVE_LOCKS_REQUIRED(cs_main)",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 318,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "70f84b22199cd0afffd12ea8e8934d22b0f0c7f4",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Try to keep lines below 100-120 chars and align args with opening parens:\r\n\r\n```suggestion\r\nstatic MempoolAcceptResult AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPool& pool,\r\n                                                      const CTransactionRef& tx, int64_t nAcceptTime,\r\n                                                      bool bypass_limits, bool test_accept)\r\n    EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n\r\n```",
      "created_at": "2021-01-27T16:33:15Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r565454965",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565454965"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": 1113,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1114,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565467098",
      "pull_request_review_id": 577522548,
      "id": 565467098,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTQ2NzA5OA==",
      "diff_hunk": "@@ -1029,46 +1024,51 @@ bool MemPoolAccept::Finalize(ATMPArgs& args, Workspace& ws)\n     return true;\n }\n \n-bool MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n+MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n {\n     AssertLockHeld(cs_main);\n     LOCK(m_pool.cs); // mempool \"read lock\" (held through GetMainSignals().TransactionAddedToMempool())\n \n     Workspace workspace(ptx);\n \n-    if (!PreChecks(args, workspace)) return false;\n+    if (!PreChecks(args, workspace)) return MempoolAcceptResult(args.m_state);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, workspace, txdata)) return false;\n+    if (!PolicyScriptChecks(args, workspace, txdata)) return MempoolAcceptResult(args.m_state);\n \n-    if (!ConsensusScriptChecks(args, workspace, txdata)) return false;\n+    if (!ConsensusScriptChecks(args, workspace, txdata)) return MempoolAcceptResult(args.m_state);\n \n     // Tx was accepted, but not added\n-    if (args.m_test_accept) return true;\n+    if (args.m_test_accept) {\n+        return MempoolAcceptResult(args.m_state, std::move(args.m_replaced_transactions), args.m_fee_out);\n+    }\n \n-    if (!Finalize(args, workspace)) return false;\n+    if (!Finalize(args, workspace)) return MempoolAcceptResult(args.m_state);\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return true;\n+    return MempoolAcceptResult(args.m_state, std::move(args.m_replaced_transactions), args.m_fee_out);\n }\n \n } // anon namespace\n \n /** (try to) add transaction to memory pool with a specified acceptance time **/\n-static bool AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        int64_t nAcceptTime, std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+static MempoolAcceptResult AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPool& pool, const CTransactionRef &tx,\n+                        int64_t nAcceptTime, bool bypass_limits, bool test_accept) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n+    TxValidationState state;\n     std::vector<COutPoint> coins_to_uncache;\n-    MemPoolAccept::ATMPArgs args { chainparams, state, nAcceptTime, plTxnReplaced, bypass_limits, coins_to_uncache, test_accept, fee_out };\n-    bool res = MemPoolAccept(pool).AcceptSingleTransaction(tx, args);\n-    if (!res) {\n+    CAmount fee = 0;\n+    std::list<CTransactionRef> m_replaced_transactions;\n+    MemPoolAccept::ATMPArgs args { chainparams, state, nAcceptTime, m_replaced_transactions, bypass_limits, coins_to_uncache, test_accept, fee };",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 117,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "f14f8b73900d2da4e15119780e19683c8499b700",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit f14f8b73900d2da4e15119780e19683c8499b700 (_[refactor] return MempoolAcceptResult_), these local vars shouldn't be necessary. You're simply initializing them to default values, then passing them to the `ATMPArgs` initializer which copies them. You can save yourself some typing (and potentially an unnecessary copy) by creating those default values in the initializer itself:\r\n\r\n```diff\r\n@@ -1063,9 +1063,7 @@ static MempoolAcceptResult AcceptToMemoryPoolWithTime(const CChainParams& chainp\r\n {\r\n     TxValidationState state;\r\n     std::vector<COutPoint> coins_to_uncache;\r\n-    CAmount fee = 0;\r\n-    std::list<CTransactionRef> m_replaced_transactions;\r\n-    MemPoolAccept::ATMPArgs args { chainparams, state, nAcceptTime, m_replaced_transactions, bypass_limits, coins_to_uncache, test_accept, fee };\r\n+    MemPoolAccept::ATMPArgs args { chainparams, state, nAcceptTime, {}, bypass_limits, coins_to_uncache, test_accept, {} };\r\n \r\n     const MempoolAcceptResult result = MemPoolAccept(pool).AcceptSingleTransaction(tx, args);\r\n     if (!result.m_accepted) {\r\n```",
      "created_at": "2021-01-27T16:48:50Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r565467098",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565467098"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": 1066,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1068,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565467203",
      "pull_request_review_id": 577546105,
      "id": 565467203,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTQ2NzIwMw==",
      "diff_hunk": "@@ -922,67 +924,77 @@ static RPCHelpMan testmempoolaccept()\n         UniValueType(), // VNUM or VSTR, checked inside AmountFromValue()\n     });\n \n-    if (request.params[0].get_array().size() != 1) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array must contain exactly one raw transaction for now\");\n-    }\n-\n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_array()[0].get_str())) {\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n-    }\n-    CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-\n+    const UniValue raw_transactions = request.params[0].get_array();\n     const CFeeRate max_raw_tx_fee_rate = request.params[1].isNull() ?\n                                              DEFAULT_MAX_RAW_TX_FEE_RATE :\n                                              CFeeRate(AmountFromValue(request.params[1]));\n \n     CTxMemPool& mempool = EnsureMemPool(request.context);\n-    int64_t virtual_size = GetVirtualTransactionSize(*tx);\n-    CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n-\n-    UniValue result(UniValue::VARR);\n-    UniValue result_0(UniValue::VOBJ);\n-    result_0.pushKV(\"txid\", tx->GetHash().GetHex());\n-    result_0.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n+    std::vector<CTransactionRef> txns;\n \n-    TxValidationState state;\n-    bool test_accept_res;\n-    CAmount fee{0};\n-    {\n-        LOCK(cs_main);\n-        test_accept_res = AcceptToMemoryPool(mempool, state, std::move(tx),\n-            nullptr /* plTxnReplaced */, false /* bypass_limits */, /* test_accept */ true, &fee);\n+    for (unsigned int i = 0; i < raw_transactions.size(); ++i) {\n+        CMutableTransaction mtx;\n+        if (!DecodeHexTx(mtx, raw_transactions[i].get_str())) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n+        }\n+        txns.emplace_back(MakeTransactionRef(std::move(mtx)));\n     }\n \n-    // Check that fee does not exceed maximum fee\n-    if (test_accept_res && max_raw_tx_fee && fee > max_raw_tx_fee) {\n-        result_0.pushKV(\"allowed\", false);\n-        result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n-        result.push_back(std::move(result_0));\n-        return result;\n+    std::vector<MempoolAcceptResult> validation_results;\n+    if (txns.size() == 1) {\n+        validation_results.emplace_back(WITH_LOCK(cs_main,\n+            return AcceptToMemoryPool(mempool, txns[0], false /* bypass_limits */, true /* test_accept */)));\n+    } else {\n+        validation_results = WITH_LOCK(cs_main, return ProcessNewPackage(mempool, txns, true));\n     }\n-    result_0.pushKV(\"allowed\", test_accept_res);\n \n-    // Only return the fee and vsize if the transaction would pass ATMP.\n-    // These can be used to calculate the feerate.\n-    if (test_accept_res) {\n-        result_0.pushKV(\"vsize\", virtual_size);\n-        UniValue fees(UniValue::VOBJ);\n-        fees.pushKV(\"base\", ValueFromAmount(fee));\n-        result_0.pushKV(\"fees\", fees);\n-    } else {\n-        if (state.IsInvalid()) {\n-            if (state.GetResult() == TxValidationResult::TX_MISSING_INPUTS) {\n-                result_0.pushKV(\"reject-reason\", \"missing-inputs\");\n+    auto tx_accepted = [](MempoolAcceptResult& res) { return res.m_accepted; };\n+    const bool all_valid = std::all_of(validation_results.begin(), validation_results.end(), tx_accepted);\n+    // ProcessNewPackage should return a MempoolAcceptResult per transaction\n+    // or exactly 1 for the first error that occurs.\n+    CHECK_NONFATAL(all_valid || validation_results.size() == 1);",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 94,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "70f84b22199cd0afffd12ea8e8934d22b0f0c7f4",
      "in_reply_to_id": 565444091,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`CHECK_NONFATAL` (documented in developer notes [here](https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#assertions-and-checks)) helps with internal logic bugs. Here, the bug would be a testmempoolaccept thing only (and therefore not be fatal enough to crash the node), but we'd definitely want to address it.\r\n\r\nHere, we are merely making sure that, if there were any errors, the length of `validation_results` should be 1. It's okay for a transaction to be invalid so we don't want to throw an error for that. This check is just to make sure that `ProcessNewPackage()` is adhering to the API we expect. I hope this helps!",
      "created_at": "2021-01-27T16:48:56Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r565467203",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565467203"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 955,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565468063",
      "pull_request_review_id": 577522548,
      "id": 565468063,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTQ2ODA2Mw==",
      "diff_hunk": "@@ -5013,13 +5081,12 @@ bool LoadMempool(CTxMemPool& pool)\n             if (amountdelta) {\n                 pool.PrioritiseTransaction(tx->GetHash(), amountdelta);\n             }\n-            TxValidationState state;\n             if (nTime > nNow - nExpiryTimeout) {\n                 LOCK(cs_main);\n-                AcceptToMemoryPoolWithTime(chainparams, pool, state, tx, nTime,\n-                                           nullptr /* plTxnReplaced */, false /* bypass_limits */,\n+                const MempoolAcceptResult result = AcceptToMemoryPoolWithTime(chainparams, pool, tx, nTime,\n+                                           false /* bypass_limits */,",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 381,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "70f84b22199cd0afffd12ea8e8934d22b0f0c7f4",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "maintain alignment with parens",
      "created_at": "2021-01-27T16:50:06Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r565468063",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565468063"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": 5086,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 5087,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565469529",
      "pull_request_review_id": 577522548,
      "id": 565469529,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTQ2OTUyOQ==",
      "diff_hunk": "@@ -2177,10 +2177,10 @@ void PeerManagerImpl::ProcessOrphanTx(std::set<uint256>& orphan_work_set)\n         if (orphan_it == mapOrphanTransactions.end()) continue;\n \n         const CTransactionRef porphanTx = orphan_it->second.tx;\n-        TxValidationState state;\n-        std::list<CTransactionRef> removed_txn;\n+        const MempoolAcceptResult result = AcceptToMemoryPool(m_mempool, porphanTx, false /* bypass_limits */);\n+        const TxValidationState state = result.m_state;",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "70f84b22199cd0afffd12ea8e8934d22b0f0c7f4",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This can be a reference",
      "created_at": "2021-01-27T16:52:03Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r565469529",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565469529"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2181,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565470752",
      "pull_request_review_id": 577522548,
      "id": 565470752,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTQ3MDc1Mg==",
      "diff_hunk": "@@ -3183,10 +3183,10 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n             return;\n         }\n \n-        TxValidationState state;\n-        std::list<CTransactionRef> lRemovedTxn;\n+        const MempoolAcceptResult result = AcceptToMemoryPool(m_mempool, ptx, false /* bypass_limits */);\n+        const TxValidationState state = result.m_state;",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 30,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "70f84b22199cd0afffd12ea8e8934d22b0f0c7f4",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This can be a reference.",
      "created_at": "2021-01-27T16:53:30Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r565470752",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565470752"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3187,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565567920",
      "pull_request_review_id": 577522548,
      "id": 565567920,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTU2NzkyMA==",
      "diff_hunk": "@@ -922,67 +924,77 @@ static RPCHelpMan testmempoolaccept()\n         UniValueType(), // VNUM or VSTR, checked inside AmountFromValue()\n     });\n \n-    if (request.params[0].get_array().size() != 1) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array must contain exactly one raw transaction for now\");\n-    }\n-\n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_array()[0].get_str())) {\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n-    }\n-    CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-\n+    const UniValue raw_transactions = request.params[0].get_array();\n     const CFeeRate max_raw_tx_fee_rate = request.params[1].isNull() ?\n                                              DEFAULT_MAX_RAW_TX_FEE_RATE :\n                                              CFeeRate(AmountFromValue(request.params[1]));\n \n     CTxMemPool& mempool = EnsureMemPool(request.context);\n-    int64_t virtual_size = GetVirtualTransactionSize(*tx);\n-    CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n-\n-    UniValue result(UniValue::VARR);\n-    UniValue result_0(UniValue::VOBJ);\n-    result_0.pushKV(\"txid\", tx->GetHash().GetHex());\n-    result_0.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n+    std::vector<CTransactionRef> txns;\n \n-    TxValidationState state;\n-    bool test_accept_res;\n-    CAmount fee{0};\n-    {\n-        LOCK(cs_main);\n-        test_accept_res = AcceptToMemoryPool(mempool, state, std::move(tx),\n-            nullptr /* plTxnReplaced */, false /* bypass_limits */, /* test_accept */ true, &fee);\n+    for (unsigned int i = 0; i < raw_transactions.size(); ++i) {\n+        CMutableTransaction mtx;\n+        if (!DecodeHexTx(mtx, raw_transactions[i].get_str())) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n+        }\n+        txns.emplace_back(MakeTransactionRef(std::move(mtx)));\n     }\n \n-    // Check that fee does not exceed maximum fee\n-    if (test_accept_res && max_raw_tx_fee && fee > max_raw_tx_fee) {\n-        result_0.pushKV(\"allowed\", false);\n-        result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n-        result.push_back(std::move(result_0));\n-        return result;\n+    std::vector<MempoolAcceptResult> validation_results;\n+    if (txns.size() == 1) {\n+        validation_results.emplace_back(WITH_LOCK(cs_main,\n+            return AcceptToMemoryPool(mempool, txns[0], false /* bypass_limits */, true /* test_accept */)));\n+    } else {\n+        validation_results = WITH_LOCK(cs_main, return ProcessNewPackage(mempool, txns, true));\n     }\n-    result_0.pushKV(\"allowed\", test_accept_res);\n \n-    // Only return the fee and vsize if the transaction would pass ATMP.\n-    // These can be used to calculate the feerate.\n-    if (test_accept_res) {\n-        result_0.pushKV(\"vsize\", virtual_size);\n-        UniValue fees(UniValue::VOBJ);\n-        fees.pushKV(\"base\", ValueFromAmount(fee));\n-        result_0.pushKV(\"fees\", fees);\n-    } else {\n-        if (state.IsInvalid()) {\n-            if (state.GetResult() == TxValidationResult::TX_MISSING_INPUTS) {\n-                result_0.pushKV(\"reject-reason\", \"missing-inputs\");\n+    auto tx_accepted = [](MempoolAcceptResult& res) { return res.m_accepted; };\n+    const bool all_valid = std::all_of(validation_results.begin(), validation_results.end(), tx_accepted);\n+    // ProcessNewPackage should return a MempoolAcceptResult per transaction\n+    // or exactly 1 for the first error that occurs.\n+    CHECK_NONFATAL(all_valid || validation_results.size() == 1);\n+\n+    // TODO: Report absurd fees for packages.\n+\n+    UniValue result(UniValue::VARR);\n+    if (all_valid) {\n+        for (unsigned int i = 0; i < validation_results.size(); ++i) {\n+            UniValue result_inner(UniValue::VOBJ);\n+            const CTransaction tx = *txns[i];\n+            result_inner.pushKV(\"txid\", tx.GetHash().GetHex());\n+            result_inner.pushKV(\"wtxid\", tx.GetWitnessHash().GetHex());\n+\n+            const CAmount fee = validation_results[i].m_base_fees.value();",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 106,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "70f84b22199cd0afffd12ea8e8934d22b0f0c7f4",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think this local variable is needed. It's only used in one place below (in the if conditional). You could just use `validation_results[i].m_base_fees.value()` there.",
      "created_at": "2021-01-27T19:14:53Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r565567920",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565567920"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 967,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565572115",
      "pull_request_review_id": 577680431,
      "id": 565572115,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTU3MjExNQ==",
      "diff_hunk": "@@ -922,67 +924,77 @@ static RPCHelpMan testmempoolaccept()\n         UniValueType(), // VNUM or VSTR, checked inside AmountFromValue()\n     });\n \n-    if (request.params[0].get_array().size() != 1) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array must contain exactly one raw transaction for now\");\n-    }\n-\n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_array()[0].get_str())) {\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n-    }\n-    CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-\n+    const UniValue raw_transactions = request.params[0].get_array();\n     const CFeeRate max_raw_tx_fee_rate = request.params[1].isNull() ?\n                                              DEFAULT_MAX_RAW_TX_FEE_RATE :\n                                              CFeeRate(AmountFromValue(request.params[1]));\n \n     CTxMemPool& mempool = EnsureMemPool(request.context);\n-    int64_t virtual_size = GetVirtualTransactionSize(*tx);\n-    CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n-\n-    UniValue result(UniValue::VARR);\n-    UniValue result_0(UniValue::VOBJ);\n-    result_0.pushKV(\"txid\", tx->GetHash().GetHex());\n-    result_0.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n+    std::vector<CTransactionRef> txns;\n \n-    TxValidationState state;\n-    bool test_accept_res;\n-    CAmount fee{0};\n-    {\n-        LOCK(cs_main);\n-        test_accept_res = AcceptToMemoryPool(mempool, state, std::move(tx),\n-            nullptr /* plTxnReplaced */, false /* bypass_limits */, /* test_accept */ true, &fee);\n+    for (unsigned int i = 0; i < raw_transactions.size(); ++i) {\n+        CMutableTransaction mtx;\n+        if (!DecodeHexTx(mtx, raw_transactions[i].get_str())) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n+        }\n+        txns.emplace_back(MakeTransactionRef(std::move(mtx)));\n     }\n \n-    // Check that fee does not exceed maximum fee\n-    if (test_accept_res && max_raw_tx_fee && fee > max_raw_tx_fee) {\n-        result_0.pushKV(\"allowed\", false);\n-        result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n-        result.push_back(std::move(result_0));\n-        return result;\n+    std::vector<MempoolAcceptResult> validation_results;\n+    if (txns.size() == 1) {\n+        validation_results.emplace_back(WITH_LOCK(cs_main,\n+            return AcceptToMemoryPool(mempool, txns[0], false /* bypass_limits */, true /* test_accept */)));\n+    } else {\n+        validation_results = WITH_LOCK(cs_main, return ProcessNewPackage(mempool, txns, true));\n     }\n-    result_0.pushKV(\"allowed\", test_accept_res);\n \n-    // Only return the fee and vsize if the transaction would pass ATMP.\n-    // These can be used to calculate the feerate.\n-    if (test_accept_res) {\n-        result_0.pushKV(\"vsize\", virtual_size);\n-        UniValue fees(UniValue::VOBJ);\n-        fees.pushKV(\"base\", ValueFromAmount(fee));\n-        result_0.pushKV(\"fees\", fees);\n-    } else {\n-        if (state.IsInvalid()) {\n-            if (state.GetResult() == TxValidationResult::TX_MISSING_INPUTS) {\n-                result_0.pushKV(\"reject-reason\", \"missing-inputs\");\n+    auto tx_accepted = [](MempoolAcceptResult& res) { return res.m_accepted; };\n+    const bool all_valid = std::all_of(validation_results.begin(), validation_results.end(), tx_accepted);\n+    // ProcessNewPackage should return a MempoolAcceptResult per transaction\n+    // or exactly 1 for the first error that occurs.\n+    CHECK_NONFATAL(all_valid || validation_results.size() == 1);",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 94,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "70f84b22199cd0afffd12ea8e8934d22b0f0c7f4",
      "in_reply_to_id": 565444091,
      "user": {
        "login": "satsie",
        "id": 1823216,
        "node_id": "MDQ6VXNlcjE4MjMyMTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1823216?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/satsie",
        "html_url": "https://github.com/satsie",
        "followers_url": "https://api.github.com/users/satsie/followers",
        "following_url": "https://api.github.com/users/satsie/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/satsie/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/satsie/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/satsie/subscriptions",
        "organizations_url": "https://api.github.com/users/satsie/orgs",
        "repos_url": "https://api.github.com/users/satsie/repos",
        "events_url": "https://api.github.com/users/satsie/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/satsie/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ah! Thanks for linking to that description 👍  [This was](https://doxygen.bitcoincore.org/check_8h.html#a46a3e27097aa5e94bbf62075bad7016f) the only one I had been working off of so the link you provided is super helpful for understanding the purpose of CHECK_NONFATAL. \r\n\r\nI was getting hung up on the `||`, or part of the evaluation. I think I understand it now, an error will only be thrown if both `all_valid` and `validation_results.size() == 1` evaluate to false, reason being that these two statements are incompatible (if there is an invalid tx, `validation_results.size()` can't be anything other than 1). Thanks for the clarification! Please mark this guy as resolved when you get a chance! (I don't believe I have permission to)",
      "created_at": "2021-01-27T19:21:33Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r565572115",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565572115"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 955,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565741093",
      "pull_request_review_id": 577896489,
      "id": 565741093,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTc0MTA5Mw==",
      "diff_hunk": "@@ -30,25 +30,21 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_reject_coinbase, TestChain100Setup)\n \n     BOOST_CHECK(CTransaction(coinbaseTx).IsCoinBase());\n \n-    TxValidationState state;\n-\n     LOCK(cs_main);\n \n     unsigned int initialPoolSize = m_node.mempool->size();\n+    const MempoolAcceptResult result = AcceptToMemoryPool(*m_node.mempool, MakeTransactionRef(coinbaseTx),\n+                true /* bypass_limits */);\n \n-    BOOST_CHECK_EQUAL(\n-            false,\n-            AcceptToMemoryPool(*m_node.mempool, state, MakeTransactionRef(coinbaseTx),\n-                nullptr /* plTxnReplaced */,\n-                true /* bypass_limits */));\n+    BOOST_CHECK_EQUAL(false, result.m_accepted);",
      "path": "src/test/txvalidation_tests.cpp",
      "position": null,
      "original_position": 17,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "f14f8b73900d2da4e15119780e19683c8499b700",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in f14f8b73900d2da4e15119780e19683c8499b700:\r\n\r\nnit: I slightly prefer\r\n```\r\nBOOST_CHECK(!result.m_accepted);\r\n```",
      "created_at": "2021-01-28T00:41:27Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r565741093",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565741093"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 39,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565807726",
      "pull_request_review_id": 577972356,
      "id": 565807726,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTgwNzcyNg==",
      "diff_hunk": "@@ -378,10 +387,9 @@ static void UpdateMempoolForReorg(CTxMemPool& mempool, DisconnectedBlockTransact\n     auto it = disconnectpool.queuedTx.get<insertion_order>().rbegin();\n     while (it != disconnectpool.queuedTx.get<insertion_order>().rend()) {\n         // ignore validation errors in resurrected transactions\n-        TxValidationState stateDummy;\n-        if (!fAddToMempool || (*it)->IsCoinBase() ||\n-            !AcceptToMemoryPool(mempool, stateDummy, *it,\n-                                nullptr /* plTxnReplaced */, true /* bypass_limits */)) {\n+        const MempoolAcceptResult result = AcceptToMemoryPool(mempool, *it, true /* bypass_limits */);\n+\n+        if (!fAddToMempool || (*it)->IsCoinBase() || !result.m_accepted) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 51,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "70f84b22199cd0afffd12ea8e8934d22b0f0c7f4",
      "in_reply_to_id": 565449378,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ah, right",
      "created_at": "2021-01-28T04:10:08Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r565807726",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565807726"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": 390,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 392,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/566521663",
      "pull_request_review_id": 578877473,
      "id": 566521663,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjUyMTY2Mw==",
      "diff_hunk": "@@ -922,67 +924,77 @@ static RPCHelpMan testmempoolaccept()\n         UniValueType(), // VNUM or VSTR, checked inside AmountFromValue()\n     });\n \n-    if (request.params[0].get_array().size() != 1) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array must contain exactly one raw transaction for now\");\n-    }\n-\n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_array()[0].get_str())) {\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n-    }\n-    CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-\n+    const UniValue raw_transactions = request.params[0].get_array();\n     const CFeeRate max_raw_tx_fee_rate = request.params[1].isNull() ?\n                                              DEFAULT_MAX_RAW_TX_FEE_RATE :\n                                              CFeeRate(AmountFromValue(request.params[1]));\n \n     CTxMemPool& mempool = EnsureMemPool(request.context);\n-    int64_t virtual_size = GetVirtualTransactionSize(*tx);\n-    CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n-\n-    UniValue result(UniValue::VARR);\n-    UniValue result_0(UniValue::VOBJ);\n-    result_0.pushKV(\"txid\", tx->GetHash().GetHex());\n-    result_0.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n+    std::vector<CTransactionRef> txns;\n \n-    TxValidationState state;\n-    bool test_accept_res;\n-    CAmount fee{0};\n-    {\n-        LOCK(cs_main);\n-        test_accept_res = AcceptToMemoryPool(mempool, state, std::move(tx),\n-            nullptr /* plTxnReplaced */, false /* bypass_limits */, /* test_accept */ true, &fee);\n+    for (unsigned int i = 0; i < raw_transactions.size(); ++i) {\n+        CMutableTransaction mtx;\n+        if (!DecodeHexTx(mtx, raw_transactions[i].get_str())) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n+        }\n+        txns.emplace_back(MakeTransactionRef(std::move(mtx)));\n     }\n \n-    // Check that fee does not exceed maximum fee\n-    if (test_accept_res && max_raw_tx_fee && fee > max_raw_tx_fee) {\n-        result_0.pushKV(\"allowed\", false);\n-        result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n-        result.push_back(std::move(result_0));\n-        return result;\n+    std::vector<MempoolAcceptResult> validation_results;\n+    if (txns.size() == 1) {\n+        validation_results.emplace_back(WITH_LOCK(cs_main,\n+            return AcceptToMemoryPool(mempool, txns[0], false /* bypass_limits */, true /* test_accept */)));\n+    } else {\n+        validation_results = WITH_LOCK(cs_main, return ProcessNewPackage(mempool, txns, true));\n     }\n-    result_0.pushKV(\"allowed\", test_accept_res);\n \n-    // Only return the fee and vsize if the transaction would pass ATMP.\n-    // These can be used to calculate the feerate.\n-    if (test_accept_res) {\n-        result_0.pushKV(\"vsize\", virtual_size);\n-        UniValue fees(UniValue::VOBJ);\n-        fees.pushKV(\"base\", ValueFromAmount(fee));\n-        result_0.pushKV(\"fees\", fees);\n-    } else {\n-        if (state.IsInvalid()) {\n-            if (state.GetResult() == TxValidationResult::TX_MISSING_INPUTS) {\n-                result_0.pushKV(\"reject-reason\", \"missing-inputs\");\n+    auto tx_accepted = [](MempoolAcceptResult& res) { return res.m_accepted; };\n+    const bool all_valid = std::all_of(validation_results.begin(), validation_results.end(), tx_accepted);\n+    // ProcessNewPackage should return a MempoolAcceptResult per transaction\n+    // or exactly 1 for the first error that occurs.\n+    CHECK_NONFATAL(all_valid || validation_results.size() == 1);\n+\n+    // TODO: Report absurd fees for packages.\n+\n+    UniValue result(UniValue::VARR);\n+    if (all_valid) {\n+        for (unsigned int i = 0; i < validation_results.size(); ++i) {\n+            UniValue result_inner(UniValue::VOBJ);\n+            const CTransaction tx = *txns[i];\n+            result_inner.pushKV(\"txid\", tx.GetHash().GetHex());\n+            result_inner.pushKV(\"wtxid\", tx.GetWitnessHash().GetHex());\n+\n+            const CAmount fee = validation_results[i].m_base_fees.value();",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 106,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "70f84b22199cd0afffd12ea8e8934d22b0f0c7f4",
      "in_reply_to_id": 565567920,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Also used in `fees.pushKV(\"base\", ValueFromAmount(fee))` if that's better?",
      "created_at": "2021-01-29T01:34:35Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r566521663",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/566521663"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 967,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/566527100",
      "pull_request_review_id": 578883564,
      "id": 566527100,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjUyNzEwMA==",
      "diff_hunk": "@@ -189,12 +189,52 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/**\n+* Validation result for a single transaction mempool acceptance.\n+* When m_accepted = true, m_replaced_transactions contains a list\n+* of replaced transactions and m_base_fees contains the tx fees.\n+*/\n+struct MempoolAcceptResult {\n+    bool m_accepted;\n+    TxValidationState m_state;\n+\n+    // Valid when m_accepted = false\n+    std::optional<CTransactionRef> m_ptx;",
      "path": "src/validation.h",
      "position": null,
      "original_position": 36,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "70f84b22199cd0afffd12ea8e8934d22b0f0c7f4",
      "in_reply_to_id": 565450892,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Mm, I agree that's better. Also renaming it to `m_failed_ptx` to make it more clear.",
      "created_at": "2021-01-29T01:51:10Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r566527100",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/566527100"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 202,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567222730",
      "pull_request_review_id": 577896489,
      "id": 567222730,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzIyMjczMA==",
      "diff_hunk": "@@ -189,12 +189,38 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/**\n+* Validation result for a single transaction mempool acceptance.\n+* When m_accepted = true, m_replaced_transactions contains a list\n+* of replaced transactions and m_base_fees contains the tx fees.\n+*/\n+struct MempoolAcceptResult {\n+    bool m_accepted;\n+    TxValidationState m_state;\n+\n+    // Valid when m_accepted = true\n+    std::optional<std::list<CTransactionRef>> m_replaced_transactions;",
      "path": "src/validation.h",
      "position": null,
      "original_position": 36,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "b76910ebd4d8a07534e145c498c7f7d0ce297ccd",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in b76910ebd4d8a07534e145c498c7f7d0ce297ccd:\r\n\r\nDo these have to be optional if they are \"guarded\" by `m_accepted` anyway? Especially the list could just be empty anyway.",
      "created_at": "2021-01-30T09:25:58Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567222730",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567222730"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 199,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567223369",
      "pull_request_review_id": 577896489,
      "id": 567223369,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzIyMzM2OQ==",
      "diff_hunk": "@@ -189,12 +189,38 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/**\n+* Validation result for a single transaction mempool acceptance.\n+* When m_accepted = true, m_replaced_transactions contains a list\n+* of replaced transactions and m_base_fees contains the tx fees.\n+*/\n+struct MempoolAcceptResult {\n+    bool m_accepted;",
      "path": "src/validation.h",
      "position": null,
      "original_position": 32,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "b76910ebd4d8a07534e145c498c7f7d0ce297ccd",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in b76910e:\r\n\r\nStylistically I find it odd to give public members of a struct the m_* prefix. The way we use structs usually, just bundling some data without complex methods, it doesn't seem needed internally to the struct and externally, where the struct is used looks very wrong to me. But there doesn't seem to be a clear rule on this looking at the codebase. I just did it this way in `IndexSummary` and I didn't get complaints. So maybe something to think about.",
      "created_at": "2021-01-30T09:33:04Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567223369",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567223369"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 198,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567223619",
      "pull_request_review_id": 577896489,
      "id": 567223619,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzIyMzYxOQ==",
      "diff_hunk": "@@ -189,12 +189,38 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/**\n+* Validation result for a single transaction mempool acceptance.\n+* When m_accepted = true, m_replaced_transactions contains a list\n+* of replaced transactions and m_base_fees contains the tx fees.\n+*/\n+struct MempoolAcceptResult {",
      "path": "src/validation.h",
      "position": 11,
      "original_position": 31,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "b76910ebd4d8a07534e145c498c7f7d0ce297ccd",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in b76910e:\r\n\r\nI think I would have left `m_accepted` out of the struct and have `AcceptToMemoryPool` return an optional of `MempoolAcceptResult`.",
      "created_at": "2021-01-30T09:36:11Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567223619",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567223619"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 172,
      "original_line": 172,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567226540",
      "pull_request_review_id": 577896489,
      "id": 567226540,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzIyNjU0MA==",
      "diff_hunk": "@@ -922,60 +924,77 @@ static RPCHelpMan testmempoolaccept()\n         UniValueType(), // VNUM or VSTR, checked inside AmountFromValue()\n     });\n \n-    if (request.params[0].get_array().size() != 1) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array must contain exactly one raw transaction for now\");\n-    }\n-\n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_array()[0].get_str())) {\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n-    }\n-    CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-\n+    const UniValue raw_transactions = request.params[0].get_array();\n     const CFeeRate max_raw_tx_fee_rate = request.params[1].isNull() ?\n                                              DEFAULT_MAX_RAW_TX_FEE_RATE :\n                                              CFeeRate(AmountFromValue(request.params[1]));\n \n     CTxMemPool& mempool = EnsureMemPool(request.context);\n-    int64_t virtual_size = GetVirtualTransactionSize(*tx);\n-    CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n+    std::vector<CTransactionRef> txns;\n+\n+    for (unsigned int i = 0; i < raw_transactions.size(); ++i) {\n+        CMutableTransaction mtx;\n+        if (!DecodeHexTx(mtx, raw_transactions[i].get_str())) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n+        }\n+        txns.emplace_back(MakeTransactionRef(std::move(mtx)));\n+    }\n+\n+    std::vector<MempoolAcceptResult> validation_results;\n+    if (txns.size() == 1) {\n+        validation_results.emplace_back(WITH_LOCK(cs_main,\n+            return AcceptToMemoryPool(mempool, txns[0], false /* bypass_limits */, true /* test_accept */)));\n+    } else {\n+        validation_results = WITH_LOCK(cs_main, return ProcessNewPackage(mempool, txns, true));\n+    }\n+\n+    auto tx_accepted = [](MempoolAcceptResult& res) { return res.m_accepted; };\n+    const bool all_valid = std::all_of(validation_results.begin(), validation_results.end(), tx_accepted);\n+    // ProcessNewPackage should return a MempoolAcceptResult per transaction\n+    // or exactly 1 for the first error that occurs.\n+    CHECK_NONFATAL(all_valid || validation_results.size() == 1);\n+\n+    // TODO: Report absurd fees for packages.\n \n     UniValue result(UniValue::VARR);\n-    UniValue result_0(UniValue::VOBJ);\n-    result_0.pushKV(\"txid\", tx->GetHash().GetHex());\n-    result_0.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n-\n-    MempoolAcceptResult accept_result = WITH_LOCK(cs_main,\n-\t\t    return AcceptToMemoryPool(mempool, std::move(tx), false /* bypass_limits */, true /* test_accept */));\n-    const bool test_accept_res = accept_result.m_accepted;\n-\n-    // Only return the fee and vsize if the transaction would pass ATMP.\n-    // These can be used to calculate the feerate.\n-    if (test_accept_res) {\n-        const CAmount fee = accept_result.m_base_fees.value();\n-        // Check that fee does not exceed maximum fee\n-        if (max_raw_tx_fee && fee > max_raw_tx_fee) {\n-            result_0.pushKV(\"allowed\", false);\n-            result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n-            result.push_back(std::move(result_0));\n-            return result;\n+    if (all_valid) {\n+        for (unsigned int i = 0; i < validation_results.size(); ++i) {\n+            UniValue result_inner(UniValue::VOBJ);\n+            const CTransaction tx = *txns[i];\n+            result_inner.pushKV(\"txid\", tx.GetHash().GetHex());\n+            result_inner.pushKV(\"wtxid\", tx.GetWitnessHash().GetHex());\n+\n+            const CAmount fee = validation_results[i].m_base_fees.value();\n+            const int64_t virtual_size = GetVirtualTransactionSize(tx);\n+            const CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n+            // Check that fee does not exceed maximum fee\n+            if (max_raw_tx_fee && fee > max_raw_tx_fee) {\n+                result_inner.pushKV(\"allowed\", false);\n+                result_inner.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n+                result_inner.push_back(std::move(result_inner));",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 101,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "048ef0a7e62cca10c588b451c9060e7846ac398b",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in 048ef0a7e62cca10c588b451c9060e7846ac398b:\r\n\r\nThis looks like an error?",
      "created_at": "2021-01-30T10:06:11Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567226540",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567226540"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 974,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567454265",
      "pull_request_review_id": 577896489,
      "id": 567454265,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzQ1NDI2NQ==",
      "diff_hunk": "@@ -945,32 +945,29 @@ static RPCHelpMan testmempoolaccept()\n     result_0.pushKV(\"txid\", tx->GetHash().GetHex());\n     result_0.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n \n-    TxValidationState state;\n-    bool test_accept_res;\n-    CAmount fee{0};\n-    {\n-        LOCK(cs_main);\n-        test_accept_res = AcceptToMemoryPool(mempool, state, std::move(tx),\n-            nullptr /* plTxnReplaced */, false /* bypass_limits */, /* test_accept */ true, &fee);\n-    }\n-\n-    // Check that fee does not exceed maximum fee\n-    if (test_accept_res && max_raw_tx_fee && fee > max_raw_tx_fee) {\n-        result_0.pushKV(\"allowed\", false);\n-        result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n-        result.push_back(std::move(result_0));\n-        return result;\n-    }\n-    result_0.pushKV(\"allowed\", test_accept_res);\n+    MempoolAcceptResult accept_result = WITH_LOCK(cs_main,",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 21,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "b76910ebd4d8a07534e145c498c7f7d0ce297ccd",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in b76910ebd4d8a07534e145c498c7f7d0ce297ccd:\r\n\r\nI guess this result can be `const`, too.",
      "created_at": "2021-01-31T17:02:19Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567454265",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567454265"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 948,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567459195",
      "pull_request_review_id": 577896489,
      "id": 567459195,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzQ1OTE5NQ==",
      "diff_hunk": "@@ -880,15 +880,28 @@ class CTxMemPool\n  * It also allows you to sign a double-spend directly in\n  * signrawtransactionwithkey and signrawtransactionwithwallet,\n  * as long as the conflicting transaction is not yet confirmed.\n+ * It can also serve as temporary scratch space for some set\n+ * of transactions (i.e. as a member of MemPoolAccept to validate\n+ * packages) and tracks the Coins added and removed by them.\n  */\n class CCoinsViewMemPool : public CCoinsViewBacked\n {\n protected:\n     const CTxMemPool& mempool;\n+    std::map<COutPoint, Coin> cache_package_add;",
      "path": "src/txmempool.h",
      "position": null,
      "original_position": 12,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "17ca2d8e72bc5d9249e4a01a2dbc2bb362dbd9d8",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in 17ca2d8e72bc5d9249e4a01a2dbc2bb362dbd9d8:\r\n\r\nThese members could get an m_* prefix. Also I think they could use some comments explaining what context they are used in. Or the added comments above could be more explicit.",
      "created_at": "2021-01-31T17:41:43Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567459195",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567459195"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 891,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567471786",
      "pull_request_review_id": 577896489,
      "id": 567471786,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzQ3MTc4Ng==",
      "diff_hunk": "@@ -0,0 +1,193 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"RPCs that handle raw transaction packages.\"\"\"\n+\n+from decimal import Decimal\n+from io import BytesIO\n+\n+from test_framework.address import ADDRESS_BCRT1_P2WSH_OP_TRUE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    BIP125_SEQUENCE_NUMBER,\n+    COIN,\n+    CTransaction,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+    hex_str_to_bytes,\n+)\n+\n+class RPCPackagesTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.privkeys = [node.get_deterministic_priv_key().key]\n+        self.address = node.get_deterministic_priv_key().address\n+        self.coins = []\n+        # The last 100 coinbase transactions are premature\n+        for b in node.generatetoaddress(120, self.address)[:20]:",
      "path": "test/functional/rpc_packages.py",
      "position": null,
      "original_position": 34,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "2fac0136138012ae26c8e12ef77e9486ad5cd831",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in 2fac0136138012ae26c8e12ef77e9486ad5cd831:\r\n\r\nDo you have to generate these and can't use the cached chain?",
      "created_at": "2021-01-31T19:26:46Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567471786",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567471786"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 39,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567475382",
      "pull_request_review_id": 577896489,
      "id": 567475382,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzQ3NTM4Mg==",
      "diff_hunk": "@@ -905,19 +905,48 @@ bool CTxMemPool::HasNoInputsOf(const CTransaction &tx) const\n CCoinsViewMemPool::CCoinsViewMemPool(CCoinsView* baseIn, const CTxMemPool& mempoolIn) : CCoinsViewBacked(baseIn), mempool(mempoolIn) { }\n \n bool CCoinsViewMemPool::GetCoin(const COutPoint &outpoint, Coin &coin) const {\n+    // Check to see if the inputs are spent by a tx being considered for a package.\n+    // It's possible that a package spends entries in the mempool, and this would\n+    // only be reflected in the cache_package_remove.\n+    if (auto it = cache_package_remove.find(outpoint); it != cache_package_remove.end()) {\n+        coin = it->second;\n+        return false;\n+    }\n+\n+    // Check to see if the inputs are in a tx being considered for a package.\n+    // These Coins would not be available in the mempool or underlying CoinsView.\n+    if (auto it = cache_package_add.find(outpoint); it != cache_package_add.end()) {\n+        coin = it->second;\n+        return true;\n+    }\n+\n     // If an entry in the mempool exists, always return that one, as it's guaranteed to never\n-    // conflict with the underlying cache, and it cannot have pruned entries (as it contains full)\n-    // transactions. First checking the underlying cache risks returning a pruned entry instead.\n+    // conflict with the underlying cache, and it cannot have spent entries.\n     CTransactionRef ptx = mempool.get(outpoint.hash);\n-    if (ptx) {\n-        if (outpoint.n < ptx->vout.size()) {\n-            coin = Coin(ptx->vout[outpoint.n], MEMPOOL_HEIGHT, false);\n-            return true;\n-        } else {\n-            return false;\n-        }\n+\n+    // Check the underlying CoinsView.\n+    if (!ptx) return base->GetCoin(outpoint, coin);\n+\n+    // \"Create\" a Coin from a mempool transaction output.\n+    if (outpoint.n < ptx->vout.size()) {\n+        coin = Coin(ptx->vout[outpoint.n], MEMPOOL_HEIGHT, false);\n+        return true;\n+    }\n+    return false;\n+}\n+\n+void CCoinsViewMemPool::AddPackageTransaction(const CTransactionRef& tx) {\n+    package_txids.insert(tx->GetHash());\n+    // Coins spent by this transaction\n+    for (auto input : tx->vin) {\n+        Coin spent_coin;\n+        GetCoin(input.prevout, spent_coin);",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 48,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "17ca2d8e72bc5d9249e4a01a2dbc2bb362dbd9d8",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in 17ca2d8e72bc5d9249e4a01a2dbc2bb362dbd9d8:\r\n\r\nI am probably missing something but I find it strange that this is ignoring the result of `GetCoin()`. So we don't care at this point that the prevout might already be spent? Might be worth a comment.",
      "created_at": "2021-01-31T19:55:51Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567475382",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567475382"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 943,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567589472",
      "pull_request_review_id": 580044650,
      "id": 567589472,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzU4OTQ3Mg==",
      "diff_hunk": "@@ -189,12 +189,38 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/**\n+* Validation result for a single transaction mempool acceptance.\n+* When m_accepted = true, m_replaced_transactions contains a list\n+* of replaced transactions and m_base_fees contains the tx fees.\n+*/\n+struct MempoolAcceptResult {",
      "path": "src/validation.h",
      "position": 11,
      "original_position": 31,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "b76910ebd4d8a07534e145c498c7f7d0ce297ccd",
      "in_reply_to_id": 567223619,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That wouldn't work, because the error reason couldn't be returned?",
      "created_at": "2021-02-01T06:30:11Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567589472",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567589472"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 172,
      "original_line": 172,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567827106",
      "pull_request_review_id": 580354195,
      "id": 567827106,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzgyNzEwNg==",
      "diff_hunk": "@@ -189,12 +189,38 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/**\n+* Validation result for a single transaction mempool acceptance.\n+* When m_accepted = true, m_replaced_transactions contains a list\n+* of replaced transactions and m_base_fees contains the tx fees.\n+*/\n+struct MempoolAcceptResult {\n+    bool m_accepted;",
      "path": "src/validation.h",
      "position": null,
      "original_position": 32,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "b76910ebd4d8a07534e145c498c7f7d0ce297ccd",
      "in_reply_to_id": 567223369,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "There's no guidance in the style guide on this. I tried to update the style guide to include guidance in https://github.com/bitcoin/bitcoin/pull/19759, but people had *very strong feelings* so I backed off.",
      "created_at": "2021-02-01T13:32:31Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567827106",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567827106"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 198,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567837440",
      "pull_request_review_id": 580367672,
      "id": 567837440,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzgzNzQ0MA==",
      "diff_hunk": "@@ -189,12 +189,53 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/**\n+* Validation result for a single transaction mempool acceptance.\n+* When m_accepted = true, m_replaced_transactions contains a list\n+* of replaced transactions and m_base_fees contains the tx fees.\n+*/\n+struct MempoolAcceptResult {\n+    bool m_accepted;\n+    TxValidationState m_state;\n+\n+    // Points to failed tx when m_accepted = false\n+    CTransactionRef m_failed_ptx;\n+\n+    // Valid when m_accepted = true\n+    std::optional<std::list<CTransactionRef>> m_replaced_transactions;\n+    std::optional<CAmount> m_base_fees;\n+\n+    /** Constructor for failure case */\n+    explicit MempoolAcceptResult(TxValidationState state, CTransactionRef ptx) :\n+        m_state(state), m_failed_ptx(ptx) {\n+        m_accepted = false;\n+        m_replaced_transactions = nullopt;\n+        m_base_fees = nullopt;\n+    }\n+\n+    /** Constructor for success case */\n+    explicit MempoolAcceptResult(TxValidationState state, std::list<CTransactionRef>&& replaced_txns, CAmount fees) :\n+        m_state(state), m_replaced_transactions(std::move(replaced_txns)), m_base_fees(fees) {\n+        m_accepted = true;\n+        m_failed_ptx = nullptr;\n+    }\n+};",
      "path": "src/validation.h",
      "position": null,
      "original_position": 56,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "2fac0136138012ae26c8e12ef77e9486ad5cd831",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Since these ctors are just initializing members, you could do it all in the initializer list:\r\n\r\n```suggestion\r\n    /** Constructor for failure case */\r\n    explicit MempoolAcceptResult(TxValidationState state, CTransactionRef ptx) :\r\n        m_accepted(false), m_state(state), m_failed_ptx(ptx), m_replaced_transactions(nullopt),\r\n        m_base_fees(nullopt) {}\r\n\r\n    /** Constructor for success case */\r\n    explicit MempoolAcceptResult(TxValidationState state, std::list<CTransactionRef>&& replaced_txns, CAmount fees) :\r\n        m_accepted(true), m_state(state), m_failed_ptx(nullptr),\r\n        m_replaced_transactions(std::move(replaced_txns)), m_base_fees(fees) {}\r\n\r\n```",
      "created_at": "2021-02-01T13:48:08Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567837440",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567837440"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": 208,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 206,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567839245",
      "pull_request_review_id": 580367672,
      "id": 567839245,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzgzOTI0NQ==",
      "diff_hunk": "@@ -5013,13 +5084,12 @@ bool LoadMempool(CTxMemPool& pool)\n             if (amountdelta) {\n                 pool.PrioritiseTransaction(tx->GetHash(), amountdelta);\n             }\n-            TxValidationState state;\n             if (nTime > nNow - nExpiryTimeout) {\n                 LOCK(cs_main);\n-                AcceptToMemoryPoolWithTime(chainparams, pool, state, tx, nTime,\n-                                           nullptr /* plTxnReplaced */, false /* bypass_limits */,\n-                                           false /* test_accept */);\n-                if (state.IsValid()) {\n+                const MempoolAcceptResult result = AcceptToMemoryPoolWithTime(chainparams, pool, tx, nTime,\n+                                                                                false /* bypass_limits */,\n+                                                                                false /* test_accept */);\n+                if (result.m_accepted) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 387,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "2fac0136138012ae26c8e12ef77e9486ad5cd831",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Consider joining these lines:\r\n\r\n```suggestion\r\n                if (AcceptToMemoryPoolWithTime(chainparams, pool, tx, nTime,\r\n                                               false /* bypass_limits */,\r\n                                               false /* test_accept */).m_accepted) {\r\n```",
      "created_at": "2021-02-01T13:50:44Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567839245",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567839245"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": 5089,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 5092,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567843710",
      "pull_request_review_id": 580367672,
      "id": 567843710,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Nzg0MzcxMA==",
      "diff_hunk": "@@ -922,67 +924,77 @@ static RPCHelpMan testmempoolaccept()\n         UniValueType(), // VNUM or VSTR, checked inside AmountFromValue()\n     });\n \n-    if (request.params[0].get_array().size() != 1) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array must contain exactly one raw transaction for now\");\n-    }\n-\n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_array()[0].get_str())) {\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n-    }\n-    CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-\n+    const UniValue raw_transactions = request.params[0].get_array();\n     const CFeeRate max_raw_tx_fee_rate = request.params[1].isNull() ?\n                                              DEFAULT_MAX_RAW_TX_FEE_RATE :\n                                              CFeeRate(AmountFromValue(request.params[1]));\n \n     CTxMemPool& mempool = EnsureMemPool(request.context);\n-    int64_t virtual_size = GetVirtualTransactionSize(*tx);\n-    CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n-\n-    UniValue result(UniValue::VARR);\n-    UniValue result_0(UniValue::VOBJ);\n-    result_0.pushKV(\"txid\", tx->GetHash().GetHex());\n-    result_0.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n+    std::vector<CTransactionRef> txns;\n \n-    TxValidationState state;\n-    bool test_accept_res;\n-    CAmount fee{0};\n-    {\n-        LOCK(cs_main);\n-        test_accept_res = AcceptToMemoryPool(mempool, state, std::move(tx),\n-            nullptr /* plTxnReplaced */, false /* bypass_limits */, /* test_accept */ true, &fee);\n+    for (unsigned int i = 0; i < raw_transactions.size(); ++i) {\n+        CMutableTransaction mtx;\n+        if (!DecodeHexTx(mtx, raw_transactions[i].get_str())) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n+        }\n+        txns.emplace_back(MakeTransactionRef(std::move(mtx)));\n     }\n \n-    // Check that fee does not exceed maximum fee\n-    if (test_accept_res && max_raw_tx_fee && fee > max_raw_tx_fee) {\n-        result_0.pushKV(\"allowed\", false);\n-        result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n-        result.push_back(std::move(result_0));\n-        return result;\n+    std::vector<MempoolAcceptResult> validation_results;\n+    if (txns.size() == 1) {\n+        validation_results.emplace_back(WITH_LOCK(cs_main,\n+            return AcceptToMemoryPool(mempool, txns[0], false /* bypass_limits */, true /* test_accept */)));\n+    } else {\n+        validation_results = WITH_LOCK(cs_main, return ProcessNewPackage(mempool, txns, true));\n     }\n-    result_0.pushKV(\"allowed\", test_accept_res);\n \n-    // Only return the fee and vsize if the transaction would pass ATMP.\n-    // These can be used to calculate the feerate.\n-    if (test_accept_res) {\n-        result_0.pushKV(\"vsize\", virtual_size);\n-        UniValue fees(UniValue::VOBJ);\n-        fees.pushKV(\"base\", ValueFromAmount(fee));\n-        result_0.pushKV(\"fees\", fees);\n-    } else {\n-        if (state.IsInvalid()) {\n-            if (state.GetResult() == TxValidationResult::TX_MISSING_INPUTS) {\n-                result_0.pushKV(\"reject-reason\", \"missing-inputs\");\n+    auto tx_accepted = [](MempoolAcceptResult& res) { return res.m_accepted; };\n+    const bool all_valid = std::all_of(validation_results.begin(), validation_results.end(), tx_accepted);\n+    // ProcessNewPackage should return a MempoolAcceptResult per transaction\n+    // or exactly 1 for the first error that occurs.\n+    CHECK_NONFATAL(all_valid || validation_results.size() == 1);\n+\n+    // TODO: Report absurd fees for packages.\n+\n+    UniValue result(UniValue::VARR);\n+    if (all_valid) {\n+        for (unsigned int i = 0; i < validation_results.size(); ++i) {\n+            UniValue result_inner(UniValue::VOBJ);\n+            const CTransaction tx = *txns[i];\n+            result_inner.pushKV(\"txid\", tx.GetHash().GetHex());\n+            result_inner.pushKV(\"wtxid\", tx.GetWitnessHash().GetHex());\n+\n+            const CAmount fee = validation_results[i].m_base_fees.value();",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 106,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "70f84b22199cd0afffd12ea8e8934d22b0f0c7f4",
      "in_reply_to_id": 565567920,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oops. You're right. Ignore this!",
      "created_at": "2021-02-01T13:57:25Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567843710",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567843710"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 967,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567852656",
      "pull_request_review_id": 580388483,
      "id": 567852656,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Nzg1MjY1Ng==",
      "diff_hunk": "@@ -556,12 +568,12 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     const uint256& hash = ws.m_hash;\n \n     // Copy/alias what we need out of args\n-    TxValidationState &state = args.m_state;\n     const int64_t nAcceptTime = args.m_accept_time;\n     const bool bypass_limits = args.m_bypass_limits;\n     std::vector<COutPoint>& coins_to_uncache = args.m_coins_to_uncache;\n \n     // Alias what we need out of ws\n+    TxValidationState &state = ws.m_state;",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 131,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "2fac0136138012ae26c8e12ef77e9486ad5cd831",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n    TxValidationState& state = ws.m_state;\r\n```",
      "created_at": "2021-02-01T14:10:32Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567852656",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567852656"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 576,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567853147",
      "pull_request_review_id": 580388483,
      "id": 567853147,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Nzg1MzE0Nw==",
      "diff_hunk": "@@ -923,11 +938,10 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     return true;\n }\n \n-bool MemPoolAccept::PolicyScriptChecks(ATMPArgs& args, const Workspace& ws, PrecomputedTransactionData& txdata)\n+bool MemPoolAccept::PolicyScriptChecks(const ATMPArgs& args, Workspace& ws, PrecomputedTransactionData& txdata)\n {\n     const CTransaction& tx = *ws.m_ptx;\n-\n-    TxValidationState &state = args.m_state;\n+    TxValidationState &state = ws.m_state;",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 190,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "2fac0136138012ae26c8e12ef77e9486ad5cd831",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n    TxValidationState& state = ws.m_state;\r\n```",
      "created_at": "2021-02-01T14:11:12Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567853147",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567853147"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 944,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567853236",
      "pull_request_review_id": 580388483,
      "id": 567853236,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Nzg1MzIzNg==",
      "diff_hunk": "@@ -950,12 +964,11 @@ bool MemPoolAccept::PolicyScriptChecks(ATMPArgs& args, const Workspace& ws, Prec\n     return true;\n }\n \n-bool MemPoolAccept::ConsensusScriptChecks(ATMPArgs& args, const Workspace& ws, PrecomputedTransactionData& txdata)\n+bool MemPoolAccept::ConsensusScriptChecks(const ATMPArgs& args, Workspace& ws, PrecomputedTransactionData& txdata)\n {\n     const CTransaction& tx = *ws.m_ptx;\n     const uint256& hash = ws.m_hash;\n-\n-    TxValidationState &state = args.m_state;\n+    TxValidationState &state = ws.m_state;",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 205,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "2fac0136138012ae26c8e12ef77e9486ad5cd831",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n    TxValidationState& state = ws.m_state;\r\n```",
      "created_at": "2021-02-01T14:11:21Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567853236",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567853236"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 971,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567853513",
      "pull_request_review_id": 580388483,
      "id": 567853513,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Nzg1MzUxMw==",
      "diff_hunk": "@@ -982,11 +995,11 @@ bool MemPoolAccept::ConsensusScriptChecks(ATMPArgs& args, const Workspace& ws, P\n     return true;\n }\n \n-bool MemPoolAccept::Finalize(ATMPArgs& args, Workspace& ws)\n+bool MemPoolAccept::Finalize(const ATMPArgs& args, Workspace& ws)\n {\n     const CTransaction& tx = *ws.m_ptx;\n     const uint256& hash = ws.m_hash;\n-    TxValidationState &state = args.m_state;\n+    TxValidationState &state = ws.m_state;",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 219,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "2fac0136138012ae26c8e12ef77e9486ad5cd831",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n    TxValidationState& state = ws.m_state;\r\n```",
      "created_at": "2021-02-01T14:11:48Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567853513",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567853513"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1002,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567854054",
      "pull_request_review_id": 580388483,
      "id": 567854054,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Nzg1NDA1NA==",
      "diff_hunk": "@@ -1029,46 +1041,86 @@ bool MemPoolAccept::Finalize(ATMPArgs& args, Workspace& ws)\n     return true;\n }\n \n-bool MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n+MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n {\n     AssertLockHeld(cs_main);\n     LOCK(m_pool.cs); // mempool \"read lock\" (held through GetMainSignals().TransactionAddedToMempool())\n \n     Workspace workspace(ptx);",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 243,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "2fac0136138012ae26c8e12ef77e9486ad5cd831",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Consider changing this to `ws` to match parameter names in the other functions.",
      "created_at": "2021-02-01T14:12:34Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567854054",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567854054"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1049,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567856457",
      "pull_request_review_id": 580388483,
      "id": 567856457,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Nzg1NjQ1Nw==",
      "diff_hunk": "@@ -474,11 +481,13 @@ class MemPoolAccept\n          */\n         std::vector<COutPoint>& m_coins_to_uncache;",
      "path": "src/validation.cpp",
      "position": 55,
      "original_position": 67,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "2fac0136138012ae26c8e12ef77e9486ad5cd831",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This seems to be the odd one out in ATMPArgs, now that all of the others are const. Any reason that this one shouldn't live in Workspace?",
      "created_at": "2021-02-01T14:16:09Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567856457",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567856457"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 473,
      "original_line": 473,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567860224",
      "pull_request_review_id": 580388483,
      "id": 567860224,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Nzg2MDIyNA==",
      "diff_hunk": "@@ -905,19 +905,48 @@ bool CTxMemPool::HasNoInputsOf(const CTransaction &tx) const\n CCoinsViewMemPool::CCoinsViewMemPool(CCoinsView* baseIn, const CTxMemPool& mempoolIn) : CCoinsViewBacked(baseIn), mempool(mempoolIn) { }\n \n bool CCoinsViewMemPool::GetCoin(const COutPoint &outpoint, Coin &coin) const {\n+    // Check to see if the inputs are spent by a tx being considered for a package.\n+    // It's possible that a package spends entries in the mempool, and this would\n+    // only be reflected in the cache_package_remove.\n+    if (auto it = cache_package_remove.find(outpoint); it != cache_package_remove.end()) {\n+        coin = it->second;",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 8,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "2fac0136138012ae26c8e12ef77e9486ad5cd831",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "There's no need to set `coin` in this failure case. From the interface definition in `CCoinsView::GetCoin`:\r\n\r\n> When false is returned, coin's value is unspecified.",
      "created_at": "2021-02-01T14:21:19Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567860224",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567860224"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 912,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567861603",
      "pull_request_review_id": 580388483,
      "id": 567861603,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Nzg2MTYwMw==",
      "diff_hunk": "@@ -905,19 +905,48 @@ bool CTxMemPool::HasNoInputsOf(const CTransaction &tx) const\n CCoinsViewMemPool::CCoinsViewMemPool(CCoinsView* baseIn, const CTxMemPool& mempoolIn) : CCoinsViewBacked(baseIn), mempool(mempoolIn) { }\n \n bool CCoinsViewMemPool::GetCoin(const COutPoint &outpoint, Coin &coin) const {\n+    // Check to see if the inputs are spent by a tx being considered for a package.\n+    // It's possible that a package spends entries in the mempool, and this would\n+    // only be reflected in the cache_package_remove.\n+    if (auto it = cache_package_remove.find(outpoint); it != cache_package_remove.end()) {",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "2fac0136138012ae26c8e12ef77e9486ad5cd831",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You can just use `std::map.count()` here since you don't actually need the value of the coin.",
      "created_at": "2021-02-01T14:23:18Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567861603",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567861603"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 911,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567863028",
      "pull_request_review_id": 580388483,
      "id": 567863028,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Nzg2MzAyOA==",
      "diff_hunk": "@@ -905,19 +905,48 @@ bool CTxMemPool::HasNoInputsOf(const CTransaction &tx) const\n CCoinsViewMemPool::CCoinsViewMemPool(CCoinsView* baseIn, const CTxMemPool& mempoolIn) : CCoinsViewBacked(baseIn), mempool(mempoolIn) { }\n \n bool CCoinsViewMemPool::GetCoin(const COutPoint &outpoint, Coin &coin) const {\n+    // Check to see if the inputs are spent by a tx being considered for a package.\n+    // It's possible that a package spends entries in the mempool, and this would\n+    // only be reflected in the cache_package_remove.\n+    if (auto it = cache_package_remove.find(outpoint); it != cache_package_remove.end()) {\n+        coin = it->second;\n+        return false;\n+    }\n+\n+    // Check to see if the inputs are in a tx being considered for a package.\n+    // These Coins would not be available in the mempool or underlying CoinsView.\n+    if (auto it = cache_package_add.find(outpoint); it != cache_package_add.end()) {\n+        coin = it->second;\n+        return true;\n+    }\n+\n     // If an entry in the mempool exists, always return that one, as it's guaranteed to never\n-    // conflict with the underlying cache, and it cannot have pruned entries (as it contains full)\n-    // transactions. First checking the underlying cache risks returning a pruned entry instead.\n+    // conflict with the underlying cache, and it cannot have spent entries.",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "2fac0136138012ae26c8e12ef77e9486ad5cd831",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Remove \", and it cannot have spent entries\". That's vestigial from when a `CCoins` objects was returned for the full transaction.",
      "created_at": "2021-02-01T14:25:15Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567863028",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567863028"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 924,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567867011",
      "pull_request_review_id": 580388483,
      "id": 567867011,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Nzg2NzAxMQ==",
      "diff_hunk": "@@ -905,19 +905,48 @@ bool CTxMemPool::HasNoInputsOf(const CTransaction &tx) const\n CCoinsViewMemPool::CCoinsViewMemPool(CCoinsView* baseIn, const CTxMemPool& mempoolIn) : CCoinsViewBacked(baseIn), mempool(mempoolIn) { }\n \n bool CCoinsViewMemPool::GetCoin(const COutPoint &outpoint, Coin &coin) const {\n+    // Check to see if the inputs are spent by a tx being considered for a package.\n+    // It's possible that a package spends entries in the mempool, and this would\n+    // only be reflected in the cache_package_remove.\n+    if (auto it = cache_package_remove.find(outpoint); it != cache_package_remove.end()) {\n+        coin = it->second;\n+        return false;\n+    }\n+\n+    // Check to see if the inputs are in a tx being considered for a package.\n+    // These Coins would not be available in the mempool or underlying CoinsView.\n+    if (auto it = cache_package_add.find(outpoint); it != cache_package_add.end()) {\n+        coin = it->second;\n+        return true;\n+    }\n+\n     // If an entry in the mempool exists, always return that one, as it's guaranteed to never\n-    // conflict with the underlying cache, and it cannot have pruned entries (as it contains full)\n-    // transactions. First checking the underlying cache risks returning a pruned entry instead.\n+    // conflict with the underlying cache, and it cannot have spent entries.\n     CTransactionRef ptx = mempool.get(outpoint.hash);\n-    if (ptx) {\n-        if (outpoint.n < ptx->vout.size()) {\n-            coin = Coin(ptx->vout[outpoint.n], MEMPOOL_HEIGHT, false);\n-            return true;\n-        } else {\n-            return false;\n-        }\n+\n+    // Check the underlying CoinsView.\n+    if (!ptx) return base->GetCoin(outpoint, coin);\n+\n+    // \"Create\" a Coin from a mempool transaction output.\n+    if (outpoint.n < ptx->vout.size()) {\n+        coin = Coin(ptx->vout[outpoint.n], MEMPOOL_HEIGHT, false);\n+        return true;\n+    }\n+    return false;\n+}",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 41,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "2fac0136138012ae26c8e12ef77e9486ad5cd831",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Switching the logic ordering here is a little confusing. I'd suggest leaving it as it was.",
      "created_at": "2021-02-01T14:30:16Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567867011",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567867011"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": 927,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 945,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567867414",
      "pull_request_review_id": 580388483,
      "id": 567867414,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Nzg2NzQxNA==",
      "diff_hunk": "@@ -905,19 +905,48 @@ bool CTxMemPool::HasNoInputsOf(const CTransaction &tx) const\n CCoinsViewMemPool::CCoinsViewMemPool(CCoinsView* baseIn, const CTxMemPool& mempoolIn) : CCoinsViewBacked(baseIn), mempool(mempoolIn) { }\n \n bool CCoinsViewMemPool::GetCoin(const COutPoint &outpoint, Coin &coin) const {\n+    // Check to see if the inputs are spent by a tx being considered for a package.\n+    // It's possible that a package spends entries in the mempool, and this would\n+    // only be reflected in the cache_package_remove.\n+    if (auto it = cache_package_remove.find(outpoint); it != cache_package_remove.end()) {\n+        coin = it->second;\n+        return false;\n+    }\n+\n+    // Check to see if the inputs are in a tx being considered for a package.\n+    // These Coins would not be available in the mempool or underlying CoinsView.\n+    if (auto it = cache_package_add.find(outpoint); it != cache_package_add.end()) {\n+        coin = it->second;\n+        return true;\n+    }\n+\n     // If an entry in the mempool exists, always return that one, as it's guaranteed to never\n-    // conflict with the underlying cache, and it cannot have pruned entries (as it contains full)\n-    // transactions. First checking the underlying cache risks returning a pruned entry instead.\n+    // conflict with the underlying cache, and it cannot have spent entries.\n     CTransactionRef ptx = mempool.get(outpoint.hash);\n-    if (ptx) {\n-        if (outpoint.n < ptx->vout.size()) {\n-            coin = Coin(ptx->vout[outpoint.n], MEMPOOL_HEIGHT, false);\n-            return true;\n-        } else {\n-            return false;\n-        }\n+\n+    // Check the underlying CoinsView.\n+    if (!ptx) return base->GetCoin(outpoint, coin);\n+\n+    // \"Create\" a Coin from a mempool transaction output.\n+    if (outpoint.n < ptx->vout.size()) {\n+        coin = Coin(ptx->vout[outpoint.n], MEMPOOL_HEIGHT, false);\n+        return true;\n+    }\n+    return false;\n+}\n+\n+void CCoinsViewMemPool::AddPackageTransaction(const CTransactionRef& tx) {\n+    package_txids.insert(tx->GetHash());\n+    // Coins spent by this transaction\n+    for (auto input : tx->vin) {\n+        Coin spent_coin;\n+        GetCoin(input.prevout, spent_coin);\n+        cache_package_remove.emplace(input.prevout, spent_coin);\n+    }\n+    // Coins added by this transaction\n+    for (unsigned int i = 0; i < tx->vout.size(); ++i) {\n+        cache_package_add.emplace(COutPoint(tx->GetHash(), i), Coin(tx->vout[i], MEMPOOL_HEIGHT, tx->IsCoinBase()));",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 53,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "2fac0136138012ae26c8e12ef77e9486ad5cd831",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Presumably `tx->IsCoinBase()` will always be false here? We can't accept coinbase transactions into our mempool.",
      "created_at": "2021-02-01T14:30:48Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567867414",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567867414"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 948,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567868462",
      "pull_request_review_id": 580388483,
      "id": 567868462,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Nzg2ODQ2Mg==",
      "diff_hunk": "@@ -880,15 +880,28 @@ class CTxMemPool\n  * It also allows you to sign a double-spend directly in\n  * signrawtransactionwithkey and signrawtransactionwithwallet,\n  * as long as the conflicting transaction is not yet confirmed.\n+ * It can also serve as temporary scratch space for some set\n+ * of transactions (i.e. as a member of MemPoolAccept to validate\n+ * packages) and tracks the Coins added and removed by them.\n  */\n class CCoinsViewMemPool : public CCoinsViewBacked\n {\n protected:\n     const CTxMemPool& mempool;\n+    std::map<COutPoint, Coin> cache_package_add;\n+    std::map<COutPoint, Coin> cache_package_remove;\n+    std::set<uint256> package_txids;\n \n public:\n     CCoinsViewMemPool(CCoinsView* baseIn, const CTxMemPool& mempoolIn);\n-    bool GetCoin(const COutPoint &outpoint, Coin &coin) const override;\n+    bool GetCoin(const COutPoint& outpoint, Coin& coin) const override;\n+    void AddPackageTransaction(const CTransactionRef& tx);\n+    bool PackageContains(uint256 txid) const {\n+        return package_txids.count(txid) != 0;\n+    }",
      "path": "src/txmempool.h",
      "position": null,
      "original_position": 23,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "2fac0136138012ae26c8e12ef77e9486ad5cd831",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It looks like this (and by extension, `package_txids`) is unused.",
      "created_at": "2021-02-01T14:32:24Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567868462",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567868462"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": 899,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 901,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567869882",
      "pull_request_review_id": 580388483,
      "id": 567869882,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Nzg2OTg4Mg==",
      "diff_hunk": "@@ -880,15 +880,28 @@ class CTxMemPool\n  * It also allows you to sign a double-spend directly in\n  * signrawtransactionwithkey and signrawtransactionwithwallet,\n  * as long as the conflicting transaction is not yet confirmed.\n+ * It can also serve as temporary scratch space for some set\n+ * of transactions (i.e. as a member of MemPoolAccept to validate\n+ * packages) and tracks the Coins added and removed by them.\n  */\n class CCoinsViewMemPool : public CCoinsViewBacked\n {\n protected:\n     const CTxMemPool& mempool;\n+    std::map<COutPoint, Coin> cache_package_add;",
      "path": "src/txmempool.h",
      "position": null,
      "original_position": 12,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "2fac0136138012ae26c8e12ef77e9486ad5cd831",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "What's the reason for having two maps here? Why not just keep one, add to it when a new coin is created and remove from it when the coin is spent?",
      "created_at": "2021-02-01T14:34:17Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567869882",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567869882"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 891,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567875231",
      "pull_request_review_id": 580388483,
      "id": 567875231,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Nzg3NTIzMQ==",
      "diff_hunk": "@@ -641,6 +653,14 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n \n     LockPoints lp;\n     m_view.SetBackend(m_viewmempool);\n+    m_viewmempool.SetBackend(::ChainstateActive().CoinsTip());",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 139,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "2fac0136138012ae26c8e12ef77e9486ad5cd831",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It seems a bit odd that the first time `PreChecks()` is called, we're calling `SetBackend()` when the backend is already set in the constructor for `MemPoolAccept`, and that we repeatedly call `m_view.SetBackend(m_viewmempool)`\r\n\r\nI suggest that in `MemPoolAccept::MemPoolAccept()`:\r\n\r\n- set `m_viewmempool` to be backed by `m_dummy`\r\n- set `m_view` to be backed by `m_viewmempool`\r\n\r\nand then here, remove the `m_view.SetBackend(m_viewmempool)` call.",
      "created_at": "2021-02-01T14:41:34Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567875231",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567875231"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 656,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567887448",
      "pull_request_review_id": 580388483,
      "id": 567887448,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Nzg4NzQ0OA==",
      "diff_hunk": "@@ -671,25 +691,20 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     // we have all inputs cached now, so switch back to dummy (to protect\n     // against bugs where we pull more inputs from disk that miss being added\n     // to coins_to_uncache)\n-    m_view.SetBackend(m_dummy);\n+    m_viewmempool.SetBackend(m_dummy);\n \n     // Only accept BIP68 sequence locked transactions that can be mined in the next\n     // block; we don't want our mempool filled up with transactions that can't\n-    // be mined yet.\n-    // Must keep pool.cs for this unless we change CheckSequenceLocks to take a\n-    // CoinsViewCache instead of create its own\n-    if (!CheckSequenceLocks(m_pool, tx, STANDARD_LOCKTIME_VERIFY_FLAGS, &lp))\n+    // be mined yet. Must keep pool.cs because this uses a CCoinsViewMemPool.",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 163,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "2fac0136138012ae26c8e12ef77e9486ad5cd831",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think this whole comment about \"must keep pool.cs\" is obsolete, since `pool.cs` is kept throughout the `MemPoolAccept` run.",
      "created_at": "2021-02-01T14:57:05Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567887448",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567887448"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 698,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567911483",
      "pull_request_review_id": 580468003,
      "id": 567911483,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzkxMTQ4Mw==",
      "diff_hunk": "@@ -922,60 +924,77 @@ static RPCHelpMan testmempoolaccept()\n         UniValueType(), // VNUM or VSTR, checked inside AmountFromValue()\n     });\n \n-    if (request.params[0].get_array().size() != 1) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array must contain exactly one raw transaction for now\");\n-    }\n-\n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_array()[0].get_str())) {\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n-    }\n-    CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-\n+    const UniValue raw_transactions = request.params[0].get_array();\n     const CFeeRate max_raw_tx_fee_rate = request.params[1].isNull() ?\n                                              DEFAULT_MAX_RAW_TX_FEE_RATE :\n                                              CFeeRate(AmountFromValue(request.params[1]));\n \n     CTxMemPool& mempool = EnsureMemPool(request.context);\n-    int64_t virtual_size = GetVirtualTransactionSize(*tx);\n-    CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n+    std::vector<CTransactionRef> txns;\n+\n+    for (unsigned int i = 0; i < raw_transactions.size(); ++i) {\n+        CMutableTransaction mtx;\n+        if (!DecodeHexTx(mtx, raw_transactions[i].get_str())) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n+        }\n+        txns.emplace_back(MakeTransactionRef(std::move(mtx)));\n+    }\n+\n+    std::vector<MempoolAcceptResult> validation_results;\n+    if (txns.size() == 1) {\n+        validation_results.emplace_back(WITH_LOCK(cs_main,\n+            return AcceptToMemoryPool(mempool, txns[0], false /* bypass_limits */, true /* test_accept */)));\n+    } else {\n+        validation_results = WITH_LOCK(cs_main, return ProcessNewPackage(mempool, txns, true));\n+    }\n+\n+    auto tx_accepted = [](MempoolAcceptResult& res) { return res.m_accepted; };\n+    const bool all_valid = std::all_of(validation_results.begin(), validation_results.end(), tx_accepted);\n+    // ProcessNewPackage should return a MempoolAcceptResult per transaction\n+    // or exactly 1 for the first error that occurs.\n+    CHECK_NONFATAL(all_valid || validation_results.size() == 1);\n+\n+    // TODO: Report absurd fees for packages.\n \n     UniValue result(UniValue::VARR);\n-    UniValue result_0(UniValue::VOBJ);\n-    result_0.pushKV(\"txid\", tx->GetHash().GetHex());\n-    result_0.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n-\n-    MempoolAcceptResult accept_result = WITH_LOCK(cs_main,\n-\t\t    return AcceptToMemoryPool(mempool, std::move(tx), false /* bypass_limits */, true /* test_accept */));\n-    const bool test_accept_res = accept_result.m_accepted;\n-\n-    // Only return the fee and vsize if the transaction would pass ATMP.\n-    // These can be used to calculate the feerate.\n-    if (test_accept_res) {\n-        const CAmount fee = accept_result.m_base_fees.value();\n-        // Check that fee does not exceed maximum fee\n-        if (max_raw_tx_fee && fee > max_raw_tx_fee) {\n-            result_0.pushKV(\"allowed\", false);\n-            result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n-            result.push_back(std::move(result_0));\n-            return result;\n+    if (all_valid) {\n+        for (unsigned int i = 0; i < validation_results.size(); ++i) {\n+            UniValue result_inner(UniValue::VOBJ);\n+            const CTransaction tx = *txns[i];\n+            result_inner.pushKV(\"txid\", tx.GetHash().GetHex());\n+            result_inner.pushKV(\"wtxid\", tx.GetWitnessHash().GetHex());\n+\n+            const CAmount fee = validation_results[i].m_base_fees.value();\n+            const int64_t virtual_size = GetVirtualTransactionSize(tx);\n+            const CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n+            // Check that fee does not exceed maximum fee\n+            if (max_raw_tx_fee && fee > max_raw_tx_fee) {\n+                result_inner.pushKV(\"allowed\", false);\n+                result_inner.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n+                result_inner.push_back(std::move(result_inner));",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 101,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "048ef0a7e62cca10c588b451c9060e7846ac398b",
      "in_reply_to_id": 567226540,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "woah o.O nice catch. I should add a test for absurd fees in package 😅 ",
      "created_at": "2021-02-01T15:27:46Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567911483",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567911483"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 974,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567916643",
      "pull_request_review_id": 580474837,
      "id": 567916643,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzkxNjY0Mw==",
      "diff_hunk": "@@ -189,12 +189,38 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/**\n+* Validation result for a single transaction mempool acceptance.\n+* When m_accepted = true, m_replaced_transactions contains a list\n+* of replaced transactions and m_base_fees contains the tx fees.\n+*/\n+struct MempoolAcceptResult {",
      "path": "src/validation.h",
      "position": 11,
      "original_position": 31,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "b76910ebd4d8a07534e145c498c7f7d0ce297ccd",
      "in_reply_to_id": 567223619,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah I'm mostly trying to replicate the current usage, which is:\r\n1. ATMP returns a boolean. we check that first. (equivalent = `m_accepted`)\r\n2. if the boolean is false, we care about the TxValidationState `state`. I'm not sure if `state.IsValid()` is ever true when the boolean is false, but there is a [code path](https://github.com/bitcoin/bitcoin/blob/2c0fc856a6b0c82c5dddbbaee417171577514507/src/node/transaction.cpp#L24) for it, so I don't want to try to change it in a refactor.\r\n3. If boolean true, we sometimes look at fees and stuff.",
      "created_at": "2021-02-01T15:34:14Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567916643",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567916643"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 172,
      "original_line": 172,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567918360",
      "pull_request_review_id": 580477162,
      "id": 567918360,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzkxODM2MA==",
      "diff_hunk": "@@ -0,0 +1,193 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"RPCs that handle raw transaction packages.\"\"\"\n+\n+from decimal import Decimal\n+from io import BytesIO\n+\n+from test_framework.address import ADDRESS_BCRT1_P2WSH_OP_TRUE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    BIP125_SEQUENCE_NUMBER,\n+    COIN,\n+    CTransaction,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+    hex_str_to_bytes,\n+)\n+\n+class RPCPackagesTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.privkeys = [node.get_deterministic_priv_key().key]\n+        self.address = node.get_deterministic_priv_key().address\n+        self.coins = []\n+        # The last 100 coinbase transactions are premature\n+        for b in node.generatetoaddress(120, self.address)[:20]:",
      "path": "test/functional/rpc_packages.py",
      "position": null,
      "original_position": 34,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "2fac0136138012ae26c8e12ef77e9486ad5cd831",
      "in_reply_to_id": 567471786,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I want to generate to deterministic address so I don't need to use wallet",
      "created_at": "2021-02-01T15:36:24Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567918360",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567918360"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 39,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567928002",
      "pull_request_review_id": 580489635,
      "id": 567928002,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzkyODAwMg==",
      "diff_hunk": "@@ -189,12 +189,38 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/**\n+* Validation result for a single transaction mempool acceptance.\n+* When m_accepted = true, m_replaced_transactions contains a list\n+* of replaced transactions and m_base_fees contains the tx fees.\n+*/\n+struct MempoolAcceptResult {\n+    bool m_accepted;\n+    TxValidationState m_state;\n+\n+    // Valid when m_accepted = true\n+    std::optional<std::list<CTransactionRef>> m_replaced_transactions;",
      "path": "src/validation.h",
      "position": null,
      "original_position": 36,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "b76910ebd4d8a07534e145c498c7f7d0ce297ccd",
      "in_reply_to_id": 567222730,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "We had a short discussion about it [here](https://github.com/bitcoin/bitcoin/pull/20833#discussion_r557185885). I think the main idea is to distinguish between a meaningless `fee`/`replaced_transactions` and a 0/empty one. It is \"guarded\" but technically the caller could still access them 😅 don't want them to do that by accident.",
      "created_at": "2021-02-01T15:48:00Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567928002",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567928002"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 199,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567938951",
      "pull_request_review_id": 580388483,
      "id": 567938951,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzkzODk1MQ==",
      "diff_hunk": "@@ -1029,46 +1041,86 @@ bool MemPoolAccept::Finalize(ATMPArgs& args, Workspace& ws)\n     return true;\n }\n \n-bool MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n+MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n {\n     AssertLockHeld(cs_main);\n     LOCK(m_pool.cs); // mempool \"read lock\" (held through GetMainSignals().TransactionAddedToMempool())\n \n     Workspace workspace(ptx);\n \n-    if (!PreChecks(args, workspace)) return false;\n+    if (!PreChecks(args, workspace)) return MempoolAcceptResult(workspace.m_state, workspace.m_ptx);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, workspace, txdata)) return false;\n+    if (!PolicyScriptChecks(args, workspace, txdata)) return MempoolAcceptResult(workspace.m_state, workspace.m_ptx);\n \n-    if (!ConsensusScriptChecks(args, workspace, txdata)) return false;\n+    if (!ConsensusScriptChecks(args, workspace, txdata)) return MempoolAcceptResult(workspace.m_state, workspace.m_ptx);\n \n     // Tx was accepted, but not added\n-    if (args.m_test_accept) return true;\n+    if (args.m_test_accept) {\n+        return MempoolAcceptResult(workspace.m_state, std::move(workspace.m_replaced_transactions), workspace.m_base_fees);\n+    }\n \n-    if (!Finalize(args, workspace)) return false;\n+    if (!Finalize(args, workspace)) return MempoolAcceptResult(workspace.m_state, workspace.m_ptx);\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return true;\n+    return MempoolAcceptResult(workspace.m_state, std::move(workspace.m_replaced_transactions), workspace.m_base_fees);\n+}\n+\n+std::vector<MempoolAcceptResult> MemPoolAccept::AcceptMultipleTransactions(std::vector<CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    std::vector<Workspace> workspaces{};\n+    workspaces.reserve(txns.size());\n+    std::transform(txns.begin(), txns.end(), std::back_inserter(workspaces), [](CTransactionRef& tx) {\n+        return Workspace(tx);\n+    });\n+\n+    LOCK(m_pool.cs);\n+    // Do all PreChecks first and fail fast to avoid running expensive script\n+    // checks when unnecessary.\n+    for (unsigned int i = 0; i < txns.size(); ++i) {\n+        Workspace& workspace = workspaces[i];\n+        if (!PreChecks(args, workspace)) {\n+            return std::vector<MempoolAcceptResult> { MempoolAcceptResult(workspace.m_state, workspace.m_ptx) };\n+        }\n+        m_viewmempool.AddPackageTransaction(txns[i]);\n+    }\n+\n+    // TODO: Enforce package-level feerate and other policies before script checks.\n+    for (unsigned int i = 0; i < txns.size(); ++i) {\n+        PrecomputedTransactionData txdata;\n+        Workspace& workspace = workspaces[i];\n+\n+        if (!PolicyScriptChecks(args, workspace, txdata)) {\n+            return std::vector<MempoolAcceptResult> { MempoolAcceptResult(workspace.m_state, workspace.m_ptx) };\n+        }\n+    }",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 303,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "2fac0136138012ae26c8e12ef77e9486ad5cd831",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Consider using range based loops here:\r\n\r\n```suggestion\r\n    for (Workspace& ws : workspaces) {\r\n        if (!PreChecks(args, ws)) {\r\n            return std::vector<MempoolAcceptResult> { MempoolAcceptResult(ws.m_state, ws.m_ptx) };\r\n        }\r\n        m_viewmempool.AddPackageTransaction(ws.m_ptx);\r\n    }\r\n\r\n    // TODO: Enforce package-level feerate and other policies before script checks.\r\n    for (Workspace& ws : workspaces) {\r\n        PrecomputedTransactionData txdata;\r\n\r\n        if (!PolicyScriptChecks(args, ws, txdata)) {\r\n            return std::vector<MempoolAcceptResult> { MempoolAcceptResult(ws.m_state, ws.m_ptx) };\r\n        }\r\n    }\r\n```",
      "created_at": "2021-02-01T16:01:12Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567938951",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567938951"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": 1087,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1172,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567942595",
      "pull_request_review_id": 580388483,
      "id": 567942595,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Nzk0MjU5NQ==",
      "diff_hunk": "@@ -1080,15 +1132,34 @@ static bool AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPo\n     // After we've (potentially) uncached entries, ensure our coins cache is still within its size limits\n     BlockValidationState state_dummy;\n     ::ChainstateActive().FlushStateToDisk(chainparams, state_dummy, FlushStateMode::PERIODIC);\n-    return res;\n+    return result;\n+}\n+\n+MempoolAcceptResult AcceptToMemoryPool(CTxMemPool& pool, const CTransactionRef &tx, bool bypass_limits, bool test_accept)\n+{\n+    const CChainParams& chainparams = Params();\n+    return AcceptToMemoryPoolWithTime(chainparams, pool, tx, GetTime(), bypass_limits, test_accept);\n }\n \n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept, CAmount* fee_out)\n+std::vector<MempoolAcceptResult> ProcessNewPackage(CTxMemPool& pool, std::vector<CTransactionRef>& txns, bool test_accept)\n {\n+    AssertLockHeld(cs_main);\n+    assert(test_accept); // Only allow package accept dry-runs (testmempoolaccept RPC).\n+\n     const CChainParams& chainparams = Params();\n-    return AcceptToMemoryPoolWithTime(chainparams, pool, state, tx, GetTime(), plTxnReplaced, bypass_limits, test_accept, fee_out);\n+    std::vector<COutPoint> coins_to_uncache;\n+    MemPoolAccept::ATMPArgs args { chainparams, GetTime(), false, coins_to_uncache, test_accept };",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 358,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "2fac0136138012ae26c8e12ef77e9486ad5cd831",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No need for the local temporary `chainparams`:\r\n\r\n```suggestion\r\n    MemPoolAccept::ATMPArgs args { Params(), GetTime(), false, coins_to_uncache, test_accept };\r\n```\r\n\r\nSame goes for `chainparams` var in `AcceptToMemoryPool()` if you want to change it.",
      "created_at": "2021-02-01T16:05:55Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567942595",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567942595"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1315,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567952639",
      "pull_request_review_id": 580388483,
      "id": 567952639,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Nzk1MjYzOQ==",
      "diff_hunk": "@@ -922,67 +924,77 @@ static RPCHelpMan testmempoolaccept()\n         UniValueType(), // VNUM or VSTR, checked inside AmountFromValue()\n     });\n \n-    if (request.params[0].get_array().size() != 1) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array must contain exactly one raw transaction for now\");\n-    }\n-\n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_array()[0].get_str())) {\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n-    }\n-    CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-\n+    const UniValue raw_transactions = request.params[0].get_array();\n     const CFeeRate max_raw_tx_fee_rate = request.params[1].isNull() ?\n                                              DEFAULT_MAX_RAW_TX_FEE_RATE :\n                                              CFeeRate(AmountFromValue(request.params[1]));\n \n     CTxMemPool& mempool = EnsureMemPool(request.context);\n-    int64_t virtual_size = GetVirtualTransactionSize(*tx);\n-    CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n-\n-    UniValue result(UniValue::VARR);\n-    UniValue result_0(UniValue::VOBJ);\n-    result_0.pushKV(\"txid\", tx->GetHash().GetHex());\n-    result_0.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n+    std::vector<CTransactionRef> txns;\n \n-    TxValidationState state;\n-    bool test_accept_res;\n-    CAmount fee{0};\n-    {\n-        LOCK(cs_main);\n-        test_accept_res = AcceptToMemoryPool(mempool, state, std::move(tx),\n-            nullptr /* plTxnReplaced */, false /* bypass_limits */, /* test_accept */ true, &fee);\n+    for (unsigned int i = 0; i < raw_transactions.size(); ++i) {\n+        CMutableTransaction mtx;\n+        if (!DecodeHexTx(mtx, raw_transactions[i].get_str())) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n+        }\n+        txns.emplace_back(MakeTransactionRef(std::move(mtx)));\n     }\n \n-    // Check that fee does not exceed maximum fee\n-    if (test_accept_res && max_raw_tx_fee && fee > max_raw_tx_fee) {\n-        result_0.pushKV(\"allowed\", false);\n-        result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n-        result.push_back(std::move(result_0));\n-        return result;\n+    std::vector<MempoolAcceptResult> validation_results;\n+    if (txns.size() == 1) {\n+        validation_results.emplace_back(WITH_LOCK(cs_main,\n+            return AcceptToMemoryPool(mempool, txns[0], false /* bypass_limits */, true /* test_accept */)));\n+    } else {\n+        validation_results = WITH_LOCK(cs_main, return ProcessNewPackage(mempool, txns, true));\n     }\n-    result_0.pushKV(\"allowed\", test_accept_res);\n \n-    // Only return the fee and vsize if the transaction would pass ATMP.\n-    // These can be used to calculate the feerate.\n-    if (test_accept_res) {\n-        result_0.pushKV(\"vsize\", virtual_size);\n-        UniValue fees(UniValue::VOBJ);\n-        fees.pushKV(\"base\", ValueFromAmount(fee));\n-        result_0.pushKV(\"fees\", fees);\n-    } else {\n-        if (state.IsInvalid()) {\n-            if (state.GetResult() == TxValidationResult::TX_MISSING_INPUTS) {\n-                result_0.pushKV(\"reject-reason\", \"missing-inputs\");\n+    auto tx_accepted = [](MempoolAcceptResult& res) { return res.m_accepted; };\n+    const bool all_valid = std::all_of(validation_results.begin(), validation_results.end(), tx_accepted);\n+    // ProcessNewPackage should return a MempoolAcceptResult per transaction\n+    // or exactly 1 for the first error that occurs.\n+    CHECK_NONFATAL(all_valid || validation_results.size() == 1);\n+\n+    // TODO: Report absurd fees for packages.\n+\n+    UniValue result(UniValue::VARR);\n+    if (all_valid) {\n+        for (unsigned int i = 0; i < validation_results.size(); ++i) {\n+            UniValue result_inner(UniValue::VOBJ);\n+            const CTransaction tx = *txns[i];\n+            result_inner.pushKV(\"txid\", tx.GetHash().GetHex());\n+            result_inner.pushKV(\"wtxid\", tx.GetWitnessHash().GetHex());\n+\n+            const CAmount fee = validation_results[i].m_base_fees.value();\n+            const int64_t virtual_size = GetVirtualTransactionSize(tx);\n+            const CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n+            // Check that fee does not exceed maximum fee\n+            if (max_raw_tx_fee && fee > max_raw_tx_fee) {\n+                result_inner.pushKV(\"allowed\", false);\n+                result_inner.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n+                result_inner.push_back(std::move(result_inner));\n             } else {\n-                result_0.pushKV(\"reject-reason\", strprintf(\"%s\", state.GetRejectReason()));\n+                result_inner.pushKV(\"allowed\", true);\n+                result_inner.pushKV(\"vsize\", virtual_size);\n+                UniValue fees(UniValue::VOBJ);\n+                fees.pushKV(\"base\", ValueFromAmount(fee));\n+                result_inner.pushKV(\"fees\", fees);\n             }\n+            result.push_back(std::move(result_inner));\n+        }\n+    } else {\n+        Assume(validation_results[0].m_failed_ptx);\n+        UniValue result_0(UniValue::VOBJ);\n+        result_0.pushKV(\"txid\", validation_results[0].m_failed_ptx->GetHash().GetHex());\n+        result_0.pushKV(\"wtxid\", validation_results[0].m_failed_ptx->GetWitnessHash().GetHex());",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 128,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "2fac0136138012ae26c8e12ef77e9486ad5cd831",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm not sure that I like the interface of passing back a CTransactionRef just for this failure case. I wonder if we should:\r\n\r\n- allow `m_accepted` to be tri-state {accepted, failed, not_fully_validated}. That can be achieved with a `std::optional<bool>`\r\n- return a `MempoolAcceptResult` for all transactions in the package where either:\r\n  - all are success\r\n  - one is fail and the rest are not_fully_validated\r\n- work out the txid of the failing transaction from its index in the vector.\r\n\r\nWhat do you think?",
      "created_at": "2021-02-01T16:18:26Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567952639",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567952639"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": 987,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 988,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567998921",
      "pull_request_review_id": 580583759,
      "id": 567998921,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Nzk5ODkyMQ==",
      "diff_hunk": "@@ -474,11 +481,13 @@ class MemPoolAccept\n          */\n         std::vector<COutPoint>& m_coins_to_uncache;",
      "path": "src/validation.cpp",
      "position": 55,
      "original_position": 67,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "2fac0136138012ae26c8e12ef77e9486ad5cd831",
      "in_reply_to_id": 567856457,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, I don't like it either. The lifetime of `Workspace` ends when `MemPoolAccept::AcceptSingleTransaction()` returns, but the coins in `coins_to_uncache` are uncached in ATMP afterward. If it's appropriate to do coin-uncaching inside `MemPoolAccept::Accept()` functions, then we can move it?",
      "created_at": "2021-02-01T17:17:42Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567998921",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567998921"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 473,
      "original_line": 473,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568003551",
      "pull_request_review_id": 580589882,
      "id": 568003551,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODAwMzU1MQ==",
      "diff_hunk": "@@ -880,15 +880,28 @@ class CTxMemPool\n  * It also allows you to sign a double-spend directly in\n  * signrawtransactionwithkey and signrawtransactionwithwallet,\n  * as long as the conflicting transaction is not yet confirmed.\n+ * It can also serve as temporary scratch space for some set\n+ * of transactions (i.e. as a member of MemPoolAccept to validate\n+ * packages) and tracks the Coins added and removed by them.\n  */\n class CCoinsViewMemPool : public CCoinsViewBacked\n {\n protected:\n     const CTxMemPool& mempool;\n+    std::map<COutPoint, Coin> cache_package_add;",
      "path": "src/txmempool.h",
      "position": null,
      "original_position": 12,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "2fac0136138012ae26c8e12ef77e9486ad5cd831",
      "in_reply_to_id": 567869882,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "We wouldn't be able to distinguish between a `missing-inputs` and a `conflict-in-package`. Perhaps that's desirable, but I felt this was simpler?",
      "created_at": "2021-02-01T17:24:24Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r568003551",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568003551"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 891,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568003927",
      "pull_request_review_id": 580590426,
      "id": 568003927,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODAwMzkyNw==",
      "diff_hunk": "@@ -641,6 +653,14 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n \n     LockPoints lp;\n     m_view.SetBackend(m_viewmempool);\n+    m_viewmempool.SetBackend(::ChainstateActive().CoinsTip());",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 139,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "2fac0136138012ae26c8e12ef77e9486ad5cd831",
      "in_reply_to_id": 567875231,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Agreed 🧠 will update",
      "created_at": "2021-02-01T17:25:01Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r568003927",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568003927"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 656,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568010215",
      "pull_request_review_id": 580598683,
      "id": 568010215,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODAxMDIxNQ==",
      "diff_hunk": "@@ -474,11 +481,13 @@ class MemPoolAccept\n          */\n         std::vector<COutPoint>& m_coins_to_uncache;",
      "path": "src/validation.cpp",
      "position": 55,
      "original_position": 67,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "2fac0136138012ae26c8e12ef77e9486ad5cd831",
      "in_reply_to_id": 567856457,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Perhaps they could be uncached in `MemPoolAccept`'s destructor? That's similar to an RAII pattern where the object releases any resources as it goes out of scope.\r\n\r\nI don't think this needs to be done as part of this PR. Could be a follow up if it sounds like an improvement to you.",
      "created_at": "2021-02-01T17:34:12Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r568010215",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568010215"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 473,
      "original_line": 473,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568010841",
      "pull_request_review_id": 580599512,
      "id": 568010841,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODAxMDg0MQ==",
      "diff_hunk": "@@ -880,15 +880,28 @@ class CTxMemPool\n  * It also allows you to sign a double-spend directly in\n  * signrawtransactionwithkey and signrawtransactionwithwallet,\n  * as long as the conflicting transaction is not yet confirmed.\n+ * It can also serve as temporary scratch space for some set\n+ * of transactions (i.e. as a member of MemPoolAccept to validate\n+ * packages) and tracks the Coins added and removed by them.\n  */\n class CCoinsViewMemPool : public CCoinsViewBacked\n {\n protected:\n     const CTxMemPool& mempool;\n+    std::map<COutPoint, Coin> cache_package_add;",
      "path": "src/txmempool.h",
      "position": null,
      "original_position": 12,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "2fac0136138012ae26c8e12ef77e9486ad5cd831",
      "in_reply_to_id": 567869882,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ah, great point. Maybe add a code comment to say that?",
      "created_at": "2021-02-01T17:35:11Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r568010841",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568010841"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 891,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568228020",
      "pull_request_review_id": 580876636,
      "id": 568228020,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODIyODAyMA==",
      "diff_hunk": "@@ -474,11 +481,13 @@ class MemPoolAccept\n          */\n         std::vector<COutPoint>& m_coins_to_uncache;",
      "path": "src/validation.cpp",
      "position": 55,
      "original_position": 67,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "2fac0136138012ae26c8e12ef77e9486ad5cd831",
      "in_reply_to_id": 567856457,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah, maybe for a future PR 🤔 would be nice. The only complication is that we only uncache if the validation failed, so `MemPoolAccept` would need to know that when it's destructing...",
      "created_at": "2021-02-02T00:04:51Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r568228020",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568228020"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 473,
      "original_line": 473,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568246712",
      "pull_request_review_id": 580898285,
      "id": 568246712,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODI0NjcxMg==",
      "diff_hunk": "@@ -905,19 +905,48 @@ bool CTxMemPool::HasNoInputsOf(const CTransaction &tx) const\n CCoinsViewMemPool::CCoinsViewMemPool(CCoinsView* baseIn, const CTxMemPool& mempoolIn) : CCoinsViewBacked(baseIn), mempool(mempoolIn) { }\n \n bool CCoinsViewMemPool::GetCoin(const COutPoint &outpoint, Coin &coin) const {\n+    // Check to see if the inputs are spent by a tx being considered for a package.\n+    // It's possible that a package spends entries in the mempool, and this would\n+    // only be reflected in the cache_package_remove.\n+    if (auto it = cache_package_remove.find(outpoint); it != cache_package_remove.end()) {\n+        coin = it->second;\n+        return false;\n+    }\n+\n+    // Check to see if the inputs are in a tx being considered for a package.\n+    // These Coins would not be available in the mempool or underlying CoinsView.\n+    if (auto it = cache_package_add.find(outpoint); it != cache_package_add.end()) {\n+        coin = it->second;\n+        return true;\n+    }\n+\n     // If an entry in the mempool exists, always return that one, as it's guaranteed to never\n-    // conflict with the underlying cache, and it cannot have pruned entries (as it contains full)\n-    // transactions. First checking the underlying cache risks returning a pruned entry instead.\n+    // conflict with the underlying cache, and it cannot have spent entries.\n     CTransactionRef ptx = mempool.get(outpoint.hash);\n-    if (ptx) {\n-        if (outpoint.n < ptx->vout.size()) {\n-            coin = Coin(ptx->vout[outpoint.n], MEMPOOL_HEIGHT, false);\n-            return true;\n-        } else {\n-            return false;\n-        }\n+\n+    // Check the underlying CoinsView.\n+    if (!ptx) return base->GetCoin(outpoint, coin);\n+\n+    // \"Create\" a Coin from a mempool transaction output.\n+    if (outpoint.n < ptx->vout.size()) {\n+        coin = Coin(ptx->vout[outpoint.n], MEMPOOL_HEIGHT, false);\n+        return true;\n+    }\n+    return false;\n+}\n+\n+void CCoinsViewMemPool::AddPackageTransaction(const CTransactionRef& tx) {\n+    package_txids.insert(tx->GetHash());\n+    // Coins spent by this transaction\n+    for (auto input : tx->vin) {\n+        Coin spent_coin;\n+        GetCoin(input.prevout, spent_coin);",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 48,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "17ca2d8e72bc5d9249e4a01a2dbc2bb362dbd9d8",
      "in_reply_to_id": 567475382,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You're right, I'll add an `Assume()` so we get a debug error if it's spent.",
      "created_at": "2021-02-02T00:52:24Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r568246712",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568246712"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 943,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/585817249",
      "pull_request_review_id": 602147210,
      "id": 585817249,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTgxNzI0OQ==",
      "diff_hunk": "@@ -28,7 +28,8 @@ struct MinerTestingSetup : public TestingSetup {\n     void TestPackageSelection(const CChainParams& chainparams, const CScript& scriptPubKey, const std::vector<CTransactionRef>& txFirst) EXCLUSIVE_LOCKS_REQUIRED(::cs_main, m_node.mempool->cs);\n     bool TestSequenceLocks(const CTransaction& tx, int flags) EXCLUSIVE_LOCKS_REQUIRED(::cs_main, m_node.mempool->cs)\n     {\n-        return CheckSequenceLocks(::ChainstateActive(), *m_node.mempool, tx, flags);\n+        CCoinsViewMemPool viewMemPool(&::ChainstateActive().CoinsTip(), *m_node.mempool);",
      "path": "src/test/miner_tests.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "4b891df74160a8df0ca69ef35eedf22bf5f39a93",
      "in_reply_to_id": null,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nit: I would write mempool as a single word at this point in the lingo evolution. :)",
      "created_at": "2021-03-02T18:43:07Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r585817249",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/585817249"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 31,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/585825994",
      "pull_request_review_id": 602147210,
      "id": 585825994,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTgyNTk5NA==",
      "diff_hunk": "@@ -462,6 +462,113 @@ static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationS\n     return CheckInputScripts(tx, state, view, flags, /* cacheSigStore = */ true, /* cacheFullSciptStore = */ true, txdata);\n }\n \n+static const Coin coin_empty;",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "6bf3ff6b0514b2ba199f502efd2953afdaf428a6",
      "in_reply_to_id": null,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Optionally add an introductory comment for `coin_empty`. Perhaps `spent_coin` is more speaking.",
      "created_at": "2021-03-02T18:55:55Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r585825994",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/585825994"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 466,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/586764973",
      "pull_request_review_id": 602147210,
      "id": 586764973,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4Njc2NDk3Mw==",
      "diff_hunk": "@@ -462,6 +462,113 @@ static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationS\n     return CheckInputScripts(tx, state, view, flags, /* cacheSigStore = */ true, /* cacheFullSciptStore = */ true, txdata);\n }\n \n+static const Coin coin_empty;\n+/**\n+ * A CoinsView that adds a memory cache to another CoinsView and serves as temporary scratch space.\n+ * Used by MemPoolAccept class to validate transactions and packages before submitting to mempool.\n+ * A backend can be set to provide read access to chainstate and/or mempool coins, but writing to\n+ * the backend is disabled. Avoid using a CCoinsViewTemporary in consensus-critical paths such\n+ * as writing to the script cache. See CheckInputsFromMempoolAndCache as an example. When not being\n+ * used to validate a package (m_temp_added and m_temp_spent are empty), a CCoinsViewTemporary\n+ * behaves exactly like a CCoinsViewCache.\n+ */\n+class CCoinsViewTemporary : public CCoinsViewCache\n+{\n+protected:\n+    /**\n+    * Coins made available by transactions being validated. Tracking these allows for package\n+    * validation, since we can access transaction outputs without submitting them to mempool.\n+    */\n+    std::map<COutPoint, Coin> m_temp_added;\n+\n+    /**\n+    * Coins spent by transactions being validated. When there are multiple, we need to track these\n+    * in order to distinguish between missing/spent coins and conflicts within a package.\n+    */\n+    std::set<COutPoint> m_temp_spent;\n+\n+public:\n+\n+    CCoinsViewTemporary(CCoinsView* baseIn) : CCoinsViewCache(baseIn) {}\n+\n+    // Delete the copy constructor to prevent accidentally using it when one intends to create a\n+    // CCoinsViewTemporary on top of a base cache.\n+    CCoinsViewTemporary(const CCoinsViewTemporary &) = delete;\n+\n+    bool GetCoin(const COutPoint& outpoint, Coin& coin) const override {\n+        coin = AccessCoin(outpoint);\n+        return !coin.IsSpent();",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 39,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "6bf3ff6b0514b2ba199f502efd2953afdaf428a6",
      "in_reply_to_id": null,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Slightly surprised that the function's name is `get…` but it returns a boolean on whether the retrieval was successful. I'd kinda expect a `get…` function to return the object.",
      "created_at": "2021-03-03T20:44:04Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r586764973",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/586764973"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 485,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/586775962",
      "pull_request_review_id": 602147210,
      "id": 586775962,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4Njc3NTk2Mg==",
      "diff_hunk": "@@ -462,6 +462,113 @@ static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationS\n     return CheckInputScripts(tx, state, view, flags, /* cacheSigStore = */ true, /* cacheFullSciptStore = */ true, txdata);\n }\n \n+static const Coin coin_empty;\n+/**\n+ * A CoinsView that adds a memory cache to another CoinsView and serves as temporary scratch space.\n+ * Used by MemPoolAccept class to validate transactions and packages before submitting to mempool.\n+ * A backend can be set to provide read access to chainstate and/or mempool coins, but writing to\n+ * the backend is disabled. Avoid using a CCoinsViewTemporary in consensus-critical paths such\n+ * as writing to the script cache. See CheckInputsFromMempoolAndCache as an example. When not being\n+ * used to validate a package (m_temp_added and m_temp_spent are empty), a CCoinsViewTemporary\n+ * behaves exactly like a CCoinsViewCache.\n+ */\n+class CCoinsViewTemporary : public CCoinsViewCache\n+{\n+protected:\n+    /**\n+    * Coins made available by transactions being validated. Tracking these allows for package\n+    * validation, since we can access transaction outputs without submitting them to mempool.\n+    */\n+    std::map<COutPoint, Coin> m_temp_added;\n+\n+    /**\n+    * Coins spent by transactions being validated. When there are multiple, we need to track these\n+    * in order to distinguish between missing/spent coins and conflicts within a package.\n+    */\n+    std::set<COutPoint> m_temp_spent;\n+\n+public:\n+\n+    CCoinsViewTemporary(CCoinsView* baseIn) : CCoinsViewCache(baseIn) {}\n+\n+    // Delete the copy constructor to prevent accidentally using it when one intends to create a\n+    // CCoinsViewTemporary on top of a base cache.\n+    CCoinsViewTemporary(const CCoinsViewTemporary &) = delete;\n+\n+    bool GetCoin(const COutPoint& outpoint, Coin& coin) const override {\n+        coin = AccessCoin(outpoint);\n+        return !coin.IsSpent();\n+    }\n+\n+    const Coin& AccessCoin(const COutPoint& outpoint) const override {\n+        // Check to see if the inputs are spent by a tx being considered for a package. When a\n+        // package transaction spends coins from the mempool, it is only reflected in m_temp_spent.",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 44,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "6bf3ff6b0514b2ba199f502efd2953afdaf428a6",
      "in_reply_to_id": null,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If this is is supposed to mean that there are two conflicting transactions in the package, this could be phrased a bit more clearly. How about:\r\n\r\n\"Check if another transaction in the package has already spent the given UTXO. UTXO consumed by this package are only tracked in `m_temp_spent`.\"",
      "created_at": "2021-03-03T21:01:52Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r586775962",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/586775962"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": 504,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 506,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/586777630",
      "pull_request_review_id": 602147210,
      "id": 586777630,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4Njc3NzYzMA==",
      "diff_hunk": "@@ -462,6 +462,113 @@ static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationS\n     return CheckInputScripts(tx, state, view, flags, /* cacheSigStore = */ true, /* cacheFullSciptStore = */ true, txdata);\n }\n \n+static const Coin coin_empty;\n+/**\n+ * A CoinsView that adds a memory cache to another CoinsView and serves as temporary scratch space.\n+ * Used by MemPoolAccept class to validate transactions and packages before submitting to mempool.\n+ * A backend can be set to provide read access to chainstate and/or mempool coins, but writing to\n+ * the backend is disabled. Avoid using a CCoinsViewTemporary in consensus-critical paths such\n+ * as writing to the script cache. See CheckInputsFromMempoolAndCache as an example. When not being\n+ * used to validate a package (m_temp_added and m_temp_spent are empty), a CCoinsViewTemporary\n+ * behaves exactly like a CCoinsViewCache.\n+ */\n+class CCoinsViewTemporary : public CCoinsViewCache\n+{\n+protected:\n+    /**\n+    * Coins made available by transactions being validated. Tracking these allows for package\n+    * validation, since we can access transaction outputs without submitting them to mempool.\n+    */\n+    std::map<COutPoint, Coin> m_temp_added;\n+\n+    /**\n+    * Coins spent by transactions being validated. When there are multiple, we need to track these\n+    * in order to distinguish between missing/spent coins and conflicts within a package.\n+    */\n+    std::set<COutPoint> m_temp_spent;\n+\n+public:\n+\n+    CCoinsViewTemporary(CCoinsView* baseIn) : CCoinsViewCache(baseIn) {}\n+\n+    // Delete the copy constructor to prevent accidentally using it when one intends to create a\n+    // CCoinsViewTemporary on top of a base cache.\n+    CCoinsViewTemporary(const CCoinsViewTemporary &) = delete;\n+\n+    bool GetCoin(const COutPoint& outpoint, Coin& coin) const override {\n+        coin = AccessCoin(outpoint);\n+        return !coin.IsSpent();\n+    }\n+\n+    const Coin& AccessCoin(const COutPoint& outpoint) const override {\n+        // Check to see if the inputs are spent by a tx being considered for a package. When a\n+        // package transaction spends coins from the mempool, it is only reflected in m_temp_spent.\n+        if (m_temp_spent.count(outpoint)) {\n+            return coin_empty;\n+        }\n+\n+        // Check to see if the inputs are in a tx being considered for a package.\n+        // These Coins would not be available in the underlying CoinsView.",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 50,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "6bf3ff6b0514b2ba199f502efd2953afdaf428a6",
      "in_reply_to_id": null,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Isn't only a single package under review here? How about:\r\n\r\n\"Check whether the input was created by another transaction in the package under review.\"",
      "created_at": "2021-03-03T21:04:48Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r586777630",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/586777630"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": 510,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 496,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/586778515",
      "pull_request_review_id": 602147210,
      "id": 586778515,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4Njc3ODUxNQ==",
      "diff_hunk": "@@ -462,6 +462,113 @@ static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationS\n     return CheckInputScripts(tx, state, view, flags, /* cacheSigStore = */ true, /* cacheFullSciptStore = */ true, txdata);\n }\n \n+static const Coin coin_empty;\n+/**\n+ * A CoinsView that adds a memory cache to another CoinsView and serves as temporary scratch space.\n+ * Used by MemPoolAccept class to validate transactions and packages before submitting to mempool.\n+ * A backend can be set to provide read access to chainstate and/or mempool coins, but writing to\n+ * the backend is disabled. Avoid using a CCoinsViewTemporary in consensus-critical paths such\n+ * as writing to the script cache. See CheckInputsFromMempoolAndCache as an example. When not being\n+ * used to validate a package (m_temp_added and m_temp_spent are empty), a CCoinsViewTemporary\n+ * behaves exactly like a CCoinsViewCache.\n+ */\n+class CCoinsViewTemporary : public CCoinsViewCache\n+{\n+protected:\n+    /**\n+    * Coins made available by transactions being validated. Tracking these allows for package\n+    * validation, since we can access transaction outputs without submitting them to mempool.\n+    */\n+    std::map<COutPoint, Coin> m_temp_added;\n+\n+    /**\n+    * Coins spent by transactions being validated. When there are multiple, we need to track these\n+    * in order to distinguish between missing/spent coins and conflicts within a package.\n+    */\n+    std::set<COutPoint> m_temp_spent;\n+\n+public:\n+\n+    CCoinsViewTemporary(CCoinsView* baseIn) : CCoinsViewCache(baseIn) {}\n+\n+    // Delete the copy constructor to prevent accidentally using it when one intends to create a\n+    // CCoinsViewTemporary on top of a base cache.\n+    CCoinsViewTemporary(const CCoinsViewTemporary &) = delete;\n+\n+    bool GetCoin(const COutPoint& outpoint, Coin& coin) const override {\n+        coin = AccessCoin(outpoint);\n+        return !coin.IsSpent();\n+    }\n+\n+    const Coin& AccessCoin(const COutPoint& outpoint) const override {\n+        // Check to see if the inputs are spent by a tx being considered for a package. When a\n+        // package transaction spends coins from the mempool, it is only reflected in m_temp_spent.\n+        if (m_temp_spent.count(outpoint)) {\n+            return coin_empty;\n+        }\n+\n+        // Check to see if the inputs are in a tx being considered for a package.\n+        // These Coins would not be available in the underlying CoinsView.\n+        if (auto it = m_temp_added.find(outpoint); it != m_temp_added.end()) {\n+            assert(!it->second.IsSpent());\n+            return it->second;\n+        }\n+        return CCoinsViewCache::AccessCoin(outpoint);",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 55,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "6bf3ff6b0514b2ba199f502efd2953afdaf428a6",
      "in_reply_to_id": null,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It would make more sense to me if the names of `GetCoin` and `AccessCoin` were swapped… :confounded:",
      "created_at": "2021-03-03T21:06:24Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r586778515",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/586778515"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 501,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/587883103",
      "pull_request_review_id": 602147210,
      "id": 587883103,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4Nzg4MzEwMw==",
      "diff_hunk": "@@ -603,6 +603,9 @@ class MemPoolAccept\n     // Single transaction acceptance\n     MempoolAcceptResult AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+    // Multiple transaction acceptance\n+    std::vector<MempoolAcceptResult> AcceptMultipleTransactions(std::vector<CTransactionRef>& txns, ATMPArgs& args) EXCLUSIVE_LOCKS_REQUIRED(cs_main);",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "390574584a5798c06014ca045020b1d46e22ce31",
      "in_reply_to_id": null,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It would have helped me if this comment had stated what assumptions the transaction package underlies if any,  (e.g. whether they are all part of a connected set or not). I might have expected such assumptions to be explicitly stated in the parameter descriptions of a function in another codebase.",
      "created_at": "2021-03-04T22:47:45Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r587883103",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/587883103"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 611,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/587889697",
      "pull_request_review_id": 602147210,
      "id": 587889697,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4Nzg4OTY5Nw==",
      "diff_hunk": "@@ -1165,28 +1172,93 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n \n     Workspace ws(ptx);\n \n-    if (!PreChecks(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!PreChecks(args, ws)) return MempoolAcceptResult(*ws.m_ptx, ws.m_state);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(*ws.m_ptx, ws.m_state);\n \n-    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(*ws.m_ptx, ws.m_state);\n \n     // Tx was accepted, but not added\n     if (args.m_test_accept) {\n-        return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+        return MempoolAcceptResult(*ws.m_ptx, std::move(ws.m_replaced_transactions), ws.m_base_fees);\n     }\n \n-    if (!Finalize(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!Finalize(args, ws)) return MempoolAcceptResult(*ws.m_ptx, ws.m_state);\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+    return MempoolAcceptResult(*ws.m_ptx, std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+}\n+\n+std::vector<MempoolAcceptResult> MemPoolAccept::AcceptMultipleTransactions(std::vector<CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    std::vector<Workspace> workspaces{};\n+    const int package_size = txns.size();\n+    workspaces.reserve(package_size);\n+    std::transform(txns.begin(), txns.end(), std::back_inserter(workspaces), [](CTransactionRef& tx) {\n+        return Workspace(tx);\n+    });\n+    std::vector<MempoolAcceptResult> results;\n+    results.reserve(package_size);\n+\n+    LOCK(m_pool.cs);\n+    // Do all PreChecks first and fail fast to avoid running expensive script checks when unnecessary.\n+    for (Workspace& ws : workspaces) {\n+        if (!PreChecks(args, ws)) {\n+            // Exit early to avoid doing pointless work. Return results in the same order as input txns.\n+            const auto failed_or_unfinished = [&, failed_ptx = ws.m_ptx](Workspace& ws) {\n+                                              return ws.m_ptx == failed_ptx\n+                                              ? MempoolAcceptResult(*ws.m_ptx, ws.m_state, /* finished */ true)\n+                                              : MempoolAcceptResult(*ws.m_ptx, ws.m_state, /* finished */ false);\n+            };\n+            std::transform(workspaces.begin(), workspaces.end(), std::back_inserter(results), failed_or_unfinished);\n+            return results;\n+        }\n+        m_view.PackageAddTransaction(ws.m_ptx);\n+    }\n+\n+    // Now that we have verified all inputs are available and there are no conflicts in the package,\n+    // clear the temporary coins (m_temp_added and m_temp_spent), otherwise script checks will error\n+    // on coins that are spent within the package.\n+    m_view.ClearTemporaryCoins();\n+\n+    for (Workspace& ws : workspaces) {\n+        PrecomputedTransactionData txdata;\n+        if (!PolicyScriptChecks(args, ws, txdata)) {\n+            // Exit early to avoid doing pointless work. Return results in the same order as input txns.\n+            CTransactionRef failed_ptx = ws.m_ptx;\n+            const auto failed_or_unfinished = [&failed_ptx](Workspace& ws) {\n+                                              return ws.m_ptx == failed_ptx\n+                                              ? MempoolAcceptResult(*ws.m_ptx, ws.m_state, /* finished */ true)\n+                                              : MempoolAcceptResult(*ws.m_ptx, ws.m_state, /* finished */ false);\n+            };\n+            auto it_curr = std::find_if(workspaces.begin(), workspaces.end(),\n+                                        [& failed_ptx](Workspace& ws) { return ws.m_ptx == failed_ptx; });\n+            // When test_accept=true, transactions that pass PolicyScriptChecks are valid because there are\n+            // no further mempool checks (passing PolicyScriptChecks implies passing ConsensusScriptChecks).\n+            std::transform(workspaces.begin(), it_curr, std::back_inserter(results), [](Workspace& ws) {\n+                           return MempoolAcceptResult(*ws.m_ptx, std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+            });\n+            std::transform(it_curr, workspaces.end(), std::back_inserter(results), failed_or_unfinished);\n+            return results;\n+        }\n+        // Add the coins back because subsequent transaction(s) in the package may need them for",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 108,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "390574584a5798c06014ca045020b1d46e22ce31",
      "in_reply_to_id": null,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This sounds like you're assuming that you're getting the transactions in topological order. If that's a requirement, it would be good to list that above as mentioned.\r\n\r\nAlso, you may want to make your API input checks as lenient as possible and a specific order does not seem necessary to me.",
      "created_at": "2021-03-04T22:56:02Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r587889697",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/587889697"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1256,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/587893955",
      "pull_request_review_id": 602147210,
      "id": 587893955,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4Nzg5Mzk1NQ==",
      "diff_hunk": "@@ -890,13 +892,15 @@ static RPCHelpMan testmempoolaccept()\n                 },\n                 RPCResult{\n                     RPCResult::Type::ARR, \"\", \"The result of the mempool acceptance test for each raw transaction in the input array.\\n\"\n-                        \"Length is exactly one for now.\",\n+                        \"Returns results for each transaction in the same order they were passed in.\\n\"\n+                        \"It is possible for transactions to not be fully validated ('allowed' unset) if an earlier transaction failed.\\n\",",
      "path": "src/rpc/rawtransaction.cpp",
      "position": 34,
      "original_position": 17,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "a3264ac359a62b6a4fb0bae8976f8a363652d934",
      "in_reply_to_id": null,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I thought this RPC was supposed to generally fail if any transactions fail.",
      "created_at": "2021-03-04T23:04:07Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r587893955",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/587893955"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 908,
      "original_line": 908,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/587905367",
      "pull_request_review_id": 602147210,
      "id": 587905367,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NzkwNTM2Nw==",
      "diff_hunk": "@@ -0,0 +1,245 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"RPCs that handle raw transaction packages.\"\"\"\n+\n+from decimal import Decimal\n+from io import BytesIO\n+\n+from test_framework.address import ADDRESS_BCRT1_P2WSH_OP_TRUE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    BIP125_SEQUENCE_NUMBER,\n+    COIN,\n+    CTransaction,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+    hex_str_to_bytes,\n+)\n+\n+class RPCPackagesTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.privkeys = [node.get_deterministic_priv_key().key]\n+        self.address = node.get_deterministic_priv_key().address\n+        self.coins = []\n+        # The last 100 coinbase transactions are premature\n+        for b in node.generatetoaddress(120, self.address)[:20]:\n+            coinbase = node.getblock(blockhash=b, verbosity=2)[\"tx\"][0]\n+            self.coins.append({\n+                \"txid\": coinbase[\"txid\"],\n+                \"amount\": coinbase[\"vout\"][0][\"value\"],\n+                \"scriptPubKey\": coinbase[\"vout\"][0][\"scriptPubKey\"],\n+            })\n+\n+        # Create some transactions that can be reused throughout the test. Never submit these to mempool.\n+        self.independent_txns_hex = []\n+        self.independent_txns_testres = []\n+        for _ in range(3):\n+            coin = self.coins.pop()\n+            rawtx = node.createrawtransaction([{\"txid\" : coin[\"txid\"], \"vout\" : 0}],\n+                {self.address : coin[\"amount\"] - Decimal(\"0.0001\")})\n+            signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n+            assert signedtx[\"complete\"]\n+            testres = node.testmempoolaccept([signedtx[\"hex\"]])\n+            assert testres[0][\"allowed\"]\n+            self.independent_txns_hex.append(signedtx[\"hex\"])\n+            # testmempoolaccept returns a list of length one, avoid creating a 2D list\n+            self.independent_txns_testres.append(testres[0])\n+\n+        self.test_independent()\n+        self.test_chain()\n+        self.test_conflicting()\n+        self.test_rbf()\n+\n+    def chain_transaction(self, parent_txid, value, parent_locking_script=None):\n+        \"\"\"Build a transaction that spends parent_txid:vout.\n+        Return tuple (CTransaction object, raw hex, scriptPub).\n+        \"\"\"\n+        node = self.nodes[0]\n+        inputs = [{\"txid\" : parent_txid, \"vout\" : 0}]\n+        outputs = {self.address : value}\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+        prevtxs = [{\n+            \"txid\": parent_txid,\n+            \"vout\": 0,\n+            \"scriptPubKey\": parent_locking_script,\n+            \"amount\": value + Decimal(\"0.0001\"),\n+        }] if parent_locking_script else None\n+        signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys, prevtxs=prevtxs)\n+        tx = CTransaction()\n+        assert signedtx[\"complete\"]\n+        tx.deserialize(BytesIO(hex_str_to_bytes(signedtx[\"hex\"])))\n+        return (tx, signedtx[\"hex\"], tx.vout[0].scriptPubKey.hex())\n+\n+    def test_independent(self):\n+        self.log.info(\"Test multiple independent transactions in a package\")\n+        node = self.nodes[0]\n+        assert_equal(self.independent_txns_testres, node.testmempoolaccept(rawtxs=self.independent_txns_hex))\n+\n+        self.log.info(\"Test a valid package with garbage inserted\")\n+        garbage_tx = node.createrawtransaction([{\"txid\": \"00\" * 32, \"vout\": 5}], {self.address: 1})\n+        tx = CTransaction()\n+        tx.deserialize(BytesIO(hex_str_to_bytes(garbage_tx)))\n+        testres_bad = node.testmempoolaccept(self.independent_txns_hex + [garbage_tx])\n+        testres_independent_ids = [{\"txid\": res[\"txid\"], \"wtxid\": res[\"wtxid\"]} for res in self.independent_txns_testres]\n+        assert_equal(testres_bad, testres_independent_ids + [\n+            {\"txid\": tx.rehash(), \"wtxid\": tx.getwtxid(), \"allowed\": False, \"reject-reason\": \"missing-inputs\"}\n+        ])\n+\n+        self.log.info(\"Check testmempoolaccept tells us when some transactions completed validation successfully\")\n+        coin = self.coins.pop()\n+        tx_bad_sig_hex = node.createrawtransaction([{\"txid\" : coin[\"txid\"], \"vout\" : 0}],\n+                                           {self.address : coin[\"amount\"] - Decimal(\"0.0001\")})\n+        tx_bad_sig = CTransaction()\n+        tx_bad_sig.deserialize(BytesIO(hex_str_to_bytes(tx_bad_sig_hex)))\n+        testres_bad_sig = node.testmempoolaccept(self.independent_txns_hex + [tx_bad_sig_hex])\n+        assert_equal(testres_bad_sig, self.independent_txns_testres + [{\n+            \"txid\": tx_bad_sig.rehash(),\n+            \"wtxid\": tx_bad_sig.getwtxid(), \"allowed\": False,\n+            \"reject-reason\": \"mandatory-script-verify-flag-failed (Operation not valid with the current stack size)\"\n+        }])\n+\n+        self.log.info(\"Check testmempoolaccept reports txns in packages that exceed max feerate\")\n+        coin = self.coins.pop()\n+        tx_high_fee_raw = node.createrawtransaction([{\"txid\" : coin[\"txid\"], \"vout\" : 0}],\n+                                           {self.address : coin[\"amount\"] - Decimal(\"0.999\")})\n+        tx_high_fee_signed = node.signrawtransactionwithkey(hexstring=tx_high_fee_raw, privkeys=self.privkeys)\n+        assert tx_high_fee_signed[\"complete\"]\n+        tx_high_fee = CTransaction()\n+        tx_high_fee.deserialize(BytesIO(hex_str_to_bytes(tx_high_fee_signed[\"hex\"])))\n+        testres_high_fee = node.testmempoolaccept([tx_high_fee_signed[\"hex\"]])\n+        assert_equal(testres_high_fee, [\n+            {\"txid\": tx_high_fee.rehash(), \"wtxid\": tx_high_fee.getwtxid(), \"allowed\": False, \"reject-reason\": \"max-fee-exceeded\"}\n+        ])\n+        testres_package_high_fee = node.testmempoolaccept(self.independent_txns_hex + [tx_high_fee_signed[\"hex\"]])\n+        assert_equal(testres_package_high_fee, self.independent_txns_testres + testres_high_fee)\n+\n+    def test_chain(self):",
      "path": "test/functional/rpc_packages.py",
      "position": 154,
      "original_position": 125,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "61d54b613d4bfbfcdd16239a73c500c5fd89ff49",
      "in_reply_to_id": null,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Optional additional tests:\r\n• parent with two distinct child transactions\r\n• child with two parent transactions",
      "created_at": "2021-03-04T23:25:25Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r587905367",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/587905367"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 154,
      "original_line": 154,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/587906781",
      "pull_request_review_id": 602147210,
      "id": 587906781,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NzkwNjc4MQ==",
      "diff_hunk": "@@ -0,0 +1,245 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"RPCs that handle raw transaction packages.\"\"\"\n+\n+from decimal import Decimal\n+from io import BytesIO\n+\n+from test_framework.address import ADDRESS_BCRT1_P2WSH_OP_TRUE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    BIP125_SEQUENCE_NUMBER,\n+    COIN,\n+    CTransaction,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+    hex_str_to_bytes,\n+)\n+\n+class RPCPackagesTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.privkeys = [node.get_deterministic_priv_key().key]\n+        self.address = node.get_deterministic_priv_key().address\n+        self.coins = []\n+        # The last 100 coinbase transactions are premature\n+        for b in node.generatetoaddress(120, self.address)[:20]:\n+            coinbase = node.getblock(blockhash=b, verbosity=2)[\"tx\"][0]\n+            self.coins.append({\n+                \"txid\": coinbase[\"txid\"],\n+                \"amount\": coinbase[\"vout\"][0][\"value\"],\n+                \"scriptPubKey\": coinbase[\"vout\"][0][\"scriptPubKey\"],\n+            })\n+\n+        # Create some transactions that can be reused throughout the test. Never submit these to mempool.\n+        self.independent_txns_hex = []\n+        self.independent_txns_testres = []\n+        for _ in range(3):\n+            coin = self.coins.pop()\n+            rawtx = node.createrawtransaction([{\"txid\" : coin[\"txid\"], \"vout\" : 0}],\n+                {self.address : coin[\"amount\"] - Decimal(\"0.0001\")})\n+            signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n+            assert signedtx[\"complete\"]\n+            testres = node.testmempoolaccept([signedtx[\"hex\"]])\n+            assert testres[0][\"allowed\"]\n+            self.independent_txns_hex.append(signedtx[\"hex\"])\n+            # testmempoolaccept returns a list of length one, avoid creating a 2D list\n+            self.independent_txns_testres.append(testres[0])\n+\n+        self.test_independent()\n+        self.test_chain()\n+        self.test_conflicting()\n+        self.test_rbf()\n+\n+    def chain_transaction(self, parent_txid, value, parent_locking_script=None):\n+        \"\"\"Build a transaction that spends parent_txid:vout.\n+        Return tuple (CTransaction object, raw hex, scriptPub).\n+        \"\"\"\n+        node = self.nodes[0]\n+        inputs = [{\"txid\" : parent_txid, \"vout\" : 0}]\n+        outputs = {self.address : value}\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+        prevtxs = [{\n+            \"txid\": parent_txid,\n+            \"vout\": 0,\n+            \"scriptPubKey\": parent_locking_script,\n+            \"amount\": value + Decimal(\"0.0001\"),\n+        }] if parent_locking_script else None\n+        signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys, prevtxs=prevtxs)\n+        tx = CTransaction()\n+        assert signedtx[\"complete\"]\n+        tx.deserialize(BytesIO(hex_str_to_bytes(signedtx[\"hex\"])))\n+        return (tx, signedtx[\"hex\"], tx.vout[0].scriptPubKey.hex())\n+\n+    def test_independent(self):",
      "path": "test/functional/rpc_packages.py",
      "position": 105,
      "original_position": 82,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "61d54b613d4bfbfcdd16239a73c500c5fd89ff49",
      "in_reply_to_id": null,
      "user": {
        "login": "Xekyo",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Xekyo",
        "html_url": "https://github.com/Xekyo",
        "followers_url": "https://api.github.com/users/Xekyo/followers",
        "following_url": "https://api.github.com/users/Xekyo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Xekyo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Xekyo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Xekyo/subscriptions",
        "organizations_url": "https://api.github.com/users/Xekyo/orgs",
        "repos_url": "https://api.github.com/users/Xekyo/repos",
        "events_url": "https://api.github.com/users/Xekyo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Xekyo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe I'm just overlooking it, but what about a valid set of independent transactions? That should be accepted now, but later fail when you require packages to consist of dependent transactions. Especially, I would be interested in seeing that the connectedness test properly recognizes two independent parent-child pairs as unconnected.",
      "created_at": "2021-03-04T23:28:27Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r587906781",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/587906781"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 105,
      "original_line": 105,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/588925773",
      "pull_request_review_id": 605784646,
      "id": 588925773,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4ODkyNTc3Mw==",
      "diff_hunk": "@@ -890,13 +892,15 @@ static RPCHelpMan testmempoolaccept()\n                 },\n                 RPCResult{\n                     RPCResult::Type::ARR, \"\", \"The result of the mempool acceptance test for each raw transaction in the input array.\\n\"\n-                        \"Length is exactly one for now.\",\n+                        \"Returns results for each transaction in the same order they were passed in.\\n\"\n+                        \"It is possible for transactions to not be fully validated ('allowed' unset) if an earlier transaction failed.\\n\",",
      "path": "src/rpc/rawtransaction.cpp",
      "position": 34,
      "original_position": 17,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "a3264ac359a62b6a4fb0bae8976f8a363652d934",
      "in_reply_to_id": 587893955,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I changed my mind on it because it seemed like the 1-if-failure API was confusing and less helpful",
      "created_at": "2021-03-06T20:14:55Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r588925773",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/588925773"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 908,
      "original_line": 908,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/589631384",
      "pull_request_review_id": 606559339,
      "id": 589631384,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4OTYzMTM4NA==",
      "diff_hunk": "@@ -462,6 +462,113 @@ static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationS\n     return CheckInputScripts(tx, state, view, flags, /* cacheSigStore = */ true, /* cacheFullSciptStore = */ true, txdata);\n }\n \n+static const Coin coin_empty;\n+/**\n+ * A CoinsView that adds a memory cache to another CoinsView and serves as temporary scratch space.\n+ * Used by MemPoolAccept class to validate transactions and packages before submitting to mempool.\n+ * A backend can be set to provide read access to chainstate and/or mempool coins, but writing to\n+ * the backend is disabled. Avoid using a CCoinsViewTemporary in consensus-critical paths such\n+ * as writing to the script cache. See CheckInputsFromMempoolAndCache as an example. When not being\n+ * used to validate a package (m_temp_added and m_temp_spent are empty), a CCoinsViewTemporary\n+ * behaves exactly like a CCoinsViewCache.\n+ */\n+class CCoinsViewTemporary : public CCoinsViewCache\n+{\n+protected:\n+    /**\n+    * Coins made available by transactions being validated. Tracking these allows for package\n+    * validation, since we can access transaction outputs without submitting them to mempool.\n+    */\n+    std::map<COutPoint, Coin> m_temp_added;\n+\n+    /**\n+    * Coins spent by transactions being validated. When there are multiple, we need to track these\n+    * in order to distinguish between missing/spent coins and conflicts within a package.\n+    */\n+    std::set<COutPoint> m_temp_spent;\n+\n+public:\n+\n+    CCoinsViewTemporary(CCoinsView* baseIn) : CCoinsViewCache(baseIn) {}\n+\n+    // Delete the copy constructor to prevent accidentally using it when one intends to create a\n+    // CCoinsViewTemporary on top of a base cache.\n+    CCoinsViewTemporary(const CCoinsViewTemporary &) = delete;\n+\n+    bool GetCoin(const COutPoint& outpoint, Coin& coin) const override {\n+        coin = AccessCoin(outpoint);\n+        return !coin.IsSpent();",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 39,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "6bf3ff6b0514b2ba199f502efd2953afdaf428a6",
      "in_reply_to_id": 586764973,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Marking as resolved because this wouldn't be a change for this PR, but yes I agree the CoinsView API is not the most aptly named :)",
      "created_at": "2021-03-08T17:58:45Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r589631384",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/589631384"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 485,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/589631544",
      "pull_request_review_id": 606559526,
      "id": 589631544,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4OTYzMTU0NA==",
      "diff_hunk": "@@ -462,6 +462,113 @@ static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationS\n     return CheckInputScripts(tx, state, view, flags, /* cacheSigStore = */ true, /* cacheFullSciptStore = */ true, txdata);\n }\n \n+static const Coin coin_empty;\n+/**\n+ * A CoinsView that adds a memory cache to another CoinsView and serves as temporary scratch space.\n+ * Used by MemPoolAccept class to validate transactions and packages before submitting to mempool.\n+ * A backend can be set to provide read access to chainstate and/or mempool coins, but writing to\n+ * the backend is disabled. Avoid using a CCoinsViewTemporary in consensus-critical paths such\n+ * as writing to the script cache. See CheckInputsFromMempoolAndCache as an example. When not being\n+ * used to validate a package (m_temp_added and m_temp_spent are empty), a CCoinsViewTemporary\n+ * behaves exactly like a CCoinsViewCache.\n+ */\n+class CCoinsViewTemporary : public CCoinsViewCache\n+{\n+protected:\n+    /**\n+    * Coins made available by transactions being validated. Tracking these allows for package\n+    * validation, since we can access transaction outputs without submitting them to mempool.\n+    */\n+    std::map<COutPoint, Coin> m_temp_added;\n+\n+    /**\n+    * Coins spent by transactions being validated. When there are multiple, we need to track these\n+    * in order to distinguish between missing/spent coins and conflicts within a package.\n+    */\n+    std::set<COutPoint> m_temp_spent;\n+\n+public:\n+\n+    CCoinsViewTemporary(CCoinsView* baseIn) : CCoinsViewCache(baseIn) {}\n+\n+    // Delete the copy constructor to prevent accidentally using it when one intends to create a\n+    // CCoinsViewTemporary on top of a base cache.\n+    CCoinsViewTemporary(const CCoinsViewTemporary &) = delete;\n+\n+    bool GetCoin(const COutPoint& outpoint, Coin& coin) const override {\n+        coin = AccessCoin(outpoint);\n+        return !coin.IsSpent();\n+    }\n+\n+    const Coin& AccessCoin(const COutPoint& outpoint) const override {\n+        // Check to see if the inputs are spent by a tx being considered for a package. When a\n+        // package transaction spends coins from the mempool, it is only reflected in m_temp_spent.\n+        if (m_temp_spent.count(outpoint)) {\n+            return coin_empty;\n+        }\n+\n+        // Check to see if the inputs are in a tx being considered for a package.\n+        // These Coins would not be available in the underlying CoinsView.\n+        if (auto it = m_temp_added.find(outpoint); it != m_temp_added.end()) {\n+            assert(!it->second.IsSpent());\n+            return it->second;\n+        }\n+        return CCoinsViewCache::AccessCoin(outpoint);",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 55,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "6bf3ff6b0514b2ba199f502efd2953afdaf428a6",
      "in_reply_to_id": 586778515,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Marking as resolved because this wouldn't be a change for this PR, but yes I agree the CoinsView API is not the most aptly named :)",
      "created_at": "2021-03-08T17:58:58Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r589631544",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/589631544"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 501,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/589653414",
      "pull_request_review_id": 606587811,
      "id": 589653414,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4OTY1MzQxNA==",
      "diff_hunk": "@@ -462,6 +462,113 @@ static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationS\n     return CheckInputScripts(tx, state, view, flags, /* cacheSigStore = */ true, /* cacheFullSciptStore = */ true, txdata);\n }\n \n+static const Coin coin_empty;\n+/**\n+ * A CoinsView that adds a memory cache to another CoinsView and serves as temporary scratch space.\n+ * Used by MemPoolAccept class to validate transactions and packages before submitting to mempool.\n+ * A backend can be set to provide read access to chainstate and/or mempool coins, but writing to\n+ * the backend is disabled. Avoid using a CCoinsViewTemporary in consensus-critical paths such\n+ * as writing to the script cache. See CheckInputsFromMempoolAndCache as an example. When not being\n+ * used to validate a package (m_temp_added and m_temp_spent are empty), a CCoinsViewTemporary\n+ * behaves exactly like a CCoinsViewCache.\n+ */\n+class CCoinsViewTemporary : public CCoinsViewCache\n+{\n+protected:\n+    /**\n+    * Coins made available by transactions being validated. Tracking these allows for package\n+    * validation, since we can access transaction outputs without submitting them to mempool.\n+    */\n+    std::map<COutPoint, Coin> m_temp_added;\n+\n+    /**\n+    * Coins spent by transactions being validated. When there are multiple, we need to track these\n+    * in order to distinguish between missing/spent coins and conflicts within a package.\n+    */\n+    std::set<COutPoint> m_temp_spent;\n+\n+public:\n+\n+    CCoinsViewTemporary(CCoinsView* baseIn) : CCoinsViewCache(baseIn) {}\n+\n+    // Delete the copy constructor to prevent accidentally using it when one intends to create a\n+    // CCoinsViewTemporary on top of a base cache.\n+    CCoinsViewTemporary(const CCoinsViewTemporary &) = delete;\n+\n+    bool GetCoin(const COutPoint& outpoint, Coin& coin) const override {\n+        coin = AccessCoin(outpoint);\n+        return !coin.IsSpent();",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 39,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "6bf3ff6b0514b2ba199f502efd2953afdaf428a6",
      "in_reply_to_id": 586764973,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "FWIW, there is a historical reason why there are lots of `bool Get*(....,&return_object)` functions in the codebase. Before C++11's move semantics it was hard to avoid copies in many cases (needing `swap`s all over the place...). [copy elision](https://en.cppreference.com/w/cpp/language/copy_elision) existed in C++98, but has been expanded greatly since (and is now mandatory in C++17). It's also only since C++17 that `std::optional` exists so there is a clean way of returning an optional value; before that you'd sometimes see an idiom of functions returning a `std::pair<value, bool>` (e.g. `std::set::insert`), but without structured binding (also C++17) or even `std::tie` (C++11) that's pretty annoying to use too.\r\n\r\nTL;DR: there used to not really be a great way of having getters that are both efficient and can fail. With the current language, I think it'd just return `std::optional<Coin>`.",
      "created_at": "2021-03-08T18:31:59Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r589653414",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/589653414"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 485,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/589746428",
      "pull_request_review_id": 606705865,
      "id": 589746428,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4OTc0NjQyOA==",
      "diff_hunk": "@@ -0,0 +1,245 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"RPCs that handle raw transaction packages.\"\"\"\n+\n+from decimal import Decimal\n+from io import BytesIO\n+\n+from test_framework.address import ADDRESS_BCRT1_P2WSH_OP_TRUE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    BIP125_SEQUENCE_NUMBER,\n+    COIN,\n+    CTransaction,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+    hex_str_to_bytes,\n+)\n+\n+class RPCPackagesTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.privkeys = [node.get_deterministic_priv_key().key]\n+        self.address = node.get_deterministic_priv_key().address\n+        self.coins = []\n+        # The last 100 coinbase transactions are premature\n+        for b in node.generatetoaddress(120, self.address)[:20]:\n+            coinbase = node.getblock(blockhash=b, verbosity=2)[\"tx\"][0]\n+            self.coins.append({\n+                \"txid\": coinbase[\"txid\"],\n+                \"amount\": coinbase[\"vout\"][0][\"value\"],\n+                \"scriptPubKey\": coinbase[\"vout\"][0][\"scriptPubKey\"],\n+            })\n+\n+        # Create some transactions that can be reused throughout the test. Never submit these to mempool.\n+        self.independent_txns_hex = []\n+        self.independent_txns_testres = []\n+        for _ in range(3):\n+            coin = self.coins.pop()\n+            rawtx = node.createrawtransaction([{\"txid\" : coin[\"txid\"], \"vout\" : 0}],\n+                {self.address : coin[\"amount\"] - Decimal(\"0.0001\")})\n+            signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n+            assert signedtx[\"complete\"]\n+            testres = node.testmempoolaccept([signedtx[\"hex\"]])\n+            assert testres[0][\"allowed\"]\n+            self.independent_txns_hex.append(signedtx[\"hex\"])\n+            # testmempoolaccept returns a list of length one, avoid creating a 2D list\n+            self.independent_txns_testres.append(testres[0])\n+\n+        self.test_independent()\n+        self.test_chain()\n+        self.test_conflicting()\n+        self.test_rbf()\n+\n+    def chain_transaction(self, parent_txid, value, parent_locking_script=None):\n+        \"\"\"Build a transaction that spends parent_txid:vout.\n+        Return tuple (CTransaction object, raw hex, scriptPub).\n+        \"\"\"\n+        node = self.nodes[0]\n+        inputs = [{\"txid\" : parent_txid, \"vout\" : 0}]\n+        outputs = {self.address : value}\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+        prevtxs = [{\n+            \"txid\": parent_txid,\n+            \"vout\": 0,\n+            \"scriptPubKey\": parent_locking_script,\n+            \"amount\": value + Decimal(\"0.0001\"),\n+        }] if parent_locking_script else None\n+        signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys, prevtxs=prevtxs)\n+        tx = CTransaction()\n+        assert signedtx[\"complete\"]\n+        tx.deserialize(BytesIO(hex_str_to_bytes(signedtx[\"hex\"])))\n+        return (tx, signedtx[\"hex\"], tx.vout[0].scriptPubKey.hex())\n+\n+    def test_independent(self):\n+        self.log.info(\"Test multiple independent transactions in a package\")\n+        node = self.nodes[0]\n+        assert_equal(self.independent_txns_testres, node.testmempoolaccept(rawtxs=self.independent_txns_hex))\n+\n+        self.log.info(\"Test a valid package with garbage inserted\")\n+        garbage_tx = node.createrawtransaction([{\"txid\": \"00\" * 32, \"vout\": 5}], {self.address: 1})\n+        tx = CTransaction()\n+        tx.deserialize(BytesIO(hex_str_to_bytes(garbage_tx)))\n+        testres_bad = node.testmempoolaccept(self.independent_txns_hex + [garbage_tx])\n+        testres_independent_ids = [{\"txid\": res[\"txid\"], \"wtxid\": res[\"wtxid\"]} for res in self.independent_txns_testres]\n+        assert_equal(testres_bad, testres_independent_ids + [\n+            {\"txid\": tx.rehash(), \"wtxid\": tx.getwtxid(), \"allowed\": False, \"reject-reason\": \"missing-inputs\"}\n+        ])\n+\n+        self.log.info(\"Check testmempoolaccept tells us when some transactions completed validation successfully\")\n+        coin = self.coins.pop()\n+        tx_bad_sig_hex = node.createrawtransaction([{\"txid\" : coin[\"txid\"], \"vout\" : 0}],\n+                                           {self.address : coin[\"amount\"] - Decimal(\"0.0001\")})\n+        tx_bad_sig = CTransaction()\n+        tx_bad_sig.deserialize(BytesIO(hex_str_to_bytes(tx_bad_sig_hex)))\n+        testres_bad_sig = node.testmempoolaccept(self.independent_txns_hex + [tx_bad_sig_hex])\n+        assert_equal(testres_bad_sig, self.independent_txns_testres + [{\n+            \"txid\": tx_bad_sig.rehash(),\n+            \"wtxid\": tx_bad_sig.getwtxid(), \"allowed\": False,\n+            \"reject-reason\": \"mandatory-script-verify-flag-failed (Operation not valid with the current stack size)\"\n+        }])\n+\n+        self.log.info(\"Check testmempoolaccept reports txns in packages that exceed max feerate\")\n+        coin = self.coins.pop()\n+        tx_high_fee_raw = node.createrawtransaction([{\"txid\" : coin[\"txid\"], \"vout\" : 0}],\n+                                           {self.address : coin[\"amount\"] - Decimal(\"0.999\")})\n+        tx_high_fee_signed = node.signrawtransactionwithkey(hexstring=tx_high_fee_raw, privkeys=self.privkeys)\n+        assert tx_high_fee_signed[\"complete\"]\n+        tx_high_fee = CTransaction()\n+        tx_high_fee.deserialize(BytesIO(hex_str_to_bytes(tx_high_fee_signed[\"hex\"])))\n+        testres_high_fee = node.testmempoolaccept([tx_high_fee_signed[\"hex\"]])\n+        assert_equal(testres_high_fee, [\n+            {\"txid\": tx_high_fee.rehash(), \"wtxid\": tx_high_fee.getwtxid(), \"allowed\": False, \"reject-reason\": \"max-fee-exceeded\"}\n+        ])\n+        testres_package_high_fee = node.testmempoolaccept(self.independent_txns_hex + [tx_high_fee_signed[\"hex\"]])\n+        assert_equal(testres_package_high_fee, self.independent_txns_testres + testres_high_fee)\n+\n+    def test_chain(self):",
      "path": "test/functional/rpc_packages.py",
      "position": 154,
      "original_position": 125,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "61d54b613d4bfbfcdd16239a73c500c5fd89ff49",
      "in_reply_to_id": 587905367,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> • parent with two distinct child transactions\r\n> • child with two parent transactions\r\n\r\nAdded both tests. Thanks for the suggestion!",
      "created_at": "2021-03-08T21:03:35Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r589746428",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/589746428"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 154,
      "original_line": 154,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/589749652",
      "pull_request_review_id": 606709912,
      "id": 589749652,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4OTc0OTY1Mg==",
      "diff_hunk": "@@ -0,0 +1,245 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"RPCs that handle raw transaction packages.\"\"\"\n+\n+from decimal import Decimal\n+from io import BytesIO\n+\n+from test_framework.address import ADDRESS_BCRT1_P2WSH_OP_TRUE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    BIP125_SEQUENCE_NUMBER,\n+    COIN,\n+    CTransaction,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+    hex_str_to_bytes,\n+)\n+\n+class RPCPackagesTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.privkeys = [node.get_deterministic_priv_key().key]\n+        self.address = node.get_deterministic_priv_key().address\n+        self.coins = []\n+        # The last 100 coinbase transactions are premature\n+        for b in node.generatetoaddress(120, self.address)[:20]:\n+            coinbase = node.getblock(blockhash=b, verbosity=2)[\"tx\"][0]\n+            self.coins.append({\n+                \"txid\": coinbase[\"txid\"],\n+                \"amount\": coinbase[\"vout\"][0][\"value\"],\n+                \"scriptPubKey\": coinbase[\"vout\"][0][\"scriptPubKey\"],\n+            })\n+\n+        # Create some transactions that can be reused throughout the test. Never submit these to mempool.\n+        self.independent_txns_hex = []\n+        self.independent_txns_testres = []\n+        for _ in range(3):\n+            coin = self.coins.pop()\n+            rawtx = node.createrawtransaction([{\"txid\" : coin[\"txid\"], \"vout\" : 0}],\n+                {self.address : coin[\"amount\"] - Decimal(\"0.0001\")})\n+            signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n+            assert signedtx[\"complete\"]\n+            testres = node.testmempoolaccept([signedtx[\"hex\"]])\n+            assert testres[0][\"allowed\"]\n+            self.independent_txns_hex.append(signedtx[\"hex\"])\n+            # testmempoolaccept returns a list of length one, avoid creating a 2D list\n+            self.independent_txns_testres.append(testres[0])\n+\n+        self.test_independent()\n+        self.test_chain()\n+        self.test_conflicting()\n+        self.test_rbf()\n+\n+    def chain_transaction(self, parent_txid, value, parent_locking_script=None):\n+        \"\"\"Build a transaction that spends parent_txid:vout.\n+        Return tuple (CTransaction object, raw hex, scriptPub).\n+        \"\"\"\n+        node = self.nodes[0]\n+        inputs = [{\"txid\" : parent_txid, \"vout\" : 0}]\n+        outputs = {self.address : value}\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+        prevtxs = [{\n+            \"txid\": parent_txid,\n+            \"vout\": 0,\n+            \"scriptPubKey\": parent_locking_script,\n+            \"amount\": value + Decimal(\"0.0001\"),\n+        }] if parent_locking_script else None\n+        signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys, prevtxs=prevtxs)\n+        tx = CTransaction()\n+        assert signedtx[\"complete\"]\n+        tx.deserialize(BytesIO(hex_str_to_bytes(signedtx[\"hex\"])))\n+        return (tx, signedtx[\"hex\"], tx.vout[0].scriptPubKey.hex())\n+\n+    def test_independent(self):",
      "path": "test/functional/rpc_packages.py",
      "position": 105,
      "original_position": 82,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "61d54b613d4bfbfcdd16239a73c500c5fd89ff49",
      "in_reply_to_id": 587906781,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I've been thinking about your comment about making the API more lenient, and I agree that I should always let `testmempoolaccept` accept lists of transactions that aren't necessarily connected. My plan for now is to return a `depends` list for each transaction, which will allow us to test the package-ness of the transactions passed in.",
      "created_at": "2021-03-08T21:09:04Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r589749652",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/589749652"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 105,
      "original_line": 105,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/594425788",
      "pull_request_review_id": 612313192,
      "id": 594425788,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDQyNTc4OA==",
      "diff_hunk": "@@ -1120,6 +1304,30 @@ MempoolAcceptResult AcceptToMemoryPool(CChainState& active_chainstate, CTxMemPoo\n     return AcceptToMemoryPoolWithTime(Params(), pool, active_chainstate, tx, GetTime(), bypass_limits, test_accept);\n }\n \n+std::vector<MempoolAcceptResult> ProcessNewPackage(CChainState& active_chainstate, CTxMemPool& pool,\n+                                                   std::vector<CTransactionRef>& txns, bool test_accept)\n+{\n+    AssertLockHeld(cs_main);\n+    assert(test_accept); // Only allow package accept dry-runs (testmempoolaccept RPC).\n+\n+    std::vector<COutPoint> coins_to_uncache;\n+    const CChainParams& chainparams = Params();\n+    MemPoolAccept::ATMPArgs args { chainparams, GetTime(), false, coins_to_uncache, test_accept };",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 308,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit : \"/* bypass_limits */ false\"",
      "created_at": "2021-03-15T15:15:17Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r594425788",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/594425788"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1315,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/594447808",
      "pull_request_review_id": 612313192,
      "id": 594447808,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDQ0NzgwOA==",
      "diff_hunk": "@@ -1120,6 +1304,30 @@ MempoolAcceptResult AcceptToMemoryPool(CChainState& active_chainstate, CTxMemPoo\n     return AcceptToMemoryPoolWithTime(Params(), pool, active_chainstate, tx, GetTime(), bypass_limits, test_accept);\n }\n \n+std::vector<MempoolAcceptResult> ProcessNewPackage(CChainState& active_chainstate, CTxMemPool& pool,\n+                                                   std::vector<CTransactionRef>& txns, bool test_accept)\n+{\n+    AssertLockHeld(cs_main);\n+    assert(test_accept); // Only allow package accept dry-runs (testmempoolaccept RPC).",
      "path": "src/validation.cpp",
      "position": 251,
      "original_position": 304,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Should we limit the submitted package size for a reasonable bound for now (`MAX_PACKAGE_SIZE`) ?\r\n\r\nEven if package can only be submitted by the RPC interface, I'm not sure I would qualify this one of fully-trusted. A service provider or L2 node might indirectly call `testmempoolaccept` on its local node with some package content contributed by a user/counterparty. E.g in LN, the number of HTLCs txn on a given commitment is partially chosen by the counterparty, even if upper bounded by protocol parameter.\r\n\r\nI would like to avoid some naive Bitcoin infrastructure opening the DoS surface of their local node by allowing thousands-width package evaluation. We don't have a visibility on package composition and the simple schemes we have in mind while designing this stuff might not be the one submitted in deployment.\r\n\r\nEDIT: I know we have (in theory) the `-limitdescendantcount` bound , but we might still have DoS around a package-specific data structure, which might be reached without triggering descendants upper bound.",
      "created_at": "2021-03-15T15:39:55Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r594447808",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/594447808"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1218,
      "original_line": 1218,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/594478671",
      "pull_request_review_id": 612313192,
      "id": 594478671,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDQ3ODY3MQ==",
      "diff_hunk": "@@ -1060,28 +1176,93 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n \n     Workspace ws(ptx);\n \n-    if (!PreChecks(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!PreChecks(args, ws)) return MempoolAcceptResult(*ws.m_ptx, ws.m_state);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(*ws.m_ptx, ws.m_state);\n \n-    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(*ws.m_ptx, ws.m_state);\n \n     // Tx was accepted, but not added\n     if (args.m_test_accept) {\n-        return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+        return MempoolAcceptResult(*ws.m_ptx, std::move(ws.m_replaced_transactions), ws.m_base_fees);\n     }\n \n-    if (!Finalize(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!Finalize(args, ws)) return MempoolAcceptResult(*ws.m_ptx, ws.m_state);\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+    return MempoolAcceptResult(*ws.m_ptx, std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+}\n+\n+std::vector<MempoolAcceptResult> MemPoolAccept::AcceptMultipleTransactions(std::vector<CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    std::vector<Workspace> workspaces{};\n+    const int package_size = txns.size();\n+    workspaces.reserve(package_size);\n+    std::transform(txns.begin(), txns.end(), std::back_inserter(workspaces), [](CTransactionRef& tx) {\n+        return Workspace(tx);\n+    });\n+    std::vector<MempoolAcceptResult> results;\n+    results.reserve(package_size);\n+\n+    LOCK(m_pool.cs);\n+    // Do all PreChecks first and fail fast to avoid running expensive script checks when unnecessary.\n+    for (Workspace& ws : workspaces) {\n+        if (!PreChecks(args, ws)) {",
      "path": "src/validation.cpp",
      "position": 199,
      "original_position": 235,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think we have an issue with how we're currently evaluating package in case of conflict.\r\n\r\nLet's say you have a conflicting chain of transaction with your mempool. Conflicting parent transaction has a 5sat/vbyte feerate 300 vbyte size, child transaction has a 20sat/vbyte feerate 400 vbyte size. Absolute fee of this chain of transaction is thus 5 * 300 + 20 * 400 = 9500 sat.\r\n\r\nA package is tested for mempool-acceptance with the following composition. Parent tx has a 100sat/vbyte feerate 300 vbyte size, child transaction has a 10sat/vbyte 400 vbyte size. Absolute fee of the parent transaction is thus 30000 sat.\r\n\r\nPackage parent feerate and absolute fee is superior to the replaced chain of transaction (9500sat). Following bip125 requirement it should be accepted in the mempool, and evict the conflicting chain of transactions. Package child submitted later on, even if its feerate was under the previously-conflicting child (10sat/vbyte vs 20sat/vbyte) is accepted anyway as the parent clears up the way. Note, conflicting transactions are evicted in `Finalize()`.\r\n\r\nHowever, this PR is evaluating for conflict the whole package in the raw, without removing conflicting transaction from previously and successfully evaluated package member. In the above scenario described, I think the package child would fail to be accepted in the mempool, the conflicting child still being present.\r\n\r\nThus, submitting your package via `testmempoolaccept` or your transaction atomically might yell two differing results, all other things being equal ?",
      "created_at": "2021-03-15T16:14:39Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r594478671",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/594478671"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1144,
      "original_line": 1144,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/594489891",
      "pull_request_review_id": 612313192,
      "id": 594489891,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDQ4OTg5MQ==",
      "diff_hunk": "@@ -1060,28 +1176,93 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n \n     Workspace ws(ptx);\n \n-    if (!PreChecks(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!PreChecks(args, ws)) return MempoolAcceptResult(*ws.m_ptx, ws.m_state);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(*ws.m_ptx, ws.m_state);\n \n-    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(*ws.m_ptx, ws.m_state);\n \n     // Tx was accepted, but not added\n     if (args.m_test_accept) {\n-        return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+        return MempoolAcceptResult(*ws.m_ptx, std::move(ws.m_replaced_transactions), ws.m_base_fees);\n     }\n \n-    if (!Finalize(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!Finalize(args, ws)) return MempoolAcceptResult(*ws.m_ptx, ws.m_state);\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+    return MempoolAcceptResult(*ws.m_ptx, std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+}\n+\n+std::vector<MempoolAcceptResult> MemPoolAccept::AcceptMultipleTransactions(std::vector<CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    std::vector<Workspace> workspaces{};\n+    const int package_size = txns.size();\n+    workspaces.reserve(package_size);\n+    std::transform(txns.begin(), txns.end(), std::back_inserter(workspaces), [](CTransactionRef& tx) {\n+        return Workspace(tx);\n+    });\n+    std::vector<MempoolAcceptResult> results;\n+    results.reserve(package_size);\n+\n+    LOCK(m_pool.cs);\n+    // Do all PreChecks first and fail fast to avoid running expensive script checks when unnecessary.\n+    for (Workspace& ws : workspaces) {\n+        if (!PreChecks(args, ws)) {\n+            // Exit early to avoid doing pointless work. Return results in the same order as input txns.\n+            const auto failed_or_unfinished = [&, failed_ptx = ws.m_ptx](Workspace& ws) {\n+                                              return ws.m_ptx == failed_ptx\n+                                              ? MempoolAcceptResult(*ws.m_ptx, ws.m_state, /* finished */ true)\n+                                              : MempoolAcceptResult(*ws.m_ptx, ws.m_state, /* finished */ false);\n+            };\n+            std::transform(workspaces.begin(), workspaces.end(), std::back_inserter(results), failed_or_unfinished);\n+            return results;\n+        }\n+        m_view.PackageAddTransaction(ws.m_ptx);\n+    }\n+\n+    // Now that we have verified all inputs are available and there are no conflicts in the package,\n+    // clear the temporary coins (m_temp_added and m_temp_spent), otherwise script checks will error\n+    // on coins that are spent within the package.\n+    m_view.ClearTemporaryCoins();",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 251,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't follow the rational to clear the temporary coins \"otherwise scripts checks will error on coins that are spent within the package\". If a coin is already spent by a previous input from the same transaction or even another package transaction it's the expected script checks behavior to fail on it ? \r\n\r\nAt the contrary, I would understand removing coins to avoid a package parent spending a coin lately added by a package child. Thus I expect that kind of pathological case catched up earlier, when we try to access parent spent coins in `PreChecks()` ?",
      "created_at": "2021-03-15T16:27:23Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r594489891",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/594489891"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1234,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/594502100",
      "pull_request_review_id": 612313192,
      "id": 594502100,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDUwMjEwMA==",
      "diff_hunk": "@@ -1060,28 +1176,93 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n \n     Workspace ws(ptx);\n \n-    if (!PreChecks(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!PreChecks(args, ws)) return MempoolAcceptResult(*ws.m_ptx, ws.m_state);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(*ws.m_ptx, ws.m_state);\n \n-    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(*ws.m_ptx, ws.m_state);\n \n     // Tx was accepted, but not added\n     if (args.m_test_accept) {\n-        return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+        return MempoolAcceptResult(*ws.m_ptx, std::move(ws.m_replaced_transactions), ws.m_base_fees);\n     }\n \n-    if (!Finalize(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!Finalize(args, ws)) return MempoolAcceptResult(*ws.m_ptx, ws.m_state);\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+    return MempoolAcceptResult(*ws.m_ptx, std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+}\n+\n+std::vector<MempoolAcceptResult> MemPoolAccept::AcceptMultipleTransactions(std::vector<CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    std::vector<Workspace> workspaces{};\n+    const int package_size = txns.size();\n+    workspaces.reserve(package_size);\n+    std::transform(txns.begin(), txns.end(), std::back_inserter(workspaces), [](CTransactionRef& tx) {\n+        return Workspace(tx);\n+    });\n+    std::vector<MempoolAcceptResult> results;\n+    results.reserve(package_size);\n+\n+    LOCK(m_pool.cs);\n+    // Do all PreChecks first and fail fast to avoid running expensive script checks when unnecessary.\n+    for (Workspace& ws : workspaces) {\n+        if (!PreChecks(args, ws)) {\n+            // Exit early to avoid doing pointless work. Return results in the same order as input txns.\n+            const auto failed_or_unfinished = [&, failed_ptx = ws.m_ptx](Workspace& ws) {\n+                                              return ws.m_ptx == failed_ptx\n+                                              ? MempoolAcceptResult(*ws.m_ptx, ws.m_state, /* finished */ true)\n+                                              : MempoolAcceptResult(*ws.m_ptx, ws.m_state, /* finished */ false);\n+            };\n+            std::transform(workspaces.begin(), workspaces.end(), std::back_inserter(results), failed_or_unfinished);\n+            return results;\n+        }\n+        m_view.PackageAddTransaction(ws.m_ptx);\n+    }\n+\n+    // Now that we have verified all inputs are available and there are no conflicts in the package,\n+    // clear the temporary coins (m_temp_added and m_temp_spent), otherwise script checks will error\n+    // on coins that are spent within the package.\n+    m_view.ClearTemporaryCoins();\n+\n+    for (Workspace& ws : workspaces) {\n+        PrecomputedTransactionData txdata;\n+        if (!PolicyScriptChecks(args, ws, txdata)) {\n+            // Exit early to avoid doing pointless work. Return results in the same order as input txns.\n+            CTransactionRef failed_ptx = ws.m_ptx;\n+            const auto failed_or_unfinished = [&failed_ptx](Workspace& ws) {\n+                                              return ws.m_ptx == failed_ptx\n+                                              ? MempoolAcceptResult(*ws.m_ptx, ws.m_state, /* finished */ true)\n+                                              : MempoolAcceptResult(*ws.m_ptx, ws.m_state, /* finished */ false);\n+            };\n+            auto it_curr = std::find_if(workspaces.begin(), workspaces.end(),\n+                                        [& failed_ptx](Workspace& ws) { return ws.m_ptx == failed_ptx; });\n+            // When test_accept=true, transactions that pass PolicyScriptChecks are valid because there are\n+            // no further mempool checks (passing PolicyScriptChecks implies passing ConsensusScriptChecks).",
      "path": "src/validation.cpp",
      "position": 223,
      "original_position": 266,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think you're forgetting the mempool size check in `Finalize` which might exclude your newly package if it was in the feerate-bottom of the mempool. See `CTxMemPool::TrimToSize`.\r\n\r\n---------\r\n\r\nBeyond the fact that policy flags are a superset of the consensus ones, you could also recall that's running `ConsensusScriptChecks` isn't worthy here as we don't try to cache script results. `testmempoolaccept` transactions are likely never to be broadcasted on the network, so better to spare the cache, IMHO. But maybe precise we should do it when we use this code path for package evaluation from the network ?",
      "created_at": "2021-03-15T16:42:29Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r594502100",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/594502100"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1168,
      "original_line": 1168,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/594513639",
      "pull_request_review_id": 612313192,
      "id": 594513639,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDUxMzYzOQ==",
      "diff_hunk": "@@ -876,7 +876,9 @@ static RPCHelpMan sendrawtransaction()\n static RPCHelpMan testmempoolaccept()\n {\n     return RPCHelpMan{\"testmempoolaccept\",\n-                \"\\nReturns result of mempool acceptance tests indicating if raw transaction (serialized, hex-encoded) would be accepted by mempool.\\n\"\n+                \"\\nReturns result of mempool acceptance tests indicating if raw transaction(s) (serialized, hex-encoded) would be accepted by mempool.\\n\"\n+                \"\\nIf multiple transactions are passed in, they must be sorted in order of dependency and not conflict with each other.\\n\"\n+                \"\\nThe maximum number of transactions allowed is determined by the mempool descendant policy (-limitdescendantcount).\\n\"",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Do you have test coverage for this ?\r\n\r\n`CalculateMemPoolAncestors` is running on `m_pool` which is updated with validated transaction only in `Finalize`. I don't see how a package transaction is successfully accounted in descendant/ancestor limits in the subsequent evaluation of the package...",
      "created_at": "2021-03-15T16:56:13Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r594513639",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/594513639"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 882,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/594521296",
      "pull_request_review_id": 612313192,
      "id": 594521296,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDUyMTI5Ng==",
      "diff_hunk": "@@ -465,6 +463,114 @@ static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationS\n     return CheckInputScripts(tx, state, view, flags, /* cacheSigStore = */ true, /* cacheFullSciptStore = */ true, txdata);\n }\n \n+/** An empty coin used as a placeholder for a spent coin.*/\n+static const Coin coin_spent;",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 29,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think this is only needed for spentness evaluation in `GetCoin` ? If so just make it part of the new class.",
      "created_at": "2021-03-15T17:05:16Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r594521296",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/594521296"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 467,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/594522337",
      "pull_request_review_id": 612313192,
      "id": 594522337,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDUyMjMzNw==",
      "diff_hunk": "@@ -465,6 +463,114 @@ static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationS\n     return CheckInputScripts(tx, state, view, flags, /* cacheSigStore = */ true, /* cacheFullSciptStore = */ true, txdata);\n }\n \n+/** An empty coin used as a placeholder for a spent coin.*/\n+static const Coin coin_spent;\n+/**\n+ * A CoinsView that adds a memory cache to another CoinsView and serves as temporary scratch space.\n+ * Used by MemPoolAccept class to validate transactions and packages before submitting to mempool.\n+ * A backend can be set to provide read access to chainstate and/or mempool coins, but writing to\n+ * the backend is disabled. Avoid using a CCoinsViewTemporary in consensus-critical paths such\n+ * as writing to the script cache. See CheckInputsFromMempoolAndCache as an example. When not being\n+ * used to validate a package (m_temp_added and m_temp_spent are empty), a CCoinsViewTemporary\n+ * behaves exactly like a CCoinsViewCache.\n+ */\n+class CCoinsViewTemporary : public CCoinsViewCache",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 39,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Code-organisation wise, maybe better to move it in `coins.h`, validation.cpp is already wide enough ?",
      "created_at": "2021-03-15T17:06:36Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r594522337",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/594522337"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 477,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/594527279",
      "pull_request_review_id": 612313192,
      "id": 594527279,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDUyNzI3OQ==",
      "diff_hunk": "@@ -226,6 +230,18 @@ struct MempoolAcceptResult {\n MempoolAcceptResult AcceptToMemoryPool(CChainState& active_chainstate, CTxMemPool& pool, const CTransactionRef& tx,\n                                        bool bypass_limits, bool test_accept=false) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+/**\n+* Atomically test acceptance of multiple transactions.\n+* @param[in]    txns                Group of transactions which may be independent or contain",
      "path": "src/validation.h",
      "position": 71,
      "original_position": 55,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think we should think twice w.r.t independence as the evaluation of _topologically_-independent packages might still have interdependent evaluations.\r\n\r\nLet's say your package 1 is replacing in-mempool tx A. Such high-feerate tx A is a replacement blocker for the low-feerate package 2. Evaluating package 1 then package 2 make both of them accepted, the reserve isn't true.\r\n\r\nAlso it make it harder to reason on package upper bound size, as you might have N independent packages all under descendant limit but collectively far above.",
      "created_at": "2021-03-15T17:12:35Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r594527279",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/594527279"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 240,
      "original_line": 240,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/594661303",
      "pull_request_review_id": 612615911,
      "id": 594661303,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDY2MTMwMw==",
      "diff_hunk": "@@ -465,6 +463,114 @@ static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationS\n     return CheckInputScripts(tx, state, view, flags, /* cacheSigStore = */ true, /* cacheFullSciptStore = */ true, txdata);\n }\n \n+/** An empty coin used as a placeholder for a spent coin.*/\n+static const Coin coin_spent;\n+/**\n+ * A CoinsView that adds a memory cache to another CoinsView and serves as temporary scratch space.\n+ * Used by MemPoolAccept class to validate transactions and packages before submitting to mempool.\n+ * A backend can be set to provide read access to chainstate and/or mempool coins, but writing to\n+ * the backend is disabled. Avoid using a CCoinsViewTemporary in consensus-critical paths such\n+ * as writing to the script cache. See CheckInputsFromMempoolAndCache as an example. When not being\n+ * used to validate a package (m_temp_added and m_temp_spent are empty), a CCoinsViewTemporary\n+ * behaves exactly like a CCoinsViewCache.\n+ */\n+class CCoinsViewTemporary : public CCoinsViewCache",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 39,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "in_reply_to_id": 594522337,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I actually think it's better organization to put it in validation.cpp, since it's only used by MemPoolAccept.",
      "created_at": "2021-03-15T20:29:10Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r594661303",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/594661303"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 477,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/594662472",
      "pull_request_review_id": 612617407,
      "id": 594662472,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDY2MjQ3Mg==",
      "diff_hunk": "@@ -1060,28 +1176,93 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n \n     Workspace ws(ptx);\n \n-    if (!PreChecks(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!PreChecks(args, ws)) return MempoolAcceptResult(*ws.m_ptx, ws.m_state);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(*ws.m_ptx, ws.m_state);\n \n-    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(*ws.m_ptx, ws.m_state);\n \n     // Tx was accepted, but not added\n     if (args.m_test_accept) {\n-        return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+        return MempoolAcceptResult(*ws.m_ptx, std::move(ws.m_replaced_transactions), ws.m_base_fees);\n     }\n \n-    if (!Finalize(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!Finalize(args, ws)) return MempoolAcceptResult(*ws.m_ptx, ws.m_state);\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+    return MempoolAcceptResult(*ws.m_ptx, std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+}\n+\n+std::vector<MempoolAcceptResult> MemPoolAccept::AcceptMultipleTransactions(std::vector<CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    std::vector<Workspace> workspaces{};\n+    const int package_size = txns.size();\n+    workspaces.reserve(package_size);\n+    std::transform(txns.begin(), txns.end(), std::back_inserter(workspaces), [](CTransactionRef& tx) {\n+        return Workspace(tx);\n+    });\n+    std::vector<MempoolAcceptResult> results;\n+    results.reserve(package_size);\n+\n+    LOCK(m_pool.cs);\n+    // Do all PreChecks first and fail fast to avoid running expensive script checks when unnecessary.\n+    for (Workspace& ws : workspaces) {\n+        if (!PreChecks(args, ws)) {\n+            // Exit early to avoid doing pointless work. Return results in the same order as input txns.\n+            const auto failed_or_unfinished = [&, failed_ptx = ws.m_ptx](Workspace& ws) {\n+                                              return ws.m_ptx == failed_ptx\n+                                              ? MempoolAcceptResult(*ws.m_ptx, ws.m_state, /* finished */ true)\n+                                              : MempoolAcceptResult(*ws.m_ptx, ws.m_state, /* finished */ false);\n+            };\n+            std::transform(workspaces.begin(), workspaces.end(), std::back_inserter(results), failed_or_unfinished);\n+            return results;\n+        }\n+        m_view.PackageAddTransaction(ws.m_ptx);\n+    }\n+\n+    // Now that we have verified all inputs are available and there are no conflicts in the package,\n+    // clear the temporary coins (m_temp_added and m_temp_spent), otherwise script checks will error\n+    // on coins that are spent within the package.\n+    m_view.ClearTemporaryCoins();",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 251,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "in_reply_to_id": 594489891,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'll update the comment to make it clearer. A lot of functions in the script checks do a quick assert(!coin.IsSpent()) sanity check. This breaks when the coin is spent by a later transaction in the package (and we've updated it while going through all the PreChecks)",
      "created_at": "2021-03-15T20:31:06Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r594662472",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/594662472"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1234,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595906163",
      "pull_request_review_id": 614162419,
      "id": 595906163,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTkwNjE2Mw==",
      "diff_hunk": "@@ -258,11 +276,11 @@ bool TestLockPointValidity(CChain& active_chain, const LockPoints* lp) EXCLUSIVE\n  * See consensus/consensus.h for flag definitions.\n  */\n bool CheckSequenceLocks(CChainState& active_chainstate,\n-                        const CTxMemPool& pool,\n+                        CCoinsView& viewMemPool,",
      "path": "src/validation.h",
      "position": null,
      "original_position": 82,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Can this be a const reference?\r\n\r\n```suggestion\r\n                        const CCoinsView& viewMemPool,\r\n```\r\n\r\nPassing by const reference indicates that the argument won't be mutated in the function, and is the preferred way of passing in-params that are not cheap to copy (https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rf-in)",
      "created_at": "2021-03-17T10:50:14Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r595906163",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595906163"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 279,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595919203",
      "pull_request_review_id": 614162419,
      "id": 595919203,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTkxOTIwMw==",
      "diff_hunk": "@@ -465,6 +463,114 @@ static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationS\n     return CheckInputScripts(tx, state, view, flags, /* cacheSigStore = */ true, /* cacheFullSciptStore = */ true, txdata);\n }\n \n+/** An empty coin used as a placeholder for a spent coin.*/\n+static const Coin coin_spent;",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 29,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "in_reply_to_id": 594521296,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Indeed:\r\n\r\n```diff\r\n-/** An empty coin used as a placeholder for a spent coin.*/\r\n-static const Coin coin_spent;\r\n /**\r\n  * A CoinsView that adds a memory cache to another CoinsView and serves as temporary scratch space.\r\n  * Used by MemPoolAccept class to validate transactions and packages before submitting to mempool.\r\n@@ -489,6 +487,8 @@ protected:\r\n     */\r\n     std::set<COutPoint> m_temp_spent;\r\n \r\n+    /** An empty coin used as a placeholder for a spent coin.*/\r\n+    inline static const Coin s_coin_spent;\r\n public:\r\n \r\n     CCoinsViewTemporary(CCoinsView* baseIn) : CCoinsViewCache(baseIn) {}\r\n@@ -506,7 +506,7 @@ public:\r\n         // Check to see if another tx in the package has already spent this coin (conflict-in-package).\r\n         // Coins spent by others in the package are only tracked in m_temp_spent.\r\n         if (m_temp_spent.count(outpoint)) {\r\n-            return coin_spent;\r\n+            return s_coin_spent;\r\n         }\r\n```",
      "created_at": "2021-03-17T11:09:40Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r595919203",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595919203"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 467,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595922179",
      "pull_request_review_id": 614162419,
      "id": 595922179,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTkyMjE3OQ==",
      "diff_hunk": "@@ -465,6 +463,114 @@ static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationS\n     return CheckInputScripts(tx, state, view, flags, /* cacheSigStore = */ true, /* cacheFullSciptStore = */ true, txdata);\n }\n \n+/** An empty coin used as a placeholder for a spent coin.*/\n+static const Coin coin_spent;\n+/**\n+ * A CoinsView that adds a memory cache to another CoinsView and serves as temporary scratch space.\n+ * Used by MemPoolAccept class to validate transactions and packages before submitting to mempool.\n+ * A backend can be set to provide read access to chainstate and/or mempool coins, but writing to\n+ * the backend is disabled. Avoid using a CCoinsViewTemporary in consensus-critical paths such\n+ * as writing to the script cache. See CheckInputsFromMempoolAndCache as an example. When not being\n+ * used to validate a package (m_temp_added and m_temp_spent are empty), a CCoinsViewTemporary\n+ * behaves exactly like a CCoinsViewCache.\n+ */\n+class CCoinsViewTemporary : public CCoinsViewCache\n+{\n+protected:\n+    /**\n+    * Coins made available by transactions being validated. Tracking these allows for package\n+    * validation, since we can access transaction outputs without submitting them to mempool.\n+    */\n+    std::map<COutPoint, Coin> m_temp_added;\n+\n+    /**\n+    * Coins spent by transactions being validated. When there are multiple, we need to track these\n+    * in order to distinguish between missing/spent coins and conflicts within a package.\n+    */\n+    std::set<COutPoint> m_temp_spent;",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 52,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You could combine these into a single `std::set<COutPoint, std::optional<Coin>>` (where `nullopt` indicates that the coin has been spent). That'd avoid doing lookups in both places. Up to you whether you think that's clearer or not.\r\n\r\nEDIT: Or even just use `std::set<COutPoint, Coin>`, where the `Coin` is an empty (spent) coin if the coin has been spent.",
      "created_at": "2021-03-17T11:14:21Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r595922179",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595922179"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": 484,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 488,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595923333",
      "pull_request_review_id": 614162419,
      "id": 595923333,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTkyMzMzMw==",
      "diff_hunk": "@@ -465,6 +463,114 @@ static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationS\n     return CheckInputScripts(tx, state, view, flags, /* cacheSigStore = */ true, /* cacheFullSciptStore = */ true, txdata);\n }\n \n+/** An empty coin used as a placeholder for a spent coin.*/\n+static const Coin coin_spent;\n+/**\n+ * A CoinsView that adds a memory cache to another CoinsView and serves as temporary scratch space.\n+ * Used by MemPoolAccept class to validate transactions and packages before submitting to mempool.\n+ * A backend can be set to provide read access to chainstate and/or mempool coins, but writing to\n+ * the backend is disabled. Avoid using a CCoinsViewTemporary in consensus-critical paths such\n+ * as writing to the script cache. See CheckInputsFromMempoolAndCache as an example. When not being\n+ * used to validate a package (m_temp_added and m_temp_spent are empty), a CCoinsViewTemporary\n+ * behaves exactly like a CCoinsViewCache.\n+ */\n+class CCoinsViewTemporary : public CCoinsViewCache\n+{\n+protected:\n+    /**\n+    * Coins made available by transactions being validated. Tracking these allows for package\n+    * validation, since we can access transaction outputs without submitting them to mempool.\n+    */\n+    std::map<COutPoint, Coin> m_temp_added;\n+\n+    /**\n+    * Coins spent by transactions being validated. When there are multiple, we need to track these",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 49,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n    * Coins spent by transactions being validated. When validating a package, we need to track these\r\n```",
      "created_at": "2021-03-17T11:16:11Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r595923333",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595923333"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 487,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595924363",
      "pull_request_review_id": 614162419,
      "id": 595924363,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTkyNDM2Mw==",
      "diff_hunk": "@@ -465,6 +463,114 @@ static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationS\n     return CheckInputScripts(tx, state, view, flags, /* cacheSigStore = */ true, /* cacheFullSciptStore = */ true, txdata);\n }\n \n+/** An empty coin used as a placeholder for a spent coin.*/\n+static const Coin coin_spent;\n+/**\n+ * A CoinsView that adds a memory cache to another CoinsView and serves as temporary scratch space.\n+ * Used by MemPoolAccept class to validate transactions and packages before submitting to mempool.\n+ * A backend can be set to provide read access to chainstate and/or mempool coins, but writing to\n+ * the backend is disabled. Avoid using a CCoinsViewTemporary in consensus-critical paths such\n+ * as writing to the script cache. See CheckInputsFromMempoolAndCache as an example. When not being\n+ * used to validate a package (m_temp_added and m_temp_spent are empty), a CCoinsViewTemporary\n+ * behaves exactly like a CCoinsViewCache.\n+ */\n+class CCoinsViewTemporary : public CCoinsViewCache",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 39,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "We've stopped using hungarian style naming, so this should probably just be called `CoinsViewTemporary` (the `C` indicated \"class\")",
      "created_at": "2021-03-17T11:17:41Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r595924363",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595924363"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 477,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595931131",
      "pull_request_review_id": 614162419,
      "id": 595931131,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTkzMTEzMQ==",
      "diff_hunk": "@@ -465,6 +463,114 @@ static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationS\n     return CheckInputScripts(tx, state, view, flags, /* cacheSigStore = */ true, /* cacheFullSciptStore = */ true, txdata);\n }\n \n+/** An empty coin used as a placeholder for a spent coin.*/\n+static const Coin coin_spent;\n+/**\n+ * A CoinsView that adds a memory cache to another CoinsView and serves as temporary scratch space.\n+ * Used by MemPoolAccept class to validate transactions and packages before submitting to mempool.\n+ * A backend can be set to provide read access to chainstate and/or mempool coins, but writing to\n+ * the backend is disabled. Avoid using a CCoinsViewTemporary in consensus-critical paths such\n+ * as writing to the script cache. See CheckInputsFromMempoolAndCache as an example. When not being\n+ * used to validate a package (m_temp_added and m_temp_spent are empty), a CCoinsViewTemporary\n+ * behaves exactly like a CCoinsViewCache.\n+ */\n+class CCoinsViewTemporary : public CCoinsViewCache\n+{\n+protected:",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 41,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Doesn't need to be `protected`. Nothing inherits from this class so it can use (default) private specifier.\r\n\r\n```suggestion\r\n```",
      "created_at": "2021-03-17T11:28:33Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r595931131",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595931131"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 479,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595946210",
      "pull_request_review_id": 614162419,
      "id": 595946210,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTk0NjIxMA==",
      "diff_hunk": "@@ -189,32 +189,36 @@ void PruneBlockFilesManual(CChainState& active_chainstate, int nManualPruneHeigh\n * Validation result for a single transaction mempool acceptance.\n */\n struct MempoolAcceptResult {\n-    /** Used to indicate the results of mempool validation,\n-    * including the possibility of unfinished validation.\n+    /** Used to indicate the results of mempool validation.\n+    * It's possible for a result to be unknown in the case of\n+    * package validation when an earlier tx fails and validation\n+    * is terminated early. See ResultType::UNFINISHED.\n     */\n     enum class ResultType {\n         VALID, //!> Fully validated, valid.\n         INVALID, //!> Invalid.\n+        UNFINISHED, //!> Not fully validated.\n     };\n-    ResultType m_result_type;\n-    TxValidationState m_state;\n+    const CTransaction& m_tx;",
      "path": "src/validation.h",
      "position": null,
      "original_position": 18,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It makes me slightly uneasy that we're returning a reference to a CTransaction object which was passed in to `ProcessNewPackage()`. The caller needs to know that they can't let that passed-in CTransaction go out of scope, or they'll have a dangling reference.\r\n\r\nWhat do you think about passing back the txid, and then having the caller look up the txid/wtxid/virtual size from the CTransaction object that they're holding? Or passing back those details in the MempoolAcceptResult?",
      "created_at": "2021-03-17T11:53:05Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r595946210",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595946210"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 202,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595957763",
      "pull_request_review_id": 614162419,
      "id": 595957763,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTk1Nzc2Mw==",
      "diff_hunk": "@@ -1060,28 +1176,93 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n \n     Workspace ws(ptx);\n \n-    if (!PreChecks(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!PreChecks(args, ws)) return MempoolAcceptResult(*ws.m_ptx, ws.m_state);",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 191,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It's not immediately obvious what the different constructor calls here indicate. Perhaps adding factory methods to the struct would make it a bit clearer:\r\n\r\n```diff\r\ndiff --git a/src/validation.cpp b/src/validation.cpp\r\nindex 121181393d..c65964a976 100644\r\n--- a/src/validation.cpp\r\n+++ b/src/validation.cpp\r\n@@ -1176,7 +1176,7 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\r\n \r\n     Workspace ws(ptx);\r\n \r\n-    if (!PreChecks(args, ws)) return MempoolAcceptResult(*ws.m_ptx, ws.m_state);\r\n+    if (!PreChecks(args, ws)) return MempoolAcceptResult::Failure(*ws.m_ptx, ws.m_state);\r\n \r\n     // Only compute the precomputed transaction data if we need to verify\r\n     // scripts (ie, other policy checks pass). We perform the inexpensive\r\n@@ -1184,20 +1184,20 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\r\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\r\n     PrecomputedTransactionData txdata;\r\n \r\n-    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(*ws.m_ptx, ws.m_state);\r\n+    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(*ws.m_ptx, ws.m_state);\r\n \r\n-    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(*ws.m_ptx, ws.m_state);\r\n+    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(*ws.m_ptx, ws.m_state);\r\n \r\n     // Tx was accepted, but not added\r\n     if (args.m_test_accept) {\r\n-        return MempoolAcceptResult(*ws.m_ptx, std::move(ws.m_replaced_transactions), ws.m_base_fees);\r\n+        return MempoolAcceptResult::Success(*ws.m_ptx, std::move(ws.m_replaced_transactions), ws.m_base_fees);\r\n     }\r\n \r\n-    if (!Finalize(args, ws)) return MempoolAcceptResult(*ws.m_ptx, ws.m_state);\r\n+    if (!Finalize(args, ws)) return MempoolAcceptResult::Failure(*ws.m_ptx, ws.m_state);\r\n \r\n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\r\n \r\n-    return MempoolAcceptResult(*ws.m_ptx, std::move(ws.m_replaced_transactions), ws.m_base_fees);\r\n+    return MempoolAcceptResult::Success(*ws.m_ptx, std::move(ws.m_replaced_transactions), ws.m_base_fees);\r\n }\r\n \r\n std::vector<MempoolAcceptResult> MemPoolAccept::AcceptMultipleTransactions(std::vector<CTransactionRef>& txns, ATMPArgs& args)\r\n@@ -1219,8 +1219,8 @@ std::vector<MempoolAcceptResult> MemPoolAccept::AcceptMultipleTransactions(std::\r\n             // Exit early to avoid doing pointless work. Return results in the same order as input txns.\r\n             const auto failed_or_unfinished = [&, failed_ptx = ws.m_ptx](Workspace& ws) {\r\n                                               return ws.m_ptx == failed_ptx\r\n-                                              ? MempoolAcceptResult(*ws.m_ptx, ws.m_state, /* finished */ true)\r\n-                                              : MempoolAcceptResult(*ws.m_ptx, ws.m_state, /* finished */ false);\r\n+                                              ? MempoolAcceptResult::Failure(*ws.m_ptx, ws.m_state, /* finished */ true)\r\n+                                              : MempoolAcceptResult::Failure(*ws.m_ptx, ws.m_state, /* finished */ false);\r\n             };\r\n             std::transform(workspaces.begin(), workspaces.end(), std::back_inserter(results), failed_or_unfinished);\r\n             return results;\r\n@@ -1240,15 +1240,15 @@ std::vector<MempoolAcceptResult> MemPoolAccept::AcceptMultipleTransactions(std::\r\n             CTransactionRef failed_ptx = ws.m_ptx;\r\n             const auto failed_or_unfinished = [&failed_ptx](Workspace& ws) {\r\n                                               return ws.m_ptx == failed_ptx\r\n-                                              ? MempoolAcceptResult(*ws.m_ptx, ws.m_state, /* finished */ true)\r\n-                                              : MempoolAcceptResult(*ws.m_ptx, ws.m_state, /* finished */ false);\r\n+                                              ? MempoolAcceptResult::Failure(*ws.m_ptx, ws.m_state, /* finished */ true)\r\n+                                              : MempoolAcceptResult::Failure(*ws.m_ptx, ws.m_state, /* finished */ false);\r\n             };\r\n             auto it_curr = std::find_if(workspaces.begin(), workspaces.end(),\r\n                                         [& failed_ptx](Workspace& ws) { return ws.m_ptx == failed_ptx; });\r\n             // When test_accept=true, transactions that pass PolicyScriptChecks are valid because there are\r\n             // no further mempool checks (passing PolicyScriptChecks implies passing ConsensusScriptChecks).\r\n             std::transform(workspaces.begin(), it_curr, std::back_inserter(results), [](Workspace& ws) {\r\n-                           return MempoolAcceptResult(*ws.m_ptx, std::move(ws.m_replaced_transactions), ws.m_base_fees);\r\n+                           return MempoolAcceptResult::Success(*ws.m_ptx, std::move(ws.m_replaced_transactions), ws.m_base_fees);\r\n             });\r\n             std::transform(it_curr, workspaces.end(), std::back_inserter(results), failed_or_unfinished);\r\n             return results;\r\n@@ -1260,7 +1260,7 @@ std::vector<MempoolAcceptResult> MemPoolAccept::AcceptMultipleTransactions(std::\r\n \r\n     std::transform(workspaces.begin(), workspaces.end(), std::back_inserter(results), [](Workspace& ws) {\r\n         // All successful MemPoolAcceptResults\r\n-        return MempoolAcceptResult(*ws.m_ptx, std::move(ws.m_replaced_transactions), ws.m_base_fees);\r\n+        return MempoolAcceptResult::Success(*ws.m_ptx, std::move(ws.m_replaced_transactions), ws.m_base_fees);\r\n     });\r\n     return results;\r\n }\r\ndiff --git a/src/validation.h b/src/validation.h\r\nindex 64f1b24743..234c1db895 100644\r\n--- a/src/validation.h\r\n+++ b/src/validation.h\r\n@@ -209,8 +209,19 @@ struct MempoolAcceptResult {\r\n     /** Raw base fees in satoshis. */\r\n     const std::optional<CAmount> m_base_fees;\r\n \r\n+    static MempoolAcceptResult Success(const CTransaction& tx, std::list<CTransactionRef>&& replaced_txns, CAmount fees)\r\n+    {\r\n+        return MempoolAcceptResult(tx, std::move(replaced_txns), fees);\r\n+    }\r\n+\r\n+    static MempoolAcceptResult Failure(const CTransaction& tx, TxValidationState state, bool finished=true)\r\n+    {\r\n+        return MempoolAcceptResult(tx, state, finished);\r\n+    }\r\n+\r\n+private:\r\n     /** Constructor for failure case */\r\n-    explicit MempoolAcceptResult(const CTransaction& tx, TxValidationState state, bool finished=true)\r\n+    explicit MempoolAcceptResult(const CTransaction& tx, TxValidationState state, bool finished)\r\n         : m_tx(tx), m_result_type(finished ? ResultType::INVALID : ResultType::UNFINISHED),\r\n         m_state(state), m_replaced_transactions(nullopt), m_base_fees(nullopt) {\r\n             if (finished) Assume(!state.IsValid()); // Can be invalid or error\r\n```",
      "created_at": "2021-03-17T12:11:10Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r595957763",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595957763"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1179,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595962632",
      "pull_request_review_id": 614162419,
      "id": 595962632,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTk2MjYzMg==",
      "diff_hunk": "@@ -1060,28 +1176,93 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n \n     Workspace ws(ptx);\n \n-    if (!PreChecks(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!PreChecks(args, ws)) return MempoolAcceptResult(*ws.m_ptx, ws.m_state);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(*ws.m_ptx, ws.m_state);\n \n-    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(*ws.m_ptx, ws.m_state);\n \n     // Tx was accepted, but not added\n     if (args.m_test_accept) {\n-        return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+        return MempoolAcceptResult(*ws.m_ptx, std::move(ws.m_replaced_transactions), ws.m_base_fees);\n     }\n \n-    if (!Finalize(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!Finalize(args, ws)) return MempoolAcceptResult(*ws.m_ptx, ws.m_state);\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+    return MempoolAcceptResult(*ws.m_ptx, std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+}\n+\n+std::vector<MempoolAcceptResult> MemPoolAccept::AcceptMultipleTransactions(std::vector<CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    std::vector<Workspace> workspaces{};\n+    const int package_size = txns.size();\n+    workspaces.reserve(package_size);\n+    std::transform(txns.begin(), txns.end(), std::back_inserter(workspaces), [](CTransactionRef& tx) {\n+        return Workspace(tx);\n+    });\n+    std::vector<MempoolAcceptResult> results;\n+    results.reserve(package_size);\n+\n+    LOCK(m_pool.cs);\n+    // Do all PreChecks first and fail fast to avoid running expensive script checks when unnecessary.\n+    for (Workspace& ws : workspaces) {\n+        if (!PreChecks(args, ws)) {\n+            // Exit early to avoid doing pointless work. Return results in the same order as input txns.\n+            const auto failed_or_unfinished = [&, failed_ptx = ws.m_ptx](Workspace& ws) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 237,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It's confusing that you're using the same variable name `ws` in the for loop and as an argument to this lambda.",
      "created_at": "2021-03-17T12:18:45Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r595962632",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595962632"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1220,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595967349",
      "pull_request_review_id": 614162419,
      "id": 595967349,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTk2NzM0OQ==",
      "diff_hunk": "@@ -189,32 +189,36 @@ void PruneBlockFilesManual(CChainState& active_chainstate, int nManualPruneHeigh\n * Validation result for a single transaction mempool acceptance.\n */\n struct MempoolAcceptResult {\n-    /** Used to indicate the results of mempool validation,\n-    * including the possibility of unfinished validation.\n+    /** Used to indicate the results of mempool validation.\n+    * It's possible for a result to be unknown in the case of\n+    * package validation when an earlier tx fails and validation\n+    * is terminated early. See ResultType::UNFINISHED.\n     */\n     enum class ResultType {\n         VALID, //!> Fully validated, valid.\n         INVALID, //!> Invalid.\n+        UNFINISHED, //!> Not fully validated.\n     };\n-    ResultType m_result_type;\n-    TxValidationState m_state;\n+    const CTransaction& m_tx;\n+    const ResultType m_result_type;\n+    const TxValidationState m_state;\n \n     // The following fields are only present when m_result_type = ResultType::VALID\n     /** Mempool transactions replaced by the tx per BIP 125 rules. */\n-    std::optional<std::list<CTransactionRef>> m_replaced_transactions;\n-    /** Raw base fees. */\n-    std::optional<CAmount> m_base_fees;\n+    const std::optional<std::list<CTransactionRef>> m_replaced_transactions;\n+    /** Raw base fees in satoshis. */\n+    const std::optional<CAmount> m_base_fees;\n \n     /** Constructor for failure case */\n-    explicit MempoolAcceptResult(TxValidationState state)\n-        : m_result_type(ResultType::INVALID),\n+    explicit MempoolAcceptResult(const CTransaction& tx, TxValidationState state, bool finished=true)",
      "path": "src/validation.h",
      "position": null,
      "original_position": 34,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I wonder if we should have a separate constructor for the UNFINISHED state. It doesn't really make sense to pass in a `TxValidationState` object if acceptance testing is incomplete.",
      "created_at": "2021-03-17T12:25:52Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r595967349",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595967349"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 213,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595971282",
      "pull_request_review_id": 614162419,
      "id": 595971282,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTk3MTI4Mg==",
      "diff_hunk": "@@ -1060,28 +1176,93 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n \n     Workspace ws(ptx);\n \n-    if (!PreChecks(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!PreChecks(args, ws)) return MempoolAcceptResult(*ws.m_ptx, ws.m_state);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(*ws.m_ptx, ws.m_state);\n \n-    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(*ws.m_ptx, ws.m_state);\n \n     // Tx was accepted, but not added\n     if (args.m_test_accept) {\n-        return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+        return MempoolAcceptResult(*ws.m_ptx, std::move(ws.m_replaced_transactions), ws.m_base_fees);\n     }\n \n-    if (!Finalize(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!Finalize(args, ws)) return MempoolAcceptResult(*ws.m_ptx, ws.m_state);\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+    return MempoolAcceptResult(*ws.m_ptx, std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+}\n+\n+std::vector<MempoolAcceptResult> MemPoolAccept::AcceptMultipleTransactions(std::vector<CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    std::vector<Workspace> workspaces{};\n+    const int package_size = txns.size();\n+    workspaces.reserve(package_size);\n+    std::transform(txns.begin(), txns.end(), std::back_inserter(workspaces), [](CTransactionRef& tx) {\n+        return Workspace(tx);\n+    });\n+    std::vector<MempoolAcceptResult> results;\n+    results.reserve(package_size);\n+\n+    LOCK(m_pool.cs);\n+    // Do all PreChecks first and fail fast to avoid running expensive script checks when unnecessary.\n+    for (Workspace& ws : workspaces) {\n+        if (!PreChecks(args, ws)) {\n+            // Exit early to avoid doing pointless work. Return results in the same order as input txns.\n+            const auto failed_or_unfinished = [&, failed_ptx = ws.m_ptx](Workspace& ws) {\n+                                              return ws.m_ptx == failed_ptx\n+                                              ? MempoolAcceptResult(*ws.m_ptx, ws.m_state, /* finished */ true)\n+                                              : MempoolAcceptResult(*ws.m_ptx, ws.m_state, /* finished */ false);\n+            };\n+            std::transform(workspaces.begin(), workspaces.end(), std::back_inserter(results), failed_or_unfinished);\n+            return results;\n+        }\n+        m_view.PackageAddTransaction(ws.m_ptx);\n+    }\n+\n+    // Now that we have verified all inputs are available and there are no conflicts in the package,\n+    // clear the temporary coins (m_temp_added and m_temp_spent), otherwise script checks will error\n+    // on coins that are spent within the package.\n+    m_view.ClearTemporaryCoins();\n+\n+    for (Workspace& ws : workspaces) {",
      "path": "src/validation.cpp",
      "position": 213,
      "original_position": 253,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I love `std::transform` more than most, but I think this would be simpler if you just pushed the results onto `results` as you went (and then filled in the remaining `results` as `UNFINISHED` if you fail on any tx).",
      "created_at": "2021-03-17T12:31:34Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r595971282",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595971282"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1158,
      "original_line": 1158,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/596390724",
      "pull_request_review_id": 614795026,
      "id": 596390724,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NjM5MDcyNA==",
      "diff_hunk": "@@ -1060,28 +1176,93 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n \n     Workspace ws(ptx);\n \n-    if (!PreChecks(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!PreChecks(args, ws)) return MempoolAcceptResult(*ws.m_ptx, ws.m_state);",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 191,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "in_reply_to_id": 595957763,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ooh that's nice! 👀 ",
      "created_at": "2021-03-17T21:20:06Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r596390724",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/596390724"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1179,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/597224531",
      "pull_request_review_id": 615850456,
      "id": 597224531,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzIyNDUzMQ==",
      "diff_hunk": "@@ -876,7 +876,9 @@ static RPCHelpMan sendrawtransaction()\n static RPCHelpMan testmempoolaccept()\n {\n     return RPCHelpMan{\"testmempoolaccept\",\n-                \"\\nReturns result of mempool acceptance tests indicating if raw transaction (serialized, hex-encoded) would be accepted by mempool.\\n\"\n+                \"\\nReturns result of mempool acceptance tests indicating if raw transaction(s) (serialized, hex-encoded) would be accepted by mempool.\\n\"\n+                \"\\nIf multiple transactions are passed in, they must be sorted in order of dependency and not conflict with each other.\\n\"\n+                \"\\nThe maximum number of transactions allowed is determined by the mempool descendant policy (-limitdescendantcount).\\n\"",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "in_reply_to_id": 594513639,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Do you have test coverage for this ?\r\n\r\nYes, I update the test case in mempool_accept.py, it should return a JSON Serialization Error for > 25 transactions.\r\n\r\nWill be pushing an update to add package count/size limits in the validation code.",
      "created_at": "2021-03-18T20:36:30Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r597224531",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/597224531"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 882,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/597558092",
      "pull_request_review_id": 616250661,
      "id": 597558092,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzU1ODA5Mg==",
      "diff_hunk": "@@ -0,0 +1,31 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_PACKAGES_H\n+#define BITCOIN_PACKAGES_H\n+\n+#include <consensus/validation.h>\n+#include <primitives/transaction.h>",
      "path": "src/packages.h",
      "position": null,
      "original_position": 9,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "917d4b7cc5347c2bc6f17acd267ea3cccd5f1b75",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n#include <vector>\r\n\r\n#include <consensus/validation.h>\r\n#include <primitives/transaction.h>\r\n```",
      "created_at": "2021-03-19T10:19:38Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r597558092",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/597558092"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": 7,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 11,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/597558738",
      "pull_request_review_id": 616250661,
      "id": 597558738,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzU1ODczOA==",
      "diff_hunk": "@@ -0,0 +1,31 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_PACKAGES_H\n+#define BITCOIN_PACKAGES_H\n+\n+#include <consensus/validation.h>\n+#include <primitives/transaction.h>\n+\n+/** Default maximum number of transactions in a package. */\n+static const unsigned int MAX_PACKAGE_COUNT = 25;",
      "path": "src/packages.h",
      "position": null,
      "original_position": 12,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "917d4b7cc5347c2bc6f17acd267ea3cccd5f1b75",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Can be constexpr, uint32_t and brace initialized :grimacing: \r\n\r\n```suggestion\r\nstatic constexpr uint32_t MAX_PACKAGE_COUNT{25};\r\n```",
      "created_at": "2021-03-19T10:20:32Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r597558738",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/597558738"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 12,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/597561136",
      "pull_request_review_id": 616250661,
      "id": 597561136,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzU2MTEzNg==",
      "diff_hunk": "@@ -923,59 +928,70 @@ static RPCHelpMan testmempoolaccept()\n         UniValueType(), // VNUM or VSTR, checked inside AmountFromValue()\n     });\n \n-    if (request.params[0].get_array().size() != 1) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array must contain exactly one raw transaction for now\");\n+    if (request.params[0].get_array().size() > MAX_PACKAGE_COUNT) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array cannot contain more than \" + ToString(MAX_PACKAGE_COUNT) + \" transactions.\");\n     }\n \n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_array()[0].get_str())) {\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n-    }\n-    CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-\n+    const UniValue raw_transactions = request.params[0].get_array();\n     const CFeeRate max_raw_tx_fee_rate = request.params[1].isNull() ?\n                                              DEFAULT_MAX_RAW_TX_FEE_RATE :\n                                              CFeeRate(AmountFromValue(request.params[1]));\n \n     CTxMemPool& mempool = EnsureMemPool(request.context);\n-    int64_t virtual_size = GetVirtualTransactionSize(*tx);\n-    CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n+    std::vector<CTransactionRef> txns;\n \n-    UniValue result(UniValue::VARR);\n-    UniValue result_0(UniValue::VOBJ);\n-    result_0.pushKV(\"txid\", tx->GetHash().GetHex());\n-    result_0.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n-\n-    const MempoolAcceptResult accept_result = WITH_LOCK(cs_main, return AcceptToMemoryPool(::ChainstateActive(), mempool, std::move(tx),\n-                                                  false /* bypass_limits */, /* test_accept */ true));\n-\n-    // Only return the fee and vsize if the transaction would pass ATMP.\n-    // These can be used to calculate the feerate.\n-    if (accept_result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-        const CAmount fee = accept_result.m_base_fees.value();\n-        // Check that fee does not exceed maximum fee\n-        if (max_raw_tx_fee && fee > max_raw_tx_fee) {\n-            result_0.pushKV(\"allowed\", false);\n-            result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n-        } else {\n-            result_0.pushKV(\"allowed\", true);\n-            result_0.pushKV(\"vsize\", virtual_size);\n-            UniValue fees(UniValue::VOBJ);\n-            fees.pushKV(\"base\", ValueFromAmount(fee));\n-            result_0.pushKV(\"fees\", fees);\n+    for (unsigned int i = 0; i < raw_transactions.size(); ++i) {\n+        CMutableTransaction mtx;\n+        if (!DecodeHexTx(mtx, raw_transactions[i].get_str())) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n         }\n-        result.push_back(std::move(result_0));\n-    } else {\n-        result_0.pushKV(\"allowed\", false);\n-        const TxValidationState state = accept_result.m_state;\n-        if (state.GetResult() == TxValidationResult::TX_MISSING_INPUTS) {\n-            result_0.pushKV(\"reject-reason\", \"missing-inputs\");\n+        txns.emplace_back(MakeTransactionRef(std::move(mtx)));\n+    }\n+\n+    const PackageMempoolAcceptResult& validation_result =\n+        WITH_LOCK(cs_main, return ProcessNewPackage(::ChainstateActive(), mempool, txns, /* test_accept */ true));\n+\n+    UniValue rpc_result(UniValue::VARR);\n+\n+    for (auto tx : txns) {\n+        UniValue result_inner(UniValue::VOBJ);\n+        result_inner.pushKV(\"txid\", tx->GetHash().GetHex());\n+        result_inner.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n+        if (validation_result.m_tx_results.find(tx->GetHash()) == validation_result.m_tx_results.end()) {\n+            // Validation unfinished. Just return the txid and wtxid.\n+            rpc_result.push_back(result_inner);\n+            continue;\n+        }\n+        const auto& accept_result = validation_result.m_tx_results.find(tx->GetHash())->second;",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 113,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "917d4b7cc5347c2bc6f17acd267ea3cccd5f1b75",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No need to do two lookups into the map:\r\n\r\n```suggestion\r\n        auto it = validation_result.m_tx_results.find(tx->GetHash());\r\n        if (it == validation_result.m_tx_results.end()) {\r\n            // Validation unfinished. Just return the txid and wtxid.\r\n            rpc_result.push_back(result_inner);\r\n            continue;\r\n        }\r\n        const auto& accept_result = it->second;\r\n```",
      "created_at": "2021-03-19T10:24:32Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r597561136",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/597561136"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": 960,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 965,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/597567858",
      "pull_request_review_id": 616250661,
      "id": 597567858,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzU2Nzg1OA==",
      "diff_hunk": "@@ -923,59 +928,70 @@ static RPCHelpMan testmempoolaccept()\n         UniValueType(), // VNUM or VSTR, checked inside AmountFromValue()\n     });\n \n-    if (request.params[0].get_array().size() != 1) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array must contain exactly one raw transaction for now\");\n+    if (request.params[0].get_array().size() > MAX_PACKAGE_COUNT) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array cannot contain more than \" + ToString(MAX_PACKAGE_COUNT) + \" transactions.\");\n     }\n \n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_array()[0].get_str())) {\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n-    }\n-    CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-\n+    const UniValue raw_transactions = request.params[0].get_array();\n     const CFeeRate max_raw_tx_fee_rate = request.params[1].isNull() ?\n                                              DEFAULT_MAX_RAW_TX_FEE_RATE :\n                                              CFeeRate(AmountFromValue(request.params[1]));\n \n     CTxMemPool& mempool = EnsureMemPool(request.context);\n-    int64_t virtual_size = GetVirtualTransactionSize(*tx);\n-    CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n+    std::vector<CTransactionRef> txns;\n \n-    UniValue result(UniValue::VARR);\n-    UniValue result_0(UniValue::VOBJ);\n-    result_0.pushKV(\"txid\", tx->GetHash().GetHex());\n-    result_0.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n-\n-    const MempoolAcceptResult accept_result = WITH_LOCK(cs_main, return AcceptToMemoryPool(::ChainstateActive(), mempool, std::move(tx),\n-                                                  false /* bypass_limits */, /* test_accept */ true));\n-\n-    // Only return the fee and vsize if the transaction would pass ATMP.\n-    // These can be used to calculate the feerate.\n-    if (accept_result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-        const CAmount fee = accept_result.m_base_fees.value();\n-        // Check that fee does not exceed maximum fee\n-        if (max_raw_tx_fee && fee > max_raw_tx_fee) {\n-            result_0.pushKV(\"allowed\", false);\n-            result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n-        } else {\n-            result_0.pushKV(\"allowed\", true);\n-            result_0.pushKV(\"vsize\", virtual_size);\n-            UniValue fees(UniValue::VOBJ);\n-            fees.pushKV(\"base\", ValueFromAmount(fee));\n-            result_0.pushKV(\"fees\", fees);\n+    for (unsigned int i = 0; i < raw_transactions.size(); ++i) {\n+        CMutableTransaction mtx;\n+        if (!DecodeHexTx(mtx, raw_transactions[i].get_str())) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n         }\n-        result.push_back(std::move(result_0));\n-    } else {\n-        result_0.pushKV(\"allowed\", false);\n-        const TxValidationState state = accept_result.m_state;\n-        if (state.GetResult() == TxValidationResult::TX_MISSING_INPUTS) {\n-            result_0.pushKV(\"reject-reason\", \"missing-inputs\");\n+        txns.emplace_back(MakeTransactionRef(std::move(mtx)));\n+    }\n+\n+    const PackageMempoolAcceptResult& validation_result =\n+        WITH_LOCK(cs_main, return ProcessNewPackage(::ChainstateActive(), mempool, txns, /* test_accept */ true));",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 100,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "917d4b7cc5347c2bc6f17acd267ea3cccd5f1b75",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Perhaps avoid using the global `::ChainstateActive()` function to avoid conflict with #21391 \r\n\r\n```diff\r\ndiff --git a/src/rpc/rawtransaction.cpp b/src/rpc/rawtransaction.cpp\r\nindex cddb082c2f..1ad0b16545 100644\r\n--- a/src/rpc/rawtransaction.cpp\r\n+++ b/src/rpc/rawtransaction.cpp\r\n@@ -938,6 +938,8 @@ static RPCHelpMan testmempoolaccept()\r\n                                              CFeeRate(AmountFromValue(request.params[1]));\r\n \r\n     CTxMemPool& mempool = EnsureMemPool(request.context);\r\n+    CChainState& chainstate = EnsureChainman(request.context).ActiveChainstate();\r\n     std::vector<CTransactionRef> txns;\r\n \r\n     for (unsigned int i = 0; i < raw_transactions.size(); ++i) {\r\n@@ -949,7 +951,7 @@ static RPCHelpMan testmempoolaccept()\r\n     }\r\n \r\n     const PackageMempoolAcceptResult& validation_result =\r\n-        WITH_LOCK(cs_main, return ProcessNewPackage(::ChainstateActive(), mempool, txns, /* test_accept */ true));\r\n+        WITH_LOCK(cs_main, return ProcessNewPackage(chainstate, mempool, txns, /* test_accept */ true));\r\n \r\n     UniValue rpc_result(UniValue::VARR);\r\n```",
      "created_at": "2021-03-19T10:35:06Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r597567858",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/597567858"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 952,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/597574361",
      "pull_request_review_id": 616250661,
      "id": 597574361,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzU3NDM2MQ==",
      "diff_hunk": "@@ -187,34 +188,68 @@ void PruneBlockFilesManual(CChainState& active_chainstate, int nManualPruneHeigh\n * Validation result for a single transaction mempool acceptance.\n */\n struct MempoolAcceptResult {\n-    /** Used to indicate the results of mempool validation,\n-    * including the possibility of unfinished validation.\n+    /** Used to indicate the results of mempool validation.\n+    * It's possible for a result to be unknown in the case of\n+    * package validation when an earlier tx fails and validation\n+    * is terminated early. See ResultType::UNFINISHED.\n     */\n     enum class ResultType {\n         VALID, //!> Fully validated, valid.\n         INVALID, //!> Invalid.\n     };\n-    ResultType m_result_type;\n-    TxValidationState m_state;\n+    const ResultType m_result_type;\n+    const TxValidationState m_state;\n \n     // The following fields are only present when m_result_type = ResultType::VALID\n     /** Mempool transactions replaced by the tx per BIP 125 rules. */\n-    std::optional<std::list<CTransactionRef>> m_replaced_transactions;\n-    /** Raw base fees. */\n-    std::optional<CAmount> m_base_fees;\n+    const std::optional<std::list<CTransactionRef>> m_replaced_transactions;\n+    /** Raw base fees in satoshis. */\n+    const std::optional<CAmount> m_base_fees;\n \n+    static MempoolAcceptResult Failure(const TxValidationState state) {\n+        return MempoolAcceptResult(state);\n+    }\n+\n+    static MempoolAcceptResult Success(std::list<CTransactionRef>&& replaced_txns, const CAmount fees) {\n+        return MempoolAcceptResult(std::move(replaced_txns), fees);\n+    }\n+\n+// Private constructors. Use static methods MempoolAcceptResult::Success, etc. to construct.\n+private:\n     /** Constructor for failure case */\n-    explicit MempoolAcceptResult(TxValidationState state)\n-        : m_result_type(ResultType::INVALID), m_state(state) {\n+    explicit MempoolAcceptResult(const TxValidationState state)\n+        : m_result_type{ResultType::INVALID}, m_state{state}, m_replaced_transactions(std::nullopt),\n+        m_base_fees{std::nullopt} {\n             Assume(!state.IsValid()); // Can be invalid or error\n         }\n \n     /** Constructor for success case */\n-    explicit MempoolAcceptResult(std::list<CTransactionRef>&& replaced_txns, CAmount fees)\n-        : m_result_type(ResultType::VALID), m_state(TxValidationState{}),\n+    explicit MempoolAcceptResult(std::list<CTransactionRef>&& replaced_txns, const CAmount fees)\n+        : m_result_type{ResultType::VALID}, m_state{},\n         m_replaced_transactions(std::move(replaced_txns)), m_base_fees(fees) {}\n };\n \n+/**\n+* Validation result for package mempool acceptance.\n+*/\n+struct PackageMempoolAcceptResult\n+{\n+    PackageValidationState m_state;\n+    /** Map from txid to finished MempoolAcceptResults. The client is responsible\n+    * for keeping track of the transaction objects themselves. If a result is not\n+    * present, it means the validation was unfinished for that transaction.\n+    */\n+    std::map<const uint256, const MempoolAcceptResult> m_tx_results;\n+\n+    explicit PackageMempoolAcceptResult(const PackageValidationState& state,\n+                                        std::map<const uint256, const MempoolAcceptResult>&& results)\n+        : m_state{state}, m_tx_results(std::move(results)) {}\n+\n+    /** Constructor to create a PackageMempoolAcceptResult from a single MempoolAcceptResult */\n+    explicit PackageMempoolAcceptResult(const uint256& txid, const MempoolAcceptResult& result)\n+        : m_state{}, m_tx_results{ {txid, result} } {}",
      "path": "src/validation.h",
      "position": null,
      "original_position": 82,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "917d4b7cc5347c2bc6f17acd267ea3cccd5f1b75",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No need to specify default initialization in the initializer list. It'll happen anyway:\r\n\r\n```suggestion\r\n        : m_tx_results{ {txid, result} } {}\r\n```",
      "created_at": "2021-03-19T10:45:08Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r597574361",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/597574361"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 250,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/597580310",
      "pull_request_review_id": 616250661,
      "id": 597580310,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzU4MDMxMA==",
      "diff_hunk": "@@ -1120,6 +1308,32 @@ MempoolAcceptResult AcceptToMemoryPool(CChainState& active_chainstate, CTxMemPoo\n     return AcceptToMemoryPoolWithTime(Params(), pool, active_chainstate, tx, GetTime(), bypass_limits, test_accept);\n }\n \n+PackageMempoolAcceptResult ProcessNewPackage(CChainState& active_chainstate, CTxMemPool& pool,\n+                                                   const Package& package, bool test_accept)\n+{\n+    AssertLockHeld(cs_main);\n+    assert(test_accept); // Only allow package accept dry-runs (testmempoolaccept RPC).\n+\n+    std::vector<COutPoint> coins_to_uncache;\n+    const CChainParams& chainparams = Params();\n+    MemPoolAccept::ATMPArgs args { chainparams, GetTime(), /* bypass_limits */ false, coins_to_uncache, test_accept };\n+    assert(std::addressof(::ChainstateActive()) == std::addressof(active_chainstate));\n+    const PackageMempoolAcceptResult& result = package.size() > 1\n+    ? MemPoolAccept(pool, active_chainstate).AcceptMultipleTransactions(package, args)\n+    : PackageMempoolAcceptResult(package[0]->GetHash(),\n+                                 MemPoolAccept(pool, active_chainstate).AcceptSingleTransaction(package[0], args));\n+\n+    // Uncache coins pertaining to transactions that were not submitted to the mempool.\n+    // Ensure the cache is still within its size limits.\n+    for (const COutPoint& hashTx : coins_to_uncache) {\n+        active_chainstate.CoinsTip().Uncache(hashTx);\n+    }\n+    BlockValidationState state_dummy;\n+    ::ChainstateActive().FlushStateToDisk(chainparams, state_dummy, FlushStateMode::PERIODIC);",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 336,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "917d4b7cc5347c2bc6f17acd267ea3cccd5f1b75",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Avoid the global `::ChainstateActive()` function:\r\n\r\n```suggestion\r\n    active_chainstate.FlushStateToDisk(chainparams, state_dummy, FlushStateMode::PERIODIC);\r\n```",
      "created_at": "2021-03-19T10:50:41Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r597580310",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/597580310"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1332,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/597582750",
      "pull_request_review_id": 616250661,
      "id": 597582750,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzU4Mjc1MA==",
      "diff_hunk": "@@ -1120,6 +1308,32 @@ MempoolAcceptResult AcceptToMemoryPool(CChainState& active_chainstate, CTxMemPoo\n     return AcceptToMemoryPoolWithTime(Params(), pool, active_chainstate, tx, GetTime(), bypass_limits, test_accept);\n }\n \n+PackageMempoolAcceptResult ProcessNewPackage(CChainState& active_chainstate, CTxMemPool& pool,\n+                                                   const Package& package, bool test_accept)\n+{\n+    AssertLockHeld(cs_main);\n+    assert(test_accept); // Only allow package accept dry-runs (testmempoolaccept RPC).\n+\n+    std::vector<COutPoint> coins_to_uncache;\n+    const CChainParams& chainparams = Params();\n+    MemPoolAccept::ATMPArgs args { chainparams, GetTime(), /* bypass_limits */ false, coins_to_uncache, test_accept };\n+    assert(std::addressof(::ChainstateActive()) == std::addressof(active_chainstate));\n+    const PackageMempoolAcceptResult& result = package.size() > 1",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 325,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "917d4b7cc5347c2bc6f17acd267ea3cccd5f1b75",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This looks unsafe to me. You're taking a reference to a temporary (the return value from `AcceptMultipleTransactions()` or `PackageMempoolAcceptResult()`)",
      "created_at": "2021-03-19T10:53:10Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r597582750",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/597582750"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1321,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/597583016",
      "pull_request_review_id": 616250661,
      "id": 597583016,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzU4MzAxNg==",
      "diff_hunk": "@@ -1120,6 +1308,32 @@ MempoolAcceptResult AcceptToMemoryPool(CChainState& active_chainstate, CTxMemPoo\n     return AcceptToMemoryPoolWithTime(Params(), pool, active_chainstate, tx, GetTime(), bypass_limits, test_accept);\n }\n \n+PackageMempoolAcceptResult ProcessNewPackage(CChainState& active_chainstate, CTxMemPool& pool,\n+                                                   const Package& package, bool test_accept)\n+{\n+    AssertLockHeld(cs_main);\n+    assert(test_accept); // Only allow package accept dry-runs (testmempoolaccept RPC).\n+\n+    std::vector<COutPoint> coins_to_uncache;\n+    const CChainParams& chainparams = Params();\n+    MemPoolAccept::ATMPArgs args { chainparams, GetTime(), /* bypass_limits */ false, coins_to_uncache, test_accept };\n+    assert(std::addressof(::ChainstateActive()) == std::addressof(active_chainstate));\n+    const PackageMempoolAcceptResult& result = package.size() > 1",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 325,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "917d4b7cc5347c2bc6f17acd267ea3cccd5f1b75",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "What happens here if you always call `AcceptMultipleTransactions()` (even for a single transaction?)",
      "created_at": "2021-03-19T10:53:25Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r597583016",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/597583016"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1321,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/597590521",
      "pull_request_review_id": 616250661,
      "id": 597590521,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzU5MDUyMQ==",
      "diff_hunk": "@@ -1060,28 +1184,92 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n \n     Workspace ws(ptx);\n \n-    if (!PreChecks(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!PreChecks(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n-    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Tx was accepted, but not added\n     if (args.m_test_accept) {\n-        return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+        return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n     }\n \n-    if (!Finalize(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!Finalize(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+    return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+}\n+\n+PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::vector<CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    PackageValidationState package_state;\n+    // Check static package limits before taking the mempool lock.\n+    const unsigned int package_count = txns.size();\n+    if (package_count > MAX_PACKAGE_COUNT) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"too-many-transactions\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    const int64_t total_size = std::accumulate(txns.cbegin(), txns.cend(), 0,\n+        [](int64_t sum, const auto& tx) { return sum + GetVirtualTransactionSize(*tx); });\n+    if (total_size > MAX_PACKAGE_SIZE * 1000) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"too-large\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    std::vector<Workspace> workspaces{};\n+    workspaces.reserve(package_count);\n+    std::transform(txns.cbegin(), txns.cend(), std::back_inserter(workspaces), [](const auto& tx) {\n+        return Workspace(tx);\n+    });\n+\n+    LOCK(m_pool.cs);\n+\n+    std::map<const uint256, const MempoolAcceptResult> results;\n+    // Do all PreChecks first and fail fast to avoid running expensive script checks when unnecessary.\n+    for (Workspace& ws : workspaces) {\n+        if (!PreChecks(args, ws)) {\n+            package_state.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n+            // Exit early to avoid doing pointless work. Update the failed tx result; the rest are unfinished.\n+            results.emplace(ws.m_ptx->GetHash(), MempoolAcceptResult::Failure(ws.m_state));\n+            return PackageMempoolAcceptResult(package_state, std::move(results));\n+        }\n+        m_view.PackageAddTransaction(ws.m_ptx);\n+    }\n+\n+    // We have now verified all inputs are available and there are no conflicts in the package by\n+    // marking coins (temporarily) spent in m_view. However, since script checks will assert that\n+    // each coin has not been spent as a sanity check, we need to clear m_view.m_temp_spent so that\n+    // script checks don't fail on those asserts.\n+    m_view.ClearTemporarySpends();\n+\n+    for (Workspace& ws : workspaces) {\n+        PrecomputedTransactionData txdata;\n+        if (!PolicyScriptChecks(args, ws, txdata)) {\n+            // Exit early to avoid doing pointless work. Update the failed tx result; the rest are unfinished.\n+            package_state.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n+            results.emplace(ws.m_ptx->GetHash(), MempoolAcceptResult::Failure(ws.m_state));\n+            return PackageMempoolAcceptResult(package_state, std::move(results));\n+        }\n+        // When test_accept=true, transactions that pass PolicyScriptChecks are valid because there are\n+        // no further mempool checks (passing PolicyScriptChecks implies passing ConsensusScriptChecks).\n+        results.emplace(ws.m_ptx->GetHash(),\n+                        MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees));\n+    }\n+\n+    m_view.ClearTemporaryCoins();",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 294,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "917d4b7cc5347c2bc6f17acd267ea3cccd5f1b75",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Is this needed?",
      "created_at": "2021-03-19T11:01:53Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r597590521",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/597590521"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1270,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/597758740",
      "pull_request_review_id": 616509254,
      "id": 597758740,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5Nzc1ODc0MA==",
      "diff_hunk": "@@ -1120,6 +1308,32 @@ MempoolAcceptResult AcceptToMemoryPool(CChainState& active_chainstate, CTxMemPoo\n     return AcceptToMemoryPoolWithTime(Params(), pool, active_chainstate, tx, GetTime(), bypass_limits, test_accept);\n }\n \n+PackageMempoolAcceptResult ProcessNewPackage(CChainState& active_chainstate, CTxMemPool& pool,\n+                                                   const Package& package, bool test_accept)\n+{\n+    AssertLockHeld(cs_main);\n+    assert(test_accept); // Only allow package accept dry-runs (testmempoolaccept RPC).\n+\n+    std::vector<COutPoint> coins_to_uncache;\n+    const CChainParams& chainparams = Params();\n+    MemPoolAccept::ATMPArgs args { chainparams, GetTime(), /* bypass_limits */ false, coins_to_uncache, test_accept };\n+    assert(std::addressof(::ChainstateActive()) == std::addressof(active_chainstate));\n+    const PackageMempoolAcceptResult& result = package.size() > 1",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 325,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "917d4b7cc5347c2bc6f17acd267ea3cccd5f1b75",
      "in_reply_to_id": 597583016,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The way I have it right now, it `AcceptMultipleTransactions()` should give an identical result to `AcceptSingleTransaction()` except that multiple allows 101KvB total size (so theoretically you could have 1 tx of size 101KvB)... can't think of any other differences. But should the rules diverge further for 1 tx vs package, it'll cause some of the current `testmempoolaccept` tests to fail. I was playing around with disabling RBF for packages and ran into that, so I wanted to separate the code paths",
      "created_at": "2021-03-19T15:12:31Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r597758740",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/597758740"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1321,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/597759075",
      "pull_request_review_id": 616509759,
      "id": 597759075,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5Nzc1OTA3NQ==",
      "diff_hunk": "@@ -923,59 +928,70 @@ static RPCHelpMan testmempoolaccept()\n         UniValueType(), // VNUM or VSTR, checked inside AmountFromValue()\n     });\n \n-    if (request.params[0].get_array().size() != 1) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array must contain exactly one raw transaction for now\");\n+    if (request.params[0].get_array().size() > MAX_PACKAGE_COUNT) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array cannot contain more than \" + ToString(MAX_PACKAGE_COUNT) + \" transactions.\");\n     }\n \n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_array()[0].get_str())) {\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n-    }\n-    CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-\n+    const UniValue raw_transactions = request.params[0].get_array();\n     const CFeeRate max_raw_tx_fee_rate = request.params[1].isNull() ?\n                                              DEFAULT_MAX_RAW_TX_FEE_RATE :\n                                              CFeeRate(AmountFromValue(request.params[1]));\n \n     CTxMemPool& mempool = EnsureMemPool(request.context);\n-    int64_t virtual_size = GetVirtualTransactionSize(*tx);\n-    CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n+    std::vector<CTransactionRef> txns;\n \n-    UniValue result(UniValue::VARR);\n-    UniValue result_0(UniValue::VOBJ);\n-    result_0.pushKV(\"txid\", tx->GetHash().GetHex());\n-    result_0.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n-\n-    const MempoolAcceptResult accept_result = WITH_LOCK(cs_main, return AcceptToMemoryPool(::ChainstateActive(), mempool, std::move(tx),\n-                                                  false /* bypass_limits */, /* test_accept */ true));\n-\n-    // Only return the fee and vsize if the transaction would pass ATMP.\n-    // These can be used to calculate the feerate.\n-    if (accept_result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-        const CAmount fee = accept_result.m_base_fees.value();\n-        // Check that fee does not exceed maximum fee\n-        if (max_raw_tx_fee && fee > max_raw_tx_fee) {\n-            result_0.pushKV(\"allowed\", false);\n-            result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n-        } else {\n-            result_0.pushKV(\"allowed\", true);\n-            result_0.pushKV(\"vsize\", virtual_size);\n-            UniValue fees(UniValue::VOBJ);\n-            fees.pushKV(\"base\", ValueFromAmount(fee));\n-            result_0.pushKV(\"fees\", fees);\n+    for (unsigned int i = 0; i < raw_transactions.size(); ++i) {\n+        CMutableTransaction mtx;\n+        if (!DecodeHexTx(mtx, raw_transactions[i].get_str())) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n         }\n-        result.push_back(std::move(result_0));\n-    } else {\n-        result_0.pushKV(\"allowed\", false);\n-        const TxValidationState state = accept_result.m_state;\n-        if (state.GetResult() == TxValidationResult::TX_MISSING_INPUTS) {\n-            result_0.pushKV(\"reject-reason\", \"missing-inputs\");\n+        txns.emplace_back(MakeTransactionRef(std::move(mtx)));\n+    }\n+\n+    const PackageMempoolAcceptResult& validation_result =\n+        WITH_LOCK(cs_main, return ProcessNewPackage(::ChainstateActive(), mempool, txns, /* test_accept */ true));",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 100,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "917d4b7cc5347c2bc6f17acd267ea3cccd5f1b75",
      "in_reply_to_id": 597567858,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "gah of course, my bad 🤦 will do",
      "created_at": "2021-03-19T15:12:58Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r597759075",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/597759075"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 952,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/597765318",
      "pull_request_review_id": 616517864,
      "id": 597765318,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5Nzc2NTMxOA==",
      "diff_hunk": "@@ -1060,28 +1176,93 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n \n     Workspace ws(ptx);\n \n-    if (!PreChecks(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!PreChecks(args, ws)) return MempoolAcceptResult(*ws.m_ptx, ws.m_state);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(*ws.m_ptx, ws.m_state);\n \n-    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(*ws.m_ptx, ws.m_state);\n \n     // Tx was accepted, but not added\n     if (args.m_test_accept) {\n-        return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+        return MempoolAcceptResult(*ws.m_ptx, std::move(ws.m_replaced_transactions), ws.m_base_fees);\n     }\n \n-    if (!Finalize(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!Finalize(args, ws)) return MempoolAcceptResult(*ws.m_ptx, ws.m_state);\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+    return MempoolAcceptResult(*ws.m_ptx, std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+}\n+\n+std::vector<MempoolAcceptResult> MemPoolAccept::AcceptMultipleTransactions(std::vector<CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    std::vector<Workspace> workspaces{};\n+    const int package_size = txns.size();\n+    workspaces.reserve(package_size);\n+    std::transform(txns.begin(), txns.end(), std::back_inserter(workspaces), [](CTransactionRef& tx) {\n+        return Workspace(tx);\n+    });\n+    std::vector<MempoolAcceptResult> results;\n+    results.reserve(package_size);\n+\n+    LOCK(m_pool.cs);\n+    // Do all PreChecks first and fail fast to avoid running expensive script checks when unnecessary.\n+    for (Workspace& ws : workspaces) {\n+        if (!PreChecks(args, ws)) {\n+            // Exit early to avoid doing pointless work. Return results in the same order as input txns.\n+            const auto failed_or_unfinished = [&, failed_ptx = ws.m_ptx](Workspace& ws) {\n+                                              return ws.m_ptx == failed_ptx\n+                                              ? MempoolAcceptResult(*ws.m_ptx, ws.m_state, /* finished */ true)\n+                                              : MempoolAcceptResult(*ws.m_ptx, ws.m_state, /* finished */ false);\n+            };\n+            std::transform(workspaces.begin(), workspaces.end(), std::back_inserter(results), failed_or_unfinished);\n+            return results;\n+        }\n+        m_view.PackageAddTransaction(ws.m_ptx);\n+    }\n+\n+    // Now that we have verified all inputs are available and there are no conflicts in the package,\n+    // clear the temporary coins (m_temp_added and m_temp_spent), otherwise script checks will error\n+    // on coins that are spent within the package.\n+    m_view.ClearTemporaryCoins();\n+\n+    for (Workspace& ws : workspaces) {\n+        PrecomputedTransactionData txdata;\n+        if (!PolicyScriptChecks(args, ws, txdata)) {\n+            // Exit early to avoid doing pointless work. Return results in the same order as input txns.\n+            CTransactionRef failed_ptx = ws.m_ptx;\n+            const auto failed_or_unfinished = [&failed_ptx](Workspace& ws) {\n+                                              return ws.m_ptx == failed_ptx\n+                                              ? MempoolAcceptResult(*ws.m_ptx, ws.m_state, /* finished */ true)\n+                                              : MempoolAcceptResult(*ws.m_ptx, ws.m_state, /* finished */ false);\n+            };\n+            auto it_curr = std::find_if(workspaces.begin(), workspaces.end(),\n+                                        [& failed_ptx](Workspace& ws) { return ws.m_ptx == failed_ptx; });\n+            // When test_accept=true, transactions that pass PolicyScriptChecks are valid because there are\n+            // no further mempool checks (passing PolicyScriptChecks implies passing ConsensusScriptChecks).",
      "path": "src/validation.cpp",
      "position": 223,
      "original_position": 266,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "in_reply_to_id": 594502100,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> I think you're forgetting the mempool size check in Finalize\r\n\r\nWe have a feerate check against the mempool minimum fee in `CheckFeeRate()` (in `PreChecks()`). The trim to size is done after submitting to mempool just in case it wasn't accurate (and I suspect the mempool lock was perhaps not held the whole time in the past, so it was possible for the mempool to grow in the time we were doing script checks?). On master, a test_accept for one transaction stops short of calling `Finalize()` and doesn't do this check either. \r\n\r\nI prefer using `CheckFeeRate()` for a test_accept; there's no need to submit to mempool, update everything, and then remove it again and re-update everything, just to check size limits. Since we would release the lock at the end of the testmempoolaccept call, it's possible for the mempool to grow before the user submits it anyway, so it's not like we're guaranteed an accurate result by doing this.",
      "created_at": "2021-03-19T15:20:50Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r597765318",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/597765318"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1168,
      "original_line": 1168,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/597768912",
      "pull_request_review_id": 616522486,
      "id": 597768912,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5Nzc2ODkxMg==",
      "diff_hunk": "@@ -1060,28 +1176,93 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n \n     Workspace ws(ptx);\n \n-    if (!PreChecks(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!PreChecks(args, ws)) return MempoolAcceptResult(*ws.m_ptx, ws.m_state);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(*ws.m_ptx, ws.m_state);\n \n-    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(*ws.m_ptx, ws.m_state);\n \n     // Tx was accepted, but not added\n     if (args.m_test_accept) {\n-        return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+        return MempoolAcceptResult(*ws.m_ptx, std::move(ws.m_replaced_transactions), ws.m_base_fees);\n     }\n \n-    if (!Finalize(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!Finalize(args, ws)) return MempoolAcceptResult(*ws.m_ptx, ws.m_state);\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+    return MempoolAcceptResult(*ws.m_ptx, std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+}\n+\n+std::vector<MempoolAcceptResult> MemPoolAccept::AcceptMultipleTransactions(std::vector<CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    std::vector<Workspace> workspaces{};\n+    const int package_size = txns.size();\n+    workspaces.reserve(package_size);\n+    std::transform(txns.begin(), txns.end(), std::back_inserter(workspaces), [](CTransactionRef& tx) {\n+        return Workspace(tx);\n+    });\n+    std::vector<MempoolAcceptResult> results;\n+    results.reserve(package_size);\n+\n+    LOCK(m_pool.cs);\n+    // Do all PreChecks first and fail fast to avoid running expensive script checks when unnecessary.\n+    for (Workspace& ws : workspaces) {\n+        if (!PreChecks(args, ws)) {\n+            // Exit early to avoid doing pointless work. Return results in the same order as input txns.\n+            const auto failed_or_unfinished = [&, failed_ptx = ws.m_ptx](Workspace& ws) {\n+                                              return ws.m_ptx == failed_ptx\n+                                              ? MempoolAcceptResult(*ws.m_ptx, ws.m_state, /* finished */ true)\n+                                              : MempoolAcceptResult(*ws.m_ptx, ws.m_state, /* finished */ false);\n+            };\n+            std::transform(workspaces.begin(), workspaces.end(), std::back_inserter(results), failed_or_unfinished);\n+            return results;\n+        }\n+        m_view.PackageAddTransaction(ws.m_ptx);\n+    }\n+\n+    // Now that we have verified all inputs are available and there are no conflicts in the package,\n+    // clear the temporary coins (m_temp_added and m_temp_spent), otherwise script checks will error\n+    // on coins that are spent within the package.\n+    m_view.ClearTemporaryCoins();\n+\n+    for (Workspace& ws : workspaces) {\n+        PrecomputedTransactionData txdata;\n+        if (!PolicyScriptChecks(args, ws, txdata)) {\n+            // Exit early to avoid doing pointless work. Return results in the same order as input txns.\n+            CTransactionRef failed_ptx = ws.m_ptx;\n+            const auto failed_or_unfinished = [&failed_ptx](Workspace& ws) {\n+                                              return ws.m_ptx == failed_ptx\n+                                              ? MempoolAcceptResult(*ws.m_ptx, ws.m_state, /* finished */ true)\n+                                              : MempoolAcceptResult(*ws.m_ptx, ws.m_state, /* finished */ false);\n+            };\n+            auto it_curr = std::find_if(workspaces.begin(), workspaces.end(),\n+                                        [& failed_ptx](Workspace& ws) { return ws.m_ptx == failed_ptx; });\n+            // When test_accept=true, transactions that pass PolicyScriptChecks are valid because there are\n+            // no further mempool checks (passing PolicyScriptChecks implies passing ConsensusScriptChecks).",
      "path": "src/validation.cpp",
      "position": 223,
      "original_position": 266,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "in_reply_to_id": 594502100,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Beyond the fact that policy flags are a superset of the consensus ones, you could also recall that's running `ConsensusScriptChecks` isn't worthy here as we don't try to cache script results.\r\n\r\nYep, I agree! See also [this discussion](https://github.com/bitcoin/bitcoin/pull/20833#discussion_r552684985).",
      "created_at": "2021-03-19T15:25:23Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r597768912",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/597768912"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1168,
      "original_line": 1168,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/597769305",
      "pull_request_review_id": 616522992,
      "id": 597769305,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5Nzc2OTMwNQ==",
      "diff_hunk": "@@ -1120,6 +1304,30 @@ MempoolAcceptResult AcceptToMemoryPool(CChainState& active_chainstate, CTxMemPoo\n     return AcceptToMemoryPoolWithTime(Params(), pool, active_chainstate, tx, GetTime(), bypass_limits, test_accept);\n }\n \n+std::vector<MempoolAcceptResult> ProcessNewPackage(CChainState& active_chainstate, CTxMemPool& pool,\n+                                                   std::vector<CTransactionRef>& txns, bool test_accept)\n+{\n+    AssertLockHeld(cs_main);\n+    assert(test_accept); // Only allow package accept dry-runs (testmempoolaccept RPC).",
      "path": "src/validation.cpp",
      "position": 251,
      "original_position": 304,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "in_reply_to_id": 594447808,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added a max size and max count in the latest push :)",
      "created_at": "2021-03-19T15:25:51Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r597769305",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/597769305"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1218,
      "original_line": 1218,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/597855446",
      "pull_request_review_id": 616638517,
      "id": 597855446,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5Nzg1NTQ0Ng==",
      "diff_hunk": "@@ -1120,6 +1308,32 @@ MempoolAcceptResult AcceptToMemoryPool(CChainState& active_chainstate, CTxMemPoo\n     return AcceptToMemoryPoolWithTime(Params(), pool, active_chainstate, tx, GetTime(), bypass_limits, test_accept);\n }\n \n+PackageMempoolAcceptResult ProcessNewPackage(CChainState& active_chainstate, CTxMemPool& pool,\n+                                                   const Package& package, bool test_accept)\n+{\n+    AssertLockHeld(cs_main);\n+    assert(test_accept); // Only allow package accept dry-runs (testmempoolaccept RPC).\n+\n+    std::vector<COutPoint> coins_to_uncache;\n+    const CChainParams& chainparams = Params();\n+    MemPoolAccept::ATMPArgs args { chainparams, GetTime(), /* bypass_limits */ false, coins_to_uncache, test_accept };\n+    assert(std::addressof(::ChainstateActive()) == std::addressof(active_chainstate));\n+    const PackageMempoolAcceptResult& result = package.size() > 1",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 325,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "917d4b7cc5347c2bc6f17acd267ea3cccd5f1b75",
      "in_reply_to_id": 597582750,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I was wrong. The lifetime of the temporary is extended by binding it to the const lvalue reference: https://en.cppreference.com/w/cpp/language/lifetime#Temporary_object_lifetime.\r\n\r\nStill, I think it'd be better to make `result` a `PackageMempoolAcceptResult`. I think RVO will mean it doesn't result in an extra copy.",
      "created_at": "2021-03-19T17:26:23Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r597855446",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/597855446"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1321,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/603685544",
      "pull_request_review_id": 623736179,
      "id": 603685544,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMzY4NTU0NA==",
      "diff_hunk": "@@ -1060,28 +1184,92 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n \n     Workspace ws(ptx);\n \n-    if (!PreChecks(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!PreChecks(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n-    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Tx was accepted, but not added\n     if (args.m_test_accept) {\n-        return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+        return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n     }\n \n-    if (!Finalize(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!Finalize(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+    return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+}\n+\n+PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::vector<CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    PackageValidationState package_state;\n+    // Check static package limits before taking the mempool lock.\n+    const unsigned int package_count = txns.size();\n+    if (package_count > MAX_PACKAGE_COUNT) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"too-many-transactions\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    const int64_t total_size = std::accumulate(txns.cbegin(), txns.cend(), 0,\n+        [](int64_t sum, const auto& tx) { return sum + GetVirtualTransactionSize(*tx); });\n+    if (total_size > MAX_PACKAGE_SIZE * 1000) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"too-large\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    std::vector<Workspace> workspaces{};\n+    workspaces.reserve(package_count);\n+    std::transform(txns.cbegin(), txns.cend(), std::back_inserter(workspaces), [](const auto& tx) {\n+        return Workspace(tx);\n+    });\n+\n+    LOCK(m_pool.cs);\n+\n+    std::map<const uint256, const MempoolAcceptResult> results;\n+    // Do all PreChecks first and fail fast to avoid running expensive script checks when unnecessary.\n+    for (Workspace& ws : workspaces) {\n+        if (!PreChecks(args, ws)) {\n+            package_state.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n+            // Exit early to avoid doing pointless work. Update the failed tx result; the rest are unfinished.\n+            results.emplace(ws.m_ptx->GetHash(), MempoolAcceptResult::Failure(ws.m_state));\n+            return PackageMempoolAcceptResult(package_state, std::move(results));\n+        }\n+        m_view.PackageAddTransaction(ws.m_ptx);\n+    }\n+\n+    // We have now verified all inputs are available and there are no conflicts in the package by\n+    // marking coins (temporarily) spent in m_view. However, since script checks will assert that\n+    // each coin has not been spent as a sanity check, we need to clear m_view.m_temp_spent so that\n+    // script checks don't fail on those asserts.\n+    m_view.ClearTemporarySpends();\n+\n+    for (Workspace& ws : workspaces) {\n+        PrecomputedTransactionData txdata;\n+        if (!PolicyScriptChecks(args, ws, txdata)) {\n+            // Exit early to avoid doing pointless work. Update the failed tx result; the rest are unfinished.\n+            package_state.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n+            results.emplace(ws.m_ptx->GetHash(), MempoolAcceptResult::Failure(ws.m_state));\n+            return PackageMempoolAcceptResult(package_state, std::move(results));\n+        }\n+        // When test_accept=true, transactions that pass PolicyScriptChecks are valid because there are\n+        // no further mempool checks (passing PolicyScriptChecks implies passing ConsensusScriptChecks).\n+        results.emplace(ws.m_ptx->GetHash(),\n+                        MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees));\n+    }\n+\n+    m_view.ClearTemporaryCoins();",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 294,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "917d4b7cc5347c2bc6f17acd267ea3cccd5f1b75",
      "in_reply_to_id": 597590521,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "![image](https://user-images.githubusercontent.com/25183001/112912067-8760af80-90ab-11eb-9967-97a6c6b3442d.png)\r\n\r\n(removed for now)",
      "created_at": "2021-03-29T23:49:19Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r603685544",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/603685544"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1270,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/603686184",
      "pull_request_review_id": 623736858,
      "id": 603686184,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMzY4NjE4NA==",
      "diff_hunk": "@@ -1120,6 +1308,32 @@ MempoolAcceptResult AcceptToMemoryPool(CChainState& active_chainstate, CTxMemPoo\n     return AcceptToMemoryPoolWithTime(Params(), pool, active_chainstate, tx, GetTime(), bypass_limits, test_accept);\n }\n \n+PackageMempoolAcceptResult ProcessNewPackage(CChainState& active_chainstate, CTxMemPool& pool,\n+                                                   const Package& package, bool test_accept)\n+{\n+    AssertLockHeld(cs_main);\n+    assert(test_accept); // Only allow package accept dry-runs (testmempoolaccept RPC).\n+\n+    std::vector<COutPoint> coins_to_uncache;\n+    const CChainParams& chainparams = Params();\n+    MemPoolAccept::ATMPArgs args { chainparams, GetTime(), /* bypass_limits */ false, coins_to_uncache, test_accept };\n+    assert(std::addressof(::ChainstateActive()) == std::addressof(active_chainstate));\n+    const PackageMempoolAcceptResult& result = package.size() > 1",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 325,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "917d4b7cc5347c2bc6f17acd267ea3cccd5f1b75",
      "in_reply_to_id": 597582750,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "chonged to be a `PackageMempoolAcceptResult`",
      "created_at": "2021-03-29T23:51:11Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r603686184",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/603686184"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1321,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/603688999",
      "pull_request_review_id": 623739855,
      "id": 603688999,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMzY4ODk5OQ==",
      "diff_hunk": "@@ -465,6 +463,114 @@ static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationS\n     return CheckInputScripts(tx, state, view, flags, /* cacheSigStore = */ true, /* cacheFullSciptStore = */ true, txdata);\n }\n \n+/** An empty coin used as a placeholder for a spent coin.*/\n+static const Coin coin_spent;\n+/**\n+ * A CoinsView that adds a memory cache to another CoinsView and serves as temporary scratch space.\n+ * Used by MemPoolAccept class to validate transactions and packages before submitting to mempool.\n+ * A backend can be set to provide read access to chainstate and/or mempool coins, but writing to\n+ * the backend is disabled. Avoid using a CCoinsViewTemporary in consensus-critical paths such\n+ * as writing to the script cache. See CheckInputsFromMempoolAndCache as an example. When not being\n+ * used to validate a package (m_temp_added and m_temp_spent are empty), a CCoinsViewTemporary\n+ * behaves exactly like a CCoinsViewCache.\n+ */\n+class CCoinsViewTemporary : public CCoinsViewCache\n+{\n+protected:\n+    /**\n+    * Coins made available by transactions being validated. Tracking these allows for package\n+    * validation, since we can access transaction outputs without submitting them to mempool.\n+    */\n+    std::map<COutPoint, Coin> m_temp_added;\n+\n+    /**\n+    * Coins spent by transactions being validated. When there are multiple, we need to track these\n+    * in order to distinguish between missing/spent coins and conflicts within a package.\n+    */\n+    std::set<COutPoint> m_temp_spent;",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 52,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "in_reply_to_id": 595922179,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks for the suggestion! I considered this when I first saw the comment, but since then, I've updated `AcceptMultipleTransactions()` to just remove `m_temp_spent` after all the `PreChecks()` so that the script checks can use coins from `m_temp_added`. That makes this suggestion no longer apply so I'm going to mark it as resolved.",
      "created_at": "2021-03-29T23:58:57Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r603688999",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/603688999"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": 484,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 488,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/606321612",
      "pull_request_review_id": 627115608,
      "id": 606321612,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNjMyMTYxMg==",
      "diff_hunk": "@@ -463,6 +463,111 @@ static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationS\n     return CheckInputScripts(tx, state, view, flags, /* cacheSigStore = */ true, /* cacheFullSciptStore = */ true, txdata);\n }\n \n+/**\n+ * A CoinsView that adds a memory cache to another CoinsView and serves as temporary scratch space.\n+ * Used by MemPoolAccept class to validate transactions and packages before submitting to mempool.\n+ * A backend can be set to provide read access to chainstate and/or mempool coins, but writing to\n+ * the backend is disabled. Avoid using a CoinsViewTemporary in consensus-critical paths such\n+ * as writing to the script cache. See CheckInputsFromMempoolAndCache as an example. When not being\n+ * used to validate a package (m_temp_added and m_temp_spent are empty), a CoinsViewTemporary\n+ * behaves exactly like a CCoinsViewCache.\n+ */\n+class CoinsViewTemporary : public CCoinsViewCache\n+{\n+    /**\n+    * Coins made available by transactions being validated. Tracking these allows for package\n+    * validation, since we can access transaction outputs without submitting them to mempool.\n+    */\n+    std::map<COutPoint, Coin> m_temp_added;\n+\n+    /**\n+    * Coins spent by transactions being validated. When validating a package, we need to track\n+    * these in order to distinguish between missing/spent coins and conflicts within a package.\n+    */\n+    std::set<COutPoint> m_temp_spent;\n+\n+    /** An empty coin used as a placeholder for a spent coin.*/\n+    inline static const Coin s_coin_spent;\n+\n+public:\n+\n+    CoinsViewTemporary(CCoinsView* baseIn) : CCoinsViewCache(baseIn) {}\n+\n+    // Delete the copy constructor to prevent accidentally using it when one intends to create a\n+    // CoinsViewTemporary on top of a base cache.\n+    CoinsViewTemporary(const CoinsViewTemporary &) = delete;\n+\n+    bool GetCoin(const COutPoint& outpoint, Coin& coin) const override {\n+        coin = AccessCoin(outpoint);\n+        return !coin.IsSpent();\n+    }\n+\n+    const Coin& AccessCoin(const COutPoint& outpoint) const override {\n+        // Check to see if another tx in the package has already spent this coin (conflict-in-package).\n+        // Coins spent by others in the package are only tracked in m_temp_spent.\n+        if (m_temp_spent.count(outpoint)) {\n+            return s_coin_spent;\n+        }\n+\n+        // Check to see if the inputs are made available by another tx in the package.\n+        // These Coins would not be available in the underlying CoinsView.\n+        if (auto it = m_temp_added.find(outpoint); it != m_temp_added.end()) {\n+            assert(!it->second.IsSpent());\n+            return it->second;\n+        }\n+        return CCoinsViewCache::AccessCoin(outpoint);\n+    }\n+\n+    bool HaveCoin(const COutPoint& outpoint) const override {\n+        Coin coin;\n+        return GetCoin(outpoint, coin);\n+    }\n+\n+    /**\n+    * Update with coins spent and created by a transaction.\n+    * Only used for package validation.\n+    */\n+    void PackageAddTransaction(const CTransactionRef& tx)\n+    {\n+        // Track Coins spent by this transaction. They must exist and not already be spent.\n+        for (auto input : tx->vin) {\n+            Coin spent_coin;\n+            Assume(GetCoin(input.prevout, spent_coin) && !spent_coin.IsSpent());",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 73,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "78ab8b1da104e76445e65aa7e2db54d338e0b99a",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 78ab8b1da104e76445e65aa7e2db54d338e0b99a \"[validation] add CoinsViewTemporary for mempool validation\"\r\n\r\n`&& !spend_coin.IsSpent()` seems to be unnecessary as `GetCoin` returns `!coin.IsSpent()`.",
      "created_at": "2021-04-02T16:50:48Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r606321612",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/606321612"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 535,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/606345705",
      "pull_request_review_id": 627115608,
      "id": 606345705,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNjM0NTcwNQ==",
      "diff_hunk": "@@ -1163,28 +1175,90 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n \n     Workspace ws(ptx);\n \n-    if (!PreChecks(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!PreChecks(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n-    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Tx was accepted, but not added\n     if (args.m_test_accept) {\n-        return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+        return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n     }\n \n-    if (!Finalize(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!Finalize(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+    return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+}\n+\n+PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::vector<CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    PackageValidationState package_state;\n+    // Check static package limits before taking the mempool lock.\n+    const unsigned int package_count = txns.size();\n+    if (package_count > MAX_PACKAGE_COUNT) {",
      "path": "src/validation.cpp",
      "position": 139,
      "original_position": 74,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "f7880be3cbe9d0937ee4df6d55eb93876bc5dd1a",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In f7880be \"[validation] package validation test_accept=true\"\r\n\r\nTo more accurately reflect mempool acceptance behavior, I think it would be better to be using the values for `-limitancestorcount`, `-limitdescendantcount`, `-limitancestorsize`, and `-limitdescendantsize` for these checks.",
      "created_at": "2021-04-02T17:46:45Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r606345705",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/606345705"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1084,
      "original_line": 1084,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/606347122",
      "pull_request_review_id": 627115608,
      "id": 606347122,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNjM0NzEyMg==",
      "diff_hunk": "@@ -923,59 +928,72 @@ static RPCHelpMan testmempoolaccept()\n         UniValueType(), // VNUM or VSTR, checked inside AmountFromValue()\n     });\n \n-    if (request.params[0].get_array().size() != 1) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array must contain exactly one raw transaction for now\");\n+    if (request.params[0].get_array().size() > MAX_PACKAGE_COUNT) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array cannot contain more than \" + ToString(MAX_PACKAGE_COUNT) + \" transactions.\");\n     }\n \n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_array()[0].get_str())) {\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n-    }\n-    CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-\n+    const UniValue raw_transactions = request.params[0].get_array();\n     const CFeeRate max_raw_tx_fee_rate = request.params[1].isNull() ?\n                                              DEFAULT_MAX_RAW_TX_FEE_RATE :\n                                              CFeeRate(AmountFromValue(request.params[1]));\n \n     CTxMemPool& mempool = EnsureMemPool(request.context);\n-    int64_t virtual_size = GetVirtualTransactionSize(*tx);\n-    CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n+    CChainState& chainstate = EnsureChainman(request.context).ActiveChainstate();",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 61,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "1bec7b18ab8a6e8993fcb6c19a0b13fb4df0eeeb",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 1bec7b18ab8a6e8993fcb6c19a0b13fb4df0eeeb \"[rpc] allow multiple txns in testmempoolaccept\"\r\n\r\nGenerally we want to do all of the transaction decoding before getting all of these mempool and chainstate things.",
      "created_at": "2021-04-02T17:50:01Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r606347122",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/606347122"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 941,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/606447491",
      "pull_request_review_id": 627387724,
      "id": 606447491,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNjQ0NzQ5MQ==",
      "diff_hunk": "@@ -1163,28 +1175,90 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n \n     Workspace ws(ptx);\n \n-    if (!PreChecks(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!PreChecks(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n-    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Tx was accepted, but not added\n     if (args.m_test_accept) {\n-        return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+        return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n     }\n \n-    if (!Finalize(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!Finalize(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+    return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+}\n+\n+PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::vector<CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    PackageValidationState package_state;\n+    // Check static package limits before taking the mempool lock.\n+    const unsigned int package_count = txns.size();\n+    if (package_count > MAX_PACKAGE_COUNT) {",
      "path": "src/validation.cpp",
      "position": 139,
      "original_position": 74,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "f7880be3cbe9d0937ee4df6d55eb93876bc5dd1a",
      "in_reply_to_id": 606345705,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Descendant/ancestor limits will still be checked within validation (and are stricter than this check since this doesn't include in-mempool transactions). This is just preventing us from working on a really big package. And if/when we have p2p packages, we'd enforce `MAX_PACKAGE_COUNT` as a limit.",
      "created_at": "2021-04-02T22:07:04Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r606447491",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/606447491"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1084,
      "original_line": 1084,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/606633360",
      "pull_request_review_id": 627440396,
      "id": 606633360,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNjYzMzM2MA==",
      "diff_hunk": "@@ -923,59 +928,72 @@ static RPCHelpMan testmempoolaccept()\n         UniValueType(), // VNUM or VSTR, checked inside AmountFromValue()\n     });\n \n-    if (request.params[0].get_array().size() != 1) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array must contain exactly one raw transaction for now\");\n+    if (request.params[0].get_array().size() > MAX_PACKAGE_COUNT) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array cannot contain more than \" + ToString(MAX_PACKAGE_COUNT) + \" transactions.\");\n     }\n \n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_array()[0].get_str())) {\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n-    }\n-    CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-\n+    const UniValue raw_transactions = request.params[0].get_array();\n     const CFeeRate max_raw_tx_fee_rate = request.params[1].isNull() ?\n                                              DEFAULT_MAX_RAW_TX_FEE_RATE :\n                                              CFeeRate(AmountFromValue(request.params[1]));\n \n     CTxMemPool& mempool = EnsureMemPool(request.context);\n-    int64_t virtual_size = GetVirtualTransactionSize(*tx);\n-    CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n+    CChainState& chainstate = EnsureChainman(request.context).ActiveChainstate();",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 61,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "1bec7b18ab8a6e8993fcb6c19a0b13fb4df0eeeb",
      "in_reply_to_id": 606347122,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why? We can't do anything in this function if there isn't a mempool, so why not exit early if it doesn't exist?",
      "created_at": "2021-04-03T07:45:42Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r606633360",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/606633360"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 941,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/606689520",
      "pull_request_review_id": 627473692,
      "id": 606689520,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNjY4OTUyMA==",
      "diff_hunk": "@@ -923,59 +928,72 @@ static RPCHelpMan testmempoolaccept()\n         UniValueType(), // VNUM or VSTR, checked inside AmountFromValue()\n     });\n \n-    if (request.params[0].get_array().size() != 1) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array must contain exactly one raw transaction for now\");\n+    if (request.params[0].get_array().size() > MAX_PACKAGE_COUNT) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array cannot contain more than \" + ToString(MAX_PACKAGE_COUNT) + \" transactions.\");\n     }\n \n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_array()[0].get_str())) {\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n-    }\n-    CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-\n+    const UniValue raw_transactions = request.params[0].get_array();\n     const CFeeRate max_raw_tx_fee_rate = request.params[1].isNull() ?\n                                              DEFAULT_MAX_RAW_TX_FEE_RATE :\n                                              CFeeRate(AmountFromValue(request.params[1]));\n \n     CTxMemPool& mempool = EnsureMemPool(request.context);\n-    int64_t virtual_size = GetVirtualTransactionSize(*tx);\n-    CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n+    CChainState& chainstate = EnsureChainman(request.context).ActiveChainstate();",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 61,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "1bec7b18ab8a6e8993fcb6c19a0b13fb4df0eeeb",
      "in_reply_to_id": 606347122,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The pattern that we do in every other RPC that handles raw transactions (and most of the ones that take user input that needs to be parsed) is that the parsing/decoding is done first before acquiring anything internal needed for processing. After all, we can't do anything in this function if the transaction is malformed, so why not exit early if it can't be decoded?\r\n\r\nI also think that it would make the diff slightly easier to read since that is what the function did originally.",
      "created_at": "2021-04-03T17:31:13Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r606689520",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/606689520"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 941,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/610455249",
      "pull_request_review_id": 632182754,
      "id": 610455249,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMDQ1NTI0OQ==",
      "diff_hunk": "@@ -923,59 +928,72 @@ static RPCHelpMan testmempoolaccept()\n         UniValueType(), // VNUM or VSTR, checked inside AmountFromValue()\n     });\n \n-    if (request.params[0].get_array().size() != 1) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array must contain exactly one raw transaction for now\");\n+    if (request.params[0].get_array().size() > MAX_PACKAGE_COUNT) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array cannot contain more than \" + ToString(MAX_PACKAGE_COUNT) + \" transactions.\");\n     }\n \n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_array()[0].get_str())) {\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n-    }\n-    CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-\n+    const UniValue raw_transactions = request.params[0].get_array();\n     const CFeeRate max_raw_tx_fee_rate = request.params[1].isNull() ?\n                                              DEFAULT_MAX_RAW_TX_FEE_RATE :\n                                              CFeeRate(AmountFromValue(request.params[1]));\n \n     CTxMemPool& mempool = EnsureMemPool(request.context);\n-    int64_t virtual_size = GetVirtualTransactionSize(*tx);\n-    CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n+    CChainState& chainstate = EnsureChainman(request.context).ActiveChainstate();",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 61,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "1bec7b18ab8a6e8993fcb6c19a0b13fb4df0eeeb",
      "in_reply_to_id": 606347122,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I see these `Assume` functions as essentially asserting entry conditions for the function. For rpc methods that require a component to exist in order to function at all (such as `testmempoolaccept`), then I think assume/exit at the top of the function makes most sense. Doing that has benefits:\r\n\r\n- avoids unexpected side-effects\r\n- avoid unnecessary lock-taking or resource usage\r\n- explicitly states assumptions up front\r\n\r\nThere are some rpc methods where components are optional or only required based on particular inputs (eg ` getrawtransaction` might not require a mempool if a blockhash is passed). For those, the `Assume()` function can be further down in the function, but again should be prominently displayed at the top of a code block to document assumptions.",
      "created_at": "2021-04-09T08:43:56Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r610455249",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/610455249"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 941,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/612411317",
      "pull_request_review_id": 634541687,
      "id": 612411317,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMjQxMTMxNw==",
      "diff_hunk": "@@ -463,6 +463,111 @@ static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationS\n     return CheckInputScripts(tx, state, view, flags, /* cacheSigStore = */ true, /* cacheFullSciptStore = */ true, txdata);\n }\n \n+/**\n+ * A CoinsView that adds a memory cache to another CoinsView and serves as temporary scratch space.\n+ * Used by MemPoolAccept class to validate transactions and packages before submitting to mempool.\n+ * A backend can be set to provide read access to chainstate and/or mempool coins, but writing to\n+ * the backend is disabled. Avoid using a CoinsViewTemporary in consensus-critical paths such\n+ * as writing to the script cache. See CheckInputsFromMempoolAndCache as an example. When not being\n+ * used to validate a package (m_temp_added and m_temp_spent are empty), a CoinsViewTemporary\n+ * behaves exactly like a CCoinsViewCache.\n+ */\n+class CoinsViewTemporary : public CCoinsViewCache\n+{\n+    /**\n+    * Coins made available by transactions being validated. Tracking these allows for package\n+    * validation, since we can access transaction outputs without submitting them to mempool.\n+    */\n+    std::map<COutPoint, Coin> m_temp_added;\n+\n+    /**\n+    * Coins spent by transactions being validated. When validating a package, we need to track\n+    * these in order to distinguish between missing/spent coins and conflicts within a package.\n+    */\n+    std::set<COutPoint> m_temp_spent;\n+\n+    /** An empty coin used as a placeholder for a spent coin.*/\n+    inline static const Coin s_coin_spent;\n+\n+public:\n+\n+    CoinsViewTemporary(CCoinsView* baseIn) : CCoinsViewCache(baseIn) {}\n+\n+    // Delete the copy constructor to prevent accidentally using it when one intends to create a\n+    // CoinsViewTemporary on top of a base cache.\n+    CoinsViewTemporary(const CoinsViewTemporary &) = delete;\n+\n+    bool GetCoin(const COutPoint& outpoint, Coin& coin) const override {\n+        coin = AccessCoin(outpoint);\n+        return !coin.IsSpent();\n+    }\n+\n+    const Coin& AccessCoin(const COutPoint& outpoint) const override {\n+        // Check to see if another tx in the package has already spent this coin (conflict-in-package).\n+        // Coins spent by others in the package are only tracked in m_temp_spent.\n+        if (m_temp_spent.count(outpoint)) {\n+            return s_coin_spent;\n+        }\n+\n+        // Check to see if the inputs are made available by another tx in the package.\n+        // These Coins would not be available in the underlying CoinsView.\n+        if (auto it = m_temp_added.find(outpoint); it != m_temp_added.end()) {\n+            assert(!it->second.IsSpent());\n+            return it->second;\n+        }\n+        return CCoinsViewCache::AccessCoin(outpoint);\n+    }\n+\n+    bool HaveCoin(const COutPoint& outpoint) const override {\n+        Coin coin;\n+        return GetCoin(outpoint, coin);\n+    }\n+\n+    /**\n+    * Update with coins spent and created by a transaction.\n+    * Only used for package validation.\n+    */\n+    void PackageAddTransaction(const CTransactionRef& tx)\n+    {\n+        // Track Coins spent by this transaction. They must exist and not already be spent.\n+        for (auto input : tx->vin) {\n+            Coin spent_coin;\n+            Assume(GetCoin(input.prevout, spent_coin) && !spent_coin.IsSpent());",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 73,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "78ab8b1da104e76445e65aa7e2db54d338e0b99a",
      "in_reply_to_id": 606321612,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2021-04-13T12:44:49Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r612411317",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/612411317"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 535,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/612426153",
      "pull_request_review_id": 634560905,
      "id": 612426153,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMjQyNjE1Mw==",
      "diff_hunk": "@@ -226,6 +230,18 @@ struct MempoolAcceptResult {\n MempoolAcceptResult AcceptToMemoryPool(CChainState& active_chainstate, CTxMemPool& pool, const CTransactionRef& tx,\n                                        bool bypass_limits, bool test_accept=false) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+/**\n+* Atomically test acceptance of multiple transactions.\n+* @param[in]    txns                Group of transactions which may be independent or contain",
      "path": "src/validation.h",
      "position": 71,
      "original_position": 55,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "in_reply_to_id": 594527279,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Current policy is they can be independent or dependent (although I don't think the user would get much use out of independent ones). Given that RBF is now disabled, hopefully this concern is resolved?",
      "created_at": "2021-04-13T13:03:30Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r612426153",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/612426153"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 240,
      "original_line": 240,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/613594392",
      "pull_request_review_id": 636089652,
      "id": 613594392,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMzU5NDM5Mg==",
      "diff_hunk": "@@ -0,0 +1,33 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_PACKAGES_H\n+#define BITCOIN_PACKAGES_H\n+\n+#include <vector>\n+\n+#include <consensus/validation.h>\n+#include <primitives/transaction.h>\n+\n+/** Default maximum number of transactions in a package. */\n+static constexpr uint32_t MAX_PACKAGE_COUNT{25};\n+/** Default maximum total virtual size of transactions in a package in KvB. */\n+static constexpr uint32_t MAX_PACKAGE_SIZE{101};\n+\n+/** A \"reason\" why a package was invalid. It may be that one or more of the included\n+ * transactions is invalid or the package itself violates our rules.\n+ * We don't distinguish between consensus and policy validity right now.\n+ */\n+enum class PackageValidationResult {\n+    PCKG_RESULT_UNSET = 0,        //!< Initial value. The package has not yet been rejected.\n+    PCKG_POLICY,                  //!< The package itself is invalid (e.g. too many transactions).\n+    PCKG_TX,                      //!< At least one tx is invalid.\n+};\n+\n+/** A package is an ordered list of transactions. */\n+using Package = std::vector<CTransactionRef>;",
      "path": "src/packages.h",
      "position": null,
      "original_position": 29,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "cc00a859deef3701f5d9fb8e7076a074b26f7892",
      "in_reply_to_id": null,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "suggestion: make Package a struct wrapper with private fields so that you have to go through a smart constructor?\r\n\r\nprevents API misuse",
      "created_at": "2021-04-14T21:19:31Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r613594392",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/613594392"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/613595514",
      "pull_request_review_id": 636091017,
      "id": 613595514,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMzU5NTUxNA==",
      "diff_hunk": "@@ -879,7 +880,9 @@ static RPCHelpMan sendrawtransaction()\n static RPCHelpMan testmempoolaccept()\n {\n     return RPCHelpMan{\"testmempoolaccept\",\n-                \"\\nReturns result of mempool acceptance tests indicating if raw transaction (serialized, hex-encoded) would be accepted by mempool.\\n\"\n+                \"\\nReturns result of mempool acceptance tests indicating if raw transaction(s) (serialized, hex-encoded) would be accepted by mempool.\\n\"\n+                \"\\nIf multiple transactions are passed in, they must be sorted in order of dependency and not conflict with each other.\\n\"",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 14,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "cc00a859deef3701f5d9fb8e7076a074b26f7892",
      "in_reply_to_id": null,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: clarify which order that is (e.g., `if tx B and C are a child of A the order may be [A, B, C] or [A, C, B]`) ",
      "created_at": "2021-04-14T21:21:25Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r613595514",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/613595514"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 884,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/613595886",
      "pull_request_review_id": 636091510,
      "id": 613595886,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMzU5NTg4Ng==",
      "diff_hunk": "@@ -879,7 +880,9 @@ static RPCHelpMan sendrawtransaction()\n static RPCHelpMan testmempoolaccept()\n {\n     return RPCHelpMan{\"testmempoolaccept\",\n-                \"\\nReturns result of mempool acceptance tests indicating if raw transaction (serialized, hex-encoded) would be accepted by mempool.\\n\"\n+                \"\\nReturns result of mempool acceptance tests indicating if raw transaction(s) (serialized, hex-encoded) would be accepted by mempool.\\n\"\n+                \"\\nIf multiple transactions are passed in, they must be sorted in order of dependency and not conflict with each other.\\n\"",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 14,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "cc00a859deef3701f5d9fb8e7076a074b26f7892",
      "in_reply_to_id": 613595514,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: clarify is duplicate transactions [A, A] are allowed",
      "created_at": "2021-04-14T21:22:10Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r613595886",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/613595886"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 884,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/613602225",
      "pull_request_review_id": 636099760,
      "id": 613602225,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMzYwMjIyNQ==",
      "diff_hunk": "@@ -926,59 +931,73 @@ static RPCHelpMan testmempoolaccept()\n         UniValueType(), // VNUM or VSTR, checked inside AmountFromValue()\n     });\n \n-    if (request.params[0].get_array().size() != 1) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array must contain exactly one raw transaction for now\");\n+    if (request.params[0].get_array().size() > MAX_PACKAGE_COUNT) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array cannot contain more than \" + ToString(MAX_PACKAGE_COUNT) + \" transactions.\");\n     }\n \n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_array()[0].get_str())) {\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n-    }\n-    CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-\n+    const UniValue raw_transactions = request.params[0].get_array();\n     const CFeeRate max_raw_tx_fee_rate = request.params[1].isNull() ?\n                                              DEFAULT_MAX_RAW_TX_FEE_RATE :\n                                              CFeeRate(AmountFromValue(request.params[1]));\n \n-    CTxMemPool& mempool = EnsureMemPool(request.context);\n-    int64_t virtual_size = GetVirtualTransactionSize(*tx);\n-    CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n+    std::vector<CTransactionRef> txns;\n+    for (const auto& rawtx : raw_transactions.getValues()) {\n+        CMutableTransaction mtx;\n+        if (!DecodeHexTx(mtx, rawtx.get_str())) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n+        }\n+        txns.emplace_back(MakeTransactionRef(std::move(mtx)));\n+    }\n \n-    UniValue result(UniValue::VARR);\n-    UniValue result_0(UniValue::VOBJ);\n-    result_0.pushKV(\"txid\", tx->GetHash().GetHex());\n-    result_0.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n-\n-    const MempoolAcceptResult accept_result = WITH_LOCK(cs_main, return AcceptToMemoryPool(::ChainstateActive(), mempool, std::move(tx),\n-                                                  false /* bypass_limits */, /* test_accept */ true));\n-\n-    // Only return the fee and vsize if the transaction would pass ATMP.\n-    // These can be used to calculate the feerate.\n-    if (accept_result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-        const CAmount fee = accept_result.m_base_fees.value();\n-        // Check that fee does not exceed maximum fee\n-        if (max_raw_tx_fee && fee > max_raw_tx_fee) {\n-            result_0.pushKV(\"allowed\", false);\n-            result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n-        } else {\n-            result_0.pushKV(\"allowed\", true);\n-            result_0.pushKV(\"vsize\", virtual_size);\n-            UniValue fees(UniValue::VOBJ);\n-            fees.pushKV(\"base\", ValueFromAmount(fee));\n-            result_0.pushKV(\"fees\", fees);\n+    CTxMemPool& mempool = EnsureMemPool(request.context);\n+    CChainState& chainstate = EnsureChainman(request.context).ActiveChainstate();\n+    const PackageMempoolAcceptResult validation_result = txns.size() > 1\n+        ? WITH_LOCK(cs_main, return ProcessNewPackage(chainstate, mempool, txns, /* test_accept */ true))",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 95,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "cc00a859deef3701f5d9fb8e7076a074b26f7892",
      "in_reply_to_id": null,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Not sure if we do this elsewhere, but would be nice to not take locks inside a ternary with returns in it.",
      "created_at": "2021-04-14T21:34:45Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r613602225",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/613602225"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 962,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/613603255",
      "pull_request_review_id": 636101131,
      "id": 613603255,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMzYwMzI1NQ==",
      "diff_hunk": "@@ -926,59 +931,73 @@ static RPCHelpMan testmempoolaccept()\n         UniValueType(), // VNUM or VSTR, checked inside AmountFromValue()\n     });\n \n-    if (request.params[0].get_array().size() != 1) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array must contain exactly one raw transaction for now\");\n+    if (request.params[0].get_array().size() > MAX_PACKAGE_COUNT) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array cannot contain more than \" + ToString(MAX_PACKAGE_COUNT) + \" transactions.\");\n     }\n \n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_array()[0].get_str())) {\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n-    }\n-    CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-\n+    const UniValue raw_transactions = request.params[0].get_array();\n     const CFeeRate max_raw_tx_fee_rate = request.params[1].isNull() ?\n                                              DEFAULT_MAX_RAW_TX_FEE_RATE :\n                                              CFeeRate(AmountFromValue(request.params[1]));\n \n-    CTxMemPool& mempool = EnsureMemPool(request.context);\n-    int64_t virtual_size = GetVirtualTransactionSize(*tx);\n-    CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n+    std::vector<CTransactionRef> txns;\n+    for (const auto& rawtx : raw_transactions.getValues()) {\n+        CMutableTransaction mtx;\n+        if (!DecodeHexTx(mtx, rawtx.get_str())) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n+        }\n+        txns.emplace_back(MakeTransactionRef(std::move(mtx)));\n+    }\n \n-    UniValue result(UniValue::VARR);\n-    UniValue result_0(UniValue::VOBJ);\n-    result_0.pushKV(\"txid\", tx->GetHash().GetHex());\n-    result_0.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n-\n-    const MempoolAcceptResult accept_result = WITH_LOCK(cs_main, return AcceptToMemoryPool(::ChainstateActive(), mempool, std::move(tx),\n-                                                  false /* bypass_limits */, /* test_accept */ true));\n-\n-    // Only return the fee and vsize if the transaction would pass ATMP.\n-    // These can be used to calculate the feerate.\n-    if (accept_result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-        const CAmount fee = accept_result.m_base_fees.value();\n-        // Check that fee does not exceed maximum fee\n-        if (max_raw_tx_fee && fee > max_raw_tx_fee) {\n-            result_0.pushKV(\"allowed\", false);\n-            result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n-        } else {\n-            result_0.pushKV(\"allowed\", true);\n-            result_0.pushKV(\"vsize\", virtual_size);\n-            UniValue fees(UniValue::VOBJ);\n-            fees.pushKV(\"base\", ValueFromAmount(fee));\n-            result_0.pushKV(\"fees\", fees);\n+    CTxMemPool& mempool = EnsureMemPool(request.context);\n+    CChainState& chainstate = EnsureChainman(request.context).ActiveChainstate();\n+    const PackageMempoolAcceptResult validation_result = txns.size() > 1\n+        ? WITH_LOCK(cs_main, return ProcessNewPackage(chainstate, mempool, txns, /* test_accept */ true))\n+        : WITH_LOCK(cs_main, return PackageMempoolAcceptResult(txns[0]->GetHash(),",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 96,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "cc00a859deef3701f5d9fb8e7076a074b26f7892",
      "in_reply_to_id": null,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think we should use ProcessNewPackage here -- if this is done to avoid breaking RPC change, then I'd rather a new RPC call that consistently uses one call or the other.\r\n\r\nOtherwise how to test if a single tx as a package is accepted?",
      "created_at": "2021-04-14T21:36:46Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r613603255",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/613603255"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 956,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/613604854",
      "pull_request_review_id": 636103144,
      "id": 613604854,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMzYwNDg1NA==",
      "diff_hunk": "@@ -187,34 +188,65 @@ void PruneBlockFilesManual(CChainState& active_chainstate, int nManualPruneHeigh\n * Validation result for a single transaction mempool acceptance.\n */\n struct MempoolAcceptResult {\n-    /** Used to indicate the results of mempool validation,\n-    * including the possibility of unfinished validation.\n-    */\n+    /** Used to indicate the results of mempool validation. */\n     enum class ResultType {",
      "path": "src/validation.h",
      "position": 16,
      "original_position": 16,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "cc00a859deef3701f5d9fb8e7076a074b26f7892",
      "in_reply_to_id": null,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: can inherit from u8 to make smaller",
      "created_at": "2021-04-14T21:39:59Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r613604854",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/613604854"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 174,
      "original_line": 174,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/613605097",
      "pull_request_review_id": 636103471,
      "id": 613605097,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMzYwNTA5Nw==",
      "diff_hunk": "@@ -187,34 +188,65 @@ void PruneBlockFilesManual(CChainState& active_chainstate, int nManualPruneHeigh\n * Validation result for a single transaction mempool acceptance.\n */\n struct MempoolAcceptResult {\n-    /** Used to indicate the results of mempool validation,\n-    * including the possibility of unfinished validation.\n-    */\n+    /** Used to indicate the results of mempool validation. */\n     enum class ResultType {",
      "path": "src/validation.h",
      "position": 16,
      "original_position": 16,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "cc00a859deef3701f5d9fb8e7076a074b26f7892",
      "in_reply_to_id": 613604854,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "make sure to sort the m_result_type after m_state for packing rules.",
      "created_at": "2021-04-14T21:40:30Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r613605097",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/613605097"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 174,
      "original_line": 174,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/613615583",
      "pull_request_review_id": 636116534,
      "id": 613615583,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMzYxNTU4Mw==",
      "diff_hunk": "@@ -926,59 +931,73 @@ static RPCHelpMan testmempoolaccept()\n         UniValueType(), // VNUM or VSTR, checked inside AmountFromValue()\n     });\n \n-    if (request.params[0].get_array().size() != 1) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array must contain exactly one raw transaction for now\");\n+    if (request.params[0].get_array().size() > MAX_PACKAGE_COUNT) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array cannot contain more than \" + ToString(MAX_PACKAGE_COUNT) + \" transactions.\");\n     }\n \n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_array()[0].get_str())) {\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n-    }\n-    CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-\n+    const UniValue raw_transactions = request.params[0].get_array();\n     const CFeeRate max_raw_tx_fee_rate = request.params[1].isNull() ?\n                                              DEFAULT_MAX_RAW_TX_FEE_RATE :\n                                              CFeeRate(AmountFromValue(request.params[1]));\n \n-    CTxMemPool& mempool = EnsureMemPool(request.context);\n-    int64_t virtual_size = GetVirtualTransactionSize(*tx);\n-    CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n+    std::vector<CTransactionRef> txns;\n+    for (const auto& rawtx : raw_transactions.getValues()) {\n+        CMutableTransaction mtx;\n+        if (!DecodeHexTx(mtx, rawtx.get_str())) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n+        }\n+        txns.emplace_back(MakeTransactionRef(std::move(mtx)));\n+    }\n \n-    UniValue result(UniValue::VARR);\n-    UniValue result_0(UniValue::VOBJ);\n-    result_0.pushKV(\"txid\", tx->GetHash().GetHex());\n-    result_0.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n-\n-    const MempoolAcceptResult accept_result = WITH_LOCK(cs_main, return AcceptToMemoryPool(::ChainstateActive(), mempool, std::move(tx),\n-                                                  false /* bypass_limits */, /* test_accept */ true));\n-\n-    // Only return the fee and vsize if the transaction would pass ATMP.\n-    // These can be used to calculate the feerate.\n-    if (accept_result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-        const CAmount fee = accept_result.m_base_fees.value();\n-        // Check that fee does not exceed maximum fee\n-        if (max_raw_tx_fee && fee > max_raw_tx_fee) {\n-            result_0.pushKV(\"allowed\", false);\n-            result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n-        } else {\n-            result_0.pushKV(\"allowed\", true);\n-            result_0.pushKV(\"vsize\", virtual_size);\n-            UniValue fees(UniValue::VOBJ);\n-            fees.pushKV(\"base\", ValueFromAmount(fee));\n-            result_0.pushKV(\"fees\", fees);\n+    CTxMemPool& mempool = EnsureMemPool(request.context);\n+    CChainState& chainstate = EnsureChainman(request.context).ActiveChainstate();\n+    const PackageMempoolAcceptResult validation_result = txns.size() > 1\n+        ? WITH_LOCK(cs_main, return ProcessNewPackage(chainstate, mempool, txns, /* test_accept */ true))\n+        : WITH_LOCK(cs_main, return PackageMempoolAcceptResult(txns[0]->GetHash(),",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 96,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "cc00a859deef3701f5d9fb8e7076a074b26f7892",
      "in_reply_to_id": 613603255,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah, there's a breaking RPC change if they try to testmempoolaccept on a tx that does an RBF (since we don't allow that in packages). I'm not really sure why a user would want to test a single tx as a package?",
      "created_at": "2021-04-14T22:02:55Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r613615583",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/613615583"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 956,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/613616966",
      "pull_request_review_id": 636118199,
      "id": 613616966,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMzYxNjk2Ng==",
      "diff_hunk": "@@ -150,33 +151,48 @@ void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashes\n     }\n }\n \n-bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string &errString, bool fSearchForParents /* = true */) const\n+bool CTxMemPool::CalculateMemPoolAncestors(const std::vector<CTxMemPoolEntry>& entries,",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 13,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "cc00a859deef3701f5d9fb8e7076a074b26f7892",
      "in_reply_to_id": null,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Since you're using a const vec ref here, may as well use the Span API.\r\n\r\nThis way you can construct a span from a single pointer to a CTxMemPoolEntry and avoid needing to allocate to call CalculateMempoolAncestors",
      "created_at": "2021-04-14T22:05:59Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r613616966",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/613616966"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 154,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/613618547",
      "pull_request_review_id": 636120004,
      "id": 613618547,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMzYxODU0Nw==",
      "diff_hunk": "@@ -150,33 +151,48 @@ void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashes\n     }\n }\n \n-bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string &errString, bool fSearchForParents /* = true */) const\n+bool CTxMemPool::CalculateMemPoolAncestors(const std::vector<CTxMemPoolEntry>& entries,\n+                                           setEntries& setAncestors,\n+                                           const uint64_t limitAncestorCount,\n+                                           const uint64_t limitAncestorSize,\n+                                           const uint64_t limitDescendantCount,\n+                                           const uint64_t limitDescendantSize,\n+                                           std::string &errString,\n+                                           const bool fSearchForParents /*=true*/) const\n {\n-    CTxMemPoolEntry::Parents staged_ancestors;\n-    const CTransaction &tx = entry.GetTx();\n+    const size_t total_virtual_size = std::accumulate(entries.cbegin(), entries.cend(), 0,\n+                                      [](int64_t sum, const auto& entry)\n+                                      { return sum + GetVirtualTransactionSize(entry.GetTx()); });\n+    const size_t total_count = entries.size();\n \n+    CTxMemPoolEntry::Parents staged_ancestors;\n     if (fSearchForParents) {\n-        // Get parents of this transaction that are in the mempool\n-        // GetMemPoolParents() is only valid for entries in the mempool, so we\n-        // iterate mapTx to find parents.\n-        for (unsigned int i = 0; i < tx.vin.size(); i++) {\n-            std::optional<txiter> piter = GetIter(tx.vin[i].prevout.hash);\n-            if (piter) {\n-                staged_ancestors.insert(**piter);\n-                if (staged_ancestors.size() + 1 > limitAncestorCount) {\n-                    errString = strprintf(\"too many unconfirmed parents [limit: %u]\", limitAncestorCount);\n-                    return false;\n+\n+        for (const auto& entry : entries) {\n+            // Get parents of this transaction that are in the mempool\n+            // GetMemPoolParents() is only valid for entries in the mempool, so we\n+            // iterate mapTx to find parents.\n+            for (const auto& input : entry.GetTx().vin) {\n+                std::optional<txiter> piter = GetIter(input.prevout.hash);\n+                if (piter) {\n+                    staged_ancestors.insert(**piter);\n+                    if (staged_ancestors.size() + 1 > limitAncestorCount) {\n+                        errString = strprintf(\"too many unconfirmed parents [limit: %u]\", limitAncestorCount);\n+                        return false;\n+                    }\n                 }\n             }\n         }\n     } else {\n-        // If we're not searching for parents, we require this to be an\n-        // entry in the mempool already.\n-        txiter it = mapTx.iterator_to(entry);\n-        staged_ancestors = it->GetMemPoolParentsConst();\n+        // If we're not searching for parents, we require all entries to be in the mempool already.\n+        for (const auto& entry : entries) {",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 63,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "cc00a859deef3701f5d9fb8e7076a074b26f7892",
      "in_reply_to_id": null,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If you're touching this code you *could* update it to use Epoch Algorithms.\r\n\r\nEssentially all you need to do is get a new epoch, and then visit the txiters you are interested in and add them to a vec instead of a set.\r\n\r\nThis lets you get rid of the O(n^2)  potential of a merge call.\r\n\r\n",
      "created_at": "2021-04-14T22:09:25Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r613618547",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/613618547"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 187,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/613618750",
      "pull_request_review_id": 636120242,
      "id": 613618750,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMzYxODc1MA==",
      "diff_hunk": "@@ -150,33 +151,48 @@ void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashes\n     }\n }\n \n-bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string &errString, bool fSearchForParents /* = true */) const\n+bool CTxMemPool::CalculateMemPoolAncestors(const std::vector<CTxMemPoolEntry>& entries,\n+                                           setEntries& setAncestors,\n+                                           const uint64_t limitAncestorCount,\n+                                           const uint64_t limitAncestorSize,\n+                                           const uint64_t limitDescendantCount,\n+                                           const uint64_t limitDescendantSize,\n+                                           std::string &errString,\n+                                           const bool fSearchForParents /*=true*/) const\n {\n-    CTxMemPoolEntry::Parents staged_ancestors;\n-    const CTransaction &tx = entry.GetTx();\n+    const size_t total_virtual_size = std::accumulate(entries.cbegin(), entries.cend(), 0,\n+                                      [](int64_t sum, const auto& entry)\n+                                      { return sum + GetVirtualTransactionSize(entry.GetTx()); });\n+    const size_t total_count = entries.size();\n \n+    CTxMemPoolEntry::Parents staged_ancestors;\n     if (fSearchForParents) {\n-        // Get parents of this transaction that are in the mempool\n-        // GetMemPoolParents() is only valid for entries in the mempool, so we\n-        // iterate mapTx to find parents.\n-        for (unsigned int i = 0; i < tx.vin.size(); i++) {\n-            std::optional<txiter> piter = GetIter(tx.vin[i].prevout.hash);\n-            if (piter) {\n-                staged_ancestors.insert(**piter);\n-                if (staged_ancestors.size() + 1 > limitAncestorCount) {\n-                    errString = strprintf(\"too many unconfirmed parents [limit: %u]\", limitAncestorCount);\n-                    return false;\n+\n+        for (const auto& entry : entries) {\n+            // Get parents of this transaction that are in the mempool\n+            // GetMemPoolParents() is only valid for entries in the mempool, so we\n+            // iterate mapTx to find parents.\n+            for (const auto& input : entry.GetTx().vin) {\n+                std::optional<txiter> piter = GetIter(input.prevout.hash);\n+                if (piter) {\n+                    staged_ancestors.insert(**piter);\n+                    if (staged_ancestors.size() + 1 > limitAncestorCount) {\n+                        errString = strprintf(\"too many unconfirmed parents [limit: %u]\", limitAncestorCount);\n+                        return false;\n+                    }\n                 }\n             }\n         }\n     } else {\n-        // If we're not searching for parents, we require this to be an\n-        // entry in the mempool already.\n-        txiter it = mapTx.iterator_to(entry);\n-        staged_ancestors = it->GetMemPoolParentsConst();\n+        // If we're not searching for parents, we require all entries to be in the mempool already.\n+        for (const auto& entry : entries) {",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 63,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "cc00a859deef3701f5d9fb8e7076a074b26f7892",
      "in_reply_to_id": 613618547,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Alternatively, I can PR the epoch algorithm and you can rebase on it, or I can PR it before this code gets released.",
      "created_at": "2021-04-14T22:09:53Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r613618750",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/613618750"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 187,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/613623223",
      "pull_request_review_id": 636125639,
      "id": 613623223,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMzYyMzIyMw==",
      "diff_hunk": "@@ -205,7 +222,7 @@ bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntr\n             if (setAncestors.count(parent_it) == 0) {\n                 staged_ancestors.insert(parent);\n             }\n-            if (staged_ancestors.size() + setAncestors.size() + 1 > limitAncestorCount) {\n+            if (staged_ancestors.size() + setAncestors.size() + total_count > limitAncestorCount) {",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 94,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "cc00a859deef3701f5d9fb8e7076a074b26f7892",
      "in_reply_to_id": null,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think staged ancestors is possibly overcounting here, need to run through if there are circumstances where we'd trigger early here.",
      "created_at": "2021-04-14T22:19:29Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r613623223",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/613623223"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 225,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/613624063",
      "pull_request_review_id": 636126651,
      "id": 613624063,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMzYyNDA2Mw==",
      "diff_hunk": "@@ -215,6 +232,13 @@ bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntr\n     return true;\n }\n \n+bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string &errString, bool fSearchForParents /* = true */) const\n+{\n+    return CalculateMemPoolAncestors(std::vector<CTxMemPoolEntry>{entry}, setAncestors,",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 104,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "cc00a859deef3701f5d9fb8e7076a074b26f7892",
      "in_reply_to_id": null,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "When you do the span you'd do `std::span(&entry, 1)` I think",
      "created_at": "2021-04-14T22:21:30Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r613624063",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/613624063"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 240,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/613625630",
      "pull_request_review_id": 636128610,
      "id": 613625630,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMzYyNTYzMA==",
      "diff_hunk": "@@ -205,7 +222,7 @@ bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntr\n             if (setAncestors.count(parent_it) == 0) {\n                 staged_ancestors.insert(parent);\n             }\n-            if (staged_ancestors.size() + setAncestors.size() + 1 > limitAncestorCount) {\n+            if (staged_ancestors.size() + setAncestors.size() + total_count > limitAncestorCount) {",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 94,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "cc00a859deef3701f5d9fb8e7076a074b26f7892",
      "in_reply_to_id": 613623223,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, it's certainly overestimating for every case except for a package of parent + child. But I assume that's the vast majority of cases for a package.\r\n\r\n~I did just notice that we're double-counting the current tx though, so I'll update to do `staged_ancestors.size() + setAncestors.size() + total count - 1 > limitAncestorCount`~",
      "created_at": "2021-04-14T22:25:21Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r613625630",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/613625630"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 225,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/613635484",
      "pull_request_review_id": 636140114,
      "id": 613635484,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMzYzNTQ4NA==",
      "diff_hunk": "@@ -187,34 +188,65 @@ void PruneBlockFilesManual(CChainState& active_chainstate, int nManualPruneHeigh\n * Validation result for a single transaction mempool acceptance.\n */\n struct MempoolAcceptResult {\n-    /** Used to indicate the results of mempool validation,\n-    * including the possibility of unfinished validation.\n-    */\n+    /** Used to indicate the results of mempool validation. */\n     enum class ResultType {\n         VALID, //!> Fully validated, valid.\n         INVALID, //!> Invalid.\n     };\n-    ResultType m_result_type;\n-    TxValidationState m_state;\n+    const ResultType m_result_type;\n+    const TxValidationState m_state;\n \n     // The following fields are only present when m_result_type = ResultType::VALID\n     /** Mempool transactions replaced by the tx per BIP 125 rules. */\n-    std::optional<std::list<CTransactionRef>> m_replaced_transactions;\n-    /** Raw base fees. */\n-    std::optional<CAmount> m_base_fees;\n+    const std::optional<std::list<CTransactionRef>> m_replaced_transactions;\n+    /** Raw base fees in satoshis. */\n+    const std::optional<CAmount> m_base_fees;\n+\n+    static MempoolAcceptResult Failure(const TxValidationState state) {\n+        return MempoolAcceptResult(state);\n+    }\n+\n+    static MempoolAcceptResult Success(std::list<CTransactionRef>&& replaced_txns, const CAmount fees) {\n+        return MempoolAcceptResult(std::move(replaced_txns), fees);\n+    }\n \n+// Private constructors. Use static methods MempoolAcceptResult::Success, etc. to construct.\n+private:\n     /** Constructor for failure case */\n-    explicit MempoolAcceptResult(TxValidationState state)\n-        : m_result_type(ResultType::INVALID), m_state(state) {\n+    explicit MempoolAcceptResult(const TxValidationState state)\n+        : m_result_type{ResultType::INVALID}, m_state{state}, m_replaced_transactions(std::nullopt),\n+        m_base_fees{std::nullopt} {\n             Assume(!state.IsValid()); // Can be invalid or error\n         }\n \n     /** Constructor for success case */\n-    explicit MempoolAcceptResult(std::list<CTransactionRef>&& replaced_txns, CAmount fees)\n-        : m_result_type(ResultType::VALID), m_state(TxValidationState{}),\n+    explicit MempoolAcceptResult(std::list<CTransactionRef>&& replaced_txns, const CAmount fees)\n+        : m_result_type{ResultType::VALID},\n         m_replaced_transactions(std::move(replaced_txns)), m_base_fees(fees) {}\n };\n \n+/**\n+* Validation result for package mempool acceptance.\n+*/\n+struct PackageMempoolAcceptResult\n+{\n+    PackageValidationState m_state;\n+    /**\n+    * Map from txid to finished MempoolAcceptResults. The client is responsible\n+    * for keeping track of the transaction objects themselves. If a result is not\n+    * present, it means validation was unfinished for that transaction.\n+    */\n+    std::map<const uint256, const MempoolAcceptResult> m_tx_results;",
      "path": "src/validation.h",
      "position": 51,
      "original_position": 72,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "cc00a859deef3701f5d9fb8e7076a074b26f7892",
      "in_reply_to_id": null,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Can this not be a vector of equal length to the package sent and index it by index?\r\n\r\nThis will most likely save memory & less work.",
      "created_at": "2021-04-14T22:49:54Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r613635484",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/613635484"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 219,
      "original_line": 219,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/613637283",
      "pull_request_review_id": 636142309,
      "id": 613637283,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMzYzNzI4Mw==",
      "diff_hunk": "@@ -465,6 +464,111 @@ static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationS\n     return CheckInputScripts(tx, state, view, flags, /* cacheSigStore = */ true, /* cacheFullSciptStore = */ true, txdata);\n }\n \n+/**\n+ * A CoinsView that adds a memory cache to another CoinsView and serves as temporary scratch space.\n+ * Used by MemPoolAccept class to validate transactions and packages before submitting to mempool.\n+ * A backend can be set to provide read access to chainstate and/or mempool coins, but writing to\n+ * the backend is disabled. Avoid using a CoinsViewTemporary in consensus-critical paths such\n+ * as writing to the script cache. See CheckInputsFromMempoolAndCache as an example. When not being\n+ * used to validate a package (m_temp_added and m_temp_spent are empty), a CoinsViewTemporary\n+ * behaves exactly like a CCoinsViewCache.\n+ */\n+class CoinsViewTemporary : public CCoinsViewCache\n+{\n+    /**\n+    * Coins made available by transactions being validated. Tracking these allows for package\n+    * validation, since we can access transaction outputs without submitting them to mempool.\n+    */\n+    std::map<COutPoint, Coin> m_temp_added;",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 51,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "cc00a859deef3701f5d9fb8e7076a074b26f7892",
      "in_reply_to_id": null,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "maybe bench using unordered_set here",
      "created_at": "2021-04-14T22:54:56Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r613637283",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/613637283"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 482,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/613645936",
      "pull_request_review_id": 636153480,
      "id": 613645936,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMzY0NTkzNg==",
      "diff_hunk": "@@ -465,6 +464,111 @@ static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationS\n     return CheckInputScripts(tx, state, view, flags, /* cacheSigStore = */ true, /* cacheFullSciptStore = */ true, txdata);\n }\n \n+/**\n+ * A CoinsView that adds a memory cache to another CoinsView and serves as temporary scratch space.\n+ * Used by MemPoolAccept class to validate transactions and packages before submitting to mempool.\n+ * A backend can be set to provide read access to chainstate and/or mempool coins, but writing to\n+ * the backend is disabled. Avoid using a CoinsViewTemporary in consensus-critical paths such\n+ * as writing to the script cache. See CheckInputsFromMempoolAndCache as an example. When not being\n+ * used to validate a package (m_temp_added and m_temp_spent are empty), a CoinsViewTemporary\n+ * behaves exactly like a CCoinsViewCache.\n+ */\n+class CoinsViewTemporary : public CCoinsViewCache\n+{\n+    /**\n+    * Coins made available by transactions being validated. Tracking these allows for package\n+    * validation, since we can access transaction outputs without submitting them to mempool.\n+    */\n+    std::map<COutPoint, Coin> m_temp_added;\n+\n+    /**\n+    * Coins spent by transactions being validated. When validating a package, we need to track\n+    * these in order to distinguish between missing/spent coins and conflicts within a package.\n+    */\n+    std::set<COutPoint> m_temp_spent;",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 57,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "cc00a859deef3701f5d9fb8e7076a074b26f7892",
      "in_reply_to_id": null,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ibid",
      "created_at": "2021-04-14T23:18:35Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r613645936",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/613645936"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 488,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/613646867",
      "pull_request_review_id": 636154571,
      "id": 613646867,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMzY0Njg2Nw==",
      "diff_hunk": "@@ -465,6 +464,111 @@ static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationS\n     return CheckInputScripts(tx, state, view, flags, /* cacheSigStore = */ true, /* cacheFullSciptStore = */ true, txdata);\n }\n \n+/**\n+ * A CoinsView that adds a memory cache to another CoinsView and serves as temporary scratch space.\n+ * Used by MemPoolAccept class to validate transactions and packages before submitting to mempool.\n+ * A backend can be set to provide read access to chainstate and/or mempool coins, but writing to\n+ * the backend is disabled. Avoid using a CoinsViewTemporary in consensus-critical paths such\n+ * as writing to the script cache. See CheckInputsFromMempoolAndCache as an example. When not being\n+ * used to validate a package (m_temp_added and m_temp_spent are empty), a CoinsViewTemporary\n+ * behaves exactly like a CCoinsViewCache.\n+ */\n+class CoinsViewTemporary : public CCoinsViewCache\n+{\n+    /**\n+    * Coins made available by transactions being validated. Tracking these allows for package\n+    * validation, since we can access transaction outputs without submitting them to mempool.\n+    */\n+    std::map<COutPoint, Coin> m_temp_added;\n+\n+    /**\n+    * Coins spent by transactions being validated. When validating a package, we need to track\n+    * these in order to distinguish between missing/spent coins and conflicts within a package.\n+    */\n+    std::set<COutPoint> m_temp_spent;\n+\n+    /** An empty coin used as a placeholder for a spent coin.*/\n+    inline static const Coin s_coin_spent;",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 60,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "cc00a859deef3701f5d9fb8e7076a074b26f7892",
      "in_reply_to_id": null,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: Hmmm... I know GetCoin is perf sensitive but do we do this placeholder coin often?\r\n\r\nWould optional coin be cleaner?\r\n\r\n",
      "created_at": "2021-04-14T23:21:14Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r613646867",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/613646867"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 473,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/613648523",
      "pull_request_review_id": 636156477,
      "id": 613648523,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMzY0ODUyMw==",
      "diff_hunk": "@@ -465,6 +464,111 @@ static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationS\n     return CheckInputScripts(tx, state, view, flags, /* cacheSigStore = */ true, /* cacheFullSciptStore = */ true, txdata);\n }\n \n+/**\n+ * A CoinsView that adds a memory cache to another CoinsView and serves as temporary scratch space.\n+ * Used by MemPoolAccept class to validate transactions and packages before submitting to mempool.\n+ * A backend can be set to provide read access to chainstate and/or mempool coins, but writing to\n+ * the backend is disabled. Avoid using a CoinsViewTemporary in consensus-critical paths such\n+ * as writing to the script cache. See CheckInputsFromMempoolAndCache as an example. When not being\n+ * used to validate a package (m_temp_added and m_temp_spent are empty), a CoinsViewTemporary\n+ * behaves exactly like a CCoinsViewCache.\n+ */\n+class CoinsViewTemporary : public CCoinsViewCache\n+{\n+    /**\n+    * Coins made available by transactions being validated. Tracking these allows for package\n+    * validation, since we can access transaction outputs without submitting them to mempool.\n+    */\n+    std::map<COutPoint, Coin> m_temp_added;\n+\n+    /**\n+    * Coins spent by transactions being validated. When validating a package, we need to track\n+    * these in order to distinguish between missing/spent coins and conflicts within a package.\n+    */\n+    std::set<COutPoint> m_temp_spent;\n+\n+    /** An empty coin used as a placeholder for a spent coin.*/\n+    inline static const Coin s_coin_spent;\n+\n+public:\n+\n+    CoinsViewTemporary(CCoinsView* baseIn) : CCoinsViewCache(baseIn) {}\n+\n+    // Delete the copy constructor to prevent accidentally using it when one intends to create a\n+    // CoinsViewTemporary on top of a base cache.\n+    CoinsViewTemporary(const CoinsViewTemporary &) = delete;\n+\n+    bool GetCoin(const COutPoint& outpoint, Coin& coin) const override {\n+        coin = AccessCoin(outpoint);\n+        return !coin.IsSpent();\n+    }\n+\n+    const Coin& AccessCoin(const COutPoint& outpoint) const override {\n+        // Check to see if another tx in the package has already spent this coin (conflict-in-package).\n+        // Coins spent by others in the package are only tracked in m_temp_spent.\n+        if (m_temp_spent.count(outpoint)) {\n+            return s_coin_spent;\n+        }\n+\n+        // Check to see if the inputs are made available by another tx in the package.\n+        // These Coins would not be available in the underlying CoinsView.\n+        if (auto it = m_temp_added.find(outpoint); it != m_temp_added.end()) {\n+            assert(!it->second.IsSpent());\n+            return it->second;\n+        }\n+        return CCoinsViewCache::AccessCoin(outpoint);\n+    }\n+\n+    bool HaveCoin(const COutPoint& outpoint) const override {\n+        Coin coin;",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 92,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "cc00a859deef3701f5d9fb8e7076a074b26f7892",
      "in_reply_to_id": null,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: would be shorter to write `!AccessCoin(outpoint).IsSpent()`",
      "created_at": "2021-04-14T23:25:51Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r613648523",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/613648523"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 523,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/613653530",
      "pull_request_review_id": 636162504,
      "id": 613653530,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMzY1MzUzMA==",
      "diff_hunk": "@@ -465,6 +464,111 @@ static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationS\n     return CheckInputScripts(tx, state, view, flags, /* cacheSigStore = */ true, /* cacheFullSciptStore = */ true, txdata);\n }\n \n+/**\n+ * A CoinsView that adds a memory cache to another CoinsView and serves as temporary scratch space.\n+ * Used by MemPoolAccept class to validate transactions and packages before submitting to mempool.\n+ * A backend can be set to provide read access to chainstate and/or mempool coins, but writing to\n+ * the backend is disabled. Avoid using a CoinsViewTemporary in consensus-critical paths such\n+ * as writing to the script cache. See CheckInputsFromMempoolAndCache as an example. When not being\n+ * used to validate a package (m_temp_added and m_temp_spent are empty), a CoinsViewTemporary\n+ * behaves exactly like a CCoinsViewCache.\n+ */\n+class CoinsViewTemporary : public CCoinsViewCache\n+{\n+    /**\n+    * Coins made available by transactions being validated. Tracking these allows for package\n+    * validation, since we can access transaction outputs without submitting them to mempool.\n+    */\n+    std::map<COutPoint, Coin> m_temp_added;\n+\n+    /**\n+    * Coins spent by transactions being validated. When validating a package, we need to track\n+    * these in order to distinguish between missing/spent coins and conflicts within a package.\n+    */\n+    std::set<COutPoint> m_temp_spent;\n+\n+    /** An empty coin used as a placeholder for a spent coin.*/\n+    inline static const Coin s_coin_spent;\n+\n+public:\n+\n+    CoinsViewTemporary(CCoinsView* baseIn) : CCoinsViewCache(baseIn) {}\n+\n+    // Delete the copy constructor to prevent accidentally using it when one intends to create a\n+    // CoinsViewTemporary on top of a base cache.\n+    CoinsViewTemporary(const CoinsViewTemporary &) = delete;\n+\n+    bool GetCoin(const COutPoint& outpoint, Coin& coin) const override {\n+        coin = AccessCoin(outpoint);\n+        return !coin.IsSpent();\n+    }\n+\n+    const Coin& AccessCoin(const COutPoint& outpoint) const override {\n+        // Check to see if another tx in the package has already spent this coin (conflict-in-package).\n+        // Coins spent by others in the package are only tracked in m_temp_spent.\n+        if (m_temp_spent.count(outpoint)) {\n+            return s_coin_spent;\n+        }\n+\n+        // Check to see if the inputs are made available by another tx in the package.\n+        // These Coins would not be available in the underlying CoinsView.\n+        if (auto it = m_temp_added.find(outpoint); it != m_temp_added.end()) {\n+            assert(!it->second.IsSpent());\n+            return it->second;\n+        }\n+        return CCoinsViewCache::AccessCoin(outpoint);\n+    }\n+\n+    bool HaveCoin(const COutPoint& outpoint) const override {\n+        Coin coin;\n+        return GetCoin(outpoint, coin);\n+    }\n+\n+    /**\n+    * Update with coins spent and created by a transaction.\n+    * Only used for package validation.\n+    */\n+    void PackageAddTransaction(const CTransactionRef& tx)\n+    {\n+        // Track Coins spent by this transaction. They must exist and not already be spent.",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 102,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "cc00a859deef3701f5d9fb8e7076a074b26f7892",
      "in_reply_to_id": null,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "this should be documented in the function doc that this must be true.",
      "created_at": "2021-04-14T23:40:50Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r613653530",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/613653530"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 533,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/613653851",
      "pull_request_review_id": 636162946,
      "id": 613653851,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMzY1Mzg1MQ==",
      "diff_hunk": "@@ -465,6 +464,111 @@ static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationS\n     return CheckInputScripts(tx, state, view, flags, /* cacheSigStore = */ true, /* cacheFullSciptStore = */ true, txdata);\n }\n \n+/**\n+ * A CoinsView that adds a memory cache to another CoinsView and serves as temporary scratch space.\n+ * Used by MemPoolAccept class to validate transactions and packages before submitting to mempool.\n+ * A backend can be set to provide read access to chainstate and/or mempool coins, but writing to\n+ * the backend is disabled. Avoid using a CoinsViewTemporary in consensus-critical paths such\n+ * as writing to the script cache. See CheckInputsFromMempoolAndCache as an example. When not being\n+ * used to validate a package (m_temp_added and m_temp_spent are empty), a CoinsViewTemporary\n+ * behaves exactly like a CCoinsViewCache.\n+ */\n+class CoinsViewTemporary : public CCoinsViewCache\n+{\n+    /**\n+    * Coins made available by transactions being validated. Tracking these allows for package\n+    * validation, since we can access transaction outputs without submitting them to mempool.\n+    */\n+    std::map<COutPoint, Coin> m_temp_added;\n+\n+    /**\n+    * Coins spent by transactions being validated. When validating a package, we need to track\n+    * these in order to distinguish between missing/spent coins and conflicts within a package.\n+    */\n+    std::set<COutPoint> m_temp_spent;\n+\n+    /** An empty coin used as a placeholder for a spent coin.*/\n+    inline static const Coin s_coin_spent;\n+\n+public:\n+\n+    CoinsViewTemporary(CCoinsView* baseIn) : CCoinsViewCache(baseIn) {}\n+\n+    // Delete the copy constructor to prevent accidentally using it when one intends to create a\n+    // CoinsViewTemporary on top of a base cache.\n+    CoinsViewTemporary(const CoinsViewTemporary &) = delete;\n+\n+    bool GetCoin(const COutPoint& outpoint, Coin& coin) const override {\n+        coin = AccessCoin(outpoint);\n+        return !coin.IsSpent();\n+    }\n+\n+    const Coin& AccessCoin(const COutPoint& outpoint) const override {\n+        // Check to see if another tx in the package has already spent this coin (conflict-in-package).\n+        // Coins spent by others in the package are only tracked in m_temp_spent.\n+        if (m_temp_spent.count(outpoint)) {\n+            return s_coin_spent;\n+        }\n+\n+        // Check to see if the inputs are made available by another tx in the package.\n+        // These Coins would not be available in the underlying CoinsView.\n+        if (auto it = m_temp_added.find(outpoint); it != m_temp_added.end()) {\n+            assert(!it->second.IsSpent());\n+            return it->second;\n+        }\n+        return CCoinsViewCache::AccessCoin(outpoint);\n+    }\n+\n+    bool HaveCoin(const COutPoint& outpoint) const override {\n+        Coin coin;\n+        return GetCoin(outpoint, coin);\n+    }\n+\n+    /**\n+    * Update with coins spent and created by a transaction.\n+    * Only used for package validation.\n+    */\n+    void PackageAddTransaction(const CTransactionRef& tx)\n+    {\n+        // Track Coins spent by this transaction. They must exist and not already be spent.\n+        for (auto input : tx->vin) {\n+            Coin spent_coin;\n+            Assume(GetCoin(input.prevout, spent_coin));",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 105,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "cc00a859deef3701f5d9fb8e7076a074b26f7892",
      "in_reply_to_id": null,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "HaveCoin?",
      "created_at": "2021-04-14T23:41:57Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r613653851",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/613653851"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 536,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/613672128",
      "pull_request_review_id": 636183952,
      "id": 613672128,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMzY3MjEyOA==",
      "diff_hunk": "@@ -465,6 +464,111 @@ static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationS\n     return CheckInputScripts(tx, state, view, flags, /* cacheSigStore = */ true, /* cacheFullSciptStore = */ true, txdata);\n }\n \n+/**\n+ * A CoinsView that adds a memory cache to another CoinsView and serves as temporary scratch space.\n+ * Used by MemPoolAccept class to validate transactions and packages before submitting to mempool.\n+ * A backend can be set to provide read access to chainstate and/or mempool coins, but writing to\n+ * the backend is disabled. Avoid using a CoinsViewTemporary in consensus-critical paths such\n+ * as writing to the script cache. See CheckInputsFromMempoolAndCache as an example. When not being\n+ * used to validate a package (m_temp_added and m_temp_spent are empty), a CoinsViewTemporary\n+ * behaves exactly like a CCoinsViewCache.\n+ */\n+class CoinsViewTemporary : public CCoinsViewCache\n+{\n+    /**\n+    * Coins made available by transactions being validated. Tracking these allows for package\n+    * validation, since we can access transaction outputs without submitting them to mempool.\n+    */\n+    std::map<COutPoint, Coin> m_temp_added;\n+\n+    /**\n+    * Coins spent by transactions being validated. When validating a package, we need to track\n+    * these in order to distinguish between missing/spent coins and conflicts within a package.\n+    */\n+    std::set<COutPoint> m_temp_spent;\n+\n+    /** An empty coin used as a placeholder for a spent coin.*/\n+    inline static const Coin s_coin_spent;\n+\n+public:\n+\n+    CoinsViewTemporary(CCoinsView* baseIn) : CCoinsViewCache(baseIn) {}\n+\n+    // Delete the copy constructor to prevent accidentally using it when one intends to create a\n+    // CoinsViewTemporary on top of a base cache.\n+    CoinsViewTemporary(const CoinsViewTemporary &) = delete;\n+\n+    bool GetCoin(const COutPoint& outpoint, Coin& coin) const override {\n+        coin = AccessCoin(outpoint);\n+        return !coin.IsSpent();\n+    }\n+\n+    const Coin& AccessCoin(const COutPoint& outpoint) const override {\n+        // Check to see if another tx in the package has already spent this coin (conflict-in-package).\n+        // Coins spent by others in the package are only tracked in m_temp_spent.\n+        if (m_temp_spent.count(outpoint)) {\n+            return s_coin_spent;\n+        }\n+\n+        // Check to see if the inputs are made available by another tx in the package.\n+        // These Coins would not be available in the underlying CoinsView.\n+        if (auto it = m_temp_added.find(outpoint); it != m_temp_added.end()) {\n+            assert(!it->second.IsSpent());\n+            return it->second;\n+        }\n+        return CCoinsViewCache::AccessCoin(outpoint);\n+    }\n+\n+    bool HaveCoin(const COutPoint& outpoint) const override {\n+        Coin coin;\n+        return GetCoin(outpoint, coin);\n+    }\n+\n+    /**\n+    * Update with coins spent and created by a transaction.\n+    * Only used for package validation.\n+    */\n+    void PackageAddTransaction(const CTransactionRef& tx)\n+    {\n+        // Track Coins spent by this transaction. They must exist and not already be spent.\n+        for (auto input : tx->vin) {\n+            Coin spent_coin;\n+            Assume(GetCoin(input.prevout, spent_coin));\n+            m_temp_spent.insert(input.prevout);\n+        }\n+        // Track Coins added by this transaction.\n+        for (unsigned int n = 0; n < tx->vout.size(); ++n) {\n+            m_temp_added.emplace(COutPoint(tx->GetHash(), n), Coin(tx->vout[n], MEMPOOL_HEIGHT, false));\n+        }\n+    }\n+\n+    /**\n+    * Returns whether an outpoint is spent by a transaction in the package being validated.\n+    * Only used for package validation.\n+    */\n+    bool PackageSpends(const COutPoint& outpoint) const {\n+        return m_temp_spent.count(outpoint);\n+    }\n+\n+    /**\n+    * Clear our knowledge of which coins have been spent so far during validation.\n+    * Only used for package validation.\n+    */\n+    void ClearTemporarySpends() {\n+        m_temp_spent.clear();\n+    }\n+\n+    // A CoinsViewTemporary is for temporary scratch space only; it should not write to its backend.\n+    bool Flush() override {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 131,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "cc00a859deef3701f5d9fb8e7076a074b26f7892",
      "in_reply_to_id": null,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think you should just return false here maybe? would need to check the API but that should tell you that it failed (otherwise change the API to be nothrow)\r\n\r\n",
      "created_at": "2021-04-15T00:40:47Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r613672128",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/613672128"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 534,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/613682979",
      "pull_request_review_id": 636191699,
      "id": 613682979,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMzY4Mjk3OQ==",
      "diff_hunk": "@@ -1061,28 +1178,131 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n \n     Workspace ws(ptx);\n \n-    if (!PreChecks(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!PreChecks(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n-    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Tx was accepted, but not added\n     if (args.m_test_accept) {\n-        return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+        return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n     }\n \n-    if (!Finalize(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!Finalize(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+    return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+}\n+\n+PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::vector<CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    PackageValidationState package_state;\n+    const unsigned int package_count = txns.size();\n+\n+    // These context-free package limits can be checked before taking the mempool lock.\n+    if (package_count > MAX_PACKAGE_COUNT) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"too-many-transactions\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    const int64_t total_size = std::accumulate(txns.cbegin(), txns.cend(), 0,\n+                               [](int64_t sum, const auto& tx) { return sum + GetVirtualTransactionSize(*tx); });\n+    if (total_size > MAX_PACKAGE_SIZE * 1000) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"too-large\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    std::vector<Workspace> workspaces{};\n+    workspaces.reserve(package_count);\n+\n+    // Require the package to be sorted in order of dependency, i.e. parents appear before children.\n+    // An unsorted package will fail anyway on missing-inputs, but it's better to quit earlier and\n+    // fail on something less ambiguous (missing-inputs could also be an orphan or trying to\n+    // spend nonexistent coins).\n+    for (const auto& tx : txns) {\n+        Workspace workspace(tx);\n+        for (const auto& input : tx->vin) {\n+            if (std::find_if(workspaces.begin(), workspaces.end(),\n+                             [&, txid = input.prevout.hash](const auto& preceding_ws)\n+                             { return preceding_ws.m_ptx->GetHash() == txid; }) == workspaces.end() &&\n+                std::find_if(txns.begin(), txns.end(),",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 274,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "cc00a859deef3701f5d9fb8e7076a074b26f7892",
      "in_reply_to_id": null,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "would prolly be faster to build a hashset as you go thru here.\r\n\r\nIf not, you can transform the top for loop to scan the txiters and just scan the txns txids after the current one for a small performance bump.",
      "created_at": "2021-04-15T01:03:25Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r613682979",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/613682979"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1237,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/613689838",
      "pull_request_review_id": 636195304,
      "id": 613689838,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMzY4OTgzOA==",
      "diff_hunk": "@@ -1061,28 +1178,131 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n \n     Workspace ws(ptx);\n \n-    if (!PreChecks(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!PreChecks(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n-    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Tx was accepted, but not added\n     if (args.m_test_accept) {\n-        return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+        return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n     }\n \n-    if (!Finalize(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!Finalize(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+    return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+}\n+\n+PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::vector<CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    PackageValidationState package_state;\n+    const unsigned int package_count = txns.size();\n+\n+    // These context-free package limits can be checked before taking the mempool lock.\n+    if (package_count > MAX_PACKAGE_COUNT) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"too-many-transactions\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    const int64_t total_size = std::accumulate(txns.cbegin(), txns.cend(), 0,\n+                               [](int64_t sum, const auto& tx) { return sum + GetVirtualTransactionSize(*tx); });\n+    if (total_size > MAX_PACKAGE_SIZE * 1000) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"too-large\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    std::vector<Workspace> workspaces{};\n+    workspaces.reserve(package_count);\n+\n+    // Require the package to be sorted in order of dependency, i.e. parents appear before children.\n+    // An unsorted package will fail anyway on missing-inputs, but it's better to quit earlier and\n+    // fail on something less ambiguous (missing-inputs could also be an orphan or trying to\n+    // spend nonexistent coins).\n+    for (const auto& tx : txns) {\n+        Workspace workspace(tx);\n+        for (const auto& input : tx->vin) {\n+            if (std::find_if(workspaces.begin(), workspaces.end(),\n+                             [&, txid = input.prevout.hash](const auto& preceding_ws)\n+                             { return preceding_ws.m_ptx->GetHash() == txid; }) == workspaces.end() &&\n+                std::find_if(txns.begin(), txns.end(),\n+                             [&, txid = input.prevout.hash](const auto& tx)\n+                             { return tx->GetHash() == txid; }) != txns.end()) {\n+                // If we don't find the parent in workspaces but we do find it in txns,\n+                // then it must be a subsequent transaction in the package.\n+                package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-sorted\");\n+                return PackageMempoolAcceptResult(package_state, {});\n+            }\n+        }",
      "path": "src/validation.cpp",
      "position": 192,
      "original_position": 282,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "cc00a859deef3701f5d9fb8e7076a074b26f7892",
      "in_reply_to_id": null,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "note that this is not canonically ordered. \r\n\r\nOne way to do this is to add a new field \"rank\" in the workspace. For each tx, it's rank is max(parent rank) + 1. Therefore no tx has a lower rank than it's parent. Then you can verify sorted by rank primary and secondary hash `a.rank < b.rank || (a.rank == b.rank && a.hash < b.hash)`. \r\n\r\nThis lets you verify that you have received the package in canonical order. This is useful if you later want package IDs.\r\n\r\nTo generate a canonically ordered package, you can sort by hash, and then stable sort by rank.\r\n\r\nedit: for correctness",
      "created_at": "2021-04-15T01:13:59Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r613689838",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/613689838"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1137,
      "original_line": 1137,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/613690286",
      "pull_request_review_id": 636195520,
      "id": 613690286,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMzY5MDI4Ng==",
      "diff_hunk": "@@ -1061,28 +1178,131 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n \n     Workspace ws(ptx);\n \n-    if (!PreChecks(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!PreChecks(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n-    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Tx was accepted, but not added\n     if (args.m_test_accept) {\n-        return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+        return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n     }\n \n-    if (!Finalize(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!Finalize(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+    return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+}\n+\n+PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::vector<CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    PackageValidationState package_state;\n+    const unsigned int package_count = txns.size();\n+\n+    // These context-free package limits can be checked before taking the mempool lock.\n+    if (package_count > MAX_PACKAGE_COUNT) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"too-many-transactions\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    const int64_t total_size = std::accumulate(txns.cbegin(), txns.cend(), 0,\n+                               [](int64_t sum, const auto& tx) { return sum + GetVirtualTransactionSize(*tx); });\n+    if (total_size > MAX_PACKAGE_SIZE * 1000) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"too-large\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    std::vector<Workspace> workspaces{};\n+    workspaces.reserve(package_count);\n+\n+    // Require the package to be sorted in order of dependency, i.e. parents appear before children.\n+    // An unsorted package will fail anyway on missing-inputs, but it's better to quit earlier and\n+    // fail on something less ambiguous (missing-inputs could also be an orphan or trying to\n+    // spend nonexistent coins).\n+    for (const auto& tx : txns) {\n+        Workspace workspace(tx);\n+        for (const auto& input : tx->vin) {\n+            if (std::find_if(workspaces.begin(), workspaces.end(),\n+                             [&, txid = input.prevout.hash](const auto& preceding_ws)\n+                             { return preceding_ws.m_ptx->GetHash() == txid; }) == workspaces.end() &&\n+                std::find_if(txns.begin(), txns.end(),\n+                             [&, txid = input.prevout.hash](const auto& tx)\n+                             { return tx->GetHash() == txid; }) != txns.end()) {\n+                // If we don't find the parent in workspaces but we do find it in txns,\n+                // then it must be a subsequent transaction in the package.\n+                package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-sorted\");\n+                return PackageMempoolAcceptResult(package_state, {});\n+            }\n+        }",
      "path": "src/validation.cpp",
      "position": 192,
      "original_position": 282,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "cc00a859deef3701f5d9fb8e7076a074b26f7892",
      "in_reply_to_id": 613689838,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "To do this change I'd get rid of the find_if's and make them for loops it will be easier to code.",
      "created_at": "2021-04-15T01:14:36Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r613690286",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/613690286"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1137,
      "original_line": 1137,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/613691916",
      "pull_request_review_id": 636196417,
      "id": 613691916,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMzY5MTkxNg==",
      "diff_hunk": "@@ -1061,28 +1178,131 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n \n     Workspace ws(ptx);\n \n-    if (!PreChecks(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!PreChecks(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n-    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Tx was accepted, but not added\n     if (args.m_test_accept) {\n-        return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+        return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n     }\n \n-    if (!Finalize(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!Finalize(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+    return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+}\n+\n+PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::vector<CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    PackageValidationState package_state;\n+    const unsigned int package_count = txns.size();\n+\n+    // These context-free package limits can be checked before taking the mempool lock.\n+    if (package_count > MAX_PACKAGE_COUNT) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"too-many-transactions\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    const int64_t total_size = std::accumulate(txns.cbegin(), txns.cend(), 0,\n+                               [](int64_t sum, const auto& tx) { return sum + GetVirtualTransactionSize(*tx); });\n+    if (total_size > MAX_PACKAGE_SIZE * 1000) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"too-large\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    std::vector<Workspace> workspaces{};\n+    workspaces.reserve(package_count);\n+\n+    // Require the package to be sorted in order of dependency, i.e. parents appear before children.\n+    // An unsorted package will fail anyway on missing-inputs, but it's better to quit earlier and\n+    // fail on something less ambiguous (missing-inputs could also be an orphan or trying to\n+    // spend nonexistent coins).\n+    for (const auto& tx : txns) {\n+        Workspace workspace(tx);\n+        for (const auto& input : tx->vin) {\n+            if (std::find_if(workspaces.begin(), workspaces.end(),\n+                             [&, txid = input.prevout.hash](const auto& preceding_ws)\n+                             { return preceding_ws.m_ptx->GetHash() == txid; }) == workspaces.end() &&\n+                std::find_if(txns.begin(), txns.end(),\n+                             [&, txid = input.prevout.hash](const auto& tx)\n+                             { return tx->GetHash() == txid; }) != txns.end()) {\n+                // If we don't find the parent in workspaces but we do find it in txns,\n+                // then it must be a subsequent transaction in the package.\n+                package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-sorted\");\n+                return PackageMempoolAcceptResult(package_state, {});\n+            }\n+        }\n+        workspaces.emplace_back(std::move(workspace));",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 283,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "cc00a859deef3701f5d9fb8e7076a074b26f7892",
      "in_reply_to_id": null,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: you can directly construct the workspace on the back of workspaces ",
      "created_at": "2021-04-15T01:17:09Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r613691916",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/613691916"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1245,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/613692663",
      "pull_request_review_id": 636196759,
      "id": 613692663,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMzY5MjY2Mw==",
      "diff_hunk": "@@ -1061,28 +1178,131 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n \n     Workspace ws(ptx);\n \n-    if (!PreChecks(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!PreChecks(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n-    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Tx was accepted, but not added\n     if (args.m_test_accept) {\n-        return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+        return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n     }\n \n-    if (!Finalize(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!Finalize(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+    return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+}\n+\n+PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::vector<CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    PackageValidationState package_state;\n+    const unsigned int package_count = txns.size();\n+\n+    // These context-free package limits can be checked before taking the mempool lock.\n+    if (package_count > MAX_PACKAGE_COUNT) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"too-many-transactions\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    const int64_t total_size = std::accumulate(txns.cbegin(), txns.cend(), 0,\n+                               [](int64_t sum, const auto& tx) { return sum + GetVirtualTransactionSize(*tx); });\n+    if (total_size > MAX_PACKAGE_SIZE * 1000) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"too-large\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    std::vector<Workspace> workspaces{};\n+    workspaces.reserve(package_count);\n+\n+    // Require the package to be sorted in order of dependency, i.e. parents appear before children.\n+    // An unsorted package will fail anyway on missing-inputs, but it's better to quit earlier and\n+    // fail on something less ambiguous (missing-inputs could also be an orphan or trying to\n+    // spend nonexistent coins).\n+    for (const auto& tx : txns) {\n+        Workspace workspace(tx);\n+        for (const auto& input : tx->vin) {\n+            if (std::find_if(workspaces.begin(), workspaces.end(),\n+                             [&, txid = input.prevout.hash](const auto& preceding_ws)\n+                             { return preceding_ws.m_ptx->GetHash() == txid; }) == workspaces.end() &&\n+                std::find_if(txns.begin(), txns.end(),\n+                             [&, txid = input.prevout.hash](const auto& tx)\n+                             { return tx->GetHash() == txid; }) != txns.end()) {\n+                // If we don't find the parent in workspaces but we do find it in txns,\n+                // then it must be a subsequent transaction in the package.\n+                package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-sorted\");\n+                return PackageMempoolAcceptResult(package_state, {});\n+            }\n+        }\n+        workspaces.emplace_back(std::move(workspace));",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 283,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "cc00a859deef3701f5d9fb8e7076a074b26f7892",
      "in_reply_to_id": 613691916,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "altho then you want to go to end-1 if you do that.",
      "created_at": "2021-04-15T01:18:11Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r613692663",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/613692663"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1245,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/613693573",
      "pull_request_review_id": 636197451,
      "id": 613693573,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMzY5MzU3Mw==",
      "diff_hunk": "@@ -1060,28 +1176,93 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n \n     Workspace ws(ptx);\n \n-    if (!PreChecks(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!PreChecks(args, ws)) return MempoolAcceptResult(*ws.m_ptx, ws.m_state);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(*ws.m_ptx, ws.m_state);\n \n-    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(*ws.m_ptx, ws.m_state);\n \n     // Tx was accepted, but not added\n     if (args.m_test_accept) {\n-        return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+        return MempoolAcceptResult(*ws.m_ptx, std::move(ws.m_replaced_transactions), ws.m_base_fees);\n     }\n \n-    if (!Finalize(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!Finalize(args, ws)) return MempoolAcceptResult(*ws.m_ptx, ws.m_state);\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+    return MempoolAcceptResult(*ws.m_ptx, std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+}\n+\n+std::vector<MempoolAcceptResult> MemPoolAccept::AcceptMultipleTransactions(std::vector<CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    std::vector<Workspace> workspaces{};\n+    const int package_size = txns.size();\n+    workspaces.reserve(package_size);\n+    std::transform(txns.begin(), txns.end(), std::back_inserter(workspaces), [](CTransactionRef& tx) {\n+        return Workspace(tx);\n+    });\n+    std::vector<MempoolAcceptResult> results;\n+    results.reserve(package_size);\n+\n+    LOCK(m_pool.cs);\n+    // Do all PreChecks first and fail fast to avoid running expensive script checks when unnecessary.\n+    for (Workspace& ws : workspaces) {\n+        if (!PreChecks(args, ws)) {",
      "path": "src/validation.cpp",
      "position": 199,
      "original_position": 235,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "in_reply_to_id": 594478671,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think this is intended and was out of scope of this PR -- this is just setup for later expanding what can be accepted",
      "created_at": "2021-04-15T01:20:14Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r613693573",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/613693573"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1144,
      "original_line": 1144,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/613695175",
      "pull_request_review_id": 636199424,
      "id": 613695175,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMzY5NTE3NQ==",
      "diff_hunk": "@@ -1061,28 +1178,131 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n \n     Workspace ws(ptx);\n \n-    if (!PreChecks(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!PreChecks(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n-    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Tx was accepted, but not added\n     if (args.m_test_accept) {\n-        return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+        return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n     }\n \n-    if (!Finalize(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!Finalize(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+    return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+}\n+\n+PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::vector<CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    PackageValidationState package_state;\n+    const unsigned int package_count = txns.size();\n+\n+    // These context-free package limits can be checked before taking the mempool lock.\n+    if (package_count > MAX_PACKAGE_COUNT) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"too-many-transactions\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    const int64_t total_size = std::accumulate(txns.cbegin(), txns.cend(), 0,\n+                               [](int64_t sum, const auto& tx) { return sum + GetVirtualTransactionSize(*tx); });\n+    if (total_size > MAX_PACKAGE_SIZE * 1000) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"too-large\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    std::vector<Workspace> workspaces{};\n+    workspaces.reserve(package_count);\n+\n+    // Require the package to be sorted in order of dependency, i.e. parents appear before children.\n+    // An unsorted package will fail anyway on missing-inputs, but it's better to quit earlier and\n+    // fail on something less ambiguous (missing-inputs could also be an orphan or trying to\n+    // spend nonexistent coins).\n+    for (const auto& tx : txns) {\n+        Workspace workspace(tx);\n+        for (const auto& input : tx->vin) {\n+            if (std::find_if(workspaces.begin(), workspaces.end(),\n+                             [&, txid = input.prevout.hash](const auto& preceding_ws)\n+                             { return preceding_ws.m_ptx->GetHash() == txid; }) == workspaces.end() &&\n+                std::find_if(txns.begin(), txns.end(),\n+                             [&, txid = input.prevout.hash](const auto& tx)\n+                             { return tx->GetHash() == txid; }) != txns.end()) {\n+                // If we don't find the parent in workspaces but we do find it in txns,\n+                // then it must be a subsequent transaction in the package.\n+                package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-sorted\");\n+                return PackageMempoolAcceptResult(package_state, {});\n+            }\n+        }\n+        workspaces.emplace_back(std::move(workspace));\n+    }\n+\n+    LOCK(m_pool.cs);\n+\n+    std::map<const uint256, const MempoolAcceptResult> results;\n+    // Do all PreChecks first and fail fast to avoid running expensive script checks when unnecessary.\n+    for (Workspace& ws : workspaces) {\n+        if (!PreChecks(args, ws)) {",
      "path": "src/validation.cpp",
      "position": 199,
      "original_position": 291,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "cc00a859deef3701f5d9fb8e7076a074b26f7892",
      "in_reply_to_id": null,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "separately -- is it true that PreChecks is not entirely stateless? On edge condition, 2 separate ATMPs could have different minfees & therefore this package code is a little different than separate submissions.",
      "created_at": "2021-04-15T01:26:13Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r613695175",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/613695175"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1144,
      "original_line": 1144,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/613697232",
      "pull_request_review_id": 636201798,
      "id": 613697232,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMzY5NzIzMg==",
      "diff_hunk": "@@ -926,59 +931,73 @@ static RPCHelpMan testmempoolaccept()\n         UniValueType(), // VNUM or VSTR, checked inside AmountFromValue()\n     });\n \n-    if (request.params[0].get_array().size() != 1) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array must contain exactly one raw transaction for now\");\n+    if (request.params[0].get_array().size() > MAX_PACKAGE_COUNT) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array cannot contain more than \" + ToString(MAX_PACKAGE_COUNT) + \" transactions.\");\n     }\n \n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_array()[0].get_str())) {\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n-    }\n-    CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-\n+    const UniValue raw_transactions = request.params[0].get_array();\n     const CFeeRate max_raw_tx_fee_rate = request.params[1].isNull() ?\n                                              DEFAULT_MAX_RAW_TX_FEE_RATE :\n                                              CFeeRate(AmountFromValue(request.params[1]));\n \n-    CTxMemPool& mempool = EnsureMemPool(request.context);\n-    int64_t virtual_size = GetVirtualTransactionSize(*tx);\n-    CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n+    std::vector<CTransactionRef> txns;\n+    for (const auto& rawtx : raw_transactions.getValues()) {\n+        CMutableTransaction mtx;\n+        if (!DecodeHexTx(mtx, rawtx.get_str())) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n+        }\n+        txns.emplace_back(MakeTransactionRef(std::move(mtx)));\n+    }\n \n-    UniValue result(UniValue::VARR);\n-    UniValue result_0(UniValue::VOBJ);\n-    result_0.pushKV(\"txid\", tx->GetHash().GetHex());\n-    result_0.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n-\n-    const MempoolAcceptResult accept_result = WITH_LOCK(cs_main, return AcceptToMemoryPool(::ChainstateActive(), mempool, std::move(tx),\n-                                                  false /* bypass_limits */, /* test_accept */ true));\n-\n-    // Only return the fee and vsize if the transaction would pass ATMP.\n-    // These can be used to calculate the feerate.\n-    if (accept_result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-        const CAmount fee = accept_result.m_base_fees.value();\n-        // Check that fee does not exceed maximum fee\n-        if (max_raw_tx_fee && fee > max_raw_tx_fee) {\n-            result_0.pushKV(\"allowed\", false);\n-            result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n-        } else {\n-            result_0.pushKV(\"allowed\", true);\n-            result_0.pushKV(\"vsize\", virtual_size);\n-            UniValue fees(UniValue::VOBJ);\n-            fees.pushKV(\"base\", ValueFromAmount(fee));\n-            result_0.pushKV(\"fees\", fees);\n+    CTxMemPool& mempool = EnsureMemPool(request.context);\n+    CChainState& chainstate = EnsureChainman(request.context).ActiveChainstate();\n+    const PackageMempoolAcceptResult validation_result = txns.size() > 1\n+        ? WITH_LOCK(cs_main, return ProcessNewPackage(chainstate, mempool, txns, /* test_accept */ true))\n+        : WITH_LOCK(cs_main, return PackageMempoolAcceptResult(txns[0]->GetHash(),",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 96,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "cc00a859deef3701f5d9fb8e7076a074b26f7892",
      "in_reply_to_id": 613603255,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "maybe add a forceaspackage param bool? Would be good to be able to test the single tx as a package code path to test your PR, and a user would want to the same behavior call independent.\r\n\r\nEventually I think all relay should be going through the package path so I like to minimize special casing :)",
      "created_at": "2021-04-15T01:33:06Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r613697232",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/613697232"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 956,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/614060709",
      "pull_request_review_id": 636674634,
      "id": 614060709,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNDA2MDcwOQ==",
      "diff_hunk": "@@ -1061,28 +1178,131 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n \n     Workspace ws(ptx);\n \n-    if (!PreChecks(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!PreChecks(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n-    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Tx was accepted, but not added\n     if (args.m_test_accept) {\n-        return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+        return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n     }\n \n-    if (!Finalize(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!Finalize(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+    return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+}\n+\n+PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::vector<CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    PackageValidationState package_state;\n+    const unsigned int package_count = txns.size();\n+\n+    // These context-free package limits can be checked before taking the mempool lock.\n+    if (package_count > MAX_PACKAGE_COUNT) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"too-many-transactions\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    const int64_t total_size = std::accumulate(txns.cbegin(), txns.cend(), 0,\n+                               [](int64_t sum, const auto& tx) { return sum + GetVirtualTransactionSize(*tx); });\n+    if (total_size > MAX_PACKAGE_SIZE * 1000) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"too-large\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    std::vector<Workspace> workspaces{};\n+    workspaces.reserve(package_count);\n+\n+    // Require the package to be sorted in order of dependency, i.e. parents appear before children.\n+    // An unsorted package will fail anyway on missing-inputs, but it's better to quit earlier and\n+    // fail on something less ambiguous (missing-inputs could also be an orphan or trying to\n+    // spend nonexistent coins).\n+    for (const auto& tx : txns) {\n+        Workspace workspace(tx);\n+        for (const auto& input : tx->vin) {\n+            if (std::find_if(workspaces.begin(), workspaces.end(),\n+                             [&, txid = input.prevout.hash](const auto& preceding_ws)\n+                             { return preceding_ws.m_ptx->GetHash() == txid; }) == workspaces.end() &&\n+                std::find_if(txns.begin(), txns.end(),\n+                             [&, txid = input.prevout.hash](const auto& tx)\n+                             { return tx->GetHash() == txid; }) != txns.end()) {\n+                // If we don't find the parent in workspaces but we do find it in txns,\n+                // then it must be a subsequent transaction in the package.\n+                package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-sorted\");\n+                return PackageMempoolAcceptResult(package_state, {});\n+            }\n+        }\n+        workspaces.emplace_back(std::move(workspace));\n+    }\n+\n+    LOCK(m_pool.cs);\n+\n+    std::map<const uint256, const MempoolAcceptResult> results;\n+    // Do all PreChecks first and fail fast to avoid running expensive script checks when unnecessary.\n+    for (Workspace& ws : workspaces) {\n+        if (!PreChecks(args, ws)) {",
      "path": "src/validation.cpp",
      "position": 199,
      "original_position": 291,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "cc00a859deef3701f5d9fb8e7076a074b26f7892",
      "in_reply_to_id": 613695175,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`PreChecks` is not stateless, no. Maybe you're thinking of `CheckTransaction`?\r\nThere's no way to make separate mempool accepts identical unless we hold cs_main the entire time - you can just as well have different results from the inputs getting spent in between calls.",
      "created_at": "2021-04-15T13:17:42Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r614060709",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/614060709"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1144,
      "original_line": 1144,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/614350204",
      "pull_request_review_id": 637073190,
      "id": 614350204,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNDM1MDIwNA==",
      "diff_hunk": "@@ -187,34 +188,65 @@ void PruneBlockFilesManual(CChainState& active_chainstate, int nManualPruneHeigh\n * Validation result for a single transaction mempool acceptance.\n */\n struct MempoolAcceptResult {\n-    /** Used to indicate the results of mempool validation,\n-    * including the possibility of unfinished validation.\n-    */\n+    /** Used to indicate the results of mempool validation. */\n     enum class ResultType {\n         VALID, //!> Fully validated, valid.\n         INVALID, //!> Invalid.\n     };\n-    ResultType m_result_type;\n-    TxValidationState m_state;\n+    const ResultType m_result_type;\n+    const TxValidationState m_state;\n \n     // The following fields are only present when m_result_type = ResultType::VALID\n     /** Mempool transactions replaced by the tx per BIP 125 rules. */\n-    std::optional<std::list<CTransactionRef>> m_replaced_transactions;\n-    /** Raw base fees. */\n-    std::optional<CAmount> m_base_fees;\n+    const std::optional<std::list<CTransactionRef>> m_replaced_transactions;\n+    /** Raw base fees in satoshis. */\n+    const std::optional<CAmount> m_base_fees;\n+\n+    static MempoolAcceptResult Failure(const TxValidationState state) {\n+        return MempoolAcceptResult(state);\n+    }\n+\n+    static MempoolAcceptResult Success(std::list<CTransactionRef>&& replaced_txns, const CAmount fees) {\n+        return MempoolAcceptResult(std::move(replaced_txns), fees);\n+    }\n \n+// Private constructors. Use static methods MempoolAcceptResult::Success, etc. to construct.\n+private:\n     /** Constructor for failure case */\n-    explicit MempoolAcceptResult(TxValidationState state)\n-        : m_result_type(ResultType::INVALID), m_state(state) {\n+    explicit MempoolAcceptResult(const TxValidationState state)\n+        : m_result_type{ResultType::INVALID}, m_state{state}, m_replaced_transactions(std::nullopt),\n+        m_base_fees{std::nullopt} {\n             Assume(!state.IsValid()); // Can be invalid or error\n         }\n \n     /** Constructor for success case */\n-    explicit MempoolAcceptResult(std::list<CTransactionRef>&& replaced_txns, CAmount fees)\n-        : m_result_type(ResultType::VALID), m_state(TxValidationState{}),\n+    explicit MempoolAcceptResult(std::list<CTransactionRef>&& replaced_txns, const CAmount fees)\n+        : m_result_type{ResultType::VALID},\n         m_replaced_transactions(std::move(replaced_txns)), m_base_fees(fees) {}\n };\n \n+/**\n+* Validation result for package mempool acceptance.\n+*/\n+struct PackageMempoolAcceptResult\n+{\n+    PackageValidationState m_state;\n+    /**\n+    * Map from txid to finished MempoolAcceptResults. The client is responsible\n+    * for keeping track of the transaction objects themselves. If a result is not\n+    * present, it means validation was unfinished for that transaction.\n+    */\n+    std::map<const uint256, const MempoolAcceptResult> m_tx_results;",
      "path": "src/validation.h",
      "position": 51,
      "original_position": 72,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "cc00a859deef3701f5d9fb8e7076a074b26f7892",
      "in_reply_to_id": 613635484,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I guess that'd need to be a vector of optionals - probably more memory, actually. I only insert a result into the map if it's fully validated, so sometimes it only has 1 result.",
      "created_at": "2021-04-15T19:52:03Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r614350204",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/614350204"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 219,
      "original_line": 219,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/614351939",
      "pull_request_review_id": 637075415,
      "id": 614351939,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNDM1MTkzOQ==",
      "diff_hunk": "@@ -465,6 +464,111 @@ static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationS\n     return CheckInputScripts(tx, state, view, flags, /* cacheSigStore = */ true, /* cacheFullSciptStore = */ true, txdata);\n }\n \n+/**\n+ * A CoinsView that adds a memory cache to another CoinsView and serves as temporary scratch space.\n+ * Used by MemPoolAccept class to validate transactions and packages before submitting to mempool.\n+ * A backend can be set to provide read access to chainstate and/or mempool coins, but writing to\n+ * the backend is disabled. Avoid using a CoinsViewTemporary in consensus-critical paths such\n+ * as writing to the script cache. See CheckInputsFromMempoolAndCache as an example. When not being\n+ * used to validate a package (m_temp_added and m_temp_spent are empty), a CoinsViewTemporary\n+ * behaves exactly like a CCoinsViewCache.\n+ */\n+class CoinsViewTemporary : public CCoinsViewCache\n+{\n+    /**\n+    * Coins made available by transactions being validated. Tracking these allows for package\n+    * validation, since we can access transaction outputs without submitting them to mempool.\n+    */\n+    std::map<COutPoint, Coin> m_temp_added;\n+\n+    /**\n+    * Coins spent by transactions being validated. When validating a package, we need to track\n+    * these in order to distinguish between missing/spent coins and conflicts within a package.\n+    */\n+    std::set<COutPoint> m_temp_spent;\n+\n+    /** An empty coin used as a placeholder for a spent coin.*/\n+    inline static const Coin s_coin_spent;",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 60,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "cc00a859deef3701f5d9fb8e7076a074b26f7892",
      "in_reply_to_id": 613646867,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "We had a conversation about the Coins API being a little weird earlier: https://github.com/bitcoin/bitcoin/pull/20833#discussion_r586764973\r\n\r\nIn any case, it's out of the scope of this PR to change the Coins API, so I'm going to leave it as is :shrug:",
      "created_at": "2021-04-15T19:55:04Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r614351939",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/614351939"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 473,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/614353454",
      "pull_request_review_id": 637077430,
      "id": 614353454,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNDM1MzQ1NA==",
      "diff_hunk": "@@ -187,34 +188,65 @@ void PruneBlockFilesManual(CChainState& active_chainstate, int nManualPruneHeigh\n * Validation result for a single transaction mempool acceptance.\n */\n struct MempoolAcceptResult {\n-    /** Used to indicate the results of mempool validation,\n-    * including the possibility of unfinished validation.\n-    */\n+    /** Used to indicate the results of mempool validation. */\n     enum class ResultType {\n         VALID, //!> Fully validated, valid.\n         INVALID, //!> Invalid.\n     };\n-    ResultType m_result_type;\n-    TxValidationState m_state;\n+    const ResultType m_result_type;\n+    const TxValidationState m_state;\n \n     // The following fields are only present when m_result_type = ResultType::VALID\n     /** Mempool transactions replaced by the tx per BIP 125 rules. */\n-    std::optional<std::list<CTransactionRef>> m_replaced_transactions;\n-    /** Raw base fees. */\n-    std::optional<CAmount> m_base_fees;\n+    const std::optional<std::list<CTransactionRef>> m_replaced_transactions;\n+    /** Raw base fees in satoshis. */\n+    const std::optional<CAmount> m_base_fees;\n+\n+    static MempoolAcceptResult Failure(const TxValidationState state) {\n+        return MempoolAcceptResult(state);\n+    }\n+\n+    static MempoolAcceptResult Success(std::list<CTransactionRef>&& replaced_txns, const CAmount fees) {\n+        return MempoolAcceptResult(std::move(replaced_txns), fees);\n+    }\n \n+// Private constructors. Use static methods MempoolAcceptResult::Success, etc. to construct.\n+private:\n     /** Constructor for failure case */\n-    explicit MempoolAcceptResult(TxValidationState state)\n-        : m_result_type(ResultType::INVALID), m_state(state) {\n+    explicit MempoolAcceptResult(const TxValidationState state)\n+        : m_result_type{ResultType::INVALID}, m_state{state}, m_replaced_transactions(std::nullopt),\n+        m_base_fees{std::nullopt} {\n             Assume(!state.IsValid()); // Can be invalid or error\n         }\n \n     /** Constructor for success case */\n-    explicit MempoolAcceptResult(std::list<CTransactionRef>&& replaced_txns, CAmount fees)\n-        : m_result_type(ResultType::VALID), m_state(TxValidationState{}),\n+    explicit MempoolAcceptResult(std::list<CTransactionRef>&& replaced_txns, const CAmount fees)\n+        : m_result_type{ResultType::VALID},\n         m_replaced_transactions(std::move(replaced_txns)), m_base_fees(fees) {}\n };\n \n+/**\n+* Validation result for package mempool acceptance.\n+*/\n+struct PackageMempoolAcceptResult\n+{\n+    PackageValidationState m_state;\n+    /**\n+    * Map from txid to finished MempoolAcceptResults. The client is responsible\n+    * for keeping track of the transaction objects themselves. If a result is not\n+    * present, it means validation was unfinished for that transaction.\n+    */\n+    std::map<const uint256, const MempoolAcceptResult> m_tx_results;",
      "path": "src/validation.h",
      "position": 51,
      "original_position": 72,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "cc00a859deef3701f5d9fb8e7076a074b26f7892",
      "in_reply_to_id": 613635484,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Well so the max size is a vec of size 25 -- so it's a single allocation when you reserve v.s. 25 allocations for the map.\r\n\r\nFurther, the map each allocation is IIRC 2-or-3 pointers (16 - 24 bytes), 32 bytes for hash, and then however big MempoolAcceptResult is.\r\n\r\nFurther in the case where you do have a few things it's extra work/indirection to iterate/lookup.\r\n\r\nYou don't need a optional because MempoolAcceptResult can use it's inner enum to have an \"uninit\" state.\r\n\r\nThe expected case is that all the txns fully validate right? Wouldn't we disconnect peers that send us things that don't validate a lot?",
      "created_at": "2021-04-15T19:57:46Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r614353454",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/614353454"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 219,
      "original_line": 219,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/614356106",
      "pull_request_review_id": 637081012,
      "id": 614356106,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNDM1NjEwNg==",
      "diff_hunk": "@@ -187,34 +188,65 @@ void PruneBlockFilesManual(CChainState& active_chainstate, int nManualPruneHeigh\n * Validation result for a single transaction mempool acceptance.\n */\n struct MempoolAcceptResult {\n-    /** Used to indicate the results of mempool validation,\n-    * including the possibility of unfinished validation.\n-    */\n+    /** Used to indicate the results of mempool validation. */\n     enum class ResultType {\n         VALID, //!> Fully validated, valid.\n         INVALID, //!> Invalid.\n     };\n-    ResultType m_result_type;\n-    TxValidationState m_state;\n+    const ResultType m_result_type;\n+    const TxValidationState m_state;\n \n     // The following fields are only present when m_result_type = ResultType::VALID\n     /** Mempool transactions replaced by the tx per BIP 125 rules. */\n-    std::optional<std::list<CTransactionRef>> m_replaced_transactions;\n-    /** Raw base fees. */\n-    std::optional<CAmount> m_base_fees;\n+    const std::optional<std::list<CTransactionRef>> m_replaced_transactions;\n+    /** Raw base fees in satoshis. */\n+    const std::optional<CAmount> m_base_fees;\n+\n+    static MempoolAcceptResult Failure(const TxValidationState state) {\n+        return MempoolAcceptResult(state);\n+    }\n+\n+    static MempoolAcceptResult Success(std::list<CTransactionRef>&& replaced_txns, const CAmount fees) {\n+        return MempoolAcceptResult(std::move(replaced_txns), fees);\n+    }\n \n+// Private constructors. Use static methods MempoolAcceptResult::Success, etc. to construct.\n+private:\n     /** Constructor for failure case */\n-    explicit MempoolAcceptResult(TxValidationState state)\n-        : m_result_type(ResultType::INVALID), m_state(state) {\n+    explicit MempoolAcceptResult(const TxValidationState state)\n+        : m_result_type{ResultType::INVALID}, m_state{state}, m_replaced_transactions(std::nullopt),\n+        m_base_fees{std::nullopt} {\n             Assume(!state.IsValid()); // Can be invalid or error\n         }\n \n     /** Constructor for success case */\n-    explicit MempoolAcceptResult(std::list<CTransactionRef>&& replaced_txns, CAmount fees)\n-        : m_result_type(ResultType::VALID), m_state(TxValidationState{}),\n+    explicit MempoolAcceptResult(std::list<CTransactionRef>&& replaced_txns, const CAmount fees)\n+        : m_result_type{ResultType::VALID},\n         m_replaced_transactions(std::move(replaced_txns)), m_base_fees(fees) {}\n };\n \n+/**\n+* Validation result for package mempool acceptance.\n+*/\n+struct PackageMempoolAcceptResult\n+{\n+    PackageValidationState m_state;\n+    /**\n+    * Map from txid to finished MempoolAcceptResults. The client is responsible\n+    * for keeping track of the transaction objects themselves. If a result is not\n+    * present, it means validation was unfinished for that transaction.\n+    */\n+    std::map<const uint256, const MempoolAcceptResult> m_tx_results;",
      "path": "src/validation.h",
      "position": 51,
      "original_position": 72,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "cc00a859deef3701f5d9fb8e7076a074b26f7892",
      "in_reply_to_id": 613635484,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I guess to be more concrete -- allocating 25 kinda small things is a vec as single allocation isn't really an issue, so we might as well do it. In the worst case it's more efficient, and in the best case it's not too bad. ",
      "created_at": "2021-04-15T20:02:16Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r614356106",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/614356106"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 219,
      "original_line": 219,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/614394055",
      "pull_request_review_id": 637131951,
      "id": 614394055,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNDM5NDA1NQ==",
      "diff_hunk": "@@ -926,59 +931,73 @@ static RPCHelpMan testmempoolaccept()\n         UniValueType(), // VNUM or VSTR, checked inside AmountFromValue()\n     });\n \n-    if (request.params[0].get_array().size() != 1) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array must contain exactly one raw transaction for now\");\n+    if (request.params[0].get_array().size() > MAX_PACKAGE_COUNT) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array cannot contain more than \" + ToString(MAX_PACKAGE_COUNT) + \" transactions.\");\n     }\n \n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_array()[0].get_str())) {\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n-    }\n-    CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-\n+    const UniValue raw_transactions = request.params[0].get_array();\n     const CFeeRate max_raw_tx_fee_rate = request.params[1].isNull() ?\n                                              DEFAULT_MAX_RAW_TX_FEE_RATE :\n                                              CFeeRate(AmountFromValue(request.params[1]));\n \n-    CTxMemPool& mempool = EnsureMemPool(request.context);\n-    int64_t virtual_size = GetVirtualTransactionSize(*tx);\n-    CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n+    std::vector<CTransactionRef> txns;\n+    for (const auto& rawtx : raw_transactions.getValues()) {\n+        CMutableTransaction mtx;\n+        if (!DecodeHexTx(mtx, rawtx.get_str())) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n+        }\n+        txns.emplace_back(MakeTransactionRef(std::move(mtx)));\n+    }\n \n-    UniValue result(UniValue::VARR);\n-    UniValue result_0(UniValue::VOBJ);\n-    result_0.pushKV(\"txid\", tx->GetHash().GetHex());\n-    result_0.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n-\n-    const MempoolAcceptResult accept_result = WITH_LOCK(cs_main, return AcceptToMemoryPool(::ChainstateActive(), mempool, std::move(tx),\n-                                                  false /* bypass_limits */, /* test_accept */ true));\n-\n-    // Only return the fee and vsize if the transaction would pass ATMP.\n-    // These can be used to calculate the feerate.\n-    if (accept_result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-        const CAmount fee = accept_result.m_base_fees.value();\n-        // Check that fee does not exceed maximum fee\n-        if (max_raw_tx_fee && fee > max_raw_tx_fee) {\n-            result_0.pushKV(\"allowed\", false);\n-            result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n-        } else {\n-            result_0.pushKV(\"allowed\", true);\n-            result_0.pushKV(\"vsize\", virtual_size);\n-            UniValue fees(UniValue::VOBJ);\n-            fees.pushKV(\"base\", ValueFromAmount(fee));\n-            result_0.pushKV(\"fees\", fees);\n+    CTxMemPool& mempool = EnsureMemPool(request.context);\n+    CChainState& chainstate = EnsureChainman(request.context).ActiveChainstate();\n+    const PackageMempoolAcceptResult validation_result = txns.size() > 1\n+        ? WITH_LOCK(cs_main, return ProcessNewPackage(chainstate, mempool, txns, /* test_accept */ true))\n+        : WITH_LOCK(cs_main, return PackageMempoolAcceptResult(txns[0]->GetHash(),",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 96,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "cc00a859deef3701f5d9fb8e7076a074b26f7892",
      "in_reply_to_id": 613603255,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oh I wasn't thinking of it that way - why should all relay go through the package path?\r\n\r\nFor tests, it's definitely possible to call `ProcessNewPackage` with a package of 1 transaction, it's just not exposed through RPC. I have the fuzzer doing it (see top commit)",
      "created_at": "2021-04-15T21:10:59Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r614394055",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/614394055"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 956,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/614395272",
      "pull_request_review_id": 637134342,
      "id": 614395272,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNDM5NTI3Mg==",
      "diff_hunk": "@@ -187,34 +188,65 @@ void PruneBlockFilesManual(CChainState& active_chainstate, int nManualPruneHeigh\n * Validation result for a single transaction mempool acceptance.\n */\n struct MempoolAcceptResult {\n-    /** Used to indicate the results of mempool validation,\n-    * including the possibility of unfinished validation.\n-    */\n+    /** Used to indicate the results of mempool validation. */\n     enum class ResultType {",
      "path": "src/validation.h",
      "position": 16,
      "original_position": 16,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "cc00a859deef3701f5d9fb8e7076a074b26f7892",
      "in_reply_to_id": 613604854,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Most compilers will byte-align it, no?",
      "created_at": "2021-04-15T21:13:25Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r614395272",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/614395272"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 174,
      "original_line": 174,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/614396016",
      "pull_request_review_id": 637135334,
      "id": 614396016,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNDM5NjAxNg==",
      "diff_hunk": "@@ -150,33 +151,48 @@ void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashes\n     }\n }\n \n-bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string &errString, bool fSearchForParents /* = true */) const\n+bool CTxMemPool::CalculateMemPoolAncestors(const std::vector<CTxMemPoolEntry>& entries,\n+                                           setEntries& setAncestors,\n+                                           const uint64_t limitAncestorCount,\n+                                           const uint64_t limitAncestorSize,\n+                                           const uint64_t limitDescendantCount,\n+                                           const uint64_t limitDescendantSize,\n+                                           std::string &errString,\n+                                           const bool fSearchForParents /*=true*/) const\n {\n-    CTxMemPoolEntry::Parents staged_ancestors;\n-    const CTransaction &tx = entry.GetTx();\n+    const size_t total_virtual_size = std::accumulate(entries.cbegin(), entries.cend(), 0,\n+                                      [](int64_t sum, const auto& entry)\n+                                      { return sum + GetVirtualTransactionSize(entry.GetTx()); });\n+    const size_t total_count = entries.size();\n \n+    CTxMemPoolEntry::Parents staged_ancestors;\n     if (fSearchForParents) {\n-        // Get parents of this transaction that are in the mempool\n-        // GetMemPoolParents() is only valid for entries in the mempool, so we\n-        // iterate mapTx to find parents.\n-        for (unsigned int i = 0; i < tx.vin.size(); i++) {\n-            std::optional<txiter> piter = GetIter(tx.vin[i].prevout.hash);\n-            if (piter) {\n-                staged_ancestors.insert(**piter);\n-                if (staged_ancestors.size() + 1 > limitAncestorCount) {\n-                    errString = strprintf(\"too many unconfirmed parents [limit: %u]\", limitAncestorCount);\n-                    return false;\n+\n+        for (const auto& entry : entries) {\n+            // Get parents of this transaction that are in the mempool\n+            // GetMemPoolParents() is only valid for entries in the mempool, so we\n+            // iterate mapTx to find parents.\n+            for (const auto& input : entry.GetTx().vin) {\n+                std::optional<txiter> piter = GetIter(input.prevout.hash);\n+                if (piter) {\n+                    staged_ancestors.insert(**piter);\n+                    if (staged_ancestors.size() + 1 > limitAncestorCount) {\n+                        errString = strprintf(\"too many unconfirmed parents [limit: %u]\", limitAncestorCount);\n+                        return false;\n+                    }\n                 }\n             }\n         }\n     } else {\n-        // If we're not searching for parents, we require this to be an\n-        // entry in the mempool already.\n-        txiter it = mapTx.iterator_to(entry);\n-        staged_ancestors = it->GetMemPoolParentsConst();\n+        // If we're not searching for parents, we require all entries to be in the mempool already.\n+        for (const auto& entry : entries) {",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 63,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "cc00a859deef3701f5d9fb8e7076a074b26f7892",
      "in_reply_to_id": 613618547,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Alternatively, I can PR the epoch algorithm and you can rebase on it, or I can PR it before this code gets released.\r\n\r\nBoth sound like good options!",
      "created_at": "2021-04-15T21:14:59Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r614396016",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/614396016"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 187,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/614397212",
      "pull_request_review_id": 637136834,
      "id": 614397212,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNDM5NzIxMg==",
      "diff_hunk": "@@ -187,34 +188,65 @@ void PruneBlockFilesManual(CChainState& active_chainstate, int nManualPruneHeigh\n * Validation result for a single transaction mempool acceptance.\n */\n struct MempoolAcceptResult {\n-    /** Used to indicate the results of mempool validation,\n-    * including the possibility of unfinished validation.\n-    */\n+    /** Used to indicate the results of mempool validation. */\n     enum class ResultType {",
      "path": "src/validation.h",
      "position": 16,
      "original_position": 16,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "cc00a859deef3701f5d9fb8e7076a074b26f7892",
      "in_reply_to_id": 613604854,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "unclear to me what exact size TxValidationState is.\r\n\r\nGeneral rule of thumb unless you know something about accesses occurring together often is to sort in order biggest field to smallest, it guarantees good packing IIRC. ",
      "created_at": "2021-04-15T21:17:13Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r614397212",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/614397212"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 174,
      "original_line": 174,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615001456",
      "pull_request_review_id": 637925632,
      "id": 615001456,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTAwMTQ1Ng==",
      "diff_hunk": "@@ -465,6 +464,111 @@ static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationS\n     return CheckInputScripts(tx, state, view, flags, /* cacheSigStore = */ true, /* cacheFullSciptStore = */ true, txdata);\n }\n \n+/**\n+ * A CoinsView that adds a memory cache to another CoinsView and serves as temporary scratch space.\n+ * Used by MemPoolAccept class to validate transactions and packages before submitting to mempool.\n+ * A backend can be set to provide read access to chainstate and/or mempool coins, but writing to\n+ * the backend is disabled. Avoid using a CoinsViewTemporary in consensus-critical paths such\n+ * as writing to the script cache. See CheckInputsFromMempoolAndCache as an example. When not being\n+ * used to validate a package (m_temp_added and m_temp_spent are empty), a CoinsViewTemporary\n+ * behaves exactly like a CCoinsViewCache.\n+ */\n+class CoinsViewTemporary : public CCoinsViewCache\n+{\n+    /**\n+    * Coins made available by transactions being validated. Tracking these allows for package\n+    * validation, since we can access transaction outputs without submitting them to mempool.\n+    */\n+    std::map<COutPoint, Coin> m_temp_added;\n+\n+    /**\n+    * Coins spent by transactions being validated. When validating a package, we need to track\n+    * these in order to distinguish between missing/spent coins and conflicts within a package.\n+    */\n+    std::set<COutPoint> m_temp_spent;\n+\n+    /** An empty coin used as a placeholder for a spent coin.*/\n+    inline static const Coin s_coin_spent;\n+\n+public:\n+\n+    CoinsViewTemporary(CCoinsView* baseIn) : CCoinsViewCache(baseIn) {}\n+\n+    // Delete the copy constructor to prevent accidentally using it when one intends to create a\n+    // CoinsViewTemporary on top of a base cache.\n+    CoinsViewTemporary(const CoinsViewTemporary &) = delete;\n+\n+    bool GetCoin(const COutPoint& outpoint, Coin& coin) const override {\n+        coin = AccessCoin(outpoint);\n+        return !coin.IsSpent();\n+    }\n+\n+    const Coin& AccessCoin(const COutPoint& outpoint) const override {\n+        // Check to see if another tx in the package has already spent this coin (conflict-in-package).\n+        // Coins spent by others in the package are only tracked in m_temp_spent.\n+        if (m_temp_spent.count(outpoint)) {\n+            return s_coin_spent;\n+        }\n+\n+        // Check to see if the inputs are made available by another tx in the package.\n+        // These Coins would not be available in the underlying CoinsView.\n+        if (auto it = m_temp_added.find(outpoint); it != m_temp_added.end()) {\n+            assert(!it->second.IsSpent());\n+            return it->second;\n+        }\n+        return CCoinsViewCache::AccessCoin(outpoint);\n+    }\n+\n+    bool HaveCoin(const COutPoint& outpoint) const override {\n+        Coin coin;\n+        return GetCoin(outpoint, coin);\n+    }\n+\n+    /**\n+    * Update with coins spent and created by a transaction.\n+    * Only used for package validation.\n+    */\n+    void PackageAddTransaction(const CTransactionRef& tx)\n+    {\n+        // Track Coins spent by this transaction. They must exist and not already be spent.\n+        for (auto input : tx->vin) {\n+            Coin spent_coin;\n+            Assume(GetCoin(input.prevout, spent_coin));\n+            m_temp_spent.insert(input.prevout);\n+        }\n+        // Track Coins added by this transaction.\n+        for (unsigned int n = 0; n < tx->vout.size(); ++n) {\n+            m_temp_added.emplace(COutPoint(tx->GetHash(), n), Coin(tx->vout[n], MEMPOOL_HEIGHT, false));\n+        }\n+    }\n+\n+    /**\n+    * Returns whether an outpoint is spent by a transaction in the package being validated.\n+    * Only used for package validation.\n+    */\n+    bool PackageSpends(const COutPoint& outpoint) const {\n+        return m_temp_spent.count(outpoint);\n+    }\n+\n+    /**\n+    * Clear our knowledge of which coins have been spent so far during validation.\n+    * Only used for package validation.\n+    */\n+    void ClearTemporarySpends() {\n+        m_temp_spent.clear();\n+    }\n+\n+    // A CoinsViewTemporary is for temporary scratch space only; it should not write to its backend.\n+    bool Flush() override {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 131,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "cc00a859deef3701f5d9fb8e7076a074b26f7892",
      "in_reply_to_id": 613672128,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The API says false = the flush went wrong somehow. I'd like to throw because nobody should be trying to flush the temporary coins cache",
      "created_at": "2021-04-16T17:07:27Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r615001456",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615001456"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 534,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615005492",
      "pull_request_review_id": 637931024,
      "id": 615005492,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTAwNTQ5Mg==",
      "diff_hunk": "@@ -0,0 +1,33 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_PACKAGES_H\n+#define BITCOIN_PACKAGES_H\n+\n+#include <vector>\n+\n+#include <consensus/validation.h>\n+#include <primitives/transaction.h>\n+\n+/** Default maximum number of transactions in a package. */\n+static constexpr uint32_t MAX_PACKAGE_COUNT{25};\n+/** Default maximum total virtual size of transactions in a package in KvB. */\n+static constexpr uint32_t MAX_PACKAGE_SIZE{101};\n+\n+/** A \"reason\" why a package was invalid. It may be that one or more of the included\n+ * transactions is invalid or the package itself violates our rules.\n+ * We don't distinguish between consensus and policy validity right now.\n+ */\n+enum class PackageValidationResult {\n+    PCKG_RESULT_UNSET = 0,        //!< Initial value. The package has not yet been rejected.\n+    PCKG_POLICY,                  //!< The package itself is invalid (e.g. too many transactions).\n+    PCKG_TX,                      //!< At least one tx is invalid.\n+};\n+\n+/** A package is an ordered list of transactions. */\n+using Package = std::vector<CTransactionRef>;",
      "path": "src/packages.h",
      "position": null,
      "original_position": 29,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "cc00a859deef3701f5d9fb8e7076a074b26f7892",
      "in_reply_to_id": 613594392,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Are you saying make `Package` a struct/class? What do you mean by smart constructor, like `make_unique`/`make_shared`?",
      "created_at": "2021-04-16T17:14:33Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r615005492",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615005492"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615005934",
      "pull_request_review_id": 637931616,
      "id": 615005934,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTAwNTkzNA==",
      "diff_hunk": "@@ -926,59 +931,73 @@ static RPCHelpMan testmempoolaccept()\n         UniValueType(), // VNUM or VSTR, checked inside AmountFromValue()\n     });\n \n-    if (request.params[0].get_array().size() != 1) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array must contain exactly one raw transaction for now\");\n+    if (request.params[0].get_array().size() > MAX_PACKAGE_COUNT) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array cannot contain more than \" + ToString(MAX_PACKAGE_COUNT) + \" transactions.\");\n     }\n \n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_array()[0].get_str())) {\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n-    }\n-    CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-\n+    const UniValue raw_transactions = request.params[0].get_array();\n     const CFeeRate max_raw_tx_fee_rate = request.params[1].isNull() ?\n                                              DEFAULT_MAX_RAW_TX_FEE_RATE :\n                                              CFeeRate(AmountFromValue(request.params[1]));\n \n-    CTxMemPool& mempool = EnsureMemPool(request.context);\n-    int64_t virtual_size = GetVirtualTransactionSize(*tx);\n-    CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n+    std::vector<CTransactionRef> txns;\n+    for (const auto& rawtx : raw_transactions.getValues()) {\n+        CMutableTransaction mtx;\n+        if (!DecodeHexTx(mtx, rawtx.get_str())) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n+        }\n+        txns.emplace_back(MakeTransactionRef(std::move(mtx)));\n+    }\n \n-    UniValue result(UniValue::VARR);\n-    UniValue result_0(UniValue::VOBJ);\n-    result_0.pushKV(\"txid\", tx->GetHash().GetHex());\n-    result_0.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n-\n-    const MempoolAcceptResult accept_result = WITH_LOCK(cs_main, return AcceptToMemoryPool(::ChainstateActive(), mempool, std::move(tx),\n-                                                  false /* bypass_limits */, /* test_accept */ true));\n-\n-    // Only return the fee and vsize if the transaction would pass ATMP.\n-    // These can be used to calculate the feerate.\n-    if (accept_result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-        const CAmount fee = accept_result.m_base_fees.value();\n-        // Check that fee does not exceed maximum fee\n-        if (max_raw_tx_fee && fee > max_raw_tx_fee) {\n-            result_0.pushKV(\"allowed\", false);\n-            result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n-        } else {\n-            result_0.pushKV(\"allowed\", true);\n-            result_0.pushKV(\"vsize\", virtual_size);\n-            UniValue fees(UniValue::VOBJ);\n-            fees.pushKV(\"base\", ValueFromAmount(fee));\n-            result_0.pushKV(\"fees\", fees);\n+    CTxMemPool& mempool = EnsureMemPool(request.context);\n+    CChainState& chainstate = EnsureChainman(request.context).ActiveChainstate();\n+    const PackageMempoolAcceptResult validation_result = txns.size() > 1\n+        ? WITH_LOCK(cs_main, return ProcessNewPackage(chainstate, mempool, txns, /* test_accept */ true))",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 95,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "cc00a859deef3701f5d9fb8e7076a074b26f7892",
      "in_reply_to_id": 613602225,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It's the only way i could think of to keep `validation_result` a const 🤷 could also do a lambda, which is probably less clean:\r\n\r\n```c\r\nconst PackageMempoolAcceptResult validation_result = [&]() {\r\n    if (txns.size() > 1) return WITH_LOCK(::cs_main, return ProcessNewPackage());\r\n    return WITH_LOCK(::cs_main, return ATMP());\r\n}();\r\n```",
      "created_at": "2021-04-16T17:15:22Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r615005934",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615005934"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 962,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615007160",
      "pull_request_review_id": 637933131,
      "id": 615007160,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTAwNzE2MA==",
      "diff_hunk": "@@ -1061,28 +1178,131 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n \n     Workspace ws(ptx);\n \n-    if (!PreChecks(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!PreChecks(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n-    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Tx was accepted, but not added\n     if (args.m_test_accept) {\n-        return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+        return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n     }\n \n-    if (!Finalize(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!Finalize(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+    return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+}\n+\n+PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::vector<CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    PackageValidationState package_state;\n+    const unsigned int package_count = txns.size();\n+\n+    // These context-free package limits can be checked before taking the mempool lock.\n+    if (package_count > MAX_PACKAGE_COUNT) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"too-many-transactions\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    const int64_t total_size = std::accumulate(txns.cbegin(), txns.cend(), 0,\n+                               [](int64_t sum, const auto& tx) { return sum + GetVirtualTransactionSize(*tx); });\n+    if (total_size > MAX_PACKAGE_SIZE * 1000) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"too-large\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    std::vector<Workspace> workspaces{};\n+    workspaces.reserve(package_count);\n+\n+    // Require the package to be sorted in order of dependency, i.e. parents appear before children.\n+    // An unsorted package will fail anyway on missing-inputs, but it's better to quit earlier and\n+    // fail on something less ambiguous (missing-inputs could also be an orphan or trying to\n+    // spend nonexistent coins).\n+    for (const auto& tx : txns) {\n+        Workspace workspace(tx);\n+        for (const auto& input : tx->vin) {\n+            if (std::find_if(workspaces.begin(), workspaces.end(),\n+                             [&, txid = input.prevout.hash](const auto& preceding_ws)\n+                             { return preceding_ws.m_ptx->GetHash() == txid; }) == workspaces.end() &&\n+                std::find_if(txns.begin(), txns.end(),\n+                             [&, txid = input.prevout.hash](const auto& tx)\n+                             { return tx->GetHash() == txid; }) != txns.end()) {\n+                // If we don't find the parent in workspaces but we do find it in txns,\n+                // then it must be a subsequent transaction in the package.\n+                package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-sorted\");\n+                return PackageMempoolAcceptResult(package_state, {});\n+            }\n+        }\n+        workspaces.emplace_back(std::move(workspace));",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 283,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "cc00a859deef3701f5d9fb8e7076a074b26f7892",
      "in_reply_to_id": 613691916,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "what's end-1?",
      "created_at": "2021-04-16T17:17:24Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r615007160",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615007160"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1245,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615118145",
      "pull_request_review_id": 638079113,
      "id": 615118145,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTExODE0NQ==",
      "diff_hunk": "@@ -1061,28 +1178,131 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n \n     Workspace ws(ptx);\n \n-    if (!PreChecks(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!PreChecks(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n-    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Tx was accepted, but not added\n     if (args.m_test_accept) {\n-        return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+        return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n     }\n \n-    if (!Finalize(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!Finalize(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+    return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+}\n+\n+PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::vector<CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    PackageValidationState package_state;\n+    const unsigned int package_count = txns.size();\n+\n+    // These context-free package limits can be checked before taking the mempool lock.\n+    if (package_count > MAX_PACKAGE_COUNT) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"too-many-transactions\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    const int64_t total_size = std::accumulate(txns.cbegin(), txns.cend(), 0,\n+                               [](int64_t sum, const auto& tx) { return sum + GetVirtualTransactionSize(*tx); });\n+    if (total_size > MAX_PACKAGE_SIZE * 1000) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"too-large\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    std::vector<Workspace> workspaces{};\n+    workspaces.reserve(package_count);\n+\n+    // Require the package to be sorted in order of dependency, i.e. parents appear before children.\n+    // An unsorted package will fail anyway on missing-inputs, but it's better to quit earlier and\n+    // fail on something less ambiguous (missing-inputs could also be an orphan or trying to\n+    // spend nonexistent coins).\n+    for (const auto& tx : txns) {\n+        Workspace workspace(tx);\n+        for (const auto& input : tx->vin) {\n+            if (std::find_if(workspaces.begin(), workspaces.end(),\n+                             [&, txid = input.prevout.hash](const auto& preceding_ws)\n+                             { return preceding_ws.m_ptx->GetHash() == txid; }) == workspaces.end() &&\n+                std::find_if(txns.begin(), txns.end(),\n+                             [&, txid = input.prevout.hash](const auto& tx)\n+                             { return tx->GetHash() == txid; }) != txns.end()) {\n+                // If we don't find the parent in workspaces but we do find it in txns,\n+                // then it must be a subsequent transaction in the package.\n+                package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-sorted\");\n+                return PackageMempoolAcceptResult(package_state, {});\n+            }\n+        }",
      "path": "src/validation.cpp",
      "position": 192,
      "original_position": 282,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "cc00a859deef3701f5d9fb8e7076a074b26f7892",
      "in_reply_to_id": 613689838,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> note that this is not canonically ordered.\r\n\r\nNote that there is no canonical ordering defined yet 😛 although that's indeed what I would design the ordering to be. At this point, since this is just for users to test multiple transactions, there's not really a reason to require this order - i'm only checking the order because it's faster and a better error message than missing-inputs. Same with package IDs - i think that makes sense for a later PR that defines P2P packages.",
      "created_at": "2021-04-16T20:56:24Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r615118145",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615118145"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1137,
      "original_line": 1137,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615119651",
      "pull_request_review_id": 638080931,
      "id": 615119651,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTExOTY1MQ==",
      "diff_hunk": "@@ -474,11 +481,13 @@ class MemPoolAccept\n          */\n         std::vector<COutPoint>& m_coins_to_uncache;",
      "path": "src/validation.cpp",
      "position": 55,
      "original_position": 67,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "2fac0136138012ae26c8e12ef77e9486ad5cd831",
      "in_reply_to_id": 567856457,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Started on this in #21146 if anyone's interested, resolving here because out of scope for this PR",
      "created_at": "2021-04-16T20:59:38Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r615119651",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615119651"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 473,
      "original_line": 473,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615120336",
      "pull_request_review_id": 638081916,
      "id": 615120336,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTEyMDMzNg==",
      "diff_hunk": "@@ -465,6 +464,111 @@ static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationS\n     return CheckInputScripts(tx, state, view, flags, /* cacheSigStore = */ true, /* cacheFullSciptStore = */ true, txdata);\n }\n \n+/**\n+ * A CoinsView that adds a memory cache to another CoinsView and serves as temporary scratch space.\n+ * Used by MemPoolAccept class to validate transactions and packages before submitting to mempool.\n+ * A backend can be set to provide read access to chainstate and/or mempool coins, but writing to\n+ * the backend is disabled. Avoid using a CoinsViewTemporary in consensus-critical paths such\n+ * as writing to the script cache. See CheckInputsFromMempoolAndCache as an example. When not being\n+ * used to validate a package (m_temp_added and m_temp_spent are empty), a CoinsViewTemporary\n+ * behaves exactly like a CCoinsViewCache.\n+ */\n+class CoinsViewTemporary : public CCoinsViewCache\n+{\n+    /**\n+    * Coins made available by transactions being validated. Tracking these allows for package\n+    * validation, since we can access transaction outputs without submitting them to mempool.\n+    */\n+    std::map<COutPoint, Coin> m_temp_added;\n+\n+    /**\n+    * Coins spent by transactions being validated. When validating a package, we need to track\n+    * these in order to distinguish between missing/spent coins and conflicts within a package.\n+    */\n+    std::set<COutPoint> m_temp_spent;\n+\n+    /** An empty coin used as a placeholder for a spent coin.*/\n+    inline static const Coin s_coin_spent;\n+\n+public:\n+\n+    CoinsViewTemporary(CCoinsView* baseIn) : CCoinsViewCache(baseIn) {}\n+\n+    // Delete the copy constructor to prevent accidentally using it when one intends to create a\n+    // CoinsViewTemporary on top of a base cache.\n+    CoinsViewTemporary(const CoinsViewTemporary &) = delete;\n+\n+    bool GetCoin(const COutPoint& outpoint, Coin& coin) const override {\n+        coin = AccessCoin(outpoint);\n+        return !coin.IsSpent();\n+    }\n+\n+    const Coin& AccessCoin(const COutPoint& outpoint) const override {\n+        // Check to see if another tx in the package has already spent this coin (conflict-in-package).\n+        // Coins spent by others in the package are only tracked in m_temp_spent.\n+        if (m_temp_spent.count(outpoint)) {\n+            return s_coin_spent;\n+        }\n+\n+        // Check to see if the inputs are made available by another tx in the package.\n+        // These Coins would not be available in the underlying CoinsView.\n+        if (auto it = m_temp_added.find(outpoint); it != m_temp_added.end()) {\n+            assert(!it->second.IsSpent());\n+            return it->second;\n+        }\n+        return CCoinsViewCache::AccessCoin(outpoint);\n+    }\n+\n+    bool HaveCoin(const COutPoint& outpoint) const override {\n+        Coin coin;",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 92,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "cc00a859deef3701f5d9fb8e7076a074b26f7892",
      "in_reply_to_id": 613648523,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2021-04-16T21:01:24Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r615120336",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615120336"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 523,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615120408",
      "pull_request_review_id": 638082015,
      "id": 615120408,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTEyMDQwOA==",
      "diff_hunk": "@@ -465,6 +464,111 @@ static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationS\n     return CheckInputScripts(tx, state, view, flags, /* cacheSigStore = */ true, /* cacheFullSciptStore = */ true, txdata);\n }\n \n+/**\n+ * A CoinsView that adds a memory cache to another CoinsView and serves as temporary scratch space.\n+ * Used by MemPoolAccept class to validate transactions and packages before submitting to mempool.\n+ * A backend can be set to provide read access to chainstate and/or mempool coins, but writing to\n+ * the backend is disabled. Avoid using a CoinsViewTemporary in consensus-critical paths such\n+ * as writing to the script cache. See CheckInputsFromMempoolAndCache as an example. When not being\n+ * used to validate a package (m_temp_added and m_temp_spent are empty), a CoinsViewTemporary\n+ * behaves exactly like a CCoinsViewCache.\n+ */\n+class CoinsViewTemporary : public CCoinsViewCache\n+{\n+    /**\n+    * Coins made available by transactions being validated. Tracking these allows for package\n+    * validation, since we can access transaction outputs without submitting them to mempool.\n+    */\n+    std::map<COutPoint, Coin> m_temp_added;\n+\n+    /**\n+    * Coins spent by transactions being validated. When validating a package, we need to track\n+    * these in order to distinguish between missing/spent coins and conflicts within a package.\n+    */\n+    std::set<COutPoint> m_temp_spent;\n+\n+    /** An empty coin used as a placeholder for a spent coin.*/\n+    inline static const Coin s_coin_spent;\n+\n+public:\n+\n+    CoinsViewTemporary(CCoinsView* baseIn) : CCoinsViewCache(baseIn) {}\n+\n+    // Delete the copy constructor to prevent accidentally using it when one intends to create a\n+    // CoinsViewTemporary on top of a base cache.\n+    CoinsViewTemporary(const CoinsViewTemporary &) = delete;\n+\n+    bool GetCoin(const COutPoint& outpoint, Coin& coin) const override {\n+        coin = AccessCoin(outpoint);\n+        return !coin.IsSpent();\n+    }\n+\n+    const Coin& AccessCoin(const COutPoint& outpoint) const override {\n+        // Check to see if another tx in the package has already spent this coin (conflict-in-package).\n+        // Coins spent by others in the package are only tracked in m_temp_spent.\n+        if (m_temp_spent.count(outpoint)) {\n+            return s_coin_spent;\n+        }\n+\n+        // Check to see if the inputs are made available by another tx in the package.\n+        // These Coins would not be available in the underlying CoinsView.\n+        if (auto it = m_temp_added.find(outpoint); it != m_temp_added.end()) {\n+            assert(!it->second.IsSpent());\n+            return it->second;\n+        }\n+        return CCoinsViewCache::AccessCoin(outpoint);\n+    }\n+\n+    bool HaveCoin(const COutPoint& outpoint) const override {\n+        Coin coin;\n+        return GetCoin(outpoint, coin);\n+    }\n+\n+    /**\n+    * Update with coins spent and created by a transaction.\n+    * Only used for package validation.\n+    */\n+    void PackageAddTransaction(const CTransactionRef& tx)\n+    {\n+        // Track Coins spent by this transaction. They must exist and not already be spent.",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 102,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "cc00a859deef3701f5d9fb8e7076a074b26f7892",
      "in_reply_to_id": 613653530,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2021-04-16T21:01:34Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r615120408",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615120408"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 533,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615120610",
      "pull_request_review_id": 638082335,
      "id": 615120610,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTEyMDYxMA==",
      "diff_hunk": "@@ -465,6 +464,111 @@ static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationS\n     return CheckInputScripts(tx, state, view, flags, /* cacheSigStore = */ true, /* cacheFullSciptStore = */ true, txdata);\n }\n \n+/**\n+ * A CoinsView that adds a memory cache to another CoinsView and serves as temporary scratch space.\n+ * Used by MemPoolAccept class to validate transactions and packages before submitting to mempool.\n+ * A backend can be set to provide read access to chainstate and/or mempool coins, but writing to\n+ * the backend is disabled. Avoid using a CoinsViewTemporary in consensus-critical paths such\n+ * as writing to the script cache. See CheckInputsFromMempoolAndCache as an example. When not being\n+ * used to validate a package (m_temp_added and m_temp_spent are empty), a CoinsViewTemporary\n+ * behaves exactly like a CCoinsViewCache.\n+ */\n+class CoinsViewTemporary : public CCoinsViewCache\n+{\n+    /**\n+    * Coins made available by transactions being validated. Tracking these allows for package\n+    * validation, since we can access transaction outputs without submitting them to mempool.\n+    */\n+    std::map<COutPoint, Coin> m_temp_added;\n+\n+    /**\n+    * Coins spent by transactions being validated. When validating a package, we need to track\n+    * these in order to distinguish between missing/spent coins and conflicts within a package.\n+    */\n+    std::set<COutPoint> m_temp_spent;\n+\n+    /** An empty coin used as a placeholder for a spent coin.*/\n+    inline static const Coin s_coin_spent;\n+\n+public:\n+\n+    CoinsViewTemporary(CCoinsView* baseIn) : CCoinsViewCache(baseIn) {}\n+\n+    // Delete the copy constructor to prevent accidentally using it when one intends to create a\n+    // CoinsViewTemporary on top of a base cache.\n+    CoinsViewTemporary(const CoinsViewTemporary &) = delete;\n+\n+    bool GetCoin(const COutPoint& outpoint, Coin& coin) const override {\n+        coin = AccessCoin(outpoint);\n+        return !coin.IsSpent();\n+    }\n+\n+    const Coin& AccessCoin(const COutPoint& outpoint) const override {\n+        // Check to see if another tx in the package has already spent this coin (conflict-in-package).\n+        // Coins spent by others in the package are only tracked in m_temp_spent.\n+        if (m_temp_spent.count(outpoint)) {\n+            return s_coin_spent;\n+        }\n+\n+        // Check to see if the inputs are made available by another tx in the package.\n+        // These Coins would not be available in the underlying CoinsView.\n+        if (auto it = m_temp_added.find(outpoint); it != m_temp_added.end()) {\n+            assert(!it->second.IsSpent());\n+            return it->second;\n+        }\n+        return CCoinsViewCache::AccessCoin(outpoint);\n+    }\n+\n+    bool HaveCoin(const COutPoint& outpoint) const override {\n+        Coin coin;\n+        return GetCoin(outpoint, coin);\n+    }\n+\n+    /**\n+    * Update with coins spent and created by a transaction.\n+    * Only used for package validation.\n+    */\n+    void PackageAddTransaction(const CTransactionRef& tx)\n+    {\n+        // Track Coins spent by this transaction. They must exist and not already be spent.\n+        for (auto input : tx->vin) {\n+            Coin spent_coin;\n+            Assume(GetCoin(input.prevout, spent_coin));",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 105,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "cc00a859deef3701f5d9fb8e7076a074b26f7892",
      "in_reply_to_id": 613653851,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah, that's shorter - done.",
      "created_at": "2021-04-16T21:02:06Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r615120610",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615120610"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 536,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615136392",
      "pull_request_review_id": 638102413,
      "id": 615136392,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTEzNjM5Mg==",
      "diff_hunk": "@@ -465,6 +464,111 @@ static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationS\n     return CheckInputScripts(tx, state, view, flags, /* cacheSigStore = */ true, /* cacheFullSciptStore = */ true, txdata);\n }\n \n+/**\n+ * A CoinsView that adds a memory cache to another CoinsView and serves as temporary scratch space.\n+ * Used by MemPoolAccept class to validate transactions and packages before submitting to mempool.\n+ * A backend can be set to provide read access to chainstate and/or mempool coins, but writing to\n+ * the backend is disabled. Avoid using a CoinsViewTemporary in consensus-critical paths such\n+ * as writing to the script cache. See CheckInputsFromMempoolAndCache as an example. When not being\n+ * used to validate a package (m_temp_added and m_temp_spent are empty), a CoinsViewTemporary\n+ * behaves exactly like a CCoinsViewCache.\n+ */\n+class CoinsViewTemporary : public CCoinsViewCache\n+{\n+    /**\n+    * Coins made available by transactions being validated. Tracking these allows for package\n+    * validation, since we can access transaction outputs without submitting them to mempool.\n+    */\n+    std::map<COutPoint, Coin> m_temp_added;",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 51,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "cc00a859deef3701f5d9fb8e7076a074b26f7892",
      "in_reply_to_id": 613637283,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "changed to unordered_map",
      "created_at": "2021-04-16T21:43:39Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r615136392",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615136392"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 482,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615136467",
      "pull_request_review_id": 638102498,
      "id": 615136467,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTEzNjQ2Nw==",
      "diff_hunk": "@@ -465,6 +464,111 @@ static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationS\n     return CheckInputScripts(tx, state, view, flags, /* cacheSigStore = */ true, /* cacheFullSciptStore = */ true, txdata);\n }\n \n+/**\n+ * A CoinsView that adds a memory cache to another CoinsView and serves as temporary scratch space.\n+ * Used by MemPoolAccept class to validate transactions and packages before submitting to mempool.\n+ * A backend can be set to provide read access to chainstate and/or mempool coins, but writing to\n+ * the backend is disabled. Avoid using a CoinsViewTemporary in consensus-critical paths such\n+ * as writing to the script cache. See CheckInputsFromMempoolAndCache as an example. When not being\n+ * used to validate a package (m_temp_added and m_temp_spent are empty), a CoinsViewTemporary\n+ * behaves exactly like a CCoinsViewCache.\n+ */\n+class CoinsViewTemporary : public CCoinsViewCache\n+{\n+    /**\n+    * Coins made available by transactions being validated. Tracking these allows for package\n+    * validation, since we can access transaction outputs without submitting them to mempool.\n+    */\n+    std::map<COutPoint, Coin> m_temp_added;\n+\n+    /**\n+    * Coins spent by transactions being validated. When validating a package, we need to track\n+    * these in order to distinguish between missing/spent coins and conflicts within a package.\n+    */\n+    std::set<COutPoint> m_temp_spent;",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 57,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "cc00a859deef3701f5d9fb8e7076a074b26f7892",
      "in_reply_to_id": 613645936,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "changed to unordered_set",
      "created_at": "2021-04-16T21:43:51Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r615136467",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615136467"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 488,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615136700",
      "pull_request_review_id": 638102795,
      "id": 615136700,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTEzNjcwMA==",
      "diff_hunk": "@@ -1061,28 +1178,131 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n \n     Workspace ws(ptx);\n \n-    if (!PreChecks(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!PreChecks(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n-    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Tx was accepted, but not added\n     if (args.m_test_accept) {\n-        return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+        return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n     }\n \n-    if (!Finalize(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!Finalize(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+    return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+}\n+\n+PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::vector<CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    PackageValidationState package_state;\n+    const unsigned int package_count = txns.size();\n+\n+    // These context-free package limits can be checked before taking the mempool lock.\n+    if (package_count > MAX_PACKAGE_COUNT) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"too-many-transactions\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    const int64_t total_size = std::accumulate(txns.cbegin(), txns.cend(), 0,\n+                               [](int64_t sum, const auto& tx) { return sum + GetVirtualTransactionSize(*tx); });\n+    if (total_size > MAX_PACKAGE_SIZE * 1000) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"too-large\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    std::vector<Workspace> workspaces{};\n+    workspaces.reserve(package_count);\n+\n+    // Require the package to be sorted in order of dependency, i.e. parents appear before children.\n+    // An unsorted package will fail anyway on missing-inputs, but it's better to quit earlier and\n+    // fail on something less ambiguous (missing-inputs could also be an orphan or trying to\n+    // spend nonexistent coins).\n+    for (const auto& tx : txns) {\n+        Workspace workspace(tx);\n+        for (const auto& input : tx->vin) {\n+            if (std::find_if(workspaces.begin(), workspaces.end(),\n+                             [&, txid = input.prevout.hash](const auto& preceding_ws)\n+                             { return preceding_ws.m_ptx->GetHash() == txid; }) == workspaces.end() &&\n+                std::find_if(txns.begin(), txns.end(),",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 274,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "cc00a859deef3701f5d9fb8e7076a074b26f7892",
      "in_reply_to_id": 613682979,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done, doing a hashset. There's only one `find_if` now",
      "created_at": "2021-04-16T21:44:32Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r615136700",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615136700"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1237,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615136898",
      "pull_request_review_id": 638103045,
      "id": 615136898,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTEzNjg5OA==",
      "diff_hunk": "@@ -1061,28 +1178,131 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n \n     Workspace ws(ptx);\n \n-    if (!PreChecks(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!PreChecks(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n-    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Tx was accepted, but not added\n     if (args.m_test_accept) {\n-        return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+        return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n     }\n \n-    if (!Finalize(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!Finalize(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+    return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+}\n+\n+PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::vector<CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    PackageValidationState package_state;\n+    const unsigned int package_count = txns.size();\n+\n+    // These context-free package limits can be checked before taking the mempool lock.\n+    if (package_count > MAX_PACKAGE_COUNT) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"too-many-transactions\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    const int64_t total_size = std::accumulate(txns.cbegin(), txns.cend(), 0,\n+                               [](int64_t sum, const auto& tx) { return sum + GetVirtualTransactionSize(*tx); });\n+    if (total_size > MAX_PACKAGE_SIZE * 1000) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"too-large\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    std::vector<Workspace> workspaces{};\n+    workspaces.reserve(package_count);\n+\n+    // Require the package to be sorted in order of dependency, i.e. parents appear before children.\n+    // An unsorted package will fail anyway on missing-inputs, but it's better to quit earlier and\n+    // fail on something less ambiguous (missing-inputs could also be an orphan or trying to\n+    // spend nonexistent coins).\n+    for (const auto& tx : txns) {\n+        Workspace workspace(tx);\n+        for (const auto& input : tx->vin) {\n+            if (std::find_if(workspaces.begin(), workspaces.end(),\n+                             [&, txid = input.prevout.hash](const auto& preceding_ws)\n+                             { return preceding_ws.m_ptx->GetHash() == txid; }) == workspaces.end() &&\n+                std::find_if(txns.begin(), txns.end(),\n+                             [&, txid = input.prevout.hash](const auto& tx)\n+                             { return tx->GetHash() == txid; }) != txns.end()) {\n+                // If we don't find the parent in workspaces but we do find it in txns,\n+                // then it must be a subsequent transaction in the package.\n+                package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-sorted\");\n+                return PackageMempoolAcceptResult(package_state, {});\n+            }\n+        }\n+        workspaces.emplace_back(std::move(workspace));",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 283,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "cc00a859deef3701f5d9fb8e7076a074b26f7892",
      "in_reply_to_id": 613691916,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "constructing in place done",
      "created_at": "2021-04-16T21:45:05Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r615136898",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615136898"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1245,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615199766",
      "pull_request_review_id": 638193846,
      "id": 615199766,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTE5OTc2Ng==",
      "diff_hunk": "@@ -1061,28 +1178,131 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n \n     Workspace ws(ptx);\n \n-    if (!PreChecks(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!PreChecks(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n-    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Tx was accepted, but not added\n     if (args.m_test_accept) {\n-        return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+        return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n     }\n \n-    if (!Finalize(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!Finalize(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+    return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+}\n+\n+PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::vector<CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    PackageValidationState package_state;\n+    const unsigned int package_count = txns.size();\n+\n+    // These context-free package limits can be checked before taking the mempool lock.\n+    if (package_count > MAX_PACKAGE_COUNT) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"too-many-transactions\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    const int64_t total_size = std::accumulate(txns.cbegin(), txns.cend(), 0,\n+                               [](int64_t sum, const auto& tx) { return sum + GetVirtualTransactionSize(*tx); });\n+    if (total_size > MAX_PACKAGE_SIZE * 1000) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"too-large\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    std::vector<Workspace> workspaces{};\n+    workspaces.reserve(package_count);\n+\n+    // Require the package to be sorted in order of dependency, i.e. parents appear before children.\n+    // An unsorted package will fail anyway on missing-inputs, but it's better to quit earlier and\n+    // fail on something less ambiguous (missing-inputs could also be an orphan or trying to\n+    // spend nonexistent coins).\n+    for (const auto& tx : txns) {\n+        Workspace workspace(tx);\n+        for (const auto& input : tx->vin) {\n+            if (std::find_if(workspaces.begin(), workspaces.end(),\n+                             [&, txid = input.prevout.hash](const auto& preceding_ws)\n+                             { return preceding_ws.m_ptx->GetHash() == txid; }) == workspaces.end() &&\n+                std::find_if(txns.begin(), txns.end(),\n+                             [&, txid = input.prevout.hash](const auto& tx)\n+                             { return tx->GetHash() == txid; }) != txns.end()) {\n+                // If we don't find the parent in workspaces but we do find it in txns,\n+                // then it must be a subsequent transaction in the package.\n+                package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-sorted\");\n+                return PackageMempoolAcceptResult(package_state, {});\n+            }\n+        }",
      "path": "src/validation.cpp",
      "position": 192,
      "original_position": 282,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "cc00a859deef3701f5d9fb8e7076a074b26f7892",
      "in_reply_to_id": 613689838,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "yep, just a note :)",
      "created_at": "2021-04-17T03:26:04Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r615199766",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615199766"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1137,
      "original_line": 1137,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615307827",
      "pull_request_review_id": 638277032,
      "id": 615307827,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTMwNzgyNw==",
      "diff_hunk": "@@ -1062,28 +1178,130 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n \n     Workspace ws(ptx);\n \n-    if (!PreChecks(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!PreChecks(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n-    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Tx was accepted, but not added\n     if (args.m_test_accept) {\n-        return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+        return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n     }\n \n-    if (!Finalize(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!Finalize(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+    return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+}\n+\n+PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::vector<CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    PackageValidationState package_state;\n+    const unsigned int package_count = txns.size();\n+\n+    // These context-free package limits can be checked before taking the mempool lock.\n+    if (package_count > MAX_PACKAGE_COUNT) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"too-many-transactions\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    const int64_t total_size = std::accumulate(txns.cbegin(), txns.cend(), 0,\n+                               [](int64_t sum, const auto& tx) { return sum + GetVirtualTransactionSize(*tx); });\n+    if (total_size > MAX_PACKAGE_SIZE * 1000) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"too-large\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    std::vector<Workspace> workspaces{};\n+    workspaces.reserve(package_count);\n+    std::unordered_set<uint256, BlockHasher> txids;",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 269,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "b93442473f4f929912740682865397411e84be9b",
      "in_reply_to_id": null,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "SaltedTXIDHasher; blockhasher is insecure",
      "created_at": "2021-04-17T21:45:03Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r615307827",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615307827"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1228,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615308870",
      "pull_request_review_id": 638277554,
      "id": 615308870,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTMwODg3MA==",
      "diff_hunk": "@@ -1062,28 +1178,130 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n \n     Workspace ws(ptx);\n \n-    if (!PreChecks(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!PreChecks(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n-    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Tx was accepted, but not added\n     if (args.m_test_accept) {\n-        return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+        return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n     }\n \n-    if (!Finalize(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!Finalize(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+    return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+}\n+\n+PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::vector<CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    PackageValidationState package_state;\n+    const unsigned int package_count = txns.size();\n+\n+    // These context-free package limits can be checked before taking the mempool lock.\n+    if (package_count > MAX_PACKAGE_COUNT) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"too-many-transactions\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    const int64_t total_size = std::accumulate(txns.cbegin(), txns.cend(), 0,\n+                               [](int64_t sum, const auto& tx) { return sum + GetVirtualTransactionSize(*tx); });\n+    if (total_size > MAX_PACKAGE_SIZE * 1000) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"too-large\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    std::vector<Workspace> workspaces{};\n+    workspaces.reserve(package_count);\n+    std::unordered_set<uint256, BlockHasher> txids;\n+\n+    // Require the package to be sorted in order of dependency, i.e. parents appear before children.\n+    // An unsorted package will fail anyway on missing-inputs, but it's better to quit earlier and\n+    // fail on something less ambiguous (missing-inputs could also be an orphan or trying to\n+    // spend nonexistent coins).\n+    for (const auto& tx : txns) {\n+        for (const auto& input : tx->vin) {\n+            if (txids.find(input.prevout.hash) == txids.end() &&\n+                std::find_if(txns.begin(), txns.end(),",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 278,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "b93442473f4f929912740682865397411e84be9b",
      "in_reply_to_id": null,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "suggestion:\r\n\r\nmake std::unordered_map<uint256, bool, SaltedTXIDHasher>, fill it with all the txns in the package set to false, and set true when it's been passed.\r\n\r\n\r\nThen when you're scanning:\r\n\r\n```c++\r\nauto it = txids.find(input.prevout.hash);\r\nif (it == txids.end()) continue;\r\nif (it->second == false) /* invalid /*;\r\n/*\r\nvalid\r\n*/\r\n```\r\n\r\nIf you want to get extra fancy to allocate less memory, this is a tmp struct that lives as long as txids so we can just do ptrs\r\n\r\n```c++\r\nstd::unordered_map<const *CTransaction, bool, SaltedTxidHasher>\r\n```\r\nwhere you patch:\r\n\r\n```c++\r\n class SaltedTxidHasher\r\n {\r\n private:\r\n     /** Salt */\r\n     const uint64_t k0, k1;\r\n \r\n public:\r\n     SaltedTxidHasher();\r\n \r\n     size_t operator()(const uint256& txid) const {\r\n         return SipHashUint256(k0, k1, txid);\r\n     }\r\n     size_t operator()(const CTransaction*& tx) const {\r\n         return SipHashUint256(k0, k1, tx->GetHash());\r\n     }\r\n };\r\n```",
      "created_at": "2021-04-17T21:56:17Z",
      "updated_at": "2021-05-11T18:25:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r615308870",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615308870"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1237,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/616179494",
      "pull_request_review_id": 639309885,
      "id": 616179494,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNjE3OTQ5NA==",
      "diff_hunk": "@@ -1062,28 +1178,130 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n \n     Workspace ws(ptx);\n \n-    if (!PreChecks(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!PreChecks(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n-    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Tx was accepted, but not added\n     if (args.m_test_accept) {\n-        return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+        return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n     }\n \n-    if (!Finalize(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!Finalize(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+    return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+}\n+\n+PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::vector<CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    PackageValidationState package_state;\n+    const unsigned int package_count = txns.size();\n+\n+    // These context-free package limits can be checked before taking the mempool lock.\n+    if (package_count > MAX_PACKAGE_COUNT) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"too-many-transactions\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    const int64_t total_size = std::accumulate(txns.cbegin(), txns.cend(), 0,\n+                               [](int64_t sum, const auto& tx) { return sum + GetVirtualTransactionSize(*tx); });\n+    if (total_size > MAX_PACKAGE_SIZE * 1000) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"too-large\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    std::vector<Workspace> workspaces{};\n+    workspaces.reserve(package_count);\n+    std::unordered_set<uint256, BlockHasher> txids;",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 269,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "b93442473f4f929912740682865397411e84be9b",
      "in_reply_to_id": 615307827,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ah that is much more appropriate, switched. Not sure what you mean by security in this context, it's just being used for faster lookup...?",
      "created_at": "2021-04-19T21:09:45Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r616179494",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/616179494"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1228,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/616182280",
      "pull_request_review_id": 639313479,
      "id": 616182280,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNjE4MjI4MA==",
      "diff_hunk": "@@ -1062,28 +1178,130 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n \n     Workspace ws(ptx);\n \n-    if (!PreChecks(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!PreChecks(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n-    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Tx was accepted, but not added\n     if (args.m_test_accept) {\n-        return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+        return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n     }\n \n-    if (!Finalize(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!Finalize(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+    return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+}\n+\n+PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::vector<CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    PackageValidationState package_state;\n+    const unsigned int package_count = txns.size();\n+\n+    // These context-free package limits can be checked before taking the mempool lock.\n+    if (package_count > MAX_PACKAGE_COUNT) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"too-many-transactions\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    const int64_t total_size = std::accumulate(txns.cbegin(), txns.cend(), 0,\n+                               [](int64_t sum, const auto& tx) { return sum + GetVirtualTransactionSize(*tx); });\n+    if (total_size > MAX_PACKAGE_SIZE * 1000) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"too-large\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    std::vector<Workspace> workspaces{};\n+    workspaces.reserve(package_count);\n+    std::unordered_set<uint256, BlockHasher> txids;\n+\n+    // Require the package to be sorted in order of dependency, i.e. parents appear before children.\n+    // An unsorted package will fail anyway on missing-inputs, but it's better to quit earlier and\n+    // fail on something less ambiguous (missing-inputs could also be an orphan or trying to\n+    // spend nonexistent coins).\n+    for (const auto& tx : txns) {\n+        for (const auto& input : tx->vin) {\n+            if (txids.find(input.prevout.hash) == txids.end() &&\n+                std::find_if(txns.begin(), txns.end(),",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 278,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "b93442473f4f929912740682865397411e84be9b",
      "in_reply_to_id": 615308870,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Changed to a `std::unordered_map<uint256, bool, SaltedTxidHasher>` and limited the scope of the map\r\nRe: overloading `SaltedTxidHasher`, I think I'd also want a `SaltedWtxidHasher` 🤔",
      "created_at": "2021-04-19T21:15:02Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r616182280",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/616182280"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1237,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618615930",
      "pull_request_review_id": 642501858,
      "id": 618615930,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODYxNTkzMA==",
      "diff_hunk": "@@ -655,13 +767,17 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n                         break;\n                     }\n                 }\n-                if (fReplacementOptOut) {\n+                if (fReplacementOptOut || args.disallow_mempool_conflicts) {\n                     return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"txn-mempool-conflict\");\n                 }\n \n                 setConflicts.insert(ptxConflicting->GetHash());\n             }\n         }\n+        // Check for conflicts with transactions in the same package.\n+        if (m_view.PackageSpends(txin.prevout)) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 193,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "9ce7b0f3850a0d69e81a68f18906a9d1aa4356fb",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think this check is context-free and can be checked before taking the mempool lock ? Like at the same time we do package limits checks. \r\n\r\nIIRC `PackageSpends` verifies the lack of outpoint spends identity among elements of the package set but not among the elements of the mempool set.",
      "created_at": "2021-04-22T17:46:07Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r618615930",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618615930"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 778,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618621245",
      "pull_request_review_id": 642501858,
      "id": 618621245,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODYyMTI0NQ==",
      "diff_hunk": "@@ -188,34 +189,64 @@ void PruneBlockFilesManual(CChainState& active_chainstate, int nManualPruneHeigh\n * Validation result for a single transaction mempool acceptance.\n */\n struct MempoolAcceptResult {\n-    /** Used to indicate the results of mempool validation,\n-    * including the possibility of unfinished validation.\n-    */\n+    /** Used to indicate the results of mempool validation. */\n     enum class ResultType {\n         VALID, //!> Fully validated, valid.\n         INVALID, //!> Invalid.\n     };\n-    ResultType m_result_type;\n-    TxValidationState m_state;\n+    const ResultType m_result_type;\n+    const TxValidationState m_state;\n \n     // The following fields are only present when m_result_type = ResultType::VALID\n     /** Mempool transactions replaced by the tx per BIP 125 rules. */\n-    std::optional<std::list<CTransactionRef>> m_replaced_transactions;\n-    /** Raw base fees. */\n-    std::optional<CAmount> m_base_fees;\n+    const std::optional<std::list<CTransactionRef>> m_replaced_transactions;\n+    /** Raw base fees in satoshis. */\n+    const std::optional<CAmount> m_base_fees;\n+\n+    static MempoolAcceptResult Failure(const TxValidationState state) {\n+        return MempoolAcceptResult(state);\n+    }\n+\n+    static MempoolAcceptResult Success(std::list<CTransactionRef>&& replaced_txns, const CAmount fees) {\n+        return MempoolAcceptResult(std::move(replaced_txns), fees);\n+    }\n \n+// Private constructors. Use static methods MempoolAcceptResult::Success, etc. to construct.\n+private:\n     /** Constructor for failure case */\n-    explicit MempoolAcceptResult(TxValidationState state)\n+    explicit MempoolAcceptResult(const TxValidationState state)\n         : m_result_type(ResultType::INVALID), m_state(state) {\n             Assume(!state.IsValid()); // Can be invalid or error\n         }\n \n     /** Constructor for success case */\n-    explicit MempoolAcceptResult(std::list<CTransactionRef>&& replaced_txns, CAmount fees)\n-        : m_result_type(ResultType::VALID), m_state(TxValidationState{}),\n+    explicit MempoolAcceptResult(std::list<CTransactionRef>&& replaced_txns, const CAmount fees)\n+        : m_result_type(ResultType::VALID),",
      "path": "src/validation.h",
      "position": null,
      "original_position": 55,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "9ce7b0f3850a0d69e81a68f18906a9d1aa4356fb",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks for the success/failure constructor split since lastest review :)\r\n\r\nI think you can add a `Assume(state.IsValid()` in success case.",
      "created_at": "2021-04-22T17:53:48Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r618621245",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618621245"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 204,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618627239",
      "pull_request_review_id": 642501858,
      "id": 618627239,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODYyNzIzOQ==",
      "diff_hunk": "@@ -186,10 +200,13 @@ bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntr\n         staged_ancestors.erase(stage);\n         totalSizeWithAncestors += stageit->GetTxSize();\n \n-        if (stageit->GetSizeWithDescendants() + entry.GetTxSize() > limitDescendantSize) {\n+        // When multiple transactions are passed in, the ancestors and descendants of all transactions\n+        // considered together must be within limits even if they are not interdependent. This may be\n+        // stricter than the limits for each individual transaction.",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 80,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "9ce7b0f3850a0d69e81a68f18906a9d1aa4356fb",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "IIUC, let's say you have transaction A and transaction B without dependency between them. If transaction A's ancestor=20 and transaction B's ancestor=15, they will be rejected as the union of their ancestors set is beyond the default `limitAncestorCount`. But if they're submitted through sequential calls to testmempoolaccept they would be accepted ?\r\n\r\nI think this quirk is why I would prefer to disallow submission of independent groups of transactions. If the user is interested by the acceptance of N independent groups of transactions, what's the concerns of doing N calls to testmempoolaccept ?\r\n\r\nPrevious discussion : https://github.com/bitcoin/bitcoin/pull/20833/#discussion_r594527279",
      "created_at": "2021-04-22T18:02:44Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r618627239",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618627239"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 205,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618629408",
      "pull_request_review_id": 642501858,
      "id": 618629408,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODYyOTQwOA==",
      "diff_hunk": "@@ -0,0 +1,33 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_PACKAGES_H\n+#define BITCOIN_PACKAGES_H\n+\n+#include <vector>\n+\n+#include <consensus/validation.h>\n+#include <primitives/transaction.h>\n+\n+/** Default maximum number of transactions in a package. */\n+static constexpr uint32_t MAX_PACKAGE_COUNT{25};\n+/** Default maximum total virtual size of transactions in a package in KvB. */\n+static constexpr uint32_t MAX_PACKAGE_SIZE{101};",
      "path": "src/packages.h",
      "position": null,
      "original_position": 16,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "9ce7b0f3850a0d69e81a68f18906a9d1aa4356fb",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "What's the rational of using KvB instead of weight unit like for `MAX_STANDARD_TX_WEIGHT` ? I think it would be the first variable in the codebase using virtual kilo-bytes.",
      "created_at": "2021-04-22T18:06:09Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r618629408",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618629408"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618630317",
      "pull_request_review_id": 642501858,
      "id": 618630317,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODYzMDMxNw==",
      "diff_hunk": "@@ -0,0 +1,33 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_PACKAGES_H\n+#define BITCOIN_PACKAGES_H",
      "path": "src/packages.h",
      "position": null,
      "original_position": 6,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "9ce7b0f3850a0d69e81a68f18906a9d1aa4356fb",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good idea to start isolating package policy logic in its own file. I think it's a good candidate to `policy/` ?",
      "created_at": "2021-04-22T18:07:34Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r618630317",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618630317"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 6,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618645014",
      "pull_request_review_id": 642501858,
      "id": 618645014,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODY0NTAxNA==",
      "diff_hunk": "@@ -1060,28 +1176,93 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n \n     Workspace ws(ptx);\n \n-    if (!PreChecks(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!PreChecks(args, ws)) return MempoolAcceptResult(*ws.m_ptx, ws.m_state);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(*ws.m_ptx, ws.m_state);\n \n-    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(*ws.m_ptx, ws.m_state);\n \n     // Tx was accepted, but not added\n     if (args.m_test_accept) {\n-        return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+        return MempoolAcceptResult(*ws.m_ptx, std::move(ws.m_replaced_transactions), ws.m_base_fees);\n     }\n \n-    if (!Finalize(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!Finalize(args, ws)) return MempoolAcceptResult(*ws.m_ptx, ws.m_state);\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+    return MempoolAcceptResult(*ws.m_ptx, std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+}\n+\n+std::vector<MempoolAcceptResult> MemPoolAccept::AcceptMultipleTransactions(std::vector<CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    std::vector<Workspace> workspaces{};\n+    const int package_size = txns.size();\n+    workspaces.reserve(package_size);\n+    std::transform(txns.begin(), txns.end(), std::back_inserter(workspaces), [](CTransactionRef& tx) {\n+        return Workspace(tx);\n+    });\n+    std::vector<MempoolAcceptResult> results;\n+    results.reserve(package_size);\n+\n+    LOCK(m_pool.cs);\n+    // Do all PreChecks first and fail fast to avoid running expensive script checks when unnecessary.\n+    for (Workspace& ws : workspaces) {\n+        if (!PreChecks(args, ws)) {\n+            // Exit early to avoid doing pointless work. Return results in the same order as input txns.\n+            const auto failed_or_unfinished = [&, failed_ptx = ws.m_ptx](Workspace& ws) {\n+                                              return ws.m_ptx == failed_ptx\n+                                              ? MempoolAcceptResult(*ws.m_ptx, ws.m_state, /* finished */ true)\n+                                              : MempoolAcceptResult(*ws.m_ptx, ws.m_state, /* finished */ false);\n+            };\n+            std::transform(workspaces.begin(), workspaces.end(), std::back_inserter(results), failed_or_unfinished);\n+            return results;\n+        }\n+        m_view.PackageAddTransaction(ws.m_ptx);\n+    }\n+\n+    // Now that we have verified all inputs are available and there are no conflicts in the package,\n+    // clear the temporary coins (m_temp_added and m_temp_spent), otherwise script checks will error\n+    // on coins that are spent within the package.\n+    m_view.ClearTemporaryCoins();\n+\n+    for (Workspace& ws : workspaces) {\n+        PrecomputedTransactionData txdata;\n+        if (!PolicyScriptChecks(args, ws, txdata)) {\n+            // Exit early to avoid doing pointless work. Return results in the same order as input txns.\n+            CTransactionRef failed_ptx = ws.m_ptx;\n+            const auto failed_or_unfinished = [&failed_ptx](Workspace& ws) {\n+                                              return ws.m_ptx == failed_ptx\n+                                              ? MempoolAcceptResult(*ws.m_ptx, ws.m_state, /* finished */ true)\n+                                              : MempoolAcceptResult(*ws.m_ptx, ws.m_state, /* finished */ false);\n+            };\n+            auto it_curr = std::find_if(workspaces.begin(), workspaces.end(),\n+                                        [& failed_ptx](Workspace& ws) { return ws.m_ptx == failed_ptx; });\n+            // When test_accept=true, transactions that pass PolicyScriptChecks are valid because there are\n+            // no further mempool checks (passing PolicyScriptChecks implies passing ConsensusScriptChecks).",
      "path": "src/validation.cpp",
      "position": 223,
      "original_position": 266,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "in_reply_to_id": 594502100,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": ">  (and I suspect the mempool lock was perhaps not held the whole time in the past, so it was possible for the mempool to grow in the time we were doing script checks?).\r\n\r\nMempool lock was maybe not hold but you would have cs_main as a backup no ? I wouldn't be surprise of such behavior, but it's not a behavior on current master (4b5659c) ?\r\n\r\n> On master, a test_accept for one transaction stops short of calling Finalize() and doesn't do this check either.\r\n\r\nAh right, so I agree with you package-testmempoolaccept should stick to the same behavior. As a rational for not doing it I can definitely see your explanation as it's avoid expensive traversals of mempool structure, though at the price of RPC call not exactly matching a \"real\" submission on an edge-case. It would have been nice to have this documented more clearly by the original `testmempoolaccept PR.\r\n\r\n> Since we would release the lock at the end of the testmempoolaccept call, it's possible for the mempool to grow before the user submits it anyway, so it's not like we're guaranteed an accurate result by doing this.\r\n\r\nRight, but I think we assume that if you submit transaction A through `testmempoolaccept` then `sendrawtransaction` acceptance results should match, because _all things being equal_ (no expiry, no new transaction, no node version upgrade, ...) ?",
      "created_at": "2021-04-22T18:30:20Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r618645014",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618645014"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1168,
      "original_line": 1168,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618645733",
      "pull_request_review_id": 642545767,
      "id": 618645733,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODY0NTczMw==",
      "diff_hunk": "@@ -1060,28 +1176,93 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n \n     Workspace ws(ptx);\n \n-    if (!PreChecks(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!PreChecks(args, ws)) return MempoolAcceptResult(*ws.m_ptx, ws.m_state);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(*ws.m_ptx, ws.m_state);\n \n-    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(*ws.m_ptx, ws.m_state);\n \n     // Tx was accepted, but not added\n     if (args.m_test_accept) {\n-        return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+        return MempoolAcceptResult(*ws.m_ptx, std::move(ws.m_replaced_transactions), ws.m_base_fees);\n     }\n \n-    if (!Finalize(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!Finalize(args, ws)) return MempoolAcceptResult(*ws.m_ptx, ws.m_state);\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+    return MempoolAcceptResult(*ws.m_ptx, std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+}\n+\n+std::vector<MempoolAcceptResult> MemPoolAccept::AcceptMultipleTransactions(std::vector<CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    std::vector<Workspace> workspaces{};\n+    const int package_size = txns.size();\n+    workspaces.reserve(package_size);\n+    std::transform(txns.begin(), txns.end(), std::back_inserter(workspaces), [](CTransactionRef& tx) {\n+        return Workspace(tx);\n+    });\n+    std::vector<MempoolAcceptResult> results;\n+    results.reserve(package_size);\n+\n+    LOCK(m_pool.cs);\n+    // Do all PreChecks first and fail fast to avoid running expensive script checks when unnecessary.\n+    for (Workspace& ws : workspaces) {\n+        if (!PreChecks(args, ws)) {",
      "path": "src/validation.cpp",
      "position": 199,
      "original_position": 235,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "in_reply_to_id": 594478671,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Lol, I don't think it was documented in OP at PR opening ;)",
      "created_at": "2021-04-22T18:31:24Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r618645733",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618645733"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1144,
      "original_line": 1144,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618829134",
      "pull_request_review_id": 642785932,
      "id": 618829134,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODgyOTEzNA==",
      "diff_hunk": "@@ -0,0 +1,33 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_PACKAGES_H\n+#define BITCOIN_PACKAGES_H\n+\n+#include <vector>\n+\n+#include <consensus/validation.h>\n+#include <primitives/transaction.h>\n+\n+/** Default maximum number of transactions in a package. */\n+static constexpr uint32_t MAX_PACKAGE_COUNT{25};\n+/** Default maximum total virtual size of transactions in a package in KvB. */\n+static constexpr uint32_t MAX_PACKAGE_SIZE{101};",
      "path": "src/packages.h",
      "position": null,
      "original_position": 16,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "9ce7b0f3850a0d69e81a68f18906a9d1aa4356fb",
      "in_reply_to_id": 618629408,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "AFAIK the descendant and ancestor limits are denominated in kilo virtual bytes too, no?",
      "created_at": "2021-04-23T00:09:26Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r618829134",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618829134"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619015020",
      "pull_request_review_id": 643022948,
      "id": 619015020,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTAxNTAyMA==",
      "diff_hunk": "@@ -188,34 +189,64 @@ void PruneBlockFilesManual(CChainState& active_chainstate, int nManualPruneHeigh\n * Validation result for a single transaction mempool acceptance.\n */\n struct MempoolAcceptResult {\n-    /** Used to indicate the results of mempool validation,\n-    * including the possibility of unfinished validation.\n-    */\n+    /** Used to indicate the results of mempool validation. */\n     enum class ResultType {\n         VALID, //!> Fully validated, valid.\n         INVALID, //!> Invalid.\n     };\n-    ResultType m_result_type;\n-    TxValidationState m_state;\n+    const ResultType m_result_type;\n+    const TxValidationState m_state;\n \n     // The following fields are only present when m_result_type = ResultType::VALID\n     /** Mempool transactions replaced by the tx per BIP 125 rules. */\n-    std::optional<std::list<CTransactionRef>> m_replaced_transactions;\n-    /** Raw base fees. */\n-    std::optional<CAmount> m_base_fees;\n+    const std::optional<std::list<CTransactionRef>> m_replaced_transactions;\n+    /** Raw base fees in satoshis. */\n+    const std::optional<CAmount> m_base_fees;\n+\n+    static MempoolAcceptResult Failure(const TxValidationState state) {\n+        return MempoolAcceptResult(state);\n+    }\n+\n+    static MempoolAcceptResult Success(std::list<CTransactionRef>&& replaced_txns, const CAmount fees) {\n+        return MempoolAcceptResult(std::move(replaced_txns), fees);\n+    }\n \n+// Private constructors. Use static methods MempoolAcceptResult::Success, etc. to construct.\n+private:\n     /** Constructor for failure case */\n-    explicit MempoolAcceptResult(TxValidationState state)\n+    explicit MempoolAcceptResult(const TxValidationState state)",
      "path": "src/validation.h",
      "position": null,
      "original_position": 46,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "9ce7b0f3850a0d69e81a68f18906a9d1aa4356fb",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No need to `const` pass-by-value parameters. Here and `CAmount fees` below.",
      "created_at": "2021-04-23T07:52:09Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r619015020",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619015020"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 217,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619016082",
      "pull_request_review_id": 643022948,
      "id": 619016082,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTAxNjA4Mg==",
      "diff_hunk": "@@ -188,34 +189,64 @@ void PruneBlockFilesManual(CChainState& active_chainstate, int nManualPruneHeigh\n * Validation result for a single transaction mempool acceptance.\n */\n struct MempoolAcceptResult {\n-    /** Used to indicate the results of mempool validation,\n-    * including the possibility of unfinished validation.\n-    */\n+    /** Used to indicate the results of mempool validation. */\n     enum class ResultType {\n         VALID, //!> Fully validated, valid.\n         INVALID, //!> Invalid.\n     };\n-    ResultType m_result_type;\n-    TxValidationState m_state;\n+    const ResultType m_result_type;\n+    const TxValidationState m_state;\n \n     // The following fields are only present when m_result_type = ResultType::VALID\n     /** Mempool transactions replaced by the tx per BIP 125 rules. */\n-    std::optional<std::list<CTransactionRef>> m_replaced_transactions;\n-    /** Raw base fees. */\n-    std::optional<CAmount> m_base_fees;\n+    const std::optional<std::list<CTransactionRef>> m_replaced_transactions;\n+    /** Raw base fees in satoshis. */\n+    const std::optional<CAmount> m_base_fees;\n+\n+    static MempoolAcceptResult Failure(const TxValidationState state) {\n+        return MempoolAcceptResult(state);\n+    }\n+\n+    static MempoolAcceptResult Success(std::list<CTransactionRef>&& replaced_txns, const CAmount fees) {\n+        return MempoolAcceptResult(std::move(replaced_txns), fees);\n+    }\n \n+// Private constructors. Use static methods MempoolAcceptResult::Success, etc. to construct.\n+private:\n     /** Constructor for failure case */\n-    explicit MempoolAcceptResult(TxValidationState state)\n+    explicit MempoolAcceptResult(const TxValidationState state)\n         : m_result_type(ResultType::INVALID), m_state(state) {\n             Assume(!state.IsValid()); // Can be invalid or error\n         }\n \n     /** Constructor for success case */\n-    explicit MempoolAcceptResult(std::list<CTransactionRef>&& replaced_txns, CAmount fees)\n-        : m_result_type(ResultType::VALID), m_state(TxValidationState{}),\n+    explicit MempoolAcceptResult(std::list<CTransactionRef>&& replaced_txns, const CAmount fees)\n+        : m_result_type(ResultType::VALID),",
      "path": "src/validation.h",
      "position": null,
      "original_position": 55,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "9ce7b0f3850a0d69e81a68f18906a9d1aa4356fb",
      "in_reply_to_id": 618621245,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "There's no `state` parameter in the success case.",
      "created_at": "2021-04-23T07:53:58Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r619016082",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619016082"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 204,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619035752",
      "pull_request_review_id": 643022948,
      "id": 619035752,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTAzNTc1Mg==",
      "diff_hunk": "@@ -294,7 +295,6 @@ bool CheckSequenceLocks(CChainState& active_chainstate,\n     }\n     else {\n         // CoinsTip() contains the UTXO set for active_chainstate.m_chain.Tip()",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 35,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "9ce7b0f3850a0d69e81a68f18906a9d1aa4356fb",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This comment is no longer valid.",
      "created_at": "2021-04-23T08:24:37Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r619035752",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619035752"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 297,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619051657",
      "pull_request_review_id": 643022948,
      "id": 619051657,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTA1MTY1Nw==",
      "diff_hunk": "@@ -263,14 +265,13 @@ bool TestLockPointValidity(CChain& active_chain, const LockPoints* lp)\n }\n \n bool CheckSequenceLocks(CChainState& active_chainstate,",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 19,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "9ce7b0f3850a0d69e81a68f18906a9d1aa4356fb",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`CheckSequenceLocks()` no longer actually requires `active_chainstate`. You could just as easily pass in a const reference to `m_active_chainstate.m_chain.tip` and then use that in the function.",
      "created_at": "2021-04-23T08:48:41Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r619051657",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619051657"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 267,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619052435",
      "pull_request_review_id": 643022948,
      "id": 619052435,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTA1MjQzNQ==",
      "diff_hunk": "@@ -246,6 +289,8 @@ bool TestLockPointValidity(CChain& active_chain, const LockPoints* lp) EXCLUSIVE\n \n /**\n  * Check if transaction will be BIP 68 final in the next block to be created.\n+ * @param[in]   viewMemPool     A CoinsView that provides access to relevant coins for",
      "path": "src/validation.h",
      "position": null,
      "original_position": 107,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "9ce7b0f3850a0d69e81a68f18906a9d1aa4356fb",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It seems slightly odd to call this `viewMemPool` if any CoinsView can be passed in. Why not just `coins_view` or `view`?",
      "created_at": "2021-04-23T08:49:51Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r619052435",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619052435"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 292,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619063587",
      "pull_request_review_id": 643087069,
      "id": 619063587,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTA2MzU4Nw==",
      "diff_hunk": "@@ -0,0 +1,33 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_PACKAGES_H\n+#define BITCOIN_PACKAGES_H\n+\n+#include <vector>\n+\n+#include <consensus/validation.h>\n+#include <primitives/transaction.h>\n+\n+/** Default maximum number of transactions in a package. */\n+static constexpr uint32_t MAX_PACKAGE_COUNT{25};\n+/** Default maximum total virtual size of transactions in a package in KvB. */\n+static constexpr uint32_t MAX_PACKAGE_SIZE{101};",
      "path": "src/packages.h",
      "position": null,
      "original_position": 16,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "9ce7b0f3850a0d69e81a68f18906a9d1aa4356fb",
      "in_reply_to_id": 618629408,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, there are plenty of policy constants in virtual bytes. However they can eventually lead to clumsy behaviour (see https://github.com/bitcoin/bitcoin/issues/13283).\r\n\r\nAnd also a very slight divergence between the state of our mempool (in virtual bytes) and what miner care about (in weight units) which i'm unsure if we care about (but planned to look into soon :tm: forever).\r\n\r\nIn any case it seems simply better to have constants in weight units?\r\nEDIT: but it would differ with the current behaviour, so i'm not sure actually...",
      "created_at": "2021-04-23T09:06:35Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r619063587",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619063587"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619070844",
      "pull_request_review_id": 643096783,
      "id": 619070844,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTA3MDg0NA==",
      "diff_hunk": "@@ -47,4 +49,51 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_reject_coinbase, TestChain100Setup)\n     BOOST_CHECK(result.m_state.GetResult() == TxValidationResult::TX_CONSENSUS);\n }\n \n+// Placeholder transactions that have no meaning.\n+inline CTransactionRef create_placeholder_tx(size_t num_inputs, size_t num_outputs)\n+{\n+    CMutableTransaction mtx = CMutableTransaction();\n+    mtx.vin.resize(num_inputs);\n+    mtx.vout.resize(num_outputs);\n+    for (size_t i{0}; i < num_inputs; ++i) {\n+        mtx.vin[i].prevout.hash = InsecureRand256();\n+        mtx.vin[i].prevout.n = 0;\n+    }\n+    for (size_t o{0}; o < num_outputs; ++o) {\n+        mtx.vout[o].nValue = 1 * CENT;\n+        mtx.vout[o].scriptPubKey = CScript();\n+    }\n+    return MakeTransactionRef(mtx);\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(package_limits, TestChain100Setup)\n+{\n+    // Packages can't have more than 25 transactions.\n+    LOCK(cs_main);\n+    Package package_too_many;\n+    package_too_many.resize(MAX_PACKAGE_COUNT + 1);\n+    for (size_t i{0}; i < MAX_PACKAGE_COUNT + 1; ++i) {\n+        package_too_many.emplace_back(create_placeholder_tx(1, 1));\n+    }\n+    auto result_too_many = ProcessNewPackage(::ChainstateActive(), *m_node.mempool, package_too_many, /* test_accept */ true);\n+    BOOST_CHECK(result_too_many.m_state.IsInvalid());\n+    BOOST_CHECK_EQUAL(result_too_many.m_state.GetResult(), PackageValidationResult::PCKG_POLICY);\n+    BOOST_CHECK_EQUAL(result_too_many.m_state.GetRejectReason(), \"too-many-transactions\");\n+\n+    // Packages can't have a total size of more than 101KvB.\n+    CTransactionRef large_ptx = create_placeholder_tx(150, 150);\n+    Package package_too_large;\n+    auto size_large = GetVirtualTransactionSize(*large_ptx);\n+    size_t total_size{0};\n+    while (total_size < MAX_PACKAGE_SIZE * 1000) {",
      "path": "src/test/txvalidation_tests.cpp",
      "position": null,
      "original_position": 49,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "9ce7b0f3850a0d69e81a68f18906a9d1aa4356fb",
      "in_reply_to_id": null,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: even though i don't think it can be hit, you want `<= MAX_PACKAGE_SIZE` here cause the check in validation is:\r\n```cpp\r\ntotal_size > MAX_PACKAGE_SIZE * 1000\r\n```",
      "created_at": "2021-04-23T09:17:41Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r619070844",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619070844"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 88,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619104448",
      "pull_request_review_id": 643022948,
      "id": 619104448,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTEwNDQ0OA==",
      "diff_hunk": "@@ -466,6 +466,109 @@ static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationS\n     return CheckInputScripts(tx, state, view, flags, /* cacheSigStore = */ true, /* cacheFullSciptStore = */ true, txdata);\n }\n \n+/**\n+ * A CoinsView that adds a memory cache to another CoinsView and serves as temporary scratch space.\n+ * Used by MemPoolAccept class to validate transactions and packages before submitting to mempool.\n+ * A backend can be set to provide read access to chainstate and/or mempool coins, but writing to\n+ * the backend is disabled. Avoid using a CoinsViewTemporary in consensus-critical paths such\n+ * as writing to the script cache. See CheckInputsFromMempoolAndCache as an example. When not being\n+ * used to validate a package (m_temp_added and m_temp_spent are empty), a CoinsViewTemporary\n+ * behaves exactly like a CCoinsViewCache.\n+ */\n+class CoinsViewTemporary : public CCoinsViewCache\n+{\n+    /**\n+    * Coins made available by transactions being validated. Tracking these allows for package\n+    * validation, since we can access transaction outputs without submitting them to mempool.\n+    */\n+    std::unordered_map<COutPoint, Coin, SaltedOutpointHasher> m_temp_added;\n+\n+    /**\n+    * Coins spent by transactions being validated. When validating a package, we need to track\n+    * these in order to distinguish between missing/spent coins and conflicts within a package.\n+    */\n+    std::unordered_set<COutPoint, SaltedOutpointHasher> m_temp_spent;\n+\n+    /** An empty coin used as a placeholder for a spent coin.*/\n+    inline static const Coin s_coin_spent;\n+\n+public:\n+\n+    CoinsViewTemporary(CCoinsView* baseIn) : CCoinsViewCache(baseIn) {}\n+\n+    // Delete the copy constructor to prevent accidentally using it when one intends to create a\n+    // CoinsViewTemporary on top of a base cache.\n+    CoinsViewTemporary(const CoinsViewTemporary &) = delete;\n+\n+    bool GetCoin(const COutPoint& outpoint, Coin& coin) const override {\n+        coin = AccessCoin(outpoint);\n+        return !coin.IsSpent();\n+    }\n+\n+    const Coin& AccessCoin(const COutPoint& outpoint) const override {\n+        // Check to see if another tx in the package has already spent this coin (conflict-in-package).\n+        // Coins spent by others in the package are only tracked in m_temp_spent.\n+        if (m_temp_spent.count(outpoint)) {\n+            return s_coin_spent;\n+        }\n+\n+        // Check to see if the inputs are made available by another tx in the package.\n+        // These Coins would not be available in the underlying CoinsView.\n+        if (auto it = m_temp_added.find(outpoint); it != m_temp_added.end()) {\n+            assert(!it->second.IsSpent());\n+            return it->second;\n+        }\n+        return CCoinsViewCache::AccessCoin(outpoint);\n+    }\n+\n+    bool HaveCoin(const COutPoint& outpoint) const override {\n+        return !AccessCoin(outpoint).IsSpent();\n+    }\n+\n+    /**\n+    * Update with coins spent and created by a transaction. All inputs should exist and not already spent.",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 104,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "9ce7b0f3850a0d69e81a68f18906a9d1aa4356fb",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n    * Update with coins spent and created by a transaction. All inputs should exist and not already be spent.\r\n```",
      "created_at": "2021-04-23T10:10:57Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r619104448",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619104448"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 529,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619106835",
      "pull_request_review_id": 643022948,
      "id": 619106835,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTEwNjgzNQ==",
      "diff_hunk": "@@ -466,6 +466,109 @@ static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationS\n     return CheckInputScripts(tx, state, view, flags, /* cacheSigStore = */ true, /* cacheFullSciptStore = */ true, txdata);\n }\n \n+/**\n+ * A CoinsView that adds a memory cache to another CoinsView and serves as temporary scratch space.\n+ * Used by MemPoolAccept class to validate transactions and packages before submitting to mempool.\n+ * A backend can be set to provide read access to chainstate and/or mempool coins, but writing to\n+ * the backend is disabled. Avoid using a CoinsViewTemporary in consensus-critical paths such\n+ * as writing to the script cache. See CheckInputsFromMempoolAndCache as an example. When not being\n+ * used to validate a package (m_temp_added and m_temp_spent are empty), a CoinsViewTemporary\n+ * behaves exactly like a CCoinsViewCache.\n+ */\n+class CoinsViewTemporary : public CCoinsViewCache\n+{\n+    /**\n+    * Coins made available by transactions being validated. Tracking these allows for package\n+    * validation, since we can access transaction outputs without submitting them to mempool.\n+    */\n+    std::unordered_map<COutPoint, Coin, SaltedOutpointHasher> m_temp_added;\n+\n+    /**\n+    * Coins spent by transactions being validated. When validating a package, we need to track\n+    * these in order to distinguish between missing/spent coins and conflicts within a package.\n+    */\n+    std::unordered_set<COutPoint, SaltedOutpointHasher> m_temp_spent;\n+\n+    /** An empty coin used as a placeholder for a spent coin.*/\n+    inline static const Coin s_coin_spent;\n+\n+public:\n+\n+    CoinsViewTemporary(CCoinsView* baseIn) : CCoinsViewCache(baseIn) {}\n+\n+    // Delete the copy constructor to prevent accidentally using it when one intends to create a\n+    // CoinsViewTemporary on top of a base cache.\n+    CoinsViewTemporary(const CoinsViewTemporary &) = delete;\n+\n+    bool GetCoin(const COutPoint& outpoint, Coin& coin) const override {\n+        coin = AccessCoin(outpoint);\n+        return !coin.IsSpent();\n+    }\n+\n+    const Coin& AccessCoin(const COutPoint& outpoint) const override {\n+        // Check to see if another tx in the package has already spent this coin (conflict-in-package).\n+        // Coins spent by others in the package are only tracked in m_temp_spent.\n+        if (m_temp_spent.count(outpoint)) {\n+            return s_coin_spent;\n+        }\n+\n+        // Check to see if the inputs are made available by another tx in the package.\n+        // These Coins would not be available in the underlying CoinsView.\n+        if (auto it = m_temp_added.find(outpoint); it != m_temp_added.end()) {\n+            assert(!it->second.IsSpent());\n+            return it->second;\n+        }\n+        return CCoinsViewCache::AccessCoin(outpoint);\n+    }\n+\n+    bool HaveCoin(const COutPoint& outpoint) const override {\n+        return !AccessCoin(outpoint).IsSpent();\n+    }\n+\n+    /**\n+    * Update with coins spent and created by a transaction. All inputs should exist and not already spent.\n+    * Only used for package validation.\n+    */\n+    void PackageAddTransaction(const CTransactionRef& tx)\n+    {\n+        // Track Coins spent by this transaction.\n+        for (auto input : tx->vin) {\n+            Assume(HaveCoin(input.prevout));\n+            m_temp_spent.insert(input.prevout);\n+        }\n+        // Track Coins added by this transaction.\n+        for (unsigned int n = 0; n < tx->vout.size(); ++n) {\n+            m_temp_added.emplace(COutPoint(tx->GetHash(), n), Coin(tx->vout[n], MEMPOOL_HEIGHT, false));\n+        }\n+    }\n+\n+    /**\n+    * Returns whether an outpoint is spent by a transaction in the package being validated.\n+    * Only used for package validation.\n+    */\n+    bool PackageSpends(const COutPoint& outpoint) const {\n+        return m_temp_spent.count(outpoint);\n+    }\n+\n+    /**\n+    * Clear our knowledge of which coins have been spent so far during validation.\n+    * Only used for package validation.\n+    */\n+    void ClearTemporarySpends() {\n+        m_temp_spent.clear();\n+    }\n+\n+    // A CoinsViewTemporary is for temporary scratch space only; it should not write to its backend.\n+    bool Flush() override {\n+        throw std::logic_error(\"CoinsViewTemporary flushing is not supported.\");\n+    }\n+\n+    bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn) override {\n+        throw std::logic_error(\"CoinsViewTemporary writing is not supported.\");\n+    }\n+\n+};",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 145,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "9ce7b0f3850a0d69e81a68f18906a9d1aa4356fb",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n    }\r\n};\r\n```",
      "created_at": "2021-04-23T10:14:56Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r619106835",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619106835"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": 568,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 541,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619108792",
      "pull_request_review_id": 643022948,
      "id": 619108792,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTEwODc5Mg==",
      "diff_hunk": "@@ -0,0 +1,31 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_PACKAGES_H\n+#define BITCOIN_PACKAGES_H\n+\n+#include <consensus/validation.h>\n+#include <primitives/transaction.h>",
      "path": "src/packages.h",
      "position": null,
      "original_position": 9,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "917d4b7cc5347c2bc6f17acd267ea3cccd5f1b75",
      "in_reply_to_id": 597558092,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oops sorry, I've led you astray here. Local includes should go before standard library includes :grimacing: ",
      "created_at": "2021-04-23T10:18:06Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r619108792",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619108792"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": 7,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 11,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619111163",
      "pull_request_review_id": 643022948,
      "id": 619111163,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTExMTE2Mw==",
      "diff_hunk": "@@ -188,34 +189,64 @@ void PruneBlockFilesManual(CChainState& active_chainstate, int nManualPruneHeigh\n * Validation result for a single transaction mempool acceptance.\n */\n struct MempoolAcceptResult {\n-    /** Used to indicate the results of mempool validation,\n-    * including the possibility of unfinished validation.\n-    */\n+    /** Used to indicate the results of mempool validation. */\n     enum class ResultType {\n         VALID, //!> Fully validated, valid.\n         INVALID, //!> Invalid.\n     };\n-    ResultType m_result_type;\n-    TxValidationState m_state;\n+    const ResultType m_result_type;\n+    const TxValidationState m_state;\n \n     // The following fields are only present when m_result_type = ResultType::VALID\n     /** Mempool transactions replaced by the tx per BIP 125 rules. */\n-    std::optional<std::list<CTransactionRef>> m_replaced_transactions;\n-    /** Raw base fees. */\n-    std::optional<CAmount> m_base_fees;\n+    const std::optional<std::list<CTransactionRef>> m_replaced_transactions;\n+    /** Raw base fees in satoshis. */\n+    const std::optional<CAmount> m_base_fees;\n+\n+    static MempoolAcceptResult Failure(const TxValidationState state) {",
      "path": "src/validation.h",
      "position": null,
      "original_position": 34,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "9ce7b0f3850a0d69e81a68f18906a9d1aa4356fb",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No need for `const` pass-by-value params.",
      "created_at": "2021-04-23T10:21:53Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r619111163",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619111163"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 206,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619119275",
      "pull_request_review_id": 643022948,
      "id": 619119275,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTExOTI3NQ==",
      "diff_hunk": "@@ -1062,28 +1178,136 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n \n     Workspace ws(ptx);\n \n-    if (!PreChecks(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!PreChecks(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n-    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Tx was accepted, but not added\n     if (args.m_test_accept) {\n-        return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+        return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n     }\n \n-    if (!Finalize(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!Finalize(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+    return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+}\n+\n+PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::vector<CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    PackageValidationState package_state;\n+    const unsigned int package_count = txns.size();\n+\n+    // These context-free package limits can be checked before taking the mempool lock.\n+    if (package_count > MAX_PACKAGE_COUNT) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"too-many-transactions\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    const int64_t total_size = std::accumulate(txns.cbegin(), txns.cend(), 0,\n+                               [](int64_t sum, const auto& tx) { return sum + GetVirtualTransactionSize(*tx); });\n+    // If the package only contains 1 tx, it's better to report the policy violation on individual tx size.\n+    if (package_count > 1 && total_size > MAX_PACKAGE_SIZE * 1000) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"too-large\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    std::vector<Workspace> workspaces{};\n+    workspaces.reserve(package_count);\n+    {\n+        std::unordered_map<uint256, bool, SaltedTxidHasher> txids_seen;\n+        std::transform(txns.cbegin(), txns.cend(), std::inserter(txids_seen, txids_seen.end()),\n+                       [](const auto& tx){ return std::make_pair(tx->GetHash(), false); });\n+\n+        // Require the package to be sorted in order of dependency, i.e. parents appear before children.\n+        // An unsorted package will fail anyway on missing-inputs, but it's better to quit earlier and\n+        // fail on something less ambiguous (missing-inputs could also be an orphan or trying to\n+        // spend nonexistent coins).\n+        for (const auto& tx : txns) {\n+            for (const auto& input : tx->vin) {\n+                auto it = txids_seen.find(input.prevout.hash);\n+                if (it == txids_seen.end()) {\n+                    // The parent is not in this package.\n+                    continue;\n+                } else if (!it->second) {\n+                    // The parent is a subsequent transaction in the package.\n+                    package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-sorted\");\n+                    return PackageMempoolAcceptResult(package_state, {});\n+                }\n+            }\n+            // Mark this transaction as seen.\n+            txids_seen[tx->GetHash()] = true;\n+            workspaces.emplace_back(Workspace(tx));\n+        }\n+    }\n+\n+    LOCK(m_pool.cs);\n+\n+    std::map<const uint256, const MempoolAcceptResult> results;\n+    // Do all PreChecks first and fail fast to avoid running expensive script checks when unnecessary.\n+    for (Workspace& ws : workspaces) {\n+        if (!PreChecks(args, ws)) {\n+            package_state.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n+            // Exit early to avoid doing pointless work. Update the failed tx result; the rest are unfinished.\n+            results.emplace(ws.m_ptx->GetWitnessHash(), MempoolAcceptResult::Failure(ws.m_state));\n+            return PackageMempoolAcceptResult(package_state, std::move(results));\n+        }\n+        m_view.PackageAddTransaction(ws.m_ptx);\n+    }\n+\n+    // We don't want to modify the workspace entries and won't use the set of ancestors returned.\n+    std::vector<CTxMemPoolEntry> dummy_entries;",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 312,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "9ce7b0f3850a0d69e81a68f18906a9d1aa4356fb",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think `dummy_entries` and `dummy_ancestors` are the right names here. They really _are_ the entries and ancestors. I'd suggest `entries` and `ancestors_unused`, or perhaps `entries_copy` and `ancestors_unused`.",
      "created_at": "2021-04-23T10:36:30Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r619119275",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619119275"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1270,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619119830",
      "pull_request_review_id": 643022948,
      "id": 619119830,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTExOTgzMA==",
      "diff_hunk": "@@ -1062,28 +1178,136 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n \n     Workspace ws(ptx);\n \n-    if (!PreChecks(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!PreChecks(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n-    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Tx was accepted, but not added\n     if (args.m_test_accept) {\n-        return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+        return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n     }\n \n-    if (!Finalize(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!Finalize(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+    return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+}\n+\n+PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::vector<CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    PackageValidationState package_state;\n+    const unsigned int package_count = txns.size();\n+\n+    // These context-free package limits can be checked before taking the mempool lock.\n+    if (package_count > MAX_PACKAGE_COUNT) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"too-many-transactions\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    const int64_t total_size = std::accumulate(txns.cbegin(), txns.cend(), 0,\n+                               [](int64_t sum, const auto& tx) { return sum + GetVirtualTransactionSize(*tx); });\n+    // If the package only contains 1 tx, it's better to report the policy violation on individual tx size.\n+    if (package_count > 1 && total_size > MAX_PACKAGE_SIZE * 1000) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"too-large\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    std::vector<Workspace> workspaces{};\n+    workspaces.reserve(package_count);\n+    {\n+        std::unordered_map<uint256, bool, SaltedTxidHasher> txids_seen;\n+        std::transform(txns.cbegin(), txns.cend(), std::inserter(txids_seen, txids_seen.end()),\n+                       [](const auto& tx){ return std::make_pair(tx->GetHash(), false); });\n+\n+        // Require the package to be sorted in order of dependency, i.e. parents appear before children.\n+        // An unsorted package will fail anyway on missing-inputs, but it's better to quit earlier and\n+        // fail on something less ambiguous (missing-inputs could also be an orphan or trying to\n+        // spend nonexistent coins).\n+        for (const auto& tx : txns) {\n+            for (const auto& input : tx->vin) {\n+                auto it = txids_seen.find(input.prevout.hash);\n+                if (it == txids_seen.end()) {\n+                    // The parent is not in this package.\n+                    continue;\n+                } else if (!it->second) {\n+                    // The parent is a subsequent transaction in the package.\n+                    package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-sorted\");\n+                    return PackageMempoolAcceptResult(package_state, {});\n+                }\n+            }\n+            // Mark this transaction as seen.\n+            txids_seen[tx->GetHash()] = true;\n+            workspaces.emplace_back(Workspace(tx));\n+        }\n+    }\n+\n+    LOCK(m_pool.cs);\n+\n+    std::map<const uint256, const MempoolAcceptResult> results;\n+    // Do all PreChecks first and fail fast to avoid running expensive script checks when unnecessary.\n+    for (Workspace& ws : workspaces) {\n+        if (!PreChecks(args, ws)) {\n+            package_state.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n+            // Exit early to avoid doing pointless work. Update the failed tx result; the rest are unfinished.\n+            results.emplace(ws.m_ptx->GetWitnessHash(), MempoolAcceptResult::Failure(ws.m_state));\n+            return PackageMempoolAcceptResult(package_state, std::move(results));\n+        }\n+        m_view.PackageAddTransaction(ws.m_ptx);\n+    }\n+\n+    // We don't want to modify the workspace entries and won't use the set of ancestors returned.\n+    std::vector<CTxMemPoolEntry> dummy_entries;\n+    std::transform(workspaces.cbegin(), workspaces.cend(), std::back_inserter(dummy_entries),\n+                   [](const auto& ws) { return CTxMemPoolEntry(*ws.m_entry); });\n+    CTxMemPool::setEntries dummy_ancestors;\n+    std::string err_string;\n+    if (!m_pool.CalculateMemPoolAncestors(dummy_entries, dummy_ancestors, m_limit_ancestors,\n+                                          m_limit_ancestor_size, m_limit_descendants,\n+                                          m_limit_descendant_size, err_string)) {\n+        // All transactions must have individually passed mempool ancestor and dsecendant limits",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 320,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "9ce7b0f3850a0d69e81a68f18906a9d1aa4356fb",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n        // All transactions must have individually passed mempool ancestor and descendant limits\r\n```",
      "created_at": "2021-04-23T10:37:32Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r619119830",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619119830"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1278,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619122115",
      "pull_request_review_id": 643022948,
      "id": 619122115,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTEyMjExNQ==",
      "diff_hunk": "@@ -1062,28 +1178,136 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n \n     Workspace ws(ptx);\n \n-    if (!PreChecks(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!PreChecks(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n-    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Tx was accepted, but not added\n     if (args.m_test_accept) {\n-        return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+        return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n     }\n \n-    if (!Finalize(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!Finalize(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+    return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+}\n+\n+PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::vector<CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    PackageValidationState package_state;\n+    const unsigned int package_count = txns.size();\n+\n+    // These context-free package limits can be checked before taking the mempool lock.\n+    if (package_count > MAX_PACKAGE_COUNT) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"too-many-transactions\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    const int64_t total_size = std::accumulate(txns.cbegin(), txns.cend(), 0,\n+                               [](int64_t sum, const auto& tx) { return sum + GetVirtualTransactionSize(*tx); });\n+    // If the package only contains 1 tx, it's better to report the policy violation on individual tx size.\n+    if (package_count > 1 && total_size > MAX_PACKAGE_SIZE * 1000) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"too-large\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    std::vector<Workspace> workspaces{};\n+    workspaces.reserve(package_count);\n+    {\n+        std::unordered_map<uint256, bool, SaltedTxidHasher> txids_seen;\n+        std::transform(txns.cbegin(), txns.cend(), std::inserter(txids_seen, txids_seen.end()),\n+                       [](const auto& tx){ return std::make_pair(tx->GetHash(), false); });\n+\n+        // Require the package to be sorted in order of dependency, i.e. parents appear before children.\n+        // An unsorted package will fail anyway on missing-inputs, but it's better to quit earlier and\n+        // fail on something less ambiguous (missing-inputs could also be an orphan or trying to\n+        // spend nonexistent coins).\n+        for (const auto& tx : txns) {\n+            for (const auto& input : tx->vin) {\n+                auto it = txids_seen.find(input.prevout.hash);\n+                if (it == txids_seen.end()) {\n+                    // The parent is not in this package.\n+                    continue;\n+                } else if (!it->second) {\n+                    // The parent is a subsequent transaction in the package.\n+                    package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-sorted\");\n+                    return PackageMempoolAcceptResult(package_state, {});\n+                }\n+            }\n+            // Mark this transaction as seen.\n+            txids_seen[tx->GetHash()] = true;\n+            workspaces.emplace_back(Workspace(tx));\n+        }\n+    }\n+\n+    LOCK(m_pool.cs);\n+\n+    std::map<const uint256, const MempoolAcceptResult> results;\n+    // Do all PreChecks first and fail fast to avoid running expensive script checks when unnecessary.\n+    for (Workspace& ws : workspaces) {\n+        if (!PreChecks(args, ws)) {\n+            package_state.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n+            // Exit early to avoid doing pointless work. Update the failed tx result; the rest are unfinished.\n+            results.emplace(ws.m_ptx->GetWitnessHash(), MempoolAcceptResult::Failure(ws.m_state));\n+            return PackageMempoolAcceptResult(package_state, std::move(results));\n+        }\n+        m_view.PackageAddTransaction(ws.m_ptx);\n+    }\n+\n+    // We don't want to modify the workspace entries and won't use the set of ancestors returned.\n+    std::vector<CTxMemPoolEntry> dummy_entries;\n+    std::transform(workspaces.cbegin(), workspaces.cend(), std::back_inserter(dummy_entries),\n+                   [](const auto& ws) { return CTxMemPoolEntry(*ws.m_entry); });\n+    CTxMemPool::setEntries dummy_ancestors;\n+    std::string err_string;\n+    if (!m_pool.CalculateMemPoolAncestors(dummy_entries, dummy_ancestors, m_limit_ancestors,\n+                                          m_limit_ancestor_size, m_limit_descendants,\n+                                          m_limit_descendant_size, err_string)) {\n+        // All transactions must have individually passed mempool ancestor and dsecendant limits\n+        // inside of PreChecks(). Figuring out which transaction to attribute this failure to may\n+        // be implementation-dependent, and it's likely to be multiple transactions because we\n+        // evaluated all of them together. Just return this failure result for all transactions.\n+        for (auto& ws : workspaces) {\n+            ws.m_state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"too-long-mempool-chain\", err_string);\n+            results.emplace(ws.m_ptx->GetWitnessHash(), MempoolAcceptResult::Failure(ws.m_state));\n+        }\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-too-long-mempool-chain\");\n+        return PackageMempoolAcceptResult(package_state, std::move(results));\n+    }\n+\n+    // We have now verified all inputs are available and there are no conflicts in the package by\n+    // marking coins (temporarily) spent in m_view. However, since script checks will assert that\n+    // each coin has not been spent as a sanity check, we need to clear m_view.m_temp_spent so that\n+    // script checks don't fail on those asserts.\n+    m_view.ClearTemporarySpends();\n+\n+    for (Workspace& ws : workspaces) {\n+        PrecomputedTransactionData txdata;\n+        if (!PolicyScriptChecks(args, ws, txdata)) {\n+            // Exit early to avoid doing pointless work. Update the failed tx result; the rest are unfinished.\n+            package_state.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n+            results.emplace(ws.m_ptx->GetWitnessHash(), MempoolAcceptResult::Failure(ws.m_state));\n+            return PackageMempoolAcceptResult(package_state, std::move(results));\n+        }\n+        // When test_accept=true, transactions that pass PolicyScriptChecks are valid because there are\n+        // no further mempool checks (passing PolicyScriptChecks implies passing ConsensusScriptChecks).",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 347,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "9ce7b0f3850a0d69e81a68f18906a9d1aa4356fb",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Perhaps expand this comment to say that we're not calling ConsensusScriptChecks because this function is currently only for testaccept. I think we'd want to update it if we allowed package acceptance to actually add txs to the mempool.",
      "created_at": "2021-04-23T10:41:54Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r619122115",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619122115"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1305,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619124424",
      "pull_request_review_id": 643022948,
      "id": 619124424,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTEyNDQyNA==",
      "diff_hunk": "@@ -0,0 +1,33 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_PACKAGES_H\n+#define BITCOIN_PACKAGES_H\n+\n+#include <vector>\n+\n+#include <consensus/validation.h>\n+#include <primitives/transaction.h>\n+\n+/** Default maximum number of transactions in a package. */\n+static constexpr uint32_t MAX_PACKAGE_COUNT{25};\n+/** Default maximum total virtual size of transactions in a package in KvB. */\n+static constexpr uint32_t MAX_PACKAGE_SIZE{101};",
      "path": "src/packages.h",
      "position": null,
      "original_position": 16,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "9ce7b0f3850a0d69e81a68f18906a9d1aa4356fb",
      "in_reply_to_id": 618629408,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> the descendant and ancestor limits are denominated in kilo virtual bytes too, no?\r\n\r\nYes:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/4b5659c6b115315c9fd2902b4edd4b960a5e066e/src/validation.h#L65-L66",
      "created_at": "2021-04-23T10:46:16Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r619124424",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619124424"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619137379",
      "pull_request_review_id": 643022948,
      "id": 619137379,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTEzNzM3OQ==",
      "diff_hunk": "@@ -926,59 +931,73 @@ static RPCHelpMan testmempoolaccept()\n         UniValueType(), // VNUM or VSTR, checked inside AmountFromValue()\n     });\n \n-    if (request.params[0].get_array().size() != 1) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array must contain exactly one raw transaction for now\");\n+    if (request.params[0].get_array().size() > MAX_PACKAGE_COUNT) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array cannot contain more than \" + ToString(MAX_PACKAGE_COUNT) + \" transactions.\");\n     }\n \n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_array()[0].get_str())) {\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n-    }\n-    CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-\n+    const UniValue raw_transactions = request.params[0].get_array();\n     const CFeeRate max_raw_tx_fee_rate = request.params[1].isNull() ?\n                                              DEFAULT_MAX_RAW_TX_FEE_RATE :\n                                              CFeeRate(AmountFromValue(request.params[1]));\n \n-    CTxMemPool& mempool = EnsureMemPool(request.context);\n-    int64_t virtual_size = GetVirtualTransactionSize(*tx);\n-    CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n+    std::vector<CTransactionRef> txns;\n+    for (const auto& rawtx : raw_transactions.getValues()) {\n+        CMutableTransaction mtx;\n+        if (!DecodeHexTx(mtx, rawtx.get_str())) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n+        }\n+        txns.emplace_back(MakeTransactionRef(std::move(mtx)));\n+    }\n \n-    UniValue result(UniValue::VARR);\n-    UniValue result_0(UniValue::VOBJ);\n-    result_0.pushKV(\"txid\", tx->GetHash().GetHex());\n-    result_0.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n-\n-    const MempoolAcceptResult accept_result = WITH_LOCK(cs_main, return AcceptToMemoryPool(::ChainstateActive(), mempool, std::move(tx),\n-                                                  false /* bypass_limits */, /* test_accept */ true));\n-\n-    // Only return the fee and vsize if the transaction would pass ATMP.\n-    // These can be used to calculate the feerate.\n-    if (accept_result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-        const CAmount fee = accept_result.m_base_fees.value();\n-        // Check that fee does not exceed maximum fee\n-        if (max_raw_tx_fee && fee > max_raw_tx_fee) {\n-            result_0.pushKV(\"allowed\", false);\n-            result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n-        } else {\n-            result_0.pushKV(\"allowed\", true);\n-            result_0.pushKV(\"vsize\", virtual_size);\n-            UniValue fees(UniValue::VOBJ);\n-            fees.pushKV(\"base\", ValueFromAmount(fee));\n-            result_0.pushKV(\"fees\", fees);\n+    CTxMemPool& mempool = EnsureMemPool(request.context);\n+    CChainState& chainstate = EnsureChainman(request.context).ActiveChainstate();\n+    const PackageMempoolAcceptResult validation_result = txns.size() > 1\n+        ? WITH_LOCK(cs_main, return ProcessNewPackage(chainstate, mempool, txns, /* test_accept */ true))",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 95,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "cc00a859deef3701f5d9fb8e7076a074b26f7892",
      "in_reply_to_id": 613602225,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "or:\r\n\r\n```c++\r\nconst PackageMempoolAcceptResult validation_result = [&]() {\r\n    LOCK(::cs_main);\r\n    if (txns.size() > 1) return PNP());\r\n    return ATMP();\r\n}();\r\n```\r\n\r\nI think any of them are fine.",
      "created_at": "2021-04-23T11:10:07Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r619137379",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619137379"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 962,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619141139",
      "pull_request_review_id": 643022948,
      "id": 619141139,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTE0MTEzOQ==",
      "diff_hunk": "@@ -932,62 +937,74 @@ static RPCHelpMan testmempoolaccept()\n         UniValueType(), // VNUM or VSTR, checked inside AmountFromValue()\n     });\n \n-    if (request.params[0].get_array().size() != 1) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array must contain exactly one raw transaction for now\");\n+    if (request.params[0].get_array().size() > MAX_PACKAGE_COUNT) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array cannot contain more than \" + ToString(MAX_PACKAGE_COUNT) + \" transactions.\");\n     }\n \n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_array()[0].get_str())) {\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n-    }\n-    CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-\n+    const UniValue raw_transactions = request.params[0].get_array();\n     const CFeeRate max_raw_tx_fee_rate = request.params[1].isNull() ?\n                                              DEFAULT_MAX_RAW_TX_FEE_RATE :\n                                              CFeeRate(AmountFromValue(request.params[1]));\n \n-    NodeContext& node = EnsureAnyNodeContext(request.context);\n+    std::vector<CTransactionRef> txns;\n+    for (const auto& rawtx : raw_transactions.getValues()) {\n+        CMutableTransaction mtx;\n+        if (!DecodeHexTx(mtx, rawtx.get_str())) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n+        }\n+        txns.emplace_back(MakeTransactionRef(std::move(mtx)));\n+    }\n \n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n     CTxMemPool& mempool = EnsureMemPool(node);\n-    int64_t virtual_size = GetVirtualTransactionSize(*tx);\n-    CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n-\n-    UniValue result(UniValue::VARR);\n-    UniValue result_0(UniValue::VOBJ);\n-    result_0.pushKV(\"txid\", tx->GetHash().GetHex());\n-    result_0.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n-\n-    ChainstateManager& chainman = EnsureChainman(node);\n-    const MempoolAcceptResult accept_result = WITH_LOCK(cs_main, return AcceptToMemoryPool(chainman.ActiveChainstate(), mempool, std::move(tx),\n-                                                  false /* bypass_limits */, /* test_accept */ true));\n-\n-    // Only return the fee and vsize if the transaction would pass ATMP.\n-    // These can be used to calculate the feerate.\n-    if (accept_result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-        const CAmount fee = accept_result.m_base_fees.value();\n-        // Check that fee does not exceed maximum fee\n-        if (max_raw_tx_fee && fee > max_raw_tx_fee) {\n-            result_0.pushKV(\"allowed\", false);\n-            result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n-        } else {\n-            result_0.pushKV(\"allowed\", true);\n-            result_0.pushKV(\"vsize\", virtual_size);\n-            UniValue fees(UniValue::VOBJ);\n-            fees.pushKV(\"base\", ValueFromAmount(fee));\n-            result_0.pushKV(\"fees\", fees);\n+    CChainState& chainstate = EnsureChainman(node).ActiveChainstate();\n+    const PackageMempoolAcceptResult validation_result = txns.size() > 1\n+        ? WITH_LOCK(cs_main, return ProcessNewPackage(chainstate, mempool, txns, /* test_accept */ true))\n+        : WITH_LOCK(cs_main, return PackageMempoolAcceptResult(txns[0]->GetWitnessHash(),\n+                             AcceptToMemoryPool(chainstate, mempool, txns[0], /* bypass_limits */ false,  /* test_accept */ true)));\n+\n+    UniValue rpc_result(UniValue::VARR);\n+\n+    for (auto tx : txns) {\n+        UniValue result_inner(UniValue::VOBJ);\n+        result_inner.pushKV(\"txid\", tx->GetHash().GetHex());\n+        result_inner.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n+        auto it = validation_result.m_tx_results.find(tx->GetWitnessHash());\n+        if (it == validation_result.m_tx_results.end()) {\n+            // Validation unfinished. Just return the txid and wtxid.\n+            rpc_result.push_back(result_inner);\n+            continue;\n         }\n-        result.push_back(std::move(result_0));\n-    } else {\n-        result_0.pushKV(\"allowed\", false);\n-        const TxValidationState state = accept_result.m_state;\n-        if (state.GetResult() == TxValidationResult::TX_MISSING_INPUTS) {\n-            result_0.pushKV(\"reject-reason\", \"missing-inputs\");\n+        const auto& accept_result = it->second;\n+        if (accept_result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n+            const CAmount fee = accept_result.m_base_fees.value();\n+            // Check that fee does not exceed maximum fee\n+            const int64_t virtual_size = GetVirtualTransactionSize(*tx);\n+            const CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n+            if (max_raw_tx_fee && fee > max_raw_tx_fee) {\n+                result_inner.pushKV(\"allowed\", false);\n+                result_inner.pushKV(\"reject-reason\", \"max-fee-exceeded\");",
      "path": "src/rpc/rawtransaction.cpp",
      "position": 149,
      "original_position": 130,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "9ce7b0f3850a0d69e81a68f18906a9d1aa4356fb",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is a slightly odd interface for the user. Imagine a package of {A, B} is submitted:\r\n\r\n- B spends one of A's outputs.\r\n- A is valid but has feerate > max_feerate\r\n- B is valid and has acceptable feerate\r\n\r\nThen the result will show that A is rejected, but B is accepted. That's different from other failure modes where B won't be included in the results since it depends on a rejected tx.\r\n\r\nPerhaps it's better to push the failure to `rpc_result` and then `break`, so that subsequent transactions don't show as valid?",
      "created_at": "2021-04-23T11:17:26Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r619141139",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619141139"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1000,
      "original_line": 1000,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619149080",
      "pull_request_review_id": 643022948,
      "id": 619149080,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTE0OTA4MA==",
      "diff_hunk": "@@ -0,0 +1,514 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"RPCs that handle raw transaction packages.\"\"\"\n+\n+from decimal import Decimal\n+from io import BytesIO\n+import random\n+\n+from test_framework.address import ADDRESS_BCRT1_P2WSH_OP_TRUE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    BIP125_SEQUENCE_NUMBER,\n+    COIN,\n+    CTransaction,\n+    CTxInWitness,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_TRUE,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+    hex_str_to_bytes,\n+)\n+\n+class RPCPackagesTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.privkeys = [node.get_deterministic_priv_key().key]\n+        self.address = node.get_deterministic_priv_key().address\n+        self.coins = []\n+        # The last 100 coinbase transactions are premature\n+        for b in node.generatetoaddress(200, self.address)[:100]:\n+            coinbase = node.getblock(blockhash=b, verbosity=2)[\"tx\"][0]\n+            self.coins.append({\n+                \"txid\": coinbase[\"txid\"],\n+                \"amount\": coinbase[\"vout\"][0][\"value\"],\n+                \"scriptPubKey\": coinbase[\"vout\"][0][\"scriptPubKey\"],\n+            })\n+\n+        # Create some transactions that can be reused throughout the test. Never submit these to mempool.\n+        self.independent_txns_hex = []\n+        self.independent_txns_testres = []\n+        for _ in range(3):\n+            coin = self.coins.pop()\n+            rawtx = node.createrawtransaction([{\"txid\" : coin[\"txid\"], \"vout\" : 0}],\n+                {self.address : coin[\"amount\"] - Decimal(\"0.0001\")})\n+            signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n+            assert signedtx[\"complete\"]\n+            testres = node.testmempoolaccept([signedtx[\"hex\"]])\n+            assert testres[0][\"allowed\"]\n+            self.independent_txns_hex.append(signedtx[\"hex\"])\n+            # testmempoolaccept returns a list of length one, avoid creating a 2D list\n+            self.independent_txns_testres.append(testres[0])\n+\n+        self.test_independent()\n+        self.test_chain()\n+        self.test_chain_limits()\n+        self.test_descendant_limits()\n+        self.test_ancestor_limits()\n+        self.test_multiple_children()\n+        self.test_multiple_parents()\n+        self.test_conflicting()\n+\n+    def chain_transaction(self, parent_txid, value, n=0, parent_locking_script=None):\n+        \"\"\"Build a transaction that spends parent_txid.vout[n] and produces one output with amount=value.\n+        Return tuple (CTransaction object, raw hex, scriptPubKey of the output created).\n+        \"\"\"\n+        node = self.nodes[0]\n+        inputs = [{\"txid\" : parent_txid, \"vout\" : n}]\n+        outputs = {self.address : value}\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+        prevtxs = [{\n+            \"txid\": parent_txid,\n+            \"vout\": n,\n+            \"scriptPubKey\": parent_locking_script,\n+            \"amount\": value + Decimal(\"0.0001\"),\n+        }] if parent_locking_script else None\n+        signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys, prevtxs=prevtxs)\n+        tx = CTransaction()\n+        assert signedtx[\"complete\"]\n+        tx.deserialize(BytesIO(hex_str_to_bytes(signedtx[\"hex\"])))\n+        return (tx, signedtx[\"hex\"], tx.vout[0].scriptPubKey.hex())\n+\n+    def test_independent(self):\n+        self.log.info(\"Test multiple independent transactions in a package\")\n+        node = self.nodes[0]\n+        assert_equal(self.independent_txns_testres, node.testmempoolaccept(rawtxs=self.independent_txns_hex))\n+\n+        self.log.info(\"Test an otherwise valid package with an extra garbage tx appended\")\n+        garbage_tx = node.createrawtransaction([{\"txid\": \"00\" * 32, \"vout\": 5}], {self.address: 1})\n+        tx = CTransaction()\n+        tx.deserialize(BytesIO(hex_str_to_bytes(garbage_tx)))\n+        testres_bad = node.testmempoolaccept(self.independent_txns_hex + [garbage_tx])\n+        testres_independent_ids = [{\"txid\": res[\"txid\"], \"wtxid\": res[\"wtxid\"]} for res in self.independent_txns_testres]\n+        assert_equal(testres_bad, testres_independent_ids + [",
      "path": "test/functional/rpc_packages.py",
      "position": null,
      "original_position": 103,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "9ce7b0f3850a0d69e81a68f18906a9d1aa4356fb",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe add a comment here that the valid transactions only have their txid and wtxid returned because we didn't complete validation for them (returned immediately after garbage_tx fails prechecks). Conversely, in the test below, we return the full results for the valid transactions because tx_bad_sig only fails in PolicyChecks, after we've already completed validation for the good bois.",
      "created_at": "2021-04-23T11:32:56Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r619149080",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619149080"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": 102,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 106,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619149686",
      "pull_request_review_id": 643022948,
      "id": 619149686,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTE0OTY4Ng==",
      "diff_hunk": "@@ -0,0 +1,514 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"RPCs that handle raw transaction packages.\"\"\"\n+\n+from decimal import Decimal\n+from io import BytesIO\n+import random\n+\n+from test_framework.address import ADDRESS_BCRT1_P2WSH_OP_TRUE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    BIP125_SEQUENCE_NUMBER,\n+    COIN,\n+    CTransaction,\n+    CTxInWitness,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_TRUE,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+    hex_str_to_bytes,\n+)\n+\n+class RPCPackagesTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.privkeys = [node.get_deterministic_priv_key().key]\n+        self.address = node.get_deterministic_priv_key().address\n+        self.coins = []\n+        # The last 100 coinbase transactions are premature\n+        for b in node.generatetoaddress(200, self.address)[:100]:\n+            coinbase = node.getblock(blockhash=b, verbosity=2)[\"tx\"][0]\n+            self.coins.append({\n+                \"txid\": coinbase[\"txid\"],\n+                \"amount\": coinbase[\"vout\"][0][\"value\"],\n+                \"scriptPubKey\": coinbase[\"vout\"][0][\"scriptPubKey\"],\n+            })\n+\n+        # Create some transactions that can be reused throughout the test. Never submit these to mempool.\n+        self.independent_txns_hex = []\n+        self.independent_txns_testres = []\n+        for _ in range(3):\n+            coin = self.coins.pop()\n+            rawtx = node.createrawtransaction([{\"txid\" : coin[\"txid\"], \"vout\" : 0}],",
      "path": "test/functional/rpc_packages.py",
      "position": null,
      "original_position": 53,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "9ce7b0f3850a0d69e81a68f18906a9d1aa4356fb",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "minor style comment: PEP8 says no space before colons: https://www.python.org/dev/peps/pep-0008/#pet-peeves",
      "created_at": "2021-04-23T11:34:14Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r619149686",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619149686"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 53,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619150328",
      "pull_request_review_id": 643022948,
      "id": 619150328,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTE1MDMyOA==",
      "diff_hunk": "@@ -0,0 +1,514 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"RPCs that handle raw transaction packages.\"\"\"\n+\n+from decimal import Decimal\n+from io import BytesIO\n+import random\n+\n+from test_framework.address import ADDRESS_BCRT1_P2WSH_OP_TRUE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    BIP125_SEQUENCE_NUMBER,\n+    COIN,\n+    CTransaction,\n+    CTxInWitness,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_TRUE,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+    hex_str_to_bytes,\n+)\n+\n+class RPCPackagesTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.privkeys = [node.get_deterministic_priv_key().key]\n+        self.address = node.get_deterministic_priv_key().address\n+        self.coins = []\n+        # The last 100 coinbase transactions are premature\n+        for b in node.generatetoaddress(200, self.address)[:100]:",
      "path": "test/functional/rpc_packages.py",
      "position": 51,
      "original_position": 40,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "9ce7b0f3850a0d69e81a68f18906a9d1aa4356fb",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe matches the comment better:\r\n\r\n```suggestion\r\n        for b in node.generatetoaddress(200, self.address)[:-100]:\r\n```",
      "created_at": "2021-04-23T11:35:26Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r619150328",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619150328"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 51,
      "original_line": 51,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619152627",
      "pull_request_review_id": 643022948,
      "id": 619152627,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTE1MjYyNw==",
      "diff_hunk": "@@ -0,0 +1,514 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"RPCs that handle raw transaction packages.\"\"\"\n+\n+from decimal import Decimal\n+from io import BytesIO\n+import random\n+\n+from test_framework.address import ADDRESS_BCRT1_P2WSH_OP_TRUE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    BIP125_SEQUENCE_NUMBER,\n+    COIN,\n+    CTransaction,\n+    CTxInWitness,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_TRUE,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+    hex_str_to_bytes,\n+)\n+\n+class RPCPackagesTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.privkeys = [node.get_deterministic_priv_key().key]\n+        self.address = node.get_deterministic_priv_key().address\n+        self.coins = []\n+        # The last 100 coinbase transactions are premature\n+        for b in node.generatetoaddress(200, self.address)[:100]:\n+            coinbase = node.getblock(blockhash=b, verbosity=2)[\"tx\"][0]\n+            self.coins.append({\n+                \"txid\": coinbase[\"txid\"],\n+                \"amount\": coinbase[\"vout\"][0][\"value\"],\n+                \"scriptPubKey\": coinbase[\"vout\"][0][\"scriptPubKey\"],\n+            })\n+\n+        # Create some transactions that can be reused throughout the test. Never submit these to mempool.\n+        self.independent_txns_hex = []\n+        self.independent_txns_testres = []\n+        for _ in range(3):\n+            coin = self.coins.pop()\n+            rawtx = node.createrawtransaction([{\"txid\" : coin[\"txid\"], \"vout\" : 0}],\n+                {self.address : coin[\"amount\"] - Decimal(\"0.0001\")})\n+            signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n+            assert signedtx[\"complete\"]\n+            testres = node.testmempoolaccept([signedtx[\"hex\"]])\n+            assert testres[0][\"allowed\"]\n+            self.independent_txns_hex.append(signedtx[\"hex\"])\n+            # testmempoolaccept returns a list of length one, avoid creating a 2D list\n+            self.independent_txns_testres.append(testres[0])\n+\n+        self.test_independent()\n+        self.test_chain()\n+        self.test_chain_limits()\n+        self.test_descendant_limits()\n+        self.test_ancestor_limits()\n+        self.test_multiple_children()\n+        self.test_multiple_parents()\n+        self.test_conflicting()\n+\n+    def chain_transaction(self, parent_txid, value, n=0, parent_locking_script=None):\n+        \"\"\"Build a transaction that spends parent_txid.vout[n] and produces one output with amount=value.\n+        Return tuple (CTransaction object, raw hex, scriptPubKey of the output created).\n+        \"\"\"\n+        node = self.nodes[0]\n+        inputs = [{\"txid\" : parent_txid, \"vout\" : n}]\n+        outputs = {self.address : value}\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+        prevtxs = [{\n+            \"txid\": parent_txid,\n+            \"vout\": n,\n+            \"scriptPubKey\": parent_locking_script,\n+            \"amount\": value + Decimal(\"0.0001\"),",
      "path": "test/functional/rpc_packages.py",
      "position": null,
      "original_position": 84,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "9ce7b0f3850a0d69e81a68f18906a9d1aa4356fb",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Seems a bit strange (and less maintainable) to have the caller substract this amount, and then add it back here. Can you just use the value of the parent_txid you're passing in?",
      "created_at": "2021-04-23T11:39:50Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r619152627",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619152627"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 84,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619156552",
      "pull_request_review_id": 643022948,
      "id": 619156552,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTE1NjU1Mg==",
      "diff_hunk": "@@ -0,0 +1,514 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"RPCs that handle raw transaction packages.\"\"\"\n+\n+from decimal import Decimal\n+from io import BytesIO\n+import random\n+\n+from test_framework.address import ADDRESS_BCRT1_P2WSH_OP_TRUE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    BIP125_SEQUENCE_NUMBER,\n+    COIN,\n+    CTransaction,\n+    CTxInWitness,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_TRUE,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+    hex_str_to_bytes,\n+)\n+\n+class RPCPackagesTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.privkeys = [node.get_deterministic_priv_key().key]\n+        self.address = node.get_deterministic_priv_key().address\n+        self.coins = []\n+        # The last 100 coinbase transactions are premature\n+        for b in node.generatetoaddress(200, self.address)[:100]:\n+            coinbase = node.getblock(blockhash=b, verbosity=2)[\"tx\"][0]\n+            self.coins.append({\n+                \"txid\": coinbase[\"txid\"],\n+                \"amount\": coinbase[\"vout\"][0][\"value\"],\n+                \"scriptPubKey\": coinbase[\"vout\"][0][\"scriptPubKey\"],\n+            })\n+\n+        # Create some transactions that can be reused throughout the test. Never submit these to mempool.\n+        self.independent_txns_hex = []\n+        self.independent_txns_testres = []\n+        for _ in range(3):\n+            coin = self.coins.pop()\n+            rawtx = node.createrawtransaction([{\"txid\" : coin[\"txid\"], \"vout\" : 0}],\n+                {self.address : coin[\"amount\"] - Decimal(\"0.0001\")})\n+            signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n+            assert signedtx[\"complete\"]\n+            testres = node.testmempoolaccept([signedtx[\"hex\"]])\n+            assert testres[0][\"allowed\"]\n+            self.independent_txns_hex.append(signedtx[\"hex\"])\n+            # testmempoolaccept returns a list of length one, avoid creating a 2D list\n+            self.independent_txns_testres.append(testres[0])\n+\n+        self.test_independent()\n+        self.test_chain()\n+        self.test_chain_limits()\n+        self.test_descendant_limits()\n+        self.test_ancestor_limits()\n+        self.test_multiple_children()\n+        self.test_multiple_parents()\n+        self.test_conflicting()\n+\n+    def chain_transaction(self, parent_txid, value, n=0, parent_locking_script=None):\n+        \"\"\"Build a transaction that spends parent_txid.vout[n] and produces one output with amount=value.\n+        Return tuple (CTransaction object, raw hex, scriptPubKey of the output created).\n+        \"\"\"\n+        node = self.nodes[0]\n+        inputs = [{\"txid\" : parent_txid, \"vout\" : n}]\n+        outputs = {self.address : value}\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+        prevtxs = [{\n+            \"txid\": parent_txid,\n+            \"vout\": n,\n+            \"scriptPubKey\": parent_locking_script,\n+            \"amount\": value + Decimal(\"0.0001\"),\n+        }] if parent_locking_script else None\n+        signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys, prevtxs=prevtxs)\n+        tx = CTransaction()\n+        assert signedtx[\"complete\"]\n+        tx.deserialize(BytesIO(hex_str_to_bytes(signedtx[\"hex\"])))\n+        return (tx, signedtx[\"hex\"], tx.vout[0].scriptPubKey.hex())\n+\n+    def test_independent(self):\n+        self.log.info(\"Test multiple independent transactions in a package\")\n+        node = self.nodes[0]\n+        assert_equal(self.independent_txns_testres, node.testmempoolaccept(rawtxs=self.independent_txns_hex))\n+\n+        self.log.info(\"Test an otherwise valid package with an extra garbage tx appended\")\n+        garbage_tx = node.createrawtransaction([{\"txid\": \"00\" * 32, \"vout\": 5}], {self.address: 1})\n+        tx = CTransaction()\n+        tx.deserialize(BytesIO(hex_str_to_bytes(garbage_tx)))\n+        testres_bad = node.testmempoolaccept(self.independent_txns_hex + [garbage_tx])\n+        testres_independent_ids = [{\"txid\": res[\"txid\"], \"wtxid\": res[\"wtxid\"]} for res in self.independent_txns_testres]\n+        assert_equal(testres_bad, testres_independent_ids + [\n+            {\"txid\": tx.rehash(), \"wtxid\": tx.getwtxid(), \"allowed\": False, \"reject-reason\": \"missing-inputs\"}\n+        ])\n+\n+        self.log.info(\"Check testmempoolaccept tells us when some transactions completed validation successfully\")\n+        coin = self.coins.pop()\n+        tx_bad_sig_hex = node.createrawtransaction([{\"txid\" : coin[\"txid\"], \"vout\" : 0}],\n+                                           {self.address : coin[\"amount\"] - Decimal(\"0.0001\")})\n+        tx_bad_sig = CTransaction()\n+        tx_bad_sig.deserialize(BytesIO(hex_str_to_bytes(tx_bad_sig_hex)))\n+        testres_bad_sig = node.testmempoolaccept(self.independent_txns_hex + [tx_bad_sig_hex])\n+        assert_equal(testres_bad_sig, self.independent_txns_testres + [{\n+            \"txid\": tx_bad_sig.rehash(),\n+            \"wtxid\": tx_bad_sig.getwtxid(), \"allowed\": False,\n+            \"reject-reason\": \"mandatory-script-verify-flag-failed (Operation not valid with the current stack size)\"\n+        }])\n+\n+        self.log.info(\"Check testmempoolaccept reports txns in packages that exceed max feerate\")\n+        coin = self.coins.pop()\n+        tx_high_fee_raw = node.createrawtransaction([{\"txid\" : coin[\"txid\"], \"vout\" : 0}],\n+                                           {self.address : coin[\"amount\"] - Decimal(\"0.999\")})\n+        tx_high_fee_signed = node.signrawtransactionwithkey(hexstring=tx_high_fee_raw, privkeys=self.privkeys)\n+        assert tx_high_fee_signed[\"complete\"]\n+        tx_high_fee = CTransaction()\n+        tx_high_fee.deserialize(BytesIO(hex_str_to_bytes(tx_high_fee_signed[\"hex\"])))\n+        testres_high_fee = node.testmempoolaccept([tx_high_fee_signed[\"hex\"]])\n+        assert_equal(testres_high_fee, [\n+            {\"txid\": tx_high_fee.rehash(), \"wtxid\": tx_high_fee.getwtxid(), \"allowed\": False, \"reject-reason\": \"max-fee-exceeded\"}\n+        ])\n+        testres_package_high_fee = node.testmempoolaccept(self.independent_txns_hex + [tx_high_fee_signed[\"hex\"]])\n+        assert_equal(testres_package_high_fee, self.independent_txns_testres + testres_high_fee)\n+\n+    def test_chain(self):\n+        node = self.nodes[0]\n+        first_coin = self.coins.pop()\n+\n+        # Chain of 25 transactions\n+        parent_locking_script = None\n+        txid = first_coin[\"txid\"]\n+        chain_hex = []\n+        chain_txns = []\n+        value = first_coin[\"amount\"]\n+\n+        for _ in range(25):\n+            value -= Decimal(\"0.0001\") # Deduct reasonable fee\n+            (tx, txhex, parent_locking_script) = self.chain_transaction(txid, value, 0, parent_locking_script)\n+            txid = tx.rehash()\n+            chain_hex.append(txhex)\n+            chain_txns.append(tx)\n+\n+        self.log.info(\"Check that testmempoolaccept requires packages to be sorted by dependency\")\n+        assert_equal(node.testmempoolaccept(rawtxs=chain_hex[::-1]),\n+                     [{\"txid\": tx.rehash(), \"wtxid\": tx.getwtxid()} for tx in chain_txns[::-1]])\n+\n+        self.log.info(\"Testmempoolaccept a chain of 25 transactions\")\n+        testres_multiple = node.testmempoolaccept(rawtxs=chain_hex)\n+\n+        testres_single = []\n+        # Test accept and then submit each one individually, which should be identical to package test accept\n+        for rawtx in chain_hex:\n+            testres = node.testmempoolaccept([rawtx])\n+            testres_single.append(testres[0])\n+            # Submit the transaction now so its child should have no problem validating\n+            node.sendrawtransaction(rawtx)\n+        assert_equal(testres_single, testres_multiple)\n+\n+        # Clean up by clearing the mempool\n+        node.generate(1)\n+\n+    def test_chain_limits_helper(self, mempool_count, package_count):\n+        node = self.nodes[0]\n+        first_coin = self.coins.pop()\n+        parent_locking_script = None\n+        txid = first_coin[\"txid\"]\n+        chain_hex = []\n+        chain_txns = []\n+        value = first_coin[\"amount\"]\n+\n+        for i in range(mempool_count + package_count):\n+            value -= Decimal(\"0.0001\") # Deduct reasonable fee\n+            (tx, txhex, parent_locking_script) = self.chain_transaction(txid, value, 0, parent_locking_script)\n+            txid = tx.rehash()\n+            if i < mempool_count:\n+                node.sendrawtransaction(txhex)\n+                assert_equal(node.getrawmempool(verbose=True)[txid][\"ancestorcount\"], i + 1)\n+            else:\n+                chain_hex.append(txhex)\n+                chain_txns.append(tx)\n+        testres_too_long = node.testmempoolaccept(rawtxs=chain_hex)\n+        for txres in testres_too_long:\n+            assert_equal(txres[\"reject-reason\"], \"too-long-mempool-chain\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=chain_hex)])\n+\n+    def test_chain_limits(self):\n+        \"\"\"Create chains from mempool and package transactions that are longer than 25,\n+        but only if both in-mempool and in-package transactions are considered together.\n+        This checks that both mempool and in-package transactions are taken into account when\n+        calculating ancestors/descendant limits.\n+        \"\"\"\n+        self.log.info(\"Check that in-package ancestors count for mempool ancestor limits\")\n+\n+        # 24 transactions in the mempool and 2 in the package. The parent in the package has\n+        # 24 in-mempool ancestors and 1 in-package descendant. The child has 0 direct parents\n+        # in the mempool, but 25 in-mempool and in-package ancestors in total.\n+        self.test_chain_limits_helper(24, 2)\n+        # 2 transactions in the mempool and 24 in the package.\n+        self.test_chain_limits_helper(2, 24)\n+        # 13 transactions in the mempool and 13 in the package.\n+        self.test_chain_limits_helper(13, 13)\n+\n+    def test_descendant_limits(self):\n+        \"\"\"Create an 'A' shaped package with 25 transactions in the mempool and 2 in the package:\n+                    M1\n+                   ^  ^\n+                 M2a  M2b\n+                .       .\n+               .         .\n+              .           .\n+             M11a          ^\n+            ^              M12b\n+           ^                 ^\n+          Pa                  Pb\n+        The top ancestor in the package exceeds descendant limits but only if the in-mempool and in-package\n+        descendants are all considered together (24 including in-mempool descendants and 26 including both\n+        package transactions).\n+        \"\"\"\n+        node = self.nodes[0]\n+        self.log.info(\"Check that in-mempool and in-package descendants are calculated properly in packages\")\n+        # Top parent in mempool, M1\n+        first_coin = self.coins.pop()\n+        parent_value = (first_coin[\"amount\"] - Decimal(\"0.0002\")) / 2 # Deduct reasonable fee and make 2 outputs\n+        inputs = [{\"txid\" : first_coin[\"txid\"], \"vout\" : 0}]\n+        outputs = [{self.address : parent_value}, {ADDRESS_BCRT1_P2WSH_OP_TRUE : parent_value}]",
      "path": "test/functional/rpc_packages.py",
      "position": null,
      "original_position": 238,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "9ce7b0f3850a0d69e81a68f18906a9d1aa4356fb",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why do you need different scriptpubkeys here? Can you not send both outputs to the same address?",
      "created_at": "2021-04-23T11:47:15Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r619156552",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619156552"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 245,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619159444",
      "pull_request_review_id": 643022948,
      "id": 619159444,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTE1OTQ0NA==",
      "diff_hunk": "@@ -0,0 +1,514 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"RPCs that handle raw transaction packages.\"\"\"\n+\n+from decimal import Decimal\n+from io import BytesIO\n+import random\n+\n+from test_framework.address import ADDRESS_BCRT1_P2WSH_OP_TRUE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    BIP125_SEQUENCE_NUMBER,\n+    COIN,\n+    CTransaction,\n+    CTxInWitness,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_TRUE,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+    hex_str_to_bytes,\n+)\n+\n+class RPCPackagesTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.privkeys = [node.get_deterministic_priv_key().key]\n+        self.address = node.get_deterministic_priv_key().address\n+        self.coins = []\n+        # The last 100 coinbase transactions are premature\n+        for b in node.generatetoaddress(200, self.address)[:100]:\n+            coinbase = node.getblock(blockhash=b, verbosity=2)[\"tx\"][0]\n+            self.coins.append({\n+                \"txid\": coinbase[\"txid\"],\n+                \"amount\": coinbase[\"vout\"][0][\"value\"],\n+                \"scriptPubKey\": coinbase[\"vout\"][0][\"scriptPubKey\"],\n+            })\n+\n+        # Create some transactions that can be reused throughout the test. Never submit these to mempool.\n+        self.independent_txns_hex = []\n+        self.independent_txns_testres = []\n+        for _ in range(3):\n+            coin = self.coins.pop()\n+            rawtx = node.createrawtransaction([{\"txid\" : coin[\"txid\"], \"vout\" : 0}],\n+                {self.address : coin[\"amount\"] - Decimal(\"0.0001\")})\n+            signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n+            assert signedtx[\"complete\"]\n+            testres = node.testmempoolaccept([signedtx[\"hex\"]])\n+            assert testres[0][\"allowed\"]\n+            self.independent_txns_hex.append(signedtx[\"hex\"])\n+            # testmempoolaccept returns a list of length one, avoid creating a 2D list\n+            self.independent_txns_testres.append(testres[0])\n+\n+        self.test_independent()\n+        self.test_chain()\n+        self.test_chain_limits()\n+        self.test_descendant_limits()\n+        self.test_ancestor_limits()\n+        self.test_multiple_children()\n+        self.test_multiple_parents()\n+        self.test_conflicting()\n+\n+    def chain_transaction(self, parent_txid, value, n=0, parent_locking_script=None):\n+        \"\"\"Build a transaction that spends parent_txid.vout[n] and produces one output with amount=value.\n+        Return tuple (CTransaction object, raw hex, scriptPubKey of the output created).\n+        \"\"\"\n+        node = self.nodes[0]\n+        inputs = [{\"txid\" : parent_txid, \"vout\" : n}]\n+        outputs = {self.address : value}\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+        prevtxs = [{\n+            \"txid\": parent_txid,\n+            \"vout\": n,\n+            \"scriptPubKey\": parent_locking_script,\n+            \"amount\": value + Decimal(\"0.0001\"),\n+        }] if parent_locking_script else None\n+        signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys, prevtxs=prevtxs)\n+        tx = CTransaction()\n+        assert signedtx[\"complete\"]\n+        tx.deserialize(BytesIO(hex_str_to_bytes(signedtx[\"hex\"])))\n+        return (tx, signedtx[\"hex\"], tx.vout[0].scriptPubKey.hex())\n+\n+    def test_independent(self):\n+        self.log.info(\"Test multiple independent transactions in a package\")\n+        node = self.nodes[0]\n+        assert_equal(self.independent_txns_testres, node.testmempoolaccept(rawtxs=self.independent_txns_hex))\n+\n+        self.log.info(\"Test an otherwise valid package with an extra garbage tx appended\")\n+        garbage_tx = node.createrawtransaction([{\"txid\": \"00\" * 32, \"vout\": 5}], {self.address: 1})\n+        tx = CTransaction()\n+        tx.deserialize(BytesIO(hex_str_to_bytes(garbage_tx)))\n+        testres_bad = node.testmempoolaccept(self.independent_txns_hex + [garbage_tx])\n+        testres_independent_ids = [{\"txid\": res[\"txid\"], \"wtxid\": res[\"wtxid\"]} for res in self.independent_txns_testres]\n+        assert_equal(testres_bad, testres_independent_ids + [\n+            {\"txid\": tx.rehash(), \"wtxid\": tx.getwtxid(), \"allowed\": False, \"reject-reason\": \"missing-inputs\"}\n+        ])\n+\n+        self.log.info(\"Check testmempoolaccept tells us when some transactions completed validation successfully\")\n+        coin = self.coins.pop()\n+        tx_bad_sig_hex = node.createrawtransaction([{\"txid\" : coin[\"txid\"], \"vout\" : 0}],\n+                                           {self.address : coin[\"amount\"] - Decimal(\"0.0001\")})\n+        tx_bad_sig = CTransaction()\n+        tx_bad_sig.deserialize(BytesIO(hex_str_to_bytes(tx_bad_sig_hex)))\n+        testres_bad_sig = node.testmempoolaccept(self.independent_txns_hex + [tx_bad_sig_hex])\n+        assert_equal(testres_bad_sig, self.independent_txns_testres + [{\n+            \"txid\": tx_bad_sig.rehash(),\n+            \"wtxid\": tx_bad_sig.getwtxid(), \"allowed\": False,\n+            \"reject-reason\": \"mandatory-script-verify-flag-failed (Operation not valid with the current stack size)\"\n+        }])\n+\n+        self.log.info(\"Check testmempoolaccept reports txns in packages that exceed max feerate\")\n+        coin = self.coins.pop()\n+        tx_high_fee_raw = node.createrawtransaction([{\"txid\" : coin[\"txid\"], \"vout\" : 0}],\n+                                           {self.address : coin[\"amount\"] - Decimal(\"0.999\")})\n+        tx_high_fee_signed = node.signrawtransactionwithkey(hexstring=tx_high_fee_raw, privkeys=self.privkeys)\n+        assert tx_high_fee_signed[\"complete\"]\n+        tx_high_fee = CTransaction()\n+        tx_high_fee.deserialize(BytesIO(hex_str_to_bytes(tx_high_fee_signed[\"hex\"])))\n+        testres_high_fee = node.testmempoolaccept([tx_high_fee_signed[\"hex\"]])\n+        assert_equal(testres_high_fee, [\n+            {\"txid\": tx_high_fee.rehash(), \"wtxid\": tx_high_fee.getwtxid(), \"allowed\": False, \"reject-reason\": \"max-fee-exceeded\"}\n+        ])\n+        testres_package_high_fee = node.testmempoolaccept(self.independent_txns_hex + [tx_high_fee_signed[\"hex\"]])\n+        assert_equal(testres_package_high_fee, self.independent_txns_testres + testres_high_fee)\n+\n+    def test_chain(self):\n+        node = self.nodes[0]\n+        first_coin = self.coins.pop()\n+\n+        # Chain of 25 transactions\n+        parent_locking_script = None\n+        txid = first_coin[\"txid\"]\n+        chain_hex = []\n+        chain_txns = []\n+        value = first_coin[\"amount\"]\n+\n+        for _ in range(25):\n+            value -= Decimal(\"0.0001\") # Deduct reasonable fee\n+            (tx, txhex, parent_locking_script) = self.chain_transaction(txid, value, 0, parent_locking_script)\n+            txid = tx.rehash()\n+            chain_hex.append(txhex)\n+            chain_txns.append(tx)\n+\n+        self.log.info(\"Check that testmempoolaccept requires packages to be sorted by dependency\")\n+        assert_equal(node.testmempoolaccept(rawtxs=chain_hex[::-1]),\n+                     [{\"txid\": tx.rehash(), \"wtxid\": tx.getwtxid()} for tx in chain_txns[::-1]])\n+\n+        self.log.info(\"Testmempoolaccept a chain of 25 transactions\")\n+        testres_multiple = node.testmempoolaccept(rawtxs=chain_hex)\n+\n+        testres_single = []\n+        # Test accept and then submit each one individually, which should be identical to package test accept\n+        for rawtx in chain_hex:\n+            testres = node.testmempoolaccept([rawtx])\n+            testres_single.append(testres[0])\n+            # Submit the transaction now so its child should have no problem validating\n+            node.sendrawtransaction(rawtx)\n+        assert_equal(testres_single, testres_multiple)\n+\n+        # Clean up by clearing the mempool\n+        node.generate(1)\n+\n+    def test_chain_limits_helper(self, mempool_count, package_count):\n+        node = self.nodes[0]\n+        first_coin = self.coins.pop()\n+        parent_locking_script = None\n+        txid = first_coin[\"txid\"]\n+        chain_hex = []\n+        chain_txns = []\n+        value = first_coin[\"amount\"]\n+\n+        for i in range(mempool_count + package_count):\n+            value -= Decimal(\"0.0001\") # Deduct reasonable fee\n+            (tx, txhex, parent_locking_script) = self.chain_transaction(txid, value, 0, parent_locking_script)\n+            txid = tx.rehash()\n+            if i < mempool_count:\n+                node.sendrawtransaction(txhex)\n+                assert_equal(node.getrawmempool(verbose=True)[txid][\"ancestorcount\"], i + 1)\n+            else:\n+                chain_hex.append(txhex)\n+                chain_txns.append(tx)\n+        testres_too_long = node.testmempoolaccept(rawtxs=chain_hex)\n+        for txres in testres_too_long:\n+            assert_equal(txres[\"reject-reason\"], \"too-long-mempool-chain\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=chain_hex)])\n+\n+    def test_chain_limits(self):\n+        \"\"\"Create chains from mempool and package transactions that are longer than 25,\n+        but only if both in-mempool and in-package transactions are considered together.\n+        This checks that both mempool and in-package transactions are taken into account when\n+        calculating ancestors/descendant limits.\n+        \"\"\"\n+        self.log.info(\"Check that in-package ancestors count for mempool ancestor limits\")\n+\n+        # 24 transactions in the mempool and 2 in the package. The parent in the package has\n+        # 24 in-mempool ancestors and 1 in-package descendant. The child has 0 direct parents\n+        # in the mempool, but 25 in-mempool and in-package ancestors in total.\n+        self.test_chain_limits_helper(24, 2)\n+        # 2 transactions in the mempool and 24 in the package.\n+        self.test_chain_limits_helper(2, 24)\n+        # 13 transactions in the mempool and 13 in the package.\n+        self.test_chain_limits_helper(13, 13)\n+\n+    def test_descendant_limits(self):\n+        \"\"\"Create an 'A' shaped package with 25 transactions in the mempool and 2 in the package:\n+                    M1\n+                   ^  ^\n+                 M2a  M2b\n+                .       .\n+               .         .\n+              .           .\n+             M11a          ^\n+            ^              M12b\n+           ^                 ^\n+          Pa                  Pb\n+        The top ancestor in the package exceeds descendant limits but only if the in-mempool and in-package\n+        descendants are all considered together (24 including in-mempool descendants and 26 including both\n+        package transactions).\n+        \"\"\"\n+        node = self.nodes[0]\n+        self.log.info(\"Check that in-mempool and in-package descendants are calculated properly in packages\")\n+        # Top parent in mempool, M1\n+        first_coin = self.coins.pop()\n+        parent_value = (first_coin[\"amount\"] - Decimal(\"0.0002\")) / 2 # Deduct reasonable fee and make 2 outputs\n+        inputs = [{\"txid\" : first_coin[\"txid\"], \"vout\" : 0}]\n+        outputs = [{self.address : parent_value}, {ADDRESS_BCRT1_P2WSH_OP_TRUE : parent_value}]\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+\n+        parent_signed = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n+        parent_tx = CTransaction()\n+        assert parent_signed[\"complete\"]\n+        parent_tx.deserialize(BytesIO(hex_str_to_bytes(parent_signed[\"hex\"])))\n+        parent_txid = parent_tx.rehash()\n+        node.sendrawtransaction(parent_signed[\"hex\"])\n+\n+        package_hex = []\n+\n+        # Chain A\n+        parent_locking_script = parent_tx.vout[0].scriptPubKey.hex()\n+        value = parent_value\n+        txid = parent_txid\n+        for i in range(12):\n+            value -= Decimal(\"0.0001\") # deduct reasonable fee\n+            (tx, txhex, parent_locking_script) = self.chain_transaction(txid, value, 0, parent_locking_script)",
      "path": "test/functional/rpc_packages.py",
      "position": null,
      "original_position": 256,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "9ce7b0f3850a0d69e81a68f18906a9d1aa4356fb",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It's a little inconsistent that _parent_ is being used in `parent_locking_script` to refer to each tx as you work down the chain, whereas in `parent_tx` it only ever refers to the top tx of the graph.",
      "created_at": "2021-04-23T11:52:48Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r619159444",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619159444"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 256,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619161126",
      "pull_request_review_id": 643022948,
      "id": 619161126,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTE2MTEyNg==",
      "diff_hunk": "@@ -0,0 +1,514 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"RPCs that handle raw transaction packages.\"\"\"\n+\n+from decimal import Decimal\n+from io import BytesIO\n+import random\n+\n+from test_framework.address import ADDRESS_BCRT1_P2WSH_OP_TRUE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    BIP125_SEQUENCE_NUMBER,\n+    COIN,\n+    CTransaction,\n+    CTxInWitness,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_TRUE,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+    hex_str_to_bytes,\n+)\n+\n+class RPCPackagesTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.privkeys = [node.get_deterministic_priv_key().key]\n+        self.address = node.get_deterministic_priv_key().address\n+        self.coins = []\n+        # The last 100 coinbase transactions are premature\n+        for b in node.generatetoaddress(200, self.address)[:100]:\n+            coinbase = node.getblock(blockhash=b, verbosity=2)[\"tx\"][0]\n+            self.coins.append({\n+                \"txid\": coinbase[\"txid\"],\n+                \"amount\": coinbase[\"vout\"][0][\"value\"],\n+                \"scriptPubKey\": coinbase[\"vout\"][0][\"scriptPubKey\"],\n+            })\n+\n+        # Create some transactions that can be reused throughout the test. Never submit these to mempool.\n+        self.independent_txns_hex = []\n+        self.independent_txns_testres = []\n+        for _ in range(3):\n+            coin = self.coins.pop()\n+            rawtx = node.createrawtransaction([{\"txid\" : coin[\"txid\"], \"vout\" : 0}],\n+                {self.address : coin[\"amount\"] - Decimal(\"0.0001\")})\n+            signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n+            assert signedtx[\"complete\"]\n+            testres = node.testmempoolaccept([signedtx[\"hex\"]])\n+            assert testres[0][\"allowed\"]\n+            self.independent_txns_hex.append(signedtx[\"hex\"])\n+            # testmempoolaccept returns a list of length one, avoid creating a 2D list\n+            self.independent_txns_testres.append(testres[0])\n+\n+        self.test_independent()\n+        self.test_chain()\n+        self.test_chain_limits()\n+        self.test_descendant_limits()\n+        self.test_ancestor_limits()\n+        self.test_multiple_children()\n+        self.test_multiple_parents()\n+        self.test_conflicting()\n+\n+    def chain_transaction(self, parent_txid, value, n=0, parent_locking_script=None):\n+        \"\"\"Build a transaction that spends parent_txid.vout[n] and produces one output with amount=value.\n+        Return tuple (CTransaction object, raw hex, scriptPubKey of the output created).\n+        \"\"\"\n+        node = self.nodes[0]\n+        inputs = [{\"txid\" : parent_txid, \"vout\" : n}]\n+        outputs = {self.address : value}\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+        prevtxs = [{\n+            \"txid\": parent_txid,\n+            \"vout\": n,\n+            \"scriptPubKey\": parent_locking_script,\n+            \"amount\": value + Decimal(\"0.0001\"),\n+        }] if parent_locking_script else None\n+        signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys, prevtxs=prevtxs)\n+        tx = CTransaction()\n+        assert signedtx[\"complete\"]\n+        tx.deserialize(BytesIO(hex_str_to_bytes(signedtx[\"hex\"])))\n+        return (tx, signedtx[\"hex\"], tx.vout[0].scriptPubKey.hex())\n+\n+    def test_independent(self):\n+        self.log.info(\"Test multiple independent transactions in a package\")\n+        node = self.nodes[0]\n+        assert_equal(self.independent_txns_testres, node.testmempoolaccept(rawtxs=self.independent_txns_hex))\n+\n+        self.log.info(\"Test an otherwise valid package with an extra garbage tx appended\")\n+        garbage_tx = node.createrawtransaction([{\"txid\": \"00\" * 32, \"vout\": 5}], {self.address: 1})\n+        tx = CTransaction()\n+        tx.deserialize(BytesIO(hex_str_to_bytes(garbage_tx)))\n+        testres_bad = node.testmempoolaccept(self.independent_txns_hex + [garbage_tx])\n+        testres_independent_ids = [{\"txid\": res[\"txid\"], \"wtxid\": res[\"wtxid\"]} for res in self.independent_txns_testres]\n+        assert_equal(testres_bad, testres_independent_ids + [\n+            {\"txid\": tx.rehash(), \"wtxid\": tx.getwtxid(), \"allowed\": False, \"reject-reason\": \"missing-inputs\"}\n+        ])\n+\n+        self.log.info(\"Check testmempoolaccept tells us when some transactions completed validation successfully\")\n+        coin = self.coins.pop()\n+        tx_bad_sig_hex = node.createrawtransaction([{\"txid\" : coin[\"txid\"], \"vout\" : 0}],\n+                                           {self.address : coin[\"amount\"] - Decimal(\"0.0001\")})\n+        tx_bad_sig = CTransaction()\n+        tx_bad_sig.deserialize(BytesIO(hex_str_to_bytes(tx_bad_sig_hex)))\n+        testres_bad_sig = node.testmempoolaccept(self.independent_txns_hex + [tx_bad_sig_hex])\n+        assert_equal(testres_bad_sig, self.independent_txns_testres + [{\n+            \"txid\": tx_bad_sig.rehash(),\n+            \"wtxid\": tx_bad_sig.getwtxid(), \"allowed\": False,\n+            \"reject-reason\": \"mandatory-script-verify-flag-failed (Operation not valid with the current stack size)\"\n+        }])\n+\n+        self.log.info(\"Check testmempoolaccept reports txns in packages that exceed max feerate\")\n+        coin = self.coins.pop()\n+        tx_high_fee_raw = node.createrawtransaction([{\"txid\" : coin[\"txid\"], \"vout\" : 0}],\n+                                           {self.address : coin[\"amount\"] - Decimal(\"0.999\")})\n+        tx_high_fee_signed = node.signrawtransactionwithkey(hexstring=tx_high_fee_raw, privkeys=self.privkeys)\n+        assert tx_high_fee_signed[\"complete\"]\n+        tx_high_fee = CTransaction()\n+        tx_high_fee.deserialize(BytesIO(hex_str_to_bytes(tx_high_fee_signed[\"hex\"])))\n+        testres_high_fee = node.testmempoolaccept([tx_high_fee_signed[\"hex\"]])\n+        assert_equal(testres_high_fee, [\n+            {\"txid\": tx_high_fee.rehash(), \"wtxid\": tx_high_fee.getwtxid(), \"allowed\": False, \"reject-reason\": \"max-fee-exceeded\"}\n+        ])\n+        testres_package_high_fee = node.testmempoolaccept(self.independent_txns_hex + [tx_high_fee_signed[\"hex\"]])\n+        assert_equal(testres_package_high_fee, self.independent_txns_testres + testres_high_fee)\n+\n+    def test_chain(self):\n+        node = self.nodes[0]\n+        first_coin = self.coins.pop()\n+\n+        # Chain of 25 transactions\n+        parent_locking_script = None\n+        txid = first_coin[\"txid\"]\n+        chain_hex = []\n+        chain_txns = []\n+        value = first_coin[\"amount\"]\n+\n+        for _ in range(25):\n+            value -= Decimal(\"0.0001\") # Deduct reasonable fee\n+            (tx, txhex, parent_locking_script) = self.chain_transaction(txid, value, 0, parent_locking_script)\n+            txid = tx.rehash()\n+            chain_hex.append(txhex)\n+            chain_txns.append(tx)\n+\n+        self.log.info(\"Check that testmempoolaccept requires packages to be sorted by dependency\")\n+        assert_equal(node.testmempoolaccept(rawtxs=chain_hex[::-1]),\n+                     [{\"txid\": tx.rehash(), \"wtxid\": tx.getwtxid()} for tx in chain_txns[::-1]])\n+\n+        self.log.info(\"Testmempoolaccept a chain of 25 transactions\")\n+        testres_multiple = node.testmempoolaccept(rawtxs=chain_hex)\n+\n+        testres_single = []\n+        # Test accept and then submit each one individually, which should be identical to package test accept\n+        for rawtx in chain_hex:\n+            testres = node.testmempoolaccept([rawtx])\n+            testres_single.append(testres[0])\n+            # Submit the transaction now so its child should have no problem validating\n+            node.sendrawtransaction(rawtx)\n+        assert_equal(testres_single, testres_multiple)\n+\n+        # Clean up by clearing the mempool\n+        node.generate(1)\n+\n+    def test_chain_limits_helper(self, mempool_count, package_count):\n+        node = self.nodes[0]\n+        first_coin = self.coins.pop()\n+        parent_locking_script = None\n+        txid = first_coin[\"txid\"]\n+        chain_hex = []\n+        chain_txns = []\n+        value = first_coin[\"amount\"]\n+\n+        for i in range(mempool_count + package_count):\n+            value -= Decimal(\"0.0001\") # Deduct reasonable fee\n+            (tx, txhex, parent_locking_script) = self.chain_transaction(txid, value, 0, parent_locking_script)\n+            txid = tx.rehash()\n+            if i < mempool_count:\n+                node.sendrawtransaction(txhex)\n+                assert_equal(node.getrawmempool(verbose=True)[txid][\"ancestorcount\"], i + 1)\n+            else:\n+                chain_hex.append(txhex)\n+                chain_txns.append(tx)\n+        testres_too_long = node.testmempoolaccept(rawtxs=chain_hex)\n+        for txres in testres_too_long:\n+            assert_equal(txres[\"reject-reason\"], \"too-long-mempool-chain\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=chain_hex)])\n+\n+    def test_chain_limits(self):\n+        \"\"\"Create chains from mempool and package transactions that are longer than 25,\n+        but only if both in-mempool and in-package transactions are considered together.\n+        This checks that both mempool and in-package transactions are taken into account when\n+        calculating ancestors/descendant limits.\n+        \"\"\"\n+        self.log.info(\"Check that in-package ancestors count for mempool ancestor limits\")\n+\n+        # 24 transactions in the mempool and 2 in the package. The parent in the package has\n+        # 24 in-mempool ancestors and 1 in-package descendant. The child has 0 direct parents\n+        # in the mempool, but 25 in-mempool and in-package ancestors in total.\n+        self.test_chain_limits_helper(24, 2)\n+        # 2 transactions in the mempool and 24 in the package.\n+        self.test_chain_limits_helper(2, 24)\n+        # 13 transactions in the mempool and 13 in the package.\n+        self.test_chain_limits_helper(13, 13)\n+\n+    def test_descendant_limits(self):\n+        \"\"\"Create an 'A' shaped package with 25 transactions in the mempool and 2 in the package:\n+                    M1\n+                   ^  ^\n+                 M2a  M2b\n+                .       .\n+               .         .\n+              .           .\n+             M11a          ^\n+            ^              M12b\n+           ^                 ^\n+          Pa                  Pb\n+        The top ancestor in the package exceeds descendant limits but only if the in-mempool and in-package\n+        descendants are all considered together (24 including in-mempool descendants and 26 including both\n+        package transactions).\n+        \"\"\"\n+        node = self.nodes[0]\n+        self.log.info(\"Check that in-mempool and in-package descendants are calculated properly in packages\")\n+        # Top parent in mempool, M1\n+        first_coin = self.coins.pop()\n+        parent_value = (first_coin[\"amount\"] - Decimal(\"0.0002\")) / 2 # Deduct reasonable fee and make 2 outputs\n+        inputs = [{\"txid\" : first_coin[\"txid\"], \"vout\" : 0}]\n+        outputs = [{self.address : parent_value}, {ADDRESS_BCRT1_P2WSH_OP_TRUE : parent_value}]\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+\n+        parent_signed = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n+        parent_tx = CTransaction()\n+        assert parent_signed[\"complete\"]\n+        parent_tx.deserialize(BytesIO(hex_str_to_bytes(parent_signed[\"hex\"])))\n+        parent_txid = parent_tx.rehash()\n+        node.sendrawtransaction(parent_signed[\"hex\"])\n+\n+        package_hex = []\n+\n+        # Chain A\n+        parent_locking_script = parent_tx.vout[0].scriptPubKey.hex()\n+        value = parent_value\n+        txid = parent_txid\n+        for i in range(12):\n+            value -= Decimal(\"0.0001\") # deduct reasonable fee\n+            (tx, txhex, parent_locking_script) = self.chain_transaction(txid, value, 0, parent_locking_script)\n+            txid = tx.rehash()\n+            if i < 11: # M2a... M11a",
      "path": "test/functional/rpc_packages.py",
      "position": null,
      "original_position": 258,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "9ce7b0f3850a0d69e81a68f18906a9d1aa4356fb",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think you've miscounted here. `i` takes values between 0 and 10 here (11 values) M2a - M11a is 10 values.",
      "created_at": "2021-04-23T11:55:54Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r619161126",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619161126"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 258,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619161307",
      "pull_request_review_id": 643022948,
      "id": 619161307,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTE2MTMwNw==",
      "diff_hunk": "@@ -0,0 +1,514 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"RPCs that handle raw transaction packages.\"\"\"\n+\n+from decimal import Decimal\n+from io import BytesIO\n+import random\n+\n+from test_framework.address import ADDRESS_BCRT1_P2WSH_OP_TRUE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    BIP125_SEQUENCE_NUMBER,\n+    COIN,\n+    CTransaction,\n+    CTxInWitness,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_TRUE,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+    hex_str_to_bytes,\n+)\n+\n+class RPCPackagesTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.privkeys = [node.get_deterministic_priv_key().key]\n+        self.address = node.get_deterministic_priv_key().address\n+        self.coins = []\n+        # The last 100 coinbase transactions are premature\n+        for b in node.generatetoaddress(200, self.address)[:100]:\n+            coinbase = node.getblock(blockhash=b, verbosity=2)[\"tx\"][0]\n+            self.coins.append({\n+                \"txid\": coinbase[\"txid\"],\n+                \"amount\": coinbase[\"vout\"][0][\"value\"],\n+                \"scriptPubKey\": coinbase[\"vout\"][0][\"scriptPubKey\"],\n+            })\n+\n+        # Create some transactions that can be reused throughout the test. Never submit these to mempool.\n+        self.independent_txns_hex = []\n+        self.independent_txns_testres = []\n+        for _ in range(3):\n+            coin = self.coins.pop()\n+            rawtx = node.createrawtransaction([{\"txid\" : coin[\"txid\"], \"vout\" : 0}],\n+                {self.address : coin[\"amount\"] - Decimal(\"0.0001\")})\n+            signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n+            assert signedtx[\"complete\"]\n+            testres = node.testmempoolaccept([signedtx[\"hex\"]])\n+            assert testres[0][\"allowed\"]\n+            self.independent_txns_hex.append(signedtx[\"hex\"])\n+            # testmempoolaccept returns a list of length one, avoid creating a 2D list\n+            self.independent_txns_testres.append(testres[0])\n+\n+        self.test_independent()\n+        self.test_chain()\n+        self.test_chain_limits()\n+        self.test_descendant_limits()\n+        self.test_ancestor_limits()\n+        self.test_multiple_children()\n+        self.test_multiple_parents()\n+        self.test_conflicting()\n+\n+    def chain_transaction(self, parent_txid, value, n=0, parent_locking_script=None):\n+        \"\"\"Build a transaction that spends parent_txid.vout[n] and produces one output with amount=value.\n+        Return tuple (CTransaction object, raw hex, scriptPubKey of the output created).\n+        \"\"\"\n+        node = self.nodes[0]\n+        inputs = [{\"txid\" : parent_txid, \"vout\" : n}]\n+        outputs = {self.address : value}\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+        prevtxs = [{\n+            \"txid\": parent_txid,\n+            \"vout\": n,\n+            \"scriptPubKey\": parent_locking_script,\n+            \"amount\": value + Decimal(\"0.0001\"),\n+        }] if parent_locking_script else None\n+        signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys, prevtxs=prevtxs)\n+        tx = CTransaction()\n+        assert signedtx[\"complete\"]\n+        tx.deserialize(BytesIO(hex_str_to_bytes(signedtx[\"hex\"])))\n+        return (tx, signedtx[\"hex\"], tx.vout[0].scriptPubKey.hex())\n+\n+    def test_independent(self):\n+        self.log.info(\"Test multiple independent transactions in a package\")\n+        node = self.nodes[0]\n+        assert_equal(self.independent_txns_testres, node.testmempoolaccept(rawtxs=self.independent_txns_hex))\n+\n+        self.log.info(\"Test an otherwise valid package with an extra garbage tx appended\")\n+        garbage_tx = node.createrawtransaction([{\"txid\": \"00\" * 32, \"vout\": 5}], {self.address: 1})\n+        tx = CTransaction()\n+        tx.deserialize(BytesIO(hex_str_to_bytes(garbage_tx)))\n+        testres_bad = node.testmempoolaccept(self.independent_txns_hex + [garbage_tx])\n+        testres_independent_ids = [{\"txid\": res[\"txid\"], \"wtxid\": res[\"wtxid\"]} for res in self.independent_txns_testres]\n+        assert_equal(testres_bad, testres_independent_ids + [\n+            {\"txid\": tx.rehash(), \"wtxid\": tx.getwtxid(), \"allowed\": False, \"reject-reason\": \"missing-inputs\"}\n+        ])\n+\n+        self.log.info(\"Check testmempoolaccept tells us when some transactions completed validation successfully\")\n+        coin = self.coins.pop()\n+        tx_bad_sig_hex = node.createrawtransaction([{\"txid\" : coin[\"txid\"], \"vout\" : 0}],\n+                                           {self.address : coin[\"amount\"] - Decimal(\"0.0001\")})\n+        tx_bad_sig = CTransaction()\n+        tx_bad_sig.deserialize(BytesIO(hex_str_to_bytes(tx_bad_sig_hex)))\n+        testres_bad_sig = node.testmempoolaccept(self.independent_txns_hex + [tx_bad_sig_hex])\n+        assert_equal(testres_bad_sig, self.independent_txns_testres + [{\n+            \"txid\": tx_bad_sig.rehash(),\n+            \"wtxid\": tx_bad_sig.getwtxid(), \"allowed\": False,\n+            \"reject-reason\": \"mandatory-script-verify-flag-failed (Operation not valid with the current stack size)\"\n+        }])\n+\n+        self.log.info(\"Check testmempoolaccept reports txns in packages that exceed max feerate\")\n+        coin = self.coins.pop()\n+        tx_high_fee_raw = node.createrawtransaction([{\"txid\" : coin[\"txid\"], \"vout\" : 0}],\n+                                           {self.address : coin[\"amount\"] - Decimal(\"0.999\")})\n+        tx_high_fee_signed = node.signrawtransactionwithkey(hexstring=tx_high_fee_raw, privkeys=self.privkeys)\n+        assert tx_high_fee_signed[\"complete\"]\n+        tx_high_fee = CTransaction()\n+        tx_high_fee.deserialize(BytesIO(hex_str_to_bytes(tx_high_fee_signed[\"hex\"])))\n+        testres_high_fee = node.testmempoolaccept([tx_high_fee_signed[\"hex\"]])\n+        assert_equal(testres_high_fee, [\n+            {\"txid\": tx_high_fee.rehash(), \"wtxid\": tx_high_fee.getwtxid(), \"allowed\": False, \"reject-reason\": \"max-fee-exceeded\"}\n+        ])\n+        testres_package_high_fee = node.testmempoolaccept(self.independent_txns_hex + [tx_high_fee_signed[\"hex\"]])\n+        assert_equal(testres_package_high_fee, self.independent_txns_testres + testres_high_fee)\n+\n+    def test_chain(self):\n+        node = self.nodes[0]\n+        first_coin = self.coins.pop()\n+\n+        # Chain of 25 transactions\n+        parent_locking_script = None\n+        txid = first_coin[\"txid\"]\n+        chain_hex = []\n+        chain_txns = []\n+        value = first_coin[\"amount\"]\n+\n+        for _ in range(25):\n+            value -= Decimal(\"0.0001\") # Deduct reasonable fee\n+            (tx, txhex, parent_locking_script) = self.chain_transaction(txid, value, 0, parent_locking_script)\n+            txid = tx.rehash()\n+            chain_hex.append(txhex)\n+            chain_txns.append(tx)\n+\n+        self.log.info(\"Check that testmempoolaccept requires packages to be sorted by dependency\")\n+        assert_equal(node.testmempoolaccept(rawtxs=chain_hex[::-1]),\n+                     [{\"txid\": tx.rehash(), \"wtxid\": tx.getwtxid()} for tx in chain_txns[::-1]])\n+\n+        self.log.info(\"Testmempoolaccept a chain of 25 transactions\")\n+        testres_multiple = node.testmempoolaccept(rawtxs=chain_hex)\n+\n+        testres_single = []\n+        # Test accept and then submit each one individually, which should be identical to package test accept\n+        for rawtx in chain_hex:\n+            testres = node.testmempoolaccept([rawtx])\n+            testres_single.append(testres[0])\n+            # Submit the transaction now so its child should have no problem validating\n+            node.sendrawtransaction(rawtx)\n+        assert_equal(testres_single, testres_multiple)\n+\n+        # Clean up by clearing the mempool\n+        node.generate(1)\n+\n+    def test_chain_limits_helper(self, mempool_count, package_count):\n+        node = self.nodes[0]\n+        first_coin = self.coins.pop()\n+        parent_locking_script = None\n+        txid = first_coin[\"txid\"]\n+        chain_hex = []\n+        chain_txns = []\n+        value = first_coin[\"amount\"]\n+\n+        for i in range(mempool_count + package_count):\n+            value -= Decimal(\"0.0001\") # Deduct reasonable fee\n+            (tx, txhex, parent_locking_script) = self.chain_transaction(txid, value, 0, parent_locking_script)\n+            txid = tx.rehash()\n+            if i < mempool_count:\n+                node.sendrawtransaction(txhex)\n+                assert_equal(node.getrawmempool(verbose=True)[txid][\"ancestorcount\"], i + 1)\n+            else:\n+                chain_hex.append(txhex)\n+                chain_txns.append(tx)\n+        testres_too_long = node.testmempoolaccept(rawtxs=chain_hex)\n+        for txres in testres_too_long:\n+            assert_equal(txres[\"reject-reason\"], \"too-long-mempool-chain\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=chain_hex)])\n+\n+    def test_chain_limits(self):\n+        \"\"\"Create chains from mempool and package transactions that are longer than 25,\n+        but only if both in-mempool and in-package transactions are considered together.\n+        This checks that both mempool and in-package transactions are taken into account when\n+        calculating ancestors/descendant limits.\n+        \"\"\"\n+        self.log.info(\"Check that in-package ancestors count for mempool ancestor limits\")\n+\n+        # 24 transactions in the mempool and 2 in the package. The parent in the package has\n+        # 24 in-mempool ancestors and 1 in-package descendant. The child has 0 direct parents\n+        # in the mempool, but 25 in-mempool and in-package ancestors in total.\n+        self.test_chain_limits_helper(24, 2)\n+        # 2 transactions in the mempool and 24 in the package.\n+        self.test_chain_limits_helper(2, 24)\n+        # 13 transactions in the mempool and 13 in the package.\n+        self.test_chain_limits_helper(13, 13)\n+\n+    def test_descendant_limits(self):\n+        \"\"\"Create an 'A' shaped package with 25 transactions in the mempool and 2 in the package:\n+                    M1\n+                   ^  ^\n+                 M2a  M2b\n+                .       .\n+               .         .\n+              .           .\n+             M11a          ^\n+            ^              M12b\n+           ^                 ^\n+          Pa                  Pb\n+        The top ancestor in the package exceeds descendant limits but only if the in-mempool and in-package\n+        descendants are all considered together (24 including in-mempool descendants and 26 including both\n+        package transactions).\n+        \"\"\"\n+        node = self.nodes[0]\n+        self.log.info(\"Check that in-mempool and in-package descendants are calculated properly in packages\")\n+        # Top parent in mempool, M1\n+        first_coin = self.coins.pop()\n+        parent_value = (first_coin[\"amount\"] - Decimal(\"0.0002\")) / 2 # Deduct reasonable fee and make 2 outputs\n+        inputs = [{\"txid\" : first_coin[\"txid\"], \"vout\" : 0}]\n+        outputs = [{self.address : parent_value}, {ADDRESS_BCRT1_P2WSH_OP_TRUE : parent_value}]\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+\n+        parent_signed = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n+        parent_tx = CTransaction()\n+        assert parent_signed[\"complete\"]\n+        parent_tx.deserialize(BytesIO(hex_str_to_bytes(parent_signed[\"hex\"])))\n+        parent_txid = parent_tx.rehash()\n+        node.sendrawtransaction(parent_signed[\"hex\"])\n+\n+        package_hex = []\n+\n+        # Chain A\n+        parent_locking_script = parent_tx.vout[0].scriptPubKey.hex()\n+        value = parent_value\n+        txid = parent_txid\n+        for i in range(12):\n+            value -= Decimal(\"0.0001\") # deduct reasonable fee\n+            (tx, txhex, parent_locking_script) = self.chain_transaction(txid, value, 0, parent_locking_script)\n+            txid = tx.rehash()\n+            if i < 11: # M2a... M11a\n+                node.sendrawtransaction(txhex)\n+            else: # Pa\n+                package_hex.append(txhex)\n+\n+        # Chain B\n+        value = parent_value - Decimal(\"0.0001\")\n+        rawtx_b = node.createrawtransaction([{\"txid\" : parent_txid, \"vout\" : 1}], {self.address : value})\n+        tx_child_b = CTransaction()\n+        tx_child_b.deserialize(BytesIO(hex_str_to_bytes(rawtx_b)))\n+        tx_child_b.wit.vtxinwit = [CTxInWitness()]\n+        tx_child_b.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n+        tx_child_b_hex = tx_child_b.serialize().hex()\n+        node.sendrawtransaction(tx_child_b_hex)\n+        parent_locking_script = tx_child_b.vout[0].scriptPubKey.hex()\n+        txid = tx_child_b.rehash()\n+        for i in range(12):\n+            value -= Decimal(\"0.0001\") # Deduct reasonable fee\n+            (tx, txhex, parent_locking_script) = self.chain_transaction(txid, value, 0, parent_locking_script)\n+            txid = tx.rehash()\n+            if i < 11: # M3b... M12b",
      "path": "test/functional/rpc_packages.py",
      "position": null,
      "original_position": 278,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "9ce7b0f3850a0d69e81a68f18906a9d1aa4356fb",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Again, I think this is miscounted.\r\n\r\nI think if you just change this to:\r\n\r\n```suggestion\r\n            if i < 11: # M2b... M12b\r\n```\r\n\r\nand the one above to `# M1a... M11a` and update the diagram, we're all good.",
      "created_at": "2021-04-23T11:56:12Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r619161307",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619161307"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 278,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619166084",
      "pull_request_review_id": 643022948,
      "id": 619166084,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTE2NjA4NA==",
      "diff_hunk": "@@ -0,0 +1,514 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"RPCs that handle raw transaction packages.\"\"\"\n+\n+from decimal import Decimal\n+from io import BytesIO\n+import random\n+\n+from test_framework.address import ADDRESS_BCRT1_P2WSH_OP_TRUE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    BIP125_SEQUENCE_NUMBER,\n+    COIN,\n+    CTransaction,\n+    CTxInWitness,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_TRUE,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+    hex_str_to_bytes,\n+)\n+\n+class RPCPackagesTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.privkeys = [node.get_deterministic_priv_key().key]\n+        self.address = node.get_deterministic_priv_key().address\n+        self.coins = []\n+        # The last 100 coinbase transactions are premature\n+        for b in node.generatetoaddress(200, self.address)[:100]:\n+            coinbase = node.getblock(blockhash=b, verbosity=2)[\"tx\"][0]\n+            self.coins.append({\n+                \"txid\": coinbase[\"txid\"],\n+                \"amount\": coinbase[\"vout\"][0][\"value\"],\n+                \"scriptPubKey\": coinbase[\"vout\"][0][\"scriptPubKey\"],\n+            })\n+\n+        # Create some transactions that can be reused throughout the test. Never submit these to mempool.\n+        self.independent_txns_hex = []\n+        self.independent_txns_testres = []\n+        for _ in range(3):\n+            coin = self.coins.pop()\n+            rawtx = node.createrawtransaction([{\"txid\" : coin[\"txid\"], \"vout\" : 0}],\n+                {self.address : coin[\"amount\"] - Decimal(\"0.0001\")})\n+            signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n+            assert signedtx[\"complete\"]\n+            testres = node.testmempoolaccept([signedtx[\"hex\"]])\n+            assert testres[0][\"allowed\"]\n+            self.independent_txns_hex.append(signedtx[\"hex\"])\n+            # testmempoolaccept returns a list of length one, avoid creating a 2D list\n+            self.independent_txns_testres.append(testres[0])\n+\n+        self.test_independent()\n+        self.test_chain()\n+        self.test_chain_limits()\n+        self.test_descendant_limits()\n+        self.test_ancestor_limits()\n+        self.test_multiple_children()\n+        self.test_multiple_parents()\n+        self.test_conflicting()\n+\n+    def chain_transaction(self, parent_txid, value, n=0, parent_locking_script=None):\n+        \"\"\"Build a transaction that spends parent_txid.vout[n] and produces one output with amount=value.\n+        Return tuple (CTransaction object, raw hex, scriptPubKey of the output created).\n+        \"\"\"\n+        node = self.nodes[0]\n+        inputs = [{\"txid\" : parent_txid, \"vout\" : n}]\n+        outputs = {self.address : value}\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+        prevtxs = [{\n+            \"txid\": parent_txid,\n+            \"vout\": n,\n+            \"scriptPubKey\": parent_locking_script,\n+            \"amount\": value + Decimal(\"0.0001\"),\n+        }] if parent_locking_script else None\n+        signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys, prevtxs=prevtxs)\n+        tx = CTransaction()\n+        assert signedtx[\"complete\"]\n+        tx.deserialize(BytesIO(hex_str_to_bytes(signedtx[\"hex\"])))\n+        return (tx, signedtx[\"hex\"], tx.vout[0].scriptPubKey.hex())\n+\n+    def test_independent(self):\n+        self.log.info(\"Test multiple independent transactions in a package\")\n+        node = self.nodes[0]\n+        assert_equal(self.independent_txns_testres, node.testmempoolaccept(rawtxs=self.independent_txns_hex))\n+\n+        self.log.info(\"Test an otherwise valid package with an extra garbage tx appended\")\n+        garbage_tx = node.createrawtransaction([{\"txid\": \"00\" * 32, \"vout\": 5}], {self.address: 1})\n+        tx = CTransaction()\n+        tx.deserialize(BytesIO(hex_str_to_bytes(garbage_tx)))\n+        testres_bad = node.testmempoolaccept(self.independent_txns_hex + [garbage_tx])\n+        testres_independent_ids = [{\"txid\": res[\"txid\"], \"wtxid\": res[\"wtxid\"]} for res in self.independent_txns_testres]\n+        assert_equal(testres_bad, testres_independent_ids + [\n+            {\"txid\": tx.rehash(), \"wtxid\": tx.getwtxid(), \"allowed\": False, \"reject-reason\": \"missing-inputs\"}\n+        ])\n+\n+        self.log.info(\"Check testmempoolaccept tells us when some transactions completed validation successfully\")\n+        coin = self.coins.pop()\n+        tx_bad_sig_hex = node.createrawtransaction([{\"txid\" : coin[\"txid\"], \"vout\" : 0}],\n+                                           {self.address : coin[\"amount\"] - Decimal(\"0.0001\")})\n+        tx_bad_sig = CTransaction()\n+        tx_bad_sig.deserialize(BytesIO(hex_str_to_bytes(tx_bad_sig_hex)))\n+        testres_bad_sig = node.testmempoolaccept(self.independent_txns_hex + [tx_bad_sig_hex])\n+        assert_equal(testres_bad_sig, self.independent_txns_testres + [{\n+            \"txid\": tx_bad_sig.rehash(),\n+            \"wtxid\": tx_bad_sig.getwtxid(), \"allowed\": False,\n+            \"reject-reason\": \"mandatory-script-verify-flag-failed (Operation not valid with the current stack size)\"\n+        }])\n+\n+        self.log.info(\"Check testmempoolaccept reports txns in packages that exceed max feerate\")\n+        coin = self.coins.pop()\n+        tx_high_fee_raw = node.createrawtransaction([{\"txid\" : coin[\"txid\"], \"vout\" : 0}],\n+                                           {self.address : coin[\"amount\"] - Decimal(\"0.999\")})\n+        tx_high_fee_signed = node.signrawtransactionwithkey(hexstring=tx_high_fee_raw, privkeys=self.privkeys)\n+        assert tx_high_fee_signed[\"complete\"]\n+        tx_high_fee = CTransaction()\n+        tx_high_fee.deserialize(BytesIO(hex_str_to_bytes(tx_high_fee_signed[\"hex\"])))\n+        testres_high_fee = node.testmempoolaccept([tx_high_fee_signed[\"hex\"]])\n+        assert_equal(testres_high_fee, [\n+            {\"txid\": tx_high_fee.rehash(), \"wtxid\": tx_high_fee.getwtxid(), \"allowed\": False, \"reject-reason\": \"max-fee-exceeded\"}\n+        ])\n+        testres_package_high_fee = node.testmempoolaccept(self.independent_txns_hex + [tx_high_fee_signed[\"hex\"]])\n+        assert_equal(testres_package_high_fee, self.independent_txns_testres + testres_high_fee)\n+\n+    def test_chain(self):\n+        node = self.nodes[0]\n+        first_coin = self.coins.pop()\n+\n+        # Chain of 25 transactions\n+        parent_locking_script = None\n+        txid = first_coin[\"txid\"]\n+        chain_hex = []\n+        chain_txns = []\n+        value = first_coin[\"amount\"]\n+\n+        for _ in range(25):\n+            value -= Decimal(\"0.0001\") # Deduct reasonable fee\n+            (tx, txhex, parent_locking_script) = self.chain_transaction(txid, value, 0, parent_locking_script)\n+            txid = tx.rehash()\n+            chain_hex.append(txhex)\n+            chain_txns.append(tx)\n+\n+        self.log.info(\"Check that testmempoolaccept requires packages to be sorted by dependency\")\n+        assert_equal(node.testmempoolaccept(rawtxs=chain_hex[::-1]),\n+                     [{\"txid\": tx.rehash(), \"wtxid\": tx.getwtxid()} for tx in chain_txns[::-1]])\n+\n+        self.log.info(\"Testmempoolaccept a chain of 25 transactions\")\n+        testres_multiple = node.testmempoolaccept(rawtxs=chain_hex)\n+\n+        testres_single = []\n+        # Test accept and then submit each one individually, which should be identical to package test accept\n+        for rawtx in chain_hex:\n+            testres = node.testmempoolaccept([rawtx])\n+            testres_single.append(testres[0])\n+            # Submit the transaction now so its child should have no problem validating\n+            node.sendrawtransaction(rawtx)\n+        assert_equal(testres_single, testres_multiple)\n+\n+        # Clean up by clearing the mempool\n+        node.generate(1)\n+\n+    def test_chain_limits_helper(self, mempool_count, package_count):\n+        node = self.nodes[0]\n+        first_coin = self.coins.pop()\n+        parent_locking_script = None\n+        txid = first_coin[\"txid\"]\n+        chain_hex = []\n+        chain_txns = []\n+        value = first_coin[\"amount\"]\n+\n+        for i in range(mempool_count + package_count):\n+            value -= Decimal(\"0.0001\") # Deduct reasonable fee\n+            (tx, txhex, parent_locking_script) = self.chain_transaction(txid, value, 0, parent_locking_script)\n+            txid = tx.rehash()\n+            if i < mempool_count:\n+                node.sendrawtransaction(txhex)\n+                assert_equal(node.getrawmempool(verbose=True)[txid][\"ancestorcount\"], i + 1)\n+            else:\n+                chain_hex.append(txhex)\n+                chain_txns.append(tx)\n+        testres_too_long = node.testmempoolaccept(rawtxs=chain_hex)\n+        for txres in testres_too_long:\n+            assert_equal(txres[\"reject-reason\"], \"too-long-mempool-chain\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=chain_hex)])\n+\n+    def test_chain_limits(self):\n+        \"\"\"Create chains from mempool and package transactions that are longer than 25,\n+        but only if both in-mempool and in-package transactions are considered together.\n+        This checks that both mempool and in-package transactions are taken into account when\n+        calculating ancestors/descendant limits.\n+        \"\"\"\n+        self.log.info(\"Check that in-package ancestors count for mempool ancestor limits\")\n+\n+        # 24 transactions in the mempool and 2 in the package. The parent in the package has\n+        # 24 in-mempool ancestors and 1 in-package descendant. The child has 0 direct parents\n+        # in the mempool, but 25 in-mempool and in-package ancestors in total.\n+        self.test_chain_limits_helper(24, 2)\n+        # 2 transactions in the mempool and 24 in the package.\n+        self.test_chain_limits_helper(2, 24)\n+        # 13 transactions in the mempool and 13 in the package.\n+        self.test_chain_limits_helper(13, 13)\n+\n+    def test_descendant_limits(self):\n+        \"\"\"Create an 'A' shaped package with 25 transactions in the mempool and 2 in the package:\n+                    M1\n+                   ^  ^\n+                 M2a  M2b\n+                .       .\n+               .         .\n+              .           .\n+             M11a          ^\n+            ^              M12b\n+           ^                 ^\n+          Pa                  Pb\n+        The top ancestor in the package exceeds descendant limits but only if the in-mempool and in-package\n+        descendants are all considered together (24 including in-mempool descendants and 26 including both\n+        package transactions).\n+        \"\"\"\n+        node = self.nodes[0]\n+        self.log.info(\"Check that in-mempool and in-package descendants are calculated properly in packages\")\n+        # Top parent in mempool, M1\n+        first_coin = self.coins.pop()\n+        parent_value = (first_coin[\"amount\"] - Decimal(\"0.0002\")) / 2 # Deduct reasonable fee and make 2 outputs\n+        inputs = [{\"txid\" : first_coin[\"txid\"], \"vout\" : 0}]\n+        outputs = [{self.address : parent_value}, {ADDRESS_BCRT1_P2WSH_OP_TRUE : parent_value}]\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+\n+        parent_signed = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n+        parent_tx = CTransaction()\n+        assert parent_signed[\"complete\"]\n+        parent_tx.deserialize(BytesIO(hex_str_to_bytes(parent_signed[\"hex\"])))\n+        parent_txid = parent_tx.rehash()\n+        node.sendrawtransaction(parent_signed[\"hex\"])\n+\n+        package_hex = []\n+\n+        # Chain A\n+        parent_locking_script = parent_tx.vout[0].scriptPubKey.hex()\n+        value = parent_value\n+        txid = parent_txid\n+        for i in range(12):\n+            value -= Decimal(\"0.0001\") # deduct reasonable fee\n+            (tx, txhex, parent_locking_script) = self.chain_transaction(txid, value, 0, parent_locking_script)\n+            txid = tx.rehash()\n+            if i < 11: # M2a... M11a\n+                node.sendrawtransaction(txhex)\n+            else: # Pa\n+                package_hex.append(txhex)\n+\n+        # Chain B\n+        value = parent_value - Decimal(\"0.0001\")\n+        rawtx_b = node.createrawtransaction([{\"txid\" : parent_txid, \"vout\" : 1}], {self.address : value})\n+        tx_child_b = CTransaction()\n+        tx_child_b.deserialize(BytesIO(hex_str_to_bytes(rawtx_b)))\n+        tx_child_b.wit.vtxinwit = [CTxInWitness()]\n+        tx_child_b.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n+        tx_child_b_hex = tx_child_b.serialize().hex()\n+        node.sendrawtransaction(tx_child_b_hex)\n+        parent_locking_script = tx_child_b.vout[0].scriptPubKey.hex()\n+        txid = tx_child_b.rehash()\n+        for i in range(12):\n+            value -= Decimal(\"0.0001\") # Deduct reasonable fee\n+            (tx, txhex, parent_locking_script) = self.chain_transaction(txid, value, 0, parent_locking_script)\n+            txid = tx.rehash()\n+            if i < 11: # M3b... M12b\n+                node.sendrawtransaction(txhex)\n+            else: # Pb\n+                package_hex.append(txhex)\n+\n+        testres_too_long = node.testmempoolaccept(rawtxs=package_hex)\n+        for txres in testres_too_long:\n+            assert_equal(txres[\"reject-reason\"], \"too-long-mempool-chain\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=package_hex)])",
      "path": "test/functional/rpc_packages.py",
      "position": null,
      "original_position": 289,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "9ce7b0f3850a0d69e81a68f18906a9d1aa4356fb",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is excellent!",
      "created_at": "2021-04-23T12:04:45Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r619166084",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619166084"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": 287,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 294,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619167508",
      "pull_request_review_id": 643022948,
      "id": 619167508,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTE2NzUwOA==",
      "diff_hunk": "@@ -0,0 +1,514 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"RPCs that handle raw transaction packages.\"\"\"\n+\n+from decimal import Decimal\n+from io import BytesIO\n+import random\n+\n+from test_framework.address import ADDRESS_BCRT1_P2WSH_OP_TRUE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    BIP125_SEQUENCE_NUMBER,\n+    COIN,\n+    CTransaction,\n+    CTxInWitness,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_TRUE,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+    hex_str_to_bytes,\n+)\n+\n+class RPCPackagesTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.privkeys = [node.get_deterministic_priv_key().key]\n+        self.address = node.get_deterministic_priv_key().address\n+        self.coins = []\n+        # The last 100 coinbase transactions are premature\n+        for b in node.generatetoaddress(200, self.address)[:100]:\n+            coinbase = node.getblock(blockhash=b, verbosity=2)[\"tx\"][0]\n+            self.coins.append({\n+                \"txid\": coinbase[\"txid\"],\n+                \"amount\": coinbase[\"vout\"][0][\"value\"],\n+                \"scriptPubKey\": coinbase[\"vout\"][0][\"scriptPubKey\"],\n+            })\n+\n+        # Create some transactions that can be reused throughout the test. Never submit these to mempool.\n+        self.independent_txns_hex = []\n+        self.independent_txns_testres = []\n+        for _ in range(3):\n+            coin = self.coins.pop()\n+            rawtx = node.createrawtransaction([{\"txid\" : coin[\"txid\"], \"vout\" : 0}],\n+                {self.address : coin[\"amount\"] - Decimal(\"0.0001\")})\n+            signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n+            assert signedtx[\"complete\"]\n+            testres = node.testmempoolaccept([signedtx[\"hex\"]])\n+            assert testres[0][\"allowed\"]\n+            self.independent_txns_hex.append(signedtx[\"hex\"])\n+            # testmempoolaccept returns a list of length one, avoid creating a 2D list\n+            self.independent_txns_testres.append(testres[0])\n+\n+        self.test_independent()\n+        self.test_chain()\n+        self.test_chain_limits()\n+        self.test_descendant_limits()\n+        self.test_ancestor_limits()\n+        self.test_multiple_children()\n+        self.test_multiple_parents()\n+        self.test_conflicting()\n+\n+    def chain_transaction(self, parent_txid, value, n=0, parent_locking_script=None):\n+        \"\"\"Build a transaction that spends parent_txid.vout[n] and produces one output with amount=value.\n+        Return tuple (CTransaction object, raw hex, scriptPubKey of the output created).\n+        \"\"\"\n+        node = self.nodes[0]\n+        inputs = [{\"txid\" : parent_txid, \"vout\" : n}]\n+        outputs = {self.address : value}\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+        prevtxs = [{\n+            \"txid\": parent_txid,\n+            \"vout\": n,\n+            \"scriptPubKey\": parent_locking_script,\n+            \"amount\": value + Decimal(\"0.0001\"),\n+        }] if parent_locking_script else None\n+        signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys, prevtxs=prevtxs)\n+        tx = CTransaction()\n+        assert signedtx[\"complete\"]\n+        tx.deserialize(BytesIO(hex_str_to_bytes(signedtx[\"hex\"])))\n+        return (tx, signedtx[\"hex\"], tx.vout[0].scriptPubKey.hex())\n+\n+    def test_independent(self):\n+        self.log.info(\"Test multiple independent transactions in a package\")\n+        node = self.nodes[0]\n+        assert_equal(self.independent_txns_testres, node.testmempoolaccept(rawtxs=self.independent_txns_hex))\n+\n+        self.log.info(\"Test an otherwise valid package with an extra garbage tx appended\")\n+        garbage_tx = node.createrawtransaction([{\"txid\": \"00\" * 32, \"vout\": 5}], {self.address: 1})\n+        tx = CTransaction()\n+        tx.deserialize(BytesIO(hex_str_to_bytes(garbage_tx)))\n+        testres_bad = node.testmempoolaccept(self.independent_txns_hex + [garbage_tx])\n+        testres_independent_ids = [{\"txid\": res[\"txid\"], \"wtxid\": res[\"wtxid\"]} for res in self.independent_txns_testres]\n+        assert_equal(testres_bad, testres_independent_ids + [\n+            {\"txid\": tx.rehash(), \"wtxid\": tx.getwtxid(), \"allowed\": False, \"reject-reason\": \"missing-inputs\"}\n+        ])\n+\n+        self.log.info(\"Check testmempoolaccept tells us when some transactions completed validation successfully\")\n+        coin = self.coins.pop()\n+        tx_bad_sig_hex = node.createrawtransaction([{\"txid\" : coin[\"txid\"], \"vout\" : 0}],\n+                                           {self.address : coin[\"amount\"] - Decimal(\"0.0001\")})\n+        tx_bad_sig = CTransaction()\n+        tx_bad_sig.deserialize(BytesIO(hex_str_to_bytes(tx_bad_sig_hex)))\n+        testres_bad_sig = node.testmempoolaccept(self.independent_txns_hex + [tx_bad_sig_hex])\n+        assert_equal(testres_bad_sig, self.independent_txns_testres + [{\n+            \"txid\": tx_bad_sig.rehash(),\n+            \"wtxid\": tx_bad_sig.getwtxid(), \"allowed\": False,\n+            \"reject-reason\": \"mandatory-script-verify-flag-failed (Operation not valid with the current stack size)\"\n+        }])\n+\n+        self.log.info(\"Check testmempoolaccept reports txns in packages that exceed max feerate\")\n+        coin = self.coins.pop()\n+        tx_high_fee_raw = node.createrawtransaction([{\"txid\" : coin[\"txid\"], \"vout\" : 0}],\n+                                           {self.address : coin[\"amount\"] - Decimal(\"0.999\")})\n+        tx_high_fee_signed = node.signrawtransactionwithkey(hexstring=tx_high_fee_raw, privkeys=self.privkeys)\n+        assert tx_high_fee_signed[\"complete\"]\n+        tx_high_fee = CTransaction()\n+        tx_high_fee.deserialize(BytesIO(hex_str_to_bytes(tx_high_fee_signed[\"hex\"])))\n+        testres_high_fee = node.testmempoolaccept([tx_high_fee_signed[\"hex\"]])\n+        assert_equal(testres_high_fee, [\n+            {\"txid\": tx_high_fee.rehash(), \"wtxid\": tx_high_fee.getwtxid(), \"allowed\": False, \"reject-reason\": \"max-fee-exceeded\"}\n+        ])\n+        testres_package_high_fee = node.testmempoolaccept(self.independent_txns_hex + [tx_high_fee_signed[\"hex\"]])\n+        assert_equal(testres_package_high_fee, self.independent_txns_testres + testres_high_fee)\n+\n+    def test_chain(self):\n+        node = self.nodes[0]\n+        first_coin = self.coins.pop()\n+\n+        # Chain of 25 transactions\n+        parent_locking_script = None\n+        txid = first_coin[\"txid\"]\n+        chain_hex = []\n+        chain_txns = []\n+        value = first_coin[\"amount\"]\n+\n+        for _ in range(25):\n+            value -= Decimal(\"0.0001\") # Deduct reasonable fee\n+            (tx, txhex, parent_locking_script) = self.chain_transaction(txid, value, 0, parent_locking_script)\n+            txid = tx.rehash()\n+            chain_hex.append(txhex)\n+            chain_txns.append(tx)\n+\n+        self.log.info(\"Check that testmempoolaccept requires packages to be sorted by dependency\")\n+        assert_equal(node.testmempoolaccept(rawtxs=chain_hex[::-1]),\n+                     [{\"txid\": tx.rehash(), \"wtxid\": tx.getwtxid()} for tx in chain_txns[::-1]])\n+\n+        self.log.info(\"Testmempoolaccept a chain of 25 transactions\")\n+        testres_multiple = node.testmempoolaccept(rawtxs=chain_hex)\n+\n+        testres_single = []\n+        # Test accept and then submit each one individually, which should be identical to package test accept\n+        for rawtx in chain_hex:\n+            testres = node.testmempoolaccept([rawtx])\n+            testres_single.append(testres[0])\n+            # Submit the transaction now so its child should have no problem validating\n+            node.sendrawtransaction(rawtx)\n+        assert_equal(testres_single, testres_multiple)\n+\n+        # Clean up by clearing the mempool\n+        node.generate(1)\n+\n+    def test_chain_limits_helper(self, mempool_count, package_count):\n+        node = self.nodes[0]\n+        first_coin = self.coins.pop()\n+        parent_locking_script = None\n+        txid = first_coin[\"txid\"]\n+        chain_hex = []\n+        chain_txns = []\n+        value = first_coin[\"amount\"]\n+\n+        for i in range(mempool_count + package_count):\n+            value -= Decimal(\"0.0001\") # Deduct reasonable fee\n+            (tx, txhex, parent_locking_script) = self.chain_transaction(txid, value, 0, parent_locking_script)\n+            txid = tx.rehash()\n+            if i < mempool_count:\n+                node.sendrawtransaction(txhex)\n+                assert_equal(node.getrawmempool(verbose=True)[txid][\"ancestorcount\"], i + 1)\n+            else:\n+                chain_hex.append(txhex)\n+                chain_txns.append(tx)\n+        testres_too_long = node.testmempoolaccept(rawtxs=chain_hex)\n+        for txres in testres_too_long:\n+            assert_equal(txres[\"reject-reason\"], \"too-long-mempool-chain\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=chain_hex)])\n+\n+    def test_chain_limits(self):\n+        \"\"\"Create chains from mempool and package transactions that are longer than 25,\n+        but only if both in-mempool and in-package transactions are considered together.\n+        This checks that both mempool and in-package transactions are taken into account when\n+        calculating ancestors/descendant limits.\n+        \"\"\"\n+        self.log.info(\"Check that in-package ancestors count for mempool ancestor limits\")\n+\n+        # 24 transactions in the mempool and 2 in the package. The parent in the package has\n+        # 24 in-mempool ancestors and 1 in-package descendant. The child has 0 direct parents\n+        # in the mempool, but 25 in-mempool and in-package ancestors in total.\n+        self.test_chain_limits_helper(24, 2)\n+        # 2 transactions in the mempool and 24 in the package.\n+        self.test_chain_limits_helper(2, 24)\n+        # 13 transactions in the mempool and 13 in the package.\n+        self.test_chain_limits_helper(13, 13)\n+\n+    def test_descendant_limits(self):\n+        \"\"\"Create an 'A' shaped package with 25 transactions in the mempool and 2 in the package:\n+                    M1\n+                   ^  ^\n+                 M2a  M2b\n+                .       .\n+               .         .\n+              .           .\n+             M11a          ^\n+            ^              M12b\n+           ^                 ^\n+          Pa                  Pb\n+        The top ancestor in the package exceeds descendant limits but only if the in-mempool and in-package\n+        descendants are all considered together (24 including in-mempool descendants and 26 including both\n+        package transactions).\n+        \"\"\"\n+        node = self.nodes[0]\n+        self.log.info(\"Check that in-mempool and in-package descendants are calculated properly in packages\")\n+        # Top parent in mempool, M1\n+        first_coin = self.coins.pop()\n+        parent_value = (first_coin[\"amount\"] - Decimal(\"0.0002\")) / 2 # Deduct reasonable fee and make 2 outputs\n+        inputs = [{\"txid\" : first_coin[\"txid\"], \"vout\" : 0}]\n+        outputs = [{self.address : parent_value}, {ADDRESS_BCRT1_P2WSH_OP_TRUE : parent_value}]\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+\n+        parent_signed = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n+        parent_tx = CTransaction()\n+        assert parent_signed[\"complete\"]\n+        parent_tx.deserialize(BytesIO(hex_str_to_bytes(parent_signed[\"hex\"])))\n+        parent_txid = parent_tx.rehash()\n+        node.sendrawtransaction(parent_signed[\"hex\"])\n+\n+        package_hex = []\n+\n+        # Chain A\n+        parent_locking_script = parent_tx.vout[0].scriptPubKey.hex()\n+        value = parent_value\n+        txid = parent_txid\n+        for i in range(12):\n+            value -= Decimal(\"0.0001\") # deduct reasonable fee\n+            (tx, txhex, parent_locking_script) = self.chain_transaction(txid, value, 0, parent_locking_script)\n+            txid = tx.rehash()\n+            if i < 11: # M2a... M11a\n+                node.sendrawtransaction(txhex)\n+            else: # Pa\n+                package_hex.append(txhex)\n+\n+        # Chain B\n+        value = parent_value - Decimal(\"0.0001\")\n+        rawtx_b = node.createrawtransaction([{\"txid\" : parent_txid, \"vout\" : 1}], {self.address : value})\n+        tx_child_b = CTransaction()\n+        tx_child_b.deserialize(BytesIO(hex_str_to_bytes(rawtx_b)))\n+        tx_child_b.wit.vtxinwit = [CTxInWitness()]\n+        tx_child_b.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n+        tx_child_b_hex = tx_child_b.serialize().hex()\n+        node.sendrawtransaction(tx_child_b_hex)\n+        parent_locking_script = tx_child_b.vout[0].scriptPubKey.hex()\n+        txid = tx_child_b.rehash()\n+        for i in range(12):\n+            value -= Decimal(\"0.0001\") # Deduct reasonable fee\n+            (tx, txhex, parent_locking_script) = self.chain_transaction(txid, value, 0, parent_locking_script)\n+            txid = tx.rehash()\n+            if i < 11: # M3b... M12b\n+                node.sendrawtransaction(txhex)\n+            else: # Pb\n+                package_hex.append(txhex)\n+\n+        testres_too_long = node.testmempoolaccept(rawtxs=package_hex)\n+        for txres in testres_too_long:\n+            assert_equal(txres[\"reject-reason\"], \"too-long-mempool-chain\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=package_hex)])\n+\n+    def create_child_with_parents(self, parents_tx, values, locking_scripts):\n+        \"\"\"Creates a transaction that spends the first output of each parent in parents_tx.\"\"\"\n+        num_parents = len(parents_tx)\n+        total_value = sum(values)\n+        inputs = [{\"txid\" : tx.rehash(), \"vout\" : 0} for tx in parents_tx]\n+        outputs = {self.address : total_value - num_parents * Decimal(\"0.0001\")}\n+        rawtx_child = self.nodes[0].createrawtransaction(inputs, outputs)\n+        prevtxs = []\n+        for i in range(num_parents):\n+            prevtxs.append({\"txid\": parents_tx[i].rehash(), \"vout\" : 0, \"scriptPubKey\" : locking_scripts[i], \"amount\" : values[i]})\n+        signedtx_child = self.nodes[0].signrawtransactionwithkey(hexstring=rawtx_child, privkeys=self.privkeys, prevtxs=prevtxs)\n+        assert signedtx_child[\"complete\"]\n+        return signedtx_child[\"hex\"]\n+\n+    def test_ancestor_limits(self):\n+        \"\"\"Create a 'V' shaped chain with 24 transactions in the mempool and 3 in the package:\n+        M1a                    M1b\n+         ^                     ^\n+          M2a                M2b\n+           .                 .\n+            .               .\n+             .             .\n+             M12a        M12b\n+               ^         ^\n+                Pa     Pb\n+                 ^    ^\n+                   Pc\n+        The lowest descendant, Pc, exceeds ancestor limits, but only if the in-mempool\n+        and in-package ancestors are all considered together.\n+        \"\"\"\n+        node = self.nodes[0]\n+        package_hex = []\n+        parents_tx = []\n+        values = []\n+        parent_locking_scripts = []\n+\n+        self.log.info(\"Check that in-mempool and in-package ancestors are calculated properly in packages\")\n+\n+        # Two chains of 13 transactions each\n+        for _ in range(2):\n+            parent_locking_script = None\n+            top_coin = self.coins.pop()\n+            txid = top_coin[\"txid\"]\n+            value = top_coin[\"amount\"]\n+            for i in range(13):\n+                value -= Decimal(\"0.0001\") # Deduct reasonable fee\n+                (tx, txhex, parent_locking_script) = self.chain_transaction(txid, value, 0, parent_locking_script)\n+                txid = tx.rehash()\n+                if i < 12:\n+                    node.sendrawtransaction(txhex)\n+                else: # Save the 13th transaction for the package\n+                    package_hex.append(txhex)\n+                    parents_tx.append(tx)\n+                    parent_locking_scripts.append(parent_locking_script)\n+                    values.append(value)\n+\n+        # Child Pc\n+        child_hex = self.create_child_with_parents(parents_tx, values, parent_locking_scripts)\n+        package_hex.append(child_hex)\n+\n+        testres_too_long = node.testmempoolaccept(rawtxs=package_hex)\n+        for txres in testres_too_long:\n+            assert_equal(txres[\"reject-reason\"], \"too-long-mempool-chain\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=package_hex)])\n+\n+    def test_multiple_children(self):\n+        node = self.nodes[0]\n+\n+        self.log.info(\"Testmempoolaccept a package in which a transaction has two children within the package\")\n+        first_coin = self.coins.pop()\n+        value = (first_coin[\"amount\"] - Decimal(\"0.0002\")) / 2 # Deduct reasonable fee and make 2 outputs\n+        inputs = [{\"txid\" : first_coin[\"txid\"], \"vout\" : 0}]\n+        outputs = [{self.address : value}, {ADDRESS_BCRT1_P2WSH_OP_TRUE : value}]\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+\n+        parent_signed = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n+        parent_tx = CTransaction()\n+        assert parent_signed[\"complete\"]\n+        parent_tx.deserialize(BytesIO(hex_str_to_bytes(parent_signed[\"hex\"])))\n+        parent_txid = parent_tx.rehash()\n+        assert node.testmempoolaccept([parent_signed[\"hex\"]])[0][\"allowed\"]\n+\n+        parent_locking_script_a = parent_tx.vout[0].scriptPubKey.hex()\n+        child_value = value - Decimal(\"0.0001\")\n+\n+        # Child A\n+        (_, tx_child_a_hex, _) = self.chain_transaction(parent_txid, child_value, 0, parent_locking_script_a)\n+        assert not node.testmempoolaccept([tx_child_a_hex])[0][\"allowed\"]\n+\n+        # Child B\n+        rawtx_b = node.createrawtransaction([{\"txid\" : parent_txid, \"vout\" : 1}], {self.address : child_value})\n+        tx_child_b = CTransaction()\n+        tx_child_b.deserialize(BytesIO(hex_str_to_bytes(rawtx_b)))\n+        tx_child_b.wit.vtxinwit = [CTxInWitness()]\n+        tx_child_b.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n+        tx_child_b_hex = tx_child_b.serialize().hex()\n+        assert not node.testmempoolaccept([tx_child_b_hex])[0][\"allowed\"]\n+\n+        self.log.info(\"Testmempoolaccept with entire package, should work with children in either order\")\n+        testres_multiple_ab = node.testmempoolaccept(rawtxs=[parent_signed[\"hex\"], tx_child_a_hex, tx_child_b_hex])\n+        testres_multiple_ba = node.testmempoolaccept(rawtxs=[parent_signed[\"hex\"], tx_child_b_hex, tx_child_a_hex])\n+        assert all([testres[\"allowed\"] for testres in testres_multiple_ab + testres_multiple_ba])\n+\n+        testres_single = []\n+        # Test accept and then submit each one individually, which should be identical to package testaccept\n+        for rawtx in [parent_signed[\"hex\"], tx_child_a_hex, tx_child_b_hex]:\n+            testres = node.testmempoolaccept([rawtx])\n+            testres_single.append(testres[0])\n+            # Submit the transaction now so its child should have no problem validating\n+            node.sendrawtransaction(rawtx)\n+        assert_equal(testres_single, testres_multiple_ab)\n+\n+    def test_multiple_parents(self):\n+        node = self.nodes[0]\n+\n+        self.log.info(\"Testmempoolaccept a package in which a transaction has multiple parents within the package\")\n+        for num_parents in [2, 10, 24]:\n+            # Test a package with num_parents parents and 1 child transaction.\n+            package_hex = []\n+            parents_tx = []\n+            values = []\n+            parent_locking_scripts = []\n+            for _ in range(num_parents):\n+                parent_coin = self.coins.pop()\n+                value = parent_coin[\"amount\"] - Decimal(\"0.0001\") # Deduct reasonable fee\n+                (tx, txhex, parent_locking_script) = self.chain_transaction(parent_coin[\"txid\"], value)\n+                package_hex.append(txhex)\n+                parents_tx.append(tx)\n+                values.append(value)\n+                parent_locking_scripts.append(parent_locking_script)\n+            child_hex = self.create_child_with_parents(parents_tx, values, parent_locking_scripts)\n+            # Package accept should work with the parents in any order (as long as parents come before child)\n+            random.shuffle(package_hex)",
      "path": "test/functional/rpc_packages.py",
      "position": null,
      "original_position": 426,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "9ce7b0f3850a0d69e81a68f18906a9d1aa4356fb",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Perhaps shuffle and test acceptance a few times?",
      "created_at": "2021-04-23T12:07:21Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r619167508",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619167508"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 426,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619168203",
      "pull_request_review_id": 643022948,
      "id": 619168203,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTE2ODIwMw==",
      "diff_hunk": "@@ -0,0 +1,514 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"RPCs that handle raw transaction packages.\"\"\"\n+\n+from decimal import Decimal\n+from io import BytesIO\n+import random\n+\n+from test_framework.address import ADDRESS_BCRT1_P2WSH_OP_TRUE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    BIP125_SEQUENCE_NUMBER,\n+    COIN,\n+    CTransaction,\n+    CTxInWitness,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_TRUE,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+    hex_str_to_bytes,\n+)\n+\n+class RPCPackagesTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.privkeys = [node.get_deterministic_priv_key().key]\n+        self.address = node.get_deterministic_priv_key().address\n+        self.coins = []\n+        # The last 100 coinbase transactions are premature\n+        for b in node.generatetoaddress(200, self.address)[:100]:\n+            coinbase = node.getblock(blockhash=b, verbosity=2)[\"tx\"][0]\n+            self.coins.append({\n+                \"txid\": coinbase[\"txid\"],\n+                \"amount\": coinbase[\"vout\"][0][\"value\"],\n+                \"scriptPubKey\": coinbase[\"vout\"][0][\"scriptPubKey\"],\n+            })\n+\n+        # Create some transactions that can be reused throughout the test. Never submit these to mempool.\n+        self.independent_txns_hex = []\n+        self.independent_txns_testres = []\n+        for _ in range(3):\n+            coin = self.coins.pop()\n+            rawtx = node.createrawtransaction([{\"txid\" : coin[\"txid\"], \"vout\" : 0}],\n+                {self.address : coin[\"amount\"] - Decimal(\"0.0001\")})\n+            signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n+            assert signedtx[\"complete\"]\n+            testres = node.testmempoolaccept([signedtx[\"hex\"]])\n+            assert testres[0][\"allowed\"]\n+            self.independent_txns_hex.append(signedtx[\"hex\"])\n+            # testmempoolaccept returns a list of length one, avoid creating a 2D list\n+            self.independent_txns_testres.append(testres[0])\n+\n+        self.test_independent()\n+        self.test_chain()\n+        self.test_chain_limits()\n+        self.test_descendant_limits()\n+        self.test_ancestor_limits()\n+        self.test_multiple_children()\n+        self.test_multiple_parents()\n+        self.test_conflicting()\n+\n+    def chain_transaction(self, parent_txid, value, n=0, parent_locking_script=None):\n+        \"\"\"Build a transaction that spends parent_txid.vout[n] and produces one output with amount=value.\n+        Return tuple (CTransaction object, raw hex, scriptPubKey of the output created).\n+        \"\"\"\n+        node = self.nodes[0]\n+        inputs = [{\"txid\" : parent_txid, \"vout\" : n}]\n+        outputs = {self.address : value}\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+        prevtxs = [{\n+            \"txid\": parent_txid,\n+            \"vout\": n,\n+            \"scriptPubKey\": parent_locking_script,\n+            \"amount\": value + Decimal(\"0.0001\"),\n+        }] if parent_locking_script else None\n+        signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys, prevtxs=prevtxs)\n+        tx = CTransaction()\n+        assert signedtx[\"complete\"]\n+        tx.deserialize(BytesIO(hex_str_to_bytes(signedtx[\"hex\"])))\n+        return (tx, signedtx[\"hex\"], tx.vout[0].scriptPubKey.hex())\n+\n+    def test_independent(self):\n+        self.log.info(\"Test multiple independent transactions in a package\")\n+        node = self.nodes[0]\n+        assert_equal(self.independent_txns_testres, node.testmempoolaccept(rawtxs=self.independent_txns_hex))\n+\n+        self.log.info(\"Test an otherwise valid package with an extra garbage tx appended\")\n+        garbage_tx = node.createrawtransaction([{\"txid\": \"00\" * 32, \"vout\": 5}], {self.address: 1})\n+        tx = CTransaction()\n+        tx.deserialize(BytesIO(hex_str_to_bytes(garbage_tx)))\n+        testres_bad = node.testmempoolaccept(self.independent_txns_hex + [garbage_tx])\n+        testres_independent_ids = [{\"txid\": res[\"txid\"], \"wtxid\": res[\"wtxid\"]} for res in self.independent_txns_testres]\n+        assert_equal(testres_bad, testres_independent_ids + [\n+            {\"txid\": tx.rehash(), \"wtxid\": tx.getwtxid(), \"allowed\": False, \"reject-reason\": \"missing-inputs\"}\n+        ])\n+\n+        self.log.info(\"Check testmempoolaccept tells us when some transactions completed validation successfully\")\n+        coin = self.coins.pop()\n+        tx_bad_sig_hex = node.createrawtransaction([{\"txid\" : coin[\"txid\"], \"vout\" : 0}],\n+                                           {self.address : coin[\"amount\"] - Decimal(\"0.0001\")})\n+        tx_bad_sig = CTransaction()\n+        tx_bad_sig.deserialize(BytesIO(hex_str_to_bytes(tx_bad_sig_hex)))\n+        testres_bad_sig = node.testmempoolaccept(self.independent_txns_hex + [tx_bad_sig_hex])\n+        assert_equal(testres_bad_sig, self.independent_txns_testres + [{\n+            \"txid\": tx_bad_sig.rehash(),\n+            \"wtxid\": tx_bad_sig.getwtxid(), \"allowed\": False,\n+            \"reject-reason\": \"mandatory-script-verify-flag-failed (Operation not valid with the current stack size)\"\n+        }])\n+\n+        self.log.info(\"Check testmempoolaccept reports txns in packages that exceed max feerate\")\n+        coin = self.coins.pop()\n+        tx_high_fee_raw = node.createrawtransaction([{\"txid\" : coin[\"txid\"], \"vout\" : 0}],\n+                                           {self.address : coin[\"amount\"] - Decimal(\"0.999\")})\n+        tx_high_fee_signed = node.signrawtransactionwithkey(hexstring=tx_high_fee_raw, privkeys=self.privkeys)\n+        assert tx_high_fee_signed[\"complete\"]\n+        tx_high_fee = CTransaction()\n+        tx_high_fee.deserialize(BytesIO(hex_str_to_bytes(tx_high_fee_signed[\"hex\"])))\n+        testres_high_fee = node.testmempoolaccept([tx_high_fee_signed[\"hex\"]])\n+        assert_equal(testres_high_fee, [\n+            {\"txid\": tx_high_fee.rehash(), \"wtxid\": tx_high_fee.getwtxid(), \"allowed\": False, \"reject-reason\": \"max-fee-exceeded\"}\n+        ])\n+        testres_package_high_fee = node.testmempoolaccept(self.independent_txns_hex + [tx_high_fee_signed[\"hex\"]])\n+        assert_equal(testres_package_high_fee, self.independent_txns_testres + testres_high_fee)\n+\n+    def test_chain(self):\n+        node = self.nodes[0]\n+        first_coin = self.coins.pop()\n+\n+        # Chain of 25 transactions\n+        parent_locking_script = None\n+        txid = first_coin[\"txid\"]\n+        chain_hex = []\n+        chain_txns = []\n+        value = first_coin[\"amount\"]\n+\n+        for _ in range(25):\n+            value -= Decimal(\"0.0001\") # Deduct reasonable fee\n+            (tx, txhex, parent_locking_script) = self.chain_transaction(txid, value, 0, parent_locking_script)\n+            txid = tx.rehash()\n+            chain_hex.append(txhex)\n+            chain_txns.append(tx)\n+\n+        self.log.info(\"Check that testmempoolaccept requires packages to be sorted by dependency\")\n+        assert_equal(node.testmempoolaccept(rawtxs=chain_hex[::-1]),\n+                     [{\"txid\": tx.rehash(), \"wtxid\": tx.getwtxid()} for tx in chain_txns[::-1]])\n+\n+        self.log.info(\"Testmempoolaccept a chain of 25 transactions\")\n+        testres_multiple = node.testmempoolaccept(rawtxs=chain_hex)\n+\n+        testres_single = []\n+        # Test accept and then submit each one individually, which should be identical to package test accept\n+        for rawtx in chain_hex:\n+            testres = node.testmempoolaccept([rawtx])\n+            testres_single.append(testres[0])\n+            # Submit the transaction now so its child should have no problem validating\n+            node.sendrawtransaction(rawtx)\n+        assert_equal(testres_single, testres_multiple)\n+\n+        # Clean up by clearing the mempool\n+        node.generate(1)\n+\n+    def test_chain_limits_helper(self, mempool_count, package_count):\n+        node = self.nodes[0]\n+        first_coin = self.coins.pop()\n+        parent_locking_script = None\n+        txid = first_coin[\"txid\"]\n+        chain_hex = []\n+        chain_txns = []\n+        value = first_coin[\"amount\"]\n+\n+        for i in range(mempool_count + package_count):\n+            value -= Decimal(\"0.0001\") # Deduct reasonable fee\n+            (tx, txhex, parent_locking_script) = self.chain_transaction(txid, value, 0, parent_locking_script)\n+            txid = tx.rehash()\n+            if i < mempool_count:\n+                node.sendrawtransaction(txhex)\n+                assert_equal(node.getrawmempool(verbose=True)[txid][\"ancestorcount\"], i + 1)\n+            else:\n+                chain_hex.append(txhex)\n+                chain_txns.append(tx)\n+        testres_too_long = node.testmempoolaccept(rawtxs=chain_hex)\n+        for txres in testres_too_long:\n+            assert_equal(txres[\"reject-reason\"], \"too-long-mempool-chain\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=chain_hex)])\n+\n+    def test_chain_limits(self):\n+        \"\"\"Create chains from mempool and package transactions that are longer than 25,\n+        but only if both in-mempool and in-package transactions are considered together.\n+        This checks that both mempool and in-package transactions are taken into account when\n+        calculating ancestors/descendant limits.\n+        \"\"\"\n+        self.log.info(\"Check that in-package ancestors count for mempool ancestor limits\")\n+\n+        # 24 transactions in the mempool and 2 in the package. The parent in the package has\n+        # 24 in-mempool ancestors and 1 in-package descendant. The child has 0 direct parents\n+        # in the mempool, but 25 in-mempool and in-package ancestors in total.\n+        self.test_chain_limits_helper(24, 2)\n+        # 2 transactions in the mempool and 24 in the package.\n+        self.test_chain_limits_helper(2, 24)\n+        # 13 transactions in the mempool and 13 in the package.\n+        self.test_chain_limits_helper(13, 13)\n+\n+    def test_descendant_limits(self):\n+        \"\"\"Create an 'A' shaped package with 25 transactions in the mempool and 2 in the package:\n+                    M1\n+                   ^  ^\n+                 M2a  M2b\n+                .       .\n+               .         .\n+              .           .\n+             M11a          ^\n+            ^              M12b\n+           ^                 ^\n+          Pa                  Pb\n+        The top ancestor in the package exceeds descendant limits but only if the in-mempool and in-package\n+        descendants are all considered together (24 including in-mempool descendants and 26 including both\n+        package transactions).\n+        \"\"\"\n+        node = self.nodes[0]\n+        self.log.info(\"Check that in-mempool and in-package descendants are calculated properly in packages\")\n+        # Top parent in mempool, M1\n+        first_coin = self.coins.pop()\n+        parent_value = (first_coin[\"amount\"] - Decimal(\"0.0002\")) / 2 # Deduct reasonable fee and make 2 outputs\n+        inputs = [{\"txid\" : first_coin[\"txid\"], \"vout\" : 0}]\n+        outputs = [{self.address : parent_value}, {ADDRESS_BCRT1_P2WSH_OP_TRUE : parent_value}]\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+\n+        parent_signed = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n+        parent_tx = CTransaction()\n+        assert parent_signed[\"complete\"]\n+        parent_tx.deserialize(BytesIO(hex_str_to_bytes(parent_signed[\"hex\"])))\n+        parent_txid = parent_tx.rehash()\n+        node.sendrawtransaction(parent_signed[\"hex\"])\n+\n+        package_hex = []\n+\n+        # Chain A\n+        parent_locking_script = parent_tx.vout[0].scriptPubKey.hex()\n+        value = parent_value\n+        txid = parent_txid\n+        for i in range(12):\n+            value -= Decimal(\"0.0001\") # deduct reasonable fee\n+            (tx, txhex, parent_locking_script) = self.chain_transaction(txid, value, 0, parent_locking_script)\n+            txid = tx.rehash()\n+            if i < 11: # M2a... M11a\n+                node.sendrawtransaction(txhex)\n+            else: # Pa\n+                package_hex.append(txhex)\n+\n+        # Chain B\n+        value = parent_value - Decimal(\"0.0001\")\n+        rawtx_b = node.createrawtransaction([{\"txid\" : parent_txid, \"vout\" : 1}], {self.address : value})\n+        tx_child_b = CTransaction()\n+        tx_child_b.deserialize(BytesIO(hex_str_to_bytes(rawtx_b)))\n+        tx_child_b.wit.vtxinwit = [CTxInWitness()]\n+        tx_child_b.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n+        tx_child_b_hex = tx_child_b.serialize().hex()\n+        node.sendrawtransaction(tx_child_b_hex)\n+        parent_locking_script = tx_child_b.vout[0].scriptPubKey.hex()\n+        txid = tx_child_b.rehash()\n+        for i in range(12):\n+            value -= Decimal(\"0.0001\") # Deduct reasonable fee\n+            (tx, txhex, parent_locking_script) = self.chain_transaction(txid, value, 0, parent_locking_script)\n+            txid = tx.rehash()\n+            if i < 11: # M3b... M12b\n+                node.sendrawtransaction(txhex)\n+            else: # Pb\n+                package_hex.append(txhex)\n+\n+        testres_too_long = node.testmempoolaccept(rawtxs=package_hex)\n+        for txres in testres_too_long:\n+            assert_equal(txres[\"reject-reason\"], \"too-long-mempool-chain\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=package_hex)])\n+\n+    def create_child_with_parents(self, parents_tx, values, locking_scripts):\n+        \"\"\"Creates a transaction that spends the first output of each parent in parents_tx.\"\"\"\n+        num_parents = len(parents_tx)\n+        total_value = sum(values)\n+        inputs = [{\"txid\" : tx.rehash(), \"vout\" : 0} for tx in parents_tx]\n+        outputs = {self.address : total_value - num_parents * Decimal(\"0.0001\")}\n+        rawtx_child = self.nodes[0].createrawtransaction(inputs, outputs)\n+        prevtxs = []\n+        for i in range(num_parents):\n+            prevtxs.append({\"txid\": parents_tx[i].rehash(), \"vout\" : 0, \"scriptPubKey\" : locking_scripts[i], \"amount\" : values[i]})\n+        signedtx_child = self.nodes[0].signrawtransactionwithkey(hexstring=rawtx_child, privkeys=self.privkeys, prevtxs=prevtxs)\n+        assert signedtx_child[\"complete\"]\n+        return signedtx_child[\"hex\"]\n+\n+    def test_ancestor_limits(self):\n+        \"\"\"Create a 'V' shaped chain with 24 transactions in the mempool and 3 in the package:\n+        M1a                    M1b\n+         ^                     ^\n+          M2a                M2b\n+           .                 .\n+            .               .\n+             .             .\n+             M12a        M12b\n+               ^         ^\n+                Pa     Pb\n+                 ^    ^\n+                   Pc\n+        The lowest descendant, Pc, exceeds ancestor limits, but only if the in-mempool\n+        and in-package ancestors are all considered together.\n+        \"\"\"\n+        node = self.nodes[0]\n+        package_hex = []\n+        parents_tx = []\n+        values = []\n+        parent_locking_scripts = []\n+\n+        self.log.info(\"Check that in-mempool and in-package ancestors are calculated properly in packages\")\n+\n+        # Two chains of 13 transactions each\n+        for _ in range(2):\n+            parent_locking_script = None\n+            top_coin = self.coins.pop()\n+            txid = top_coin[\"txid\"]\n+            value = top_coin[\"amount\"]\n+            for i in range(13):\n+                value -= Decimal(\"0.0001\") # Deduct reasonable fee\n+                (tx, txhex, parent_locking_script) = self.chain_transaction(txid, value, 0, parent_locking_script)\n+                txid = tx.rehash()\n+                if i < 12:\n+                    node.sendrawtransaction(txhex)\n+                else: # Save the 13th transaction for the package\n+                    package_hex.append(txhex)\n+                    parents_tx.append(tx)\n+                    parent_locking_scripts.append(parent_locking_script)\n+                    values.append(value)\n+\n+        # Child Pc\n+        child_hex = self.create_child_with_parents(parents_tx, values, parent_locking_scripts)\n+        package_hex.append(child_hex)\n+\n+        testres_too_long = node.testmempoolaccept(rawtxs=package_hex)\n+        for txres in testres_too_long:\n+            assert_equal(txres[\"reject-reason\"], \"too-long-mempool-chain\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=package_hex)])\n+\n+    def test_multiple_children(self):\n+        node = self.nodes[0]\n+\n+        self.log.info(\"Testmempoolaccept a package in which a transaction has two children within the package\")\n+        first_coin = self.coins.pop()\n+        value = (first_coin[\"amount\"] - Decimal(\"0.0002\")) / 2 # Deduct reasonable fee and make 2 outputs\n+        inputs = [{\"txid\" : first_coin[\"txid\"], \"vout\" : 0}]\n+        outputs = [{self.address : value}, {ADDRESS_BCRT1_P2WSH_OP_TRUE : value}]\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+\n+        parent_signed = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n+        parent_tx = CTransaction()\n+        assert parent_signed[\"complete\"]\n+        parent_tx.deserialize(BytesIO(hex_str_to_bytes(parent_signed[\"hex\"])))\n+        parent_txid = parent_tx.rehash()\n+        assert node.testmempoolaccept([parent_signed[\"hex\"]])[0][\"allowed\"]\n+\n+        parent_locking_script_a = parent_tx.vout[0].scriptPubKey.hex()\n+        child_value = value - Decimal(\"0.0001\")\n+\n+        # Child A\n+        (_, tx_child_a_hex, _) = self.chain_transaction(parent_txid, child_value, 0, parent_locking_script_a)\n+        assert not node.testmempoolaccept([tx_child_a_hex])[0][\"allowed\"]\n+\n+        # Child B\n+        rawtx_b = node.createrawtransaction([{\"txid\" : parent_txid, \"vout\" : 1}], {self.address : child_value})\n+        tx_child_b = CTransaction()\n+        tx_child_b.deserialize(BytesIO(hex_str_to_bytes(rawtx_b)))\n+        tx_child_b.wit.vtxinwit = [CTxInWitness()]\n+        tx_child_b.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n+        tx_child_b_hex = tx_child_b.serialize().hex()\n+        assert not node.testmempoolaccept([tx_child_b_hex])[0][\"allowed\"]\n+\n+        self.log.info(\"Testmempoolaccept with entire package, should work with children in either order\")\n+        testres_multiple_ab = node.testmempoolaccept(rawtxs=[parent_signed[\"hex\"], tx_child_a_hex, tx_child_b_hex])\n+        testres_multiple_ba = node.testmempoolaccept(rawtxs=[parent_signed[\"hex\"], tx_child_b_hex, tx_child_a_hex])\n+        assert all([testres[\"allowed\"] for testres in testres_multiple_ab + testres_multiple_ba])\n+\n+        testres_single = []\n+        # Test accept and then submit each one individually, which should be identical to package testaccept\n+        for rawtx in [parent_signed[\"hex\"], tx_child_a_hex, tx_child_b_hex]:\n+            testres = node.testmempoolaccept([rawtx])\n+            testres_single.append(testres[0])\n+            # Submit the transaction now so its child should have no problem validating\n+            node.sendrawtransaction(rawtx)\n+        assert_equal(testres_single, testres_multiple_ab)\n+\n+    def test_multiple_parents(self):\n+        node = self.nodes[0]\n+\n+        self.log.info(\"Testmempoolaccept a package in which a transaction has multiple parents within the package\")\n+        for num_parents in [2, 10, 24]:\n+            # Test a package with num_parents parents and 1 child transaction.\n+            package_hex = []\n+            parents_tx = []\n+            values = []\n+            parent_locking_scripts = []\n+            for _ in range(num_parents):\n+                parent_coin = self.coins.pop()\n+                value = parent_coin[\"amount\"] - Decimal(\"0.0001\") # Deduct reasonable fee\n+                (tx, txhex, parent_locking_script) = self.chain_transaction(parent_coin[\"txid\"], value)\n+                package_hex.append(txhex)\n+                parents_tx.append(tx)\n+                values.append(value)\n+                parent_locking_scripts.append(parent_locking_script)\n+            child_hex = self.create_child_with_parents(parents_tx, values, parent_locking_scripts)\n+            # Package accept should work with the parents in any order (as long as parents come before child)\n+            random.shuffle(package_hex)\n+            package_hex.append(child_hex)\n+            testres_multiple = node.testmempoolaccept(rawtxs=package_hex)\n+            assert all([testres[\"allowed\"] for testres in testres_multiple])\n+\n+            testres_single = []\n+            # Test accept and then submit each one individually, which should be identical to package testaccept\n+            for rawtx in package_hex:\n+                testres_single.append(node.testmempoolaccept([rawtx])[0])",
      "path": "test/functional/rpc_packages.py",
      "position": 279,
      "original_position": 434,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "9ce7b0f3850a0d69e81a68f18906a9d1aa4356fb",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "did you mean to compare `testres_single` to `testrun_multiple`?",
      "created_at": "2021-04-23T12:08:37Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r619168203",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619168203"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 279,
      "original_line": 279,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619168710",
      "pull_request_review_id": 643022948,
      "id": 619168710,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTE2ODcxMA==",
      "diff_hunk": "@@ -0,0 +1,514 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"RPCs that handle raw transaction packages.\"\"\"\n+\n+from decimal import Decimal\n+from io import BytesIO\n+import random\n+\n+from test_framework.address import ADDRESS_BCRT1_P2WSH_OP_TRUE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    BIP125_SEQUENCE_NUMBER,\n+    COIN,\n+    CTransaction,\n+    CTxInWitness,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_TRUE,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+    hex_str_to_bytes,\n+)\n+\n+class RPCPackagesTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.privkeys = [node.get_deterministic_priv_key().key]\n+        self.address = node.get_deterministic_priv_key().address\n+        self.coins = []\n+        # The last 100 coinbase transactions are premature\n+        for b in node.generatetoaddress(200, self.address)[:100]:\n+            coinbase = node.getblock(blockhash=b, verbosity=2)[\"tx\"][0]\n+            self.coins.append({\n+                \"txid\": coinbase[\"txid\"],\n+                \"amount\": coinbase[\"vout\"][0][\"value\"],\n+                \"scriptPubKey\": coinbase[\"vout\"][0][\"scriptPubKey\"],\n+            })\n+\n+        # Create some transactions that can be reused throughout the test. Never submit these to mempool.\n+        self.independent_txns_hex = []\n+        self.independent_txns_testres = []\n+        for _ in range(3):\n+            coin = self.coins.pop()\n+            rawtx = node.createrawtransaction([{\"txid\" : coin[\"txid\"], \"vout\" : 0}],\n+                {self.address : coin[\"amount\"] - Decimal(\"0.0001\")})\n+            signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n+            assert signedtx[\"complete\"]\n+            testres = node.testmempoolaccept([signedtx[\"hex\"]])\n+            assert testres[0][\"allowed\"]\n+            self.independent_txns_hex.append(signedtx[\"hex\"])\n+            # testmempoolaccept returns a list of length one, avoid creating a 2D list\n+            self.independent_txns_testres.append(testres[0])\n+\n+        self.test_independent()\n+        self.test_chain()\n+        self.test_chain_limits()\n+        self.test_descendant_limits()\n+        self.test_ancestor_limits()\n+        self.test_multiple_children()\n+        self.test_multiple_parents()\n+        self.test_conflicting()\n+\n+    def chain_transaction(self, parent_txid, value, n=0, parent_locking_script=None):\n+        \"\"\"Build a transaction that spends parent_txid.vout[n] and produces one output with amount=value.\n+        Return tuple (CTransaction object, raw hex, scriptPubKey of the output created).\n+        \"\"\"\n+        node = self.nodes[0]\n+        inputs = [{\"txid\" : parent_txid, \"vout\" : n}]\n+        outputs = {self.address : value}\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+        prevtxs = [{\n+            \"txid\": parent_txid,\n+            \"vout\": n,\n+            \"scriptPubKey\": parent_locking_script,\n+            \"amount\": value + Decimal(\"0.0001\"),\n+        }] if parent_locking_script else None\n+        signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys, prevtxs=prevtxs)\n+        tx = CTransaction()\n+        assert signedtx[\"complete\"]\n+        tx.deserialize(BytesIO(hex_str_to_bytes(signedtx[\"hex\"])))\n+        return (tx, signedtx[\"hex\"], tx.vout[0].scriptPubKey.hex())\n+\n+    def test_independent(self):\n+        self.log.info(\"Test multiple independent transactions in a package\")\n+        node = self.nodes[0]\n+        assert_equal(self.independent_txns_testres, node.testmempoolaccept(rawtxs=self.independent_txns_hex))\n+\n+        self.log.info(\"Test an otherwise valid package with an extra garbage tx appended\")\n+        garbage_tx = node.createrawtransaction([{\"txid\": \"00\" * 32, \"vout\": 5}], {self.address: 1})\n+        tx = CTransaction()\n+        tx.deserialize(BytesIO(hex_str_to_bytes(garbage_tx)))\n+        testres_bad = node.testmempoolaccept(self.independent_txns_hex + [garbage_tx])\n+        testres_independent_ids = [{\"txid\": res[\"txid\"], \"wtxid\": res[\"wtxid\"]} for res in self.independent_txns_testres]\n+        assert_equal(testres_bad, testres_independent_ids + [\n+            {\"txid\": tx.rehash(), \"wtxid\": tx.getwtxid(), \"allowed\": False, \"reject-reason\": \"missing-inputs\"}\n+        ])\n+\n+        self.log.info(\"Check testmempoolaccept tells us when some transactions completed validation successfully\")\n+        coin = self.coins.pop()\n+        tx_bad_sig_hex = node.createrawtransaction([{\"txid\" : coin[\"txid\"], \"vout\" : 0}],\n+                                           {self.address : coin[\"amount\"] - Decimal(\"0.0001\")})\n+        tx_bad_sig = CTransaction()\n+        tx_bad_sig.deserialize(BytesIO(hex_str_to_bytes(tx_bad_sig_hex)))\n+        testres_bad_sig = node.testmempoolaccept(self.independent_txns_hex + [tx_bad_sig_hex])\n+        assert_equal(testres_bad_sig, self.independent_txns_testres + [{\n+            \"txid\": tx_bad_sig.rehash(),\n+            \"wtxid\": tx_bad_sig.getwtxid(), \"allowed\": False,\n+            \"reject-reason\": \"mandatory-script-verify-flag-failed (Operation not valid with the current stack size)\"\n+        }])\n+\n+        self.log.info(\"Check testmempoolaccept reports txns in packages that exceed max feerate\")\n+        coin = self.coins.pop()\n+        tx_high_fee_raw = node.createrawtransaction([{\"txid\" : coin[\"txid\"], \"vout\" : 0}],\n+                                           {self.address : coin[\"amount\"] - Decimal(\"0.999\")})\n+        tx_high_fee_signed = node.signrawtransactionwithkey(hexstring=tx_high_fee_raw, privkeys=self.privkeys)\n+        assert tx_high_fee_signed[\"complete\"]\n+        tx_high_fee = CTransaction()\n+        tx_high_fee.deserialize(BytesIO(hex_str_to_bytes(tx_high_fee_signed[\"hex\"])))\n+        testres_high_fee = node.testmempoolaccept([tx_high_fee_signed[\"hex\"]])\n+        assert_equal(testres_high_fee, [\n+            {\"txid\": tx_high_fee.rehash(), \"wtxid\": tx_high_fee.getwtxid(), \"allowed\": False, \"reject-reason\": \"max-fee-exceeded\"}\n+        ])\n+        testres_package_high_fee = node.testmempoolaccept(self.independent_txns_hex + [tx_high_fee_signed[\"hex\"]])\n+        assert_equal(testres_package_high_fee, self.independent_txns_testres + testres_high_fee)\n+\n+    def test_chain(self):\n+        node = self.nodes[0]\n+        first_coin = self.coins.pop()\n+\n+        # Chain of 25 transactions\n+        parent_locking_script = None\n+        txid = first_coin[\"txid\"]\n+        chain_hex = []\n+        chain_txns = []\n+        value = first_coin[\"amount\"]\n+\n+        for _ in range(25):\n+            value -= Decimal(\"0.0001\") # Deduct reasonable fee\n+            (tx, txhex, parent_locking_script) = self.chain_transaction(txid, value, 0, parent_locking_script)\n+            txid = tx.rehash()\n+            chain_hex.append(txhex)\n+            chain_txns.append(tx)\n+\n+        self.log.info(\"Check that testmempoolaccept requires packages to be sorted by dependency\")\n+        assert_equal(node.testmempoolaccept(rawtxs=chain_hex[::-1]),\n+                     [{\"txid\": tx.rehash(), \"wtxid\": tx.getwtxid()} for tx in chain_txns[::-1]])\n+\n+        self.log.info(\"Testmempoolaccept a chain of 25 transactions\")\n+        testres_multiple = node.testmempoolaccept(rawtxs=chain_hex)\n+\n+        testres_single = []\n+        # Test accept and then submit each one individually, which should be identical to package test accept\n+        for rawtx in chain_hex:\n+            testres = node.testmempoolaccept([rawtx])\n+            testres_single.append(testres[0])\n+            # Submit the transaction now so its child should have no problem validating\n+            node.sendrawtransaction(rawtx)\n+        assert_equal(testres_single, testres_multiple)\n+\n+        # Clean up by clearing the mempool\n+        node.generate(1)\n+\n+    def test_chain_limits_helper(self, mempool_count, package_count):\n+        node = self.nodes[0]\n+        first_coin = self.coins.pop()\n+        parent_locking_script = None\n+        txid = first_coin[\"txid\"]\n+        chain_hex = []\n+        chain_txns = []\n+        value = first_coin[\"amount\"]\n+\n+        for i in range(mempool_count + package_count):\n+            value -= Decimal(\"0.0001\") # Deduct reasonable fee\n+            (tx, txhex, parent_locking_script) = self.chain_transaction(txid, value, 0, parent_locking_script)\n+            txid = tx.rehash()\n+            if i < mempool_count:\n+                node.sendrawtransaction(txhex)\n+                assert_equal(node.getrawmempool(verbose=True)[txid][\"ancestorcount\"], i + 1)\n+            else:\n+                chain_hex.append(txhex)\n+                chain_txns.append(tx)\n+        testres_too_long = node.testmempoolaccept(rawtxs=chain_hex)\n+        for txres in testres_too_long:\n+            assert_equal(txres[\"reject-reason\"], \"too-long-mempool-chain\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=chain_hex)])\n+\n+    def test_chain_limits(self):\n+        \"\"\"Create chains from mempool and package transactions that are longer than 25,\n+        but only if both in-mempool and in-package transactions are considered together.\n+        This checks that both mempool and in-package transactions are taken into account when\n+        calculating ancestors/descendant limits.\n+        \"\"\"\n+        self.log.info(\"Check that in-package ancestors count for mempool ancestor limits\")\n+\n+        # 24 transactions in the mempool and 2 in the package. The parent in the package has\n+        # 24 in-mempool ancestors and 1 in-package descendant. The child has 0 direct parents\n+        # in the mempool, but 25 in-mempool and in-package ancestors in total.\n+        self.test_chain_limits_helper(24, 2)\n+        # 2 transactions in the mempool and 24 in the package.\n+        self.test_chain_limits_helper(2, 24)\n+        # 13 transactions in the mempool and 13 in the package.\n+        self.test_chain_limits_helper(13, 13)\n+\n+    def test_descendant_limits(self):\n+        \"\"\"Create an 'A' shaped package with 25 transactions in the mempool and 2 in the package:\n+                    M1\n+                   ^  ^\n+                 M2a  M2b\n+                .       .\n+               .         .\n+              .           .\n+             M11a          ^\n+            ^              M12b\n+           ^                 ^\n+          Pa                  Pb\n+        The top ancestor in the package exceeds descendant limits but only if the in-mempool and in-package\n+        descendants are all considered together (24 including in-mempool descendants and 26 including both\n+        package transactions).\n+        \"\"\"\n+        node = self.nodes[0]\n+        self.log.info(\"Check that in-mempool and in-package descendants are calculated properly in packages\")\n+        # Top parent in mempool, M1\n+        first_coin = self.coins.pop()\n+        parent_value = (first_coin[\"amount\"] - Decimal(\"0.0002\")) / 2 # Deduct reasonable fee and make 2 outputs\n+        inputs = [{\"txid\" : first_coin[\"txid\"], \"vout\" : 0}]\n+        outputs = [{self.address : parent_value}, {ADDRESS_BCRT1_P2WSH_OP_TRUE : parent_value}]\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+\n+        parent_signed = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n+        parent_tx = CTransaction()\n+        assert parent_signed[\"complete\"]\n+        parent_tx.deserialize(BytesIO(hex_str_to_bytes(parent_signed[\"hex\"])))\n+        parent_txid = parent_tx.rehash()\n+        node.sendrawtransaction(parent_signed[\"hex\"])\n+\n+        package_hex = []\n+\n+        # Chain A\n+        parent_locking_script = parent_tx.vout[0].scriptPubKey.hex()\n+        value = parent_value\n+        txid = parent_txid\n+        for i in range(12):\n+            value -= Decimal(\"0.0001\") # deduct reasonable fee\n+            (tx, txhex, parent_locking_script) = self.chain_transaction(txid, value, 0, parent_locking_script)\n+            txid = tx.rehash()\n+            if i < 11: # M2a... M11a\n+                node.sendrawtransaction(txhex)\n+            else: # Pa\n+                package_hex.append(txhex)\n+\n+        # Chain B\n+        value = parent_value - Decimal(\"0.0001\")\n+        rawtx_b = node.createrawtransaction([{\"txid\" : parent_txid, \"vout\" : 1}], {self.address : value})\n+        tx_child_b = CTransaction()\n+        tx_child_b.deserialize(BytesIO(hex_str_to_bytes(rawtx_b)))\n+        tx_child_b.wit.vtxinwit = [CTxInWitness()]\n+        tx_child_b.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n+        tx_child_b_hex = tx_child_b.serialize().hex()\n+        node.sendrawtransaction(tx_child_b_hex)\n+        parent_locking_script = tx_child_b.vout[0].scriptPubKey.hex()\n+        txid = tx_child_b.rehash()\n+        for i in range(12):\n+            value -= Decimal(\"0.0001\") # Deduct reasonable fee\n+            (tx, txhex, parent_locking_script) = self.chain_transaction(txid, value, 0, parent_locking_script)\n+            txid = tx.rehash()\n+            if i < 11: # M3b... M12b\n+                node.sendrawtransaction(txhex)\n+            else: # Pb\n+                package_hex.append(txhex)\n+\n+        testres_too_long = node.testmempoolaccept(rawtxs=package_hex)\n+        for txres in testres_too_long:\n+            assert_equal(txres[\"reject-reason\"], \"too-long-mempool-chain\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=package_hex)])\n+\n+    def create_child_with_parents(self, parents_tx, values, locking_scripts):\n+        \"\"\"Creates a transaction that spends the first output of each parent in parents_tx.\"\"\"\n+        num_parents = len(parents_tx)\n+        total_value = sum(values)\n+        inputs = [{\"txid\" : tx.rehash(), \"vout\" : 0} for tx in parents_tx]\n+        outputs = {self.address : total_value - num_parents * Decimal(\"0.0001\")}\n+        rawtx_child = self.nodes[0].createrawtransaction(inputs, outputs)\n+        prevtxs = []\n+        for i in range(num_parents):\n+            prevtxs.append({\"txid\": parents_tx[i].rehash(), \"vout\" : 0, \"scriptPubKey\" : locking_scripts[i], \"amount\" : values[i]})\n+        signedtx_child = self.nodes[0].signrawtransactionwithkey(hexstring=rawtx_child, privkeys=self.privkeys, prevtxs=prevtxs)\n+        assert signedtx_child[\"complete\"]\n+        return signedtx_child[\"hex\"]\n+\n+    def test_ancestor_limits(self):\n+        \"\"\"Create a 'V' shaped chain with 24 transactions in the mempool and 3 in the package:\n+        M1a                    M1b\n+         ^                     ^\n+          M2a                M2b\n+           .                 .\n+            .               .\n+             .             .\n+             M12a        M12b\n+               ^         ^\n+                Pa     Pb\n+                 ^    ^\n+                   Pc\n+        The lowest descendant, Pc, exceeds ancestor limits, but only if the in-mempool\n+        and in-package ancestors are all considered together.\n+        \"\"\"\n+        node = self.nodes[0]\n+        package_hex = []\n+        parents_tx = []\n+        values = []\n+        parent_locking_scripts = []\n+\n+        self.log.info(\"Check that in-mempool and in-package ancestors are calculated properly in packages\")\n+\n+        # Two chains of 13 transactions each\n+        for _ in range(2):\n+            parent_locking_script = None\n+            top_coin = self.coins.pop()\n+            txid = top_coin[\"txid\"]\n+            value = top_coin[\"amount\"]\n+            for i in range(13):\n+                value -= Decimal(\"0.0001\") # Deduct reasonable fee\n+                (tx, txhex, parent_locking_script) = self.chain_transaction(txid, value, 0, parent_locking_script)\n+                txid = tx.rehash()\n+                if i < 12:\n+                    node.sendrawtransaction(txhex)\n+                else: # Save the 13th transaction for the package\n+                    package_hex.append(txhex)\n+                    parents_tx.append(tx)\n+                    parent_locking_scripts.append(parent_locking_script)\n+                    values.append(value)\n+\n+        # Child Pc\n+        child_hex = self.create_child_with_parents(parents_tx, values, parent_locking_scripts)\n+        package_hex.append(child_hex)\n+\n+        testres_too_long = node.testmempoolaccept(rawtxs=package_hex)\n+        for txres in testres_too_long:\n+            assert_equal(txres[\"reject-reason\"], \"too-long-mempool-chain\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=package_hex)])\n+\n+    def test_multiple_children(self):\n+        node = self.nodes[0]\n+\n+        self.log.info(\"Testmempoolaccept a package in which a transaction has two children within the package\")\n+        first_coin = self.coins.pop()\n+        value = (first_coin[\"amount\"] - Decimal(\"0.0002\")) / 2 # Deduct reasonable fee and make 2 outputs\n+        inputs = [{\"txid\" : first_coin[\"txid\"], \"vout\" : 0}]\n+        outputs = [{self.address : value}, {ADDRESS_BCRT1_P2WSH_OP_TRUE : value}]\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+\n+        parent_signed = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n+        parent_tx = CTransaction()\n+        assert parent_signed[\"complete\"]\n+        parent_tx.deserialize(BytesIO(hex_str_to_bytes(parent_signed[\"hex\"])))\n+        parent_txid = parent_tx.rehash()\n+        assert node.testmempoolaccept([parent_signed[\"hex\"]])[0][\"allowed\"]\n+\n+        parent_locking_script_a = parent_tx.vout[0].scriptPubKey.hex()\n+        child_value = value - Decimal(\"0.0001\")\n+\n+        # Child A\n+        (_, tx_child_a_hex, _) = self.chain_transaction(parent_txid, child_value, 0, parent_locking_script_a)\n+        assert not node.testmempoolaccept([tx_child_a_hex])[0][\"allowed\"]\n+\n+        # Child B\n+        rawtx_b = node.createrawtransaction([{\"txid\" : parent_txid, \"vout\" : 1}], {self.address : child_value})\n+        tx_child_b = CTransaction()\n+        tx_child_b.deserialize(BytesIO(hex_str_to_bytes(rawtx_b)))\n+        tx_child_b.wit.vtxinwit = [CTxInWitness()]\n+        tx_child_b.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n+        tx_child_b_hex = tx_child_b.serialize().hex()\n+        assert not node.testmempoolaccept([tx_child_b_hex])[0][\"allowed\"]\n+\n+        self.log.info(\"Testmempoolaccept with entire package, should work with children in either order\")\n+        testres_multiple_ab = node.testmempoolaccept(rawtxs=[parent_signed[\"hex\"], tx_child_a_hex, tx_child_b_hex])\n+        testres_multiple_ba = node.testmempoolaccept(rawtxs=[parent_signed[\"hex\"], tx_child_b_hex, tx_child_a_hex])\n+        assert all([testres[\"allowed\"] for testres in testres_multiple_ab + testres_multiple_ba])\n+\n+        testres_single = []\n+        # Test accept and then submit each one individually, which should be identical to package testaccept\n+        for rawtx in [parent_signed[\"hex\"], tx_child_a_hex, tx_child_b_hex]:\n+            testres = node.testmempoolaccept([rawtx])\n+            testres_single.append(testres[0])\n+            # Submit the transaction now so its child should have no problem validating\n+            node.sendrawtransaction(rawtx)\n+        assert_equal(testres_single, testres_multiple_ab)\n+\n+    def test_multiple_parents(self):\n+        node = self.nodes[0]\n+\n+        self.log.info(\"Testmempoolaccept a package in which a transaction has multiple parents within the package\")\n+        for num_parents in [2, 10, 24]:\n+            # Test a package with num_parents parents and 1 child transaction.\n+            package_hex = []\n+            parents_tx = []\n+            values = []\n+            parent_locking_scripts = []\n+            for _ in range(num_parents):\n+                parent_coin = self.coins.pop()\n+                value = parent_coin[\"amount\"] - Decimal(\"0.0001\") # Deduct reasonable fee\n+                (tx, txhex, parent_locking_script) = self.chain_transaction(parent_coin[\"txid\"], value)\n+                package_hex.append(txhex)\n+                parents_tx.append(tx)\n+                values.append(value)\n+                parent_locking_scripts.append(parent_locking_script)\n+            child_hex = self.create_child_with_parents(parents_tx, values, parent_locking_scripts)\n+            # Package accept should work with the parents in any order (as long as parents come before child)\n+            random.shuffle(package_hex)\n+            package_hex.append(child_hex)\n+            testres_multiple = node.testmempoolaccept(rawtxs=package_hex)\n+            assert all([testres[\"allowed\"] for testres in testres_multiple])\n+\n+            testres_single = []\n+            # Test accept and then submit each one individually, which should be identical to package testaccept\n+            for rawtx in package_hex:\n+                testres_single.append(node.testmempoolaccept([rawtx])[0])\n+                # Submit the transaction now so its child should have no problem validating\n+                node.sendrawtransaction(rawtx)\n+\n+    def test_conflicting(self):\n+        node = self.nodes[0]\n+        prevtx = self.coins.pop()\n+        inputs = [{\"txid\" : prevtx[\"txid\"], \"vout\" : 0}]\n+        output1 = {node.get_deterministic_priv_key().address: 50 - 0.00125}\n+        output2 = {ADDRESS_BCRT1_P2WSH_OP_TRUE: 50 - 0.00125}\n+\n+        # tx1 and tx2 share the same inputs\n+        rawtx1 = node.createrawtransaction(inputs, output1)\n+        rawtx2 = node.createrawtransaction(inputs, output2)\n+        signedtx1 = node.signrawtransactionwithkey(hexstring=rawtx1, privkeys=self.privkeys)\n+        signedtx2 = node.signrawtransactionwithkey(hexstring=rawtx2, privkeys=self.privkeys)\n+        tx1 = CTransaction()\n+        tx1.deserialize(BytesIO(hex_str_to_bytes(signedtx1[\"hex\"])))\n+        tx2 = CTransaction()\n+        tx2.deserialize(BytesIO(hex_str_to_bytes(signedtx2[\"hex\"])))\n+        assert signedtx1[\"complete\"]\n+        assert signedtx2[\"complete\"]\n+\n+        # Ensure tx1 and tx2 are valid by themselves\n+        assert node.testmempoolaccept([signedtx1[\"hex\"]])[0][\"allowed\"]\n+        assert node.testmempoolaccept([signedtx2[\"hex\"]])[0][\"allowed\"]\n+\n+        self.log.info(\"Test duplicate transactions in the same package\")\n+        testres = node.testmempoolaccept([signedtx1[\"hex\"], signedtx1[\"hex\"]])\n+        assert_equal(testres, [\n+            {\"txid\": tx1.rehash(), \"wtxid\": tx1.getwtxid(), \"allowed\": False, \"reject-reason\": \"conflict-in-package\"},\n+            {\"txid\": tx1.rehash(), \"wtxid\": tx1.getwtxid(), \"allowed\": False, \"reject-reason\": \"conflict-in-package\"}\n+        ])\n+\n+        self.log.info(\"Test conflicting transactions in the same package\")\n+        testres = node.testmempoolaccept([signedtx1[\"hex\"], signedtx2[\"hex\"]])\n+        assert_equal(testres, [\n+            {\"txid\": tx1.rehash(), \"wtxid\": tx1.getwtxid()},\n+            {\"txid\": tx2.rehash(), \"wtxid\": tx2.getwtxid(), \"allowed\": False, \"reject-reason\": \"conflict-in-package\"}\n+        ])\n+\n+    def test_rbf(self):",
      "path": "test/functional/rpc_packages.py",
      "position": 321,
      "original_position": 475,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "9ce7b0f3850a0d69e81a68f18906a9d1aa4356fb",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nice test. You should try calling it :grin: ",
      "created_at": "2021-04-23T12:09:29Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r619168710",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619168710"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 321,
      "original_line": 321,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619169793",
      "pull_request_review_id": 643022948,
      "id": 619169793,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTE2OTc5Mw==",
      "diff_hunk": "@@ -0,0 +1,514 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"RPCs that handle raw transaction packages.\"\"\"\n+\n+from decimal import Decimal\n+from io import BytesIO\n+import random\n+\n+from test_framework.address import ADDRESS_BCRT1_P2WSH_OP_TRUE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    BIP125_SEQUENCE_NUMBER,\n+    COIN,\n+    CTransaction,\n+    CTxInWitness,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_TRUE,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+    hex_str_to_bytes,\n+)\n+\n+class RPCPackagesTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.privkeys = [node.get_deterministic_priv_key().key]\n+        self.address = node.get_deterministic_priv_key().address\n+        self.coins = []\n+        # The last 100 coinbase transactions are premature\n+        for b in node.generatetoaddress(200, self.address)[:100]:\n+            coinbase = node.getblock(blockhash=b, verbosity=2)[\"tx\"][0]\n+            self.coins.append({\n+                \"txid\": coinbase[\"txid\"],\n+                \"amount\": coinbase[\"vout\"][0][\"value\"],\n+                \"scriptPubKey\": coinbase[\"vout\"][0][\"scriptPubKey\"],\n+            })\n+\n+        # Create some transactions that can be reused throughout the test. Never submit these to mempool.\n+        self.independent_txns_hex = []\n+        self.independent_txns_testres = []\n+        for _ in range(3):\n+            coin = self.coins.pop()\n+            rawtx = node.createrawtransaction([{\"txid\" : coin[\"txid\"], \"vout\" : 0}],\n+                {self.address : coin[\"amount\"] - Decimal(\"0.0001\")})\n+            signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n+            assert signedtx[\"complete\"]\n+            testres = node.testmempoolaccept([signedtx[\"hex\"]])\n+            assert testres[0][\"allowed\"]\n+            self.independent_txns_hex.append(signedtx[\"hex\"])\n+            # testmempoolaccept returns a list of length one, avoid creating a 2D list\n+            self.independent_txns_testres.append(testres[0])\n+\n+        self.test_independent()\n+        self.test_chain()\n+        self.test_chain_limits()\n+        self.test_descendant_limits()\n+        self.test_ancestor_limits()\n+        self.test_multiple_children()\n+        self.test_multiple_parents()\n+        self.test_conflicting()\n+\n+    def chain_transaction(self, parent_txid, value, n=0, parent_locking_script=None):\n+        \"\"\"Build a transaction that spends parent_txid.vout[n] and produces one output with amount=value.\n+        Return tuple (CTransaction object, raw hex, scriptPubKey of the output created).\n+        \"\"\"\n+        node = self.nodes[0]\n+        inputs = [{\"txid\" : parent_txid, \"vout\" : n}]\n+        outputs = {self.address : value}\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+        prevtxs = [{\n+            \"txid\": parent_txid,\n+            \"vout\": n,\n+            \"scriptPubKey\": parent_locking_script,\n+            \"amount\": value + Decimal(\"0.0001\"),\n+        }] if parent_locking_script else None\n+        signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys, prevtxs=prevtxs)\n+        tx = CTransaction()\n+        assert signedtx[\"complete\"]\n+        tx.deserialize(BytesIO(hex_str_to_bytes(signedtx[\"hex\"])))\n+        return (tx, signedtx[\"hex\"], tx.vout[0].scriptPubKey.hex())\n+\n+    def test_independent(self):\n+        self.log.info(\"Test multiple independent transactions in a package\")\n+        node = self.nodes[0]\n+        assert_equal(self.independent_txns_testres, node.testmempoolaccept(rawtxs=self.independent_txns_hex))\n+\n+        self.log.info(\"Test an otherwise valid package with an extra garbage tx appended\")\n+        garbage_tx = node.createrawtransaction([{\"txid\": \"00\" * 32, \"vout\": 5}], {self.address: 1})\n+        tx = CTransaction()\n+        tx.deserialize(BytesIO(hex_str_to_bytes(garbage_tx)))\n+        testres_bad = node.testmempoolaccept(self.independent_txns_hex + [garbage_tx])\n+        testres_independent_ids = [{\"txid\": res[\"txid\"], \"wtxid\": res[\"wtxid\"]} for res in self.independent_txns_testres]\n+        assert_equal(testres_bad, testres_independent_ids + [\n+            {\"txid\": tx.rehash(), \"wtxid\": tx.getwtxid(), \"allowed\": False, \"reject-reason\": \"missing-inputs\"}\n+        ])\n+\n+        self.log.info(\"Check testmempoolaccept tells us when some transactions completed validation successfully\")\n+        coin = self.coins.pop()\n+        tx_bad_sig_hex = node.createrawtransaction([{\"txid\" : coin[\"txid\"], \"vout\" : 0}],\n+                                           {self.address : coin[\"amount\"] - Decimal(\"0.0001\")})\n+        tx_bad_sig = CTransaction()\n+        tx_bad_sig.deserialize(BytesIO(hex_str_to_bytes(tx_bad_sig_hex)))\n+        testres_bad_sig = node.testmempoolaccept(self.independent_txns_hex + [tx_bad_sig_hex])\n+        assert_equal(testres_bad_sig, self.independent_txns_testres + [{\n+            \"txid\": tx_bad_sig.rehash(),\n+            \"wtxid\": tx_bad_sig.getwtxid(), \"allowed\": False,\n+            \"reject-reason\": \"mandatory-script-verify-flag-failed (Operation not valid with the current stack size)\"\n+        }])\n+\n+        self.log.info(\"Check testmempoolaccept reports txns in packages that exceed max feerate\")\n+        coin = self.coins.pop()\n+        tx_high_fee_raw = node.createrawtransaction([{\"txid\" : coin[\"txid\"], \"vout\" : 0}],\n+                                           {self.address : coin[\"amount\"] - Decimal(\"0.999\")})\n+        tx_high_fee_signed = node.signrawtransactionwithkey(hexstring=tx_high_fee_raw, privkeys=self.privkeys)\n+        assert tx_high_fee_signed[\"complete\"]\n+        tx_high_fee = CTransaction()\n+        tx_high_fee.deserialize(BytesIO(hex_str_to_bytes(tx_high_fee_signed[\"hex\"])))\n+        testres_high_fee = node.testmempoolaccept([tx_high_fee_signed[\"hex\"]])\n+        assert_equal(testres_high_fee, [\n+            {\"txid\": tx_high_fee.rehash(), \"wtxid\": tx_high_fee.getwtxid(), \"allowed\": False, \"reject-reason\": \"max-fee-exceeded\"}\n+        ])\n+        testres_package_high_fee = node.testmempoolaccept(self.independent_txns_hex + [tx_high_fee_signed[\"hex\"]])\n+        assert_equal(testres_package_high_fee, self.independent_txns_testres + testres_high_fee)\n+\n+    def test_chain(self):\n+        node = self.nodes[0]\n+        first_coin = self.coins.pop()\n+\n+        # Chain of 25 transactions\n+        parent_locking_script = None\n+        txid = first_coin[\"txid\"]\n+        chain_hex = []\n+        chain_txns = []\n+        value = first_coin[\"amount\"]\n+\n+        for _ in range(25):\n+            value -= Decimal(\"0.0001\") # Deduct reasonable fee\n+            (tx, txhex, parent_locking_script) = self.chain_transaction(txid, value, 0, parent_locking_script)\n+            txid = tx.rehash()\n+            chain_hex.append(txhex)\n+            chain_txns.append(tx)\n+\n+        self.log.info(\"Check that testmempoolaccept requires packages to be sorted by dependency\")\n+        assert_equal(node.testmempoolaccept(rawtxs=chain_hex[::-1]),\n+                     [{\"txid\": tx.rehash(), \"wtxid\": tx.getwtxid()} for tx in chain_txns[::-1]])\n+\n+        self.log.info(\"Testmempoolaccept a chain of 25 transactions\")\n+        testres_multiple = node.testmempoolaccept(rawtxs=chain_hex)\n+\n+        testres_single = []\n+        # Test accept and then submit each one individually, which should be identical to package test accept\n+        for rawtx in chain_hex:\n+            testres = node.testmempoolaccept([rawtx])\n+            testres_single.append(testres[0])\n+            # Submit the transaction now so its child should have no problem validating\n+            node.sendrawtransaction(rawtx)\n+        assert_equal(testres_single, testres_multiple)\n+\n+        # Clean up by clearing the mempool\n+        node.generate(1)\n+\n+    def test_chain_limits_helper(self, mempool_count, package_count):\n+        node = self.nodes[0]\n+        first_coin = self.coins.pop()\n+        parent_locking_script = None\n+        txid = first_coin[\"txid\"]\n+        chain_hex = []\n+        chain_txns = []\n+        value = first_coin[\"amount\"]\n+\n+        for i in range(mempool_count + package_count):\n+            value -= Decimal(\"0.0001\") # Deduct reasonable fee\n+            (tx, txhex, parent_locking_script) = self.chain_transaction(txid, value, 0, parent_locking_script)\n+            txid = tx.rehash()\n+            if i < mempool_count:\n+                node.sendrawtransaction(txhex)\n+                assert_equal(node.getrawmempool(verbose=True)[txid][\"ancestorcount\"], i + 1)\n+            else:\n+                chain_hex.append(txhex)\n+                chain_txns.append(tx)\n+        testres_too_long = node.testmempoolaccept(rawtxs=chain_hex)\n+        for txres in testres_too_long:\n+            assert_equal(txres[\"reject-reason\"], \"too-long-mempool-chain\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=chain_hex)])\n+\n+    def test_chain_limits(self):\n+        \"\"\"Create chains from mempool and package transactions that are longer than 25,\n+        but only if both in-mempool and in-package transactions are considered together.\n+        This checks that both mempool and in-package transactions are taken into account when\n+        calculating ancestors/descendant limits.\n+        \"\"\"\n+        self.log.info(\"Check that in-package ancestors count for mempool ancestor limits\")\n+\n+        # 24 transactions in the mempool and 2 in the package. The parent in the package has\n+        # 24 in-mempool ancestors and 1 in-package descendant. The child has 0 direct parents\n+        # in the mempool, but 25 in-mempool and in-package ancestors in total.\n+        self.test_chain_limits_helper(24, 2)\n+        # 2 transactions in the mempool and 24 in the package.\n+        self.test_chain_limits_helper(2, 24)\n+        # 13 transactions in the mempool and 13 in the package.\n+        self.test_chain_limits_helper(13, 13)\n+\n+    def test_descendant_limits(self):\n+        \"\"\"Create an 'A' shaped package with 25 transactions in the mempool and 2 in the package:\n+                    M1\n+                   ^  ^\n+                 M2a  M2b\n+                .       .\n+               .         .\n+              .           .\n+             M11a          ^\n+            ^              M12b\n+           ^                 ^\n+          Pa                  Pb\n+        The top ancestor in the package exceeds descendant limits but only if the in-mempool and in-package\n+        descendants are all considered together (24 including in-mempool descendants and 26 including both\n+        package transactions).\n+        \"\"\"\n+        node = self.nodes[0]\n+        self.log.info(\"Check that in-mempool and in-package descendants are calculated properly in packages\")\n+        # Top parent in mempool, M1\n+        first_coin = self.coins.pop()\n+        parent_value = (first_coin[\"amount\"] - Decimal(\"0.0002\")) / 2 # Deduct reasonable fee and make 2 outputs\n+        inputs = [{\"txid\" : first_coin[\"txid\"], \"vout\" : 0}]\n+        outputs = [{self.address : parent_value}, {ADDRESS_BCRT1_P2WSH_OP_TRUE : parent_value}]\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+\n+        parent_signed = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n+        parent_tx = CTransaction()\n+        assert parent_signed[\"complete\"]\n+        parent_tx.deserialize(BytesIO(hex_str_to_bytes(parent_signed[\"hex\"])))\n+        parent_txid = parent_tx.rehash()\n+        node.sendrawtransaction(parent_signed[\"hex\"])\n+\n+        package_hex = []\n+\n+        # Chain A\n+        parent_locking_script = parent_tx.vout[0].scriptPubKey.hex()\n+        value = parent_value\n+        txid = parent_txid\n+        for i in range(12):\n+            value -= Decimal(\"0.0001\") # deduct reasonable fee\n+            (tx, txhex, parent_locking_script) = self.chain_transaction(txid, value, 0, parent_locking_script)\n+            txid = tx.rehash()\n+            if i < 11: # M2a... M11a\n+                node.sendrawtransaction(txhex)\n+            else: # Pa\n+                package_hex.append(txhex)\n+\n+        # Chain B\n+        value = parent_value - Decimal(\"0.0001\")\n+        rawtx_b = node.createrawtransaction([{\"txid\" : parent_txid, \"vout\" : 1}], {self.address : value})\n+        tx_child_b = CTransaction()\n+        tx_child_b.deserialize(BytesIO(hex_str_to_bytes(rawtx_b)))\n+        tx_child_b.wit.vtxinwit = [CTxInWitness()]\n+        tx_child_b.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n+        tx_child_b_hex = tx_child_b.serialize().hex()\n+        node.sendrawtransaction(tx_child_b_hex)\n+        parent_locking_script = tx_child_b.vout[0].scriptPubKey.hex()\n+        txid = tx_child_b.rehash()\n+        for i in range(12):\n+            value -= Decimal(\"0.0001\") # Deduct reasonable fee\n+            (tx, txhex, parent_locking_script) = self.chain_transaction(txid, value, 0, parent_locking_script)\n+            txid = tx.rehash()\n+            if i < 11: # M3b... M12b\n+                node.sendrawtransaction(txhex)\n+            else: # Pb\n+                package_hex.append(txhex)\n+\n+        testres_too_long = node.testmempoolaccept(rawtxs=package_hex)\n+        for txres in testres_too_long:\n+            assert_equal(txres[\"reject-reason\"], \"too-long-mempool-chain\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=package_hex)])\n+\n+    def create_child_with_parents(self, parents_tx, values, locking_scripts):\n+        \"\"\"Creates a transaction that spends the first output of each parent in parents_tx.\"\"\"\n+        num_parents = len(parents_tx)\n+        total_value = sum(values)\n+        inputs = [{\"txid\" : tx.rehash(), \"vout\" : 0} for tx in parents_tx]\n+        outputs = {self.address : total_value - num_parents * Decimal(\"0.0001\")}\n+        rawtx_child = self.nodes[0].createrawtransaction(inputs, outputs)\n+        prevtxs = []\n+        for i in range(num_parents):\n+            prevtxs.append({\"txid\": parents_tx[i].rehash(), \"vout\" : 0, \"scriptPubKey\" : locking_scripts[i], \"amount\" : values[i]})\n+        signedtx_child = self.nodes[0].signrawtransactionwithkey(hexstring=rawtx_child, privkeys=self.privkeys, prevtxs=prevtxs)\n+        assert signedtx_child[\"complete\"]\n+        return signedtx_child[\"hex\"]\n+\n+    def test_ancestor_limits(self):\n+        \"\"\"Create a 'V' shaped chain with 24 transactions in the mempool and 3 in the package:\n+        M1a                    M1b\n+         ^                     ^\n+          M2a                M2b\n+           .                 .\n+            .               .\n+             .             .\n+             M12a        M12b\n+               ^         ^\n+                Pa     Pb\n+                 ^    ^\n+                   Pc\n+        The lowest descendant, Pc, exceeds ancestor limits, but only if the in-mempool\n+        and in-package ancestors are all considered together.\n+        \"\"\"\n+        node = self.nodes[0]\n+        package_hex = []\n+        parents_tx = []\n+        values = []\n+        parent_locking_scripts = []\n+\n+        self.log.info(\"Check that in-mempool and in-package ancestors are calculated properly in packages\")\n+\n+        # Two chains of 13 transactions each\n+        for _ in range(2):\n+            parent_locking_script = None\n+            top_coin = self.coins.pop()\n+            txid = top_coin[\"txid\"]\n+            value = top_coin[\"amount\"]\n+            for i in range(13):\n+                value -= Decimal(\"0.0001\") # Deduct reasonable fee\n+                (tx, txhex, parent_locking_script) = self.chain_transaction(txid, value, 0, parent_locking_script)\n+                txid = tx.rehash()\n+                if i < 12:\n+                    node.sendrawtransaction(txhex)\n+                else: # Save the 13th transaction for the package\n+                    package_hex.append(txhex)\n+                    parents_tx.append(tx)\n+                    parent_locking_scripts.append(parent_locking_script)\n+                    values.append(value)\n+\n+        # Child Pc\n+        child_hex = self.create_child_with_parents(parents_tx, values, parent_locking_scripts)\n+        package_hex.append(child_hex)\n+\n+        testres_too_long = node.testmempoolaccept(rawtxs=package_hex)\n+        for txres in testres_too_long:\n+            assert_equal(txres[\"reject-reason\"], \"too-long-mempool-chain\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=package_hex)])\n+\n+    def test_multiple_children(self):\n+        node = self.nodes[0]\n+\n+        self.log.info(\"Testmempoolaccept a package in which a transaction has two children within the package\")\n+        first_coin = self.coins.pop()\n+        value = (first_coin[\"amount\"] - Decimal(\"0.0002\")) / 2 # Deduct reasonable fee and make 2 outputs\n+        inputs = [{\"txid\" : first_coin[\"txid\"], \"vout\" : 0}]\n+        outputs = [{self.address : value}, {ADDRESS_BCRT1_P2WSH_OP_TRUE : value}]\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+\n+        parent_signed = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n+        parent_tx = CTransaction()\n+        assert parent_signed[\"complete\"]\n+        parent_tx.deserialize(BytesIO(hex_str_to_bytes(parent_signed[\"hex\"])))\n+        parent_txid = parent_tx.rehash()\n+        assert node.testmempoolaccept([parent_signed[\"hex\"]])[0][\"allowed\"]\n+\n+        parent_locking_script_a = parent_tx.vout[0].scriptPubKey.hex()\n+        child_value = value - Decimal(\"0.0001\")\n+\n+        # Child A\n+        (_, tx_child_a_hex, _) = self.chain_transaction(parent_txid, child_value, 0, parent_locking_script_a)\n+        assert not node.testmempoolaccept([tx_child_a_hex])[0][\"allowed\"]\n+\n+        # Child B\n+        rawtx_b = node.createrawtransaction([{\"txid\" : parent_txid, \"vout\" : 1}], {self.address : child_value})\n+        tx_child_b = CTransaction()\n+        tx_child_b.deserialize(BytesIO(hex_str_to_bytes(rawtx_b)))\n+        tx_child_b.wit.vtxinwit = [CTxInWitness()]\n+        tx_child_b.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n+        tx_child_b_hex = tx_child_b.serialize().hex()\n+        assert not node.testmempoolaccept([tx_child_b_hex])[0][\"allowed\"]\n+\n+        self.log.info(\"Testmempoolaccept with entire package, should work with children in either order\")\n+        testres_multiple_ab = node.testmempoolaccept(rawtxs=[parent_signed[\"hex\"], tx_child_a_hex, tx_child_b_hex])\n+        testres_multiple_ba = node.testmempoolaccept(rawtxs=[parent_signed[\"hex\"], tx_child_b_hex, tx_child_a_hex])\n+        assert all([testres[\"allowed\"] for testres in testres_multiple_ab + testres_multiple_ba])\n+\n+        testres_single = []\n+        # Test accept and then submit each one individually, which should be identical to package testaccept\n+        for rawtx in [parent_signed[\"hex\"], tx_child_a_hex, tx_child_b_hex]:\n+            testres = node.testmempoolaccept([rawtx])\n+            testres_single.append(testres[0])\n+            # Submit the transaction now so its child should have no problem validating\n+            node.sendrawtransaction(rawtx)\n+        assert_equal(testres_single, testres_multiple_ab)\n+\n+    def test_multiple_parents(self):\n+        node = self.nodes[0]\n+\n+        self.log.info(\"Testmempoolaccept a package in which a transaction has multiple parents within the package\")\n+        for num_parents in [2, 10, 24]:\n+            # Test a package with num_parents parents and 1 child transaction.\n+            package_hex = []\n+            parents_tx = []\n+            values = []\n+            parent_locking_scripts = []\n+            for _ in range(num_parents):\n+                parent_coin = self.coins.pop()\n+                value = parent_coin[\"amount\"] - Decimal(\"0.0001\") # Deduct reasonable fee\n+                (tx, txhex, parent_locking_script) = self.chain_transaction(parent_coin[\"txid\"], value)\n+                package_hex.append(txhex)\n+                parents_tx.append(tx)\n+                values.append(value)\n+                parent_locking_scripts.append(parent_locking_script)\n+            child_hex = self.create_child_with_parents(parents_tx, values, parent_locking_scripts)\n+            # Package accept should work with the parents in any order (as long as parents come before child)\n+            random.shuffle(package_hex)\n+            package_hex.append(child_hex)\n+            testres_multiple = node.testmempoolaccept(rawtxs=package_hex)\n+            assert all([testres[\"allowed\"] for testres in testres_multiple])\n+\n+            testres_single = []\n+            # Test accept and then submit each one individually, which should be identical to package testaccept\n+            for rawtx in package_hex:\n+                testres_single.append(node.testmempoolaccept([rawtx])[0])\n+                # Submit the transaction now so its child should have no problem validating\n+                node.sendrawtransaction(rawtx)\n+\n+    def test_conflicting(self):\n+        node = self.nodes[0]\n+        prevtx = self.coins.pop()\n+        inputs = [{\"txid\" : prevtx[\"txid\"], \"vout\" : 0}]\n+        output1 = {node.get_deterministic_priv_key().address: 50 - 0.00125}\n+        output2 = {ADDRESS_BCRT1_P2WSH_OP_TRUE: 50 - 0.00125}\n+\n+        # tx1 and tx2 share the same inputs\n+        rawtx1 = node.createrawtransaction(inputs, output1)\n+        rawtx2 = node.createrawtransaction(inputs, output2)\n+        signedtx1 = node.signrawtransactionwithkey(hexstring=rawtx1, privkeys=self.privkeys)\n+        signedtx2 = node.signrawtransactionwithkey(hexstring=rawtx2, privkeys=self.privkeys)\n+        tx1 = CTransaction()\n+        tx1.deserialize(BytesIO(hex_str_to_bytes(signedtx1[\"hex\"])))\n+        tx2 = CTransaction()\n+        tx2.deserialize(BytesIO(hex_str_to_bytes(signedtx2[\"hex\"])))\n+        assert signedtx1[\"complete\"]\n+        assert signedtx2[\"complete\"]\n+\n+        # Ensure tx1 and tx2 are valid by themselves\n+        assert node.testmempoolaccept([signedtx1[\"hex\"]])[0][\"allowed\"]\n+        assert node.testmempoolaccept([signedtx2[\"hex\"]])[0][\"allowed\"]\n+\n+        self.log.info(\"Test duplicate transactions in the same package\")\n+        testres = node.testmempoolaccept([signedtx1[\"hex\"], signedtx1[\"hex\"]])\n+        assert_equal(testres, [\n+            {\"txid\": tx1.rehash(), \"wtxid\": tx1.getwtxid(), \"allowed\": False, \"reject-reason\": \"conflict-in-package\"},\n+            {\"txid\": tx1.rehash(), \"wtxid\": tx1.getwtxid(), \"allowed\": False, \"reject-reason\": \"conflict-in-package\"}\n+        ])\n+\n+        self.log.info(\"Test conflicting transactions in the same package\")\n+        testres = node.testmempoolaccept([signedtx1[\"hex\"], signedtx2[\"hex\"]])\n+        assert_equal(testres, [\n+            {\"txid\": tx1.rehash(), \"wtxid\": tx1.getwtxid()},",
      "path": "test/functional/rpc_packages.py",
      "position": null,
      "original_position": 471,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "9ce7b0f3850a0d69e81a68f18906a9d1aa4356fb",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe add a comment about why this is incomplete and not rejected.",
      "created_at": "2021-04-23T12:11:23Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r619169793",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619169793"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 471,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619177795",
      "pull_request_review_id": 643022948,
      "id": 619177795,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTE3Nzc5NQ==",
      "diff_hunk": "@@ -1062,28 +1178,136 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n \n     Workspace ws(ptx);\n \n-    if (!PreChecks(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!PreChecks(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n-    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Tx was accepted, but not added\n     if (args.m_test_accept) {\n-        return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+        return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n     }\n \n-    if (!Finalize(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!Finalize(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+    return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+}\n+\n+PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::vector<CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    PackageValidationState package_state;\n+    const unsigned int package_count = txns.size();\n+\n+    // These context-free package limits can be checked before taking the mempool lock.\n+    if (package_count > MAX_PACKAGE_COUNT) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"too-many-transactions\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    const int64_t total_size = std::accumulate(txns.cbegin(), txns.cend(), 0,\n+                               [](int64_t sum, const auto& tx) { return sum + GetVirtualTransactionSize(*tx); });\n+    // If the package only contains 1 tx, it's better to report the policy violation on individual tx size.\n+    if (package_count > 1 && total_size > MAX_PACKAGE_SIZE * 1000) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"too-large\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    std::vector<Workspace> workspaces{};\n+    workspaces.reserve(package_count);\n+    {\n+        std::unordered_map<uint256, bool, SaltedTxidHasher> txids_seen;",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 271,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "9ce7b0f3850a0d69e81a68f18906a9d1aa4356fb",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You don't need a map here, you can just use a set and erase as you go:\r\n\r\n<details>\r\n<summary>Diff</summary>\r\n\r\n```diff\r\ndiff --git a/src/validation.cpp b/src/validation.cpp\r\nindex 0b429adfae..c72b5eee02 100644\r\n--- a/src/validation.cpp\r\n+++ b/src/validation.cpp\r\n@@ -1226,9 +1226,9 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\r\n     std::vector<Workspace> workspaces{};\r\n     workspaces.reserve(package_count);\r\n     {\r\n-        std::unordered_map<uint256, bool, SaltedTxidHasher> txids_seen;\r\n-        std::transform(txns.cbegin(), txns.cend(), std::inserter(txids_seen, txids_seen.end()),\r\n-                       [](const auto& tx){ return std::make_pair(tx->GetHash(), false); });\r\n+        std::unordered_set<uint256, SaltedTxidHasher> later_txs;\r\n+        std::transform(txns.cbegin(), txns.cend(), std::inserter(later_txs, later_txs.end()),\r\n+                       [](const auto& tx){ return tx->GetHash(); });\r\n \r\n         // Require the package to be sorted in order of dependency, i.e. parents appear before children.\r\n         // An unsorted package will fail anyway on missing-inputs, but it's better to quit earlier and\r\n@@ -1236,18 +1236,15 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\r\n         // spend nonexistent coins).\r\n         for (const auto& tx : txns) {\r\n             for (const auto& input : tx->vin) {\r\n-                auto it = txids_seen.find(input.prevout.hash);\r\n-                if (it == txids_seen.end()) {\r\n-                    // The parent is not in this package.\r\n-                    continue;\r\n-                } else if (!it->second) {\r\n+                auto it = later_txs.find(input.prevout.hash);\r\n+                if (it != later_txs.end()) {\r\n                     // The parent is a subsequent transaction in the package.\r\n                     package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-sorted\");\r\n                     return PackageMempoolAcceptResult(package_state, {});\r\n                 }\r\n             }\r\n-            // Mark this transaction as seen.\r\n-            txids_seen[tx->GetHash()] = true;\r\n+            // Remove from later_txs\r\n+            later_txs.erase(tx->GetHash());\r\n             workspaces.emplace_back(Workspace(tx));\r\n         }\r\n     }\r\n```\r\n\r\n</details>",
      "created_at": "2021-04-23T12:24:56Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r619177795",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619177795"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1229,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619376091",
      "pull_request_review_id": 643506255,
      "id": 619376091,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTM3NjA5MQ==",
      "diff_hunk": "@@ -1062,28 +1178,136 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n \n     Workspace ws(ptx);\n \n-    if (!PreChecks(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!PreChecks(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n-    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Tx was accepted, but not added\n     if (args.m_test_accept) {\n-        return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+        return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n     }\n \n-    if (!Finalize(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!Finalize(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+    return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+}\n+\n+PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::vector<CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    PackageValidationState package_state;\n+    const unsigned int package_count = txns.size();\n+\n+    // These context-free package limits can be checked before taking the mempool lock.\n+    if (package_count > MAX_PACKAGE_COUNT) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"too-many-transactions\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    const int64_t total_size = std::accumulate(txns.cbegin(), txns.cend(), 0,\n+                               [](int64_t sum, const auto& tx) { return sum + GetVirtualTransactionSize(*tx); });\n+    // If the package only contains 1 tx, it's better to report the policy violation on individual tx size.\n+    if (package_count > 1 && total_size > MAX_PACKAGE_SIZE * 1000) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"too-large\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    std::vector<Workspace> workspaces{};\n+    workspaces.reserve(package_count);\n+    {\n+        std::unordered_map<uint256, bool, SaltedTxidHasher> txids_seen;",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 271,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "9ce7b0f3850a0d69e81a68f18906a9d1aa4356fb",
      "in_reply_to_id": 619177795,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Or you could reverse iterate and add as you go:\r\n\r\n<details>\r\n<summary>CLICK HERE FOR CODE!</summary>\r\n\r\n```c++\r\n    {\r\n        std::unordered_set<uint256, SaltedTxidHasher> later_txs;\r\n\r\n        // Require the package to be sorted in order of dependency, i.e. parents appear before children.\r\n        // An unsorted package will fail anyway on missing-inputs, but it's better to quit earlier and\r\n        // fail on something less ambiguous (missing-inputs could also be an orphan or trying to\r\n        // spend nonexistent coins).\r\n        //\r\n        // Iterate through the package backwards, adding the txid to later_txs. If an earlier tx spends\r\n        // an output from later_txs, the package is mis-sorted.\r\n        for (auto txit = txns.crbegin(); txit != txns.crend(); ++txit) {\r\n            for (const auto& input : (*txit)->vin) {\r\n                if (auto it = later_txs.find(input.prevout.hash); it != later_txs.end()) {\r\n                    // The parent is a later transaction in the package.\r\n                    package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-sorted\");\r\n                    return PackageMempoolAcceptResult(package_state, {});\r\n                }\r\n            }\r\n            // Add to later_txs\r\n            later_txs.insert((*txit)->GetHash());\r\n        }\r\n    }\r\n\r\n    std::vector<Workspace> workspaces{};\r\n    workspaces.reserve(package_count);\r\n\r\n    std::transform(txns.cbegin(), txns.cend(), std::back_inserter(workspaces), [](const auto& tx) {\r\n        return Workspace(tx);\r\n    });\r\n```\r\n\r\n(note that we can't add to workspace as we iterate backwards, because it'd be reversed and it's slightly annoying to unreverse it)\r\n\r\n</details>",
      "created_at": "2021-04-23T17:10:24Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r619376091",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619376091"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1229,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619724814",
      "pull_request_review_id": 644075700,
      "id": 619724814,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTcyNDgxNA==",
      "diff_hunk": "@@ -0,0 +1,33 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_PACKAGES_H\n+#define BITCOIN_PACKAGES_H\n+\n+#include <vector>\n+\n+#include <consensus/validation.h>\n+#include <primitives/transaction.h>\n+\n+/** Default maximum number of transactions in a package. */\n+static constexpr uint32_t MAX_PACKAGE_COUNT{25};\n+/** Default maximum total virtual size of transactions in a package in KvB. */\n+static constexpr uint32_t MAX_PACKAGE_SIZE{101};",
      "path": "src/packages.h",
      "position": null,
      "original_position": 16,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "9ce7b0f3850a0d69e81a68f18906a9d1aa4356fb",
      "in_reply_to_id": 618629408,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think this project is aiming toward better support of second-layer applications. Given a lot of them are relying on trustless chain of transactions and those ones are necessarily made of segwit inputs, they're already using weight units, contrary to \"legacy\" applications.\r\n\r\nSticking to virtual bytes would make such L2 backends worst as you'll need to scale down your package to the vb unit to ensure you're respecting the limits.\r\n\r\nThat said, I don't think we need to decide now, we all agree the package API is unstable and we can change this back latter in its own PR. Current one is already a good move forward.\r\n\r\nTracking this point in #14895.",
      "created_at": "2021-04-24T23:54:20Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r619724814",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619724814"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619727969",
      "pull_request_review_id": 644077471,
      "id": 619727969,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTcyNzk2OQ==",
      "diff_hunk": "@@ -1062,28 +1178,130 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n \n     Workspace ws(ptx);\n \n-    if (!PreChecks(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!PreChecks(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n-    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Tx was accepted, but not added\n     if (args.m_test_accept) {\n-        return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+        return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n     }\n \n-    if (!Finalize(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!Finalize(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+    return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+}\n+\n+PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::vector<CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    PackageValidationState package_state;\n+    const unsigned int package_count = txns.size();\n+\n+    // These context-free package limits can be checked before taking the mempool lock.\n+    if (package_count > MAX_PACKAGE_COUNT) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"too-many-transactions\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    const int64_t total_size = std::accumulate(txns.cbegin(), txns.cend(), 0,\n+                               [](int64_t sum, const auto& tx) { return sum + GetVirtualTransactionSize(*tx); });\n+    if (total_size > MAX_PACKAGE_SIZE * 1000) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"too-large\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    std::vector<Workspace> workspaces{};\n+    workspaces.reserve(package_count);\n+    std::unordered_set<uint256, BlockHasher> txids;\n+\n+    // Require the package to be sorted in order of dependency, i.e. parents appear before children.\n+    // An unsorted package will fail anyway on missing-inputs, but it's better to quit earlier and\n+    // fail on something less ambiguous (missing-inputs could also be an orphan or trying to\n+    // spend nonexistent coins).\n+    for (const auto& tx : txns) {\n+        for (const auto& input : tx->vin) {\n+            if (txids.find(input.prevout.hash) == txids.end() &&\n+                std::find_if(txns.begin(), txns.end(),",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 278,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "b93442473f4f929912740682865397411e84be9b",
      "in_reply_to_id": 615308870,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That shouldn't matter since they're immutable in this context :)",
      "created_at": "2021-04-25T00:32:26Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r619727969",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619727969"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1237,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619728093",
      "pull_request_review_id": 644077549,
      "id": 619728093,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTcyODA5Mw==",
      "diff_hunk": "@@ -186,10 +200,13 @@ bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntr\n         staged_ancestors.erase(stage);\n         totalSizeWithAncestors += stageit->GetTxSize();\n \n-        if (stageit->GetSizeWithDescendants() + entry.GetTxSize() > limitDescendantSize) {\n+        // When multiple transactions are passed in, the ancestors and descendants of all transactions\n+        // considered together must be within limits even if they are not interdependent. This may be\n+        // stricter than the limits for each individual transaction.",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 80,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "9ce7b0f3850a0d69e81a68f18906a9d1aa4356fb",
      "in_reply_to_id": 618627239,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I agree -- it should be one connected component. The only \"quirk\" of this is that \"packages\" can get \"invalidated\" after a block is mined.",
      "created_at": "2021-04-25T00:34:19Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r619728093",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619728093"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 205,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619729306",
      "pull_request_review_id": 644078153,
      "id": 619729306,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTcyOTMwNg==",
      "diff_hunk": "@@ -1062,28 +1178,136 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n \n     Workspace ws(ptx);\n \n-    if (!PreChecks(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!PreChecks(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n-    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Tx was accepted, but not added\n     if (args.m_test_accept) {\n-        return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+        return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n     }\n \n-    if (!Finalize(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!Finalize(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+    return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+}\n+\n+PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::vector<CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    PackageValidationState package_state;\n+    const unsigned int package_count = txns.size();\n+\n+    // These context-free package limits can be checked before taking the mempool lock.\n+    if (package_count > MAX_PACKAGE_COUNT) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"too-many-transactions\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    const int64_t total_size = std::accumulate(txns.cbegin(), txns.cend(), 0,\n+                               [](int64_t sum, const auto& tx) { return sum + GetVirtualTransactionSize(*tx); });\n+    // If the package only contains 1 tx, it's better to report the policy violation on individual tx size.\n+    if (package_count > 1 && total_size > MAX_PACKAGE_SIZE * 1000) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"too-large\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    std::vector<Workspace> workspaces{};\n+    workspaces.reserve(package_count);\n+    {\n+        std::unordered_map<uint256, bool, SaltedTxidHasher> txids_seen;",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 271,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "9ce7b0f3850a0d69e81a68f18906a9d1aa4356fb",
      "in_reply_to_id": 619177795,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Clever!\r\n\r\nI guess the only reason to prefer the bool version is if we might handle in-package vs out of package parents differently in the future. Absent such a future need, I agree this works nicely!\r\n\r\nThe reverse iteration version should be a fair bit more efficient because we only need to hash each tx once for the set lookup, rather than 1x to create and 1x to remove, although it's a bit more complex.",
      "created_at": "2021-04-25T00:48:06Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r619729306",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619729306"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1229,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/620484823",
      "pull_request_review_id": 644914828,
      "id": 620484823,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDQ4NDgyMw==",
      "diff_hunk": "@@ -655,13 +767,17 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n                         break;\n                     }\n                 }\n-                if (fReplacementOptOut) {\n+                if (fReplacementOptOut || args.disallow_mempool_conflicts) {\n                     return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"txn-mempool-conflict\");\n                 }\n \n                 setConflicts.insert(ptxConflicting->GetHash());\n             }\n         }\n+        // Check for conflicts with transactions in the same package.\n+        if (m_view.PackageSpends(txin.prevout)) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 193,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "9ce7b0f3850a0d69e81a68f18906a9d1aa4356fb",
      "in_reply_to_id": 618615930,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good point, moved this to the beginning of `AcceptMultipleTransactions()` before taking the mempool lock",
      "created_at": "2021-04-26T17:03:04Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r620484823",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/620484823"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 778,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/620485462",
      "pull_request_review_id": 644915624,
      "id": 620485462,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDQ4NTQ2Mg==",
      "diff_hunk": "@@ -0,0 +1,33 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_PACKAGES_H\n+#define BITCOIN_PACKAGES_H",
      "path": "src/packages.h",
      "position": null,
      "original_position": 6,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "9ce7b0f3850a0d69e81a68f18906a9d1aa4356fb",
      "in_reply_to_id": 618630317,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Sure, moved to src/policy/packages.h",
      "created_at": "2021-04-26T17:03:56Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r620485462",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/620485462"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 6,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/620485641",
      "pull_request_review_id": 644915853,
      "id": 620485641,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDQ4NTY0MQ==",
      "diff_hunk": "@@ -47,4 +49,51 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_reject_coinbase, TestChain100Setup)\n     BOOST_CHECK(result.m_state.GetResult() == TxValidationResult::TX_CONSENSUS);\n }\n \n+// Placeholder transactions that have no meaning.\n+inline CTransactionRef create_placeholder_tx(size_t num_inputs, size_t num_outputs)\n+{\n+    CMutableTransaction mtx = CMutableTransaction();\n+    mtx.vin.resize(num_inputs);\n+    mtx.vout.resize(num_outputs);\n+    for (size_t i{0}; i < num_inputs; ++i) {\n+        mtx.vin[i].prevout.hash = InsecureRand256();\n+        mtx.vin[i].prevout.n = 0;\n+    }\n+    for (size_t o{0}; o < num_outputs; ++o) {\n+        mtx.vout[o].nValue = 1 * CENT;\n+        mtx.vout[o].scriptPubKey = CScript();\n+    }\n+    return MakeTransactionRef(mtx);\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(package_limits, TestChain100Setup)\n+{\n+    // Packages can't have more than 25 transactions.\n+    LOCK(cs_main);\n+    Package package_too_many;\n+    package_too_many.resize(MAX_PACKAGE_COUNT + 1);\n+    for (size_t i{0}; i < MAX_PACKAGE_COUNT + 1; ++i) {\n+        package_too_many.emplace_back(create_placeholder_tx(1, 1));\n+    }\n+    auto result_too_many = ProcessNewPackage(::ChainstateActive(), *m_node.mempool, package_too_many, /* test_accept */ true);\n+    BOOST_CHECK(result_too_many.m_state.IsInvalid());\n+    BOOST_CHECK_EQUAL(result_too_many.m_state.GetResult(), PackageValidationResult::PCKG_POLICY);\n+    BOOST_CHECK_EQUAL(result_too_many.m_state.GetRejectReason(), \"too-many-transactions\");\n+\n+    // Packages can't have a total size of more than 101KvB.\n+    CTransactionRef large_ptx = create_placeholder_tx(150, 150);\n+    Package package_too_large;\n+    auto size_large = GetVirtualTransactionSize(*large_ptx);\n+    size_t total_size{0};\n+    while (total_size < MAX_PACKAGE_SIZE * 1000) {",
      "path": "src/test/txvalidation_tests.cpp",
      "position": null,
      "original_position": 49,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "9ce7b0f3850a0d69e81a68f18906a9d1aa4356fb",
      "in_reply_to_id": 619070844,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good point! fixed",
      "created_at": "2021-04-26T17:04:14Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r620485641",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/620485641"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 88,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/620485858",
      "pull_request_review_id": 644916108,
      "id": 620485858,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDQ4NTg1OA==",
      "diff_hunk": "@@ -294,7 +295,6 @@ bool CheckSequenceLocks(CChainState& active_chainstate,\n     }\n     else {\n         // CoinsTip() contains the UTXO set for active_chainstate.m_chain.Tip()",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 35,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "9ce7b0f3850a0d69e81a68f18906a9d1aa4356fb",
      "in_reply_to_id": 619035752,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "fixed",
      "created_at": "2021-04-26T17:04:30Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r620485858",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/620485858"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 297,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/620486223",
      "pull_request_review_id": 644916498,
      "id": 620486223,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDQ4NjIyMw==",
      "diff_hunk": "@@ -263,14 +265,13 @@ bool TestLockPointValidity(CChain& active_chain, const LockPoints* lp)\n }\n \n bool CheckSequenceLocks(CChainState& active_chainstate,",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 19,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "9ce7b0f3850a0d69e81a68f18906a9d1aa4356fb",
      "in_reply_to_id": 619051657,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good point, I'm having it take a `CBlockIndex*` now",
      "created_at": "2021-04-26T17:04:57Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r620486223",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/620486223"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 267,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/620486567",
      "pull_request_review_id": 644916991,
      "id": 620486567,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDQ4NjU2Nw==",
      "diff_hunk": "@@ -246,6 +289,8 @@ bool TestLockPointValidity(CChain& active_chain, const LockPoints* lp) EXCLUSIVE\n \n /**\n  * Check if transaction will be BIP 68 final in the next block to be created.\n+ * @param[in]   viewMemPool     A CoinsView that provides access to relevant coins for",
      "path": "src/validation.h",
      "position": null,
      "original_position": 107,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "9ce7b0f3850a0d69e81a68f18906a9d1aa4356fb",
      "in_reply_to_id": 619052435,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "no reason other than wanting to keep the diff smol, changed the name to `coins_view`",
      "created_at": "2021-04-26T17:05:32Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r620486567",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/620486567"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 292,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/620488709",
      "pull_request_review_id": 644919707,
      "id": 620488709,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDQ4ODcwOQ==",
      "diff_hunk": "@@ -1062,28 +1178,136 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n \n     Workspace ws(ptx);\n \n-    if (!PreChecks(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!PreChecks(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n-    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Tx was accepted, but not added\n     if (args.m_test_accept) {\n-        return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+        return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n     }\n \n-    if (!Finalize(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!Finalize(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+    return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+}\n+\n+PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::vector<CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    PackageValidationState package_state;\n+    const unsigned int package_count = txns.size();\n+\n+    // These context-free package limits can be checked before taking the mempool lock.\n+    if (package_count > MAX_PACKAGE_COUNT) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"too-many-transactions\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    const int64_t total_size = std::accumulate(txns.cbegin(), txns.cend(), 0,\n+                               [](int64_t sum, const auto& tx) { return sum + GetVirtualTransactionSize(*tx); });\n+    // If the package only contains 1 tx, it's better to report the policy violation on individual tx size.\n+    if (package_count > 1 && total_size > MAX_PACKAGE_SIZE * 1000) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"too-large\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    std::vector<Workspace> workspaces{};\n+    workspaces.reserve(package_count);\n+    {\n+        std::unordered_map<uint256, bool, SaltedTxidHasher> txids_seen;\n+        std::transform(txns.cbegin(), txns.cend(), std::inserter(txids_seen, txids_seen.end()),\n+                       [](const auto& tx){ return std::make_pair(tx->GetHash(), false); });\n+\n+        // Require the package to be sorted in order of dependency, i.e. parents appear before children.\n+        // An unsorted package will fail anyway on missing-inputs, but it's better to quit earlier and\n+        // fail on something less ambiguous (missing-inputs could also be an orphan or trying to\n+        // spend nonexistent coins).\n+        for (const auto& tx : txns) {\n+            for (const auto& input : tx->vin) {\n+                auto it = txids_seen.find(input.prevout.hash);\n+                if (it == txids_seen.end()) {\n+                    // The parent is not in this package.\n+                    continue;\n+                } else if (!it->second) {\n+                    // The parent is a subsequent transaction in the package.\n+                    package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-sorted\");\n+                    return PackageMempoolAcceptResult(package_state, {});\n+                }\n+            }\n+            // Mark this transaction as seen.\n+            txids_seen[tx->GetHash()] = true;\n+            workspaces.emplace_back(Workspace(tx));\n+        }\n+    }\n+\n+    LOCK(m_pool.cs);\n+\n+    std::map<const uint256, const MempoolAcceptResult> results;\n+    // Do all PreChecks first and fail fast to avoid running expensive script checks when unnecessary.\n+    for (Workspace& ws : workspaces) {\n+        if (!PreChecks(args, ws)) {\n+            package_state.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n+            // Exit early to avoid doing pointless work. Update the failed tx result; the rest are unfinished.\n+            results.emplace(ws.m_ptx->GetWitnessHash(), MempoolAcceptResult::Failure(ws.m_state));\n+            return PackageMempoolAcceptResult(package_state, std::move(results));\n+        }\n+        m_view.PackageAddTransaction(ws.m_ptx);\n+    }\n+\n+    // We don't want to modify the workspace entries and won't use the set of ancestors returned.\n+    std::vector<CTxMemPoolEntry> dummy_entries;\n+    std::transform(workspaces.cbegin(), workspaces.cend(), std::back_inserter(dummy_entries),\n+                   [](const auto& ws) { return CTxMemPoolEntry(*ws.m_entry); });\n+    CTxMemPool::setEntries dummy_ancestors;\n+    std::string err_string;\n+    if (!m_pool.CalculateMemPoolAncestors(dummy_entries, dummy_ancestors, m_limit_ancestors,\n+                                          m_limit_ancestor_size, m_limit_descendants,\n+                                          m_limit_descendant_size, err_string)) {\n+        // All transactions must have individually passed mempool ancestor and dsecendant limits\n+        // inside of PreChecks(). Figuring out which transaction to attribute this failure to may\n+        // be implementation-dependent, and it's likely to be multiple transactions because we\n+        // evaluated all of them together. Just return this failure result for all transactions.\n+        for (auto& ws : workspaces) {\n+            ws.m_state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"too-long-mempool-chain\", err_string);\n+            results.emplace(ws.m_ptx->GetWitnessHash(), MempoolAcceptResult::Failure(ws.m_state));\n+        }\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-too-long-mempool-chain\");\n+        return PackageMempoolAcceptResult(package_state, std::move(results));\n+    }\n+\n+    // We have now verified all inputs are available and there are no conflicts in the package by\n+    // marking coins (temporarily) spent in m_view. However, since script checks will assert that\n+    // each coin has not been spent as a sanity check, we need to clear m_view.m_temp_spent so that\n+    // script checks don't fail on those asserts.\n+    m_view.ClearTemporarySpends();\n+\n+    for (Workspace& ws : workspaces) {\n+        PrecomputedTransactionData txdata;\n+        if (!PolicyScriptChecks(args, ws, txdata)) {\n+            // Exit early to avoid doing pointless work. Update the failed tx result; the rest are unfinished.\n+            package_state.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n+            results.emplace(ws.m_ptx->GetWitnessHash(), MempoolAcceptResult::Failure(ws.m_state));\n+            return PackageMempoolAcceptResult(package_state, std::move(results));\n+        }\n+        // When test_accept=true, transactions that pass PolicyScriptChecks are valid because there are\n+        // no further mempool checks (passing PolicyScriptChecks implies passing ConsensusScriptChecks).",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 347,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "9ce7b0f3850a0d69e81a68f18906a9d1aa4356fb",
      "in_reply_to_id": 619122115,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "True. I've updated it to be gated on `if(test_accept)` so that this code block would still be correct with real package accept.",
      "created_at": "2021-04-26T17:08:34Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r620488709",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/620488709"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1305,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/620489341",
      "pull_request_review_id": 644920520,
      "id": 620489341,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDQ4OTM0MQ==",
      "diff_hunk": "@@ -932,62 +937,74 @@ static RPCHelpMan testmempoolaccept()\n         UniValueType(), // VNUM or VSTR, checked inside AmountFromValue()\n     });\n \n-    if (request.params[0].get_array().size() != 1) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array must contain exactly one raw transaction for now\");\n+    if (request.params[0].get_array().size() > MAX_PACKAGE_COUNT) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array cannot contain more than \" + ToString(MAX_PACKAGE_COUNT) + \" transactions.\");\n     }\n \n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_array()[0].get_str())) {\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n-    }\n-    CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-\n+    const UniValue raw_transactions = request.params[0].get_array();\n     const CFeeRate max_raw_tx_fee_rate = request.params[1].isNull() ?\n                                              DEFAULT_MAX_RAW_TX_FEE_RATE :\n                                              CFeeRate(AmountFromValue(request.params[1]));\n \n-    NodeContext& node = EnsureAnyNodeContext(request.context);\n+    std::vector<CTransactionRef> txns;\n+    for (const auto& rawtx : raw_transactions.getValues()) {\n+        CMutableTransaction mtx;\n+        if (!DecodeHexTx(mtx, rawtx.get_str())) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n+        }\n+        txns.emplace_back(MakeTransactionRef(std::move(mtx)));\n+    }\n \n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n     CTxMemPool& mempool = EnsureMemPool(node);\n-    int64_t virtual_size = GetVirtualTransactionSize(*tx);\n-    CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n-\n-    UniValue result(UniValue::VARR);\n-    UniValue result_0(UniValue::VOBJ);\n-    result_0.pushKV(\"txid\", tx->GetHash().GetHex());\n-    result_0.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n-\n-    ChainstateManager& chainman = EnsureChainman(node);\n-    const MempoolAcceptResult accept_result = WITH_LOCK(cs_main, return AcceptToMemoryPool(chainman.ActiveChainstate(), mempool, std::move(tx),\n-                                                  false /* bypass_limits */, /* test_accept */ true));\n-\n-    // Only return the fee and vsize if the transaction would pass ATMP.\n-    // These can be used to calculate the feerate.\n-    if (accept_result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-        const CAmount fee = accept_result.m_base_fees.value();\n-        // Check that fee does not exceed maximum fee\n-        if (max_raw_tx_fee && fee > max_raw_tx_fee) {\n-            result_0.pushKV(\"allowed\", false);\n-            result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n-        } else {\n-            result_0.pushKV(\"allowed\", true);\n-            result_0.pushKV(\"vsize\", virtual_size);\n-            UniValue fees(UniValue::VOBJ);\n-            fees.pushKV(\"base\", ValueFromAmount(fee));\n-            result_0.pushKV(\"fees\", fees);\n+    CChainState& chainstate = EnsureChainman(node).ActiveChainstate();\n+    const PackageMempoolAcceptResult validation_result = txns.size() > 1\n+        ? WITH_LOCK(cs_main, return ProcessNewPackage(chainstate, mempool, txns, /* test_accept */ true))\n+        : WITH_LOCK(cs_main, return PackageMempoolAcceptResult(txns[0]->GetWitnessHash(),\n+                             AcceptToMemoryPool(chainstate, mempool, txns[0], /* bypass_limits */ false,  /* test_accept */ true)));\n+\n+    UniValue rpc_result(UniValue::VARR);\n+\n+    for (auto tx : txns) {\n+        UniValue result_inner(UniValue::VOBJ);\n+        result_inner.pushKV(\"txid\", tx->GetHash().GetHex());\n+        result_inner.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n+        auto it = validation_result.m_tx_results.find(tx->GetWitnessHash());\n+        if (it == validation_result.m_tx_results.end()) {\n+            // Validation unfinished. Just return the txid and wtxid.\n+            rpc_result.push_back(result_inner);\n+            continue;\n         }\n-        result.push_back(std::move(result_0));\n-    } else {\n-        result_0.pushKV(\"allowed\", false);\n-        const TxValidationState state = accept_result.m_state;\n-        if (state.GetResult() == TxValidationResult::TX_MISSING_INPUTS) {\n-            result_0.pushKV(\"reject-reason\", \"missing-inputs\");\n+        const auto& accept_result = it->second;\n+        if (accept_result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n+            const CAmount fee = accept_result.m_base_fees.value();\n+            // Check that fee does not exceed maximum fee\n+            const int64_t virtual_size = GetVirtualTransactionSize(*tx);\n+            const CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n+            if (max_raw_tx_fee && fee > max_raw_tx_fee) {\n+                result_inner.pushKV(\"allowed\", false);\n+                result_inner.pushKV(\"reject-reason\", \"max-fee-exceeded\");",
      "path": "src/rpc/rawtransaction.cpp",
      "position": 149,
      "original_position": 130,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "9ce7b0f3850a0d69e81a68f18906a9d1aa4356fb",
      "in_reply_to_id": 619141139,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oof, yeah that's super weird... Not sure if it'd be better to `break`, though, because then we'd be missing B altogether 🤔 will think about this more",
      "created_at": "2021-04-26T17:09:23Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r620489341",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/620489341"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1000,
      "original_line": 1000,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/620490191",
      "pull_request_review_id": 644921538,
      "id": 620490191,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDQ5MDE5MQ==",
      "diff_hunk": "@@ -0,0 +1,514 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"RPCs that handle raw transaction packages.\"\"\"\n+\n+from decimal import Decimal\n+from io import BytesIO\n+import random\n+\n+from test_framework.address import ADDRESS_BCRT1_P2WSH_OP_TRUE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    BIP125_SEQUENCE_NUMBER,\n+    COIN,\n+    CTransaction,\n+    CTxInWitness,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_TRUE,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+    hex_str_to_bytes,\n+)\n+\n+class RPCPackagesTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.privkeys = [node.get_deterministic_priv_key().key]\n+        self.address = node.get_deterministic_priv_key().address\n+        self.coins = []\n+        # The last 100 coinbase transactions are premature\n+        for b in node.generatetoaddress(200, self.address)[:100]:\n+            coinbase = node.getblock(blockhash=b, verbosity=2)[\"tx\"][0]\n+            self.coins.append({\n+                \"txid\": coinbase[\"txid\"],\n+                \"amount\": coinbase[\"vout\"][0][\"value\"],\n+                \"scriptPubKey\": coinbase[\"vout\"][0][\"scriptPubKey\"],\n+            })\n+\n+        # Create some transactions that can be reused throughout the test. Never submit these to mempool.\n+        self.independent_txns_hex = []\n+        self.independent_txns_testres = []\n+        for _ in range(3):\n+            coin = self.coins.pop()\n+            rawtx = node.createrawtransaction([{\"txid\" : coin[\"txid\"], \"vout\" : 0}],\n+                {self.address : coin[\"amount\"] - Decimal(\"0.0001\")})\n+            signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n+            assert signedtx[\"complete\"]\n+            testres = node.testmempoolaccept([signedtx[\"hex\"]])\n+            assert testres[0][\"allowed\"]\n+            self.independent_txns_hex.append(signedtx[\"hex\"])\n+            # testmempoolaccept returns a list of length one, avoid creating a 2D list\n+            self.independent_txns_testres.append(testres[0])\n+\n+        self.test_independent()\n+        self.test_chain()\n+        self.test_chain_limits()\n+        self.test_descendant_limits()\n+        self.test_ancestor_limits()\n+        self.test_multiple_children()\n+        self.test_multiple_parents()\n+        self.test_conflicting()\n+\n+    def chain_transaction(self, parent_txid, value, n=0, parent_locking_script=None):\n+        \"\"\"Build a transaction that spends parent_txid.vout[n] and produces one output with amount=value.\n+        Return tuple (CTransaction object, raw hex, scriptPubKey of the output created).\n+        \"\"\"\n+        node = self.nodes[0]\n+        inputs = [{\"txid\" : parent_txid, \"vout\" : n}]\n+        outputs = {self.address : value}\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+        prevtxs = [{\n+            \"txid\": parent_txid,\n+            \"vout\": n,\n+            \"scriptPubKey\": parent_locking_script,\n+            \"amount\": value + Decimal(\"0.0001\"),",
      "path": "test/functional/rpc_packages.py",
      "position": null,
      "original_position": 84,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "9ce7b0f3850a0d69e81a68f18906a9d1aa4356fb",
      "in_reply_to_id": 619152627,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Changed it to output the `value` as well, and just do 1 fee deduction inside `chain_transaction`",
      "created_at": "2021-04-26T17:10:29Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r620490191",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/620490191"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 84,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/620490530",
      "pull_request_review_id": 644922012,
      "id": 620490530,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDQ5MDUzMA==",
      "diff_hunk": "@@ -0,0 +1,514 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"RPCs that handle raw transaction packages.\"\"\"\n+\n+from decimal import Decimal\n+from io import BytesIO\n+import random\n+\n+from test_framework.address import ADDRESS_BCRT1_P2WSH_OP_TRUE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    BIP125_SEQUENCE_NUMBER,\n+    COIN,\n+    CTransaction,\n+    CTxInWitness,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_TRUE,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+    hex_str_to_bytes,\n+)\n+\n+class RPCPackagesTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.privkeys = [node.get_deterministic_priv_key().key]\n+        self.address = node.get_deterministic_priv_key().address\n+        self.coins = []\n+        # The last 100 coinbase transactions are premature\n+        for b in node.generatetoaddress(200, self.address)[:100]:\n+            coinbase = node.getblock(blockhash=b, verbosity=2)[\"tx\"][0]\n+            self.coins.append({\n+                \"txid\": coinbase[\"txid\"],\n+                \"amount\": coinbase[\"vout\"][0][\"value\"],\n+                \"scriptPubKey\": coinbase[\"vout\"][0][\"scriptPubKey\"],\n+            })\n+\n+        # Create some transactions that can be reused throughout the test. Never submit these to mempool.\n+        self.independent_txns_hex = []\n+        self.independent_txns_testres = []\n+        for _ in range(3):\n+            coin = self.coins.pop()\n+            rawtx = node.createrawtransaction([{\"txid\" : coin[\"txid\"], \"vout\" : 0}],\n+                {self.address : coin[\"amount\"] - Decimal(\"0.0001\")})\n+            signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n+            assert signedtx[\"complete\"]\n+            testres = node.testmempoolaccept([signedtx[\"hex\"]])\n+            assert testres[0][\"allowed\"]\n+            self.independent_txns_hex.append(signedtx[\"hex\"])\n+            # testmempoolaccept returns a list of length one, avoid creating a 2D list\n+            self.independent_txns_testres.append(testres[0])\n+\n+        self.test_independent()\n+        self.test_chain()\n+        self.test_chain_limits()\n+        self.test_descendant_limits()\n+        self.test_ancestor_limits()\n+        self.test_multiple_children()\n+        self.test_multiple_parents()\n+        self.test_conflicting()\n+\n+    def chain_transaction(self, parent_txid, value, n=0, parent_locking_script=None):\n+        \"\"\"Build a transaction that spends parent_txid.vout[n] and produces one output with amount=value.\n+        Return tuple (CTransaction object, raw hex, scriptPubKey of the output created).\n+        \"\"\"\n+        node = self.nodes[0]\n+        inputs = [{\"txid\" : parent_txid, \"vout\" : n}]\n+        outputs = {self.address : value}\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+        prevtxs = [{\n+            \"txid\": parent_txid,\n+            \"vout\": n,\n+            \"scriptPubKey\": parent_locking_script,\n+            \"amount\": value + Decimal(\"0.0001\"),\n+        }] if parent_locking_script else None\n+        signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys, prevtxs=prevtxs)\n+        tx = CTransaction()\n+        assert signedtx[\"complete\"]\n+        tx.deserialize(BytesIO(hex_str_to_bytes(signedtx[\"hex\"])))\n+        return (tx, signedtx[\"hex\"], tx.vout[0].scriptPubKey.hex())\n+\n+    def test_independent(self):\n+        self.log.info(\"Test multiple independent transactions in a package\")\n+        node = self.nodes[0]\n+        assert_equal(self.independent_txns_testres, node.testmempoolaccept(rawtxs=self.independent_txns_hex))\n+\n+        self.log.info(\"Test an otherwise valid package with an extra garbage tx appended\")\n+        garbage_tx = node.createrawtransaction([{\"txid\": \"00\" * 32, \"vout\": 5}], {self.address: 1})\n+        tx = CTransaction()\n+        tx.deserialize(BytesIO(hex_str_to_bytes(garbage_tx)))\n+        testres_bad = node.testmempoolaccept(self.independent_txns_hex + [garbage_tx])\n+        testres_independent_ids = [{\"txid\": res[\"txid\"], \"wtxid\": res[\"wtxid\"]} for res in self.independent_txns_testres]\n+        assert_equal(testres_bad, testres_independent_ids + [\n+            {\"txid\": tx.rehash(), \"wtxid\": tx.getwtxid(), \"allowed\": False, \"reject-reason\": \"missing-inputs\"}\n+        ])\n+\n+        self.log.info(\"Check testmempoolaccept tells us when some transactions completed validation successfully\")\n+        coin = self.coins.pop()\n+        tx_bad_sig_hex = node.createrawtransaction([{\"txid\" : coin[\"txid\"], \"vout\" : 0}],\n+                                           {self.address : coin[\"amount\"] - Decimal(\"0.0001\")})\n+        tx_bad_sig = CTransaction()\n+        tx_bad_sig.deserialize(BytesIO(hex_str_to_bytes(tx_bad_sig_hex)))\n+        testres_bad_sig = node.testmempoolaccept(self.independent_txns_hex + [tx_bad_sig_hex])\n+        assert_equal(testres_bad_sig, self.independent_txns_testres + [{\n+            \"txid\": tx_bad_sig.rehash(),\n+            \"wtxid\": tx_bad_sig.getwtxid(), \"allowed\": False,\n+            \"reject-reason\": \"mandatory-script-verify-flag-failed (Operation not valid with the current stack size)\"\n+        }])\n+\n+        self.log.info(\"Check testmempoolaccept reports txns in packages that exceed max feerate\")\n+        coin = self.coins.pop()\n+        tx_high_fee_raw = node.createrawtransaction([{\"txid\" : coin[\"txid\"], \"vout\" : 0}],\n+                                           {self.address : coin[\"amount\"] - Decimal(\"0.999\")})\n+        tx_high_fee_signed = node.signrawtransactionwithkey(hexstring=tx_high_fee_raw, privkeys=self.privkeys)\n+        assert tx_high_fee_signed[\"complete\"]\n+        tx_high_fee = CTransaction()\n+        tx_high_fee.deserialize(BytesIO(hex_str_to_bytes(tx_high_fee_signed[\"hex\"])))\n+        testres_high_fee = node.testmempoolaccept([tx_high_fee_signed[\"hex\"]])\n+        assert_equal(testres_high_fee, [\n+            {\"txid\": tx_high_fee.rehash(), \"wtxid\": tx_high_fee.getwtxid(), \"allowed\": False, \"reject-reason\": \"max-fee-exceeded\"}\n+        ])\n+        testres_package_high_fee = node.testmempoolaccept(self.independent_txns_hex + [tx_high_fee_signed[\"hex\"]])\n+        assert_equal(testres_package_high_fee, self.independent_txns_testres + testres_high_fee)\n+\n+    def test_chain(self):\n+        node = self.nodes[0]\n+        first_coin = self.coins.pop()\n+\n+        # Chain of 25 transactions\n+        parent_locking_script = None\n+        txid = first_coin[\"txid\"]\n+        chain_hex = []\n+        chain_txns = []\n+        value = first_coin[\"amount\"]\n+\n+        for _ in range(25):\n+            value -= Decimal(\"0.0001\") # Deduct reasonable fee\n+            (tx, txhex, parent_locking_script) = self.chain_transaction(txid, value, 0, parent_locking_script)\n+            txid = tx.rehash()\n+            chain_hex.append(txhex)\n+            chain_txns.append(tx)\n+\n+        self.log.info(\"Check that testmempoolaccept requires packages to be sorted by dependency\")\n+        assert_equal(node.testmempoolaccept(rawtxs=chain_hex[::-1]),\n+                     [{\"txid\": tx.rehash(), \"wtxid\": tx.getwtxid()} for tx in chain_txns[::-1]])\n+\n+        self.log.info(\"Testmempoolaccept a chain of 25 transactions\")\n+        testres_multiple = node.testmempoolaccept(rawtxs=chain_hex)\n+\n+        testres_single = []\n+        # Test accept and then submit each one individually, which should be identical to package test accept\n+        for rawtx in chain_hex:\n+            testres = node.testmempoolaccept([rawtx])\n+            testres_single.append(testres[0])\n+            # Submit the transaction now so its child should have no problem validating\n+            node.sendrawtransaction(rawtx)\n+        assert_equal(testres_single, testres_multiple)\n+\n+        # Clean up by clearing the mempool\n+        node.generate(1)\n+\n+    def test_chain_limits_helper(self, mempool_count, package_count):\n+        node = self.nodes[0]\n+        first_coin = self.coins.pop()\n+        parent_locking_script = None\n+        txid = first_coin[\"txid\"]\n+        chain_hex = []\n+        chain_txns = []\n+        value = first_coin[\"amount\"]\n+\n+        for i in range(mempool_count + package_count):\n+            value -= Decimal(\"0.0001\") # Deduct reasonable fee\n+            (tx, txhex, parent_locking_script) = self.chain_transaction(txid, value, 0, parent_locking_script)\n+            txid = tx.rehash()\n+            if i < mempool_count:\n+                node.sendrawtransaction(txhex)\n+                assert_equal(node.getrawmempool(verbose=True)[txid][\"ancestorcount\"], i + 1)\n+            else:\n+                chain_hex.append(txhex)\n+                chain_txns.append(tx)\n+        testres_too_long = node.testmempoolaccept(rawtxs=chain_hex)\n+        for txres in testres_too_long:\n+            assert_equal(txres[\"reject-reason\"], \"too-long-mempool-chain\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=chain_hex)])\n+\n+    def test_chain_limits(self):\n+        \"\"\"Create chains from mempool and package transactions that are longer than 25,\n+        but only if both in-mempool and in-package transactions are considered together.\n+        This checks that both mempool and in-package transactions are taken into account when\n+        calculating ancestors/descendant limits.\n+        \"\"\"\n+        self.log.info(\"Check that in-package ancestors count for mempool ancestor limits\")\n+\n+        # 24 transactions in the mempool and 2 in the package. The parent in the package has\n+        # 24 in-mempool ancestors and 1 in-package descendant. The child has 0 direct parents\n+        # in the mempool, but 25 in-mempool and in-package ancestors in total.\n+        self.test_chain_limits_helper(24, 2)\n+        # 2 transactions in the mempool and 24 in the package.\n+        self.test_chain_limits_helper(2, 24)\n+        # 13 transactions in the mempool and 13 in the package.\n+        self.test_chain_limits_helper(13, 13)\n+\n+    def test_descendant_limits(self):\n+        \"\"\"Create an 'A' shaped package with 25 transactions in the mempool and 2 in the package:\n+                    M1\n+                   ^  ^\n+                 M2a  M2b\n+                .       .\n+               .         .\n+              .           .\n+             M11a          ^\n+            ^              M12b\n+           ^                 ^\n+          Pa                  Pb\n+        The top ancestor in the package exceeds descendant limits but only if the in-mempool and in-package\n+        descendants are all considered together (24 including in-mempool descendants and 26 including both\n+        package transactions).\n+        \"\"\"\n+        node = self.nodes[0]\n+        self.log.info(\"Check that in-mempool and in-package descendants are calculated properly in packages\")\n+        # Top parent in mempool, M1\n+        first_coin = self.coins.pop()\n+        parent_value = (first_coin[\"amount\"] - Decimal(\"0.0002\")) / 2 # Deduct reasonable fee and make 2 outputs\n+        inputs = [{\"txid\" : first_coin[\"txid\"], \"vout\" : 0}]\n+        outputs = [{self.address : parent_value}, {ADDRESS_BCRT1_P2WSH_OP_TRUE : parent_value}]",
      "path": "test/functional/rpc_packages.py",
      "position": null,
      "original_position": 238,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "9ce7b0f3850a0d69e81a68f18906a9d1aa4356fb",
      "in_reply_to_id": 619156552,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah, iirc you can't have duplicate addresses in outputs.",
      "created_at": "2021-04-26T17:11:02Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r620490530",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/620490530"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 245,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/620491599",
      "pull_request_review_id": 644923316,
      "id": 620491599,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDQ5MTU5OQ==",
      "diff_hunk": "@@ -0,0 +1,514 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"RPCs that handle raw transaction packages.\"\"\"\n+\n+from decimal import Decimal\n+from io import BytesIO\n+import random\n+\n+from test_framework.address import ADDRESS_BCRT1_P2WSH_OP_TRUE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    BIP125_SEQUENCE_NUMBER,\n+    COIN,\n+    CTransaction,\n+    CTxInWitness,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_TRUE,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+    hex_str_to_bytes,\n+)\n+\n+class RPCPackagesTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.privkeys = [node.get_deterministic_priv_key().key]\n+        self.address = node.get_deterministic_priv_key().address\n+        self.coins = []\n+        # The last 100 coinbase transactions are premature\n+        for b in node.generatetoaddress(200, self.address)[:100]:\n+            coinbase = node.getblock(blockhash=b, verbosity=2)[\"tx\"][0]\n+            self.coins.append({\n+                \"txid\": coinbase[\"txid\"],\n+                \"amount\": coinbase[\"vout\"][0][\"value\"],\n+                \"scriptPubKey\": coinbase[\"vout\"][0][\"scriptPubKey\"],\n+            })\n+\n+        # Create some transactions that can be reused throughout the test. Never submit these to mempool.\n+        self.independent_txns_hex = []\n+        self.independent_txns_testres = []\n+        for _ in range(3):\n+            coin = self.coins.pop()\n+            rawtx = node.createrawtransaction([{\"txid\" : coin[\"txid\"], \"vout\" : 0}],\n+                {self.address : coin[\"amount\"] - Decimal(\"0.0001\")})\n+            signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n+            assert signedtx[\"complete\"]\n+            testres = node.testmempoolaccept([signedtx[\"hex\"]])\n+            assert testres[0][\"allowed\"]\n+            self.independent_txns_hex.append(signedtx[\"hex\"])\n+            # testmempoolaccept returns a list of length one, avoid creating a 2D list\n+            self.independent_txns_testres.append(testres[0])\n+\n+        self.test_independent()\n+        self.test_chain()\n+        self.test_chain_limits()\n+        self.test_descendant_limits()\n+        self.test_ancestor_limits()\n+        self.test_multiple_children()\n+        self.test_multiple_parents()\n+        self.test_conflicting()\n+\n+    def chain_transaction(self, parent_txid, value, n=0, parent_locking_script=None):\n+        \"\"\"Build a transaction that spends parent_txid.vout[n] and produces one output with amount=value.\n+        Return tuple (CTransaction object, raw hex, scriptPubKey of the output created).\n+        \"\"\"\n+        node = self.nodes[0]\n+        inputs = [{\"txid\" : parent_txid, \"vout\" : n}]\n+        outputs = {self.address : value}\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+        prevtxs = [{\n+            \"txid\": parent_txid,\n+            \"vout\": n,\n+            \"scriptPubKey\": parent_locking_script,\n+            \"amount\": value + Decimal(\"0.0001\"),\n+        }] if parent_locking_script else None\n+        signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys, prevtxs=prevtxs)\n+        tx = CTransaction()\n+        assert signedtx[\"complete\"]\n+        tx.deserialize(BytesIO(hex_str_to_bytes(signedtx[\"hex\"])))\n+        return (tx, signedtx[\"hex\"], tx.vout[0].scriptPubKey.hex())\n+\n+    def test_independent(self):\n+        self.log.info(\"Test multiple independent transactions in a package\")\n+        node = self.nodes[0]\n+        assert_equal(self.independent_txns_testres, node.testmempoolaccept(rawtxs=self.independent_txns_hex))\n+\n+        self.log.info(\"Test an otherwise valid package with an extra garbage tx appended\")\n+        garbage_tx = node.createrawtransaction([{\"txid\": \"00\" * 32, \"vout\": 5}], {self.address: 1})\n+        tx = CTransaction()\n+        tx.deserialize(BytesIO(hex_str_to_bytes(garbage_tx)))\n+        testres_bad = node.testmempoolaccept(self.independent_txns_hex + [garbage_tx])\n+        testres_independent_ids = [{\"txid\": res[\"txid\"], \"wtxid\": res[\"wtxid\"]} for res in self.independent_txns_testres]\n+        assert_equal(testres_bad, testres_independent_ids + [\n+            {\"txid\": tx.rehash(), \"wtxid\": tx.getwtxid(), \"allowed\": False, \"reject-reason\": \"missing-inputs\"}\n+        ])\n+\n+        self.log.info(\"Check testmempoolaccept tells us when some transactions completed validation successfully\")\n+        coin = self.coins.pop()\n+        tx_bad_sig_hex = node.createrawtransaction([{\"txid\" : coin[\"txid\"], \"vout\" : 0}],\n+                                           {self.address : coin[\"amount\"] - Decimal(\"0.0001\")})\n+        tx_bad_sig = CTransaction()\n+        tx_bad_sig.deserialize(BytesIO(hex_str_to_bytes(tx_bad_sig_hex)))\n+        testres_bad_sig = node.testmempoolaccept(self.independent_txns_hex + [tx_bad_sig_hex])\n+        assert_equal(testres_bad_sig, self.independent_txns_testres + [{\n+            \"txid\": tx_bad_sig.rehash(),\n+            \"wtxid\": tx_bad_sig.getwtxid(), \"allowed\": False,\n+            \"reject-reason\": \"mandatory-script-verify-flag-failed (Operation not valid with the current stack size)\"\n+        }])\n+\n+        self.log.info(\"Check testmempoolaccept reports txns in packages that exceed max feerate\")\n+        coin = self.coins.pop()\n+        tx_high_fee_raw = node.createrawtransaction([{\"txid\" : coin[\"txid\"], \"vout\" : 0}],\n+                                           {self.address : coin[\"amount\"] - Decimal(\"0.999\")})\n+        tx_high_fee_signed = node.signrawtransactionwithkey(hexstring=tx_high_fee_raw, privkeys=self.privkeys)\n+        assert tx_high_fee_signed[\"complete\"]\n+        tx_high_fee = CTransaction()\n+        tx_high_fee.deserialize(BytesIO(hex_str_to_bytes(tx_high_fee_signed[\"hex\"])))\n+        testres_high_fee = node.testmempoolaccept([tx_high_fee_signed[\"hex\"]])\n+        assert_equal(testres_high_fee, [\n+            {\"txid\": tx_high_fee.rehash(), \"wtxid\": tx_high_fee.getwtxid(), \"allowed\": False, \"reject-reason\": \"max-fee-exceeded\"}\n+        ])\n+        testres_package_high_fee = node.testmempoolaccept(self.independent_txns_hex + [tx_high_fee_signed[\"hex\"]])\n+        assert_equal(testres_package_high_fee, self.independent_txns_testres + testres_high_fee)\n+\n+    def test_chain(self):\n+        node = self.nodes[0]\n+        first_coin = self.coins.pop()\n+\n+        # Chain of 25 transactions\n+        parent_locking_script = None\n+        txid = first_coin[\"txid\"]\n+        chain_hex = []\n+        chain_txns = []\n+        value = first_coin[\"amount\"]\n+\n+        for _ in range(25):\n+            value -= Decimal(\"0.0001\") # Deduct reasonable fee\n+            (tx, txhex, parent_locking_script) = self.chain_transaction(txid, value, 0, parent_locking_script)\n+            txid = tx.rehash()\n+            chain_hex.append(txhex)\n+            chain_txns.append(tx)\n+\n+        self.log.info(\"Check that testmempoolaccept requires packages to be sorted by dependency\")\n+        assert_equal(node.testmempoolaccept(rawtxs=chain_hex[::-1]),\n+                     [{\"txid\": tx.rehash(), \"wtxid\": tx.getwtxid()} for tx in chain_txns[::-1]])\n+\n+        self.log.info(\"Testmempoolaccept a chain of 25 transactions\")\n+        testres_multiple = node.testmempoolaccept(rawtxs=chain_hex)\n+\n+        testres_single = []\n+        # Test accept and then submit each one individually, which should be identical to package test accept\n+        for rawtx in chain_hex:\n+            testres = node.testmempoolaccept([rawtx])\n+            testres_single.append(testres[0])\n+            # Submit the transaction now so its child should have no problem validating\n+            node.sendrawtransaction(rawtx)\n+        assert_equal(testres_single, testres_multiple)\n+\n+        # Clean up by clearing the mempool\n+        node.generate(1)\n+\n+    def test_chain_limits_helper(self, mempool_count, package_count):\n+        node = self.nodes[0]\n+        first_coin = self.coins.pop()\n+        parent_locking_script = None\n+        txid = first_coin[\"txid\"]\n+        chain_hex = []\n+        chain_txns = []\n+        value = first_coin[\"amount\"]\n+\n+        for i in range(mempool_count + package_count):\n+            value -= Decimal(\"0.0001\") # Deduct reasonable fee\n+            (tx, txhex, parent_locking_script) = self.chain_transaction(txid, value, 0, parent_locking_script)\n+            txid = tx.rehash()\n+            if i < mempool_count:\n+                node.sendrawtransaction(txhex)\n+                assert_equal(node.getrawmempool(verbose=True)[txid][\"ancestorcount\"], i + 1)\n+            else:\n+                chain_hex.append(txhex)\n+                chain_txns.append(tx)\n+        testres_too_long = node.testmempoolaccept(rawtxs=chain_hex)\n+        for txres in testres_too_long:\n+            assert_equal(txres[\"reject-reason\"], \"too-long-mempool-chain\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=chain_hex)])\n+\n+    def test_chain_limits(self):\n+        \"\"\"Create chains from mempool and package transactions that are longer than 25,\n+        but only if both in-mempool and in-package transactions are considered together.\n+        This checks that both mempool and in-package transactions are taken into account when\n+        calculating ancestors/descendant limits.\n+        \"\"\"\n+        self.log.info(\"Check that in-package ancestors count for mempool ancestor limits\")\n+\n+        # 24 transactions in the mempool and 2 in the package. The parent in the package has\n+        # 24 in-mempool ancestors and 1 in-package descendant. The child has 0 direct parents\n+        # in the mempool, but 25 in-mempool and in-package ancestors in total.\n+        self.test_chain_limits_helper(24, 2)\n+        # 2 transactions in the mempool and 24 in the package.\n+        self.test_chain_limits_helper(2, 24)\n+        # 13 transactions in the mempool and 13 in the package.\n+        self.test_chain_limits_helper(13, 13)\n+\n+    def test_descendant_limits(self):\n+        \"\"\"Create an 'A' shaped package with 25 transactions in the mempool and 2 in the package:\n+                    M1\n+                   ^  ^\n+                 M2a  M2b\n+                .       .\n+               .         .\n+              .           .\n+             M11a          ^\n+            ^              M12b\n+           ^                 ^\n+          Pa                  Pb\n+        The top ancestor in the package exceeds descendant limits but only if the in-mempool and in-package\n+        descendants are all considered together (24 including in-mempool descendants and 26 including both\n+        package transactions).\n+        \"\"\"\n+        node = self.nodes[0]\n+        self.log.info(\"Check that in-mempool and in-package descendants are calculated properly in packages\")\n+        # Top parent in mempool, M1\n+        first_coin = self.coins.pop()\n+        parent_value = (first_coin[\"amount\"] - Decimal(\"0.0002\")) / 2 # Deduct reasonable fee and make 2 outputs\n+        inputs = [{\"txid\" : first_coin[\"txid\"], \"vout\" : 0}]\n+        outputs = [{self.address : parent_value}, {ADDRESS_BCRT1_P2WSH_OP_TRUE : parent_value}]\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+\n+        parent_signed = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n+        parent_tx = CTransaction()\n+        assert parent_signed[\"complete\"]\n+        parent_tx.deserialize(BytesIO(hex_str_to_bytes(parent_signed[\"hex\"])))\n+        parent_txid = parent_tx.rehash()\n+        node.sendrawtransaction(parent_signed[\"hex\"])\n+\n+        package_hex = []\n+\n+        # Chain A\n+        parent_locking_script = parent_tx.vout[0].scriptPubKey.hex()\n+        value = parent_value\n+        txid = parent_txid\n+        for i in range(12):\n+            value -= Decimal(\"0.0001\") # deduct reasonable fee\n+            (tx, txhex, parent_locking_script) = self.chain_transaction(txid, value, 0, parent_locking_script)\n+            txid = tx.rehash()\n+            if i < 11: # M2a... M11a",
      "path": "test/functional/rpc_packages.py",
      "position": null,
      "original_position": 258,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "9ce7b0f3850a0d69e81a68f18906a9d1aa4356fb",
      "in_reply_to_id": 619161126,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Right, the comment was wrong. I've fixed it now - note that M2b is made before the chain so it's M3b...M13b",
      "created_at": "2021-04-26T17:12:26Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r620491599",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/620491599"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 258,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/620491837",
      "pull_request_review_id": 644923654,
      "id": 620491837,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDQ5MTgzNw==",
      "diff_hunk": "@@ -0,0 +1,514 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"RPCs that handle raw transaction packages.\"\"\"\n+\n+from decimal import Decimal\n+from io import BytesIO\n+import random\n+\n+from test_framework.address import ADDRESS_BCRT1_P2WSH_OP_TRUE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    BIP125_SEQUENCE_NUMBER,\n+    COIN,\n+    CTransaction,\n+    CTxInWitness,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_TRUE,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+    hex_str_to_bytes,\n+)\n+\n+class RPCPackagesTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.privkeys = [node.get_deterministic_priv_key().key]\n+        self.address = node.get_deterministic_priv_key().address\n+        self.coins = []\n+        # The last 100 coinbase transactions are premature\n+        for b in node.generatetoaddress(200, self.address)[:100]:\n+            coinbase = node.getblock(blockhash=b, verbosity=2)[\"tx\"][0]\n+            self.coins.append({\n+                \"txid\": coinbase[\"txid\"],\n+                \"amount\": coinbase[\"vout\"][0][\"value\"],\n+                \"scriptPubKey\": coinbase[\"vout\"][0][\"scriptPubKey\"],\n+            })\n+\n+        # Create some transactions that can be reused throughout the test. Never submit these to mempool.\n+        self.independent_txns_hex = []\n+        self.independent_txns_testres = []\n+        for _ in range(3):\n+            coin = self.coins.pop()\n+            rawtx = node.createrawtransaction([{\"txid\" : coin[\"txid\"], \"vout\" : 0}],\n+                {self.address : coin[\"amount\"] - Decimal(\"0.0001\")})\n+            signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n+            assert signedtx[\"complete\"]\n+            testres = node.testmempoolaccept([signedtx[\"hex\"]])\n+            assert testres[0][\"allowed\"]\n+            self.independent_txns_hex.append(signedtx[\"hex\"])\n+            # testmempoolaccept returns a list of length one, avoid creating a 2D list\n+            self.independent_txns_testres.append(testres[0])\n+\n+        self.test_independent()\n+        self.test_chain()\n+        self.test_chain_limits()\n+        self.test_descendant_limits()\n+        self.test_ancestor_limits()\n+        self.test_multiple_children()\n+        self.test_multiple_parents()\n+        self.test_conflicting()\n+\n+    def chain_transaction(self, parent_txid, value, n=0, parent_locking_script=None):\n+        \"\"\"Build a transaction that spends parent_txid.vout[n] and produces one output with amount=value.\n+        Return tuple (CTransaction object, raw hex, scriptPubKey of the output created).\n+        \"\"\"\n+        node = self.nodes[0]\n+        inputs = [{\"txid\" : parent_txid, \"vout\" : n}]\n+        outputs = {self.address : value}\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+        prevtxs = [{\n+            \"txid\": parent_txid,\n+            \"vout\": n,\n+            \"scriptPubKey\": parent_locking_script,\n+            \"amount\": value + Decimal(\"0.0001\"),\n+        }] if parent_locking_script else None\n+        signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys, prevtxs=prevtxs)\n+        tx = CTransaction()\n+        assert signedtx[\"complete\"]\n+        tx.deserialize(BytesIO(hex_str_to_bytes(signedtx[\"hex\"])))\n+        return (tx, signedtx[\"hex\"], tx.vout[0].scriptPubKey.hex())\n+\n+    def test_independent(self):\n+        self.log.info(\"Test multiple independent transactions in a package\")\n+        node = self.nodes[0]\n+        assert_equal(self.independent_txns_testres, node.testmempoolaccept(rawtxs=self.independent_txns_hex))\n+\n+        self.log.info(\"Test an otherwise valid package with an extra garbage tx appended\")\n+        garbage_tx = node.createrawtransaction([{\"txid\": \"00\" * 32, \"vout\": 5}], {self.address: 1})\n+        tx = CTransaction()\n+        tx.deserialize(BytesIO(hex_str_to_bytes(garbage_tx)))\n+        testres_bad = node.testmempoolaccept(self.independent_txns_hex + [garbage_tx])\n+        testres_independent_ids = [{\"txid\": res[\"txid\"], \"wtxid\": res[\"wtxid\"]} for res in self.independent_txns_testres]\n+        assert_equal(testres_bad, testres_independent_ids + [\n+            {\"txid\": tx.rehash(), \"wtxid\": tx.getwtxid(), \"allowed\": False, \"reject-reason\": \"missing-inputs\"}\n+        ])\n+\n+        self.log.info(\"Check testmempoolaccept tells us when some transactions completed validation successfully\")\n+        coin = self.coins.pop()\n+        tx_bad_sig_hex = node.createrawtransaction([{\"txid\" : coin[\"txid\"], \"vout\" : 0}],\n+                                           {self.address : coin[\"amount\"] - Decimal(\"0.0001\")})\n+        tx_bad_sig = CTransaction()\n+        tx_bad_sig.deserialize(BytesIO(hex_str_to_bytes(tx_bad_sig_hex)))\n+        testres_bad_sig = node.testmempoolaccept(self.independent_txns_hex + [tx_bad_sig_hex])\n+        assert_equal(testres_bad_sig, self.independent_txns_testres + [{\n+            \"txid\": tx_bad_sig.rehash(),\n+            \"wtxid\": tx_bad_sig.getwtxid(), \"allowed\": False,\n+            \"reject-reason\": \"mandatory-script-verify-flag-failed (Operation not valid with the current stack size)\"\n+        }])\n+\n+        self.log.info(\"Check testmempoolaccept reports txns in packages that exceed max feerate\")\n+        coin = self.coins.pop()\n+        tx_high_fee_raw = node.createrawtransaction([{\"txid\" : coin[\"txid\"], \"vout\" : 0}],\n+                                           {self.address : coin[\"amount\"] - Decimal(\"0.999\")})\n+        tx_high_fee_signed = node.signrawtransactionwithkey(hexstring=tx_high_fee_raw, privkeys=self.privkeys)\n+        assert tx_high_fee_signed[\"complete\"]\n+        tx_high_fee = CTransaction()\n+        tx_high_fee.deserialize(BytesIO(hex_str_to_bytes(tx_high_fee_signed[\"hex\"])))\n+        testres_high_fee = node.testmempoolaccept([tx_high_fee_signed[\"hex\"]])\n+        assert_equal(testres_high_fee, [\n+            {\"txid\": tx_high_fee.rehash(), \"wtxid\": tx_high_fee.getwtxid(), \"allowed\": False, \"reject-reason\": \"max-fee-exceeded\"}\n+        ])\n+        testres_package_high_fee = node.testmempoolaccept(self.independent_txns_hex + [tx_high_fee_signed[\"hex\"]])\n+        assert_equal(testres_package_high_fee, self.independent_txns_testres + testres_high_fee)\n+\n+    def test_chain(self):\n+        node = self.nodes[0]\n+        first_coin = self.coins.pop()\n+\n+        # Chain of 25 transactions\n+        parent_locking_script = None\n+        txid = first_coin[\"txid\"]\n+        chain_hex = []\n+        chain_txns = []\n+        value = first_coin[\"amount\"]\n+\n+        for _ in range(25):\n+            value -= Decimal(\"0.0001\") # Deduct reasonable fee\n+            (tx, txhex, parent_locking_script) = self.chain_transaction(txid, value, 0, parent_locking_script)\n+            txid = tx.rehash()\n+            chain_hex.append(txhex)\n+            chain_txns.append(tx)\n+\n+        self.log.info(\"Check that testmempoolaccept requires packages to be sorted by dependency\")\n+        assert_equal(node.testmempoolaccept(rawtxs=chain_hex[::-1]),\n+                     [{\"txid\": tx.rehash(), \"wtxid\": tx.getwtxid()} for tx in chain_txns[::-1]])\n+\n+        self.log.info(\"Testmempoolaccept a chain of 25 transactions\")\n+        testres_multiple = node.testmempoolaccept(rawtxs=chain_hex)\n+\n+        testres_single = []\n+        # Test accept and then submit each one individually, which should be identical to package test accept\n+        for rawtx in chain_hex:\n+            testres = node.testmempoolaccept([rawtx])\n+            testres_single.append(testres[0])\n+            # Submit the transaction now so its child should have no problem validating\n+            node.sendrawtransaction(rawtx)\n+        assert_equal(testres_single, testres_multiple)\n+\n+        # Clean up by clearing the mempool\n+        node.generate(1)\n+\n+    def test_chain_limits_helper(self, mempool_count, package_count):\n+        node = self.nodes[0]\n+        first_coin = self.coins.pop()\n+        parent_locking_script = None\n+        txid = first_coin[\"txid\"]\n+        chain_hex = []\n+        chain_txns = []\n+        value = first_coin[\"amount\"]\n+\n+        for i in range(mempool_count + package_count):\n+            value -= Decimal(\"0.0001\") # Deduct reasonable fee\n+            (tx, txhex, parent_locking_script) = self.chain_transaction(txid, value, 0, parent_locking_script)\n+            txid = tx.rehash()\n+            if i < mempool_count:\n+                node.sendrawtransaction(txhex)\n+                assert_equal(node.getrawmempool(verbose=True)[txid][\"ancestorcount\"], i + 1)\n+            else:\n+                chain_hex.append(txhex)\n+                chain_txns.append(tx)\n+        testres_too_long = node.testmempoolaccept(rawtxs=chain_hex)\n+        for txres in testres_too_long:\n+            assert_equal(txres[\"reject-reason\"], \"too-long-mempool-chain\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=chain_hex)])\n+\n+    def test_chain_limits(self):\n+        \"\"\"Create chains from mempool and package transactions that are longer than 25,\n+        but only if both in-mempool and in-package transactions are considered together.\n+        This checks that both mempool and in-package transactions are taken into account when\n+        calculating ancestors/descendant limits.\n+        \"\"\"\n+        self.log.info(\"Check that in-package ancestors count for mempool ancestor limits\")\n+\n+        # 24 transactions in the mempool and 2 in the package. The parent in the package has\n+        # 24 in-mempool ancestors and 1 in-package descendant. The child has 0 direct parents\n+        # in the mempool, but 25 in-mempool and in-package ancestors in total.\n+        self.test_chain_limits_helper(24, 2)\n+        # 2 transactions in the mempool and 24 in the package.\n+        self.test_chain_limits_helper(2, 24)\n+        # 13 transactions in the mempool and 13 in the package.\n+        self.test_chain_limits_helper(13, 13)\n+\n+    def test_descendant_limits(self):\n+        \"\"\"Create an 'A' shaped package with 25 transactions in the mempool and 2 in the package:\n+                    M1\n+                   ^  ^\n+                 M2a  M2b\n+                .       .\n+               .         .\n+              .           .\n+             M11a          ^\n+            ^              M12b\n+           ^                 ^\n+          Pa                  Pb\n+        The top ancestor in the package exceeds descendant limits but only if the in-mempool and in-package\n+        descendants are all considered together (24 including in-mempool descendants and 26 including both\n+        package transactions).\n+        \"\"\"\n+        node = self.nodes[0]\n+        self.log.info(\"Check that in-mempool and in-package descendants are calculated properly in packages\")\n+        # Top parent in mempool, M1\n+        first_coin = self.coins.pop()\n+        parent_value = (first_coin[\"amount\"] - Decimal(\"0.0002\")) / 2 # Deduct reasonable fee and make 2 outputs\n+        inputs = [{\"txid\" : first_coin[\"txid\"], \"vout\" : 0}]\n+        outputs = [{self.address : parent_value}, {ADDRESS_BCRT1_P2WSH_OP_TRUE : parent_value}]\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+\n+        parent_signed = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n+        parent_tx = CTransaction()\n+        assert parent_signed[\"complete\"]\n+        parent_tx.deserialize(BytesIO(hex_str_to_bytes(parent_signed[\"hex\"])))\n+        parent_txid = parent_tx.rehash()\n+        node.sendrawtransaction(parent_signed[\"hex\"])\n+\n+        package_hex = []\n+\n+        # Chain A\n+        parent_locking_script = parent_tx.vout[0].scriptPubKey.hex()\n+        value = parent_value\n+        txid = parent_txid\n+        for i in range(12):\n+            value -= Decimal(\"0.0001\") # deduct reasonable fee\n+            (tx, txhex, parent_locking_script) = self.chain_transaction(txid, value, 0, parent_locking_script)\n+            txid = tx.rehash()\n+            if i < 11: # M2a... M11a\n+                node.sendrawtransaction(txhex)\n+            else: # Pa\n+                package_hex.append(txhex)\n+\n+        # Chain B\n+        value = parent_value - Decimal(\"0.0001\")\n+        rawtx_b = node.createrawtransaction([{\"txid\" : parent_txid, \"vout\" : 1}], {self.address : value})\n+        tx_child_b = CTransaction()\n+        tx_child_b.deserialize(BytesIO(hex_str_to_bytes(rawtx_b)))\n+        tx_child_b.wit.vtxinwit = [CTxInWitness()]\n+        tx_child_b.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n+        tx_child_b_hex = tx_child_b.serialize().hex()\n+        node.sendrawtransaction(tx_child_b_hex)\n+        parent_locking_script = tx_child_b.vout[0].scriptPubKey.hex()\n+        txid = tx_child_b.rehash()\n+        for i in range(12):\n+            value -= Decimal(\"0.0001\") # Deduct reasonable fee\n+            (tx, txhex, parent_locking_script) = self.chain_transaction(txid, value, 0, parent_locking_script)\n+            txid = tx.rehash()\n+            if i < 11: # M3b... M12b\n+                node.sendrawtransaction(txhex)\n+            else: # Pb\n+                package_hex.append(txhex)\n+\n+        testres_too_long = node.testmempoolaccept(rawtxs=package_hex)\n+        for txres in testres_too_long:\n+            assert_equal(txres[\"reject-reason\"], \"too-long-mempool-chain\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=package_hex)])\n+\n+    def create_child_with_parents(self, parents_tx, values, locking_scripts):\n+        \"\"\"Creates a transaction that spends the first output of each parent in parents_tx.\"\"\"\n+        num_parents = len(parents_tx)\n+        total_value = sum(values)\n+        inputs = [{\"txid\" : tx.rehash(), \"vout\" : 0} for tx in parents_tx]\n+        outputs = {self.address : total_value - num_parents * Decimal(\"0.0001\")}\n+        rawtx_child = self.nodes[0].createrawtransaction(inputs, outputs)\n+        prevtxs = []\n+        for i in range(num_parents):\n+            prevtxs.append({\"txid\": parents_tx[i].rehash(), \"vout\" : 0, \"scriptPubKey\" : locking_scripts[i], \"amount\" : values[i]})\n+        signedtx_child = self.nodes[0].signrawtransactionwithkey(hexstring=rawtx_child, privkeys=self.privkeys, prevtxs=prevtxs)\n+        assert signedtx_child[\"complete\"]\n+        return signedtx_child[\"hex\"]\n+\n+    def test_ancestor_limits(self):\n+        \"\"\"Create a 'V' shaped chain with 24 transactions in the mempool and 3 in the package:\n+        M1a                    M1b\n+         ^                     ^\n+          M2a                M2b\n+           .                 .\n+            .               .\n+             .             .\n+             M12a        M12b\n+               ^         ^\n+                Pa     Pb\n+                 ^    ^\n+                   Pc\n+        The lowest descendant, Pc, exceeds ancestor limits, but only if the in-mempool\n+        and in-package ancestors are all considered together.\n+        \"\"\"\n+        node = self.nodes[0]\n+        package_hex = []\n+        parents_tx = []\n+        values = []\n+        parent_locking_scripts = []\n+\n+        self.log.info(\"Check that in-mempool and in-package ancestors are calculated properly in packages\")\n+\n+        # Two chains of 13 transactions each\n+        for _ in range(2):\n+            parent_locking_script = None\n+            top_coin = self.coins.pop()\n+            txid = top_coin[\"txid\"]\n+            value = top_coin[\"amount\"]\n+            for i in range(13):\n+                value -= Decimal(\"0.0001\") # Deduct reasonable fee\n+                (tx, txhex, parent_locking_script) = self.chain_transaction(txid, value, 0, parent_locking_script)\n+                txid = tx.rehash()\n+                if i < 12:\n+                    node.sendrawtransaction(txhex)\n+                else: # Save the 13th transaction for the package\n+                    package_hex.append(txhex)\n+                    parents_tx.append(tx)\n+                    parent_locking_scripts.append(parent_locking_script)\n+                    values.append(value)\n+\n+        # Child Pc\n+        child_hex = self.create_child_with_parents(parents_tx, values, parent_locking_scripts)\n+        package_hex.append(child_hex)\n+\n+        testres_too_long = node.testmempoolaccept(rawtxs=package_hex)\n+        for txres in testres_too_long:\n+            assert_equal(txres[\"reject-reason\"], \"too-long-mempool-chain\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=package_hex)])\n+\n+    def test_multiple_children(self):\n+        node = self.nodes[0]\n+\n+        self.log.info(\"Testmempoolaccept a package in which a transaction has two children within the package\")\n+        first_coin = self.coins.pop()\n+        value = (first_coin[\"amount\"] - Decimal(\"0.0002\")) / 2 # Deduct reasonable fee and make 2 outputs\n+        inputs = [{\"txid\" : first_coin[\"txid\"], \"vout\" : 0}]\n+        outputs = [{self.address : value}, {ADDRESS_BCRT1_P2WSH_OP_TRUE : value}]\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+\n+        parent_signed = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n+        parent_tx = CTransaction()\n+        assert parent_signed[\"complete\"]\n+        parent_tx.deserialize(BytesIO(hex_str_to_bytes(parent_signed[\"hex\"])))\n+        parent_txid = parent_tx.rehash()\n+        assert node.testmempoolaccept([parent_signed[\"hex\"]])[0][\"allowed\"]\n+\n+        parent_locking_script_a = parent_tx.vout[0].scriptPubKey.hex()\n+        child_value = value - Decimal(\"0.0001\")\n+\n+        # Child A\n+        (_, tx_child_a_hex, _) = self.chain_transaction(parent_txid, child_value, 0, parent_locking_script_a)\n+        assert not node.testmempoolaccept([tx_child_a_hex])[0][\"allowed\"]\n+\n+        # Child B\n+        rawtx_b = node.createrawtransaction([{\"txid\" : parent_txid, \"vout\" : 1}], {self.address : child_value})\n+        tx_child_b = CTransaction()\n+        tx_child_b.deserialize(BytesIO(hex_str_to_bytes(rawtx_b)))\n+        tx_child_b.wit.vtxinwit = [CTxInWitness()]\n+        tx_child_b.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n+        tx_child_b_hex = tx_child_b.serialize().hex()\n+        assert not node.testmempoolaccept([tx_child_b_hex])[0][\"allowed\"]\n+\n+        self.log.info(\"Testmempoolaccept with entire package, should work with children in either order\")\n+        testres_multiple_ab = node.testmempoolaccept(rawtxs=[parent_signed[\"hex\"], tx_child_a_hex, tx_child_b_hex])\n+        testres_multiple_ba = node.testmempoolaccept(rawtxs=[parent_signed[\"hex\"], tx_child_b_hex, tx_child_a_hex])\n+        assert all([testres[\"allowed\"] for testres in testres_multiple_ab + testres_multiple_ba])\n+\n+        testres_single = []\n+        # Test accept and then submit each one individually, which should be identical to package testaccept\n+        for rawtx in [parent_signed[\"hex\"], tx_child_a_hex, tx_child_b_hex]:\n+            testres = node.testmempoolaccept([rawtx])\n+            testres_single.append(testres[0])\n+            # Submit the transaction now so its child should have no problem validating\n+            node.sendrawtransaction(rawtx)\n+        assert_equal(testres_single, testres_multiple_ab)\n+\n+    def test_multiple_parents(self):\n+        node = self.nodes[0]\n+\n+        self.log.info(\"Testmempoolaccept a package in which a transaction has multiple parents within the package\")\n+        for num_parents in [2, 10, 24]:\n+            # Test a package with num_parents parents and 1 child transaction.\n+            package_hex = []\n+            parents_tx = []\n+            values = []\n+            parent_locking_scripts = []\n+            for _ in range(num_parents):\n+                parent_coin = self.coins.pop()\n+                value = parent_coin[\"amount\"] - Decimal(\"0.0001\") # Deduct reasonable fee\n+                (tx, txhex, parent_locking_script) = self.chain_transaction(parent_coin[\"txid\"], value)\n+                package_hex.append(txhex)\n+                parents_tx.append(tx)\n+                values.append(value)\n+                parent_locking_scripts.append(parent_locking_script)\n+            child_hex = self.create_child_with_parents(parents_tx, values, parent_locking_scripts)\n+            # Package accept should work with the parents in any order (as long as parents come before child)\n+            random.shuffle(package_hex)",
      "path": "test/functional/rpc_packages.py",
      "position": null,
      "original_position": 426,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "9ce7b0f3850a0d69e81a68f18906a9d1aa4356fb",
      "in_reply_to_id": 619167508,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added 10 shuffles!",
      "created_at": "2021-04-26T17:12:47Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r620491837",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/620491837"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 426,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/620491995",
      "pull_request_review_id": 644923839,
      "id": 620491995,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDQ5MTk5NQ==",
      "diff_hunk": "@@ -0,0 +1,514 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"RPCs that handle raw transaction packages.\"\"\"\n+\n+from decimal import Decimal\n+from io import BytesIO\n+import random\n+\n+from test_framework.address import ADDRESS_BCRT1_P2WSH_OP_TRUE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    BIP125_SEQUENCE_NUMBER,\n+    COIN,\n+    CTransaction,\n+    CTxInWitness,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_TRUE,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+    hex_str_to_bytes,\n+)\n+\n+class RPCPackagesTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.privkeys = [node.get_deterministic_priv_key().key]\n+        self.address = node.get_deterministic_priv_key().address\n+        self.coins = []\n+        # The last 100 coinbase transactions are premature\n+        for b in node.generatetoaddress(200, self.address)[:100]:\n+            coinbase = node.getblock(blockhash=b, verbosity=2)[\"tx\"][0]\n+            self.coins.append({\n+                \"txid\": coinbase[\"txid\"],\n+                \"amount\": coinbase[\"vout\"][0][\"value\"],\n+                \"scriptPubKey\": coinbase[\"vout\"][0][\"scriptPubKey\"],\n+            })\n+\n+        # Create some transactions that can be reused throughout the test. Never submit these to mempool.\n+        self.independent_txns_hex = []\n+        self.independent_txns_testres = []\n+        for _ in range(3):\n+            coin = self.coins.pop()\n+            rawtx = node.createrawtransaction([{\"txid\" : coin[\"txid\"], \"vout\" : 0}],\n+                {self.address : coin[\"amount\"] - Decimal(\"0.0001\")})\n+            signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n+            assert signedtx[\"complete\"]\n+            testres = node.testmempoolaccept([signedtx[\"hex\"]])\n+            assert testres[0][\"allowed\"]\n+            self.independent_txns_hex.append(signedtx[\"hex\"])\n+            # testmempoolaccept returns a list of length one, avoid creating a 2D list\n+            self.independent_txns_testres.append(testres[0])\n+\n+        self.test_independent()\n+        self.test_chain()\n+        self.test_chain_limits()\n+        self.test_descendant_limits()\n+        self.test_ancestor_limits()\n+        self.test_multiple_children()\n+        self.test_multiple_parents()\n+        self.test_conflicting()\n+\n+    def chain_transaction(self, parent_txid, value, n=0, parent_locking_script=None):\n+        \"\"\"Build a transaction that spends parent_txid.vout[n] and produces one output with amount=value.\n+        Return tuple (CTransaction object, raw hex, scriptPubKey of the output created).\n+        \"\"\"\n+        node = self.nodes[0]\n+        inputs = [{\"txid\" : parent_txid, \"vout\" : n}]\n+        outputs = {self.address : value}\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+        prevtxs = [{\n+            \"txid\": parent_txid,\n+            \"vout\": n,\n+            \"scriptPubKey\": parent_locking_script,\n+            \"amount\": value + Decimal(\"0.0001\"),\n+        }] if parent_locking_script else None\n+        signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys, prevtxs=prevtxs)\n+        tx = CTransaction()\n+        assert signedtx[\"complete\"]\n+        tx.deserialize(BytesIO(hex_str_to_bytes(signedtx[\"hex\"])))\n+        return (tx, signedtx[\"hex\"], tx.vout[0].scriptPubKey.hex())\n+\n+    def test_independent(self):\n+        self.log.info(\"Test multiple independent transactions in a package\")\n+        node = self.nodes[0]\n+        assert_equal(self.independent_txns_testres, node.testmempoolaccept(rawtxs=self.independent_txns_hex))\n+\n+        self.log.info(\"Test an otherwise valid package with an extra garbage tx appended\")\n+        garbage_tx = node.createrawtransaction([{\"txid\": \"00\" * 32, \"vout\": 5}], {self.address: 1})\n+        tx = CTransaction()\n+        tx.deserialize(BytesIO(hex_str_to_bytes(garbage_tx)))\n+        testres_bad = node.testmempoolaccept(self.independent_txns_hex + [garbage_tx])\n+        testres_independent_ids = [{\"txid\": res[\"txid\"], \"wtxid\": res[\"wtxid\"]} for res in self.independent_txns_testres]\n+        assert_equal(testres_bad, testres_independent_ids + [\n+            {\"txid\": tx.rehash(), \"wtxid\": tx.getwtxid(), \"allowed\": False, \"reject-reason\": \"missing-inputs\"}\n+        ])\n+\n+        self.log.info(\"Check testmempoolaccept tells us when some transactions completed validation successfully\")\n+        coin = self.coins.pop()\n+        tx_bad_sig_hex = node.createrawtransaction([{\"txid\" : coin[\"txid\"], \"vout\" : 0}],\n+                                           {self.address : coin[\"amount\"] - Decimal(\"0.0001\")})\n+        tx_bad_sig = CTransaction()\n+        tx_bad_sig.deserialize(BytesIO(hex_str_to_bytes(tx_bad_sig_hex)))\n+        testres_bad_sig = node.testmempoolaccept(self.independent_txns_hex + [tx_bad_sig_hex])\n+        assert_equal(testres_bad_sig, self.independent_txns_testres + [{\n+            \"txid\": tx_bad_sig.rehash(),\n+            \"wtxid\": tx_bad_sig.getwtxid(), \"allowed\": False,\n+            \"reject-reason\": \"mandatory-script-verify-flag-failed (Operation not valid with the current stack size)\"\n+        }])\n+\n+        self.log.info(\"Check testmempoolaccept reports txns in packages that exceed max feerate\")\n+        coin = self.coins.pop()\n+        tx_high_fee_raw = node.createrawtransaction([{\"txid\" : coin[\"txid\"], \"vout\" : 0}],\n+                                           {self.address : coin[\"amount\"] - Decimal(\"0.999\")})\n+        tx_high_fee_signed = node.signrawtransactionwithkey(hexstring=tx_high_fee_raw, privkeys=self.privkeys)\n+        assert tx_high_fee_signed[\"complete\"]\n+        tx_high_fee = CTransaction()\n+        tx_high_fee.deserialize(BytesIO(hex_str_to_bytes(tx_high_fee_signed[\"hex\"])))\n+        testres_high_fee = node.testmempoolaccept([tx_high_fee_signed[\"hex\"]])\n+        assert_equal(testres_high_fee, [\n+            {\"txid\": tx_high_fee.rehash(), \"wtxid\": tx_high_fee.getwtxid(), \"allowed\": False, \"reject-reason\": \"max-fee-exceeded\"}\n+        ])\n+        testres_package_high_fee = node.testmempoolaccept(self.independent_txns_hex + [tx_high_fee_signed[\"hex\"]])\n+        assert_equal(testres_package_high_fee, self.independent_txns_testres + testres_high_fee)\n+\n+    def test_chain(self):\n+        node = self.nodes[0]\n+        first_coin = self.coins.pop()\n+\n+        # Chain of 25 transactions\n+        parent_locking_script = None\n+        txid = first_coin[\"txid\"]\n+        chain_hex = []\n+        chain_txns = []\n+        value = first_coin[\"amount\"]\n+\n+        for _ in range(25):\n+            value -= Decimal(\"0.0001\") # Deduct reasonable fee\n+            (tx, txhex, parent_locking_script) = self.chain_transaction(txid, value, 0, parent_locking_script)\n+            txid = tx.rehash()\n+            chain_hex.append(txhex)\n+            chain_txns.append(tx)\n+\n+        self.log.info(\"Check that testmempoolaccept requires packages to be sorted by dependency\")\n+        assert_equal(node.testmempoolaccept(rawtxs=chain_hex[::-1]),\n+                     [{\"txid\": tx.rehash(), \"wtxid\": tx.getwtxid()} for tx in chain_txns[::-1]])\n+\n+        self.log.info(\"Testmempoolaccept a chain of 25 transactions\")\n+        testres_multiple = node.testmempoolaccept(rawtxs=chain_hex)\n+\n+        testres_single = []\n+        # Test accept and then submit each one individually, which should be identical to package test accept\n+        for rawtx in chain_hex:\n+            testres = node.testmempoolaccept([rawtx])\n+            testres_single.append(testres[0])\n+            # Submit the transaction now so its child should have no problem validating\n+            node.sendrawtransaction(rawtx)\n+        assert_equal(testres_single, testres_multiple)\n+\n+        # Clean up by clearing the mempool\n+        node.generate(1)\n+\n+    def test_chain_limits_helper(self, mempool_count, package_count):\n+        node = self.nodes[0]\n+        first_coin = self.coins.pop()\n+        parent_locking_script = None\n+        txid = first_coin[\"txid\"]\n+        chain_hex = []\n+        chain_txns = []\n+        value = first_coin[\"amount\"]\n+\n+        for i in range(mempool_count + package_count):\n+            value -= Decimal(\"0.0001\") # Deduct reasonable fee\n+            (tx, txhex, parent_locking_script) = self.chain_transaction(txid, value, 0, parent_locking_script)\n+            txid = tx.rehash()\n+            if i < mempool_count:\n+                node.sendrawtransaction(txhex)\n+                assert_equal(node.getrawmempool(verbose=True)[txid][\"ancestorcount\"], i + 1)\n+            else:\n+                chain_hex.append(txhex)\n+                chain_txns.append(tx)\n+        testres_too_long = node.testmempoolaccept(rawtxs=chain_hex)\n+        for txres in testres_too_long:\n+            assert_equal(txres[\"reject-reason\"], \"too-long-mempool-chain\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=chain_hex)])\n+\n+    def test_chain_limits(self):\n+        \"\"\"Create chains from mempool and package transactions that are longer than 25,\n+        but only if both in-mempool and in-package transactions are considered together.\n+        This checks that both mempool and in-package transactions are taken into account when\n+        calculating ancestors/descendant limits.\n+        \"\"\"\n+        self.log.info(\"Check that in-package ancestors count for mempool ancestor limits\")\n+\n+        # 24 transactions in the mempool and 2 in the package. The parent in the package has\n+        # 24 in-mempool ancestors and 1 in-package descendant. The child has 0 direct parents\n+        # in the mempool, but 25 in-mempool and in-package ancestors in total.\n+        self.test_chain_limits_helper(24, 2)\n+        # 2 transactions in the mempool and 24 in the package.\n+        self.test_chain_limits_helper(2, 24)\n+        # 13 transactions in the mempool and 13 in the package.\n+        self.test_chain_limits_helper(13, 13)\n+\n+    def test_descendant_limits(self):\n+        \"\"\"Create an 'A' shaped package with 25 transactions in the mempool and 2 in the package:\n+                    M1\n+                   ^  ^\n+                 M2a  M2b\n+                .       .\n+               .         .\n+              .           .\n+             M11a          ^\n+            ^              M12b\n+           ^                 ^\n+          Pa                  Pb\n+        The top ancestor in the package exceeds descendant limits but only if the in-mempool and in-package\n+        descendants are all considered together (24 including in-mempool descendants and 26 including both\n+        package transactions).\n+        \"\"\"\n+        node = self.nodes[0]\n+        self.log.info(\"Check that in-mempool and in-package descendants are calculated properly in packages\")\n+        # Top parent in mempool, M1\n+        first_coin = self.coins.pop()\n+        parent_value = (first_coin[\"amount\"] - Decimal(\"0.0002\")) / 2 # Deduct reasonable fee and make 2 outputs\n+        inputs = [{\"txid\" : first_coin[\"txid\"], \"vout\" : 0}]\n+        outputs = [{self.address : parent_value}, {ADDRESS_BCRT1_P2WSH_OP_TRUE : parent_value}]\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+\n+        parent_signed = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n+        parent_tx = CTransaction()\n+        assert parent_signed[\"complete\"]\n+        parent_tx.deserialize(BytesIO(hex_str_to_bytes(parent_signed[\"hex\"])))\n+        parent_txid = parent_tx.rehash()\n+        node.sendrawtransaction(parent_signed[\"hex\"])\n+\n+        package_hex = []\n+\n+        # Chain A\n+        parent_locking_script = parent_tx.vout[0].scriptPubKey.hex()\n+        value = parent_value\n+        txid = parent_txid\n+        for i in range(12):\n+            value -= Decimal(\"0.0001\") # deduct reasonable fee\n+            (tx, txhex, parent_locking_script) = self.chain_transaction(txid, value, 0, parent_locking_script)\n+            txid = tx.rehash()\n+            if i < 11: # M2a... M11a\n+                node.sendrawtransaction(txhex)\n+            else: # Pa\n+                package_hex.append(txhex)\n+\n+        # Chain B\n+        value = parent_value - Decimal(\"0.0001\")\n+        rawtx_b = node.createrawtransaction([{\"txid\" : parent_txid, \"vout\" : 1}], {self.address : value})\n+        tx_child_b = CTransaction()\n+        tx_child_b.deserialize(BytesIO(hex_str_to_bytes(rawtx_b)))\n+        tx_child_b.wit.vtxinwit = [CTxInWitness()]\n+        tx_child_b.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n+        tx_child_b_hex = tx_child_b.serialize().hex()\n+        node.sendrawtransaction(tx_child_b_hex)\n+        parent_locking_script = tx_child_b.vout[0].scriptPubKey.hex()\n+        txid = tx_child_b.rehash()\n+        for i in range(12):\n+            value -= Decimal(\"0.0001\") # Deduct reasonable fee\n+            (tx, txhex, parent_locking_script) = self.chain_transaction(txid, value, 0, parent_locking_script)\n+            txid = tx.rehash()\n+            if i < 11: # M3b... M12b\n+                node.sendrawtransaction(txhex)\n+            else: # Pb\n+                package_hex.append(txhex)\n+\n+        testres_too_long = node.testmempoolaccept(rawtxs=package_hex)\n+        for txres in testres_too_long:\n+            assert_equal(txres[\"reject-reason\"], \"too-long-mempool-chain\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=package_hex)])\n+\n+    def create_child_with_parents(self, parents_tx, values, locking_scripts):\n+        \"\"\"Creates a transaction that spends the first output of each parent in parents_tx.\"\"\"\n+        num_parents = len(parents_tx)\n+        total_value = sum(values)\n+        inputs = [{\"txid\" : tx.rehash(), \"vout\" : 0} for tx in parents_tx]\n+        outputs = {self.address : total_value - num_parents * Decimal(\"0.0001\")}\n+        rawtx_child = self.nodes[0].createrawtransaction(inputs, outputs)\n+        prevtxs = []\n+        for i in range(num_parents):\n+            prevtxs.append({\"txid\": parents_tx[i].rehash(), \"vout\" : 0, \"scriptPubKey\" : locking_scripts[i], \"amount\" : values[i]})\n+        signedtx_child = self.nodes[0].signrawtransactionwithkey(hexstring=rawtx_child, privkeys=self.privkeys, prevtxs=prevtxs)\n+        assert signedtx_child[\"complete\"]\n+        return signedtx_child[\"hex\"]\n+\n+    def test_ancestor_limits(self):\n+        \"\"\"Create a 'V' shaped chain with 24 transactions in the mempool and 3 in the package:\n+        M1a                    M1b\n+         ^                     ^\n+          M2a                M2b\n+           .                 .\n+            .               .\n+             .             .\n+             M12a        M12b\n+               ^         ^\n+                Pa     Pb\n+                 ^    ^\n+                   Pc\n+        The lowest descendant, Pc, exceeds ancestor limits, but only if the in-mempool\n+        and in-package ancestors are all considered together.\n+        \"\"\"\n+        node = self.nodes[0]\n+        package_hex = []\n+        parents_tx = []\n+        values = []\n+        parent_locking_scripts = []\n+\n+        self.log.info(\"Check that in-mempool and in-package ancestors are calculated properly in packages\")\n+\n+        # Two chains of 13 transactions each\n+        for _ in range(2):\n+            parent_locking_script = None\n+            top_coin = self.coins.pop()\n+            txid = top_coin[\"txid\"]\n+            value = top_coin[\"amount\"]\n+            for i in range(13):\n+                value -= Decimal(\"0.0001\") # Deduct reasonable fee\n+                (tx, txhex, parent_locking_script) = self.chain_transaction(txid, value, 0, parent_locking_script)\n+                txid = tx.rehash()\n+                if i < 12:\n+                    node.sendrawtransaction(txhex)\n+                else: # Save the 13th transaction for the package\n+                    package_hex.append(txhex)\n+                    parents_tx.append(tx)\n+                    parent_locking_scripts.append(parent_locking_script)\n+                    values.append(value)\n+\n+        # Child Pc\n+        child_hex = self.create_child_with_parents(parents_tx, values, parent_locking_scripts)\n+        package_hex.append(child_hex)\n+\n+        testres_too_long = node.testmempoolaccept(rawtxs=package_hex)\n+        for txres in testres_too_long:\n+            assert_equal(txres[\"reject-reason\"], \"too-long-mempool-chain\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=package_hex)])\n+\n+    def test_multiple_children(self):\n+        node = self.nodes[0]\n+\n+        self.log.info(\"Testmempoolaccept a package in which a transaction has two children within the package\")\n+        first_coin = self.coins.pop()\n+        value = (first_coin[\"amount\"] - Decimal(\"0.0002\")) / 2 # Deduct reasonable fee and make 2 outputs\n+        inputs = [{\"txid\" : first_coin[\"txid\"], \"vout\" : 0}]\n+        outputs = [{self.address : value}, {ADDRESS_BCRT1_P2WSH_OP_TRUE : value}]\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+\n+        parent_signed = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n+        parent_tx = CTransaction()\n+        assert parent_signed[\"complete\"]\n+        parent_tx.deserialize(BytesIO(hex_str_to_bytes(parent_signed[\"hex\"])))\n+        parent_txid = parent_tx.rehash()\n+        assert node.testmempoolaccept([parent_signed[\"hex\"]])[0][\"allowed\"]\n+\n+        parent_locking_script_a = parent_tx.vout[0].scriptPubKey.hex()\n+        child_value = value - Decimal(\"0.0001\")\n+\n+        # Child A\n+        (_, tx_child_a_hex, _) = self.chain_transaction(parent_txid, child_value, 0, parent_locking_script_a)\n+        assert not node.testmempoolaccept([tx_child_a_hex])[0][\"allowed\"]\n+\n+        # Child B\n+        rawtx_b = node.createrawtransaction([{\"txid\" : parent_txid, \"vout\" : 1}], {self.address : child_value})\n+        tx_child_b = CTransaction()\n+        tx_child_b.deserialize(BytesIO(hex_str_to_bytes(rawtx_b)))\n+        tx_child_b.wit.vtxinwit = [CTxInWitness()]\n+        tx_child_b.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n+        tx_child_b_hex = tx_child_b.serialize().hex()\n+        assert not node.testmempoolaccept([tx_child_b_hex])[0][\"allowed\"]\n+\n+        self.log.info(\"Testmempoolaccept with entire package, should work with children in either order\")\n+        testres_multiple_ab = node.testmempoolaccept(rawtxs=[parent_signed[\"hex\"], tx_child_a_hex, tx_child_b_hex])\n+        testres_multiple_ba = node.testmempoolaccept(rawtxs=[parent_signed[\"hex\"], tx_child_b_hex, tx_child_a_hex])\n+        assert all([testres[\"allowed\"] for testres in testres_multiple_ab + testres_multiple_ba])\n+\n+        testres_single = []\n+        # Test accept and then submit each one individually, which should be identical to package testaccept\n+        for rawtx in [parent_signed[\"hex\"], tx_child_a_hex, tx_child_b_hex]:\n+            testres = node.testmempoolaccept([rawtx])\n+            testres_single.append(testres[0])\n+            # Submit the transaction now so its child should have no problem validating\n+            node.sendrawtransaction(rawtx)\n+        assert_equal(testres_single, testres_multiple_ab)\n+\n+    def test_multiple_parents(self):\n+        node = self.nodes[0]\n+\n+        self.log.info(\"Testmempoolaccept a package in which a transaction has multiple parents within the package\")\n+        for num_parents in [2, 10, 24]:\n+            # Test a package with num_parents parents and 1 child transaction.\n+            package_hex = []\n+            parents_tx = []\n+            values = []\n+            parent_locking_scripts = []\n+            for _ in range(num_parents):\n+                parent_coin = self.coins.pop()\n+                value = parent_coin[\"amount\"] - Decimal(\"0.0001\") # Deduct reasonable fee\n+                (tx, txhex, parent_locking_script) = self.chain_transaction(parent_coin[\"txid\"], value)\n+                package_hex.append(txhex)\n+                parents_tx.append(tx)\n+                values.append(value)\n+                parent_locking_scripts.append(parent_locking_script)\n+            child_hex = self.create_child_with_parents(parents_tx, values, parent_locking_scripts)\n+            # Package accept should work with the parents in any order (as long as parents come before child)\n+            random.shuffle(package_hex)\n+            package_hex.append(child_hex)\n+            testres_multiple = node.testmempoolaccept(rawtxs=package_hex)\n+            assert all([testres[\"allowed\"] for testres in testres_multiple])\n+\n+            testres_single = []\n+            # Test accept and then submit each one individually, which should be identical to package testaccept\n+            for rawtx in package_hex:\n+                testres_single.append(node.testmempoolaccept([rawtx])[0])",
      "path": "test/functional/rpc_packages.py",
      "position": 279,
      "original_position": 434,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "9ce7b0f3850a0d69e81a68f18906a9d1aa4356fb",
      "in_reply_to_id": 619168203,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Woops, yes. Good catch",
      "created_at": "2021-04-26T17:13:00Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r620491995",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/620491995"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 279,
      "original_line": 279,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/620492920",
      "pull_request_review_id": 644925078,
      "id": 620492920,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDQ5MjkyMA==",
      "diff_hunk": "@@ -1062,28 +1178,136 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n \n     Workspace ws(ptx);\n \n-    if (!PreChecks(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!PreChecks(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n-    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Tx was accepted, but not added\n     if (args.m_test_accept) {\n-        return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+        return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n     }\n \n-    if (!Finalize(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!Finalize(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+    return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+}\n+\n+PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::vector<CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    PackageValidationState package_state;\n+    const unsigned int package_count = txns.size();\n+\n+    // These context-free package limits can be checked before taking the mempool lock.\n+    if (package_count > MAX_PACKAGE_COUNT) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"too-many-transactions\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    const int64_t total_size = std::accumulate(txns.cbegin(), txns.cend(), 0,\n+                               [](int64_t sum, const auto& tx) { return sum + GetVirtualTransactionSize(*tx); });\n+    // If the package only contains 1 tx, it's better to report the policy violation on individual tx size.\n+    if (package_count > 1 && total_size > MAX_PACKAGE_SIZE * 1000) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"too-large\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    std::vector<Workspace> workspaces{};\n+    workspaces.reserve(package_count);\n+    {\n+        std::unordered_map<uint256, bool, SaltedTxidHasher> txids_seen;",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 271,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "9ce7b0f3850a0d69e81a68f18906a9d1aa4356fb",
      "in_reply_to_id": 619177795,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Noice 🧠 I've done it this way, it's prettier",
      "created_at": "2021-04-26T17:14:20Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r620492920",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/620492920"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1229,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/620493589",
      "pull_request_review_id": 644925889,
      "id": 620493589,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDQ5MzU4OQ==",
      "diff_hunk": "@@ -1062,28 +1178,130 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n \n     Workspace ws(ptx);\n \n-    if (!PreChecks(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!PreChecks(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n-    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Tx was accepted, but not added\n     if (args.m_test_accept) {\n-        return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+        return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n     }\n \n-    if (!Finalize(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!Finalize(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+    return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+}\n+\n+PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::vector<CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    PackageValidationState package_state;\n+    const unsigned int package_count = txns.size();\n+\n+    // These context-free package limits can be checked before taking the mempool lock.\n+    if (package_count > MAX_PACKAGE_COUNT) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"too-many-transactions\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    const int64_t total_size = std::accumulate(txns.cbegin(), txns.cend(), 0,\n+                               [](int64_t sum, const auto& tx) { return sum + GetVirtualTransactionSize(*tx); });\n+    if (total_size > MAX_PACKAGE_SIZE * 1000) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"too-large\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    std::vector<Workspace> workspaces{};\n+    workspaces.reserve(package_count);\n+    std::unordered_set<uint256, BlockHasher> txids;\n+\n+    // Require the package to be sorted in order of dependency, i.e. parents appear before children.\n+    // An unsorted package will fail anyway on missing-inputs, but it's better to quit earlier and\n+    // fail on something less ambiguous (missing-inputs could also be an orphan or trying to\n+    // spend nonexistent coins).\n+    for (const auto& tx : txns) {\n+        for (const auto& input : tx->vin) {\n+            if (txids.find(input.prevout.hash) == txids.end() &&\n+                std::find_if(txns.begin(), txns.end(),",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 278,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "b93442473f4f929912740682865397411e84be9b",
      "in_reply_to_id": 615308870,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "What's immutable?",
      "created_at": "2021-04-26T17:15:18Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r620493589",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/620493589"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1237,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/620505619",
      "pull_request_review_id": 644940248,
      "id": 620505619,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDUwNTYxOQ==",
      "diff_hunk": "@@ -186,10 +200,13 @@ bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntr\n         staged_ancestors.erase(stage);\n         totalSizeWithAncestors += stageit->GetTxSize();\n \n-        if (stageit->GetSizeWithDescendants() + entry.GetTxSize() > limitDescendantSize) {\n+        // When multiple transactions are passed in, the ancestors and descendants of all transactions\n+        // considered together must be within limits even if they are not interdependent. This may be\n+        // stricter than the limits for each individual transaction.",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 80,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "9ce7b0f3850a0d69e81a68f18906a9d1aa4356fb",
      "in_reply_to_id": 618627239,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Distinct `testmempoolaccept` calls returning different results for policy reasons is not a \"quirk,\" it's just a natural part of mempool policy. With single test accepts today you could call it 3 times and get 3 different results for the same tx because anything can happen in between calls.\r\n\r\nI agree that p2p packages shouldn't have independent transactions, but we're not really there yet. This PR is just adding dry-run logic reachable through RPC, and we'll write docs to make it clear what this should be used for (i.e. not for batch validation). Obviously I wouldn't want to create a footgun for users who misunderstand/don't read the release notes (which is why I set a limit of 25 for example), but I don't think that's the case here.\r\n\r\nTLDR: I agree conceptually, but don't think it's necessary in this PR. I'm trying to keep this as bare-bones as possible and it's 1000+ lines...",
      "created_at": "2021-04-26T17:31:12Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r620505619",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/620505619"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 205,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/620508755",
      "pull_request_review_id": 644944100,
      "id": 620508755,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMDUwODc1NQ==",
      "diff_hunk": "@@ -0,0 +1,33 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_PACKAGES_H\n+#define BITCOIN_PACKAGES_H\n+\n+#include <vector>\n+\n+#include <consensus/validation.h>\n+#include <primitives/transaction.h>\n+\n+/** Default maximum number of transactions in a package. */\n+static constexpr uint32_t MAX_PACKAGE_COUNT{25};\n+/** Default maximum total virtual size of transactions in a package in KvB. */\n+static constexpr uint32_t MAX_PACKAGE_SIZE{101};",
      "path": "src/packages.h",
      "position": null,
      "original_position": 16,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "9ce7b0f3850a0d69e81a68f18906a9d1aa4356fb",
      "in_reply_to_id": 618629408,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> That said, I don't think we need to decide now, we all agree the package API is unstable and we can change this back latter in its own PR. Current one is already a good move forward.\r\n\r\nRight, this is 100% flexible 👍 will be sure to follow the discussion\r\n\r\nWhat do you mean by \"scale down your package?\" I didn't think there would be a significant difference between using weight units and vbytes, even if there's a bit of rounding",
      "created_at": "2021-04-26T17:35:41Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r620508755",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/620508755"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621332721",
      "pull_request_review_id": 646021893,
      "id": 621332721,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMTMzMjcyMQ==",
      "diff_hunk": "@@ -494,11 +585,20 @@ class MemPoolAccept\n          */\n         std::vector<COutPoint>& m_coins_to_uncache;\n         const bool m_test_accept;\n+        /** Disable BIP125 RBFing; disallow all conflicts with mempool transactions. */\n+        const bool disallow_mempool_conflicts;\n     };\n \n     // Single transaction acceptance\n     MempoolAcceptResult AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+    /**\n+    * Multiple transaction acceptance. Transactions may or may not be interdependent,\n+    * but must not conflict with each other. Parents must come before children if any\n+    * any dependencies exist.",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 168,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "8d95509150111b4fd77d2232f9c7d096b66abd23",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: twice any",
      "created_at": "2021-04-27T15:37:11Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r621332721",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621332721"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 598,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621334647",
      "pull_request_review_id": 646021893,
      "id": 621334647,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMTMzNDY0Nw==",
      "diff_hunk": "@@ -494,11 +585,20 @@ class MemPoolAccept\n          */\n         std::vector<COutPoint>& m_coins_to_uncache;\n         const bool m_test_accept;\n+        /** Disable BIP125 RBFing; disallow all conflicts with mempool transactions. */",
      "path": "src/validation.cpp",
      "position": 57,
      "original_position": 158,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "8d95509150111b4fd77d2232f9c7d096b66abd23",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I would say it's more replacement which are disallowed rather than conflicts. Conflicts are considered as fatal for mempool acceptance.",
      "created_at": "2021-04-27T15:39:18Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r621334647",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621334647"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 475,
      "original_line": 475,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621401538",
      "pull_request_review_id": 646021893,
      "id": 621401538,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMTQwMTUzOA==",
      "diff_hunk": "@@ -932,62 +937,76 @@ static RPCHelpMan testmempoolaccept()\n         UniValueType(), // VNUM or VSTR, checked inside AmountFromValue()\n     });\n \n-    if (request.params[0].get_array().size() != 1) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array must contain exactly one raw transaction for now\");\n+    if (request.params[0].get_array().size() > MAX_PACKAGE_COUNT) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array cannot contain more than \" + ToString(MAX_PACKAGE_COUNT) + \" transactions.\");\n     }\n \n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_array()[0].get_str())) {\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n-    }\n-    CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-\n+    const UniValue raw_transactions = request.params[0].get_array();\n     const CFeeRate max_raw_tx_fee_rate = request.params[1].isNull() ?\n                                              DEFAULT_MAX_RAW_TX_FEE_RATE :\n                                              CFeeRate(AmountFromValue(request.params[1]));\n \n-    NodeContext& node = EnsureAnyNodeContext(request.context);\n+    std::vector<CTransactionRef> txns;\n+    for (const auto& rawtx : raw_transactions.getValues()) {\n+        CMutableTransaction mtx;\n+        if (!DecodeHexTx(mtx, rawtx.get_str())) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n+        }\n+        txns.emplace_back(MakeTransactionRef(std::move(mtx)));\n+    }\n \n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n     CTxMemPool& mempool = EnsureMemPool(node);\n-    int64_t virtual_size = GetVirtualTransactionSize(*tx);\n-    CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n-\n-    UniValue result(UniValue::VARR);\n-    UniValue result_0(UniValue::VOBJ);\n-    result_0.pushKV(\"txid\", tx->GetHash().GetHex());\n-    result_0.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n-\n-    ChainstateManager& chainman = EnsureChainman(node);\n-    const MempoolAcceptResult accept_result = WITH_LOCK(cs_main, return AcceptToMemoryPool(chainman.ActiveChainstate(), mempool, std::move(tx),\n-                                                  false /* bypass_limits */, /* test_accept */ true));\n-\n-    // Only return the fee and vsize if the transaction would pass ATMP.\n-    // These can be used to calculate the feerate.\n-    if (accept_result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-        const CAmount fee = accept_result.m_base_fees.value();\n-        // Check that fee does not exceed maximum fee\n-        if (max_raw_tx_fee && fee > max_raw_tx_fee) {\n-            result_0.pushKV(\"allowed\", false);\n-            result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n-        } else {\n-            result_0.pushKV(\"allowed\", true);\n-            result_0.pushKV(\"vsize\", virtual_size);\n-            UniValue fees(UniValue::VOBJ);\n-            fees.pushKV(\"base\", ValueFromAmount(fee));\n-            result_0.pushKV(\"fees\", fees);\n+    CChainState& chainstate = EnsureChainman(node).ActiveChainstate();\n+    const PackageMempoolAcceptResult validation_result = [&] {\n+        LOCK(::cs_main);\n+        if (txns.size() > 1) return ProcessNewPackage(chainstate, mempool, txns, /* test_accept */ true);\n+        return PackageMempoolAcceptResult(txns[0]->GetWitnessHash(),\n+               AcceptToMemoryPool(chainstate, mempool, txns[0], /* bypass_limits */ false, /* test_accept*/ true));\n+    }();\n+\n+    UniValue rpc_result(UniValue::VARR);\n+\n+    for (auto tx : txns) {\n+        UniValue result_inner(UniValue::VOBJ);\n+        result_inner.pushKV(\"txid\", tx->GetHash().GetHex());\n+        result_inner.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n+        auto it = validation_result.m_tx_results.find(tx->GetWitnessHash());\n+        if (it == validation_result.m_tx_results.end()) {\n+            // Validation unfinished. Just return the txid and wtxid.",
      "path": "src/rpc/rawtransaction.cpp",
      "position": 137,
      "original_position": 114,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "8d95509150111b4fd77d2232f9c7d096b66abd23",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "IIUC, in case of failure due to a package policy check, we only yell back txid/wtxid of each package member but we don't indicate the reject reason to the user ?\r\n\r\nIf `txns > 1` and `!m_txresults.empty()` we can return allowed=true, if `m_txresults.empty()` we can return allowed=false and the rejection reason ? I don't think we need to extend testmempoolaccept with a new field.",
      "created_at": "2021-04-27T16:41:35Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r621401538",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621401538"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 988,
      "original_line": 988,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621408788",
      "pull_request_review_id": 646021893,
      "id": 621408788,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMTQwODc4OA==",
      "diff_hunk": "@@ -212,10 +221,32 @@ struct MempoolAcceptResult {\n \n     /** Constructor for success case */\n     explicit MempoolAcceptResult(std::list<CTransactionRef>&& replaced_txns, CAmount fees)\n-        : m_result_type(ResultType::VALID), m_state(TxValidationState{}),\n+        : m_result_type(ResultType::VALID),\n         m_replaced_transactions(std::move(replaced_txns)), m_base_fees(fees) {}\n };\n \n+/**\n+* Validation result for package mempool acceptance.\n+*/\n+struct PackageMempoolAcceptResult\n+{\n+    PackageValidationState m_state;\n+    /**\n+    * Map from wtxid to finished MempoolAcceptResults. The client is responsible\n+    * for keeping track of the transaction objects themselves. If a result is not\n+    * present, it means validation was unfinished for that transaction.\n+    */\n+    std::map<const uint256, const MempoolAcceptResult> m_tx_results;\n+\n+    explicit PackageMempoolAcceptResult(const PackageValidationState& state,\n+                                        std::map<const uint256, const MempoolAcceptResult>&& results)\n+        : m_state{state}, m_tx_results(std::move(results)) {}\n+\n+    /** Constructor to create a PackageMempoolAcceptResult from a single MempoolAcceptResult */\n+    explicit PackageMempoolAcceptResult(const uint256& txid, const MempoolAcceptResult& result)",
      "path": "src/validation.h",
      "position": null,
      "original_position": 74,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "8d95509150111b4fd77d2232f9c7d096b66abd23",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: wtxid",
      "created_at": "2021-04-27T16:50:39Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r621408788",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621408788"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 246,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621429286",
      "pull_request_review_id": 646021893,
      "id": 621429286,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMTQyOTI4Ng==",
      "diff_hunk": "@@ -1062,28 +1162,155 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n \n     Workspace ws(ptx);\n \n-    if (!PreChecks(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!PreChecks(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n-    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Tx was accepted, but not added\n     if (args.m_test_accept) {\n-        return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+        return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n     }\n \n-    if (!Finalize(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!Finalize(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+    return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+}\n+\n+PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::vector<CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    PackageValidationState package_state;\n+    const unsigned int package_count = txns.size();\n+\n+    // These context-free package limits can be checked before taking the mempool lock.\n+    if (package_count > MAX_PACKAGE_COUNT) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"too-many-transactions\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    const int64_t total_size = std::accumulate(txns.cbegin(), txns.cend(), 0,\n+                               [](int64_t sum, const auto& tx) { return sum + GetVirtualTransactionSize(*tx); });\n+    // If the package only contains 1 tx, it's better to report the policy violation on individual tx size.\n+    if (package_count > 1 && total_size > MAX_PACKAGE_SIZE * 1000) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"too-large\");",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 258,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "8d95509150111b4fd77d2232f9c7d096b66abd23",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: \"max-package-size\" to dissociate clearly from the tx-level errors.",
      "created_at": "2021-04-27T17:16:42Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r621429286",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621429286"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1206,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621430141",
      "pull_request_review_id": 646021893,
      "id": 621430141,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMTQzMDE0MQ==",
      "diff_hunk": "@@ -1062,28 +1162,155 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n \n     Workspace ws(ptx);\n \n-    if (!PreChecks(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!PreChecks(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n-    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Tx was accepted, but not added\n     if (args.m_test_accept) {\n-        return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+        return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n     }\n \n-    if (!Finalize(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!Finalize(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+    return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+}\n+\n+PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::vector<CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    PackageValidationState package_state;\n+    const unsigned int package_count = txns.size();\n+\n+    // These context-free package limits can be checked before taking the mempool lock.\n+    if (package_count > MAX_PACKAGE_COUNT) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"too-many-transactions\");",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 250,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "8d95509150111b4fd77d2232f9c7d096b66abd23",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: \"max-package-limits\"/\"max-package-width\"",
      "created_at": "2021-04-27T17:17:45Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r621430141",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621430141"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1198,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621442515",
      "pull_request_review_id": 646021893,
      "id": 621442515,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMTQ0MjUxNQ==",
      "diff_hunk": "@@ -1062,28 +1162,155 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n \n     Workspace ws(ptx);\n \n-    if (!PreChecks(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!PreChecks(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n-    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Tx was accepted, but not added\n     if (args.m_test_accept) {\n-        return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+        return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n     }\n \n-    if (!Finalize(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!Finalize(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+    return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+}\n+\n+PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::vector<CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    PackageValidationState package_state;\n+    const unsigned int package_count = txns.size();\n+\n+    // These context-free package limits can be checked before taking the mempool lock.\n+    if (package_count > MAX_PACKAGE_COUNT) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"too-many-transactions\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    const int64_t total_size = std::accumulate(txns.cbegin(), txns.cend(), 0,\n+                               [](int64_t sum, const auto& tx) { return sum + GetVirtualTransactionSize(*tx); });\n+    // If the package only contains 1 tx, it's better to report the policy violation on individual tx size.\n+    if (package_count > 1 && total_size > MAX_PACKAGE_SIZE * 1000) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"too-large\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    // Construct workspaces and check package policies.\n+    std::vector<Workspace> workspaces{};\n+    workspaces.reserve(package_count);\n+    {\n+        std::unordered_set<uint256, SaltedTxidHasher> later_txids;\n+        std::transform(txns.cbegin(), txns.cend(), std::inserter(later_txids, later_txids.end()),\n+                       [](const auto& tx) { return tx->GetHash(); });\n+        // Require the package to be sorted in order of dependency, i.e. parents appear before children.\n+        // An unsorted package will fail anyway on missing-inputs, but it's better to quit earlier and\n+        // fail on something less ambiguous (missing-inputs could also be an orphan or trying to\n+        // spend nonexistent coins).\n+       for (const auto& tx : txns) {\n+            for (const auto& input : tx->vin) {\n+                if (later_txids.find(input.prevout.hash) != later_txids.end()) {\n+                    // The parent is a subsequent transaction in the package.\n+                    package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-sorted\");\n+                    return PackageMempoolAcceptResult(package_state, {});\n+                }\n+            }\n+            later_txids.erase(tx->GetHash());\n+            workspaces.emplace_back(Workspace(tx));\n+       }\n+    }\n+    std::map<const uint256, const MempoolAcceptResult> results;\n+    {\n+        // Don't allow any conflicting transactions, i.e. spending the same inputs, in a package.\n+        std::unordered_set<COutPoint, SaltedOutpointHasher> inputs_seen;\n+        for (const auto& tx : txns) {\n+            for (const auto& input : tx->vin) {\n+                if (inputs_seen.find(input.prevout) != inputs_seen.end()) {\n+                    // This input is also present in another tx in the package.\n+                    for (auto& ws : workspaces) {\n+                        ws.m_state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"conflict-in-package\");\n+                        results.emplace(ws.m_ptx->GetWitnessHash(), MempoolAcceptResult::Failure(ws.m_state));",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 295,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "8d95509150111b4fd77d2232f9c7d096b66abd23",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think I would drop emplacement of tx-level policy failure for now even if there I agree that an in-package conflict always implies an in-mempool conflict.\r\n\r\nSimilar to policy rules being tighter than consensus ones, package policy rules should be tighter than the mempool policy ones ? So following this reasoning, should we only expose the more severe one to the user ? Though if the package is compliant in itself, but failure is at the tx-level of course we should expose the faultive transaction and corresponding reason.\r\n\r\nI would say yet another package API open question. A clean hierarchy of errors would be cool.",
      "created_at": "2021-04-27T17:33:45Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r621442515",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621442515"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1243,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621466059",
      "pull_request_review_id": 646021893,
      "id": 621466059,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMTQ2NjA1OQ==",
      "diff_hunk": "@@ -1062,28 +1162,155 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n \n     Workspace ws(ptx);\n \n-    if (!PreChecks(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!PreChecks(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n-    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Tx was accepted, but not added\n     if (args.m_test_accept) {\n-        return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+        return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n     }\n \n-    if (!Finalize(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!Finalize(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+    return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+}\n+\n+PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::vector<CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    PackageValidationState package_state;\n+    const unsigned int package_count = txns.size();\n+\n+    // These context-free package limits can be checked before taking the mempool lock.",
      "path": "src/validation.cpp",
      "position": 138,
      "original_position": 248,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "8d95509150111b4fd77d2232f9c7d096b66abd23",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think we should encapsulate all package policy checks logic in its own module/file as best as we can. `validation.cpp` is already big enough and that would be better if we want to expose policy checks in more ad hoc tooling.\r\n\r\nI did it quickly there : https://github.com/ariard/bitcoin/commit/8503af2ab5e897fd1f37e0af0844fc5e60bb68a1\r\n\r\nWhat do you think about it ? Feel free to take the patch, otherwise I can keep it as a follow-up for #20833 ",
      "created_at": "2021-04-27T18:03:22Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r621466059",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621466059"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1083,
      "original_line": 1083,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621486482",
      "pull_request_review_id": 646218418,
      "id": 621486482,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMTQ4NjQ4Mg==",
      "diff_hunk": "@@ -186,10 +200,13 @@ bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntr\n         staged_ancestors.erase(stage);\n         totalSizeWithAncestors += stageit->GetTxSize();\n \n-        if (stageit->GetSizeWithDescendants() + entry.GetTxSize() > limitDescendantSize) {\n+        // When multiple transactions are passed in, the ancestors and descendants of all transactions\n+        // considered together must be within limits even if they are not interdependent. This may be\n+        // stricter than the limits for each individual transaction.",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 80,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "9ce7b0f3850a0d69e81a68f18906a9d1aa4356fb",
      "in_reply_to_id": 618627239,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Distinct testmempoolaccept calls returning different results for policy reasons is not a \"quirk,\" it's just a natural part of mempool policy. With single test accepts today you could call it 3 times and get 3 different results for the same tx because anything can happen in between calls.\r\n\r\nAnd I don't agree with this assumption of anything can happen in between calls. Ultimately you can isolate and disconnect your node to verify the correctness equivalence of `testmempoolaccept` of package A of size N compare to N sequential call to `testmempoolaccept` for each member of package A.\r\n\r\nThat said what previous discussions about RBF conflict sounds to have establish is package policy checks != mempool policy checks, so I don't think we need to agree on assumptions there. We'll make it clear to the user that you can succeed a package A but individually fail transaction member or vice-versa.\r\n\r\n> TLDR: I agree conceptually, but don't think it's necessary in this PR. I'm trying to keep this as bare-bones as possible and it's 1000+ lines...\r\n\r\nIIRC, it was on my push to add ancestors/descendants at the package-level but given the complexity in practice I would prefer not to touch `txmempool.cpp` in this PR. I think we can roll-back e7aa139 and introduce in its own PR ? That would make more happy reviewer to not have think about what we might breack by modifying `CalculateMemPoolAncestors` :)",
      "created_at": "2021-04-27T18:25:46Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r621486482",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621486482"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 205,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621513948",
      "pull_request_review_id": 646253625,
      "id": 621513948,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMTUxMzk0OA==",
      "diff_hunk": "@@ -932,62 +937,76 @@ static RPCHelpMan testmempoolaccept()\n         UniValueType(), // VNUM or VSTR, checked inside AmountFromValue()\n     });\n \n-    if (request.params[0].get_array().size() != 1) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array must contain exactly one raw transaction for now\");\n+    if (request.params[0].get_array().size() > MAX_PACKAGE_COUNT) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array cannot contain more than \" + ToString(MAX_PACKAGE_COUNT) + \" transactions.\");\n     }\n \n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_array()[0].get_str())) {\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n-    }\n-    CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-\n+    const UniValue raw_transactions = request.params[0].get_array();\n     const CFeeRate max_raw_tx_fee_rate = request.params[1].isNull() ?\n                                              DEFAULT_MAX_RAW_TX_FEE_RATE :\n                                              CFeeRate(AmountFromValue(request.params[1]));\n \n-    NodeContext& node = EnsureAnyNodeContext(request.context);\n+    std::vector<CTransactionRef> txns;\n+    for (const auto& rawtx : raw_transactions.getValues()) {\n+        CMutableTransaction mtx;\n+        if (!DecodeHexTx(mtx, rawtx.get_str())) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n+        }\n+        txns.emplace_back(MakeTransactionRef(std::move(mtx)));\n+    }\n \n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n     CTxMemPool& mempool = EnsureMemPool(node);\n-    int64_t virtual_size = GetVirtualTransactionSize(*tx);\n-    CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n-\n-    UniValue result(UniValue::VARR);\n-    UniValue result_0(UniValue::VOBJ);\n-    result_0.pushKV(\"txid\", tx->GetHash().GetHex());\n-    result_0.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n-\n-    ChainstateManager& chainman = EnsureChainman(node);\n-    const MempoolAcceptResult accept_result = WITH_LOCK(cs_main, return AcceptToMemoryPool(chainman.ActiveChainstate(), mempool, std::move(tx),\n-                                                  false /* bypass_limits */, /* test_accept */ true));\n-\n-    // Only return the fee and vsize if the transaction would pass ATMP.\n-    // These can be used to calculate the feerate.\n-    if (accept_result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-        const CAmount fee = accept_result.m_base_fees.value();\n-        // Check that fee does not exceed maximum fee\n-        if (max_raw_tx_fee && fee > max_raw_tx_fee) {\n-            result_0.pushKV(\"allowed\", false);\n-            result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n-        } else {\n-            result_0.pushKV(\"allowed\", true);\n-            result_0.pushKV(\"vsize\", virtual_size);\n-            UniValue fees(UniValue::VOBJ);\n-            fees.pushKV(\"base\", ValueFromAmount(fee));\n-            result_0.pushKV(\"fees\", fees);\n+    CChainState& chainstate = EnsureChainman(node).ActiveChainstate();\n+    const PackageMempoolAcceptResult validation_result = [&] {\n+        LOCK(::cs_main);\n+        if (txns.size() > 1) return ProcessNewPackage(chainstate, mempool, txns, /* test_accept */ true);\n+        return PackageMempoolAcceptResult(txns[0]->GetWitnessHash(),\n+               AcceptToMemoryPool(chainstate, mempool, txns[0], /* bypass_limits */ false, /* test_accept*/ true));\n+    }();\n+\n+    UniValue rpc_result(UniValue::VARR);\n+\n+    for (auto tx : txns) {\n+        UniValue result_inner(UniValue::VOBJ);\n+        result_inner.pushKV(\"txid\", tx->GetHash().GetHex());\n+        result_inner.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n+        auto it = validation_result.m_tx_results.find(tx->GetWitnessHash());\n+        if (it == validation_result.m_tx_results.end()) {\n+            // Validation unfinished. Just return the txid and wtxid.",
      "path": "src/rpc/rawtransaction.cpp",
      "position": 137,
      "original_position": 114,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "8d95509150111b4fd77d2232f9c7d096b66abd23",
      "in_reply_to_id": 621401538,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe we can just put the `PackageValidationResult` error message in each one if it fails due to `PCKG_POLICY`?",
      "created_at": "2021-04-27T19:05:06Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r621513948",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621513948"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 988,
      "original_line": 988,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621514802",
      "pull_request_review_id": 646254988,
      "id": 621514802,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMTUxNDgwMg==",
      "diff_hunk": "@@ -1062,28 +1162,155 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n \n     Workspace ws(ptx);\n \n-    if (!PreChecks(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!PreChecks(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n-    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Tx was accepted, but not added\n     if (args.m_test_accept) {\n-        return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+        return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n     }\n \n-    if (!Finalize(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!Finalize(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+    return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+}\n+\n+PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::vector<CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    PackageValidationState package_state;\n+    const unsigned int package_count = txns.size();\n+\n+    // These context-free package limits can be checked before taking the mempool lock.\n+    if (package_count > MAX_PACKAGE_COUNT) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"too-many-transactions\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    const int64_t total_size = std::accumulate(txns.cbegin(), txns.cend(), 0,\n+                               [](int64_t sum, const auto& tx) { return sum + GetVirtualTransactionSize(*tx); });\n+    // If the package only contains 1 tx, it's better to report the policy violation on individual tx size.\n+    if (package_count > 1 && total_size > MAX_PACKAGE_SIZE * 1000) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"too-large\");",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 258,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "8d95509150111b4fd77d2232f9c7d096b66abd23",
      "in_reply_to_id": 621429286,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "\"package-too-large\" maybe?",
      "created_at": "2021-04-27T19:06:31Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r621514802",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621514802"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1206,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621514815",
      "pull_request_review_id": 646254988,
      "id": 621514815,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMTUxNDgxNQ==",
      "diff_hunk": "@@ -1062,28 +1162,155 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n \n     Workspace ws(ptx);\n \n-    if (!PreChecks(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!PreChecks(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n-    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Tx was accepted, but not added\n     if (args.m_test_accept) {\n-        return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+        return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n     }\n \n-    if (!Finalize(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!Finalize(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+    return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+}\n+\n+PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::vector<CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    PackageValidationState package_state;\n+    const unsigned int package_count = txns.size();\n+\n+    // These context-free package limits can be checked before taking the mempool lock.\n+    if (package_count > MAX_PACKAGE_COUNT) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"too-many-transactions\");",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 250,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "8d95509150111b4fd77d2232f9c7d096b66abd23",
      "in_reply_to_id": 621430141,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "\"package-too-many-transactions\" maybe?",
      "created_at": "2021-04-27T19:06:33Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r621514815",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621514815"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1198,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621668800",
      "pull_request_review_id": 646436791,
      "id": 621668800,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMTY2ODgwMA==",
      "diff_hunk": "@@ -1062,28 +1162,155 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n \n     Workspace ws(ptx);\n \n-    if (!PreChecks(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!PreChecks(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n-    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Tx was accepted, but not added\n     if (args.m_test_accept) {\n-        return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+        return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n     }\n \n-    if (!Finalize(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!Finalize(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+    return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+}\n+\n+PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::vector<CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    PackageValidationState package_state;\n+    const unsigned int package_count = txns.size();\n+\n+    // These context-free package limits can be checked before taking the mempool lock.\n+    if (package_count > MAX_PACKAGE_COUNT) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"too-many-transactions\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    const int64_t total_size = std::accumulate(txns.cbegin(), txns.cend(), 0,\n+                               [](int64_t sum, const auto& tx) { return sum + GetVirtualTransactionSize(*tx); });\n+    // If the package only contains 1 tx, it's better to report the policy violation on individual tx size.\n+    if (package_count > 1 && total_size > MAX_PACKAGE_SIZE * 1000) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"too-large\");",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 258,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "8d95509150111b4fd77d2232f9c7d096b66abd23",
      "in_reply_to_id": 621429286,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "i made it \"package-too-large\"",
      "created_at": "2021-04-27T22:48:19Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r621668800",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621668800"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1206,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621668982",
      "pull_request_review_id": 646436950,
      "id": 621668982,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMTY2ODk4Mg==",
      "diff_hunk": "@@ -212,10 +221,32 @@ struct MempoolAcceptResult {\n \n     /** Constructor for success case */\n     explicit MempoolAcceptResult(std::list<CTransactionRef>&& replaced_txns, CAmount fees)\n-        : m_result_type(ResultType::VALID), m_state(TxValidationState{}),\n+        : m_result_type(ResultType::VALID),\n         m_replaced_transactions(std::move(replaced_txns)), m_base_fees(fees) {}\n };\n \n+/**\n+* Validation result for package mempool acceptance.\n+*/\n+struct PackageMempoolAcceptResult\n+{\n+    PackageValidationState m_state;\n+    /**\n+    * Map from wtxid to finished MempoolAcceptResults. The client is responsible\n+    * for keeping track of the transaction objects themselves. If a result is not\n+    * present, it means validation was unfinished for that transaction.\n+    */\n+    std::map<const uint256, const MempoolAcceptResult> m_tx_results;\n+\n+    explicit PackageMempoolAcceptResult(const PackageValidationState& state,\n+                                        std::map<const uint256, const MempoolAcceptResult>&& results)\n+        : m_state{state}, m_tx_results(std::move(results)) {}\n+\n+    /** Constructor to create a PackageMempoolAcceptResult from a single MempoolAcceptResult */\n+    explicit PackageMempoolAcceptResult(const uint256& txid, const MempoolAcceptResult& result)",
      "path": "src/validation.h",
      "position": null,
      "original_position": 74,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "8d95509150111b4fd77d2232f9c7d096b66abd23",
      "in_reply_to_id": 621408788,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, definitely more clear 👍 ",
      "created_at": "2021-04-27T22:48:40Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r621668982",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621668982"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 246,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621669354",
      "pull_request_review_id": 646437378,
      "id": 621669354,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMTY2OTM1NA==",
      "diff_hunk": "@@ -932,62 +937,76 @@ static RPCHelpMan testmempoolaccept()\n         UniValueType(), // VNUM or VSTR, checked inside AmountFromValue()\n     });\n \n-    if (request.params[0].get_array().size() != 1) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array must contain exactly one raw transaction for now\");\n+    if (request.params[0].get_array().size() > MAX_PACKAGE_COUNT) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array cannot contain more than \" + ToString(MAX_PACKAGE_COUNT) + \" transactions.\");\n     }\n \n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_array()[0].get_str())) {\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n-    }\n-    CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-\n+    const UniValue raw_transactions = request.params[0].get_array();\n     const CFeeRate max_raw_tx_fee_rate = request.params[1].isNull() ?\n                                              DEFAULT_MAX_RAW_TX_FEE_RATE :\n                                              CFeeRate(AmountFromValue(request.params[1]));\n \n-    NodeContext& node = EnsureAnyNodeContext(request.context);\n+    std::vector<CTransactionRef> txns;\n+    for (const auto& rawtx : raw_transactions.getValues()) {\n+        CMutableTransaction mtx;\n+        if (!DecodeHexTx(mtx, rawtx.get_str())) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n+        }\n+        txns.emplace_back(MakeTransactionRef(std::move(mtx)));\n+    }\n \n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n     CTxMemPool& mempool = EnsureMemPool(node);\n-    int64_t virtual_size = GetVirtualTransactionSize(*tx);\n-    CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n-\n-    UniValue result(UniValue::VARR);\n-    UniValue result_0(UniValue::VOBJ);\n-    result_0.pushKV(\"txid\", tx->GetHash().GetHex());\n-    result_0.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n-\n-    ChainstateManager& chainman = EnsureChainman(node);\n-    const MempoolAcceptResult accept_result = WITH_LOCK(cs_main, return AcceptToMemoryPool(chainman.ActiveChainstate(), mempool, std::move(tx),\n-                                                  false /* bypass_limits */, /* test_accept */ true));\n-\n-    // Only return the fee and vsize if the transaction would pass ATMP.\n-    // These can be used to calculate the feerate.\n-    if (accept_result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-        const CAmount fee = accept_result.m_base_fees.value();\n-        // Check that fee does not exceed maximum fee\n-        if (max_raw_tx_fee && fee > max_raw_tx_fee) {\n-            result_0.pushKV(\"allowed\", false);\n-            result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n-        } else {\n-            result_0.pushKV(\"allowed\", true);\n-            result_0.pushKV(\"vsize\", virtual_size);\n-            UniValue fees(UniValue::VOBJ);\n-            fees.pushKV(\"base\", ValueFromAmount(fee));\n-            result_0.pushKV(\"fees\", fees);\n+    CChainState& chainstate = EnsureChainman(node).ActiveChainstate();\n+    const PackageMempoolAcceptResult validation_result = [&] {\n+        LOCK(::cs_main);\n+        if (txns.size() > 1) return ProcessNewPackage(chainstate, mempool, txns, /* test_accept */ true);\n+        return PackageMempoolAcceptResult(txns[0]->GetWitnessHash(),\n+               AcceptToMemoryPool(chainstate, mempool, txns[0], /* bypass_limits */ false, /* test_accept*/ true));\n+    }();\n+\n+    UniValue rpc_result(UniValue::VARR);\n+\n+    for (auto tx : txns) {\n+        UniValue result_inner(UniValue::VOBJ);\n+        result_inner.pushKV(\"txid\", tx->GetHash().GetHex());\n+        result_inner.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n+        auto it = validation_result.m_tx_results.find(tx->GetWitnessHash());\n+        if (it == validation_result.m_tx_results.end()) {\n+            // Validation unfinished. Just return the txid and wtxid.",
      "path": "src/rpc/rawtransaction.cpp",
      "position": 137,
      "original_position": 114,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "8d95509150111b4fd77d2232f9c7d096b66abd23",
      "in_reply_to_id": 621401538,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I've added a \"package-error\" key for the RPC, so it isn't just blank",
      "created_at": "2021-04-27T22:49:41Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r621669354",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621669354"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 988,
      "original_line": 988,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621670071",
      "pull_request_review_id": 646438059,
      "id": 621670071,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMTY3MDA3MQ==",
      "diff_hunk": "@@ -1062,28 +1162,155 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n \n     Workspace ws(ptx);\n \n-    if (!PreChecks(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!PreChecks(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n-    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Tx was accepted, but not added\n     if (args.m_test_accept) {\n-        return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+        return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n     }\n \n-    if (!Finalize(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!Finalize(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+    return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+}\n+\n+PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::vector<CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    PackageValidationState package_state;\n+    const unsigned int package_count = txns.size();\n+\n+    // These context-free package limits can be checked before taking the mempool lock.\n+    if (package_count > MAX_PACKAGE_COUNT) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"too-many-transactions\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    const int64_t total_size = std::accumulate(txns.cbegin(), txns.cend(), 0,\n+                               [](int64_t sum, const auto& tx) { return sum + GetVirtualTransactionSize(*tx); });\n+    // If the package only contains 1 tx, it's better to report the policy violation on individual tx size.\n+    if (package_count > 1 && total_size > MAX_PACKAGE_SIZE * 1000) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"too-large\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    // Construct workspaces and check package policies.\n+    std::vector<Workspace> workspaces{};\n+    workspaces.reserve(package_count);\n+    {\n+        std::unordered_set<uint256, SaltedTxidHasher> later_txids;\n+        std::transform(txns.cbegin(), txns.cend(), std::inserter(later_txids, later_txids.end()),\n+                       [](const auto& tx) { return tx->GetHash(); });\n+        // Require the package to be sorted in order of dependency, i.e. parents appear before children.\n+        // An unsorted package will fail anyway on missing-inputs, but it's better to quit earlier and\n+        // fail on something less ambiguous (missing-inputs could also be an orphan or trying to\n+        // spend nonexistent coins).\n+       for (const auto& tx : txns) {\n+            for (const auto& input : tx->vin) {\n+                if (later_txids.find(input.prevout.hash) != later_txids.end()) {\n+                    // The parent is a subsequent transaction in the package.\n+                    package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-sorted\");\n+                    return PackageMempoolAcceptResult(package_state, {});\n+                }\n+            }\n+            later_txids.erase(tx->GetHash());\n+            workspaces.emplace_back(Workspace(tx));\n+       }\n+    }\n+    std::map<const uint256, const MempoolAcceptResult> results;\n+    {\n+        // Don't allow any conflicting transactions, i.e. spending the same inputs, in a package.\n+        std::unordered_set<COutPoint, SaltedOutpointHasher> inputs_seen;\n+        for (const auto& tx : txns) {\n+            for (const auto& input : tx->vin) {\n+                if (inputs_seen.find(input.prevout) != inputs_seen.end()) {\n+                    // This input is also present in another tx in the package.\n+                    for (auto& ws : workspaces) {\n+                        ws.m_state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"conflict-in-package\");\n+                        results.emplace(ws.m_ptx->GetWitnessHash(), MempoolAcceptResult::Failure(ws.m_state));",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 295,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "8d95509150111b4fd77d2232f9c7d096b66abd23",
      "in_reply_to_id": 621442515,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ok, I've dropped this line. Now, if there's a package-wide error, the `results` map is empty (which I think is nice, saves space) and `testmempoolaccept` will include any `PackageValidationResult::PCKG_POLICY` error to the \"package-error\" field in the RPC result",
      "created_at": "2021-04-27T22:51:11Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r621670071",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621670071"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1243,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621670704",
      "pull_request_review_id": 646438666,
      "id": 621670704,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMTY3MDcwNA==",
      "diff_hunk": "@@ -1062,28 +1162,155 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n \n     Workspace ws(ptx);\n \n-    if (!PreChecks(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!PreChecks(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n-    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Tx was accepted, but not added\n     if (args.m_test_accept) {\n-        return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+        return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n     }\n \n-    if (!Finalize(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!Finalize(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+    return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+}\n+\n+PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::vector<CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    PackageValidationState package_state;\n+    const unsigned int package_count = txns.size();\n+\n+    // These context-free package limits can be checked before taking the mempool lock.\n+    if (package_count > MAX_PACKAGE_COUNT) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"too-many-transactions\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    const int64_t total_size = std::accumulate(txns.cbegin(), txns.cend(), 0,\n+                               [](int64_t sum, const auto& tx) { return sum + GetVirtualTransactionSize(*tx); });\n+    // If the package only contains 1 tx, it's better to report the policy violation on individual tx size.\n+    if (package_count > 1 && total_size > MAX_PACKAGE_SIZE * 1000) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"too-large\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    // Construct workspaces and check package policies.\n+    std::vector<Workspace> workspaces{};\n+    workspaces.reserve(package_count);\n+    {\n+        std::unordered_set<uint256, SaltedTxidHasher> later_txids;\n+        std::transform(txns.cbegin(), txns.cend(), std::inserter(later_txids, later_txids.end()),\n+                       [](const auto& tx) { return tx->GetHash(); });\n+        // Require the package to be sorted in order of dependency, i.e. parents appear before children.\n+        // An unsorted package will fail anyway on missing-inputs, but it's better to quit earlier and\n+        // fail on something less ambiguous (missing-inputs could also be an orphan or trying to\n+        // spend nonexistent coins).\n+       for (const auto& tx : txns) {\n+            for (const auto& input : tx->vin) {\n+                if (later_txids.find(input.prevout.hash) != later_txids.end()) {\n+                    // The parent is a subsequent transaction in the package.\n+                    package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-sorted\");\n+                    return PackageMempoolAcceptResult(package_state, {});\n+                }\n+            }\n+            later_txids.erase(tx->GetHash());\n+            workspaces.emplace_back(Workspace(tx));\n+       }\n+    }\n+    std::map<const uint256, const MempoolAcceptResult> results;\n+    {\n+        // Don't allow any conflicting transactions, i.e. spending the same inputs, in a package.\n+        std::unordered_set<COutPoint, SaltedOutpointHasher> inputs_seen;\n+        for (const auto& tx : txns) {\n+            for (const auto& input : tx->vin) {\n+                if (inputs_seen.find(input.prevout) != inputs_seen.end()) {\n+                    // This input is also present in another tx in the package.\n+                    for (auto& ws : workspaces) {\n+                        ws.m_state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"conflict-in-package\");\n+                        results.emplace(ws.m_ptx->GetWitnessHash(), MempoolAcceptResult::Failure(ws.m_state));",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 295,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "8d95509150111b4fd77d2232f9c7d096b66abd23",
      "in_reply_to_id": 621442515,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think the hierarchy is now: if there's a `PCKG_POLICY` error, we don't return tx-specific errors.",
      "created_at": "2021-04-27T22:52:40Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r621670704",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621670704"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1243,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621672223",
      "pull_request_review_id": 646440269,
      "id": 621672223,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMTY3MjIyMw==",
      "diff_hunk": "@@ -186,10 +200,13 @@ bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntr\n         staged_ancestors.erase(stage);\n         totalSizeWithAncestors += stageit->GetTxSize();\n \n-        if (stageit->GetSizeWithDescendants() + entry.GetTxSize() > limitDescendantSize) {\n+        // When multiple transactions are passed in, the ancestors and descendants of all transactions\n+        // considered together must be within limits even if they are not interdependent. This may be\n+        // stricter than the limits for each individual transaction.",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 80,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "9ce7b0f3850a0d69e81a68f18906a9d1aa4356fb",
      "in_reply_to_id": 618627239,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> I think we can roll-back e7aa139 and introduce in its own PR ? That would make more happy reviewer to not have think about what we might breack by modifying CalculateMemPoolAncestors :)\r\n\r\n@ariard Yeah, good point! Without the ancestor/descendant logic I think we could end up with a chain of 49 at least, but we never actually submit them to mempool here so it won't really hurt us... I've just reordered the commits so everything past the release notes could go in a followup PR, maybe that'd help?",
      "created_at": "2021-04-27T22:56:23Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r621672223",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/621672223"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 205,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/622462747",
      "pull_request_review_id": 647423966,
      "id": 622462747,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMjQ2Mjc0Nw==",
      "diff_hunk": "@@ -494,11 +585,20 @@ class MemPoolAccept\n          */\n         std::vector<COutPoint>& m_coins_to_uncache;\n         const bool m_test_accept;\n+        /** Disable BIP125 RBFing; disallow all conflicts with mempool transactions. */",
      "path": "src/validation.cpp",
      "position": 57,
      "original_position": 158,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "8d95509150111b4fd77d2232f9c7d096b66abd23",
      "in_reply_to_id": 621334647,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Hm? Transactions would only be replacing if they conflicted with mempool.",
      "created_at": "2021-04-28T19:08:17Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r622462747",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/622462747"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 475,
      "original_line": 475,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/622483128",
      "pull_request_review_id": 647448650,
      "id": 622483128,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMjQ4MzEyOA==",
      "diff_hunk": "@@ -186,10 +200,13 @@ bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntr\n         staged_ancestors.erase(stage);\n         totalSizeWithAncestors += stageit->GetTxSize();\n \n-        if (stageit->GetSizeWithDescendants() + entry.GetTxSize() > limitDescendantSize) {\n+        // When multiple transactions are passed in, the ancestors and descendants of all transactions\n+        // considered together must be within limits even if they are not interdependent. This may be\n+        // stricter than the limits for each individual transaction.",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 80,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "9ce7b0f3850a0d69e81a68f18906a9d1aa4356fb",
      "in_reply_to_id": 618627239,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "separated to #21800 ",
      "created_at": "2021-04-28T19:40:16Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r622483128",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/622483128"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 205,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/622483573",
      "pull_request_review_id": 647449174,
      "id": 622483573,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMjQ4MzU3Mw==",
      "diff_hunk": "@@ -1062,28 +1162,155 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n \n     Workspace ws(ptx);\n \n-    if (!PreChecks(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!PreChecks(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n-    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Tx was accepted, but not added\n     if (args.m_test_accept) {\n-        return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+        return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n     }\n \n-    if (!Finalize(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!Finalize(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+    return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+}\n+\n+PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::vector<CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    PackageValidationState package_state;\n+    const unsigned int package_count = txns.size();\n+\n+    // These context-free package limits can be checked before taking the mempool lock.",
      "path": "src/validation.cpp",
      "position": 138,
      "original_position": 248,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "8d95509150111b4fd77d2232f9c7d096b66abd23",
      "in_reply_to_id": 621466059,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Sounds good for a follow-up :)",
      "created_at": "2021-04-28T19:40:58Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r622483573",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/622483573"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1083,
      "original_line": 1083,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/624705935",
      "pull_request_review_id": 649923450,
      "id": 624705935,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNDcwNTkzNQ==",
      "diff_hunk": "@@ -47,4 +49,51 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_reject_coinbase, TestChain100Setup)\n     BOOST_CHECK(result.m_state.GetResult() == TxValidationResult::TX_CONSENSUS);\n }\n \n+// Placeholder transactions that have no meaning.\n+inline CTransactionRef create_placeholder_tx(size_t num_inputs, size_t num_outputs)\n+{\n+    CMutableTransaction mtx = CMutableTransaction();\n+    mtx.vin.resize(num_inputs);\n+    mtx.vout.resize(num_outputs);\n+    for (size_t i{0}; i < num_inputs; ++i) {\n+        mtx.vin[i].prevout.hash = InsecureRand256();\n+        mtx.vin[i].prevout.n = 0;\n+    }\n+    for (size_t o{0}; o < num_outputs; ++o) {\n+        mtx.vout[o].nValue = 1 * CENT;\n+        mtx.vout[o].scriptPubKey = CScript();\n+    }\n+    return MakeTransactionRef(mtx);\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(package_limits, TestChain100Setup)\n+{\n+    // Packages can't have more than 25 transactions.\n+    LOCK(cs_main);\n+    Package package_too_many;\n+    package_too_many.resize(MAX_PACKAGE_COUNT + 1);",
      "path": "src/test/txvalidation_tests.cpp",
      "position": null,
      "original_position": 35,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "03fdad5ce2c2d9c592e2516251a4b2b3b61bbe00",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`resize` and  `emplace_back` is too much, the package will be of size 52 instead of the intended 26 and have empty elements.",
      "created_at": "2021-05-02T14:44:12Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r624705935",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/624705935"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/624711515",
      "pull_request_review_id": 649923450,
      "id": 624711515,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNDcxMTUxNQ==",
      "diff_hunk": "@@ -885,8 +886,10 @@ static RPCHelpMan sendrawtransaction()\n static RPCHelpMan testmempoolaccept()\n {\n     return RPCHelpMan{\"testmempoolaccept\",\n-                \"\\nReturns result of mempool acceptance tests indicating if raw transaction (serialized, hex-encoded) would be accepted by mempool.\\n\"\n-                \"\\nThis checks if the transaction violates the consensus or policy rules.\\n\"\n+                \"\\nReturns result of mempool acceptance tests indicating if raw transaction(s) (serialized, hex-encoded) would be accepted by mempool.\\n\"\n+                \"\\nIf multiple transactions are passed in, parents must come before children and package policies apply: the transactions cannot not conflict with any mempool transactions or each other.\\n\"",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "b0737bf14ccecb81515c8948c4a0b03b740a8f98",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "\"cannot not\" -> \"cannot\"",
      "created_at": "2021-05-02T15:22:43Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r624711515",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/624711515"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 890,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/624955595",
      "pull_request_review_id": 650182251,
      "id": 624955595,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNDk1NTU5NQ==",
      "diff_hunk": "@@ -47,4 +49,51 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_reject_coinbase, TestChain100Setup)\n     BOOST_CHECK(result.m_state.GetResult() == TxValidationResult::TX_CONSENSUS);\n }\n \n+// Placeholder transactions that have no meaning.\n+inline CTransactionRef create_placeholder_tx(size_t num_inputs, size_t num_outputs)\n+{\n+    CMutableTransaction mtx = CMutableTransaction();\n+    mtx.vin.resize(num_inputs);\n+    mtx.vout.resize(num_outputs);\n+    for (size_t i{0}; i < num_inputs; ++i) {\n+        mtx.vin[i].prevout.hash = InsecureRand256();\n+        mtx.vin[i].prevout.n = 0;\n+    }\n+    for (size_t o{0}; o < num_outputs; ++o) {\n+        mtx.vout[o].nValue = 1 * CENT;\n+        mtx.vout[o].scriptPubKey = CScript();\n+    }\n+    return MakeTransactionRef(mtx);\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(package_limits, TestChain100Setup)\n+{\n+    // Packages can't have more than 25 transactions.\n+    LOCK(cs_main);\n+    Package package_too_many;\n+    package_too_many.resize(MAX_PACKAGE_COUNT + 1);",
      "path": "src/test/txvalidation_tests.cpp",
      "position": null,
      "original_position": 35,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "03fdad5ce2c2d9c592e2516251a4b2b3b61bbe00",
      "in_reply_to_id": 624705935,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "oh, and when I change the size to 10 here (i.e. having 10 null transactions and 10 regular ones) I get a memory access violation, so `ProcessNewPackage` seems to have a problem with malformed input. This may be related to the fuzzer crashes @adamjonas mentioned above, but I can't see any older discussion around this topic because github sucks :cry: ",
      "created_at": "2021-05-03T08:47:04Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r624955595",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/624955595"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/625142575",
      "pull_request_review_id": 650426069,
      "id": 625142575,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNTE0MjU3NQ==",
      "diff_hunk": "@@ -47,4 +49,51 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_reject_coinbase, TestChain100Setup)\n     BOOST_CHECK(result.m_state.GetResult() == TxValidationResult::TX_CONSENSUS);\n }\n \n+// Placeholder transactions that have no meaning.\n+inline CTransactionRef create_placeholder_tx(size_t num_inputs, size_t num_outputs)\n+{\n+    CMutableTransaction mtx = CMutableTransaction();\n+    mtx.vin.resize(num_inputs);\n+    mtx.vout.resize(num_outputs);\n+    for (size_t i{0}; i < num_inputs; ++i) {\n+        mtx.vin[i].prevout.hash = InsecureRand256();\n+        mtx.vin[i].prevout.n = 0;\n+    }\n+    for (size_t o{0}; o < num_outputs; ++o) {\n+        mtx.vout[o].nValue = 1 * CENT;\n+        mtx.vout[o].scriptPubKey = CScript();\n+    }\n+    return MakeTransactionRef(mtx);\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(package_limits, TestChain100Setup)\n+{\n+    // Packages can't have more than 25 transactions.\n+    LOCK(cs_main);\n+    Package package_too_many;\n+    package_too_many.resize(MAX_PACKAGE_COUNT + 1);",
      "path": "src/test/txvalidation_tests.cpp",
      "position": null,
      "original_position": 35,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "03fdad5ce2c2d9c592e2516251a4b2b3b61bbe00",
      "in_reply_to_id": 624705935,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "agh, good catch! I meant to use `reserve()` 🤦 ",
      "created_at": "2021-05-03T14:52:36Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r625142575",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/625142575"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/625241631",
      "pull_request_review_id": 650557587,
      "id": 625241631,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNTI0MTYzMQ==",
      "diff_hunk": "@@ -47,4 +49,51 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_reject_coinbase, TestChain100Setup)\n     BOOST_CHECK(result.m_state.GetResult() == TxValidationResult::TX_CONSENSUS);\n }\n \n+// Placeholder transactions that have no meaning.\n+inline CTransactionRef create_placeholder_tx(size_t num_inputs, size_t num_outputs)\n+{\n+    CMutableTransaction mtx = CMutableTransaction();\n+    mtx.vin.resize(num_inputs);\n+    mtx.vout.resize(num_outputs);\n+    for (size_t i{0}; i < num_inputs; ++i) {\n+        mtx.vin[i].prevout.hash = InsecureRand256();\n+        mtx.vin[i].prevout.n = 0;\n+    }\n+    for (size_t o{0}; o < num_outputs; ++o) {\n+        mtx.vout[o].nValue = 1 * CENT;\n+        mtx.vout[o].scriptPubKey = CScript();\n+    }\n+    return MakeTransactionRef(mtx);\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(package_limits, TestChain100Setup)\n+{\n+    // Packages can't have more than 25 transactions.\n+    LOCK(cs_main);\n+    Package package_too_many;\n+    package_too_many.resize(MAX_PACKAGE_COUNT + 1);",
      "path": "src/test/txvalidation_tests.cpp",
      "position": null,
      "original_position": 35,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "03fdad5ce2c2d9c592e2516251a4b2b3b61bbe00",
      "in_reply_to_id": 624705935,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added checks for `txns.empty()` and null transactions.... hopefully this covers it.",
      "created_at": "2021-05-03T17:25:54Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r625241631",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/625241631"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/625867080",
      "pull_request_review_id": 651354583,
      "id": 625867080,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNTg2NzA4MA==",
      "diff_hunk": "@@ -494,11 +585,20 @@ class MemPoolAccept\n          */\n         std::vector<COutPoint>& m_coins_to_uncache;\n         const bool m_test_accept;\n+        /** Disable BIP125 RBFing; disallow all conflicts with mempool transactions. */",
      "path": "src/validation.cpp",
      "position": 57,
      "original_position": 158,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "8d95509150111b4fd77d2232f9c7d096b66abd23",
      "in_reply_to_id": 621334647,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think it's a glossary point here. \r\n\r\nIMO, conflict is the fact that transaction A is spending the same utxo as transaction B. Replacement is the fact that transaction A is substituted  to transaction B by mempool logic. You can't really _disallow_ same utxo spending, this is decided by the utxo owner. On the other hand your mempool logic is free to apply whatever replacement policy ?",
      "created_at": "2021-05-04T15:10:17Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r625867080",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/625867080"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 475,
      "original_line": 475,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/625914346",
      "pull_request_review_id": 651417784,
      "id": 625914346,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNTkxNDM0Ng==",
      "diff_hunk": "@@ -47,4 +49,64 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_reject_coinbase, TestChain100Setup)\n     BOOST_CHECK(result.m_state.GetResult() == TxValidationResult::TX_CONSENSUS);\n }\n \n+// Placeholder transactions that have no meaning.\n+inline CTransactionRef create_placeholder_tx(size_t num_inputs, size_t num_outputs)\n+{\n+    CMutableTransaction mtx = CMutableTransaction();\n+    mtx.vin.resize(num_inputs);\n+    mtx.vout.resize(num_outputs);\n+    for (size_t i{0}; i < num_inputs; ++i) {\n+        mtx.vin[i].prevout.hash = InsecureRand256();\n+        mtx.vin[i].prevout.n = 0;\n+    }\n+    for (size_t o{0}; o < num_outputs; ++o) {\n+        mtx.vout[o].nValue = 1 * CENT;\n+        mtx.vout[o].scriptPubKey = CScript();\n+    }\n+    return MakeTransactionRef(mtx);\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(basic_package_tests, TestChain100Setup)\n+{\n+    LOCK(cs_main);\n+\n+    unsigned int initialPoolSize = m_node.mempool->size();\n+    Package package_empty;\n+    const auto result_empty = ProcessNewPackage(::ChainstateActive(), *m_node.mempool, package_empty, true);\n+    BOOST_CHECK(result_empty.m_state.IsInvalid());\n+\n+    package_empty.resize(10); // null transactions\n+    const auto result_null_txns = ProcessNewPackage(::ChainstateActive(), *m_node.mempool, package_empty, true);\n+    BOOST_CHECK(result_empty.m_state.IsInvalid());",
      "path": "src/test/txvalidation_tests.cpp",
      "position": null,
      "original_position": 41,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "d8642c19991ca91ae7edeab82d3409a73fcfdb56",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Beware you're using `result_empty` instead of `result_null_txns` here.\r\n\r\nAlso can be extended a bit\r\n```\r\ndiff --git a/src/test/txvalidation_tests.cpp b/src/test/txvalidation_tests.cpp\r\nindex 802ac754d..4ef519b02 100644\r\n--- a/src/test/txvalidation_tests.cpp\r\n+++ b/src/test/txvalidation_tests.cpp\r\n@@ -74,10 +74,14 @@ BOOST_FIXTURE_TEST_CASE(basic_package_tests, TestChain100Setup)\r\n     Package package_empty;\r\n     const auto result_empty = ProcessNewPackage(::ChainstateActive(), *m_node.mempool, package_empty, true);\r\n     BOOST_CHECK(result_empty.m_state.IsInvalid());\r\n+    BOOST_CHECK_EQUAL(result_empty.m_state.GetResult(), PackageValidationResult::PCKG_POLICY);\r\n+    BOOST_CHECK_EQUAL(result_empty.m_state.GetRejectReason(), \"package-too-few-transactions\");\r\n \r\n     package_empty.resize(10); // null transactions\r\n     const auto result_null_txns = ProcessNewPackage(::ChainstateActive(), *m_node.mempool, package_empty, true);\r\n-    BOOST_CHECK(result_empty.m_state.IsInvalid());\r\n+    BOOST_CHECK(result_null_txns.m_state.IsInvalid());\r\n+    BOOST_CHECK_EQUAL(result_null_txns.m_state.GetResult(), PackageValidationResult::PCKG_POLICY);\r\n+    BOOST_CHECK_EQUAL(result_null_txns.m_state.GetRejectReason(), \"package-malformed-transaction\");\r\n \r\n     // Packages can't have more than 25 transactions.\r\n     Package package_too_many;\r\n```",
      "created_at": "2021-05-04T16:09:21Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r625914346",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/625914346"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 80,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/625927118",
      "pull_request_review_id": 651417784,
      "id": 625927118,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNTkyNzExOA==",
      "diff_hunk": "@@ -1062,28 +1162,141 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n \n     Workspace ws(ptx);\n \n-    if (!PreChecks(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!PreChecks(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n-    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Tx was accepted, but not added\n     if (args.m_test_accept) {\n-        return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+        return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n     }\n \n-    if (!Finalize(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!Finalize(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+    return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+}\n+\n+PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::vector<CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    PackageValidationState package_state;\n+    // Check for malformed input.\n+    if (txns.empty()) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-too-few-transactions\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+    if (!std::all_of(txns.cbegin(), txns.cend(),\n+                     [](const auto& tx){ return tx && !tx->IsNull(); })) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-malformed-transaction\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    const unsigned int package_count = txns.size();\n+\n+    // These context-free package limits can be checked before taking the mempool lock.\n+    if (package_count > MAX_PACKAGE_COUNT) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-too-many-transactions\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    const int64_t total_size = std::accumulate(txns.cbegin(), txns.cend(), 0,\n+                               [](int64_t sum, const auto& tx) { return sum + GetVirtualTransactionSize(*tx); });\n+    // If the package only contains 1 tx, it's better to report the policy violation on individual tx size.\n+    if (package_count > 1 && total_size > MAX_PACKAGE_SIZE * 1000) {",
      "path": "src/validation.cpp",
      "position": 147,
      "original_position": 268,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "d8642c19991ca91ae7edeab82d3409a73fcfdb56",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Following diff doesn't seem to break unit tests nor `rpc_packages`. Should we outlaw package_count == 1 with an assert at the beginning of `AcceptMultipleTransactions` ? \r\n\r\nI think such case is a bug in caller logic.\r\n\r\n```\r\ndiff --git a/src/validation.cpp b/src/validation.cpp\r\nindex e9e0ba6e6..e243839dd 100644\r\n--- a/src/validation.cpp\r\n+++ b/src/validation.cpp\r\n@@ -1213,7 +1213,7 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\r\n     const int64_t total_size = std::accumulate(txns.cbegin(), txns.cend(), 0,\r\n                                [](int64_t sum, const auto& tx) { return sum + GetVirtualTransactionSize(*tx); });\r\n     // If the package only contains 1 tx, it's better to report the policy violation on individual tx size.\r\n-    if (package_count > 1 && total_size > MAX_PACKAGE_SIZE * 1000) {\r\n+    if (total_size > MAX_PACKAGE_SIZE * 1000) {\r\n         package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-too-large\");\r\n         return PackageMempoolAcceptResult(package_state, {});\r\n     }\r\n```",
      "created_at": "2021-05-04T16:26:33Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r625927118",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/625927118"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1092,
      "original_line": 1092,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/625954431",
      "pull_request_review_id": 651417784,
      "id": 625954431,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNTk1NDQzMQ==",
      "diff_hunk": "@@ -0,0 +1,346 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"RPCs that handle raw transaction packages.\"\"\"\n+\n+from decimal import Decimal\n+from io import BytesIO\n+import random\n+\n+from test_framework.address import ADDRESS_BCRT1_P2WSH_OP_TRUE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    BIP125_SEQUENCE_NUMBER,\n+    COIN,\n+    CTransaction,\n+    CTxInWitness,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_TRUE,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+    hex_str_to_bytes,\n+)\n+\n+class RPCPackagesTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.privkeys = [node.get_deterministic_priv_key().key]\n+        self.address = node.get_deterministic_priv_key().address\n+        self.coins = []\n+        # The last 100 coinbase transactions are premature\n+        for b in node.generatetoaddress(200, self.address)[:100]:\n+            coinbase = node.getblock(blockhash=b, verbosity=2)[\"tx\"][0]\n+            self.coins.append({\n+                \"txid\": coinbase[\"txid\"],\n+                \"amount\": coinbase[\"vout\"][0][\"value\"],\n+                \"scriptPubKey\": coinbase[\"vout\"][0][\"scriptPubKey\"],\n+            })\n+\n+        # Create some transactions that can be reused throughout the test. Never submit these to mempool.\n+        self.independent_txns_hex = []\n+        self.independent_txns_testres = []\n+        for _ in range(3):\n+            coin = self.coins.pop()\n+            rawtx = node.createrawtransaction([{\"txid\": coin[\"txid\"], \"vout\": 0}],\n+                {self.address : coin[\"amount\"] - Decimal(\"0.0001\")})\n+            signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n+            assert signedtx[\"complete\"]\n+            testres = node.testmempoolaccept([signedtx[\"hex\"]])\n+            assert testres[0][\"allowed\"]\n+            self.independent_txns_hex.append(signedtx[\"hex\"])\n+            # testmempoolaccept returns a list of length one, avoid creating a 2D list\n+            self.independent_txns_testres.append(testres[0])\n+\n+        self.test_independent()\n+        self.test_chain()\n+        self.test_multiple_children()\n+        self.test_multiple_parents()\n+        self.test_conflicting()\n+        self.test_rbf()\n+\n+    def chain_transaction(self, parent_txid, parent_value, n=0, parent_locking_script=None):\n+        \"\"\"Build a transaction that spends parent_txid.vout[n] and produces one output with\n+        amount = parent_value with a fee deducted.\n+        Return tuple (CTransaction object, raw hex, nValue, scriptPubKey of the output created).\n+        \"\"\"\n+        node = self.nodes[0]\n+        inputs = [{\"txid\": parent_txid, \"vout\": n}]\n+        my_value = parent_value - Decimal(\"0.0001\")\n+        outputs = {self.address : my_value}\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+        prevtxs = [{\n+            \"txid\": parent_txid,\n+            \"vout\": n,\n+            \"scriptPubKey\": parent_locking_script,\n+            \"amount\": parent_value,\n+        }] if parent_locking_script else None\n+        signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys, prevtxs=prevtxs)\n+        tx = CTransaction()\n+        assert signedtx[\"complete\"]\n+        tx.deserialize(BytesIO(hex_str_to_bytes(signedtx[\"hex\"])))\n+        return (tx, signedtx[\"hex\"], my_value, tx.vout[0].scriptPubKey.hex())\n+\n+    def test_independent(self):\n+        self.log.info(\"Test multiple independent transactions in a package\")\n+        node = self.nodes[0]\n+        assert_equal(self.independent_txns_testres, node.testmempoolaccept(rawtxs=self.independent_txns_hex))\n+\n+        self.log.info(\"Test an otherwise valid package with an extra garbage tx appended\")\n+        garbage_tx = node.createrawtransaction([{\"txid\": \"00\" * 32, \"vout\": 5}], {self.address: 1})\n+        tx = CTransaction()\n+        tx.deserialize(BytesIO(hex_str_to_bytes(garbage_tx)))\n+        testres_bad = node.testmempoolaccept(self.independent_txns_hex + [garbage_tx])\n+        # Only the txid and wtxids are returned because validation is incomplete for the independent txns.\n+        # Package validation is atomic: if the node cannot find a UTXO for any single tx in the package,\n+        # it terminates immediately to avoid unnecessary, expensive signature verification.\n+        testres_independent_ids = [{\"txid\": res[\"txid\"], \"wtxid\": res[\"wtxid\"]} for res in self.independent_txns_testres]\n+        assert_equal(testres_bad, testres_independent_ids + [\n+            {\"txid\": tx.rehash(), \"wtxid\": tx.getwtxid(), \"allowed\": False, \"reject-reason\": \"missing-inputs\"}\n+        ])\n+\n+        self.log.info(\"Check testmempoolaccept tells us when some transactions completed validation successfully\")\n+        coin = self.coins.pop()\n+        tx_bad_sig_hex = node.createrawtransaction([{\"txid\": coin[\"txid\"], \"vout\": 0}],\n+                                           {self.address : coin[\"amount\"] - Decimal(\"0.0001\")})\n+        tx_bad_sig = CTransaction()\n+        tx_bad_sig.deserialize(BytesIO(hex_str_to_bytes(tx_bad_sig_hex)))\n+        testres_bad_sig = node.testmempoolaccept(self.independent_txns_hex + [tx_bad_sig_hex])\n+        # By the time the signature for the last transaction is checked, all the other transactions\n+        # have been fully validated, which is why the node returns full validation results for all\n+        # transactions here but empty results in other cases.\n+        assert_equal(testres_bad_sig, self.independent_txns_testres + [{\n+            \"txid\": tx_bad_sig.rehash(),\n+            \"wtxid\": tx_bad_sig.getwtxid(), \"allowed\": False,\n+            \"reject-reason\": \"mandatory-script-verify-flag-failed (Operation not valid with the current stack size)\"\n+        }])\n+\n+        self.log.info(\"Check testmempoolaccept reports txns in packages that exceed max feerate\")\n+        coin = self.coins.pop()\n+        tx_high_fee_raw = node.createrawtransaction([{\"txid\": coin[\"txid\"], \"vout\": 0}],\n+                                           {self.address : coin[\"amount\"] - Decimal(\"0.999\")})\n+        tx_high_fee_signed = node.signrawtransactionwithkey(hexstring=tx_high_fee_raw, privkeys=self.privkeys)\n+        assert tx_high_fee_signed[\"complete\"]\n+        tx_high_fee = CTransaction()\n+        tx_high_fee.deserialize(BytesIO(hex_str_to_bytes(tx_high_fee_signed[\"hex\"])))\n+        testres_high_fee = node.testmempoolaccept([tx_high_fee_signed[\"hex\"]])\n+        assert_equal(testres_high_fee, [\n+            {\"txid\": tx_high_fee.rehash(), \"wtxid\": tx_high_fee.getwtxid(), \"allowed\": False, \"reject-reason\": \"max-fee-exceeded\"}\n+        ])\n+        testres_package_high_fee = node.testmempoolaccept(self.independent_txns_hex + [tx_high_fee_signed[\"hex\"]])\n+        assert_equal(testres_package_high_fee, self.independent_txns_testres + testres_high_fee)\n+\n+    def test_chain(self):\n+        node = self.nodes[0]\n+        first_coin = self.coins.pop()\n+\n+        # Chain of 25 transactions\n+        parent_locking_script = None\n+        txid = first_coin[\"txid\"]\n+        chain_hex = []\n+        chain_txns = []\n+        value = first_coin[\"amount\"]\n+\n+        for _ in range(25):\n+            (tx, txhex, value, parent_locking_script) = self.chain_transaction(txid, value, 0, parent_locking_script)\n+            txid = tx.rehash()\n+            chain_hex.append(txhex)\n+            chain_txns.append(tx)\n+\n+        self.log.info(\"Check that testmempoolaccept requires packages to be sorted by dependency\")\n+        assert_equal(node.testmempoolaccept(rawtxs=chain_hex[::-1]),\n+                [{\"txid\": tx.rehash(), \"wtxid\": tx.getwtxid(), \"package-error\": \"package-not-sorted\"} for tx in chain_txns[::-1]])\n+\n+        self.log.info(\"Testmempoolaccept a chain of 25 transactions\")\n+        testres_multiple = node.testmempoolaccept(rawtxs=chain_hex)\n+\n+        testres_single = []\n+        # Test accept and then submit each one individually, which should be identical to package test accept\n+        for rawtx in chain_hex:\n+            testres = node.testmempoolaccept([rawtx])\n+            testres_single.append(testres[0])\n+            # Submit the transaction now so its child should have no problem validating\n+            node.sendrawtransaction(rawtx)\n+        assert_equal(testres_single, testres_multiple)\n+\n+        # Clean up by clearing the mempool\n+        node.generate(1)\n+\n+    def test_multiple_children(self):\n+        node = self.nodes[0]\n+\n+        self.log.info(\"Testmempoolaccept a package in which a transaction has two children within the package\")\n+        first_coin = self.coins.pop()\n+        value = (first_coin[\"amount\"] - Decimal(\"0.0002\")) / 2 # Deduct reasonable fee and make 2 outputs\n+        inputs = [{\"txid\": first_coin[\"txid\"], \"vout\": 0}]\n+        outputs = [{self.address : value}, {ADDRESS_BCRT1_P2WSH_OP_TRUE : value}]\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+\n+        parent_signed = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n+        parent_tx = CTransaction()\n+        assert parent_signed[\"complete\"]\n+        parent_tx.deserialize(BytesIO(hex_str_to_bytes(parent_signed[\"hex\"])))\n+        parent_txid = parent_tx.rehash()\n+        assert node.testmempoolaccept([parent_signed[\"hex\"]])[0][\"allowed\"]\n+\n+        parent_locking_script_a = parent_tx.vout[0].scriptPubKey.hex()\n+        child_value = value - Decimal(\"0.0001\")\n+\n+        # Child A\n+        (_, tx_child_a_hex, _, _) = self.chain_transaction(parent_txid, child_value, 0, parent_locking_script_a)\n+        assert not node.testmempoolaccept([tx_child_a_hex])[0][\"allowed\"]\n+\n+        # Child B\n+        rawtx_b = node.createrawtransaction([{\"txid\": parent_txid, \"vout\": 1}], {self.address : child_value})\n+        tx_child_b = CTransaction()\n+        tx_child_b.deserialize(BytesIO(hex_str_to_bytes(rawtx_b)))\n+        tx_child_b.wit.vtxinwit = [CTxInWitness()]\n+        tx_child_b.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n+        tx_child_b_hex = tx_child_b.serialize().hex()\n+        assert not node.testmempoolaccept([tx_child_b_hex])[0][\"allowed\"]\n+\n+        self.log.info(\"Testmempoolaccept with entire package, should work with children in either order\")\n+        testres_multiple_ab = node.testmempoolaccept(rawtxs=[parent_signed[\"hex\"], tx_child_a_hex, tx_child_b_hex])\n+        testres_multiple_ba = node.testmempoolaccept(rawtxs=[parent_signed[\"hex\"], tx_child_b_hex, tx_child_a_hex])\n+        assert all([testres[\"allowed\"] for testres in testres_multiple_ab + testres_multiple_ba])\n+\n+        testres_single = []\n+        # Test accept and then submit each one individually, which should be identical to package testaccept\n+        for rawtx in [parent_signed[\"hex\"], tx_child_a_hex, tx_child_b_hex]:\n+            testres = node.testmempoolaccept([rawtx])\n+            testres_single.append(testres[0])\n+            # Submit the transaction now so its child should have no problem validating\n+            node.sendrawtransaction(rawtx)\n+        assert_equal(testres_single, testres_multiple_ab)\n+\n+    def create_child_with_parents(self, parents_tx, values, locking_scripts):\n+        \"\"\"Creates a transaction that spends the first output of each parent in parents_tx.\"\"\"\n+        num_parents = len(parents_tx)\n+        total_value = sum(values)\n+        inputs = [{\"txid\": tx.rehash(), \"vout\": 0} for tx in parents_tx]\n+        outputs = {self.address : total_value - num_parents * Decimal(\"0.0001\")}\n+        rawtx_child = self.nodes[0].createrawtransaction(inputs, outputs)\n+        prevtxs = []\n+        for i in range(num_parents):\n+            prevtxs.append({\"txid\": parents_tx[i].rehash(), \"vout\": 0, \"scriptPubKey\": locking_scripts[i], \"amount\": values[i]})\n+        signedtx_child = self.nodes[0].signrawtransactionwithkey(hexstring=rawtx_child, privkeys=self.privkeys, prevtxs=prevtxs)\n+        assert signedtx_child[\"complete\"]\n+        return signedtx_child[\"hex\"]\n+\n+    def test_multiple_parents(self):\n+        node = self.nodes[0]\n+\n+        self.log.info(\"Testmempoolaccept a package in which a transaction has multiple parents within the package\")\n+        for num_parents in [2, 10, 24]:\n+            # Test a package with num_parents parents and 1 child transaction.\n+            package_hex = []\n+            parents_tx = []\n+            values = []\n+            parent_locking_scripts = []\n+            for _ in range(num_parents):\n+                parent_coin = self.coins.pop()\n+                value = parent_coin[\"amount\"]\n+                (tx, txhex, value, parent_locking_script) = self.chain_transaction(parent_coin[\"txid\"], value)\n+                package_hex.append(txhex)\n+                parents_tx.append(tx)\n+                values.append(value)\n+                parent_locking_scripts.append(parent_locking_script)\n+            child_hex = self.create_child_with_parents(parents_tx, values, parent_locking_scripts)\n+            # Package accept should work with the parents in any order (as long as parents come before child)\n+            for _ in range(10):\n+                random.shuffle(package_hex)\n+                testres_multiple = node.testmempoolaccept(rawtxs=package_hex + [child_hex])\n+                assert all([testres[\"allowed\"] for testres in testres_multiple])\n+\n+            testres_single = []\n+            # Test accept and then submit each one individually, which should be identical to package testaccept\n+            for rawtx in package_hex + [child_hex]:\n+                testres_single.append(node.testmempoolaccept([rawtx])[0])\n+                # Submit the transaction now so its child should have no problem validating\n+                node.sendrawtransaction(rawtx)\n+            assert_equal(testres_single, testres_multiple)\n+\n+    def test_conflicting(self):\n+        node = self.nodes[0]\n+        prevtx = self.coins.pop()\n+        inputs = [{\"txid\": prevtx[\"txid\"], \"vout\": 0}]\n+        output1 = {node.get_deterministic_priv_key().address: 50 - 0.00125}\n+        output2 = {ADDRESS_BCRT1_P2WSH_OP_TRUE: 50 - 0.00125}\n+\n+        # tx1 and tx2 share the same inputs\n+        rawtx1 = node.createrawtransaction(inputs, output1)\n+        rawtx2 = node.createrawtransaction(inputs, output2)\n+        signedtx1 = node.signrawtransactionwithkey(hexstring=rawtx1, privkeys=self.privkeys)\n+        signedtx2 = node.signrawtransactionwithkey(hexstring=rawtx2, privkeys=self.privkeys)\n+        tx1 = CTransaction()\n+        tx1.deserialize(BytesIO(hex_str_to_bytes(signedtx1[\"hex\"])))\n+        tx2 = CTransaction()\n+        tx2.deserialize(BytesIO(hex_str_to_bytes(signedtx2[\"hex\"])))\n+        assert signedtx1[\"complete\"]\n+        assert signedtx2[\"complete\"]\n+\n+        # Ensure tx1 and tx2 are valid by themselves\n+        assert node.testmempoolaccept([signedtx1[\"hex\"]])[0][\"allowed\"]\n+        assert node.testmempoolaccept([signedtx2[\"hex\"]])[0][\"allowed\"]\n+\n+        self.log.info(\"Test duplicate transactions in the same package\")\n+        testres = node.testmempoolaccept([signedtx1[\"hex\"], signedtx1[\"hex\"]])\n+        assert_equal(testres, [\n+            {\"txid\": tx1.rehash(), \"wtxid\": tx1.getwtxid(), \"package-error\": \"conflict-in-package\"},\n+            {\"txid\": tx1.rehash(), \"wtxid\": tx1.getwtxid(), \"package-error\": \"conflict-in-package\"}\n+        ])\n+\n+        self.log.info(\"Test conflicting transactions in the same package\")\n+        testres = node.testmempoolaccept([signedtx1[\"hex\"], signedtx2[\"hex\"]])\n+        assert_equal(testres, [\n+            {\"txid\": tx1.rehash(), \"wtxid\": tx1.getwtxid(), \"package-error\": \"conflict-in-package\"},\n+            {\"txid\": tx2.rehash(), \"wtxid\": tx2.getwtxid(), \"package-error\": \"conflict-in-package\"}\n+        ])\n+\n+    def test_rbf(self):\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+        inputs = [{\"txid\": coin[\"txid\"], \"vout\": 0, \"sequence\": BIP125_SEQUENCE_NUMBER}]\n+        fee = Decimal('0.00125000')\n+        output = {node.get_deterministic_priv_key().address: 50 - fee}\n+        raw_replaceable_tx = node.createrawtransaction(inputs, output)\n+        signed_replaceable_tx = node.signrawtransactionwithkey(hexstring=raw_replaceable_tx, privkeys=self.privkeys)\n+        testres_replaceable = node.testmempoolaccept([signed_replaceable_tx[\"hex\"]])\n+        replaceable_tx = CTransaction()\n+        replaceable_tx.deserialize(BytesIO(hex_str_to_bytes(signed_replaceable_tx[\"hex\"])))\n+        assert_equal(testres_replaceable, [\n+            {\"txid\": replaceable_tx.rehash(), \"wtxid\": replaceable_tx.getwtxid(),\n+            \"allowed\": True, \"vsize\": replaceable_tx.get_vsize(), \"fees\": { \"base\": fee }}\n+        ])\n+\n+        # Replacement transaction is identical except has double the fee\n+        replacement_tx = CTransaction()\n+        replacement_tx.deserialize(BytesIO(hex_str_to_bytes(signed_replaceable_tx[\"hex\"])))\n+        replacement_tx.vout[0].nValue -= int(fee * COIN)  # Doubled fee\n+        signed_replacement_tx = node.signrawtransactionwithkey(replacement_tx.serialize().hex(), self.privkeys)\n+        replacement_tx.deserialize(BytesIO(hex_str_to_bytes(signed_replacement_tx[\"hex\"])))\n+\n+        self.log.info(\"Test that transactions within a package cannot replace each other\")\n+        testres_rbf_conflicting = node.testmempoolaccept([signed_replaceable_tx[\"hex\"], signed_replacement_tx[\"hex\"]])\n+        assert_equal(testres_rbf_conflicting, [\n+            {\"txid\": replaceable_tx.rehash(), \"wtxid\": replaceable_tx.getwtxid(), \"package-error\": \"conflict-in-package\"},\n+            {\"txid\": replacement_tx.rehash(), \"wtxid\": replacement_tx.getwtxid(), \"package-error\": \"conflict-in-package\"}\n+        ])\n+\n+        self.log.info(\"Test that packages cannot conflict with mempool transactions, even if a valid BIP125 RBF\")\n+        node.sendrawtransaction(signed_replaceable_tx[\"hex\"])\n+        testres_rbf_single = node.testmempoolaccept([signed_replacement_tx[\"hex\"]])\n+        assert testres_rbf_single[0][\"allowed\"]\n+        testres_rbf_package = node.testmempoolaccept([signed_replacement_tx[\"hex\"]] + self.independent_txns_hex)\n+        assert_equal(testres_rbf_package[0][\"reject-reason\"], \"txn-mempool-conflict\")",
      "path": "test/functional/rpc_packages.py",
      "position": null,
      "original_position": 343,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "d8642c19991ca91ae7edeab82d3409a73fcfdb56",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Let's try also this variant ?\r\n\r\n```\r\ndiff --git a/test/functional/rpc_packages.py b/test/functional/rpc_packages.py\r\nindex 75621ba12..053954847 100755\r\n--- a/test/functional/rpc_packages.py\r\n+++ b/test/functional/rpc_packages.py\r\n@@ -341,6 +341,9 @@ class RPCPackagesTest(BitcoinTestFramework):\r\n         assert testres_rbf_single[0][\"allowed\"]\r\n         testres_rbf_package = node.testmempoolaccept([signed_replacement_tx[\"hex\"]] + self.independent_txns_hex)\r\n         assert_equal(testres_rbf_package[0][\"reject-reason\"], \"txn-mempool-conflict\")\r\n+        # Test conflict detection is independent of conflicting transaction order in submitted package\r\n+        testres_rbf_package_reverse = node.testmempoolaccept(self.independent_txns_hex + [signed_replacement_tx[\"hex\"]])\r\n+        assert_equal(testres_rbf_package_reverse[len(self.independent_txns_hex)][\"reject-reason\"], \"txn-mempool-conflict\")\r\n \r\n if __name__ == \"__main__\":\r\n     RPCPackagesTest().main()\r\n```",
      "created_at": "2021-05-04T17:04:43Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r625954431",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/625954431"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 343,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/625960037",
      "pull_request_review_id": 651417784,
      "id": 625960037,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNTk2MDAzNw==",
      "diff_hunk": "@@ -186,6 +186,16 @@ FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n         RegisterSharedValidationInterface(txr);\n         const bool bypass_limits = fuzzed_data_provider.ConsumeBool();\n         ::fRequireStandard = fuzzed_data_provider.ConsumeBool();\n+\n+        // Make sure ProcessNewPackage on one transaction works and always fully validates the transaction.\n+        // The result is not guaranteed to be the same as what is returned by ATMP.\n+        const auto result_package = WITH_LOCK(::cs_main,\n+                                    return ProcessNewPackage(node.chainman->ActiveChainstate(), tx_pool, {tx}, true));",
      "path": "src/test/fuzz/tx_pool.cpp",
      "position": 8,
      "original_position": 8,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "d8642c19991ca91ae7edeab82d3409a73fcfdb56",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Have you look to actually pass chain of transactions from fuzzed data to `ProcessNewPackage` ? I would be glad to have enhanced fuzz coverage of package logic, at least in the future.",
      "created_at": "2021-05-04T17:12:50Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r625960037",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/625960037"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 225,
      "original_line": 225,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/626116631",
      "pull_request_review_id": 651679737,
      "id": 626116631,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNjExNjYzMQ==",
      "diff_hunk": "@@ -186,6 +186,16 @@ FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n         RegisterSharedValidationInterface(txr);\n         const bool bypass_limits = fuzzed_data_provider.ConsumeBool();\n         ::fRequireStandard = fuzzed_data_provider.ConsumeBool();\n+\n+        // Make sure ProcessNewPackage on one transaction works and always fully validates the transaction.\n+        // The result is not guaranteed to be the same as what is returned by ATMP.\n+        const auto result_package = WITH_LOCK(::cs_main,\n+                                    return ProcessNewPackage(node.chainman->ActiveChainstate(), tx_pool, {tx}, true));",
      "path": "src/test/fuzz/tx_pool.cpp",
      "position": 8,
      "original_position": 8,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "d8642c19991ca91ae7edeab82d3409a73fcfdb56",
      "in_reply_to_id": 625960037,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I thought that would make more sense for actual package submission. I'm not sure if it adds much value with test accepts, since the mempool doesn't change.",
      "created_at": "2021-05-04T21:22:41Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r626116631",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/626116631"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 225,
      "original_line": 225,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/626148230",
      "pull_request_review_id": 651719823,
      "id": 626148230,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNjE0ODIzMA==",
      "diff_hunk": "@@ -1062,28 +1162,141 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n \n     Workspace ws(ptx);\n \n-    if (!PreChecks(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!PreChecks(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n-    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Tx was accepted, but not added\n     if (args.m_test_accept) {\n-        return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+        return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n     }\n \n-    if (!Finalize(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!Finalize(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+    return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+}\n+\n+PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::vector<CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    PackageValidationState package_state;\n+    // Check for malformed input.\n+    if (txns.empty()) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-too-few-transactions\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+    if (!std::all_of(txns.cbegin(), txns.cend(),\n+                     [](const auto& tx){ return tx && !tx->IsNull(); })) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-malformed-transaction\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    const unsigned int package_count = txns.size();\n+\n+    // These context-free package limits can be checked before taking the mempool lock.\n+    if (package_count > MAX_PACKAGE_COUNT) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-too-many-transactions\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    const int64_t total_size = std::accumulate(txns.cbegin(), txns.cend(), 0,\n+                               [](int64_t sum, const auto& tx) { return sum + GetVirtualTransactionSize(*tx); });\n+    // If the package only contains 1 tx, it's better to report the policy violation on individual tx size.\n+    if (package_count > 1 && total_size > MAX_PACKAGE_SIZE * 1000) {",
      "path": "src/validation.cpp",
      "position": 147,
      "original_position": 268,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "d8642c19991ca91ae7edeab82d3409a73fcfdb56",
      "in_reply_to_id": 625927118,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Following diff doesn't seem to break unit tests nor rpc_packages.\r\n\r\nOk I added a unit test for it. I just added the condition because I felt it would be more helpful to users.\r\n\r\n> Should we outlaw package_count == 1 with an assert at the beginning of AcceptMultipleTransactions ?\r\n\r\nI don't really see why we should do this right now. It's useful to have for testing, and I don't think it poses any issues at the moment.",
      "created_at": "2021-05-04T22:22:27Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r626148230",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/626148230"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1092,
      "original_line": 1092,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/626148257",
      "pull_request_review_id": 651719848,
      "id": 626148257,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNjE0ODI1Nw==",
      "diff_hunk": "@@ -47,4 +49,64 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_reject_coinbase, TestChain100Setup)\n     BOOST_CHECK(result.m_state.GetResult() == TxValidationResult::TX_CONSENSUS);\n }\n \n+// Placeholder transactions that have no meaning.\n+inline CTransactionRef create_placeholder_tx(size_t num_inputs, size_t num_outputs)\n+{\n+    CMutableTransaction mtx = CMutableTransaction();\n+    mtx.vin.resize(num_inputs);\n+    mtx.vout.resize(num_outputs);\n+    for (size_t i{0}; i < num_inputs; ++i) {\n+        mtx.vin[i].prevout.hash = InsecureRand256();\n+        mtx.vin[i].prevout.n = 0;\n+    }\n+    for (size_t o{0}; o < num_outputs; ++o) {\n+        mtx.vout[o].nValue = 1 * CENT;\n+        mtx.vout[o].scriptPubKey = CScript();\n+    }\n+    return MakeTransactionRef(mtx);\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(basic_package_tests, TestChain100Setup)\n+{\n+    LOCK(cs_main);\n+\n+    unsigned int initialPoolSize = m_node.mempool->size();\n+    Package package_empty;\n+    const auto result_empty = ProcessNewPackage(::ChainstateActive(), *m_node.mempool, package_empty, true);\n+    BOOST_CHECK(result_empty.m_state.IsInvalid());\n+\n+    package_empty.resize(10); // null transactions\n+    const auto result_null_txns = ProcessNewPackage(::ChainstateActive(), *m_node.mempool, package_empty, true);\n+    BOOST_CHECK(result_empty.m_state.IsInvalid());",
      "path": "src/test/txvalidation_tests.cpp",
      "position": null,
      "original_position": 41,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "d8642c19991ca91ae7edeab82d3409a73fcfdb56",
      "in_reply_to_id": 625914346,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I decided to remove this test and just assert this as a precondition at the top of ProcessNewPackage. It would be an error in our own code if we were passing nullptrs....",
      "created_at": "2021-05-04T22:22:31Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r626148257",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/626148257"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 80,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627001347",
      "pull_request_review_id": 652871540,
      "id": 627001347,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzAwMTM0Nw==",
      "diff_hunk": "@@ -0,0 +1,346 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"RPCs that handle raw transaction packages.\"\"\"\n+\n+from decimal import Decimal\n+from io import BytesIO\n+import random\n+\n+from test_framework.address import ADDRESS_BCRT1_P2WSH_OP_TRUE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    BIP125_SEQUENCE_NUMBER,\n+    COIN,\n+    CTransaction,\n+    CTxInWitness,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_TRUE,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+    hex_str_to_bytes,\n+)\n+\n+class RPCPackagesTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.privkeys = [node.get_deterministic_priv_key().key]\n+        self.address = node.get_deterministic_priv_key().address\n+        self.coins = []\n+        # The last 100 coinbase transactions are premature\n+        for b in node.generatetoaddress(200, self.address)[:100]:\n+            coinbase = node.getblock(blockhash=b, verbosity=2)[\"tx\"][0]\n+            self.coins.append({\n+                \"txid\": coinbase[\"txid\"],\n+                \"amount\": coinbase[\"vout\"][0][\"value\"],\n+                \"scriptPubKey\": coinbase[\"vout\"][0][\"scriptPubKey\"],\n+            })\n+\n+        # Create some transactions that can be reused throughout the test. Never submit these to mempool.\n+        self.independent_txns_hex = []\n+        self.independent_txns_testres = []\n+        for _ in range(3):\n+            coin = self.coins.pop()\n+            rawtx = node.createrawtransaction([{\"txid\": coin[\"txid\"], \"vout\": 0}],\n+                {self.address : coin[\"amount\"] - Decimal(\"0.0001\")})\n+            signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n+            assert signedtx[\"complete\"]\n+            testres = node.testmempoolaccept([signedtx[\"hex\"]])\n+            assert testres[0][\"allowed\"]\n+            self.independent_txns_hex.append(signedtx[\"hex\"])\n+            # testmempoolaccept returns a list of length one, avoid creating a 2D list\n+            self.independent_txns_testres.append(testres[0])\n+\n+        self.test_independent()\n+        self.test_chain()\n+        self.test_multiple_children()\n+        self.test_multiple_parents()\n+        self.test_conflicting()\n+        self.test_rbf()\n+\n+    def chain_transaction(self, parent_txid, parent_value, n=0, parent_locking_script=None):\n+        \"\"\"Build a transaction that spends parent_txid.vout[n] and produces one output with\n+        amount = parent_value with a fee deducted.\n+        Return tuple (CTransaction object, raw hex, nValue, scriptPubKey of the output created).\n+        \"\"\"\n+        node = self.nodes[0]\n+        inputs = [{\"txid\": parent_txid, \"vout\": n}]\n+        my_value = parent_value - Decimal(\"0.0001\")\n+        outputs = {self.address : my_value}\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+        prevtxs = [{\n+            \"txid\": parent_txid,\n+            \"vout\": n,\n+            \"scriptPubKey\": parent_locking_script,\n+            \"amount\": parent_value,\n+        }] if parent_locking_script else None\n+        signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys, prevtxs=prevtxs)\n+        tx = CTransaction()\n+        assert signedtx[\"complete\"]\n+        tx.deserialize(BytesIO(hex_str_to_bytes(signedtx[\"hex\"])))\n+        return (tx, signedtx[\"hex\"], my_value, tx.vout[0].scriptPubKey.hex())\n+\n+    def test_independent(self):\n+        self.log.info(\"Test multiple independent transactions in a package\")\n+        node = self.nodes[0]\n+        assert_equal(self.independent_txns_testres, node.testmempoolaccept(rawtxs=self.independent_txns_hex))\n+\n+        self.log.info(\"Test an otherwise valid package with an extra garbage tx appended\")\n+        garbage_tx = node.createrawtransaction([{\"txid\": \"00\" * 32, \"vout\": 5}], {self.address: 1})\n+        tx = CTransaction()\n+        tx.deserialize(BytesIO(hex_str_to_bytes(garbage_tx)))\n+        testres_bad = node.testmempoolaccept(self.independent_txns_hex + [garbage_tx])\n+        # Only the txid and wtxids are returned because validation is incomplete for the independent txns.\n+        # Package validation is atomic: if the node cannot find a UTXO for any single tx in the package,\n+        # it terminates immediately to avoid unnecessary, expensive signature verification.\n+        testres_independent_ids = [{\"txid\": res[\"txid\"], \"wtxid\": res[\"wtxid\"]} for res in self.independent_txns_testres]\n+        assert_equal(testres_bad, testres_independent_ids + [\n+            {\"txid\": tx.rehash(), \"wtxid\": tx.getwtxid(), \"allowed\": False, \"reject-reason\": \"missing-inputs\"}\n+        ])\n+\n+        self.log.info(\"Check testmempoolaccept tells us when some transactions completed validation successfully\")\n+        coin = self.coins.pop()\n+        tx_bad_sig_hex = node.createrawtransaction([{\"txid\": coin[\"txid\"], \"vout\": 0}],\n+                                           {self.address : coin[\"amount\"] - Decimal(\"0.0001\")})\n+        tx_bad_sig = CTransaction()\n+        tx_bad_sig.deserialize(BytesIO(hex_str_to_bytes(tx_bad_sig_hex)))\n+        testres_bad_sig = node.testmempoolaccept(self.independent_txns_hex + [tx_bad_sig_hex])\n+        # By the time the signature for the last transaction is checked, all the other transactions\n+        # have been fully validated, which is why the node returns full validation results for all\n+        # transactions here but empty results in other cases.\n+        assert_equal(testres_bad_sig, self.independent_txns_testres + [{\n+            \"txid\": tx_bad_sig.rehash(),\n+            \"wtxid\": tx_bad_sig.getwtxid(), \"allowed\": False,\n+            \"reject-reason\": \"mandatory-script-verify-flag-failed (Operation not valid with the current stack size)\"\n+        }])\n+\n+        self.log.info(\"Check testmempoolaccept reports txns in packages that exceed max feerate\")\n+        coin = self.coins.pop()\n+        tx_high_fee_raw = node.createrawtransaction([{\"txid\": coin[\"txid\"], \"vout\": 0}],\n+                                           {self.address : coin[\"amount\"] - Decimal(\"0.999\")})\n+        tx_high_fee_signed = node.signrawtransactionwithkey(hexstring=tx_high_fee_raw, privkeys=self.privkeys)\n+        assert tx_high_fee_signed[\"complete\"]\n+        tx_high_fee = CTransaction()\n+        tx_high_fee.deserialize(BytesIO(hex_str_to_bytes(tx_high_fee_signed[\"hex\"])))\n+        testres_high_fee = node.testmempoolaccept([tx_high_fee_signed[\"hex\"]])\n+        assert_equal(testres_high_fee, [\n+            {\"txid\": tx_high_fee.rehash(), \"wtxid\": tx_high_fee.getwtxid(), \"allowed\": False, \"reject-reason\": \"max-fee-exceeded\"}\n+        ])\n+        testres_package_high_fee = node.testmempoolaccept(self.independent_txns_hex + [tx_high_fee_signed[\"hex\"]])\n+        assert_equal(testres_package_high_fee, self.independent_txns_testres + testres_high_fee)\n+\n+    def test_chain(self):\n+        node = self.nodes[0]\n+        first_coin = self.coins.pop()\n+\n+        # Chain of 25 transactions\n+        parent_locking_script = None\n+        txid = first_coin[\"txid\"]\n+        chain_hex = []\n+        chain_txns = []\n+        value = first_coin[\"amount\"]\n+\n+        for _ in range(25):\n+            (tx, txhex, value, parent_locking_script) = self.chain_transaction(txid, value, 0, parent_locking_script)\n+            txid = tx.rehash()\n+            chain_hex.append(txhex)\n+            chain_txns.append(tx)\n+\n+        self.log.info(\"Check that testmempoolaccept requires packages to be sorted by dependency\")\n+        assert_equal(node.testmempoolaccept(rawtxs=chain_hex[::-1]),\n+                [{\"txid\": tx.rehash(), \"wtxid\": tx.getwtxid(), \"package-error\": \"package-not-sorted\"} for tx in chain_txns[::-1]])\n+\n+        self.log.info(\"Testmempoolaccept a chain of 25 transactions\")\n+        testres_multiple = node.testmempoolaccept(rawtxs=chain_hex)\n+\n+        testres_single = []\n+        # Test accept and then submit each one individually, which should be identical to package test accept\n+        for rawtx in chain_hex:\n+            testres = node.testmempoolaccept([rawtx])\n+            testres_single.append(testres[0])\n+            # Submit the transaction now so its child should have no problem validating\n+            node.sendrawtransaction(rawtx)\n+        assert_equal(testres_single, testres_multiple)\n+\n+        # Clean up by clearing the mempool\n+        node.generate(1)\n+\n+    def test_multiple_children(self):\n+        node = self.nodes[0]\n+\n+        self.log.info(\"Testmempoolaccept a package in which a transaction has two children within the package\")\n+        first_coin = self.coins.pop()\n+        value = (first_coin[\"amount\"] - Decimal(\"0.0002\")) / 2 # Deduct reasonable fee and make 2 outputs\n+        inputs = [{\"txid\": first_coin[\"txid\"], \"vout\": 0}]\n+        outputs = [{self.address : value}, {ADDRESS_BCRT1_P2WSH_OP_TRUE : value}]\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+\n+        parent_signed = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n+        parent_tx = CTransaction()\n+        assert parent_signed[\"complete\"]\n+        parent_tx.deserialize(BytesIO(hex_str_to_bytes(parent_signed[\"hex\"])))\n+        parent_txid = parent_tx.rehash()\n+        assert node.testmempoolaccept([parent_signed[\"hex\"]])[0][\"allowed\"]\n+\n+        parent_locking_script_a = parent_tx.vout[0].scriptPubKey.hex()\n+        child_value = value - Decimal(\"0.0001\")\n+\n+        # Child A\n+        (_, tx_child_a_hex, _, _) = self.chain_transaction(parent_txid, child_value, 0, parent_locking_script_a)\n+        assert not node.testmempoolaccept([tx_child_a_hex])[0][\"allowed\"]\n+\n+        # Child B\n+        rawtx_b = node.createrawtransaction([{\"txid\": parent_txid, \"vout\": 1}], {self.address : child_value})\n+        tx_child_b = CTransaction()\n+        tx_child_b.deserialize(BytesIO(hex_str_to_bytes(rawtx_b)))\n+        tx_child_b.wit.vtxinwit = [CTxInWitness()]\n+        tx_child_b.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n+        tx_child_b_hex = tx_child_b.serialize().hex()\n+        assert not node.testmempoolaccept([tx_child_b_hex])[0][\"allowed\"]\n+\n+        self.log.info(\"Testmempoolaccept with entire package, should work with children in either order\")\n+        testres_multiple_ab = node.testmempoolaccept(rawtxs=[parent_signed[\"hex\"], tx_child_a_hex, tx_child_b_hex])\n+        testres_multiple_ba = node.testmempoolaccept(rawtxs=[parent_signed[\"hex\"], tx_child_b_hex, tx_child_a_hex])\n+        assert all([testres[\"allowed\"] for testres in testres_multiple_ab + testres_multiple_ba])\n+\n+        testres_single = []\n+        # Test accept and then submit each one individually, which should be identical to package testaccept\n+        for rawtx in [parent_signed[\"hex\"], tx_child_a_hex, tx_child_b_hex]:\n+            testres = node.testmempoolaccept([rawtx])\n+            testres_single.append(testres[0])\n+            # Submit the transaction now so its child should have no problem validating\n+            node.sendrawtransaction(rawtx)\n+        assert_equal(testres_single, testres_multiple_ab)\n+\n+    def create_child_with_parents(self, parents_tx, values, locking_scripts):\n+        \"\"\"Creates a transaction that spends the first output of each parent in parents_tx.\"\"\"\n+        num_parents = len(parents_tx)\n+        total_value = sum(values)\n+        inputs = [{\"txid\": tx.rehash(), \"vout\": 0} for tx in parents_tx]\n+        outputs = {self.address : total_value - num_parents * Decimal(\"0.0001\")}\n+        rawtx_child = self.nodes[0].createrawtransaction(inputs, outputs)\n+        prevtxs = []\n+        for i in range(num_parents):\n+            prevtxs.append({\"txid\": parents_tx[i].rehash(), \"vout\": 0, \"scriptPubKey\": locking_scripts[i], \"amount\": values[i]})\n+        signedtx_child = self.nodes[0].signrawtransactionwithkey(hexstring=rawtx_child, privkeys=self.privkeys, prevtxs=prevtxs)\n+        assert signedtx_child[\"complete\"]\n+        return signedtx_child[\"hex\"]\n+\n+    def test_multiple_parents(self):\n+        node = self.nodes[0]\n+\n+        self.log.info(\"Testmempoolaccept a package in which a transaction has multiple parents within the package\")\n+        for num_parents in [2, 10, 24]:\n+            # Test a package with num_parents parents and 1 child transaction.\n+            package_hex = []\n+            parents_tx = []\n+            values = []\n+            parent_locking_scripts = []\n+            for _ in range(num_parents):\n+                parent_coin = self.coins.pop()\n+                value = parent_coin[\"amount\"]\n+                (tx, txhex, value, parent_locking_script) = self.chain_transaction(parent_coin[\"txid\"], value)\n+                package_hex.append(txhex)\n+                parents_tx.append(tx)\n+                values.append(value)\n+                parent_locking_scripts.append(parent_locking_script)\n+            child_hex = self.create_child_with_parents(parents_tx, values, parent_locking_scripts)\n+            # Package accept should work with the parents in any order (as long as parents come before child)\n+            for _ in range(10):\n+                random.shuffle(package_hex)\n+                testres_multiple = node.testmempoolaccept(rawtxs=package_hex + [child_hex])\n+                assert all([testres[\"allowed\"] for testres in testres_multiple])\n+\n+            testres_single = []\n+            # Test accept and then submit each one individually, which should be identical to package testaccept\n+            for rawtx in package_hex + [child_hex]:\n+                testres_single.append(node.testmempoolaccept([rawtx])[0])\n+                # Submit the transaction now so its child should have no problem validating\n+                node.sendrawtransaction(rawtx)\n+            assert_equal(testres_single, testres_multiple)\n+\n+    def test_conflicting(self):\n+        node = self.nodes[0]\n+        prevtx = self.coins.pop()\n+        inputs = [{\"txid\": prevtx[\"txid\"], \"vout\": 0}]\n+        output1 = {node.get_deterministic_priv_key().address: 50 - 0.00125}\n+        output2 = {ADDRESS_BCRT1_P2WSH_OP_TRUE: 50 - 0.00125}\n+\n+        # tx1 and tx2 share the same inputs\n+        rawtx1 = node.createrawtransaction(inputs, output1)\n+        rawtx2 = node.createrawtransaction(inputs, output2)\n+        signedtx1 = node.signrawtransactionwithkey(hexstring=rawtx1, privkeys=self.privkeys)\n+        signedtx2 = node.signrawtransactionwithkey(hexstring=rawtx2, privkeys=self.privkeys)\n+        tx1 = CTransaction()\n+        tx1.deserialize(BytesIO(hex_str_to_bytes(signedtx1[\"hex\"])))\n+        tx2 = CTransaction()\n+        tx2.deserialize(BytesIO(hex_str_to_bytes(signedtx2[\"hex\"])))\n+        assert signedtx1[\"complete\"]\n+        assert signedtx2[\"complete\"]\n+\n+        # Ensure tx1 and tx2 are valid by themselves\n+        assert node.testmempoolaccept([signedtx1[\"hex\"]])[0][\"allowed\"]\n+        assert node.testmempoolaccept([signedtx2[\"hex\"]])[0][\"allowed\"]\n+\n+        self.log.info(\"Test duplicate transactions in the same package\")\n+        testres = node.testmempoolaccept([signedtx1[\"hex\"], signedtx1[\"hex\"]])\n+        assert_equal(testres, [\n+            {\"txid\": tx1.rehash(), \"wtxid\": tx1.getwtxid(), \"package-error\": \"conflict-in-package\"},\n+            {\"txid\": tx1.rehash(), \"wtxid\": tx1.getwtxid(), \"package-error\": \"conflict-in-package\"}\n+        ])\n+\n+        self.log.info(\"Test conflicting transactions in the same package\")\n+        testres = node.testmempoolaccept([signedtx1[\"hex\"], signedtx2[\"hex\"]])\n+        assert_equal(testres, [\n+            {\"txid\": tx1.rehash(), \"wtxid\": tx1.getwtxid(), \"package-error\": \"conflict-in-package\"},\n+            {\"txid\": tx2.rehash(), \"wtxid\": tx2.getwtxid(), \"package-error\": \"conflict-in-package\"}\n+        ])\n+\n+    def test_rbf(self):\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+        inputs = [{\"txid\": coin[\"txid\"], \"vout\": 0, \"sequence\": BIP125_SEQUENCE_NUMBER}]\n+        fee = Decimal('0.00125000')\n+        output = {node.get_deterministic_priv_key().address: 50 - fee}\n+        raw_replaceable_tx = node.createrawtransaction(inputs, output)\n+        signed_replaceable_tx = node.signrawtransactionwithkey(hexstring=raw_replaceable_tx, privkeys=self.privkeys)\n+        testres_replaceable = node.testmempoolaccept([signed_replaceable_tx[\"hex\"]])\n+        replaceable_tx = CTransaction()\n+        replaceable_tx.deserialize(BytesIO(hex_str_to_bytes(signed_replaceable_tx[\"hex\"])))\n+        assert_equal(testres_replaceable, [\n+            {\"txid\": replaceable_tx.rehash(), \"wtxid\": replaceable_tx.getwtxid(),\n+            \"allowed\": True, \"vsize\": replaceable_tx.get_vsize(), \"fees\": { \"base\": fee }}\n+        ])\n+\n+        # Replacement transaction is identical except has double the fee\n+        replacement_tx = CTransaction()\n+        replacement_tx.deserialize(BytesIO(hex_str_to_bytes(signed_replaceable_tx[\"hex\"])))\n+        replacement_tx.vout[0].nValue -= int(fee * COIN)  # Doubled fee\n+        signed_replacement_tx = node.signrawtransactionwithkey(replacement_tx.serialize().hex(), self.privkeys)\n+        replacement_tx.deserialize(BytesIO(hex_str_to_bytes(signed_replacement_tx[\"hex\"])))\n+\n+        self.log.info(\"Test that transactions within a package cannot replace each other\")\n+        testres_rbf_conflicting = node.testmempoolaccept([signed_replaceable_tx[\"hex\"], signed_replacement_tx[\"hex\"]])\n+        assert_equal(testres_rbf_conflicting, [\n+            {\"txid\": replaceable_tx.rehash(), \"wtxid\": replaceable_tx.getwtxid(), \"package-error\": \"conflict-in-package\"},\n+            {\"txid\": replacement_tx.rehash(), \"wtxid\": replacement_tx.getwtxid(), \"package-error\": \"conflict-in-package\"}\n+        ])\n+\n+        self.log.info(\"Test that packages cannot conflict with mempool transactions, even if a valid BIP125 RBF\")\n+        node.sendrawtransaction(signed_replaceable_tx[\"hex\"])\n+        testres_rbf_single = node.testmempoolaccept([signed_replacement_tx[\"hex\"]])\n+        assert testres_rbf_single[0][\"allowed\"]\n+        testres_rbf_package = node.testmempoolaccept([signed_replacement_tx[\"hex\"]] + self.independent_txns_hex)\n+        assert_equal(testres_rbf_package[0][\"reject-reason\"], \"txn-mempool-conflict\")",
      "path": "test/functional/rpc_packages.py",
      "position": null,
      "original_position": 343,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "d8642c19991ca91ae7edeab82d3409a73fcfdb56",
      "in_reply_to_id": 625954431,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ok, I've added a function `assert_testres_equal()` that shuffles packages before asserting that the testmempoolaccept result matches, and edited the tests to use this function in all cases where the order shouldn't matter.",
      "created_at": "2021-05-06T00:29:14Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r627001347",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627001347"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 343,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627039961",
      "pull_request_review_id": 652915511,
      "id": 627039961,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzAzOTk2MQ==",
      "diff_hunk": "@@ -1060,28 +1176,93 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n \n     Workspace ws(ptx);\n \n-    if (!PreChecks(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!PreChecks(args, ws)) return MempoolAcceptResult(*ws.m_ptx, ws.m_state);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(*ws.m_ptx, ws.m_state);\n \n-    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(*ws.m_ptx, ws.m_state);\n \n     // Tx was accepted, but not added\n     if (args.m_test_accept) {\n-        return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+        return MempoolAcceptResult(*ws.m_ptx, std::move(ws.m_replaced_transactions), ws.m_base_fees);\n     }\n \n-    if (!Finalize(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!Finalize(args, ws)) return MempoolAcceptResult(*ws.m_ptx, ws.m_state);\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+    return MempoolAcceptResult(*ws.m_ptx, std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+}\n+\n+std::vector<MempoolAcceptResult> MemPoolAccept::AcceptMultipleTransactions(std::vector<CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    std::vector<Workspace> workspaces{};\n+    const int package_size = txns.size();\n+    workspaces.reserve(package_size);\n+    std::transform(txns.begin(), txns.end(), std::back_inserter(workspaces), [](CTransactionRef& tx) {\n+        return Workspace(tx);\n+    });\n+    std::vector<MempoolAcceptResult> results;\n+    results.reserve(package_size);\n+\n+    LOCK(m_pool.cs);\n+    // Do all PreChecks first and fail fast to avoid running expensive script checks when unnecessary.\n+    for (Workspace& ws : workspaces) {\n+        if (!PreChecks(args, ws)) {\n+            // Exit early to avoid doing pointless work. Return results in the same order as input txns.\n+            const auto failed_or_unfinished = [&, failed_ptx = ws.m_ptx](Workspace& ws) {\n+                                              return ws.m_ptx == failed_ptx\n+                                              ? MempoolAcceptResult(*ws.m_ptx, ws.m_state, /* finished */ true)\n+                                              : MempoolAcceptResult(*ws.m_ptx, ws.m_state, /* finished */ false);\n+            };\n+            std::transform(workspaces.begin(), workspaces.end(), std::back_inserter(results), failed_or_unfinished);\n+            return results;\n+        }\n+        m_view.PackageAddTransaction(ws.m_ptx);\n+    }\n+\n+    // Now that we have verified all inputs are available and there are no conflicts in the package,\n+    // clear the temporary coins (m_temp_added and m_temp_spent), otherwise script checks will error\n+    // on coins that are spent within the package.\n+    m_view.ClearTemporaryCoins();\n+\n+    for (Workspace& ws : workspaces) {\n+        PrecomputedTransactionData txdata;\n+        if (!PolicyScriptChecks(args, ws, txdata)) {\n+            // Exit early to avoid doing pointless work. Return results in the same order as input txns.\n+            CTransactionRef failed_ptx = ws.m_ptx;\n+            const auto failed_or_unfinished = [&failed_ptx](Workspace& ws) {\n+                                              return ws.m_ptx == failed_ptx\n+                                              ? MempoolAcceptResult(*ws.m_ptx, ws.m_state, /* finished */ true)\n+                                              : MempoolAcceptResult(*ws.m_ptx, ws.m_state, /* finished */ false);\n+            };\n+            auto it_curr = std::find_if(workspaces.begin(), workspaces.end(),\n+                                        [& failed_ptx](Workspace& ws) { return ws.m_ptx == failed_ptx; });\n+            // When test_accept=true, transactions that pass PolicyScriptChecks are valid because there are\n+            // no further mempool checks (passing PolicyScriptChecks implies passing ConsensusScriptChecks).",
      "path": "src/validation.cpp",
      "position": 223,
      "original_position": 266,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "in_reply_to_id": 594502100,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I've noted in the release notes that the true mempool minimum fee may not be met in the test_accept\r\n\r\nPerhaps in a separate PR (which would be relevant even for non-package-accept) we could figure out how to get a more accurate mempool minimum fee without submitting to it :)",
      "created_at": "2021-05-06T02:44:10Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r627039961",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627039961"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1168,
      "original_line": 1168,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/628185183",
      "pull_request_review_id": 654422532,
      "id": 628185183,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyODE4NTE4Mw==",
      "diff_hunk": "@@ -932,62 +938,79 @@ static RPCHelpMan testmempoolaccept()\n         UniValueType(), // VNUM or VSTR, checked inside AmountFromValue()\n     });\n \n-    if (request.params[0].get_array().size() != 1) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array must contain exactly one raw transaction for now\");\n+    if (request.params[0].get_array().size() > MAX_PACKAGE_COUNT) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array cannot contain more than \" + ToString(MAX_PACKAGE_COUNT) + \" transactions.\");\n     }\n \n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_array()[0].get_str())) {\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n-    }\n-    CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-\n+    const UniValue raw_transactions = request.params[0].get_array();\n     const CFeeRate max_raw_tx_fee_rate = request.params[1].isNull() ?\n                                              DEFAULT_MAX_RAW_TX_FEE_RATE :\n                                              CFeeRate(AmountFromValue(request.params[1]));\n \n-    NodeContext& node = EnsureAnyNodeContext(request.context);\n+    std::vector<CTransactionRef> txns;\n+    for (const auto& rawtx : raw_transactions.getValues()) {\n+        CMutableTransaction mtx;\n+        if (!DecodeHexTx(mtx, rawtx.get_str())) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n+        }\n+        txns.emplace_back(MakeTransactionRef(std::move(mtx)));\n+    }\n \n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n     CTxMemPool& mempool = EnsureMemPool(node);\n-    int64_t virtual_size = GetVirtualTransactionSize(*tx);\n-    CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n-\n-    UniValue result(UniValue::VARR);\n-    UniValue result_0(UniValue::VOBJ);\n-    result_0.pushKV(\"txid\", tx->GetHash().GetHex());\n-    result_0.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n-\n-    ChainstateManager& chainman = EnsureChainman(node);\n-    const MempoolAcceptResult accept_result = WITH_LOCK(cs_main, return AcceptToMemoryPool(chainman.ActiveChainstate(), mempool, std::move(tx),\n-                                                  false /* bypass_limits */, /* test_accept */ true));\n-\n-    // Only return the fee and vsize if the transaction would pass ATMP.\n-    // These can be used to calculate the feerate.\n-    if (accept_result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-        const CAmount fee = accept_result.m_base_fees.value();\n-        // Check that fee does not exceed maximum fee\n-        if (max_raw_tx_fee && fee > max_raw_tx_fee) {\n-            result_0.pushKV(\"allowed\", false);\n-            result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n-        } else {\n-            result_0.pushKV(\"allowed\", true);\n-            result_0.pushKV(\"vsize\", virtual_size);\n-            UniValue fees(UniValue::VOBJ);\n-            fees.pushKV(\"base\", ValueFromAmount(fee));\n-            result_0.pushKV(\"fees\", fees);\n+    CChainState& chainstate = EnsureChainman(node).ActiveChainstate();\n+    const PackageMempoolAcceptResult validation_result = [&] {\n+        LOCK(::cs_main);\n+        if (txns.size() > 1) return ProcessNewPackage(chainstate, mempool, txns, /* test_accept */ true);\n+        return PackageMempoolAcceptResult(txns[0]->GetWitnessHash(),",
      "path": "src/rpc/rawtransaction.cpp",
      "position": 112,
      "original_position": 103,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "116fc35d2d8dd66a14d90b598f9bbafcee032467",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "There should be a check for size 0 - currently `testmempoolaccept []` segfaults here.",
      "created_at": "2021-05-07T12:50:57Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r628185183",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/628185183"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 969,
      "original_line": 969,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/629361807",
      "pull_request_review_id": 655648021,
      "id": 629361807,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyOTM2MTgwNw==",
      "diff_hunk": "@@ -932,62 +938,79 @@ static RPCHelpMan testmempoolaccept()\n         UniValueType(), // VNUM or VSTR, checked inside AmountFromValue()\n     });\n \n-    if (request.params[0].get_array().size() != 1) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array must contain exactly one raw transaction for now\");\n+    if (request.params[0].get_array().size() > MAX_PACKAGE_COUNT) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array cannot contain more than \" + ToString(MAX_PACKAGE_COUNT) + \" transactions.\");\n     }\n \n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_array()[0].get_str())) {\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n-    }\n-    CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-\n+    const UniValue raw_transactions = request.params[0].get_array();\n     const CFeeRate max_raw_tx_fee_rate = request.params[1].isNull() ?\n                                              DEFAULT_MAX_RAW_TX_FEE_RATE :\n                                              CFeeRate(AmountFromValue(request.params[1]));\n \n-    NodeContext& node = EnsureAnyNodeContext(request.context);\n+    std::vector<CTransactionRef> txns;\n+    for (const auto& rawtx : raw_transactions.getValues()) {\n+        CMutableTransaction mtx;\n+        if (!DecodeHexTx(mtx, rawtx.get_str())) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n+        }\n+        txns.emplace_back(MakeTransactionRef(std::move(mtx)));\n+    }\n \n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n     CTxMemPool& mempool = EnsureMemPool(node);\n-    int64_t virtual_size = GetVirtualTransactionSize(*tx);\n-    CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n-\n-    UniValue result(UniValue::VARR);\n-    UniValue result_0(UniValue::VOBJ);\n-    result_0.pushKV(\"txid\", tx->GetHash().GetHex());\n-    result_0.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n-\n-    ChainstateManager& chainman = EnsureChainman(node);\n-    const MempoolAcceptResult accept_result = WITH_LOCK(cs_main, return AcceptToMemoryPool(chainman.ActiveChainstate(), mempool, std::move(tx),\n-                                                  false /* bypass_limits */, /* test_accept */ true));\n-\n-    // Only return the fee and vsize if the transaction would pass ATMP.\n-    // These can be used to calculate the feerate.\n-    if (accept_result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-        const CAmount fee = accept_result.m_base_fees.value();\n-        // Check that fee does not exceed maximum fee\n-        if (max_raw_tx_fee && fee > max_raw_tx_fee) {\n-            result_0.pushKV(\"allowed\", false);\n-            result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n-        } else {\n-            result_0.pushKV(\"allowed\", true);\n-            result_0.pushKV(\"vsize\", virtual_size);\n-            UniValue fees(UniValue::VOBJ);\n-            fees.pushKV(\"base\", ValueFromAmount(fee));\n-            result_0.pushKV(\"fees\", fees);\n+    CChainState& chainstate = EnsureChainman(node).ActiveChainstate();\n+    const PackageMempoolAcceptResult validation_result = [&] {\n+        LOCK(::cs_main);\n+        if (txns.size() > 1) return ProcessNewPackage(chainstate, mempool, txns, /* test_accept */ true);\n+        return PackageMempoolAcceptResult(txns[0]->GetWitnessHash(),\n+               AcceptToMemoryPool(chainstate, mempool, txns[0], /* bypass_limits */ false, /* test_accept*/ true));\n+    }();\n+\n+    UniValue rpc_result(UniValue::VARR);\n+\n+    for (auto tx : txns) {\n+        UniValue result_inner(UniValue::VOBJ);\n+        result_inner.pushKV(\"txid\", tx->GetHash().GetHex());\n+        result_inner.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n+        if (validation_result.m_state.GetResult() == PackageValidationResult::PCKG_POLICY) {\n+            result_inner.pushKV(\"package-error\", validation_result.m_state.GetRejectReason());\n         }\n-        result.push_back(std::move(result_0));\n-    } else {\n-        result_0.pushKV(\"allowed\", false);\n-        const TxValidationState state = accept_result.m_state;\n-        if (state.GetResult() == TxValidationResult::TX_MISSING_INPUTS) {\n-            result_0.pushKV(\"reject-reason\", \"missing-inputs\");\n+        auto it = validation_result.m_tx_results.find(tx->GetWitnessHash());\n+        if (it == validation_result.m_tx_results.end()) {\n+            // Validation unfinished. Just return the txid and wtxid.\n+            rpc_result.push_back(result_inner);\n+            continue;\n+        }\n+        const auto& accept_result = it->second;\n+        if (accept_result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n+            const CAmount fee = accept_result.m_base_fees.value();\n+            // Check that fee does not exceed maximum fee\n+            const int64_t virtual_size = GetVirtualTransactionSize(*tx);\n+            const CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n+            if (max_raw_tx_fee && fee > max_raw_tx_fee) {\n+                result_inner.pushKV(\"allowed\", false);\n+                result_inner.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n+            } else {\n+                // Only return the fee and vsize if the transaction would pass ATMP.\n+                // These can be used to calculate the feerate.\n+                result_inner.pushKV(\"allowed\", true);\n+                result_inner.pushKV(\"vsize\", virtual_size);\n+                UniValue fees(UniValue::VOBJ);\n+                fees.pushKV(\"base\", ValueFromAmount(fee));\n+                result_inner.pushKV(\"fees\", fees);\n+            }\n         } else {\n-            result_0.pushKV(\"reject-reason\", state.GetRejectReason());\n+            result_inner.pushKV(\"allowed\", false);\n+            const TxValidationState state = accept_result.m_state;\n+            if (state.GetResult() == TxValidationResult::TX_MISSING_INPUTS) {",
      "path": "src/rpc/rawtransaction.cpp",
      "position": 164,
      "original_position": 150,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "d93d51f1132bc6ae54f7d23a5bbb434ce01b7c37",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Do we have any reason to special-case `TX_MISSING_INPUTS` ?\r\n\r\nIt sounds to have been here since the introduction of `testmempoolaccept` with #11742. Though, looking on error path in `PreChecks, L773, the reject reason sounds informative enough \"bad-txns-inputs-missingorspent\"",
      "created_at": "2021-05-10T13:32:30Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r629361807",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/629361807"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1014,
      "original_line": 1014,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/629449767",
      "pull_request_review_id": 655769596,
      "id": 629449767,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyOTQ0OTc2Nw==",
      "diff_hunk": "@@ -1189,12 +1190,29 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         return PackageMempoolAcceptResult(package_state, {});\n     }\n \n+    // Construct workspaces and check package policies.\n     std::vector<Workspace> workspaces{};\n     workspaces.reserve(package_count);\n-    std::transform(txns.cbegin(), txns.cend(), std::back_inserter(workspaces), [](const auto& tx) {\n-        return Workspace(tx);\n-    });\n-\n+    {\n+        std::unordered_set<uint256, SaltedTxidHasher> later_txids;\n+        std::transform(txns.cbegin(), txns.cend(), std::inserter(later_txids, later_txids.end()),\n+                       [](const auto& tx) { return tx->GetHash(); });\n+        // Require the package to be sorted in order of dependency, i.e. parents appear before children.\n+        // An unsorted package will fail anyway on missing-inputs, but it's better to quit earlier and\n+        // fail on something less ambiguous (missing-inputs could also be an orphan or trying to\n+        // spend nonexistent coins).\n+       for (const auto& tx : txns) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 27,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "aae6c0b7ef41c39770371a9f7cca4a0138c6fb4b",
      "in_reply_to_id": null,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: indentation is off-by-one here (same for the closing bracket below)",
      "created_at": "2021-05-10T15:17:28Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r629449767",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/629449767"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1204,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/629481038",
      "pull_request_review_id": 655648021,
      "id": 629481038,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyOTQ4MTAzOA==",
      "diff_hunk": "@@ -108,6 +108,16 @@ Updated RPCs\n   Respectively, these new fields indicate the duration of a ban and the time remaining until a ban expires,\n   both in seconds. Additionally, the `ban_created` field is repositioned to come before `banned_until`. (#21602)\n \n+- The `testmempoolaccept` RPC now accepts multiple transactions. This is intended for testing\n+  transaction packages with dependency relationships; it is not recommended for batch-validating\n+  independent transactions. In addition to mempool policy, package policies apply: the list cannot\n+  contain more than 25 transactions or have a total size exceeding 101K virtual bytes, and the\n+  transactions must be ordered by dependency (parents appear before children).  Transactions cannot\n+  conflict with (spend the same inputs as) each other or the mempool, even if it would be a valid\n+  BIP125 replace-by-fee. There are also limitations on how accurate the policy checks are: a package\n+  that passed `testmempoolaccept` may actually exceed in-mempool ancestor limits or be below the\n+  true minimum mempool fee. (#20833)",
      "path": "doc/release-notes.md",
      "position": null,
      "original_position": 12,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "d93d51f1132bc6ae54f7d23a5bbb434ce01b7c37",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks for noting the outcome of this conversation, but I think this limitation would be better described as \"be rejected as infringing on mempool size limit if effectively added\". What we can describe as min mempool fee enforcement I believe is done by `CheckFeeRate`.",
      "created_at": "2021-05-10T15:57:52Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r629481038",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/629481038"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 119,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/629494952",
      "pull_request_review_id": 655648021,
      "id": 629494952,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyOTQ5NDk1Mg==",
      "diff_hunk": "@@ -541,7 +641,7 @@ class MemPoolAccept\n \n private:\n     CTxMemPool& m_pool;\n-    CCoinsViewCache m_view;\n+    CoinsViewTemporary m_view;",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 180,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "d93d51f1132bc6ae54f7d23a5bbb434ce01b7c37",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: what about `m_viewtmp` to dissociate clearly from `m_viewmempool`?",
      "created_at": "2021-05-10T16:17:00Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r629494952",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/629494952"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 644,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/629514373",
      "pull_request_review_id": 655648021,
      "id": 629514373,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyOTUxNDM3Mw==",
      "diff_hunk": "@@ -1062,28 +1162,141 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n \n     Workspace ws(ptx);\n \n-    if (!PreChecks(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!PreChecks(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n-    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Tx was accepted, but not added\n     if (args.m_test_accept) {\n-        return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+        return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n     }\n \n-    if (!Finalize(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!Finalize(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+    return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+}\n+\n+PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::vector<CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    PackageValidationState package_state;\n+    // Check for malformed input.\n+    if (txns.empty()) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-too-few-transactions\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+    if (!std::all_of(txns.cbegin(), txns.cend(),\n+                     [](const auto& tx){ return tx && !tx->IsNull(); })) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-malformed-transaction\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    const unsigned int package_count = txns.size();\n+\n+    // These context-free package limits can be checked before taking the mempool lock.\n+    if (package_count > MAX_PACKAGE_COUNT) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-too-many-transactions\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    const int64_t total_size = std::accumulate(txns.cbegin(), txns.cend(), 0,\n+                               [](int64_t sum, const auto& tx) { return sum + GetVirtualTransactionSize(*tx); });\n+    // If the package only contains 1 tx, it's better to report the policy violation on individual tx size.\n+    if (package_count > 1 && total_size > MAX_PACKAGE_SIZE * 1000) {",
      "path": "src/validation.cpp",
      "position": 147,
      "original_position": 268,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "d8642c19991ca91ae7edeab82d3409a73fcfdb56",
      "in_reply_to_id": 625927118,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think `package_count==1` is a good hint of internal API `AcceptMultipleTransactions` misusage and an assert would be cleaner. Though not a strong opinion.",
      "created_at": "2021-05-10T16:45:51Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r629514373",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/629514373"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1092,
      "original_line": 1092,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/629533725",
      "pull_request_review_id": 655881926,
      "id": 629533725,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyOTUzMzcyNQ==",
      "diff_hunk": "@@ -932,62 +938,79 @@ static RPCHelpMan testmempoolaccept()\n         UniValueType(), // VNUM or VSTR, checked inside AmountFromValue()\n     });\n \n-    if (request.params[0].get_array().size() != 1) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array must contain exactly one raw transaction for now\");\n+    if (request.params[0].get_array().size() > MAX_PACKAGE_COUNT) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array cannot contain more than \" + ToString(MAX_PACKAGE_COUNT) + \" transactions.\");\n     }\n \n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_array()[0].get_str())) {\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n-    }\n-    CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-\n+    const UniValue raw_transactions = request.params[0].get_array();\n     const CFeeRate max_raw_tx_fee_rate = request.params[1].isNull() ?\n                                              DEFAULT_MAX_RAW_TX_FEE_RATE :\n                                              CFeeRate(AmountFromValue(request.params[1]));\n \n-    NodeContext& node = EnsureAnyNodeContext(request.context);\n+    std::vector<CTransactionRef> txns;\n+    for (const auto& rawtx : raw_transactions.getValues()) {\n+        CMutableTransaction mtx;\n+        if (!DecodeHexTx(mtx, rawtx.get_str())) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n+        }\n+        txns.emplace_back(MakeTransactionRef(std::move(mtx)));\n+    }\n \n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n     CTxMemPool& mempool = EnsureMemPool(node);\n-    int64_t virtual_size = GetVirtualTransactionSize(*tx);\n-    CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n-\n-    UniValue result(UniValue::VARR);\n-    UniValue result_0(UniValue::VOBJ);\n-    result_0.pushKV(\"txid\", tx->GetHash().GetHex());\n-    result_0.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n-\n-    ChainstateManager& chainman = EnsureChainman(node);\n-    const MempoolAcceptResult accept_result = WITH_LOCK(cs_main, return AcceptToMemoryPool(chainman.ActiveChainstate(), mempool, std::move(tx),\n-                                                  false /* bypass_limits */, /* test_accept */ true));\n-\n-    // Only return the fee and vsize if the transaction would pass ATMP.\n-    // These can be used to calculate the feerate.\n-    if (accept_result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-        const CAmount fee = accept_result.m_base_fees.value();\n-        // Check that fee does not exceed maximum fee\n-        if (max_raw_tx_fee && fee > max_raw_tx_fee) {\n-            result_0.pushKV(\"allowed\", false);\n-            result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n-        } else {\n-            result_0.pushKV(\"allowed\", true);\n-            result_0.pushKV(\"vsize\", virtual_size);\n-            UniValue fees(UniValue::VOBJ);\n-            fees.pushKV(\"base\", ValueFromAmount(fee));\n-            result_0.pushKV(\"fees\", fees);\n+    CChainState& chainstate = EnsureChainman(node).ActiveChainstate();\n+    const PackageMempoolAcceptResult validation_result = [&] {\n+        LOCK(::cs_main);\n+        if (txns.size() > 1) return ProcessNewPackage(chainstate, mempool, txns, /* test_accept */ true);\n+        return PackageMempoolAcceptResult(txns[0]->GetWitnessHash(),\n+               AcceptToMemoryPool(chainstate, mempool, txns[0], /* bypass_limits */ false, /* test_accept*/ true));\n+    }();\n+\n+    UniValue rpc_result(UniValue::VARR);\n+\n+    for (auto tx : txns) {\n+        UniValue result_inner(UniValue::VOBJ);\n+        result_inner.pushKV(\"txid\", tx->GetHash().GetHex());\n+        result_inner.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n+        if (validation_result.m_state.GetResult() == PackageValidationResult::PCKG_POLICY) {\n+            result_inner.pushKV(\"package-error\", validation_result.m_state.GetRejectReason());\n         }\n-        result.push_back(std::move(result_0));\n-    } else {\n-        result_0.pushKV(\"allowed\", false);\n-        const TxValidationState state = accept_result.m_state;\n-        if (state.GetResult() == TxValidationResult::TX_MISSING_INPUTS) {\n-            result_0.pushKV(\"reject-reason\", \"missing-inputs\");\n+        auto it = validation_result.m_tx_results.find(tx->GetWitnessHash());\n+        if (it == validation_result.m_tx_results.end()) {\n+            // Validation unfinished. Just return the txid and wtxid.\n+            rpc_result.push_back(result_inner);\n+            continue;\n+        }\n+        const auto& accept_result = it->second;\n+        if (accept_result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n+            const CAmount fee = accept_result.m_base_fees.value();\n+            // Check that fee does not exceed maximum fee\n+            const int64_t virtual_size = GetVirtualTransactionSize(*tx);\n+            const CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n+            if (max_raw_tx_fee && fee > max_raw_tx_fee) {\n+                result_inner.pushKV(\"allowed\", false);\n+                result_inner.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n+            } else {\n+                // Only return the fee and vsize if the transaction would pass ATMP.\n+                // These can be used to calculate the feerate.\n+                result_inner.pushKV(\"allowed\", true);\n+                result_inner.pushKV(\"vsize\", virtual_size);\n+                UniValue fees(UniValue::VOBJ);\n+                fees.pushKV(\"base\", ValueFromAmount(fee));\n+                result_inner.pushKV(\"fees\", fees);\n+            }\n         } else {\n-            result_0.pushKV(\"reject-reason\", state.GetRejectReason());\n+            result_inner.pushKV(\"allowed\", false);\n+            const TxValidationState state = accept_result.m_state;\n+            if (state.GetResult() == TxValidationResult::TX_MISSING_INPUTS) {",
      "path": "src/rpc/rawtransaction.cpp",
      "position": 164,
      "original_position": 150,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "d93d51f1132bc6ae54f7d23a5bbb434ce01b7c37",
      "in_reply_to_id": 629361807,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "(Out of the scope of this PR to change this) Correct, I don't think the special gate on `TX_MISSING_INPUTS` is necessary anymore, but changing it will mean all the tests will need to assert \"bad-txns-inputs-missingorspent\" instead of \"missing-inputs.\"",
      "created_at": "2021-05-10T17:15:30Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r629533725",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/629533725"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1014,
      "original_line": 1014,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/629534782",
      "pull_request_review_id": 655883372,
      "id": 629534782,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyOTUzNDc4Mg==",
      "diff_hunk": "@@ -108,6 +108,16 @@ Updated RPCs\n   Respectively, these new fields indicate the duration of a ban and the time remaining until a ban expires,\n   both in seconds. Additionally, the `ban_created` field is repositioned to come before `banned_until`. (#21602)\n \n+- The `testmempoolaccept` RPC now accepts multiple transactions. This is intended for testing\n+  transaction packages with dependency relationships; it is not recommended for batch-validating\n+  independent transactions. In addition to mempool policy, package policies apply: the list cannot\n+  contain more than 25 transactions or have a total size exceeding 101K virtual bytes, and the\n+  transactions must be ordered by dependency (parents appear before children).  Transactions cannot\n+  conflict with (spend the same inputs as) each other or the mempool, even if it would be a valid\n+  BIP125 replace-by-fee. There are also limitations on how accurate the policy checks are: a package\n+  that passed `testmempoolaccept` may actually exceed in-mempool ancestor limits or be below the\n+  true minimum mempool fee. (#20833)",
      "path": "doc/release-notes.md",
      "position": null,
      "original_position": 12,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "d93d51f1132bc6ae54f7d23a5bbb434ce01b7c37",
      "in_reply_to_id": 629481038,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ok, I can update the doc. Generally, would it be better to just note \"multiple transaction testmempoolaccept is experimental, expect the API to be unstable?\" And then list the known limitations.",
      "created_at": "2021-05-10T17:17:10Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r629534782",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/629534782"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 119,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/629689951",
      "pull_request_review_id": 654422532,
      "id": 629689951,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyOTY4OTk1MQ==",
      "diff_hunk": "@@ -932,62 +937,74 @@ static RPCHelpMan testmempoolaccept()\n         UniValueType(), // VNUM or VSTR, checked inside AmountFromValue()\n     });\n \n-    if (request.params[0].get_array().size() != 1) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array must contain exactly one raw transaction for now\");\n+    if (request.params[0].get_array().size() > MAX_PACKAGE_COUNT) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array cannot contain more than \" + ToString(MAX_PACKAGE_COUNT) + \" transactions.\");\n     }\n \n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_array()[0].get_str())) {\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n-    }\n-    CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-\n+    const UniValue raw_transactions = request.params[0].get_array();\n     const CFeeRate max_raw_tx_fee_rate = request.params[1].isNull() ?\n                                              DEFAULT_MAX_RAW_TX_FEE_RATE :\n                                              CFeeRate(AmountFromValue(request.params[1]));\n \n-    NodeContext& node = EnsureAnyNodeContext(request.context);\n+    std::vector<CTransactionRef> txns;\n+    for (const auto& rawtx : raw_transactions.getValues()) {\n+        CMutableTransaction mtx;\n+        if (!DecodeHexTx(mtx, rawtx.get_str())) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n+        }\n+        txns.emplace_back(MakeTransactionRef(std::move(mtx)));\n+    }\n \n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n     CTxMemPool& mempool = EnsureMemPool(node);\n-    int64_t virtual_size = GetVirtualTransactionSize(*tx);\n-    CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n-\n-    UniValue result(UniValue::VARR);\n-    UniValue result_0(UniValue::VOBJ);\n-    result_0.pushKV(\"txid\", tx->GetHash().GetHex());\n-    result_0.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n-\n-    ChainstateManager& chainman = EnsureChainman(node);\n-    const MempoolAcceptResult accept_result = WITH_LOCK(cs_main, return AcceptToMemoryPool(chainman.ActiveChainstate(), mempool, std::move(tx),\n-                                                  false /* bypass_limits */, /* test_accept */ true));\n-\n-    // Only return the fee and vsize if the transaction would pass ATMP.\n-    // These can be used to calculate the feerate.\n-    if (accept_result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-        const CAmount fee = accept_result.m_base_fees.value();\n-        // Check that fee does not exceed maximum fee\n-        if (max_raw_tx_fee && fee > max_raw_tx_fee) {\n-            result_0.pushKV(\"allowed\", false);\n-            result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n-        } else {\n-            result_0.pushKV(\"allowed\", true);\n-            result_0.pushKV(\"vsize\", virtual_size);\n-            UniValue fees(UniValue::VOBJ);\n-            fees.pushKV(\"base\", ValueFromAmount(fee));\n-            result_0.pushKV(\"fees\", fees);\n+    CChainState& chainstate = EnsureChainman(node).ActiveChainstate();\n+    const PackageMempoolAcceptResult validation_result = txns.size() > 1\n+        ? WITH_LOCK(cs_main, return ProcessNewPackage(chainstate, mempool, txns, /* test_accept */ true))\n+        : WITH_LOCK(cs_main, return PackageMempoolAcceptResult(txns[0]->GetWitnessHash(),\n+                             AcceptToMemoryPool(chainstate, mempool, txns[0], /* bypass_limits */ false,  /* test_accept */ true)));\n+\n+    UniValue rpc_result(UniValue::VARR);\n+\n+    for (auto tx : txns) {\n+        UniValue result_inner(UniValue::VOBJ);\n+        result_inner.pushKV(\"txid\", tx->GetHash().GetHex());\n+        result_inner.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n+        auto it = validation_result.m_tx_results.find(tx->GetWitnessHash());\n+        if (it == validation_result.m_tx_results.end()) {\n+            // Validation unfinished. Just return the txid and wtxid.\n+            rpc_result.push_back(result_inner);\n+            continue;\n         }\n-        result.push_back(std::move(result_0));\n-    } else {\n-        result_0.pushKV(\"allowed\", false);\n-        const TxValidationState state = accept_result.m_state;\n-        if (state.GetResult() == TxValidationResult::TX_MISSING_INPUTS) {\n-            result_0.pushKV(\"reject-reason\", \"missing-inputs\");\n+        const auto& accept_result = it->second;\n+        if (accept_result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n+            const CAmount fee = accept_result.m_base_fees.value();\n+            // Check that fee does not exceed maximum fee\n+            const int64_t virtual_size = GetVirtualTransactionSize(*tx);\n+            const CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n+            if (max_raw_tx_fee && fee > max_raw_tx_fee) {\n+                result_inner.pushKV(\"allowed\", false);\n+                result_inner.pushKV(\"reject-reason\", \"max-fee-exceeded\");",
      "path": "src/rpc/rawtransaction.cpp",
      "position": 149,
      "original_position": 130,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "9ce7b0f3850a0d69e81a68f18906a9d1aa4356fb",
      "in_reply_to_id": 619141139,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Also, would it make sense to apply the maxfeerate limit on a combined package level, and not for each transaction separately?",
      "created_at": "2021-05-10T21:17:45Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r629689951",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/629689951"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1000,
      "original_line": 1000,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/629937609",
      "pull_request_review_id": 656398992,
      "id": 629937609,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyOTkzNzYwOQ==",
      "diff_hunk": "@@ -932,62 +938,79 @@ static RPCHelpMan testmempoolaccept()\n         UniValueType(), // VNUM or VSTR, checked inside AmountFromValue()\n     });\n \n-    if (request.params[0].get_array().size() != 1) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array must contain exactly one raw transaction for now\");\n+    if (request.params[0].get_array().size() > MAX_PACKAGE_COUNT) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array cannot contain more than \" + ToString(MAX_PACKAGE_COUNT) + \" transactions.\");\n     }\n \n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_array()[0].get_str())) {\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n-    }\n-    CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-\n+    const UniValue raw_transactions = request.params[0].get_array();\n     const CFeeRate max_raw_tx_fee_rate = request.params[1].isNull() ?\n                                              DEFAULT_MAX_RAW_TX_FEE_RATE :\n                                              CFeeRate(AmountFromValue(request.params[1]));\n \n-    NodeContext& node = EnsureAnyNodeContext(request.context);\n+    std::vector<CTransactionRef> txns;\n+    for (const auto& rawtx : raw_transactions.getValues()) {\n+        CMutableTransaction mtx;\n+        if (!DecodeHexTx(mtx, rawtx.get_str())) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 66,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "d93d51f1132bc6ae54f7d23a5bbb434ce01b7c37",
      "in_reply_to_id": null,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Would it be useful to report which transaction index failed to decode?",
      "created_at": "2021-05-11T08:00:14Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r629937609",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/629937609"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 954,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/629958571",
      "pull_request_review_id": 656426559,
      "id": 629958571,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyOTk1ODU3MQ==",
      "diff_hunk": "@@ -932,62 +938,79 @@ static RPCHelpMan testmempoolaccept()\n         UniValueType(), // VNUM or VSTR, checked inside AmountFromValue()\n     });\n \n-    if (request.params[0].get_array().size() != 1) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array must contain exactly one raw transaction for now\");\n+    if (request.params[0].get_array().size() > MAX_PACKAGE_COUNT) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array cannot contain more than \" + ToString(MAX_PACKAGE_COUNT) + \" transactions.\");\n     }\n \n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_array()[0].get_str())) {\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n-    }\n-    CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-\n+    const UniValue raw_transactions = request.params[0].get_array();\n     const CFeeRate max_raw_tx_fee_rate = request.params[1].isNull() ?\n                                              DEFAULT_MAX_RAW_TX_FEE_RATE :\n                                              CFeeRate(AmountFromValue(request.params[1]));\n \n-    NodeContext& node = EnsureAnyNodeContext(request.context);\n+    std::vector<CTransactionRef> txns;\n+    for (const auto& rawtx : raw_transactions.getValues()) {\n+        CMutableTransaction mtx;\n+        if (!DecodeHexTx(mtx, rawtx.get_str())) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n+        }\n+        txns.emplace_back(MakeTransactionRef(std::move(mtx)));\n+    }\n \n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n     CTxMemPool& mempool = EnsureMemPool(node);\n-    int64_t virtual_size = GetVirtualTransactionSize(*tx);\n-    CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n-\n-    UniValue result(UniValue::VARR);\n-    UniValue result_0(UniValue::VOBJ);\n-    result_0.pushKV(\"txid\", tx->GetHash().GetHex());\n-    result_0.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n-\n-    ChainstateManager& chainman = EnsureChainman(node);\n-    const MempoolAcceptResult accept_result = WITH_LOCK(cs_main, return AcceptToMemoryPool(chainman.ActiveChainstate(), mempool, std::move(tx),\n-                                                  false /* bypass_limits */, /* test_accept */ true));\n-\n-    // Only return the fee and vsize if the transaction would pass ATMP.\n-    // These can be used to calculate the feerate.\n-    if (accept_result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-        const CAmount fee = accept_result.m_base_fees.value();\n-        // Check that fee does not exceed maximum fee\n-        if (max_raw_tx_fee && fee > max_raw_tx_fee) {\n-            result_0.pushKV(\"allowed\", false);\n-            result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n-        } else {\n-            result_0.pushKV(\"allowed\", true);\n-            result_0.pushKV(\"vsize\", virtual_size);\n-            UniValue fees(UniValue::VOBJ);\n-            fees.pushKV(\"base\", ValueFromAmount(fee));\n-            result_0.pushKV(\"fees\", fees);\n+    CChainState& chainstate = EnsureChainman(node).ActiveChainstate();\n+    const PackageMempoolAcceptResult validation_result = [&] {\n+        LOCK(::cs_main);\n+        if (txns.size() > 1) return ProcessNewPackage(chainstate, mempool, txns, /* test_accept */ true);\n+        return PackageMempoolAcceptResult(txns[0]->GetWitnessHash(),\n+               AcceptToMemoryPool(chainstate, mempool, txns[0], /* bypass_limits */ false, /* test_accept*/ true));\n+    }();\n+\n+    UniValue rpc_result(UniValue::VARR);\n+\n+    for (auto tx : txns) {",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 109,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "d93d51f1132bc6ae54f7d23a5bbb434ce01b7c37",
      "in_reply_to_id": null,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`for (const auto &tx : txns) {` maybe ? (no need for mutable copy here)",
      "created_at": "2021-05-11T08:27:56Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r629958571",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/629958571"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 971,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/629961943",
      "pull_request_review_id": 656426559,
      "id": 629961943,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyOTk2MTk0Mw==",
      "diff_hunk": "@@ -47,4 +51,98 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_reject_coinbase, TestChain100Setup)\n     BOOST_CHECK(result.m_state.GetResult() == TxValidationResult::TX_CONSENSUS);\n }\n \n+// Create placeholder transactions that have no meaning.\n+inline CTransactionRef create_placeholder_tx(size_t num_inputs, size_t num_outputs)\n+{\n+    CMutableTransaction mtx = CMutableTransaction();\n+    mtx.vin.resize(num_inputs);\n+    mtx.vout.resize(num_outputs);\n+    auto random_script = CScript() << ToByteVector(InsecureRand256()) << ToByteVector(InsecureRand256());\n+    for (size_t i{0}; i < num_inputs; ++i) {",
      "path": "src/test/txvalidation_tests.cpp",
      "position": 24,
      "original_position": 24,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "d93d51f1132bc6ae54f7d23a5bbb434ce01b7c37",
      "in_reply_to_id": null,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: indentation on the lines below, as well as the next loop, is off",
      "created_at": "2021-05-11T08:32:19Z",
      "updated_at": "2021-05-11T18:25:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r629961943",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/629961943"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 61,
      "original_line": 61,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/630423576",
      "pull_request_review_id": 657069669,
      "id": 630423576,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMDQyMzU3Ng==",
      "diff_hunk": "@@ -1189,12 +1190,29 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         return PackageMempoolAcceptResult(package_state, {});\n     }\n \n+    // Construct workspaces and check package policies.\n     std::vector<Workspace> workspaces{};\n     workspaces.reserve(package_count);\n-    std::transform(txns.cbegin(), txns.cend(), std::back_inserter(workspaces), [](const auto& tx) {\n-        return Workspace(tx);\n-    });\n-\n+    {\n+        std::unordered_set<uint256, SaltedTxidHasher> later_txids;\n+        std::transform(txns.cbegin(), txns.cend(), std::inserter(later_txids, later_txids.end()),\n+                       [](const auto& tx) { return tx->GetHash(); });\n+        // Require the package to be sorted in order of dependency, i.e. parents appear before children.\n+        // An unsorted package will fail anyway on missing-inputs, but it's better to quit earlier and\n+        // fail on something less ambiguous (missing-inputs could also be an orphan or trying to\n+        // spend nonexistent coins).\n+       for (const auto& tx : txns) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 27,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "aae6c0b7ef41c39770371a9f7cca4a0138c6fb4b",
      "in_reply_to_id": 629449767,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oopsie 🤦 fixed now",
      "created_at": "2021-05-11T18:26:15Z",
      "updated_at": "2021-05-11T18:26:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r630423576",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/630423576"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1204,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/630423979",
      "pull_request_review_id": 657070232,
      "id": 630423979,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMDQyMzk3OQ==",
      "diff_hunk": "@@ -932,62 +938,79 @@ static RPCHelpMan testmempoolaccept()\n         UniValueType(), // VNUM or VSTR, checked inside AmountFromValue()\n     });\n \n-    if (request.params[0].get_array().size() != 1) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array must contain exactly one raw transaction for now\");\n+    if (request.params[0].get_array().size() > MAX_PACKAGE_COUNT) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array cannot contain more than \" + ToString(MAX_PACKAGE_COUNT) + \" transactions.\");\n     }\n \n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_array()[0].get_str())) {\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n-    }\n-    CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-\n+    const UniValue raw_transactions = request.params[0].get_array();\n     const CFeeRate max_raw_tx_fee_rate = request.params[1].isNull() ?\n                                              DEFAULT_MAX_RAW_TX_FEE_RATE :\n                                              CFeeRate(AmountFromValue(request.params[1]));\n \n-    NodeContext& node = EnsureAnyNodeContext(request.context);\n+    std::vector<CTransactionRef> txns;\n+    for (const auto& rawtx : raw_transactions.getValues()) {\n+        CMutableTransaction mtx;\n+        if (!DecodeHexTx(mtx, rawtx.get_str())) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n+        }\n+        txns.emplace_back(MakeTransactionRef(std::move(mtx)));\n+    }\n \n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n     CTxMemPool& mempool = EnsureMemPool(node);\n-    int64_t virtual_size = GetVirtualTransactionSize(*tx);\n-    CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n-\n-    UniValue result(UniValue::VARR);\n-    UniValue result_0(UniValue::VOBJ);\n-    result_0.pushKV(\"txid\", tx->GetHash().GetHex());\n-    result_0.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n-\n-    ChainstateManager& chainman = EnsureChainman(node);\n-    const MempoolAcceptResult accept_result = WITH_LOCK(cs_main, return AcceptToMemoryPool(chainman.ActiveChainstate(), mempool, std::move(tx),\n-                                                  false /* bypass_limits */, /* test_accept */ true));\n-\n-    // Only return the fee and vsize if the transaction would pass ATMP.\n-    // These can be used to calculate the feerate.\n-    if (accept_result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-        const CAmount fee = accept_result.m_base_fees.value();\n-        // Check that fee does not exceed maximum fee\n-        if (max_raw_tx_fee && fee > max_raw_tx_fee) {\n-            result_0.pushKV(\"allowed\", false);\n-            result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n-        } else {\n-            result_0.pushKV(\"allowed\", true);\n-            result_0.pushKV(\"vsize\", virtual_size);\n-            UniValue fees(UniValue::VOBJ);\n-            fees.pushKV(\"base\", ValueFromAmount(fee));\n-            result_0.pushKV(\"fees\", fees);\n+    CChainState& chainstate = EnsureChainman(node).ActiveChainstate();\n+    const PackageMempoolAcceptResult validation_result = [&] {\n+        LOCK(::cs_main);\n+        if (txns.size() > 1) return ProcessNewPackage(chainstate, mempool, txns, /* test_accept */ true);\n+        return PackageMempoolAcceptResult(txns[0]->GetWitnessHash(),",
      "path": "src/rpc/rawtransaction.cpp",
      "position": 112,
      "original_position": 103,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "116fc35d2d8dd66a14d90b598f9bbafcee032467",
      "in_reply_to_id": 628185183,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks for catching that! Fixed and added a test to mempool_accept.py.",
      "created_at": "2021-05-11T18:26:57Z",
      "updated_at": "2021-05-11T18:26:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r630423979",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/630423979"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 969,
      "original_line": 969,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/630424863",
      "pull_request_review_id": 657071353,
      "id": 630424863,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMDQyNDg2Mw==",
      "diff_hunk": "@@ -932,62 +938,79 @@ static RPCHelpMan testmempoolaccept()\n         UniValueType(), // VNUM or VSTR, checked inside AmountFromValue()\n     });\n \n-    if (request.params[0].get_array().size() != 1) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array must contain exactly one raw transaction for now\");\n+    if (request.params[0].get_array().size() > MAX_PACKAGE_COUNT) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array cannot contain more than \" + ToString(MAX_PACKAGE_COUNT) + \" transactions.\");\n     }\n \n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_array()[0].get_str())) {\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n-    }\n-    CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-\n+    const UniValue raw_transactions = request.params[0].get_array();\n     const CFeeRate max_raw_tx_fee_rate = request.params[1].isNull() ?\n                                              DEFAULT_MAX_RAW_TX_FEE_RATE :\n                                              CFeeRate(AmountFromValue(request.params[1]));\n \n-    NodeContext& node = EnsureAnyNodeContext(request.context);\n+    std::vector<CTransactionRef> txns;\n+    for (const auto& rawtx : raw_transactions.getValues()) {\n+        CMutableTransaction mtx;\n+        if (!DecodeHexTx(mtx, rawtx.get_str())) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 66,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "d93d51f1132bc6ae54f7d23a5bbb434ce01b7c37",
      "in_reply_to_id": 629937609,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added `rawtx.get_str()` to the error message, hopefully that would work?",
      "created_at": "2021-05-11T18:28:13Z",
      "updated_at": "2021-05-11T18:28:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r630424863",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/630424863"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 954,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/630425041",
      "pull_request_review_id": 657071611,
      "id": 630425041,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMDQyNTA0MQ==",
      "diff_hunk": "@@ -932,62 +938,79 @@ static RPCHelpMan testmempoolaccept()\n         UniValueType(), // VNUM or VSTR, checked inside AmountFromValue()\n     });\n \n-    if (request.params[0].get_array().size() != 1) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array must contain exactly one raw transaction for now\");\n+    if (request.params[0].get_array().size() > MAX_PACKAGE_COUNT) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array cannot contain more than \" + ToString(MAX_PACKAGE_COUNT) + \" transactions.\");\n     }\n \n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_array()[0].get_str())) {\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n-    }\n-    CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-\n+    const UniValue raw_transactions = request.params[0].get_array();\n     const CFeeRate max_raw_tx_fee_rate = request.params[1].isNull() ?\n                                              DEFAULT_MAX_RAW_TX_FEE_RATE :\n                                              CFeeRate(AmountFromValue(request.params[1]));\n \n-    NodeContext& node = EnsureAnyNodeContext(request.context);\n+    std::vector<CTransactionRef> txns;\n+    for (const auto& rawtx : raw_transactions.getValues()) {\n+        CMutableTransaction mtx;\n+        if (!DecodeHexTx(mtx, rawtx.get_str())) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n+        }\n+        txns.emplace_back(MakeTransactionRef(std::move(mtx)));\n+    }\n \n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n     CTxMemPool& mempool = EnsureMemPool(node);\n-    int64_t virtual_size = GetVirtualTransactionSize(*tx);\n-    CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n-\n-    UniValue result(UniValue::VARR);\n-    UniValue result_0(UniValue::VOBJ);\n-    result_0.pushKV(\"txid\", tx->GetHash().GetHex());\n-    result_0.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n-\n-    ChainstateManager& chainman = EnsureChainman(node);\n-    const MempoolAcceptResult accept_result = WITH_LOCK(cs_main, return AcceptToMemoryPool(chainman.ActiveChainstate(), mempool, std::move(tx),\n-                                                  false /* bypass_limits */, /* test_accept */ true));\n-\n-    // Only return the fee and vsize if the transaction would pass ATMP.\n-    // These can be used to calculate the feerate.\n-    if (accept_result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-        const CAmount fee = accept_result.m_base_fees.value();\n-        // Check that fee does not exceed maximum fee\n-        if (max_raw_tx_fee && fee > max_raw_tx_fee) {\n-            result_0.pushKV(\"allowed\", false);\n-            result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n-        } else {\n-            result_0.pushKV(\"allowed\", true);\n-            result_0.pushKV(\"vsize\", virtual_size);\n-            UniValue fees(UniValue::VOBJ);\n-            fees.pushKV(\"base\", ValueFromAmount(fee));\n-            result_0.pushKV(\"fees\", fees);\n+    CChainState& chainstate = EnsureChainman(node).ActiveChainstate();\n+    const PackageMempoolAcceptResult validation_result = [&] {\n+        LOCK(::cs_main);\n+        if (txns.size() > 1) return ProcessNewPackage(chainstate, mempool, txns, /* test_accept */ true);\n+        return PackageMempoolAcceptResult(txns[0]->GetWitnessHash(),\n+               AcceptToMemoryPool(chainstate, mempool, txns[0], /* bypass_limits */ false, /* test_accept*/ true));\n+    }();\n+\n+    UniValue rpc_result(UniValue::VARR);\n+\n+    for (auto tx : txns) {",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 109,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "d93d51f1132bc6ae54f7d23a5bbb434ce01b7c37",
      "in_reply_to_id": 629958571,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good point, fixed",
      "created_at": "2021-05-11T18:28:30Z",
      "updated_at": "2021-05-11T18:28:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r630425041",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/630425041"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 971,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/630425294",
      "pull_request_review_id": 657071903,
      "id": 630425294,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMDQyNTI5NA==",
      "diff_hunk": "@@ -47,4 +51,98 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_reject_coinbase, TestChain100Setup)\n     BOOST_CHECK(result.m_state.GetResult() == TxValidationResult::TX_CONSENSUS);\n }\n \n+// Create placeholder transactions that have no meaning.\n+inline CTransactionRef create_placeholder_tx(size_t num_inputs, size_t num_outputs)\n+{\n+    CMutableTransaction mtx = CMutableTransaction();\n+    mtx.vin.resize(num_inputs);\n+    mtx.vout.resize(num_outputs);\n+    auto random_script = CScript() << ToByteVector(InsecureRand256()) << ToByteVector(InsecureRand256());\n+    for (size_t i{0}; i < num_inputs; ++i) {",
      "path": "src/test/txvalidation_tests.cpp",
      "position": 24,
      "original_position": 24,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "d93d51f1132bc6ae54f7d23a5bbb434ce01b7c37",
      "in_reply_to_id": 629961943,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done, thanks!",
      "created_at": "2021-05-11T18:28:51Z",
      "updated_at": "2021-05-11T18:28:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r630425294",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/630425294"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 61,
      "original_line": 61,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/630429683",
      "pull_request_review_id": 657077943,
      "id": 630429683,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMDQyOTY4Mw==",
      "diff_hunk": "@@ -541,7 +641,7 @@ class MemPoolAccept\n \n private:\n     CTxMemPool& m_pool;\n-    CCoinsViewCache m_view;\n+    CoinsViewTemporary m_view;",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 180,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "d93d51f1132bc6ae54f7d23a5bbb434ce01b7c37",
      "in_reply_to_id": 629494952,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "sorree 🙈 there's no more `CoinsViewTemporary`",
      "created_at": "2021-05-11T18:35:55Z",
      "updated_at": "2021-05-11T18:35:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r630429683",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/630429683"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 644,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/630429894",
      "pull_request_review_id": 657078230,
      "id": 630429894,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMDQyOTg5NA==",
      "diff_hunk": "@@ -108,6 +108,16 @@ Updated RPCs\n   Respectively, these new fields indicate the duration of a ban and the time remaining until a ban expires,\n   both in seconds. Additionally, the `ban_created` field is repositioned to come before `banned_until`. (#21602)\n \n+- The `testmempoolaccept` RPC now accepts multiple transactions. This is intended for testing\n+  transaction packages with dependency relationships; it is not recommended for batch-validating\n+  independent transactions. In addition to mempool policy, package policies apply: the list cannot\n+  contain more than 25 transactions or have a total size exceeding 101K virtual bytes, and the\n+  transactions must be ordered by dependency (parents appear before children).  Transactions cannot\n+  conflict with (spend the same inputs as) each other or the mempool, even if it would be a valid\n+  BIP125 replace-by-fee. There are also limitations on how accurate the policy checks are: a package\n+  that passed `testmempoolaccept` may actually exceed in-mempool ancestor limits or be below the\n+  true minimum mempool fee. (#20833)",
      "path": "doc/release-notes.md",
      "position": null,
      "original_position": 12,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "d93d51f1132bc6ae54f7d23a5bbb434ce01b7c37",
      "in_reply_to_id": 629481038,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Updated",
      "created_at": "2021-05-11T18:36:16Z",
      "updated_at": "2021-05-11T18:36:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r630429894",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/630429894"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 119,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/630569226",
      "pull_request_review_id": 657267849,
      "id": 630569226,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMDU2OTIyNg==",
      "diff_hunk": "@@ -108,6 +108,15 @@ Updated RPCs\n   Respectively, these new fields indicate the duration of a ban and the time remaining until a ban expires,\n   both in seconds. Additionally, the `ban_created` field is repositioned to come before `banned_until`. (#21602)\n \n+- The `testmempoolaccept` RPC now accepts multiple transactions (still experimental at the moment,",
      "path": "doc/release-notes.md",
      "position": null,
      "original_position": 4,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "ff79bbfbdf8d630b80583000f4ce79f553cb562c",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In d93d51f1132bc6ae54f7d23a5bbb434ce01b7c37 \"[doc] add release note for package testmempoolaccept\"\r\n\r\nnit: Generally release notes are added in a separate file named `release-notes-<pr number>.md` rather than `release-notes.md` to avoid causing rebase conflicts for other PRs. So for this PR, you would put this release note in `release-notes-20833.md`.",
      "created_at": "2021-05-11T22:01:28Z",
      "updated_at": "2021-05-11T22:10:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r630569226",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/630569226"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 111,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/630571069",
      "pull_request_review_id": 657267849,
      "id": 630571069,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMDU3MTA2OQ==",
      "diff_hunk": "@@ -185,6 +184,16 @@ struct MempoolAcceptResult {\n     /** Raw base fees in satoshis. */\n     const std::optional<CAmount> m_base_fees;\n \n+    static MempoolAcceptResult Failure(TxValidationState state) {\n+        return MempoolAcceptResult(state);\n+    }\n+\n+    static MempoolAcceptResult Success(std::list<CTransactionRef>&& replaced_txns, CAmount fees) {",
      "path": "src/validation.h",
      "position": 27,
      "original_position": 27,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "e77f949d279e66d0d60d127d2f87c80dc70e4c12",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 0d868d0abbc9655e2e70766433d53719debf27b4 \"[validation] package validation for test accepts\"\r\n\r\nnit: I would prefer for these changes to `MempoolAcceptResult` be split into a previous commit. It would make this commit slightly easier to read IMO.",
      "created_at": "2021-05-11T22:05:34Z",
      "updated_at": "2021-05-11T22:10:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r630571069",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/630571069"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 190,
      "original_line": 190,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/633523618",
      "pull_request_review_id": 660957574,
      "id": 633523618,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMzUyMzYxOA==",
      "diff_hunk": "@@ -932,62 +938,79 @@ static RPCHelpMan testmempoolaccept()\n         UniValueType(), // VNUM or VSTR, checked inside AmountFromValue()\n     });\n \n-    if (request.params[0].get_array().size() != 1) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array must contain exactly one raw transaction for now\");\n+    if (request.params[0].get_array().size() > MAX_PACKAGE_COUNT) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array cannot contain more than \" + ToString(MAX_PACKAGE_COUNT) + \" transactions.\");\n     }\n \n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_array()[0].get_str())) {\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n-    }\n-    CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-\n+    const UniValue raw_transactions = request.params[0].get_array();\n     const CFeeRate max_raw_tx_fee_rate = request.params[1].isNull() ?\n                                              DEFAULT_MAX_RAW_TX_FEE_RATE :\n                                              CFeeRate(AmountFromValue(request.params[1]));\n \n-    NodeContext& node = EnsureAnyNodeContext(request.context);\n+    std::vector<CTransactionRef> txns;\n+    for (const auto& rawtx : raw_transactions.getValues()) {\n+        CMutableTransaction mtx;\n+        if (!DecodeHexTx(mtx, rawtx.get_str())) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 66,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "d93d51f1132bc6ae54f7d23a5bbb434ce01b7c37",
      "in_reply_to_id": 629937609,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That works too!",
      "created_at": "2021-05-17T13:20:43Z",
      "updated_at": "2021-05-17T13:20:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r633523618",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/633523618"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 954,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/633575349",
      "pull_request_review_id": 661028684,
      "id": 633575349,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMzU3NTM0OQ==",
      "diff_hunk": "@@ -108,6 +108,15 @@ Updated RPCs\n   Respectively, these new fields indicate the duration of a ban and the time remaining until a ban expires,\n   both in seconds. Additionally, the `ban_created` field is repositioned to come before `banned_until`. (#21602)\n \n+- The `testmempoolaccept` RPC now accepts multiple transactions (still experimental at the moment,",
      "path": "doc/release-notes.md",
      "position": null,
      "original_position": 4,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "ff79bbfbdf8d630b80583000f4ce79f553cb562c",
      "in_reply_to_id": 630569226,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ah thank you, noted!",
      "created_at": "2021-05-17T14:21:45Z",
      "updated_at": "2021-05-17T14:21:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r633575349",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/633575349"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 111,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636457663",
      "pull_request_review_id": 664880258,
      "id": 636457663,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNjQ1NzY2Mw==",
      "diff_hunk": "@@ -108,6 +108,15 @@ Updated RPCs\n   Respectively, these new fields indicate the duration of a ban and the time remaining until a ban expires,\n   both in seconds. Additionally, the `ban_created` field is repositioned to come before `banned_until`. (#21602)\n \n+- The `testmempoolaccept` RPC now accepts multiple transactions (still experimental at the moment,",
      "path": "doc/release-notes.md",
      "position": null,
      "original_position": 4,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "ff79bbfbdf8d630b80583000f4ce79f553cb562c",
      "in_reply_to_id": 630569226,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2021-05-20T20:44:30Z",
      "updated_at": "2021-05-20T20:44:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r636457663",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636457663"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 111,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636457764",
      "pull_request_review_id": 664880380,
      "id": 636457764,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNjQ1Nzc2NA==",
      "diff_hunk": "@@ -185,6 +184,16 @@ struct MempoolAcceptResult {\n     /** Raw base fees in satoshis. */\n     const std::optional<CAmount> m_base_fees;\n \n+    static MempoolAcceptResult Failure(TxValidationState state) {\n+        return MempoolAcceptResult(state);\n+    }\n+\n+    static MempoolAcceptResult Success(std::list<CTransactionRef>&& replaced_txns, CAmount fees) {",
      "path": "src/validation.h",
      "position": 27,
      "original_position": 27,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "e77f949d279e66d0d60d127d2f87c80dc70e4c12",
      "in_reply_to_id": 630571069,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2021-05-20T20:44:40Z",
      "updated_at": "2021-05-20T20:44:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r636457764",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636457764"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 190,
      "original_line": 190,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/637231672",
      "pull_request_review_id": 665886271,
      "id": 637231672,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNzIzMTY3Mg==",
      "diff_hunk": "@@ -932,62 +937,74 @@ static RPCHelpMan testmempoolaccept()\n         UniValueType(), // VNUM or VSTR, checked inside AmountFromValue()\n     });\n \n-    if (request.params[0].get_array().size() != 1) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array must contain exactly one raw transaction for now\");\n+    if (request.params[0].get_array().size() > MAX_PACKAGE_COUNT) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array cannot contain more than \" + ToString(MAX_PACKAGE_COUNT) + \" transactions.\");\n     }\n \n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_array()[0].get_str())) {\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n-    }\n-    CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-\n+    const UniValue raw_transactions = request.params[0].get_array();\n     const CFeeRate max_raw_tx_fee_rate = request.params[1].isNull() ?\n                                              DEFAULT_MAX_RAW_TX_FEE_RATE :\n                                              CFeeRate(AmountFromValue(request.params[1]));\n \n-    NodeContext& node = EnsureAnyNodeContext(request.context);\n+    std::vector<CTransactionRef> txns;\n+    for (const auto& rawtx : raw_transactions.getValues()) {\n+        CMutableTransaction mtx;\n+        if (!DecodeHexTx(mtx, rawtx.get_str())) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n+        }\n+        txns.emplace_back(MakeTransactionRef(std::move(mtx)));\n+    }\n \n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n     CTxMemPool& mempool = EnsureMemPool(node);\n-    int64_t virtual_size = GetVirtualTransactionSize(*tx);\n-    CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n-\n-    UniValue result(UniValue::VARR);\n-    UniValue result_0(UniValue::VOBJ);\n-    result_0.pushKV(\"txid\", tx->GetHash().GetHex());\n-    result_0.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n-\n-    ChainstateManager& chainman = EnsureChainman(node);\n-    const MempoolAcceptResult accept_result = WITH_LOCK(cs_main, return AcceptToMemoryPool(chainman.ActiveChainstate(), mempool, std::move(tx),\n-                                                  false /* bypass_limits */, /* test_accept */ true));\n-\n-    // Only return the fee and vsize if the transaction would pass ATMP.\n-    // These can be used to calculate the feerate.\n-    if (accept_result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-        const CAmount fee = accept_result.m_base_fees.value();\n-        // Check that fee does not exceed maximum fee\n-        if (max_raw_tx_fee && fee > max_raw_tx_fee) {\n-            result_0.pushKV(\"allowed\", false);\n-            result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n-        } else {\n-            result_0.pushKV(\"allowed\", true);\n-            result_0.pushKV(\"vsize\", virtual_size);\n-            UniValue fees(UniValue::VOBJ);\n-            fees.pushKV(\"base\", ValueFromAmount(fee));\n-            result_0.pushKV(\"fees\", fees);\n+    CChainState& chainstate = EnsureChainman(node).ActiveChainstate();\n+    const PackageMempoolAcceptResult validation_result = txns.size() > 1\n+        ? WITH_LOCK(cs_main, return ProcessNewPackage(chainstate, mempool, txns, /* test_accept */ true))\n+        : WITH_LOCK(cs_main, return PackageMempoolAcceptResult(txns[0]->GetWitnessHash(),\n+                             AcceptToMemoryPool(chainstate, mempool, txns[0], /* bypass_limits */ false,  /* test_accept */ true)));\n+\n+    UniValue rpc_result(UniValue::VARR);\n+\n+    for (auto tx : txns) {\n+        UniValue result_inner(UniValue::VOBJ);\n+        result_inner.pushKV(\"txid\", tx->GetHash().GetHex());\n+        result_inner.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n+        auto it = validation_result.m_tx_results.find(tx->GetWitnessHash());\n+        if (it == validation_result.m_tx_results.end()) {\n+            // Validation unfinished. Just return the txid and wtxid.\n+            rpc_result.push_back(result_inner);\n+            continue;\n         }\n-        result.push_back(std::move(result_0));\n-    } else {\n-        result_0.pushKV(\"allowed\", false);\n-        const TxValidationState state = accept_result.m_state;\n-        if (state.GetResult() == TxValidationResult::TX_MISSING_INPUTS) {\n-            result_0.pushKV(\"reject-reason\", \"missing-inputs\");\n+        const auto& accept_result = it->second;\n+        if (accept_result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n+            const CAmount fee = accept_result.m_base_fees.value();\n+            // Check that fee does not exceed maximum fee\n+            const int64_t virtual_size = GetVirtualTransactionSize(*tx);\n+            const CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n+            if (max_raw_tx_fee && fee > max_raw_tx_fee) {\n+                result_inner.pushKV(\"allowed\", false);\n+                result_inner.pushKV(\"reject-reason\", \"max-fee-exceeded\");",
      "path": "src/rpc/rawtransaction.cpp",
      "position": 149,
      "original_position": 130,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "9ce7b0f3850a0d69e81a68f18906a9d1aa4356fb",
      "in_reply_to_id": 619141139,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@mzumsande \r\n\r\nI think applying the maxfeerate on a combined package level makes sense once we start to verify mempool min feerate at the package level too ? For now, I think I would be even more liberal than John suggestion and only mark the fee excess on the fainting transaction, while documenting the case in RPC field.\r\n\r\nI thought about another solution which would be looping first on all transactions to verify if any of them violates the `max_raw_tx_fee` then mark `allowed`=false but it leads to the even more confusing result API of attaching a `max-fee-exceeded` as reject reason to feerate sane transactions...",
      "created_at": "2021-05-21T21:04:10Z",
      "updated_at": "2021-05-21T21:04:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r637231672",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/637231672"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1000,
      "original_line": 1000,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/637280317",
      "pull_request_review_id": 666022819,
      "id": 637280317,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNzI4MDMxNw==",
      "diff_hunk": "@@ -1105,6 +1211,31 @@ MempoolAcceptResult AcceptToMemoryPool(CChainState& active_chainstate, CTxMemPoo\n     return AcceptToMemoryPoolWithTime(Params(), pool, active_chainstate, tx, GetTime(), bypass_limits, test_accept);\n }\n \n+PackageMempoolAcceptResult ProcessNewPackage(CChainState& active_chainstate, CTxMemPool& pool,\n+                                                   const Package& package, bool test_accept)\n+{\n+    AssertLockHeld(cs_main);\n+    assert(test_accept); // Only allow package accept dry-runs (testmempoolaccept RPC).\n+    assert(!package.empty());\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+\n+    std::vector<COutPoint> coins_to_uncache;\n+    const CChainParams& chainparams = Params();\n+    MemPoolAccept::ATMPArgs args { chainparams, GetTime(), /* bypass_limits */ false, coins_to_uncache,\n+                                   test_accept, /* disallow_mempool_conflicts */ true };\n+    assert(std::addressof(::ChainstateActive()) == std::addressof(active_chainstate));\n+    const PackageMempoolAcceptResult result = MemPoolAccept(pool, active_chainstate).AcceptMultipleTransactions(package, args);\n+\n+    // Uncache coins pertaining to transactions that were not submitted to the mempool.\n+    // Ensure the cache is still within its size limits.\n+    for (const COutPoint& hashTx : coins_to_uncache) {\n+        active_chainstate.CoinsTip().Uncache(hashTx);\n+    }\n+    BlockValidationState state_dummy;\n+    active_chainstate.FlushStateToDisk(chainparams, state_dummy, FlushStateMode::PERIODIC);",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 268,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "930c6d3b12a6d3647dc47177c4d625956c77a77f",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "For now, any package coins is removed from the cache, so what this call to `FlushStateToDisk` is achieving ? If this motivated by anticipation of calling PNP for real mempool submissions, at least add a comment saying this is genuine ?",
      "created_at": "2021-05-21T22:48:48Z",
      "updated_at": "2021-05-21T23:10:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r637280317",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/637280317"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1235,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/637284743",
      "pull_request_review_id": 666022819,
      "id": 637284743,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNzI4NDc0Mw==",
      "diff_hunk": "@@ -932,62 +938,81 @@ static RPCHelpMan testmempoolaccept()\n         UniValueType(), // VNUM or VSTR, checked inside AmountFromValue()\n     });\n \n-    if (request.params[0].get_array().size() != 1) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array must contain exactly one raw transaction for now\");\n+    const UniValue raw_transactions = request.params[0].get_array();\n+    if (raw_transactions.size() < 1 || raw_transactions.size() > MAX_PACKAGE_COUNT) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER,\n+                           \"Array must contain between 1 and \" + ToString(MAX_PACKAGE_COUNT) + \" transactions.\");\n     }\n \n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_array()[0].get_str())) {\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n-    }\n-    CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-\n     const CFeeRate max_raw_tx_fee_rate = request.params[1].isNull() ?\n                                              DEFAULT_MAX_RAW_TX_FEE_RATE :\n                                              CFeeRate(AmountFromValue(request.params[1]));\n \n-    NodeContext& node = EnsureAnyNodeContext(request.context);\n+    std::vector<CTransactionRef> txns;\n+    for (const auto& rawtx : raw_transactions.getValues()) {\n+        CMutableTransaction mtx;\n+        if (!DecodeHexTx(mtx, rawtx.get_str())) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR,\n+                               \"TX decode failed: \" + rawtx.get_str() + \" Make sure the tx has at least one input.\");\n+        }\n+        txns.emplace_back(MakeTransactionRef(std::move(mtx)));\n+    }\n \n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n     CTxMemPool& mempool = EnsureMemPool(node);\n-    int64_t virtual_size = GetVirtualTransactionSize(*tx);\n-    CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n-\n-    UniValue result(UniValue::VARR);\n-    UniValue result_0(UniValue::VOBJ);\n-    result_0.pushKV(\"txid\", tx->GetHash().GetHex());\n-    result_0.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n-\n-    ChainstateManager& chainman = EnsureChainman(node);\n-    const MempoolAcceptResult accept_result = WITH_LOCK(cs_main, return AcceptToMemoryPool(chainman.ActiveChainstate(), mempool, std::move(tx),\n-                                                  false /* bypass_limits */, /* test_accept */ true));\n-\n-    // Only return the fee and vsize if the transaction would pass ATMP.\n-    // These can be used to calculate the feerate.\n-    if (accept_result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-        const CAmount fee = accept_result.m_base_fees.value();\n-        // Check that fee does not exceed maximum fee\n-        if (max_raw_tx_fee && fee > max_raw_tx_fee) {\n-            result_0.pushKV(\"allowed\", false);\n-            result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n-        } else {\n-            result_0.pushKV(\"allowed\", true);\n-            result_0.pushKV(\"vsize\", virtual_size);\n-            UniValue fees(UniValue::VOBJ);\n-            fees.pushKV(\"base\", ValueFromAmount(fee));\n-            result_0.pushKV(\"fees\", fees);\n+    CChainState& chainstate = EnsureChainman(node).ActiveChainstate();\n+    const PackageMempoolAcceptResult validation_result = [&] {\n+        LOCK(::cs_main);\n+        if (txns.size() > 1) return ProcessNewPackage(chainstate, mempool, txns, /* test_accept */ true);\n+        return PackageMempoolAcceptResult(txns[0]->GetWitnessHash(),\n+               AcceptToMemoryPool(chainstate, mempool, txns[0], /* bypass_limits */ false, /* test_accept*/ true));\n+    }();\n+\n+    UniValue rpc_result(UniValue::VARR);\n+\n+    for (const auto& tx : txns) {\n+        UniValue result_inner(UniValue::VOBJ);\n+        result_inner.pushKV(\"txid\", tx->GetHash().GetHex());\n+        result_inner.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n+        if (validation_result.m_state.GetResult() == PackageValidationResult::PCKG_POLICY) {\n+            result_inner.pushKV(\"package-error\", validation_result.m_state.GetRejectReason());\n         }\n-        result.push_back(std::move(result_0));\n-    } else {\n-        result_0.pushKV(\"allowed\", false);\n-        const TxValidationState state = accept_result.m_state;\n-        if (state.GetResult() == TxValidationResult::TX_MISSING_INPUTS) {\n-            result_0.pushKV(\"reject-reason\", \"missing-inputs\");\n+        auto it = validation_result.m_tx_results.find(tx->GetWitnessHash());\n+        if (it == validation_result.m_tx_results.end()) {",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 125,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "930c6d3b12a6d3647dc47177c4d625956c77a77f",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think it would be clearer to rename `validation_result` to `package_result` and `accept_result` to `transaction_result` ? Right now it's a bit confusing what those result are representing.",
      "created_at": "2021-05-21T22:55:08Z",
      "updated_at": "2021-05-21T23:10:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r637284743",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/637284743"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 981,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/637286417",
      "pull_request_review_id": 666022819,
      "id": 637286417,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNzI4NjQxNw==",
      "diff_hunk": "@@ -899,13 +902,16 @@ static RPCHelpMan testmempoolaccept()\n                 },\n                 RPCResult{\n                     RPCResult::Type::ARR, \"\", \"The result of the mempool acceptance test for each raw transaction in the input array.\\n\"\n-                        \"Length is exactly one for now.\",\n+                        \"Returns results for each transaction in the same order they were passed in.\\n\"\n+                        \"It is possible for transactions to not be fully validated ('allowed' unset) if an earlier transaction failed.\\n\",\n                     {\n                         {RPCResult::Type::OBJ, \"\", \"\",\n                         {\n                             {RPCResult::Type::STR_HEX, \"txid\", \"The transaction hash in hex\"},\n                             {RPCResult::Type::STR_HEX, \"wtxid\", \"The transaction witness hash in hex\"},\n-                            {RPCResult::Type::BOOL, \"allowed\", \"If the mempool allows this tx to be inserted\"},\n+                            {RPCResult::Type::STR, \"package-error\", \"Package validation error, if any (only possible if rawtxs had more than 1 transaction).\"},\n+                            {RPCResult::Type::BOOL, \"allowed\", \"Whether this tx would be accepted to the mempool and passes client-specified maxfeerate.\\n\"\n+                                                               \"If not present, the tx was not fully validated due to a failure in another tx in the list.\"},",
      "path": "src/rpc/rawtransaction.cpp",
      "position": 43,
      "original_position": 36,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "930c6d3b12a6d3647dc47177c4d625956c77a77f",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "What do you think about adding a note like \"If a package is submitted and one or more transactions are not passing the check, submission failure is only marked for them and do not propagate to the package\" ?\r\n\r\nTo solve the discussion here : https://github.com/bitcoin/bitcoin/pull/20833/files#r619141139",
      "created_at": "2021-05-21T22:57:40Z",
      "updated_at": "2021-05-21T23:10:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r637286417",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/637286417"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 916,
      "original_line": 916,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/638034617",
      "pull_request_review_id": 666851929,
      "id": 638034617,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzODAzNDYxNw==",
      "diff_hunk": "@@ -932,62 +938,81 @@ static RPCHelpMan testmempoolaccept()\n         UniValueType(), // VNUM or VSTR, checked inside AmountFromValue()\n     });\n \n-    if (request.params[0].get_array().size() != 1) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array must contain exactly one raw transaction for now\");\n+    const UniValue raw_transactions = request.params[0].get_array();\n+    if (raw_transactions.size() < 1 || raw_transactions.size() > MAX_PACKAGE_COUNT) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER,\n+                           \"Array must contain between 1 and \" + ToString(MAX_PACKAGE_COUNT) + \" transactions.\");\n     }\n \n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_array()[0].get_str())) {\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n-    }\n-    CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-\n     const CFeeRate max_raw_tx_fee_rate = request.params[1].isNull() ?\n                                              DEFAULT_MAX_RAW_TX_FEE_RATE :\n                                              CFeeRate(AmountFromValue(request.params[1]));\n \n-    NodeContext& node = EnsureAnyNodeContext(request.context);\n+    std::vector<CTransactionRef> txns;\n+    for (const auto& rawtx : raw_transactions.getValues()) {\n+        CMutableTransaction mtx;\n+        if (!DecodeHexTx(mtx, rawtx.get_str())) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR,\n+                               \"TX decode failed: \" + rawtx.get_str() + \" Make sure the tx has at least one input.\");\n+        }\n+        txns.emplace_back(MakeTransactionRef(std::move(mtx)));\n+    }\n \n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n     CTxMemPool& mempool = EnsureMemPool(node);\n-    int64_t virtual_size = GetVirtualTransactionSize(*tx);\n-    CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n-\n-    UniValue result(UniValue::VARR);\n-    UniValue result_0(UniValue::VOBJ);\n-    result_0.pushKV(\"txid\", tx->GetHash().GetHex());\n-    result_0.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n-\n-    ChainstateManager& chainman = EnsureChainman(node);\n-    const MempoolAcceptResult accept_result = WITH_LOCK(cs_main, return AcceptToMemoryPool(chainman.ActiveChainstate(), mempool, std::move(tx),\n-                                                  false /* bypass_limits */, /* test_accept */ true));\n-\n-    // Only return the fee and vsize if the transaction would pass ATMP.\n-    // These can be used to calculate the feerate.\n-    if (accept_result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-        const CAmount fee = accept_result.m_base_fees.value();\n-        // Check that fee does not exceed maximum fee\n-        if (max_raw_tx_fee && fee > max_raw_tx_fee) {\n-            result_0.pushKV(\"allowed\", false);\n-            result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n-        } else {\n-            result_0.pushKV(\"allowed\", true);\n-            result_0.pushKV(\"vsize\", virtual_size);\n-            UniValue fees(UniValue::VOBJ);\n-            fees.pushKV(\"base\", ValueFromAmount(fee));\n-            result_0.pushKV(\"fees\", fees);\n+    CChainState& chainstate = EnsureChainman(node).ActiveChainstate();\n+    const PackageMempoolAcceptResult validation_result = [&] {\n+        LOCK(::cs_main);\n+        if (txns.size() > 1) return ProcessNewPackage(chainstate, mempool, txns, /* test_accept */ true);\n+        return PackageMempoolAcceptResult(txns[0]->GetWitnessHash(),\n+               AcceptToMemoryPool(chainstate, mempool, txns[0], /* bypass_limits */ false, /* test_accept*/ true));\n+    }();\n+\n+    UniValue rpc_result(UniValue::VARR);\n+\n+    for (const auto& tx : txns) {\n+        UniValue result_inner(UniValue::VOBJ);\n+        result_inner.pushKV(\"txid\", tx->GetHash().GetHex());\n+        result_inner.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n+        if (validation_result.m_state.GetResult() == PackageValidationResult::PCKG_POLICY) {\n+            result_inner.pushKV(\"package-error\", validation_result.m_state.GetRejectReason());\n         }\n-        result.push_back(std::move(result_0));\n-    } else {\n-        result_0.pushKV(\"allowed\", false);\n-        const TxValidationState state = accept_result.m_state;\n-        if (state.GetResult() == TxValidationResult::TX_MISSING_INPUTS) {\n-            result_0.pushKV(\"reject-reason\", \"missing-inputs\");\n+        auto it = validation_result.m_tx_results.find(tx->GetWitnessHash());\n+        if (it == validation_result.m_tx_results.end()) {",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 125,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "930c6d3b12a6d3647dc47177c4d625956c77a77f",
      "in_reply_to_id": 637284743,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good idea, I agree that is more clear. I've renamed them.",
      "created_at": "2021-05-24T15:04:40Z",
      "updated_at": "2021-05-24T15:04:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r638034617",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/638034617"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 981,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/638034818",
      "pull_request_review_id": 666852208,
      "id": 638034818,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzODAzNDgxOA==",
      "diff_hunk": "@@ -1105,6 +1211,31 @@ MempoolAcceptResult AcceptToMemoryPool(CChainState& active_chainstate, CTxMemPoo\n     return AcceptToMemoryPoolWithTime(Params(), pool, active_chainstate, tx, GetTime(), bypass_limits, test_accept);\n }\n \n+PackageMempoolAcceptResult ProcessNewPackage(CChainState& active_chainstate, CTxMemPool& pool,\n+                                                   const Package& package, bool test_accept)\n+{\n+    AssertLockHeld(cs_main);\n+    assert(test_accept); // Only allow package accept dry-runs (testmempoolaccept RPC).\n+    assert(!package.empty());\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+\n+    std::vector<COutPoint> coins_to_uncache;\n+    const CChainParams& chainparams = Params();\n+    MemPoolAccept::ATMPArgs args { chainparams, GetTime(), /* bypass_limits */ false, coins_to_uncache,\n+                                   test_accept, /* disallow_mempool_conflicts */ true };\n+    assert(std::addressof(::ChainstateActive()) == std::addressof(active_chainstate));\n+    const PackageMempoolAcceptResult result = MemPoolAccept(pool, active_chainstate).AcceptMultipleTransactions(package, args);\n+\n+    // Uncache coins pertaining to transactions that were not submitted to the mempool.\n+    // Ensure the cache is still within its size limits.\n+    for (const COutPoint& hashTx : coins_to_uncache) {\n+        active_chainstate.CoinsTip().Uncache(hashTx);\n+    }\n+    BlockValidationState state_dummy;\n+    active_chainstate.FlushStateToDisk(chainparams, state_dummy, FlushStateMode::PERIODIC);",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 268,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "930c6d3b12a6d3647dc47177c4d625956c77a77f",
      "in_reply_to_id": 637280317,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Correct, the `FlushStateToDisk` will not write anything new, so only needed for real submission in the future. I've removed this line.",
      "created_at": "2021-05-24T15:04:59Z",
      "updated_at": "2021-05-24T15:04:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r638034818",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/638034818"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1235,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/638047866",
      "pull_request_review_id": 666870587,
      "id": 638047866,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzODA0Nzg2Ng==",
      "diff_hunk": "@@ -932,62 +937,74 @@ static RPCHelpMan testmempoolaccept()\n         UniValueType(), // VNUM or VSTR, checked inside AmountFromValue()\n     });\n \n-    if (request.params[0].get_array().size() != 1) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array must contain exactly one raw transaction for now\");\n+    if (request.params[0].get_array().size() > MAX_PACKAGE_COUNT) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array cannot contain more than \" + ToString(MAX_PACKAGE_COUNT) + \" transactions.\");\n     }\n \n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_array()[0].get_str())) {\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n-    }\n-    CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-\n+    const UniValue raw_transactions = request.params[0].get_array();\n     const CFeeRate max_raw_tx_fee_rate = request.params[1].isNull() ?\n                                              DEFAULT_MAX_RAW_TX_FEE_RATE :\n                                              CFeeRate(AmountFromValue(request.params[1]));\n \n-    NodeContext& node = EnsureAnyNodeContext(request.context);\n+    std::vector<CTransactionRef> txns;\n+    for (const auto& rawtx : raw_transactions.getValues()) {\n+        CMutableTransaction mtx;\n+        if (!DecodeHexTx(mtx, rawtx.get_str())) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n+        }\n+        txns.emplace_back(MakeTransactionRef(std::move(mtx)));\n+    }\n \n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n     CTxMemPool& mempool = EnsureMemPool(node);\n-    int64_t virtual_size = GetVirtualTransactionSize(*tx);\n-    CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n-\n-    UniValue result(UniValue::VARR);\n-    UniValue result_0(UniValue::VOBJ);\n-    result_0.pushKV(\"txid\", tx->GetHash().GetHex());\n-    result_0.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n-\n-    ChainstateManager& chainman = EnsureChainman(node);\n-    const MempoolAcceptResult accept_result = WITH_LOCK(cs_main, return AcceptToMemoryPool(chainman.ActiveChainstate(), mempool, std::move(tx),\n-                                                  false /* bypass_limits */, /* test_accept */ true));\n-\n-    // Only return the fee and vsize if the transaction would pass ATMP.\n-    // These can be used to calculate the feerate.\n-    if (accept_result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-        const CAmount fee = accept_result.m_base_fees.value();\n-        // Check that fee does not exceed maximum fee\n-        if (max_raw_tx_fee && fee > max_raw_tx_fee) {\n-            result_0.pushKV(\"allowed\", false);\n-            result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n-        } else {\n-            result_0.pushKV(\"allowed\", true);\n-            result_0.pushKV(\"vsize\", virtual_size);\n-            UniValue fees(UniValue::VOBJ);\n-            fees.pushKV(\"base\", ValueFromAmount(fee));\n-            result_0.pushKV(\"fees\", fees);\n+    CChainState& chainstate = EnsureChainman(node).ActiveChainstate();\n+    const PackageMempoolAcceptResult validation_result = txns.size() > 1\n+        ? WITH_LOCK(cs_main, return ProcessNewPackage(chainstate, mempool, txns, /* test_accept */ true))\n+        : WITH_LOCK(cs_main, return PackageMempoolAcceptResult(txns[0]->GetWitnessHash(),\n+                             AcceptToMemoryPool(chainstate, mempool, txns[0], /* bypass_limits */ false,  /* test_accept */ true)));\n+\n+    UniValue rpc_result(UniValue::VARR);\n+\n+    for (auto tx : txns) {\n+        UniValue result_inner(UniValue::VOBJ);\n+        result_inner.pushKV(\"txid\", tx->GetHash().GetHex());\n+        result_inner.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n+        auto it = validation_result.m_tx_results.find(tx->GetWitnessHash());\n+        if (it == validation_result.m_tx_results.end()) {\n+            // Validation unfinished. Just return the txid and wtxid.\n+            rpc_result.push_back(result_inner);\n+            continue;\n         }\n-        result.push_back(std::move(result_0));\n-    } else {\n-        result_0.pushKV(\"allowed\", false);\n-        const TxValidationState state = accept_result.m_state;\n-        if (state.GetResult() == TxValidationResult::TX_MISSING_INPUTS) {\n-            result_0.pushKV(\"reject-reason\", \"missing-inputs\");\n+        const auto& accept_result = it->second;\n+        if (accept_result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n+            const CAmount fee = accept_result.m_base_fees.value();\n+            // Check that fee does not exceed maximum fee\n+            const int64_t virtual_size = GetVirtualTransactionSize(*tx);\n+            const CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n+            if (max_raw_tx_fee && fee > max_raw_tx_fee) {\n+                result_inner.pushKV(\"allowed\", false);\n+                result_inner.pushKV(\"reject-reason\", \"max-fee-exceeded\");",
      "path": "src/rpc/rawtransaction.cpp",
      "position": 149,
      "original_position": 130,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "9ce7b0f3850a0d69e81a68f18906a9d1aa4356fb",
      "in_reply_to_id": 619141139,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think this has been addressed - see https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-847118121",
      "created_at": "2021-05-24T15:23:22Z",
      "updated_at": "2021-05-24T15:23:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r638047866",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/638047866"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1000,
      "original_line": 1000,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/638049176",
      "pull_request_review_id": 666872220,
      "id": 638049176,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzODA0OTE3Ng==",
      "diff_hunk": "@@ -899,13 +902,16 @@ static RPCHelpMan testmempoolaccept()\n                 },\n                 RPCResult{\n                     RPCResult::Type::ARR, \"\", \"The result of the mempool acceptance test for each raw transaction in the input array.\\n\"\n-                        \"Length is exactly one for now.\",\n+                        \"Returns results for each transaction in the same order they were passed in.\\n\"\n+                        \"It is possible for transactions to not be fully validated ('allowed' unset) if an earlier transaction failed.\\n\",\n                     {\n                         {RPCResult::Type::OBJ, \"\", \"\",\n                         {\n                             {RPCResult::Type::STR_HEX, \"txid\", \"The transaction hash in hex\"},\n                             {RPCResult::Type::STR_HEX, \"wtxid\", \"The transaction witness hash in hex\"},\n-                            {RPCResult::Type::BOOL, \"allowed\", \"If the mempool allows this tx to be inserted\"},\n+                            {RPCResult::Type::STR, \"package-error\", \"Package validation error, if any (only possible if rawtxs had more than 1 transaction).\"},\n+                            {RPCResult::Type::BOOL, \"allowed\", \"Whether this tx would be accepted to the mempool and passes client-specified maxfeerate.\\n\"\n+                                                               \"If not present, the tx was not fully validated due to a failure in another tx in the list.\"},",
      "path": "src/rpc/rawtransaction.cpp",
      "position": 43,
      "original_position": 36,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "930c6d3b12a6d3647dc47177c4d625956c77a77f",
      "in_reply_to_id": 637286417,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I've changed the maxfeerate API a little bit and added \"If one transaction fails, other transactions may not be fully validated (the 'allowed' key will be blank).\" to the RPC description.",
      "created_at": "2021-05-24T15:25:09Z",
      "updated_at": "2021-05-24T15:25:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r638049176",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/638049176"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 916,
      "original_line": 916,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639674347",
      "pull_request_review_id": 668950511,
      "id": 639674347,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzOTY3NDM0Nw==",
      "diff_hunk": "@@ -245,18 +247,13 @@ bool TestLockPointValidity(CChain& active_chain, const LockPoints* lp)\n     return true;\n }\n \n-bool CheckSequenceLocks(CChainState& active_chainstate,\n-                        const CTxMemPool& pool,\n+bool CheckSequenceLocks(CBlockIndex* tip,\n+                        const CCoinsView& coins_view,\n                         const CTransaction& tx,\n                         int flags,\n                         LockPoints* lp,\n                         bool useExistingLockPoints)\n {\n-    AssertLockHeld(cs_main);\n-    AssertLockHeld(pool.cs);\n-    assert(std::addressof(::ChainstateActive()) == std::addressof(active_chainstate));\n-\n-    CBlockIndex* tip = active_chainstate.m_chain.Tip();\n     assert(tip != nullptr);",
      "path": "src/validation.cpp",
      "position": 34,
      "original_position": 34,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "(Doesn't necessarily need to be in this PR - can be done in a follow-up) it'd be nice to make `tip` a reference, to better communicate that this function can't be called without a `CBlockIndex`.",
      "created_at": "2021-05-26T12:25:01Z",
      "updated_at": "2021-05-26T16:03:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r639674347",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639674347"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 257,
      "original_line": 257,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639675252",
      "pull_request_review_id": 668950511,
      "id": 639675252,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzOTY3NTI1Mg==",
      "diff_hunk": "@@ -515,7 +515,9 @@ void CTxMemPool::removeForReorg(CChainState& active_chainstate, int flags)\n         LockPoints lp = it->GetLockPoints();\n         assert(std::addressof(::ChainstateActive()) == std::addressof(active_chainstate));\n         bool validLP =  TestLockPointValidity(active_chainstate.m_chain, &lp);\n-        if (!CheckFinalTx(active_chainstate.m_chain.Tip(), tx, flags) || !CheckSequenceLocks(active_chainstate, *this, tx, flags, &lp, validLP)) {\n+        CCoinsViewMemPool viewMempool(&active_chainstate.CoinsTip(), *this);",
      "path": "src/txmempool.cpp",
      "position": 5,
      "original_position": 5,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n        CCoinsViewMemPool view_mempool(&active_chainstate.CoinsTip(), *this);\r\n```",
      "created_at": "2021-05-26T12:26:18Z",
      "updated_at": "2021-05-26T16:03:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r639675252",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639675252"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 518,
      "original_line": 518,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639676120",
      "pull_request_review_id": 668950511,
      "id": 639676120,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzOTY3NjEyMA==",
      "diff_hunk": "@@ -28,7 +28,8 @@ struct MinerTestingSetup : public TestingSetup {\n     void TestPackageSelection(const CChainParams& chainparams, const CScript& scriptPubKey, const std::vector<CTransactionRef>& txFirst) EXCLUSIVE_LOCKS_REQUIRED(::cs_main, m_node.mempool->cs);\n     bool TestSequenceLocks(const CTransaction& tx, int flags) EXCLUSIVE_LOCKS_REQUIRED(::cs_main, m_node.mempool->cs)\n     {\n-        return CheckSequenceLocks(::ChainstateActive(), *m_node.mempool, tx, flags);\n+        CCoinsViewMemPool viewMempool(&m_node.chainman->ActiveChainstate().CoinsTip(), *m_node.mempool);",
      "path": "src/test/miner_tests.cpp",
      "position": 5,
      "original_position": 5,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n        CCoinsViewMemPool view_mempool(&m_node.chainman->ActiveChainstate().CoinsTip(), *m_node.mempool);\r\n```",
      "created_at": "2021-05-26T12:27:33Z",
      "updated_at": "2021-05-26T16:03:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r639676120",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639676120"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 31,
      "original_line": 31,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639686271",
      "pull_request_review_id": 668950511,
      "id": 639686271,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzOTY4NjI3MQ==",
      "diff_hunk": "@@ -494,11 +585,20 @@ class MemPoolAccept\n          */\n         std::vector<COutPoint>& m_coins_to_uncache;\n         const bool m_test_accept;\n+        /** Disable BIP125 RBFing; disallow all conflicts with mempool transactions. */",
      "path": "src/validation.cpp",
      "position": 57,
      "original_position": 158,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "8d95509150111b4fd77d2232f9c7d096b66abd23",
      "in_reply_to_id": 621334647,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Having a boolean for `disallow_thing` where the double negative `disallow_thing == false` means \"thing is allowed\" is probably not as clear as a `allow_thing` boolean where `allow_thing == true` means \"thing is allowed\".\r\n\r\nI also agree that \"replacement\" is probably better than \"conflicts\" here.",
      "created_at": "2021-05-26T12:41:12Z",
      "updated_at": "2021-05-26T16:03:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r639686271",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639686271"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 475,
      "original_line": 475,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639693860",
      "pull_request_review_id": 668950511,
      "id": 639693860,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzOTY5Mzg2MA==",
      "diff_hunk": "@@ -638,7 +642,7 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n                         break;\n                     }\n                 }\n-                if (fReplacementOptOut) {\n+                if (fReplacementOptOut || args.disallow_mempool_conflicts) {",
      "path": "src/validation.cpp",
      "position": 79,
      "original_position": 79,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is equivalent, but I think separating out these reasons is clearer:\r\n\r\n```diff\r\ndiff --git a/src/validation.cpp b/src/validation.cpp\r\nindex ebe88ba04d..8aff63c4a6 100644\r\n--- a/src/validation.cpp\r\n+++ b/src/validation.cpp\r\n@@ -619,6 +619,11 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\r\n     {\r\n         const CTransaction* ptxConflicting = m_pool.GetConflictTx(txin.prevout);\r\n         if (ptxConflicting) {\r\n+            if (args.disallow_mempool_conflicts) {\r\n+                // Transaction conflicts with mempool tx, but we're not allowing replacement\r\n+                return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"txn-mempool-conflict\");\r\n+            }\r\n+\r\n             if (!setConflicts.count(ptxConflicting->GetHash()))\r\n             {\r\n                 // Allow opt-out of transaction replacement by setting\r\n@@ -642,7 +647,7 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\r\n                         break;\r\n                     }\r\n                 }\r\n-                if (fReplacementOptOut || args.disallow_mempool_conflicts) {\r\n+                if (fReplacementOptOut) {\r\n                     return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"txn-mempool-conflict\");\r\n                 }\r\n \r\n```\r\n\r\nLogically, we want to abort mempool acceptance as soon as we encounter a conflict in the mempool if `disallow_mempool_conflicts` is set to true. Lumping that together with the BIP125 nSequence logic is unnecessary.",
      "created_at": "2021-05-26T12:50:42Z",
      "updated_at": "2021-05-26T16:03:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r639693860",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639693860"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 645,
      "original_line": 645,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639701967",
      "pull_request_review_id": 668950511,
      "id": 639701967,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzOTcwMTk2Nw==",
      "diff_hunk": "@@ -1105,6 +1211,29 @@ MempoolAcceptResult AcceptToMemoryPool(CChainState& active_chainstate, CTxMemPoo\n     return AcceptToMemoryPoolWithTime(Params(), pool, active_chainstate, tx, GetTime(), bypass_limits, test_accept);\n }\n \n+PackageMempoolAcceptResult ProcessNewPackage(CChainState& active_chainstate, CTxMemPool& pool,\n+                                                   const Package& package, bool test_accept)\n+{\n+    AssertLockHeld(cs_main);\n+    assert(test_accept); // Only allow package accept dry-runs (testmempoolaccept RPC).\n+    assert(!package.empty());\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+\n+    std::vector<COutPoint> coins_to_uncache;\n+    const CChainParams& chainparams = Params();\n+    MemPoolAccept::ATMPArgs args { chainparams, GetTime(), /* bypass_limits */ false, coins_to_uncache,\n+                                   test_accept, /* disallow_mempool_conflicts */ true };\n+    assert(std::addressof(::ChainstateActive()) == std::addressof(active_chainstate));",
      "path": "src/validation.cpp",
      "position": 259,
      "original_position": 259,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think you need this. These `addressof()` calls are going to be removed in a future bundle PR. Not adding this line will avoid conflicting with that PR.",
      "created_at": "2021-05-26T13:00:30Z",
      "updated_at": "2021-05-26T16:03:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r639701967",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639701967"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1226,
      "original_line": 1226,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639703882",
      "pull_request_review_id": 668950511,
      "id": 639703882,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzOTcwMzg4Mg==",
      "diff_hunk": "@@ -1105,6 +1211,29 @@ MempoolAcceptResult AcceptToMemoryPool(CChainState& active_chainstate, CTxMemPoo\n     return AcceptToMemoryPoolWithTime(Params(), pool, active_chainstate, tx, GetTime(), bypass_limits, test_accept);\n }\n \n+PackageMempoolAcceptResult ProcessNewPackage(CChainState& active_chainstate, CTxMemPool& pool,\n+                                                   const Package& package, bool test_accept)\n+{\n+    AssertLockHeld(cs_main);\n+    assert(test_accept); // Only allow package accept dry-runs (testmempoolaccept RPC).\n+    assert(!package.empty());\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+\n+    std::vector<COutPoint> coins_to_uncache;\n+    const CChainParams& chainparams = Params();\n+    MemPoolAccept::ATMPArgs args { chainparams, GetTime(), /* bypass_limits */ false, coins_to_uncache,\n+                                   test_accept, /* disallow_mempool_conflicts */ true };\n+    assert(std::addressof(::ChainstateActive()) == std::addressof(active_chainstate));\n+    const PackageMempoolAcceptResult result = MemPoolAccept(pool, active_chainstate).AcceptMultipleTransactions(package, args);\n+\n+    // Uncache coins pertaining to transactions that were not submitted to the mempool.\n+    // Ensure the cache is still within its size limits.",
      "path": "src/validation.cpp",
      "position": 263,
      "original_position": 263,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think the \"Ensure the cache is still within its size limits\" is relevant here (I think you copied it from the `AcceptToMemoryPoolWithTime()` function, which _does_ call `FlushStateToDisk()` to ensure the cache is still within its size limits.",
      "created_at": "2021-05-26T13:02:53Z",
      "updated_at": "2021-05-26T16:03:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r639703882",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639703882"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1230,
      "original_line": 1230,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639713460",
      "pull_request_review_id": 668950511,
      "id": 639713460,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzOTcxMzQ2MA==",
      "diff_hunk": "@@ -1045,28 +1049,129 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n \n     Workspace ws(ptx);\n \n-    if (!PreChecks(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!PreChecks(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n-    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Tx was accepted, but not added\n     if (args.m_test_accept) {\n-        return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+        return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n     }\n \n-    if (!Finalize(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!Finalize(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+    return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+}\n+\n+PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::vector<CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    PackageValidationState package_state;\n+    const unsigned int package_count = txns.size();\n+\n+    // These context-free package limits can be checked before taking the mempool lock.\n+    if (package_count > MAX_PACKAGE_COUNT) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-too-many-transactions\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    const int64_t total_size = std::accumulate(txns.cbegin(), txns.cend(), 0,\n+                               [](int64_t sum, const auto& tx) { return sum + GetVirtualTransactionSize(*tx); });\n+    // If the package only contains 1 tx, it's better to report the policy violation on individual tx size.\n+    if (package_count > 1 && total_size > MAX_PACKAGE_SIZE * 1000) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-too-large\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    // Construct workspaces and check package policies.\n+    std::vector<Workspace> workspaces{};\n+    workspaces.reserve(package_count);\n+    {\n+        std::unordered_set<uint256, SaltedTxidHasher> later_txids;\n+        std::transform(txns.cbegin(), txns.cend(), std::inserter(later_txids, later_txids.end()),\n+                       [](const auto& tx) { return tx->GetHash(); });\n+        // Require the package to be sorted in order of dependency, i.e. parents appear before children.\n+        // An unsorted package will fail anyway on missing-inputs, but it's better to quit earlier and\n+        // fail on something less ambiguous (missing-inputs could also be an orphan or trying to\n+        // spend nonexistent coins).\n+        for (const auto& tx : txns) {\n+            for (const auto& input : tx->vin) {\n+                if (later_txids.find(input.prevout.hash) != later_txids.end()) {\n+                    // The parent is a subsequent transaction in the package.\n+                    package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-sorted\");\n+                    return PackageMempoolAcceptResult(package_state, {});\n+                }\n+            }\n+            later_txids.erase(tx->GetHash());\n+            workspaces.emplace_back(Workspace(tx));\n+        }\n+    }\n+    std::map<const uint256, const MempoolAcceptResult> results;\n+    {\n+        // Don't allow any conflicting transactions, i.e. spending the same inputs, in a package.\n+        std::unordered_set<COutPoint, SaltedOutpointHasher> inputs_seen;\n+        for (const auto& tx : txns) {\n+            for (const auto& input : tx->vin) {\n+                if (inputs_seen.find(input.prevout) != inputs_seen.end()) {\n+                    // This input is also present in another tx in the package.\n+                    package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"conflict-in-package\");\n+                    return PackageMempoolAcceptResult(package_state, {});\n+                }\n+            }\n+            // Batch-add all the inputs for a tx at a time. If we added them 1 at a time, we could\n+            // catch duplicate inputs within a single tx.  This is a more severe, consensus error,\n+            // and we want to report that from CheckTransaction instead.\n+            std::transform(tx->vin.cbegin(), tx->vin.cend(), std::inserter(inputs_seen, inputs_seen.end()),\n+                           [](const auto& input) { return input.prevout; });\n+        }\n+    }\n+\n+    LOCK(m_pool.cs);\n+\n+    // Do all PreChecks first and fail fast to avoid running expensive script checks when unnecessary.\n+    for (Workspace& ws : workspaces) {\n+        if (!PreChecks(args, ws)) {\n+            package_state.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n+            // Exit early to avoid doing pointless work. Update the failed tx result; the rest are unfinished.\n+            results.emplace(ws.m_ptx->GetWitnessHash(), MempoolAcceptResult::Failure(ws.m_state));\n+            return PackageMempoolAcceptResult(package_state, std::move(results));\n+        }\n+        // Make the coins created by this transaction available for subsequent transactions in the\n+        // package to spend. Since we already checked conflicts in the package and RBFs are\n+        // impossible, we don't need to track the coins spent. Note that this logic will need to be",
      "path": "src/validation.cpp",
      "position": 207,
      "original_position": 207,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n        // package to spend. Since we already checked conflicts in the package and replacements are\r\n        // disallowed, we don't need to track the coins spent. Note that this logic will need to be\r\n```",
      "created_at": "2021-05-26T13:14:34Z",
      "updated_at": "2021-05-26T16:03:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r639713460",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639713460"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": 1151,
      "original_start_line": 1151,
      "start_side": "RIGHT",
      "line": 1152,
      "original_line": 1152,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639738249",
      "pull_request_review_id": 668950511,
      "id": 639738249,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzOTczODI0OQ==",
      "diff_hunk": "@@ -1045,28 +1049,129 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n \n     Workspace ws(ptx);\n \n-    if (!PreChecks(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!PreChecks(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n-    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Tx was accepted, but not added\n     if (args.m_test_accept) {\n-        return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+        return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n     }\n \n-    if (!Finalize(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!Finalize(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+    return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+}\n+\n+PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::vector<CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    PackageValidationState package_state;\n+    const unsigned int package_count = txns.size();\n+\n+    // These context-free package limits can be checked before taking the mempool lock.\n+    if (package_count > MAX_PACKAGE_COUNT) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-too-many-transactions\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    const int64_t total_size = std::accumulate(txns.cbegin(), txns.cend(), 0,\n+                               [](int64_t sum, const auto& tx) { return sum + GetVirtualTransactionSize(*tx); });\n+    // If the package only contains 1 tx, it's better to report the policy violation on individual tx size.\n+    if (package_count > 1 && total_size > MAX_PACKAGE_SIZE * 1000) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-too-large\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    // Construct workspaces and check package policies.\n+    std::vector<Workspace> workspaces{};\n+    workspaces.reserve(package_count);\n+    {\n+        std::unordered_set<uint256, SaltedTxidHasher> later_txids;\n+        std::transform(txns.cbegin(), txns.cend(), std::inserter(later_txids, later_txids.end()),\n+                       [](const auto& tx) { return tx->GetHash(); });\n+        // Require the package to be sorted in order of dependency, i.e. parents appear before children.\n+        // An unsorted package will fail anyway on missing-inputs, but it's better to quit earlier and\n+        // fail on something less ambiguous (missing-inputs could also be an orphan or trying to\n+        // spend nonexistent coins).\n+        for (const auto& tx : txns) {\n+            for (const auto& input : tx->vin) {\n+                if (later_txids.find(input.prevout.hash) != later_txids.end()) {\n+                    // The parent is a subsequent transaction in the package.\n+                    package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-sorted\");\n+                    return PackageMempoolAcceptResult(package_state, {});\n+                }\n+            }\n+            later_txids.erase(tx->GetHash());\n+            workspaces.emplace_back(Workspace(tx));\n+        }\n+    }\n+    std::map<const uint256, const MempoolAcceptResult> results;\n+    {\n+        // Don't allow any conflicting transactions, i.e. spending the same inputs, in a package.\n+        std::unordered_set<COutPoint, SaltedOutpointHasher> inputs_seen;\n+        for (const auto& tx : txns) {\n+            for (const auto& input : tx->vin) {\n+                if (inputs_seen.find(input.prevout) != inputs_seen.end()) {\n+                    // This input is also present in another tx in the package.\n+                    package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"conflict-in-package\");\n+                    return PackageMempoolAcceptResult(package_state, {});\n+                }\n+            }\n+            // Batch-add all the inputs for a tx at a time. If we added them 1 at a time, we could\n+            // catch duplicate inputs within a single tx.  This is a more severe, consensus error,\n+            // and we want to report that from CheckTransaction instead.\n+            std::transform(tx->vin.cbegin(), tx->vin.cend(), std::inserter(inputs_seen, inputs_seen.end()),\n+                           [](const auto& input) { return input.prevout; });\n+        }\n+    }\n+\n+    LOCK(m_pool.cs);\n+\n+    // Do all PreChecks first and fail fast to avoid running expensive script checks when unnecessary.\n+    for (Workspace& ws : workspaces) {\n+        if (!PreChecks(args, ws)) {\n+            package_state.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n+            // Exit early to avoid doing pointless work. Update the failed tx result; the rest are unfinished.\n+            results.emplace(ws.m_ptx->GetWitnessHash(), MempoolAcceptResult::Failure(ws.m_state));\n+            return PackageMempoolAcceptResult(package_state, std::move(results));\n+        }\n+        // Make the coins created by this transaction available for subsequent transactions in the\n+        // package to spend. Since we already checked conflicts in the package and RBFs are\n+        // impossible, we don't need to track the coins spent. Note that this logic will need to be\n+        // updated if RBFs in packages are allowed in the future.\n+        assert(args.disallow_mempool_conflicts);\n+        m_viewmempool.PackageAddTransaction(ws.m_ptx);\n+    }\n+\n+    for (Workspace& ws : workspaces) {\n+        PrecomputedTransactionData txdata;\n+        if (!PolicyScriptChecks(args, ws, txdata)) {\n+            // Exit early to avoid doing pointless work. Update the failed tx result; the rest are unfinished.\n+            package_state.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n+            results.emplace(ws.m_ptx->GetWitnessHash(), MempoolAcceptResult::Failure(ws.m_state));\n+            return PackageMempoolAcceptResult(package_state, std::move(results));\n+        }\n+        if (args.m_test_accept) {",
      "path": "src/validation.cpp",
      "position": 221,
      "original_position": 221,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This if conditional seems unnecessary for this PR. Perhaps just assert that `args.m_test_accept` is true. A future PR can make the logic here conditional.",
      "created_at": "2021-05-26T13:42:15Z",
      "updated_at": "2021-05-26T16:03:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r639738249",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639738249"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1166,
      "original_line": 1166,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639750478",
      "pull_request_review_id": 668950511,
      "id": 639750478,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzOTc1MDQ3OA==",
      "diff_hunk": "@@ -0,0 +1,34 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_PACKAGES_H\n+#define BITCOIN_POLICY_PACKAGES_H\n+\n+#include <consensus/validation.h>\n+#include <primitives/transaction.h>\n+\n+#include <vector>\n+\n+/** Default maximum number of transactions in a package. */",
      "path": "src/policy/packages.h",
      "position": 13,
      "original_position": 13,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Perhaps static assert that these are >= the mempool default ancestor/descendant limits, and that `MAX_PACKAGE_SIZE * 4` is >= `MAX_STANDARD_TX_WEIGHT`",
      "created_at": "2021-05-26T13:54:59Z",
      "updated_at": "2021-05-26T16:03:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r639750478",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639750478"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 13,
      "original_line": 13,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639764754",
      "pull_request_review_id": 668950511,
      "id": 639764754,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzOTc2NDc1NA==",
      "diff_hunk": "@@ -885,8 +886,11 @@ static RPCHelpMan sendrawtransaction()\n static RPCHelpMan testmempoolaccept()\n {\n     return RPCHelpMan{\"testmempoolaccept\",\n-                \"\\nReturns result of mempool acceptance tests indicating if raw transaction (serialized, hex-encoded) would be accepted by mempool.\\n\"\n-                \"\\nThis checks if the transaction violates the consensus or policy rules.\\n\"\n+                \"\\nReturns result of mempool acceptance tests indicating if raw transaction(s) (serialized, hex-encoded) would be accepted by mempool.\\n\"\n+                \"\\nIf multiple transactions are passed in, parents must come before children and package policies apply: the transactions cannot conflict with any mempool transactions or each other.\\n\"\n+                \"\\nIf one transaction fails, other transactions may not be fully validated (the 'allowed' key will be blank).\\n\"\n+                \"\\nThe maximum number of transactions allowed is 25 (MAX_PACKAGE_COUNT)\\n\"",
      "path": "src/rpc/rawtransaction.cpp",
      "position": 17,
      "original_position": 17,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Perhaps use `ToString(MAX_PACKAGE_COUNT)` here?",
      "created_at": "2021-05-26T14:10:17Z",
      "updated_at": "2021-05-26T16:03:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r639764754",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639764754"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 892,
      "original_line": 892,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639799129",
      "pull_request_review_id": 668950511,
      "id": 639799129,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzOTc5OTEyOQ==",
      "diff_hunk": "@@ -932,62 +940,86 @@ static RPCHelpMan testmempoolaccept()\n         UniValueType(), // VNUM or VSTR, checked inside AmountFromValue()\n     });\n \n-    if (request.params[0].get_array().size() != 1) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array must contain exactly one raw transaction for now\");\n-    }\n-\n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_array()[0].get_str())) {\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n+    const UniValue raw_transactions = request.params[0].get_array();\n+    if (raw_transactions.size() < 1 || raw_transactions.size() > MAX_PACKAGE_COUNT) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER,\n+                           \"Array must contain between 1 and \" + ToString(MAX_PACKAGE_COUNT) + \" transactions.\");\n     }\n-    CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n \n     const CFeeRate max_raw_tx_fee_rate = request.params[1].isNull() ?\n                                              DEFAULT_MAX_RAW_TX_FEE_RATE :\n                                              CFeeRate(AmountFromValue(request.params[1]));\n \n-    NodeContext& node = EnsureAnyNodeContext(request.context);\n+    std::vector<CTransactionRef> txns;",
      "path": "src/rpc/rawtransaction.cpp",
      "position": 70,
      "original_position": 70,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Perhaps reserve `raw_transactions.size()` here to avoid reallocations as you emplace the `CTransactionRef` objects into this vector.",
      "created_at": "2021-05-26T14:46:01Z",
      "updated_at": "2021-05-26T16:03:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r639799129",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639799129"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 953,
      "original_line": 953,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639866061",
      "pull_request_review_id": 668950511,
      "id": 639866061,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzOTg2NjA2MQ==",
      "diff_hunk": "@@ -1045,28 +1049,129 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n \n     Workspace ws(ptx);\n \n-    if (!PreChecks(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!PreChecks(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n-    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Tx was accepted, but not added\n     if (args.m_test_accept) {\n-        return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+        return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n     }\n \n-    if (!Finalize(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!Finalize(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+    return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+}\n+\n+PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::vector<CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    PackageValidationState package_state;\n+    const unsigned int package_count = txns.size();\n+\n+    // These context-free package limits can be checked before taking the mempool lock.\n+    if (package_count > MAX_PACKAGE_COUNT) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-too-many-transactions\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    const int64_t total_size = std::accumulate(txns.cbegin(), txns.cend(), 0,\n+                               [](int64_t sum, const auto& tx) { return sum + GetVirtualTransactionSize(*tx); });\n+    // If the package only contains 1 tx, it's better to report the policy violation on individual tx size.\n+    if (package_count > 1 && total_size > MAX_PACKAGE_SIZE * 1000) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-too-large\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    // Construct workspaces and check package policies.\n+    std::vector<Workspace> workspaces{};\n+    workspaces.reserve(package_count);\n+    {\n+        std::unordered_set<uint256, SaltedTxidHasher> later_txids;\n+        std::transform(txns.cbegin(), txns.cend(), std::inserter(later_txids, later_txids.end()),",
      "path": "src/validation.cpp",
      "position": 157,
      "original_position": 157,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Can you use `std::back_inserter()` here?",
      "created_at": "2021-05-26T15:51:42Z",
      "updated_at": "2021-05-26T16:03:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r639866061",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639866061"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1102,
      "original_line": 1102,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639888077",
      "pull_request_review_id": 669238424,
      "id": 639888077,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzOTg4ODA3Nw==",
      "diff_hunk": "@@ -1045,28 +1049,129 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n \n     Workspace ws(ptx);\n \n-    if (!PreChecks(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!PreChecks(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n-    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Tx was accepted, but not added\n     if (args.m_test_accept) {\n-        return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+        return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n     }\n \n-    if (!Finalize(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!Finalize(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+    return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+}\n+\n+PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::vector<CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    PackageValidationState package_state;\n+    const unsigned int package_count = txns.size();\n+\n+    // These context-free package limits can be checked before taking the mempool lock.\n+    if (package_count > MAX_PACKAGE_COUNT) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-too-many-transactions\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    const int64_t total_size = std::accumulate(txns.cbegin(), txns.cend(), 0,\n+                               [](int64_t sum, const auto& tx) { return sum + GetVirtualTransactionSize(*tx); });\n+    // If the package only contains 1 tx, it's better to report the policy violation on individual tx size.\n+    if (package_count > 1 && total_size > MAX_PACKAGE_SIZE * 1000) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-too-large\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    // Construct workspaces and check package policies.\n+    std::vector<Workspace> workspaces{};\n+    workspaces.reserve(package_count);\n+    {\n+        std::unordered_set<uint256, SaltedTxidHasher> later_txids;\n+        std::transform(txns.cbegin(), txns.cend(), std::inserter(later_txids, later_txids.end()),",
      "path": "src/validation.cpp",
      "position": 157,
      "original_position": 157,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "in_reply_to_id": 639866061,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "IIRC no, because it's an unordered set.",
      "created_at": "2021-05-26T16:18:49Z",
      "updated_at": "2021-05-26T16:18:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r639888077",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639888077"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1102,
      "original_line": 1102,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639915142",
      "pull_request_review_id": 669272712,
      "id": 639915142,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzOTkxNTE0Mg==",
      "diff_hunk": "@@ -1045,28 +1049,129 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n \n     Workspace ws(ptx);\n \n-    if (!PreChecks(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!PreChecks(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n-    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Tx was accepted, but not added\n     if (args.m_test_accept) {\n-        return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+        return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n     }\n \n-    if (!Finalize(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!Finalize(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+    return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+}\n+\n+PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::vector<CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    PackageValidationState package_state;\n+    const unsigned int package_count = txns.size();\n+\n+    // These context-free package limits can be checked before taking the mempool lock.\n+    if (package_count > MAX_PACKAGE_COUNT) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-too-many-transactions\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    const int64_t total_size = std::accumulate(txns.cbegin(), txns.cend(), 0,\n+                               [](int64_t sum, const auto& tx) { return sum + GetVirtualTransactionSize(*tx); });\n+    // If the package only contains 1 tx, it's better to report the policy violation on individual tx size.\n+    if (package_count > 1 && total_size > MAX_PACKAGE_SIZE * 1000) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-too-large\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    // Construct workspaces and check package policies.\n+    std::vector<Workspace> workspaces{};\n+    workspaces.reserve(package_count);\n+    {\n+        std::unordered_set<uint256, SaltedTxidHasher> later_txids;\n+        std::transform(txns.cbegin(), txns.cend(), std::inserter(later_txids, later_txids.end()),\n+                       [](const auto& tx) { return tx->GetHash(); });\n+        // Require the package to be sorted in order of dependency, i.e. parents appear before children.\n+        // An unsorted package will fail anyway on missing-inputs, but it's better to quit earlier and\n+        // fail on something less ambiguous (missing-inputs could also be an orphan or trying to\n+        // spend nonexistent coins).\n+        for (const auto& tx : txns) {\n+            for (const auto& input : tx->vin) {\n+                if (later_txids.find(input.prevout.hash) != later_txids.end()) {\n+                    // The parent is a subsequent transaction in the package.\n+                    package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-sorted\");\n+                    return PackageMempoolAcceptResult(package_state, {});\n+                }\n+            }\n+            later_txids.erase(tx->GetHash());\n+            workspaces.emplace_back(Workspace(tx));\n+        }\n+    }\n+    std::map<const uint256, const MempoolAcceptResult> results;\n+    {\n+        // Don't allow any conflicting transactions, i.e. spending the same inputs, in a package.\n+        std::unordered_set<COutPoint, SaltedOutpointHasher> inputs_seen;\n+        for (const auto& tx : txns) {\n+            for (const auto& input : tx->vin) {\n+                if (inputs_seen.find(input.prevout) != inputs_seen.end()) {\n+                    // This input is also present in another tx in the package.\n+                    package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"conflict-in-package\");\n+                    return PackageMempoolAcceptResult(package_state, {});\n+                }\n+            }\n+            // Batch-add all the inputs for a tx at a time. If we added them 1 at a time, we could\n+            // catch duplicate inputs within a single tx.  This is a more severe, consensus error,\n+            // and we want to report that from CheckTransaction instead.\n+            std::transform(tx->vin.cbegin(), tx->vin.cend(), std::inserter(inputs_seen, inputs_seen.end()),\n+                           [](const auto& input) { return input.prevout; });\n+        }\n+    }\n+\n+    LOCK(m_pool.cs);\n+\n+    // Do all PreChecks first and fail fast to avoid running expensive script checks when unnecessary.\n+    for (Workspace& ws : workspaces) {\n+        if (!PreChecks(args, ws)) {\n+            package_state.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n+            // Exit early to avoid doing pointless work. Update the failed tx result; the rest are unfinished.\n+            results.emplace(ws.m_ptx->GetWitnessHash(), MempoolAcceptResult::Failure(ws.m_state));\n+            return PackageMempoolAcceptResult(package_state, std::move(results));\n+        }\n+        // Make the coins created by this transaction available for subsequent transactions in the\n+        // package to spend. Since we already checked conflicts in the package and RBFs are\n+        // impossible, we don't need to track the coins spent. Note that this logic will need to be\n+        // updated if RBFs in packages are allowed in the future.\n+        assert(args.disallow_mempool_conflicts);\n+        m_viewmempool.PackageAddTransaction(ws.m_ptx);\n+    }\n+\n+    for (Workspace& ws : workspaces) {\n+        PrecomputedTransactionData txdata;\n+        if (!PolicyScriptChecks(args, ws, txdata)) {\n+            // Exit early to avoid doing pointless work. Update the failed tx result; the rest are unfinished.\n+            package_state.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n+            results.emplace(ws.m_ptx->GetWitnessHash(), MempoolAcceptResult::Failure(ws.m_state));\n+            return PackageMempoolAcceptResult(package_state, std::move(results));\n+        }\n+        if (args.m_test_accept) {",
      "path": "src/validation.cpp",
      "position": 221,
      "original_position": 221,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "in_reply_to_id": 639738249,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Right, but by this reasoning, I could also just take the `test_accept` argument out of this PR altogether. It feels a bit safer to have this condition up front and worry less about gating test-accept-only logic later.",
      "created_at": "2021-05-26T16:42:04Z",
      "updated_at": "2021-05-26T16:42:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r639915142",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639915142"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1166,
      "original_line": 1166,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/640184013",
      "pull_request_review_id": 669619379,
      "id": 640184013,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDE4NDAxMw==",
      "diff_hunk": "@@ -932,62 +940,86 @@ static RPCHelpMan testmempoolaccept()\n         UniValueType(), // VNUM or VSTR, checked inside AmountFromValue()\n     });\n \n-    if (request.params[0].get_array().size() != 1) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array must contain exactly one raw transaction for now\");\n-    }\n-\n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_array()[0].get_str())) {\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n+    const UniValue raw_transactions = request.params[0].get_array();\n+    if (raw_transactions.size() < 1 || raw_transactions.size() > MAX_PACKAGE_COUNT) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER,\n+                           \"Array must contain between 1 and \" + ToString(MAX_PACKAGE_COUNT) + \" transactions.\");\n     }\n-    CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n \n     const CFeeRate max_raw_tx_fee_rate = request.params[1].isNull() ?\n                                              DEFAULT_MAX_RAW_TX_FEE_RATE :\n                                              CFeeRate(AmountFromValue(request.params[1]));\n \n-    NodeContext& node = EnsureAnyNodeContext(request.context);\n+    std::vector<CTransactionRef> txns;\n+    for (const auto& rawtx : raw_transactions.getValues()) {\n+        CMutableTransaction mtx;\n+        if (!DecodeHexTx(mtx, rawtx.get_str())) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR,\n+                               \"TX decode failed: \" + rawtx.get_str() + \" Make sure the tx has at least one input.\");\n+        }\n+        txns.emplace_back(MakeTransactionRef(std::move(mtx)));\n+    }\n \n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n     CTxMemPool& mempool = EnsureMemPool(node);\n-    int64_t virtual_size = GetVirtualTransactionSize(*tx);\n-    CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n-\n-    UniValue result(UniValue::VARR);\n-    UniValue result_0(UniValue::VOBJ);\n-    result_0.pushKV(\"txid\", tx->GetHash().GetHex());\n-    result_0.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n-\n-    ChainstateManager& chainman = EnsureChainman(node);\n-    const MempoolAcceptResult accept_result = WITH_LOCK(cs_main, return AcceptToMemoryPool(chainman.ActiveChainstate(), mempool, std::move(tx),\n-                                                  false /* bypass_limits */, /* test_accept */ true));\n-\n-    // Only return the fee and vsize if the transaction would pass ATMP.\n-    // These can be used to calculate the feerate.\n-    if (accept_result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-        const CAmount fee = accept_result.m_base_fees.value();\n-        // Check that fee does not exceed maximum fee\n-        if (max_raw_tx_fee && fee > max_raw_tx_fee) {\n-            result_0.pushKV(\"allowed\", false);\n-            result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n-        } else {\n-            result_0.pushKV(\"allowed\", true);\n-            result_0.pushKV(\"vsize\", virtual_size);\n-            UniValue fees(UniValue::VOBJ);\n-            fees.pushKV(\"base\", ValueFromAmount(fee));\n-            result_0.pushKV(\"fees\", fees);\n+    CChainState& chainstate = EnsureChainman(node).ActiveChainstate();\n+    const PackageMempoolAcceptResult package_result = [&] {\n+        LOCK(::cs_main);\n+        if (txns.size() > 1) return ProcessNewPackage(chainstate, mempool, txns, /* test_accept */ true);\n+        return PackageMempoolAcceptResult(txns[0]->GetWitnessHash(),\n+               AcceptToMemoryPool(chainstate, mempool, txns[0], /* bypass_limits */ false, /* test_accept*/ true));\n+    }();\n+\n+    UniValue rpc_result(UniValue::VARR);\n+    // We will check transaction fees we iterate through txns in order. If any transaction fee\n+    // exceeds maxfeerate, we will keave the rest of the validation results blank, because it\n+    // doesn't make sense to return a validation result for a transaction if its ancestor(s) would\n+    // not be submitted.",
      "path": "src/rpc/rawtransaction.cpp",
      "position": 120,
      "original_position": 120,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "9ede34a6f20378e86c5289ebd20dd394a5915123",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "fees **while** we iterate, keave->leave",
      "created_at": "2021-05-26T23:22:48Z",
      "updated_at": "2021-05-27T01:04:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r640184013",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/640184013"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 977,
      "original_line": 977,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/640201934",
      "pull_request_review_id": 669619379,
      "id": 640201934,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDIwMTkzNA==",
      "diff_hunk": "@@ -895,17 +899,21 @@ static RPCHelpMan testmempoolaccept()\n                             {\"rawtx\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"\"},\n                         },\n                         },\n-                    {\"maxfeerate\", RPCArg::Type::AMOUNT, RPCArg::Default{FormatMoney(DEFAULT_MAX_RAW_TX_FEE_RATE.GetFeePerK())}, \"Reject transactions whose fee rate is higher than the specified value, expressed in \" + CURRENCY_UNIT + \"/kvB\\n\"},\n+                    {\"maxfeerate\", RPCArg::Type::AMOUNT, RPCArg::Default{FormatMoney(DEFAULT_MAX_RAW_TX_FEE_RATE.GetFeePerK())},\n+                     \"Reject transactions whose fee rate is higher than the specified value, expressed in \" + CURRENCY_UNIT + \"/kvB\\n\"},\n                 },\n                 RPCResult{\n                     RPCResult::Type::ARR, \"\", \"The result of the mempool acceptance test for each raw transaction in the input array.\\n\"\n-                        \"Length is exactly one for now.\",\n+                        \"Returns results for each transaction in the same order they were passed in.\\n\"\n+                        \"It is possible for transactions to not be fully validated ('allowed' unset) if an earlier transaction failed.\\n\",",
      "path": "src/rpc/rawtransaction.cpp",
      "position": 34,
      "original_position": 34,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "9ede34a6f20378e86c5289ebd20dd394a5915123",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "maybe \"if another transaction failed\", because it's not necessarily an earlier transaction? (in the case where validation terminates early, the culprit could also be a later transaction)",
      "created_at": "2021-05-27T00:16:37Z",
      "updated_at": "2021-05-27T01:04:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r640201934",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/640201934"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 908,
      "original_line": 908,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/640203353",
      "pull_request_review_id": 669619379,
      "id": 640203353,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDIwMzM1Mw==",
      "diff_hunk": "@@ -895,17 +899,21 @@ static RPCHelpMan testmempoolaccept()\n                             {\"rawtx\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"\"},\n                         },\n                         },\n-                    {\"maxfeerate\", RPCArg::Type::AMOUNT, RPCArg::Default{FormatMoney(DEFAULT_MAX_RAW_TX_FEE_RATE.GetFeePerK())}, \"Reject transactions whose fee rate is higher than the specified value, expressed in \" + CURRENCY_UNIT + \"/kvB\\n\"},\n+                    {\"maxfeerate\", RPCArg::Type::AMOUNT, RPCArg::Default{FormatMoney(DEFAULT_MAX_RAW_TX_FEE_RATE.GetFeePerK())},\n+                     \"Reject transactions whose fee rate is higher than the specified value, expressed in \" + CURRENCY_UNIT + \"/kvB\\n\"},\n                 },\n                 RPCResult{\n                     RPCResult::Type::ARR, \"\", \"The result of the mempool acceptance test for each raw transaction in the input array.\\n\"\n-                        \"Length is exactly one for now.\",\n+                        \"Returns results for each transaction in the same order they were passed in.\\n\"\n+                        \"It is possible for transactions to not be fully validated ('allowed' unset) if an earlier transaction failed.\\n\",\n                     {\n                         {RPCResult::Type::OBJ, \"\", \"\",\n                         {\n                             {RPCResult::Type::STR_HEX, \"txid\", \"The transaction hash in hex\"},\n                             {RPCResult::Type::STR_HEX, \"wtxid\", \"The transaction witness hash in hex\"},\n-                            {RPCResult::Type::BOOL, \"allowed\", \"If the mempool allows this tx to be inserted\"},\n+                            {RPCResult::Type::STR, \"package-error\", \"Package validation error, if any (only possible if rawtxs had more than 1 transaction).\"},\n+                            {RPCResult::Type::BOOL, \"allowed\", \"Whether this tx would be accepted to the mempool and pass client-specified maxfeerate.\"",
      "path": "src/rpc/rawtransaction.cpp",
      "position": 42,
      "original_position": 42,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: space after maxfeerate",
      "created_at": "2021-05-27T00:21:25Z",
      "updated_at": "2021-05-27T01:04:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r640203353",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/640203353"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 915,
      "original_line": 915,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/640210539",
      "pull_request_review_id": 669619379,
      "id": 640210539,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDIxMDUzOQ==",
      "diff_hunk": "@@ -477,6 +478,13 @@ class MemPoolAccept\n     // Single transaction acceptance\n     MempoolAcceptResult AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+    /**\n+    * Multiple transaction acceptance. Transactions may or may not be interdependent,\n+    * but must not conflict with each other. Parents must come before children if any\n+    * dependencies exist, otherwise a TX_MISSING_INPUTS error will be returned.",
      "path": "src/validation.cpp",
      "position": 67,
      "original_position": 15,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "2ef187941db439c5b3e529f08b6ab153ff061fc5",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "After the last commit, the error will be \"package-not-sorted\". ",
      "created_at": "2021-05-27T00:45:21Z",
      "updated_at": "2021-05-27T01:04:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r640210539",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/640210539"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 485,
      "original_line": 484,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/640264079",
      "pull_request_review_id": 669714132,
      "id": 640264079,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDI2NDA3OQ==",
      "diff_hunk": "@@ -638,7 +642,7 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n                         break;\n                     }\n                 }\n-                if (fReplacementOptOut) {\n+                if (fReplacementOptOut || args.disallow_mempool_conflicts) {",
      "path": "src/validation.cpp",
      "position": 79,
      "original_position": 79,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "in_reply_to_id": 639693860,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "+1, I would also update the reject reason to \"txn-mempool-disallowed-replacement\"",
      "created_at": "2021-05-27T03:37:32Z",
      "updated_at": "2021-05-27T06:34:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r640264079",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/640264079"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 645,
      "original_line": 645,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/640266735",
      "pull_request_review_id": 669714132,
      "id": 640266735,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDI2NjczNQ==",
      "diff_hunk": "@@ -0,0 +1,34 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_PACKAGES_H\n+#define BITCOIN_POLICY_PACKAGES_H\n+\n+#include <consensus/validation.h>\n+#include <primitives/transaction.h>\n+\n+#include <vector>\n+\n+/** Default maximum number of transactions in a package. */\n+static constexpr uint32_t MAX_PACKAGE_COUNT{25};\n+/** Default maximum total virtual size of transactions in a package in KvB. */\n+static constexpr uint32_t MAX_PACKAGE_SIZE{101};\n+\n+/** A \"reason\" why a package was invalid. It may be that one or more of the included\n+ * transactions is invalid or the package itself violates our rules.\n+ * We don't distinguish between consensus and policy violations right now.",
      "path": "src/policy/packages.h",
      "position": 20,
      "original_position": 20,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "What do you mean by this ? If it's a `PCKG_TX`, the yielded TxValidationResult might be TX_CONSENSUS. For e.g receiving a coinbase transaction.",
      "created_at": "2021-05-27T03:47:17Z",
      "updated_at": "2021-05-27T06:34:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r640266735",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/640266735"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 20,
      "original_line": 20,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/640272735",
      "pull_request_review_id": 669714132,
      "id": 640272735,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDI3MjczNQ==",
      "diff_hunk": "@@ -885,8 +886,11 @@ static RPCHelpMan sendrawtransaction()\n static RPCHelpMan testmempoolaccept()\n {\n     return RPCHelpMan{\"testmempoolaccept\",\n-                \"\\nReturns result of mempool acceptance tests indicating if raw transaction (serialized, hex-encoded) would be accepted by mempool.\\n\"\n-                \"\\nThis checks if the transaction violates the consensus or policy rules.\\n\"\n+                \"\\nReturns result of mempool acceptance tests indicating if raw transaction(s) (serialized, hex-encoded) would be accepted by mempool.\\n\"\n+                \"\\nIf multiple transactions are passed in, parents must come before children and package policies apply: the transactions cannot conflict with any mempool transactions or each other.\\n\"\n+                \"\\nIf one transaction fails, other transactions may not be fully validated (the 'allowed' key will be blank).\\n\"",
      "path": "src/rpc/rawtransaction.cpp",
      "position": 16,
      "original_position": 16,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: I think a more descriptive behavior would be \"if one transaction fails, remaining transactions are not submitted for validation\". See document L1146 in src/validation.cpp \"Exit early to avoid doing pointless work. Update the failed tx result; the rest are unfinished\".",
      "created_at": "2021-05-27T04:08:42Z",
      "updated_at": "2021-05-27T06:34:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r640272735",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/640272735"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 891,
      "original_line": 891,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/640283157",
      "pull_request_review_id": 669714132,
      "id": 640283157,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDI4MzE1Nw==",
      "diff_hunk": "@@ -932,62 +940,86 @@ static RPCHelpMan testmempoolaccept()\n         UniValueType(), // VNUM or VSTR, checked inside AmountFromValue()\n     });\n \n-    if (request.params[0].get_array().size() != 1) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array must contain exactly one raw transaction for now\");\n-    }\n-\n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_array()[0].get_str())) {\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n+    const UniValue raw_transactions = request.params[0].get_array();\n+    if (raw_transactions.size() < 1 || raw_transactions.size() > MAX_PACKAGE_COUNT) {",
      "path": "src/rpc/rawtransaction.cpp",
      "position": 59,
      "original_position": 59,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: the check on `MAX_PACKAGE_COUNT` is duplicated into `AcceptMultipleTransactions`. I can understand the rational of not taking the `cs_main` lock but I've a preference to keep all package policy checks in one place. That would also avoid linking `packages.h` in `rawtransaction.cpp` (assuming we hardcode the package limit in RPC doc).",
      "created_at": "2021-05-27T04:45:43Z",
      "updated_at": "2021-05-27T06:34:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r640283157",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/640283157"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 944,
      "original_line": 944,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/640284495",
      "pull_request_review_id": 669714132,
      "id": 640284495,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDI4NDQ5NQ==",
      "diff_hunk": "@@ -932,62 +940,86 @@ static RPCHelpMan testmempoolaccept()\n         UniValueType(), // VNUM or VSTR, checked inside AmountFromValue()\n     });\n \n-    if (request.params[0].get_array().size() != 1) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array must contain exactly one raw transaction for now\");\n-    }\n-\n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_array()[0].get_str())) {\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n+    const UniValue raw_transactions = request.params[0].get_array();\n+    if (raw_transactions.size() < 1 || raw_transactions.size() > MAX_PACKAGE_COUNT) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER,\n+                           \"Array must contain between 1 and \" + ToString(MAX_PACKAGE_COUNT) + \" transactions.\");\n     }\n-    CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n \n     const CFeeRate max_raw_tx_fee_rate = request.params[1].isNull() ?\n                                              DEFAULT_MAX_RAW_TX_FEE_RATE :\n                                              CFeeRate(AmountFromValue(request.params[1]));\n \n-    NodeContext& node = EnsureAnyNodeContext(request.context);\n+    std::vector<CTransactionRef> txns;\n+    for (const auto& rawtx : raw_transactions.getValues()) {\n+        CMutableTransaction mtx;\n+        if (!DecodeHexTx(mtx, rawtx.get_str())) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR,\n+                               \"TX decode failed: \" + rawtx.get_str() + \" Make sure the tx has at least one input.\");\n+        }\n+        txns.emplace_back(MakeTransactionRef(std::move(mtx)));\n+    }\n \n+    NodeContext& node = EnsureAnyNodeContext(request.context);\n     CTxMemPool& mempool = EnsureMemPool(node);\n-    int64_t virtual_size = GetVirtualTransactionSize(*tx);\n-    CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n-\n-    UniValue result(UniValue::VARR);\n-    UniValue result_0(UniValue::VOBJ);\n-    result_0.pushKV(\"txid\", tx->GetHash().GetHex());\n-    result_0.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n-\n-    ChainstateManager& chainman = EnsureChainman(node);\n-    const MempoolAcceptResult accept_result = WITH_LOCK(cs_main, return AcceptToMemoryPool(chainman.ActiveChainstate(), mempool, std::move(tx),\n-                                                  false /* bypass_limits */, /* test_accept */ true));\n-\n-    // Only return the fee and vsize if the transaction would pass ATMP.\n-    // These can be used to calculate the feerate.\n-    if (accept_result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n-        const CAmount fee = accept_result.m_base_fees.value();\n-        // Check that fee does not exceed maximum fee\n-        if (max_raw_tx_fee && fee > max_raw_tx_fee) {\n-            result_0.pushKV(\"allowed\", false);\n-            result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n-        } else {\n-            result_0.pushKV(\"allowed\", true);\n-            result_0.pushKV(\"vsize\", virtual_size);\n-            UniValue fees(UniValue::VOBJ);\n-            fees.pushKV(\"base\", ValueFromAmount(fee));\n-            result_0.pushKV(\"fees\", fees);\n+    CChainState& chainstate = EnsureChainman(node).ActiveChainstate();\n+    const PackageMempoolAcceptResult package_result = [&] {\n+        LOCK(::cs_main);\n+        if (txns.size() > 1) return ProcessNewPackage(chainstate, mempool, txns, /* test_accept */ true);\n+        return PackageMempoolAcceptResult(txns[0]->GetWitnessHash(),\n+               AcceptToMemoryPool(chainstate, mempool, txns[0], /* bypass_limits */ false, /* test_accept*/ true));\n+    }();\n+\n+    UniValue rpc_result(UniValue::VARR);\n+    // We will check transaction fees we iterate through txns in order. If any transaction fee\n+    // exceeds maxfeerate, we will keave the rest of the validation results blank, because it\n+    // doesn't make sense to return a validation result for a transaction if its ancestor(s) would",
      "path": "src/rpc/rawtransaction.cpp",
      "position": 119,
      "original_position": 119,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: _transaction_ result",
      "created_at": "2021-05-27T04:50:02Z",
      "updated_at": "2021-05-27T06:34:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r640284495",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/640284495"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 976,
      "original_line": 976,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/640296157",
      "pull_request_review_id": 669714132,
      "id": 640296157,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDI5NjE1Nw==",
      "diff_hunk": "@@ -862,12 +863,19 @@ class CTxMemPool\n  */\n class CCoinsViewMemPool : public CCoinsViewBacked\n {\n+    /**\n+    * Coins made available by transactions being validated. Tracking these allows for package\n+    * validation, since we can access transaction outputs without submitting them to mempool.\n+    */\n+    std::unordered_map<COutPoint, Coin, SaltedOutpointHasher> m_temp_added;\n protected:\n     const CTxMemPool& mempool;\n \n public:\n     CCoinsViewMemPool(CCoinsView* baseIn, const CTxMemPool& mempoolIn);\n     bool GetCoin(const COutPoint &outpoint, Coin &coin) const override;\n+    /** Add the coins created by this transaction. */",
      "path": "src/txmempool.h",
      "position": 25,
      "original_position": 25,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: \"Temporarily add the coins created by this transaction until package processing to which it belongs is over\" ?",
      "created_at": "2021-05-27T05:24:34Z",
      "updated_at": "2021-05-27T06:34:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r640296157",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/640296157"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 877,
      "original_line": 877,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/640305966",
      "pull_request_review_id": 669714132,
      "id": 640305966,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDMwNTk2Ng==",
      "diff_hunk": "@@ -1045,28 +1049,129 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n \n     Workspace ws(ptx);\n \n-    if (!PreChecks(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!PreChecks(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n-    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     // Tx was accepted, but not added\n     if (args.m_test_accept) {\n-        return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+        return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n     }\n \n-    if (!Finalize(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!Finalize(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+    return MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+}\n+\n+PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::vector<CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    PackageValidationState package_state;\n+    const unsigned int package_count = txns.size();\n+\n+    // These context-free package limits can be checked before taking the mempool lock.\n+    if (package_count > MAX_PACKAGE_COUNT) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-too-many-transactions\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    const int64_t total_size = std::accumulate(txns.cbegin(), txns.cend(), 0,\n+                               [](int64_t sum, const auto& tx) { return sum + GetVirtualTransactionSize(*tx); });\n+    // If the package only contains 1 tx, it's better to report the policy violation on individual tx size.\n+    if (package_count > 1 && total_size > MAX_PACKAGE_SIZE * 1000) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-too-large\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    // Construct workspaces and check package policies.\n+    std::vector<Workspace> workspaces{};\n+    workspaces.reserve(package_count);\n+    {\n+        std::unordered_set<uint256, SaltedTxidHasher> later_txids;\n+        std::transform(txns.cbegin(), txns.cend(), std::inserter(later_txids, later_txids.end()),\n+                       [](const auto& tx) { return tx->GetHash(); });\n+        // Require the package to be sorted in order of dependency, i.e. parents appear before children.\n+        // An unsorted package will fail anyway on missing-inputs, but it's better to quit earlier and\n+        // fail on something less ambiguous (missing-inputs could also be an orphan or trying to\n+        // spend nonexistent coins).\n+        for (const auto& tx : txns) {\n+            for (const auto& input : tx->vin) {\n+                if (later_txids.find(input.prevout.hash) != later_txids.end()) {\n+                    // The parent is a subsequent transaction in the package.\n+                    package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-sorted\");\n+                    return PackageMempoolAcceptResult(package_state, {});\n+                }\n+            }\n+            later_txids.erase(tx->GetHash());\n+            workspaces.emplace_back(Workspace(tx));\n+        }\n+    }\n+    std::map<const uint256, const MempoolAcceptResult> results;\n+    {\n+        // Don't allow any conflicting transactions, i.e. spending the same inputs, in a package.\n+        std::unordered_set<COutPoint, SaltedOutpointHasher> inputs_seen;\n+        for (const auto& tx : txns) {\n+            for (const auto& input : tx->vin) {\n+                if (inputs_seen.find(input.prevout) != inputs_seen.end()) {\n+                    // This input is also present in another tx in the package.\n+                    package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"conflict-in-package\");\n+                    return PackageMempoolAcceptResult(package_state, {});\n+                }\n+            }\n+            // Batch-add all the inputs for a tx at a time. If we added them 1 at a time, we could\n+            // catch duplicate inputs within a single tx.  This is a more severe, consensus error,\n+            // and we want to report that from CheckTransaction instead.\n+            std::transform(tx->vin.cbegin(), tx->vin.cend(), std::inserter(inputs_seen, inputs_seen.end()),\n+                           [](const auto& input) { return input.prevout; });\n+        }\n+    }\n+\n+    LOCK(m_pool.cs);\n+\n+    // Do all PreChecks first and fail fast to avoid running expensive script checks when unnecessary.\n+    for (Workspace& ws : workspaces) {\n+        if (!PreChecks(args, ws)) {\n+            package_state.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n+            // Exit early to avoid doing pointless work. Update the failed tx result; the rest are unfinished.\n+            results.emplace(ws.m_ptx->GetWitnessHash(), MempoolAcceptResult::Failure(ws.m_state));\n+            return PackageMempoolAcceptResult(package_state, std::move(results));\n+        }\n+        // Make the coins created by this transaction available for subsequent transactions in the\n+        // package to spend. Since we already checked conflicts in the package and RBFs are\n+        // impossible, we don't need to track the coins spent. Note that this logic will need to be\n+        // updated if RBFs in packages are allowed in the future.",
      "path": "src/validation.cpp",
      "position": 208,
      "original_position": 208,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: \"mempool transaction replacement by packages\". \r\n\r\nOtherwise it lets suggest we apply RBF inside a currently-processing package. Also I think the replacement policy we'll end up for packages is going to be far different than BIP 125, so instead of mentioning RBF, I would say simply replacement for now.",
      "created_at": "2021-05-27T05:50:46Z",
      "updated_at": "2021-05-27T06:34:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r640305966",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/640305966"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1153,
      "original_line": 1153,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/640312812",
      "pull_request_review_id": 669714132,
      "id": 640312812,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDMxMjgxMg==",
      "diff_hunk": "@@ -205,6 +235,18 @@ struct MempoolAcceptResult {\n MempoolAcceptResult AcceptToMemoryPool(CChainState& active_chainstate, CTxMemPool& pool, const CTransactionRef& tx,\n                                        bool bypass_limits, bool test_accept=false) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+/**\n+* Atomically test acceptance of a package. If the package only contains one tx, package rules still apply.\n+* @param[in]    txns                Group of transactions which may be independent or contain\n+*                                   parent-child dependencies. The transactions must not conflict, i.e.\n+*                                   must not spend the same inputs, even if it would be a valid BIP125",
      "path": "src/validation.h",
      "position": 73,
      "original_position": 73,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "A bit confusing, one might wonder if you're aiming to in-package conflict or mempool transactions conflicted by package. I would suggest another formulation : \"The package transactions must not conflict, i.e must not spend the same inputs. They must not replace mempool transaction, even if it's valid under BIP125 rules.\"",
      "created_at": "2021-05-27T06:07:17Z",
      "updated_at": "2021-05-27T06:34:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r640312812",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/640312812"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 242,
      "original_line": 242,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/640345634",
      "pull_request_review_id": 669814960,
      "id": 640345634,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDM0NTYzNA==",
      "diff_hunk": "@@ -0,0 +1,34 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_PACKAGES_H\n+#define BITCOIN_POLICY_PACKAGES_H\n+\n+#include <consensus/validation.h>\n+#include <primitives/transaction.h>\n+\n+#include <vector>\n+\n+/** Default maximum number of transactions in a package. */\n+static constexpr uint32_t MAX_PACKAGE_COUNT{25};\n+/** Default maximum total virtual size of transactions in a package in KvB. */\n+static constexpr uint32_t MAX_PACKAGE_SIZE{101};\n+\n+/** A \"reason\" why a package was invalid. It may be that one or more of the included\n+ * transactions is invalid or the package itself violates our rules.\n+ * We don't distinguish between consensus and policy violations right now.",
      "path": "src/policy/packages.h",
      "position": 20,
      "original_position": 20,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "in_reply_to_id": 640266735,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The \"right now\" means that we might distinguish between them in the future, e.g. if we want to punish a peer for a `PCKG_TX` having a consensus failure but not for a policy failure.",
      "created_at": "2021-05-27T07:09:33Z",
      "updated_at": "2021-05-27T07:09:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r640345634",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/640345634"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 20,
      "original_line": 20,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/640355567",
      "pull_request_review_id": 669827884,
      "id": 640355567,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDM1NTU2Nw==",
      "diff_hunk": "@@ -932,62 +940,86 @@ static RPCHelpMan testmempoolaccept()\n         UniValueType(), // VNUM or VSTR, checked inside AmountFromValue()\n     });\n \n-    if (request.params[0].get_array().size() != 1) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array must contain exactly one raw transaction for now\");\n-    }\n-\n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_array()[0].get_str())) {\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n+    const UniValue raw_transactions = request.params[0].get_array();\n+    if (raw_transactions.size() < 1 || raw_transactions.size() > MAX_PACKAGE_COUNT) {",
      "path": "src/rpc/rawtransaction.cpp",
      "position": 59,
      "original_position": 59,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "in_reply_to_id": 640283157,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think of this as a distinct check, actually. We defined the `testmempoolaccept` API to be \"maximum 25 transactions\" and will return a JSONRPC error here because the user violated our API, whereas `AcceptMultipleTransactions()` is applying package policies.",
      "created_at": "2021-05-27T07:24:34Z",
      "updated_at": "2021-05-27T07:24:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r640355567",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/640355567"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 944,
      "original_line": 944,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/640480284",
      "pull_request_review_id": 669989979,
      "id": 640480284,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDQ4MDI4NA==",
      "diff_hunk": "@@ -895,17 +899,21 @@ static RPCHelpMan testmempoolaccept()\n                             {\"rawtx\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"\"},\n                         },\n                         },\n-                    {\"maxfeerate\", RPCArg::Type::AMOUNT, RPCArg::Default{FormatMoney(DEFAULT_MAX_RAW_TX_FEE_RATE.GetFeePerK())}, \"Reject transactions whose fee rate is higher than the specified value, expressed in \" + CURRENCY_UNIT + \"/kvB\\n\"},\n+                    {\"maxfeerate\", RPCArg::Type::AMOUNT, RPCArg::Default{FormatMoney(DEFAULT_MAX_RAW_TX_FEE_RATE.GetFeePerK())},\n+                     \"Reject transactions whose fee rate is higher than the specified value, expressed in \" + CURRENCY_UNIT + \"/kvB\\n\"},\n                 },\n                 RPCResult{\n                     RPCResult::Type::ARR, \"\", \"The result of the mempool acceptance test for each raw transaction in the input array.\\n\"\n-                        \"Length is exactly one for now.\",\n+                        \"Returns results for each transaction in the same order they were passed in.\\n\"\n+                        \"It is possible for transactions to not be fully validated ('allowed' unset) if an earlier transaction failed.\\n\",\n                     {\n                         {RPCResult::Type::OBJ, \"\", \"\",\n                         {\n                             {RPCResult::Type::STR_HEX, \"txid\", \"The transaction hash in hex\"},\n                             {RPCResult::Type::STR_HEX, \"wtxid\", \"The transaction witness hash in hex\"},\n-                            {RPCResult::Type::BOOL, \"allowed\", \"If the mempool allows this tx to be inserted\"},\n+                            {RPCResult::Type::STR, \"package-error\", \"Package validation error, if any (only possible if rawtxs had more than 1 transaction).\"},\n+                            {RPCResult::Type::BOOL, \"allowed\", \"Whether this tx would be accepted to the mempool and pass client-specified maxfeerate.\"",
      "path": "src/rpc/rawtransaction.cpp",
      "position": 42,
      "original_position": 42,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "in_reply_to_id": 640203353,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Are you saying I should add a space after maxfeerate or?",
      "created_at": "2021-05-27T10:03:03Z",
      "updated_at": "2021-05-27T10:03:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r640480284",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/640480284"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 915,
      "original_line": 915,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/640504531",
      "pull_request_review_id": 670021505,
      "id": 640504531,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDUwNDUzMQ==",
      "diff_hunk": "@@ -895,17 +899,21 @@ static RPCHelpMan testmempoolaccept()\n                             {\"rawtx\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"\"},\n                         },\n                         },\n-                    {\"maxfeerate\", RPCArg::Type::AMOUNT, RPCArg::Default{FormatMoney(DEFAULT_MAX_RAW_TX_FEE_RATE.GetFeePerK())}, \"Reject transactions whose fee rate is higher than the specified value, expressed in \" + CURRENCY_UNIT + \"/kvB\\n\"},\n+                    {\"maxfeerate\", RPCArg::Type::AMOUNT, RPCArg::Default{FormatMoney(DEFAULT_MAX_RAW_TX_FEE_RATE.GetFeePerK())},\n+                     \"Reject transactions whose fee rate is higher than the specified value, expressed in \" + CURRENCY_UNIT + \"/kvB\\n\"},\n                 },\n                 RPCResult{\n                     RPCResult::Type::ARR, \"\", \"The result of the mempool acceptance test for each raw transaction in the input array.\\n\"\n-                        \"Length is exactly one for now.\",\n+                        \"Returns results for each transaction in the same order they were passed in.\\n\"\n+                        \"It is possible for transactions to not be fully validated ('allowed' unset) if an earlier transaction failed.\\n\",\n                     {\n                         {RPCResult::Type::OBJ, \"\", \"\",\n                         {\n                             {RPCResult::Type::STR_HEX, \"txid\", \"The transaction hash in hex\"},\n                             {RPCResult::Type::STR_HEX, \"wtxid\", \"The transaction witness hash in hex\"},\n-                            {RPCResult::Type::BOOL, \"allowed\", \"If the mempool allows this tx to be inserted\"},\n+                            {RPCResult::Type::STR, \"package-error\", \"Package validation error, if any (only possible if rawtxs had more than 1 transaction).\"},\n+                            {RPCResult::Type::BOOL, \"allowed\", \"Whether this tx would be accepted to the mempool and pass client-specified maxfeerate.\"",
      "path": "src/rpc/rawtransaction.cpp",
      "position": 42,
      "original_position": 42,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "in_reply_to_id": 640203353,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I meant after \"maxfeerate.\" and before the next sentence, it should show when displaying the rpc help.",
      "created_at": "2021-05-27T10:39:23Z",
      "updated_at": "2021-05-27T10:39:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r640504531",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/640504531"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 915,
      "original_line": 915,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/640765101",
      "pull_request_review_id": 670372911,
      "id": 640765101,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDc2NTEwMQ==",
      "diff_hunk": "@@ -862,12 +863,19 @@ class CTxMemPool\n  */\n class CCoinsViewMemPool : public CCoinsViewBacked\n {\n+    /**\n+    * Coins made available by transactions being validated. Tracking these allows for package\n+    * validation, since we can access transaction outputs without submitting them to mempool.\n+    */\n+    std::unordered_map<COutPoint, Coin, SaltedOutpointHasher> m_temp_added;\n protected:\n     const CTxMemPool& mempool;\n \n public:\n     CCoinsViewMemPool(CCoinsView* baseIn, const CTxMemPool& mempoolIn);\n     bool GetCoin(const COutPoint &outpoint, Coin &coin) const override;\n+    /** Add the coins created by this transaction. */",
      "path": "src/txmempool.h",
      "position": 25,
      "original_position": 25,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "in_reply_to_id": 640296157,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added a more descriptive comment in #22084",
      "created_at": "2021-05-27T16:03:28Z",
      "updated_at": "2021-05-27T16:03:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r640765101",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/640765101"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 877,
      "original_line": 877,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/640767326",
      "pull_request_review_id": 670375999,
      "id": 640767326,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDc2NzMyNg==",
      "diff_hunk": "@@ -638,7 +642,7 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n                         break;\n                     }\n                 }\n-                if (fReplacementOptOut) {\n+                if (fReplacementOptOut || args.disallow_mempool_conflicts) {",
      "path": "src/validation.cpp",
      "position": 79,
      "original_position": 79,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "in_reply_to_id": 639693860,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In #22084 I'm updating it to \"allow_bip125_replacement\" to fix the double-negative and saying \"replacements not allowed\" instead of \"conflicts with mempool.\" Also moving the `if` condition up as suggested.",
      "created_at": "2021-05-27T16:06:21Z",
      "updated_at": "2021-05-27T16:06:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r640767326",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/640767326"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 645,
      "original_line": 645,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/640767466",
      "pull_request_review_id": 670376175,
      "id": 640767466,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDc2NzQ2Ng==",
      "diff_hunk": "@@ -1105,6 +1211,29 @@ MempoolAcceptResult AcceptToMemoryPool(CChainState& active_chainstate, CTxMemPoo\n     return AcceptToMemoryPoolWithTime(Params(), pool, active_chainstate, tx, GetTime(), bypass_limits, test_accept);\n }\n \n+PackageMempoolAcceptResult ProcessNewPackage(CChainState& active_chainstate, CTxMemPool& pool,\n+                                                   const Package& package, bool test_accept)\n+{\n+    AssertLockHeld(cs_main);\n+    assert(test_accept); // Only allow package accept dry-runs (testmempoolaccept RPC).\n+    assert(!package.empty());\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+\n+    std::vector<COutPoint> coins_to_uncache;\n+    const CChainParams& chainparams = Params();\n+    MemPoolAccept::ATMPArgs args { chainparams, GetTime(), /* bypass_limits */ false, coins_to_uncache,\n+                                   test_accept, /* disallow_mempool_conflicts */ true };\n+    assert(std::addressof(::ChainstateActive()) == std::addressof(active_chainstate));\n+    const PackageMempoolAcceptResult result = MemPoolAccept(pool, active_chainstate).AcceptMultipleTransactions(package, args);\n+\n+    // Uncache coins pertaining to transactions that were not submitted to the mempool.\n+    // Ensure the cache is still within its size limits.",
      "path": "src/validation.cpp",
      "position": 263,
      "original_position": 263,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "in_reply_to_id": 639703882,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Erasing in #22084",
      "created_at": "2021-05-27T16:06:32Z",
      "updated_at": "2021-05-27T16:06:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r640767466",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/640767466"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1230,
      "original_line": 1230,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/640767581",
      "pull_request_review_id": 670376348,
      "id": 640767581,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDc2NzU4MQ==",
      "diff_hunk": "@@ -0,0 +1,34 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_PACKAGES_H\n+#define BITCOIN_POLICY_PACKAGES_H\n+\n+#include <consensus/validation.h>\n+#include <primitives/transaction.h>\n+\n+#include <vector>\n+\n+/** Default maximum number of transactions in a package. */",
      "path": "src/policy/packages.h",
      "position": 13,
      "original_position": 13,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "in_reply_to_id": 639750478,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "adding in #22084 ",
      "created_at": "2021-05-27T16:06:43Z",
      "updated_at": "2021-05-27T16:06:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r640767581",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/640767581"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 13,
      "original_line": 13,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/640767692",
      "pull_request_review_id": 670376510,
      "id": 640767692,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDc2NzY5Mg==",
      "diff_hunk": "@@ -885,8 +886,11 @@ static RPCHelpMan sendrawtransaction()\n static RPCHelpMan testmempoolaccept()\n {\n     return RPCHelpMan{\"testmempoolaccept\",\n-                \"\\nReturns result of mempool acceptance tests indicating if raw transaction (serialized, hex-encoded) would be accepted by mempool.\\n\"\n-                \"\\nThis checks if the transaction violates the consensus or policy rules.\\n\"\n+                \"\\nReturns result of mempool acceptance tests indicating if raw transaction(s) (serialized, hex-encoded) would be accepted by mempool.\\n\"\n+                \"\\nIf multiple transactions are passed in, parents must come before children and package policies apply: the transactions cannot conflict with any mempool transactions or each other.\\n\"\n+                \"\\nIf one transaction fails, other transactions may not be fully validated (the 'allowed' key will be blank).\\n\"\n+                \"\\nThe maximum number of transactions allowed is 25 (MAX_PACKAGE_COUNT)\\n\"",
      "path": "src/rpc/rawtransaction.cpp",
      "position": 17,
      "original_position": 17,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "in_reply_to_id": 639764754,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done in #22084",
      "created_at": "2021-05-27T16:06:54Z",
      "updated_at": "2021-05-27T16:06:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r640767692",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/640767692"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 892,
      "original_line": 892,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/640767770",
      "pull_request_review_id": 670376607,
      "id": 640767770,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDc2Nzc3MA==",
      "diff_hunk": "@@ -932,62 +940,86 @@ static RPCHelpMan testmempoolaccept()\n         UniValueType(), // VNUM or VSTR, checked inside AmountFromValue()\n     });\n \n-    if (request.params[0].get_array().size() != 1) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array must contain exactly one raw transaction for now\");\n-    }\n-\n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_array()[0].get_str())) {\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n+    const UniValue raw_transactions = request.params[0].get_array();\n+    if (raw_transactions.size() < 1 || raw_transactions.size() > MAX_PACKAGE_COUNT) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER,\n+                           \"Array must contain between 1 and \" + ToString(MAX_PACKAGE_COUNT) + \" transactions.\");\n     }\n-    CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n \n     const CFeeRate max_raw_tx_fee_rate = request.params[1].isNull() ?\n                                              DEFAULT_MAX_RAW_TX_FEE_RATE :\n                                              CFeeRate(AmountFromValue(request.params[1]));\n \n-    NodeContext& node = EnsureAnyNodeContext(request.context);\n+    std::vector<CTransactionRef> txns;",
      "path": "src/rpc/rawtransaction.cpp",
      "position": 70,
      "original_position": 70,
      "commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "original_commit_id": "13650fe2e527bf0cf5d977bf5f3f1563b853ecdc",
      "in_reply_to_id": 639799129,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done in #22084",
      "created_at": "2021-05-27T16:06:59Z",
      "updated_at": "2021-05-27T16:06:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r640767770",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/640767770"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 953,
      "original_line": 953,
      "side": "RIGHT"
    }
  ]
}