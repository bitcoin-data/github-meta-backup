{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009",
    "id": 561527961,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NTYxNTI3OTYx",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21009",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/21009.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/21009.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21009",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21009/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/d831e711cab83c70bf2ded62fe33f484844e73dd",
    "number": 21009,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "Remove RewindBlockIndex logic",
    "user": {
      "login": "dhruv",
      "id": 856960,
      "node_id": "MDQ6VXNlcjg1Njk2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dhruv",
      "html_url": "https://github.com/dhruv",
      "followers_url": "https://api.github.com/users/dhruv/followers",
      "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
      "organizations_url": "https://api.github.com/users/dhruv/orgs",
      "repos_url": "https://api.github.com/users/dhruv/repos",
      "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/dhruv/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Closes #17862\r\n\r\nContext from [original comment](https://github.com/bitcoin/bitcoin/issues/17862#issuecomment-744285188) (minor edits):\r\n\r\n`RewindBlockIndex()` is a mechanism to allow nodes to be upgraded after segwit activation, while still keeping their chainstate/datadir in a consistent state. It works as follows:\r\n\r\n- A pre-segwit (i.e. v0.13.0 or older) node is running.\r\n-  Segwit activates. The pre-segwit node remains sync'ed to the tip, but is not enforcing the new segwit rules.\r\n- The user upgrades the node to a segwit-aware version (v0.13.1 or newer).\r\n- On startup, in `AppInitMain()`, `RewindBlockIndex()` is called. This walks the chain backwards from the tip, disconnecting and erasing blocks that from after segwit activation that weren't validated with segwit rules.\r\n- those blocks are then redownloaded (with witness data) and validated with segwit rules.\r\n\r\nThis logic probably isn't required any more since:\r\n\r\n- Segwit activated at height 481824, when the block chain was 130GB and the total number of txs was 250 million. Today, we're at height 667704, the blockchain is over 315GB and the total number of txs is over 600 million. Even if 20% of that added data is witness data (a high estimate), then around 150GB of transactions would need to be rewound to get back to segwit activation height. It'd probably be faster to simply validate from genesis, especially since we won't be validating any scripts before the assumevalid block. It's also unclear whether rewinding 150GB of transactions would even work. It's certainly never been tested.\r\n- Bitcoin Core v0.13 is hardly used any more. https://luke.dashjr.org/programs/bitcoin/files/charts/software.html shows less than 50 nodes running it. The software was EOL on Aug 1st 2018. It's very unlikely that anyone is running 0.13 and will want to upgrade to 0.22.\r\n\r\nThis PR introduces `NeedsRedownload()` which merely checks for insufficiently validated segwit blocks and requests that the user restarts the node with `-reindex`. Reindexing the block files upon restart will make the node rebuild chain state and block index from the `blk*.dat` files on disk. The node won't be able to index the blocks with `BLOCK_OPT_WITNESS`, so they will be missing from the chain and be re-downloaded, with witness data.\r\n\r\nRemoving this code allows the following (done in follow-up #21090):\r\n\r\n- removal of tests using `segwitheight=-1` in `p2p_segwit.py`.\r\n- in turn, that allows us to drop support for `-segwitheight=-1`, which is only supported for that test.\r\n- that allows us to always set `NODE_WITNESS` in our local services. The only reason we don't do that is to support `-segwitheight=-1`.\r\n- that in turn allows us to drop all of the `GetLocalServices() & NODE_WITNESS` checks inside `net_processing.cpp`, since our local services would always include `NODE_WITNESS`\r\n\r\n",
    "labels": [
      {
        "id": 97470796,
        "node_id": "MDU6TGFiZWw5NzQ3MDc5Ng==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/UTXO%20Db%20and%20Indexes",
        "name": "UTXO Db and Indexes",
        "color": "fbca04",
        "default": false
      },
      {
        "id": 118379652,
        "node_id": "MDU6TGFiZWwxMTgzNzk2NTI=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Validation",
        "name": "Validation",
        "color": "6060aa",
        "default": false
      }
    ],
    "active_lock_reason": "resolved",
    "created_at": "2021-01-26T04:53:23Z",
    "updated_at": "2022-08-16T17:21:12Z",
    "closed_at": "2021-04-27T08:15:39Z",
    "mergeable_state": "unknown",
    "merged_at": "2021-04-27T08:15:39Z",
    "merge_commit_sha": "19a56d1519fb493c3e1bd5cad55360b6b80fa52b",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "dhruv:rewindblockindex-2021",
      "ref": "rewindblockindex-2021",
      "sha": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "user": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 286919086,
        "node_id": "MDEwOlJlcG9zaXRvcnkyODY5MTkwODY=",
        "name": "bitcoin",
        "full_name": "dhruv/bitcoin",
        "owner": {
          "login": "dhruv",
          "id": 856960,
          "node_id": "MDQ6VXNlcjg1Njk2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/dhruv",
          "html_url": "https://github.com/dhruv",
          "followers_url": "https://api.github.com/users/dhruv/followers",
          "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
          "organizations_url": "https://api.github.com/users/dhruv/orgs",
          "repos_url": "https://api.github.com/users/dhruv/repos",
          "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/dhruv/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/dhruv/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/dhruv/bitcoin",
        "archive_url": "https://api.github.com/repos/dhruv/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/dhruv/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/dhruv/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/dhruv/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/dhruv/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/dhruv/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/dhruv/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/dhruv/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/dhruv/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/dhruv/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/dhruv/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/dhruv/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/dhruv/bitcoin/events",
        "forks_url": "https://api.github.com/repos/dhruv/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/dhruv/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/dhruv/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/dhruv/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/dhruv/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/dhruv/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/dhruv/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/dhruv/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/dhruv/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/dhruv/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/dhruv/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/dhruv/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/dhruv/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/dhruv/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/dhruv/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/dhruv/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:dhruv/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/dhruv/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/dhruv/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/dhruv/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/dhruv/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/dhruv/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/dhruv/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/dhruv/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/dhruv/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/dhruv/bitcoin/hooks",
        "svn_url": "https://github.com/dhruv/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 1,
        "stargazers_count": 2,
        "watchers_count": 2,
        "size": 217679,
        "default_branch": "master",
        "open_issues_count": 1,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-03-21T04:04:31Z",
        "created_at": "2020-08-12T04:49:16Z",
        "updated_at": "2022-11-08T22:13:25Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "e7776e20ed0ddf41d15b3d2df87a92ea6666226c",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69819,
        "watchers_count": 69819,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T22:42:00Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-07T04:47:18Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 43,
    "deletions": 165,
    "changed_files": 4,
    "commits": 1,
    "review_comments": 81,
    "comments": 34
  },
  "events": [
    {
      "event": "labeled",
      "id": 4248906519,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQyNDg5MDY1MTk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4248906519",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-26T04:54:25Z",
      "label": {
        "name": "Validation",
        "color": "6060aa"
      }
    },
    {
      "event": "commented",
      "id": 767419355,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc2NzQxOTM1NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/767419355",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-26T09:32:39Z",
      "updated_at": "2021-04-19T13:54:34Z",
      "author_association": "MEMBER",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19438 (Introduce deploymentstatus by ajtowns)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#issuecomment-767419355",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21009"
    },
    {
      "event": "commented",
      "id": 767670763,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc2NzY3MDc2Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/767670763",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-26T16:41:08Z",
      "updated_at": "2021-01-26T16:41:08Z",
      "author_association": "MEMBER",
      "body": "Concept ACK",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#issuecomment-767670763",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21009"
    },
    {
      "event": "commented",
      "id": 767798617,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc2Nzc5ODYxNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/767798617",
      "actor": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-26T20:11:48Z",
      "updated_at": "2021-01-26T20:11:48Z",
      "author_association": "MEMBER",
      "body": "The linter was failing on all pull requests with the same error when I pushed so it is likely unrelated to the commits here and will get resolved with the next push. Ready for review.",
      "user": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#issuecomment-767798617",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21009"
    },
    {
      "event": "commented",
      "id": 767828931,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc2NzgyODkzMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/767828931",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-26T21:08:49Z",
      "updated_at": "2021-01-26T21:08:49Z",
      "author_association": "CONTRIBUTOR",
      "body": "@dhruv Rebase on `master` and the `boost/thread/mutex.hpp` warning will go away: it was fixed in #21010 :)",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#issuecomment-767828931",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21009"
    },
    {
      "event": "mentioned",
      "id": 4252746503,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDI1Mjc0NjUwMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4252746503",
      "actor": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-26T21:08:49Z"
    },
    {
      "event": "subscribed",
      "id": 4252746504,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQyNTI3NDY1MDQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4252746504",
      "actor": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-26T21:08:49Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4252946321,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDI1Mjk0NjMyMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4252946321",
      "actor": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-26T22:04:05Z"
    },
    {
      "event": "commented",
      "id": 767865079,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc2Nzg2NTA3OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/767865079",
      "actor": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-26T22:20:08Z",
      "updated_at": "2021-01-26T22:20:08Z",
      "author_association": "MEMBER",
      "body": "Rebased against master and linter is passing. Thanks, @practicalswift.",
      "user": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#issuecomment-767865079",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21009"
    },
    {
      "event": "mentioned",
      "id": 4252999253,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDI1Mjk5OTI1Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4252999253",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-26T22:20:09Z"
    },
    {
      "event": "subscribed",
      "id": 4252999259,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQyNTI5OTkyNTk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4252999259",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-26T22:20:09Z"
    },
    {
      "event": "labeled",
      "id": 4257041663,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQyNTcwNDE2NjM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4257041663",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-27T17:18:50Z",
      "label": {
        "name": "UTXO Db and Indexes",
        "color": "fbca04"
      }
    },
    {
      "event": "commented",
      "id": 768520278,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc2ODUyMDI3OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/768520278",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-27T19:25:17Z",
      "updated_at": "2021-01-27T19:25:17Z",
      "author_association": "MEMBER",
      "body": "Concept ACK",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#issuecomment-768520278",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21009"
    },
    {
      "event": "reviewed",
      "id": 577657131,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc3NjU3MTMx",
      "url": null,
      "actor": null,
      "commit_id": "7c919a15ab9efc576fb073f8069225e02ab26ed0",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK",
      "user": {
        "login": "ccdle12",
        "id": 18324680,
        "node_id": "MDQ6VXNlcjE4MzI0Njgw",
        "avatar_url": "https://avatars.githubusercontent.com/u/18324680?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ccdle12",
        "html_url": "https://github.com/ccdle12",
        "followers_url": "https://api.github.com/users/ccdle12/followers",
        "following_url": "https://api.github.com/users/ccdle12/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ccdle12/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ccdle12/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ccdle12/subscriptions",
        "organizations_url": "https://api.github.com/users/ccdle12/orgs",
        "repos_url": "https://api.github.com/users/ccdle12/repos",
        "events_url": "https://api.github.com/users/ccdle12/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ccdle12/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#pullrequestreview-577657131",
      "submitted_at": "2021-01-27T19:47:07Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4257981438,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDI1Nzk4MTQzOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4257981438",
      "actor": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-27T21:12:26Z"
    },
    {
      "event": "commented",
      "id": 768580874,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc2ODU4MDg3NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/768580874",
      "actor": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-27T21:13:19Z",
      "updated_at": "2021-01-27T21:13:19Z",
      "author_association": "MEMBER",
      "body": "Thanks for the review @ccdle12. Comments addressed. Ready for further review.",
      "user": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#issuecomment-768580874",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21009"
    },
    {
      "event": "mentioned",
      "id": 4257984714,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDI1Nzk4NDcxNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4257984714",
      "actor": {
        "login": "ccdle12",
        "id": 18324680,
        "node_id": "MDQ6VXNlcjE4MzI0Njgw",
        "avatar_url": "https://avatars.githubusercontent.com/u/18324680?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ccdle12",
        "html_url": "https://github.com/ccdle12",
        "followers_url": "https://api.github.com/users/ccdle12/followers",
        "following_url": "https://api.github.com/users/ccdle12/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ccdle12/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ccdle12/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ccdle12/subscriptions",
        "organizations_url": "https://api.github.com/users/ccdle12/orgs",
        "repos_url": "https://api.github.com/users/ccdle12/repos",
        "events_url": "https://api.github.com/users/ccdle12/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ccdle12/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-27T21:13:19Z"
    },
    {
      "event": "subscribed",
      "id": 4257984720,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQyNTc5ODQ3MjA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4257984720",
      "actor": {
        "login": "ccdle12",
        "id": 18324680,
        "node_id": "MDQ6VXNlcjE4MzI0Njgw",
        "avatar_url": "https://avatars.githubusercontent.com/u/18324680?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ccdle12",
        "html_url": "https://github.com/ccdle12",
        "followers_url": "https://api.github.com/users/ccdle12/followers",
        "following_url": "https://api.github.com/users/ccdle12/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ccdle12/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ccdle12/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ccdle12/subscriptions",
        "organizations_url": "https://api.github.com/users/ccdle12/orgs",
        "repos_url": "https://api.github.com/users/ccdle12/repos",
        "events_url": "https://api.github.com/users/ccdle12/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ccdle12/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-27T21:13:19Z"
    },
    {
      "event": "commented",
      "id": 769411959,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc2OTQxMTk1OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/769411959",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-28T21:30:44Z",
      "updated_at": "2021-01-28T21:30:44Z",
      "author_association": "MEMBER",
      "body": "Makes sense, if the rationale was simply to ensure the block gets redownloaded.\r\n\r\nIf we focus on validation, however, we would want this around for Taproot. But I'm not sure that's what its purpose is.\r\n\r\nRe-validating blocks on upgrade seems like a feature we don't have today, and should be implemented separately from this (without redownloading).\r\n\r\n(Therefore, Concept ACK)",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#issuecomment-769411959",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21009"
    },
    {
      "event": "commented",
      "id": 769531849,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc2OTUzMTg0OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/769531849",
      "actor": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-29T02:29:44Z",
      "updated_at": "2021-01-29T02:29:44Z",
      "author_association": "MEMBER",
      "body": "@luke-jr You're right, the removed code erases insufficiently validated blocks (which do not have witness data and can't be properly validated by a segwit-aware node) and re-downloads them. AFAICT, with Taproot, the post-activation blocks will have witness data, so we'll need to implement a different function to re-validate the insufficiently validated blocks after upgrade.",
      "user": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#issuecomment-769531849",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21009"
    },
    {
      "event": "mentioned",
      "id": 4264100357,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDI2NDEwMDM1Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4264100357",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-29T02:29:45Z"
    },
    {
      "event": "subscribed",
      "id": 4264100359,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQyNjQxMDAzNTk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4264100359",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-29T02:29:45Z"
    },
    {
      "event": "commented",
      "id": 771202654,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc3MTIwMjY1NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/771202654",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-01T22:24:53Z",
      "updated_at": "2021-02-01T22:24:53Z",
      "author_association": "MEMBER",
      "body": "Concept ACK.",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#issuecomment-771202654",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21009"
    },
    {
      "event": "reviewed",
      "id": 581426224,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTgxNDI2MjI0",
      "url": null,
      "actor": null,
      "commit_id": "79970c929131855666995564f7dfc3c62f5d5d31",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK. I think it might make sense to split this into two PRs. The second commit is quite large and makes a lot of changes.",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#pullrequestreview-581426224",
      "submitted_at": "2021-02-02T14:55:29Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
    },
    {
      "event": "reviewed",
      "id": 582290452,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTgyMjkwNDUy",
      "url": null,
      "actor": null,
      "commit_id": "bf5c3e132775f648b3b1ca5608406fb34e0cbf45",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "> If we focus on validation, however, we would want this around for Taproot. But I'm not sure that's what its purpose is.\r\n\r\nI don't think we need it for Taproot as it doesn't introduce new consensus data but extend meaning of already existing witness ?\r\n\r\nWe might need again that kind of logic in the future when we do have a soft-fork introducing new consensus data but AFAIK there is no such studied proposal. And if this happen I hope we can be smarter to avoid re-downloading.",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#pullrequestreview-582290452",
      "submitted_at": "2021-02-03T13:25:38Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4297877144,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDI5Nzg3NzE0NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4297877144",
      "actor": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-05T20:28:01Z"
    },
    {
      "event": "commented",
      "id": 774384254,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc3NDM4NDI1NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/774384254",
      "actor": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-06T02:42:35Z",
      "updated_at": "2021-02-06T02:42:35Z",
      "author_association": "MEMBER",
      "body": "Comments addressed. The second commit has been broken out into #21090. Ready for further review.",
      "user": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#issuecomment-774384254",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21009"
    },
    {
      "event": "reviewed",
      "id": 585342914,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTg1MzQyOTE0",
      "url": null,
      "actor": null,
      "commit_id": "9bae47d529c11b7b87a2a78ccd38ae8bcc60da3c",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#pullrequestreview-585342914",
      "submitted_at": "2021-02-08T10:25:38Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4304693566,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDMwNDY5MzU2Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4304693566",
      "actor": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-08T17:23:21Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4304846869,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDMwNDg0Njg2OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4304846869",
      "actor": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-08T17:55:10Z"
    },
    {
      "event": "commented",
      "id": 775536087,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc3NTUzNjA4Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/775536087",
      "actor": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-08T23:35:37Z",
      "updated_at": "2021-02-08T23:35:37Z",
      "author_association": "MEMBER",
      "body": "Comments addressed. Rebased. Ready for further review.",
      "user": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#issuecomment-775536087",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21009"
    },
    {
      "event": "commented",
      "id": 778592210,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc3ODU5MjIxMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/778592210",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-13T09:51:09Z",
      "updated_at": "2021-02-13T09:51:09Z",
      "author_association": "MEMBER",
      "body": "Code review ACK 0af05b95e9c829ff581bb76a0998b5a90386e27a",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#issuecomment-778592210",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21009"
    },
    {
      "event": "reviewed",
      "id": 589966686,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTg5OTY2Njg2",
      "url": null,
      "actor": null,
      "commit_id": "0af05b95e9c829ff581bb76a0998b5a90386e27a",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Code Review ACK 0af05b95 pending on comment about error message.",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#pullrequestreview-589966686",
      "submitted_at": "2021-02-13T13:03:53Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4329378460,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDMyOTM3ODQ2MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4329378460",
      "actor": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-15T01:14:55Z"
    },
    {
      "event": "commented",
      "id": 778881615,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc3ODg4MTYxNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/778881615",
      "actor": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-15T01:15:44Z",
      "updated_at": "2021-02-15T01:15:44Z",
      "author_association": "MEMBER",
      "body": "Updated to log the blocksdir and chainstate dir to the user so they do not accidentally delete their wallet. Ready for further review.",
      "user": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#issuecomment-778881615",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21009"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4329780863,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDMyOTc4MDg2Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4329780863",
      "actor": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-15T05:13:39Z"
    },
    {
      "event": "reviewed",
      "id": 590402543,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTkwNDAyNTQz",
      "url": null,
      "actor": null,
      "commit_id": "d9370c1c5bfc2305f327fbfecf95072b75a62a75",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#pullrequestreview-590402543",
      "submitted_at": "2021-02-15T11:45:04Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
    },
    {
      "event": "commented",
      "id": 779393307,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc3OTM5MzMwNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/779393307",
      "actor": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-15T18:40:21Z",
      "updated_at": "2021-02-15T18:40:41Z",
      "author_association": "MEMBER",
      "body": "Force pushed  d9370c1  to fix failing test.",
      "user": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#issuecomment-779393307",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21009"
    },
    {
      "event": "commented",
      "id": 779793151,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc3OTc5MzE1MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/779793151",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-16T12:03:29Z",
      "updated_at": "2021-02-16T12:03:29Z",
      "author_association": "MEMBER",
      "body": "Code Review ACK d9370c1, thanks for taking the suggestion, Marco one sounds fine to me if you want to take it.",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#issuecomment-779793151",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21009"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4337097791,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDMzNzA5Nzc5MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4337097791",
      "actor": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-16T16:26:27Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4337145643,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDMzNzE0NTY0Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4337145643",
      "actor": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-16T16:35:32Z"
    },
    {
      "event": "reviewed",
      "id": 591413118,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTkxNDEzMTE4",
      "url": null,
      "actor": null,
      "commit_id": "361300e038b4d8b13f76309c8d85b5832d850974",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#pullrequestreview-591413118",
      "submitted_at": "2021-02-16T16:39:24Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4337186876,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDMzNzE4Njg3Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4337186876",
      "actor": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-16T16:43:53Z"
    },
    {
      "event": "commented",
      "id": 779964042,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc3OTk2NDA0Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/779964042",
      "actor": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-16T16:46:00Z",
      "updated_at": "2021-02-16T16:46:00Z",
      "author_association": "MEMBER",
      "body": "Force pushed to use `-reindex` instead of asking the user to delete blocks dir and chainstatedir. Ready for further review!",
      "user": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#issuecomment-779964042",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21009"
    },
    {
      "event": "reviewed",
      "id": 591472314,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTkxNDcyMzE0",
      "url": null,
      "actor": null,
      "commit_id": "5e818578524ee8419bcaf610cf1394817d867663",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "utACK 5e818578524ee8419bcaf610cf1394817d867663\r\n\r\nThe CI failure seemed unrelated. I've restarted it.",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#pullrequestreview-591472314",
      "submitted_at": "2021-02-16T17:44:14Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
    },
    {
      "event": "reviewed",
      "id": 593912765,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTkzOTEyNzY1",
      "url": null,
      "actor": null,
      "commit_id": "5e818578524ee8419bcaf610cf1394817d867663",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Here's some suggested changes. Looks good to me though.",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#pullrequestreview-593912765",
      "submitted_at": "2021-02-20T05:19:15Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4385356070,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDM4NTM1NjA3MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4385356070",
      "actor": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-27T20:18:50Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4385361088,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDM4NTM2MTA4OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4385361088",
      "actor": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-27T20:25:13Z"
    },
    {
      "event": "commented",
      "id": 787130699,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc4NzEzMDY5OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/787130699",
      "actor": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-27T20:28:48Z",
      "updated_at": "2021-02-27T20:28:48Z",
      "author_association": "MEMBER",
      "body": "Thanks for the reviews @ajtowns and @jnewbery. My apologies on the delay. Our twins arrived a few days ago so we are still finding our new routine :)\r\n\r\nComments addressed. Ready for further review.",
      "user": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#issuecomment-787130699",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21009"
    },
    {
      "event": "mentioned",
      "id": 4385364074,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDM4NTM2NDA3NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4385364074",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-27T20:28:48Z"
    },
    {
      "event": "subscribed",
      "id": 4385364076,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQzODUzNjQwNzY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4385364076",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-27T20:28:48Z"
    },
    {
      "event": "mentioned",
      "id": 4385364078,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDM4NTM2NDA3OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4385364078",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-27T20:28:48Z"
    },
    {
      "event": "subscribed",
      "id": 4385364080,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQzODUzNjQwODA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4385364080",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-27T20:28:48Z"
    },
    {
      "event": "commented",
      "id": 787459091,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc4NzQ1OTA5MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/787459091",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-28T14:14:06Z",
      "updated_at": "2021-02-28T14:14:06Z",
      "author_association": "MEMBER",
      "body": "utACK e750a774b8375dcbab9b804e2fd1334f1f62d6e4",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#issuecomment-787459091",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21009"
    },
    {
      "event": "labeled",
      "id": 4408276532,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQ0MDgyNzY1MzI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4408276532",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-04T14:11:33Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4409150632,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDQwOTE1MDYzMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4409150632",
      "actor": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-04T16:48:01Z"
    },
    {
      "event": "commented",
      "id": 790800340,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc5MDgwMDM0MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/790800340",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-04T17:42:00Z",
      "updated_at": "2021-03-04T17:42:00Z",
      "author_association": "MEMBER",
      "body": "Your latest rebase has reintroduced the `EraseBlockData()` declaration in validation.h L776.",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#issuecomment-790800340",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21009"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4409492159,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDQwOTQ5MjE1OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4409492159",
      "actor": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-04T17:56:06Z"
    },
    {
      "event": "commented",
      "id": 790809870,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc5MDgwOTg3MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/790809870",
      "actor": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-04T17:56:23Z",
      "updated_at": "2021-03-04T18:08:12Z",
      "author_association": "MEMBER",
      "body": "Ah, yes. I was just fixing it while you noticed as well. Thanks, @jnewbery. Rebased. Ready for further review.",
      "user": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#issuecomment-790809870",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21009"
    },
    {
      "event": "mentioned",
      "id": 4409493597,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDQwOTQ5MzU5Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4409493597",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-04T17:56:24Z"
    },
    {
      "event": "subscribed",
      "id": 4409493605,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQ0MDk0OTM2MDU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4409493605",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-04T17:56:24Z"
    },
    {
      "event": "commented",
      "id": 790817719,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc5MDgxNzcxOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/790817719",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-04T18:07:42Z",
      "updated_at": "2021-03-04T18:07:42Z",
      "author_association": "MEMBER",
      "body": "utACK 1aecaac8b46a936634245739efff852f03c32b55",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#issuecomment-790817719",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21009"
    },
    {
      "event": "unlabeled",
      "id": 4409607576,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDQwOTYwNzU3Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4409607576",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-04T18:21:44Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 794115862,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc5NDExNTg2Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/794115862",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-09T16:22:52Z",
      "updated_at": "2021-03-09T16:22:52Z",
      "author_association": "MEMBER",
      "body": "Code Review ACK 1aecaac",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#issuecomment-794115862",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21009"
    },
    {
      "event": "reviewed",
      "id": 608827427,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjA4ODI3NDI3",
      "url": null,
      "actor": null,
      "commit_id": "1aecaac8b46a936634245739efff852f03c32b55",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Tested Approach ACK, a few non-blocking thoughts below",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#pullrequestreview-608827427",
      "submitted_at": "2021-03-10T15:21:54Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
    },
    {
      "event": "reviewed",
      "id": 608838809,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjA4ODM4ODA5",
      "url": null,
      "actor": null,
      "commit_id": "1aecaac8b46a936634245739efff852f03c32b55",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#pullrequestreview-608838809",
      "submitted_at": "2021-03-10T15:24:06Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
    },
    {
      "event": "labeled",
      "id": 4444536826,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQ0NDQ1MzY4MjY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4444536826",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-11T12:46:25Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4447328532,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDQ0NzMyODUzMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4447328532",
      "actor": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-11T20:29:54Z"
    },
    {
      "event": "commented",
      "id": 797033840,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc5NzAzMzg0MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/797033840",
      "actor": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-11T20:39:36Z",
      "updated_at": "2021-03-11T21:17:19Z",
      "author_association": "MEMBER",
      "body": "Thank you for the review @jonatack. Comments addressed. Rebased. Ready for further review.",
      "user": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#issuecomment-797033840",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21009"
    },
    {
      "event": "mentioned",
      "id": 4447367657,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDQ0NzM2NzY1Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4447367657",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-11T20:39:36Z"
    },
    {
      "event": "subscribed",
      "id": 4447367661,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQ0NDczNjc2NjE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4447367661",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-11T20:39:36Z"
    },
    {
      "event": "unlabeled",
      "id": 4447485682,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDQ0NzQ4NTY4Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4447485682",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-11T21:10:27Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 797601858,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc5NzYwMTg1OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/797601858",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-12T16:28:19Z",
      "updated_at": "2021-03-12T16:28:19Z",
      "author_association": "MEMBER",
      "body": "ACK 644827722b9eba8af40576505a3d5444272f29c3 per `git range-diff e0bc27a 1aecaac 6448277` and debug build/ran bitcoind\r\n\r\nSmall suggestion to save a few `getblockcount()` calls, happy to re-ACK if you update. Sorry for not noticing on the first pass:\r\n\r\n<details><summary>suggestion</summary><p>\r\n\r\n```diff\r\n         # All nodes are caught up and node 2 is a pre-segwit node that will soon upgrade.\r\n+        node_2_height = self.nodes[2].getblockcount()\r\n         for n in range(2):\r\n-            assert_equal(self.nodes[n].getblockcount(), self.nodes[2].getblockcount())\r\n+            assert_equal(self.nodes[n].getblockcount(), node_2_height)\r\n             assert softfork_active(self.nodes[n], \"segwit\")\r\n-        assert SEGWIT_HEIGHT < self.nodes[2].getblockcount()\r\n+        assert SEGWIT_HEIGHT < node_2_height\r\n         assert 'segwit' not in self.nodes[2].getblockchaininfo()['softforks']\r\n \r\n         # Restarting node 2 should result in a shutdown because the blockchain consists of\r\n@@ -1981,8 +1982,9 @@ class SegWitTest(BitcoinTestFramework):\r\n         self.sync_blocks(timeout=240)\r\n \r\n         # The upgraded node syncs headers and performs redownload\r\n+        node_2_height = self.nodes[2].getblockcount()\r\n         for n in range(2):\r\n-            assert_equal(self.nodes[n].getblockcount(), self.nodes[2].getblockcount())\r\n+            assert_equal(self.nodes[n].getblockcount(), node_2_height)\r\n```\r\n</p></details>\r\n",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#issuecomment-797601858",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21009"
    },
    {
      "event": "reviewed",
      "id": 610967611,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjEwOTY3NjEx",
      "url": null,
      "actor": null,
      "commit_id": "644827722b9eba8af40576505a3d5444272f29c3",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "utACK 644827722b9eba8af40576505a3d5444272f29c3",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#pullrequestreview-610967611",
      "submitted_at": "2021-03-12T16:43:25Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
    },
    {
      "event": "commented",
      "id": 798992749,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc5ODk5Mjc0OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/798992749",
      "actor": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-14T22:35:16Z",
      "updated_at": "2021-03-14T22:35:16Z",
      "author_association": "MEMBER",
      "body": "> Small suggestion to save a few getblockcount() calls, happy to re-ACK if you update. Sorry for not noticing on the first pass:\r\n\r\nThanks, @jonatack. I will update it if I end up rebasing or addressing other comments.",
      "user": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#issuecomment-798992749",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21009"
    },
    {
      "event": "mentioned",
      "id": 4455808841,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDQ1NTgwODg0MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4455808841",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-14T22:35:16Z"
    },
    {
      "event": "subscribed",
      "id": 4455808843,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQ0NTU4MDg4NDM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4455808843",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-14T22:35:16Z"
    },
    {
      "event": "commented",
      "id": 806880099,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgwNjg4MDA5OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/806880099",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-25T14:45:35Z",
      "updated_at": "2021-03-25T14:45:35Z",
      "author_association": "MEMBER",
      "body": "Concept ACK, will review soon.",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#issuecomment-806880099",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21009"
    },
    {
      "event": "commented",
      "id": 815566835,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgxNTU2NjgzNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/815566835",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-08T08:31:12Z",
      "updated_at": "2021-04-08T08:31:12Z",
      "author_association": "MEMBER",
      "body": "@ariard do you mind re-reviewing this? I believe all of your review comments are addressed.",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#issuecomment-815566835",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21009"
    },
    {
      "event": "mentioned",
      "id": 4567188212,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDU2NzE4ODIxMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4567188212",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-08T08:31:12Z"
    },
    {
      "event": "subscribed",
      "id": 4567188217,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQ1NjcxODgyMTc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4567188217",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-08T08:31:12Z"
    },
    {
      "event": "reviewed",
      "id": 639225816,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjM5MjI1ODE2",
      "url": null,
      "actor": null,
      "commit_id": "644827722b9eba8af40576505a3d5444272f29c3",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK to removing code that's no longer necessary and the simplifications it allows",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#pullrequestreview-639225816",
      "submitted_at": "2021-04-19T19:45:30Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkODMxZTcxMWNhYjgzYzcwYmYyZGVkNjJmZTMzZjQ4NDg0NGU3M2Rk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d831e711cab83c70bf2ded62fe33f484844e73dd",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/d831e711cab83c70bf2ded62fe33f484844e73dd",
      "tree": {
        "sha": "10c6e33cf3a3814dd73ec186d442d217800cb149",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/10c6e33cf3a3814dd73ec186d442d217800cb149"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/92cf3a22e3c79ce28c5cc9dcbc18348c43cbe4d9",
          "sha": "92cf3a22e3c79ce28c5cc9dcbc18348c43cbe4d9",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/92cf3a22e3c79ce28c5cc9dcbc18348c43cbe4d9"
        }
      ],
      "message": "[validation] RewindBlockIndex no longer needed\n\nInstead of rewinding blocks, we request that the user restarts with\n-reindex",
      "committer": {
        "name": "Dhruv Mehta",
        "email": "856960+dhruv@users.noreply.github.com",
        "date": "2021-04-21T23:09:14Z"
      },
      "author": {
        "name": "Dhruv Mehta",
        "email": "856960+dhruv@users.noreply.github.com",
        "date": "2021-01-24T23:14:15Z"
      },
      "sha": "d831e711cab83c70bf2ded62fe33f484844e73dd"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4627665907,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDYyNzY2NTkwNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4627665907",
      "actor": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-21T23:09:35Z"
    },
    {
      "event": "commented",
      "id": 824423176,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgyNDQyMzE3Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/824423176",
      "actor": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-21T23:13:00Z",
      "updated_at": "2021-04-21T23:13:00Z",
      "author_association": "MEMBER",
      "body": "Addressed comments from @glozow and simplified the functional test a bit - previous code was checking segwit activation on all nodes, but we only need the check on the upgrading node. Ready for further review.",
      "user": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#issuecomment-824423176",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21009"
    },
    {
      "event": "mentioned",
      "id": 4627674627,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDYyNzY3NDYyNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4627674627",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-21T23:13:01Z"
    },
    {
      "event": "subscribed",
      "id": 4627674631,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQ2Mjc2NzQ2MzE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4627674631",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-21T23:13:01Z"
    },
    {
      "event": "reviewed",
      "id": 641636847,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjQxNjM2ODQ3",
      "url": null,
      "actor": null,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Looks good generally and I'm very much in favor of this change.",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#pullrequestreview-641636847",
      "submitted_at": "2021-04-21T23:33:59Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
    },
    {
      "event": "reviewed",
      "id": 641721031,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjQxNzIxMDMx",
      "url": null,
      "actor": null,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "utACK d831e711cab83c70bf2ded62fe33f484844e73dd",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#pullrequestreview-641721031",
      "submitted_at": "2021-04-22T02:09:01Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
    },
    {
      "event": "commented",
      "id": 824621163,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgyNDYyMTE2Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/824621163",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-22T07:46:59Z",
      "updated_at": "2021-04-22T07:46:59Z",
      "author_association": "MEMBER",
      "body": "utACK d831e711cab83c70bf2ded62fe33f484844e73dd",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#issuecomment-824621163",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21009"
    },
    {
      "event": "commented",
      "id": 824939591,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgyNDkzOTU5MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/824939591",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-22T15:24:30Z",
      "updated_at": "2021-04-22T15:24:30Z",
      "author_association": "MEMBER",
      "body": "ACK https://github.com/bitcoin/bitcoin/pull/21009/commits/d831e711cab83c70bf2ded62fe33f484844e73dd\r\n\r\nWill be testing locally today.",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#issuecomment-824939591",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21009"
    },
    {
      "event": "commented",
      "id": 825046470,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgyNTA0NjQ3MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/825046470",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-22T17:29:02Z",
      "updated_at": "2021-04-22T17:29:02Z",
      "author_association": "MEMBER",
      "body": "Built and ran tests locally. Grepped around for lingering references and [found a few](https://github.com/jamesob/bitcoin/blob/d831e711cab83c70bf2ded62fe33f484844e73dd/src/chain.h#L185) in documentation that can be cleaned up after this PR. Snapshot activation docs should also be changed in a follow-up PR but the existing logic there is still necessary: we still need to \"fake\" `BLOCK_OPT_WITNESS` in the way that we are now to avoid tripping the new `NeedsRedownload()` check.\r\n\r\nThanks for this change @dhruv. Nice work!",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#issuecomment-825046470",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21009"
    },
    {
      "event": "mentioned",
      "id": 4632381548,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDYzMjM4MTU0OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4632381548",
      "actor": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-22T17:29:02Z"
    },
    {
      "event": "subscribed",
      "id": 4632381559,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQ2MzIzODE1NTk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4632381559",
      "actor": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-22T17:29:02Z"
    },
    {
      "event": "commented",
      "id": 827412064,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgyNzQxMjA2NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/827412064",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-27T08:14:34Z",
      "updated_at": "2021-04-27T08:14:34Z",
      "author_association": "MEMBER",
      "body": "Cursory code review ACK d831e711cab83c70bf2ded62fe33f484844e73dd. Agree with the direction of the change, thanks for simplifying the logic here.",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#issuecomment-827412064",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21009"
    },
    {
      "event": "merged",
      "id": 4649335168,
      "node_id": "MDExOk1lcmdlZEV2ZW50NDY0OTMzNTE2OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4649335168",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "19a56d1519fb493c3e1bd5cad55360b6b80fa52b",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/19a56d1519fb493c3e1bd5cad55360b6b80fa52b",
      "created_at": "2021-04-27T08:15:39Z"
    },
    {
      "event": "closed",
      "id": 4649335191,
      "node_id": "MDExOkNsb3NlZEV2ZW50NDY0OTMzNTE5MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4649335191",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-27T08:15:39Z"
    },
    {
      "event": "referenced",
      "id": 4651047454,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ2NTEwNDc0NTQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4651047454",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "e3a02a794ade6e4a09ddc5dda84483f44d0530c7",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/e3a02a794ade6e4a09ddc5dda84483f44d0530c7",
      "created_at": "2021-04-27T14:01:01Z"
    },
    {
      "event": "commented",
      "id": 830141204,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgzMDE0MTIwNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/830141204",
      "actor": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-30T14:39:49Z",
      "updated_at": "2021-04-30T14:39:49Z",
      "author_association": "MEMBER",
      "body": "> Grepped around for lingering references and [found a few](https://github.com/jamesob/bitcoin/blob/d831e711cab83c70bf2ded62fe33f484844e73dd/src/chain.h#L185) in documentation that can be cleaned up after this PR\r\n\r\n@jamesob I've attempted to update references in #21816",
      "user": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#issuecomment-830141204",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21009"
    },
    {
      "event": "mentioned",
      "id": 4669835672,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDY2OTgzNTY3Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4669835672",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-30T14:39:49Z"
    },
    {
      "event": "subscribed",
      "id": 4669835676,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQ2Njk4MzU2NzY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4669835676",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-30T14:39:49Z"
    },
    {
      "event": "referenced",
      "id": 5056458874,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDUwNTY0NTg4NzQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5056458874",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "5d83e7d714e0b7cafeb2f14892184a9607cb55dc",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d83e7d714e0b7cafeb2f14892184a9607cb55dc",
      "created_at": "2021-07-22T15:36:58Z"
    },
    {
      "event": "referenced",
      "id": 6225462302,
      "node_id": "REFE_lADOABII584vUlw9zwAAAAFzEQQe",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6225462302",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "23e8c702bc95459861183cd9eb927272494a79ca",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23e8c702bc95459861183cd9eb927272494a79ca",
      "created_at": "2022-03-11T15:00:59Z"
    },
    {
      "event": "referenced",
      "id": 6723196387,
      "node_id": "REFE_lADOABII584vUlw9zwAAAAGQu9Xj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6723196387",
      "actor": {
        "login": "gwillen",
        "id": 458997,
        "node_id": "MDQ6VXNlcjQ1ODk5Nw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/458997?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gwillen",
        "html_url": "https://github.com/gwillen",
        "followers_url": "https://api.github.com/users/gwillen/followers",
        "following_url": "https://api.github.com/users/gwillen/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gwillen/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gwillen/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gwillen/subscriptions",
        "organizations_url": "https://api.github.com/users/gwillen/orgs",
        "repos_url": "https://api.github.com/users/gwillen/repos",
        "events_url": "https://api.github.com/users/gwillen/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gwillen/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "95ab1aa7cb3c3b48e42df8e3fba9a1b556575587",
      "commit_url": "https://api.github.com/repos/ElementsProject/elements/commits/95ab1aa7cb3c3b48e42df8e3fba9a1b556575587",
      "created_at": "2022-06-01T21:22:13Z"
    },
    {
      "event": "locked",
      "id": 7199126048,
      "node_id": "LOE_lADOABII584vUlw9zwAAAAGtGfIg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7199126048",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-16T17:21:12Z",
      "lock_reason": "resolved"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565553753",
      "pull_request_review_id": 577657131,
      "id": 565553753,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTU1Mzc1Mw==",
      "diff_hunk": "@@ -4381,143 +4381,19 @@ bool CChainState::ReplayBlocks(const CChainParams& params)\n     return true;\n }\n \n-//! Helper for CChainState::RewindBlockIndex\n-void CChainState::EraseBlockData(CBlockIndex* index)\n+bool CChainState::NeedsIBD(const CChainParams& params)\n {\n-    AssertLockHeld(cs_main);\n-    assert(!m_chain.Contains(index)); // Make sure this block isn't active\n-\n-    // Reduce validity\n-    index->nStatus = std::min<unsigned int>(index->nStatus & BLOCK_VALID_MASK, BLOCK_VALID_TREE) | (index->nStatus & ~BLOCK_VALID_MASK);\n-    // Remove have-data flags.\n-    index->nStatus &= ~(BLOCK_HAVE_DATA | BLOCK_HAVE_UNDO);\n-    // Remove storage location.\n-    index->nFile = 0;\n-    index->nDataPos = 0;\n-    index->nUndoPos = 0;\n-    // Remove various other things\n-    index->nTx = 0;\n-    index->nChainTx = 0;\n-    index->nSequenceId = 0;\n-    // Make sure it gets written.\n-    setDirtyBlockIndex.insert(index);\n-    // Update indexes\n-    setBlockIndexCandidates.erase(index);\n-    auto ret = m_blockman.m_blocks_unlinked.equal_range(index->pprev);\n-    while (ret.first != ret.second) {\n-        if (ret.first->second == index) {\n-            m_blockman.m_blocks_unlinked.erase(ret.first++);\n-        } else {\n-            ++ret.first;\n-        }\n-    }\n-    // Mark parent as eligible for main chain again\n-    if (index->pprev && index->pprev->IsValid(BLOCK_VALID_TRANSACTIONS) && index->pprev->HaveTxsDownloaded()) {\n-        setBlockIndexCandidates.insert(index->pprev);\n-    }\n-}\n-\n-bool CChainState::RewindBlockIndex(const CChainParams& params)\n-{\n-    // Note that during -reindex-chainstate we are called with an empty m_chain!\n-\n-    // First erase all post-segwit blocks without witness not in the main chain,\n-    // as this can we done without costly DisconnectTip calls. Active\n-    // blocks will be dealt with below (releasing cs_main in between).\n-    {\n-        LOCK(cs_main);\n-        for (const auto& entry : m_blockman.m_block_index) {\n-            if (IsWitnessEnabled(entry.second->pprev, params.GetConsensus()) && !(entry.second->nStatus & BLOCK_OPT_WITNESS) && !m_chain.Contains(entry.second)) {\n-                EraseBlockData(entry.second);\n-            }\n-        }\n-    }\n-\n-    // Find what height we need to reorganize to.\n-    CBlockIndex *tip;\n-    int nHeight = 1;\n-    {\n-        LOCK(cs_main);\n-        while (nHeight <= m_chain.Height()) {\n-            // Although SCRIPT_VERIFY_WITNESS is now generally enforced on all\n-            // blocks in ConnectBlock, we don't need to go back and\n-            // re-download/re-verify blocks from before segwit actually activated.\n-            if (IsWitnessEnabled(m_chain[nHeight - 1], params.GetConsensus()) && !(m_chain[nHeight]->nStatus & BLOCK_OPT_WITNESS)) {\n-                break;\n-            }\n-            nHeight++;\n-        }\n-\n-        tip = m_chain.Tip();\n-    }\n-    // nHeight is now the height of the first insufficiently-validated block, or tipheight + 1\n-\n-    BlockValidationState state;\n-    // Loop until the tip is below nHeight, or we reach a pruned block.\n-    while (!ShutdownRequested()) {\n-        {\n-            LOCK(cs_main);\n-            LOCK(m_mempool.cs);\n-            // Make sure nothing changed from under us (this won't happen because RewindBlockIndex runs before importing/network are active)\n-            assert(tip == m_chain.Tip());\n-            if (tip == nullptr || tip->nHeight < nHeight) break;\n-            if (fPruneMode && !(tip->nStatus & BLOCK_HAVE_DATA)) {\n-                // If pruning, don't try rewinding past the HAVE_DATA point;\n-                // since older blocks can't be served anyway, there's\n-                // no need to walk further, and trying to DisconnectTip()\n-                // will fail (and require a needless reindex/redownload\n-                // of the blockchain).\n-                break;\n-            }\n-\n-            // Disconnect block\n-            if (!DisconnectTip(state, params, nullptr)) {\n-                return error(\"RewindBlockIndex: unable to disconnect block at height %i (%s)\", tip->nHeight, state.ToString());\n-            }\n-\n-            // Reduce validity flag and have-data flags.\n-            // We do this after actual disconnecting, otherwise we'll end up writing the lack of data\n-            // to disk before writing the chainstate, resulting in a failure to continue if interrupted.\n-            // Note: If we encounter an insufficiently validated block that\n-            // is on m_chain, it must be because we are a pruning node, and\n-            // this block or some successor doesn't HAVE_DATA, so we were unable to\n-            // rewind all the way.  Blocks remaining on m_chain at this point\n-            // must not have their validity reduced.\n-            EraseBlockData(tip);\n-\n-            tip = tip->pprev;\n-        }\n-        // Make sure the queue of validation callbacks doesn't grow unboundedly.\n-        LimitValidationInterfaceQueue();\n-\n-        // Occasionally flush state to disk.\n-        if (!FlushStateToDisk(params, state, FlushStateMode::PERIODIC)) {\n-            LogPrintf(\"RewindBlockIndex: unable to flush state to disk (%s)\\n\", state.ToString());\n-            return false;\n-        }\n-    }\n-\n     {\n         LOCK(cs_main);\n-        if (m_chain.Tip() != nullptr) {\n-            // We can't prune block index candidates based on our tip if we have\n-            // no tip due to m_chain being empty!\n-            PruneBlockIndexCandidates();\n-\n-            CheckBlockIndex(params.GetConsensus());\n-\n-            // FlushStateToDisk can possibly read ::ChainActive(). Be conservative\n-            // and skip it here, we're about to -reindex-chainstate anyway, so\n-            // it'll get called a bunch real soon.\n-            BlockValidationState state;\n-            if (!FlushStateToDisk(params, state, FlushStateMode::ALWAYS)) {\n-                LogPrintf(\"RewindBlockIndex: unable to flush state to disk (%s)\\n\", state.ToString());\n-                return false;\n+        for (CBlockIndex* block = m_chain.Genesis(); block != nullptr; block = m_chain.Next(block)) {\n+            if (IsWitnessEnabled(block->pprev, params.GetConsensus()) && !(block->nStatus & BLOCK_OPT_WITNESS)) {\n+                // block is insuficiently validated for a segwit client",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 139,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "7c919a15ab9efc576fb073f8069225e02ab26ed0",
      "in_reply_to_id": null,
      "user": {
        "login": "ccdle12",
        "id": 18324680,
        "node_id": "MDQ6VXNlcjE4MzI0Njgw",
        "avatar_url": "https://avatars.githubusercontent.com/u/18324680?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ccdle12",
        "html_url": "https://github.com/ccdle12",
        "followers_url": "https://api.github.com/users/ccdle12/followers",
        "following_url": "https://api.github.com/users/ccdle12/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ccdle12/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ccdle12/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ccdle12/subscriptions",
        "organizations_url": "https://api.github.com/users/ccdle12/orgs",
        "repos_url": "https://api.github.com/users/ccdle12/repos",
        "events_url": "https://api.github.com/users/ccdle12/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ccdle12/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: `insuficiently` -> `insufficiently`",
      "created_at": "2021-01-27T18:52:44Z",
      "updated_at": "2021-04-21T23:09:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r565553753",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565553753"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4390,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565558170",
      "pull_request_review_id": 577657131,
      "id": 565558170,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTU1ODE3MA==",
      "diff_hunk": "@@ -1821,11 +1818,7 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n         }\n     }\n \n-    if (chainparams.GetConsensus().SegwitHeight != std::numeric_limits<int>::max()) {\n-        // Advertise witness capabilities.\n-        // The option to not set NODE_WITNESS is only used in the tests and should be removed.\n-        nLocalServices = ServiceFlags(nLocalServices | NODE_WITNESS);\n-    }\n+    nLocalServices = ServiceFlags(nLocalServices | NODE_WITNESS);",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 44,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "7c919a15ab9efc576fb073f8069225e02ab26ed0",
      "in_reply_to_id": null,
      "user": {
        "login": "ccdle12",
        "id": 18324680,
        "node_id": "MDQ6VXNlcjE4MzI0Njgw",
        "avatar_url": "https://avatars.githubusercontent.com/u/18324680?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ccdle12",
        "html_url": "https://github.com/ccdle12",
        "followers_url": "https://api.github.com/users/ccdle12/followers",
        "following_url": "https://api.github.com/users/ccdle12/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ccdle12/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ccdle12/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ccdle12/subscriptions",
        "organizations_url": "https://api.github.com/users/ccdle12/orgs",
        "repos_url": "https://api.github.com/users/ccdle12/repos",
        "events_url": "https://api.github.com/users/ccdle12/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ccdle12/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: since we are always using the `NODE_WITNESS` flag, would it make sense to pass it on initialization for [nLocalServices](https://github.com/dhruv/bitcoin/blob/rewindblockindex-2021/src/init.cpp#L899)?",
      "created_at": "2021-01-27T18:59:31Z",
      "updated_at": "2021-04-21T23:09:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r565558170",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565558170"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1821,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565636451",
      "pull_request_review_id": 577761956,
      "id": 565636451,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTYzNjQ1MQ==",
      "diff_hunk": "@@ -4381,143 +4381,19 @@ bool CChainState::ReplayBlocks(const CChainParams& params)\n     return true;\n }\n \n-//! Helper for CChainState::RewindBlockIndex\n-void CChainState::EraseBlockData(CBlockIndex* index)\n+bool CChainState::NeedsIBD(const CChainParams& params)\n {\n-    AssertLockHeld(cs_main);\n-    assert(!m_chain.Contains(index)); // Make sure this block isn't active\n-\n-    // Reduce validity\n-    index->nStatus = std::min<unsigned int>(index->nStatus & BLOCK_VALID_MASK, BLOCK_VALID_TREE) | (index->nStatus & ~BLOCK_VALID_MASK);\n-    // Remove have-data flags.\n-    index->nStatus &= ~(BLOCK_HAVE_DATA | BLOCK_HAVE_UNDO);\n-    // Remove storage location.\n-    index->nFile = 0;\n-    index->nDataPos = 0;\n-    index->nUndoPos = 0;\n-    // Remove various other things\n-    index->nTx = 0;\n-    index->nChainTx = 0;\n-    index->nSequenceId = 0;\n-    // Make sure it gets written.\n-    setDirtyBlockIndex.insert(index);\n-    // Update indexes\n-    setBlockIndexCandidates.erase(index);\n-    auto ret = m_blockman.m_blocks_unlinked.equal_range(index->pprev);\n-    while (ret.first != ret.second) {\n-        if (ret.first->second == index) {\n-            m_blockman.m_blocks_unlinked.erase(ret.first++);\n-        } else {\n-            ++ret.first;\n-        }\n-    }\n-    // Mark parent as eligible for main chain again\n-    if (index->pprev && index->pprev->IsValid(BLOCK_VALID_TRANSACTIONS) && index->pprev->HaveTxsDownloaded()) {\n-        setBlockIndexCandidates.insert(index->pprev);\n-    }\n-}\n-\n-bool CChainState::RewindBlockIndex(const CChainParams& params)\n-{\n-    // Note that during -reindex-chainstate we are called with an empty m_chain!\n-\n-    // First erase all post-segwit blocks without witness not in the main chain,\n-    // as this can we done without costly DisconnectTip calls. Active\n-    // blocks will be dealt with below (releasing cs_main in between).\n-    {\n-        LOCK(cs_main);\n-        for (const auto& entry : m_blockman.m_block_index) {\n-            if (IsWitnessEnabled(entry.second->pprev, params.GetConsensus()) && !(entry.second->nStatus & BLOCK_OPT_WITNESS) && !m_chain.Contains(entry.second)) {\n-                EraseBlockData(entry.second);\n-            }\n-        }\n-    }\n-\n-    // Find what height we need to reorganize to.\n-    CBlockIndex *tip;\n-    int nHeight = 1;\n-    {\n-        LOCK(cs_main);\n-        while (nHeight <= m_chain.Height()) {\n-            // Although SCRIPT_VERIFY_WITNESS is now generally enforced on all\n-            // blocks in ConnectBlock, we don't need to go back and\n-            // re-download/re-verify blocks from before segwit actually activated.\n-            if (IsWitnessEnabled(m_chain[nHeight - 1], params.GetConsensus()) && !(m_chain[nHeight]->nStatus & BLOCK_OPT_WITNESS)) {\n-                break;\n-            }\n-            nHeight++;\n-        }\n-\n-        tip = m_chain.Tip();\n-    }\n-    // nHeight is now the height of the first insufficiently-validated block, or tipheight + 1\n-\n-    BlockValidationState state;\n-    // Loop until the tip is below nHeight, or we reach a pruned block.\n-    while (!ShutdownRequested()) {\n-        {\n-            LOCK(cs_main);\n-            LOCK(m_mempool.cs);\n-            // Make sure nothing changed from under us (this won't happen because RewindBlockIndex runs before importing/network are active)\n-            assert(tip == m_chain.Tip());\n-            if (tip == nullptr || tip->nHeight < nHeight) break;\n-            if (fPruneMode && !(tip->nStatus & BLOCK_HAVE_DATA)) {\n-                // If pruning, don't try rewinding past the HAVE_DATA point;\n-                // since older blocks can't be served anyway, there's\n-                // no need to walk further, and trying to DisconnectTip()\n-                // will fail (and require a needless reindex/redownload\n-                // of the blockchain).\n-                break;\n-            }\n-\n-            // Disconnect block\n-            if (!DisconnectTip(state, params, nullptr)) {\n-                return error(\"RewindBlockIndex: unable to disconnect block at height %i (%s)\", tip->nHeight, state.ToString());\n-            }\n-\n-            // Reduce validity flag and have-data flags.\n-            // We do this after actual disconnecting, otherwise we'll end up writing the lack of data\n-            // to disk before writing the chainstate, resulting in a failure to continue if interrupted.\n-            // Note: If we encounter an insufficiently validated block that\n-            // is on m_chain, it must be because we are a pruning node, and\n-            // this block or some successor doesn't HAVE_DATA, so we were unable to\n-            // rewind all the way.  Blocks remaining on m_chain at this point\n-            // must not have their validity reduced.\n-            EraseBlockData(tip);\n-\n-            tip = tip->pprev;\n-        }\n-        // Make sure the queue of validation callbacks doesn't grow unboundedly.\n-        LimitValidationInterfaceQueue();\n-\n-        // Occasionally flush state to disk.\n-        if (!FlushStateToDisk(params, state, FlushStateMode::PERIODIC)) {\n-            LogPrintf(\"RewindBlockIndex: unable to flush state to disk (%s)\\n\", state.ToString());\n-            return false;\n-        }\n-    }\n-\n     {\n         LOCK(cs_main);\n-        if (m_chain.Tip() != nullptr) {\n-            // We can't prune block index candidates based on our tip if we have\n-            // no tip due to m_chain being empty!\n-            PruneBlockIndexCandidates();\n-\n-            CheckBlockIndex(params.GetConsensus());\n-\n-            // FlushStateToDisk can possibly read ::ChainActive(). Be conservative\n-            // and skip it here, we're about to -reindex-chainstate anyway, so\n-            // it'll get called a bunch real soon.\n-            BlockValidationState state;\n-            if (!FlushStateToDisk(params, state, FlushStateMode::ALWAYS)) {\n-                LogPrintf(\"RewindBlockIndex: unable to flush state to disk (%s)\\n\", state.ToString());\n-                return false;\n+        for (CBlockIndex* block = m_chain.Genesis(); block != nullptr; block = m_chain.Next(block)) {\n+            if (IsWitnessEnabled(block->pprev, params.GetConsensus()) && !(block->nStatus & BLOCK_OPT_WITNESS)) {\n+                // block is insuficiently validated for a segwit client",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 139,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "7c919a15ab9efc576fb073f8069225e02ab26ed0",
      "in_reply_to_id": 565553753,
      "user": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2021-01-27T21:12:23Z",
      "updated_at": "2021-04-21T23:09:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r565636451",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565636451"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4390,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565636600",
      "pull_request_review_id": 577762152,
      "id": 565636600,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTYzNjYwMA==",
      "diff_hunk": "@@ -1821,11 +1818,7 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n         }\n     }\n \n-    if (chainparams.GetConsensus().SegwitHeight != std::numeric_limits<int>::max()) {\n-        // Advertise witness capabilities.\n-        // The option to not set NODE_WITNESS is only used in the tests and should be removed.\n-        nLocalServices = ServiceFlags(nLocalServices | NODE_WITNESS);\n-    }\n+    nLocalServices = ServiceFlags(nLocalServices | NODE_WITNESS);",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 44,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "7c919a15ab9efc576fb073f8069225e02ab26ed0",
      "in_reply_to_id": 565558170,
      "user": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That makes sense. Thanks!",
      "created_at": "2021-01-27T21:12:42Z",
      "updated_at": "2021-04-21T23:09:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r565636600",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565636600"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1821,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568664358",
      "pull_request_review_id": 581426224,
      "id": 568664358,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODY2NDM1OA==",
      "diff_hunk": "@@ -1687,26 +1687,23 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n                 break;\n             }\n \n-            bool failed_rewind{false};\n-            // Can't hold cs_main while calling RewindBlockIndex, so retrieve the relevant\n+            bool needs_ibd{false};\n+            // Can't hold cs_main while calling NeedsIBD, so retrieve the relevant",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 16,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "79970c929131855666995564f7dfc3c62f5d5d31",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This isn't true. `NeedsIBD()` grabs cs_main and holds throughout. You could change it to requires cs_main, then run this entire block under one cs_main lock.",
      "created_at": "2021-02-02T14:53:04Z",
      "updated_at": "2021-04-21T23:09:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r568664358",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568664358"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1691,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568665203",
      "pull_request_review_id": 581426224,
      "id": 568665203,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODY2NTIwMw==",
      "diff_hunk": "@@ -673,7 +673,7 @@ class CChainState\n \n     /** Replay blocks that aren't fully applied to the database. */\n     bool ReplayBlocks(const CChainParams& params);\n-    bool RewindBlockIndex(const CChainParams& params) LOCKS_EXCLUDED(cs_main);\n+    bool NeedsIBD(const CChainParams& params) LOCKS_EXCLUDED(cs_main);",
      "path": "src/validation.h",
      "position": null,
      "original_position": 5,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "79970c929131855666995564f7dfc3c62f5d5d31",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Make `[nodiscard]`?",
      "created_at": "2021-02-02T14:54:07Z",
      "updated_at": "2021-04-21T23:09:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r568665203",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568665203"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 676,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568665552",
      "pull_request_review_id": 581426224,
      "id": 568665552,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODY2NTU1Mg==",
      "diff_hunk": "@@ -4381,143 +4381,19 @@ bool CChainState::ReplayBlocks(const CChainParams& params)\n     return true;\n }\n \n-//! Helper for CChainState::RewindBlockIndex\n-void CChainState::EraseBlockData(CBlockIndex* index)\n+bool CChainState::NeedsIBD(const CChainParams& params)\n {\n-    AssertLockHeld(cs_main);\n-    assert(!m_chain.Contains(index)); // Make sure this block isn't active\n-\n-    // Reduce validity\n-    index->nStatus = std::min<unsigned int>(index->nStatus & BLOCK_VALID_MASK, BLOCK_VALID_TREE) | (index->nStatus & ~BLOCK_VALID_MASK);\n-    // Remove have-data flags.\n-    index->nStatus &= ~(BLOCK_HAVE_DATA | BLOCK_HAVE_UNDO);\n-    // Remove storage location.\n-    index->nFile = 0;\n-    index->nDataPos = 0;\n-    index->nUndoPos = 0;\n-    // Remove various other things\n-    index->nTx = 0;\n-    index->nChainTx = 0;\n-    index->nSequenceId = 0;\n-    // Make sure it gets written.\n-    setDirtyBlockIndex.insert(index);\n-    // Update indexes\n-    setBlockIndexCandidates.erase(index);\n-    auto ret = m_blockman.m_blocks_unlinked.equal_range(index->pprev);\n-    while (ret.first != ret.second) {\n-        if (ret.first->second == index) {\n-            m_blockman.m_blocks_unlinked.erase(ret.first++);\n-        } else {\n-            ++ret.first;\n-        }\n-    }\n-    // Mark parent as eligible for main chain again\n-    if (index->pprev && index->pprev->IsValid(BLOCK_VALID_TRANSACTIONS) && index->pprev->HaveTxsDownloaded()) {\n-        setBlockIndexCandidates.insert(index->pprev);\n-    }\n-}\n-\n-bool CChainState::RewindBlockIndex(const CChainParams& params)\n-{\n-    // Note that during -reindex-chainstate we are called with an empty m_chain!\n-\n-    // First erase all post-segwit blocks without witness not in the main chain,\n-    // as this can we done without costly DisconnectTip calls. Active\n-    // blocks will be dealt with below (releasing cs_main in between).\n-    {\n-        LOCK(cs_main);\n-        for (const auto& entry : m_blockman.m_block_index) {\n-            if (IsWitnessEnabled(entry.second->pprev, params.GetConsensus()) && !(entry.second->nStatus & BLOCK_OPT_WITNESS) && !m_chain.Contains(entry.second)) {\n-                EraseBlockData(entry.second);\n-            }\n-        }\n-    }\n-\n-    // Find what height we need to reorganize to.\n-    CBlockIndex *tip;\n-    int nHeight = 1;\n-    {\n-        LOCK(cs_main);\n-        while (nHeight <= m_chain.Height()) {\n-            // Although SCRIPT_VERIFY_WITNESS is now generally enforced on all\n-            // blocks in ConnectBlock, we don't need to go back and\n-            // re-download/re-verify blocks from before segwit actually activated.\n-            if (IsWitnessEnabled(m_chain[nHeight - 1], params.GetConsensus()) && !(m_chain[nHeight]->nStatus & BLOCK_OPT_WITNESS)) {\n-                break;\n-            }\n-            nHeight++;\n-        }\n-\n-        tip = m_chain.Tip();\n-    }\n-    // nHeight is now the height of the first insufficiently-validated block, or tipheight + 1\n-\n-    BlockValidationState state;\n-    // Loop until the tip is below nHeight, or we reach a pruned block.\n-    while (!ShutdownRequested()) {\n-        {\n-            LOCK(cs_main);\n-            LOCK(m_mempool.cs);\n-            // Make sure nothing changed from under us (this won't happen because RewindBlockIndex runs before importing/network are active)\n-            assert(tip == m_chain.Tip());\n-            if (tip == nullptr || tip->nHeight < nHeight) break;\n-            if (fPruneMode && !(tip->nStatus & BLOCK_HAVE_DATA)) {\n-                // If pruning, don't try rewinding past the HAVE_DATA point;\n-                // since older blocks can't be served anyway, there's\n-                // no need to walk further, and trying to DisconnectTip()\n-                // will fail (and require a needless reindex/redownload\n-                // of the blockchain).\n-                break;\n-            }\n-\n-            // Disconnect block\n-            if (!DisconnectTip(state, params, nullptr)) {\n-                return error(\"RewindBlockIndex: unable to disconnect block at height %i (%s)\", tip->nHeight, state.ToString());\n-            }\n-\n-            // Reduce validity flag and have-data flags.\n-            // We do this after actual disconnecting, otherwise we'll end up writing the lack of data\n-            // to disk before writing the chainstate, resulting in a failure to continue if interrupted.\n-            // Note: If we encounter an insufficiently validated block that\n-            // is on m_chain, it must be because we are a pruning node, and\n-            // this block or some successor doesn't HAVE_DATA, so we were unable to\n-            // rewind all the way.  Blocks remaining on m_chain at this point\n-            // must not have their validity reduced.\n-            EraseBlockData(tip);\n-\n-            tip = tip->pprev;\n-        }\n-        // Make sure the queue of validation callbacks doesn't grow unboundedly.\n-        LimitValidationInterfaceQueue();\n-\n-        // Occasionally flush state to disk.\n-        if (!FlushStateToDisk(params, state, FlushStateMode::PERIODIC)) {\n-            LogPrintf(\"RewindBlockIndex: unable to flush state to disk (%s)\\n\", state.ToString());\n-            return false;\n-        }\n-    }\n-\n     {\n         LOCK(cs_main);",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 122,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "79970c929131855666995564f7dfc3c62f5d5d31",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Perhaps just annotate this function as requiring cs_main and assert that it's held.",
      "created_at": "2021-02-02T14:54:31Z",
      "updated_at": "2021-04-21T23:09:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r568665552",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568665552"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4387,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568665869",
      "pull_request_review_id": 581426224,
      "id": 568665869,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODY2NTg2OQ==",
      "diff_hunk": "@@ -4381,143 +4381,19 @@ bool CChainState::ReplayBlocks(const CChainParams& params)\n     return true;\n }\n \n-//! Helper for CChainState::RewindBlockIndex\n-void CChainState::EraseBlockData(CBlockIndex* index)\n+bool CChainState::NeedsIBD(const CChainParams& params)\n {\n-    AssertLockHeld(cs_main);\n-    assert(!m_chain.Contains(index)); // Make sure this block isn't active\n-\n-    // Reduce validity\n-    index->nStatus = std::min<unsigned int>(index->nStatus & BLOCK_VALID_MASK, BLOCK_VALID_TREE) | (index->nStatus & ~BLOCK_VALID_MASK);\n-    // Remove have-data flags.\n-    index->nStatus &= ~(BLOCK_HAVE_DATA | BLOCK_HAVE_UNDO);\n-    // Remove storage location.\n-    index->nFile = 0;\n-    index->nDataPos = 0;\n-    index->nUndoPos = 0;\n-    // Remove various other things\n-    index->nTx = 0;\n-    index->nChainTx = 0;\n-    index->nSequenceId = 0;\n-    // Make sure it gets written.\n-    setDirtyBlockIndex.insert(index);\n-    // Update indexes\n-    setBlockIndexCandidates.erase(index);\n-    auto ret = m_blockman.m_blocks_unlinked.equal_range(index->pprev);\n-    while (ret.first != ret.second) {\n-        if (ret.first->second == index) {\n-            m_blockman.m_blocks_unlinked.erase(ret.first++);\n-        } else {\n-            ++ret.first;\n-        }\n-    }\n-    // Mark parent as eligible for main chain again\n-    if (index->pprev && index->pprev->IsValid(BLOCK_VALID_TRANSACTIONS) && index->pprev->HaveTxsDownloaded()) {\n-        setBlockIndexCandidates.insert(index->pprev);\n-    }\n-}\n-\n-bool CChainState::RewindBlockIndex(const CChainParams& params)\n-{\n-    // Note that during -reindex-chainstate we are called with an empty m_chain!\n-\n-    // First erase all post-segwit blocks without witness not in the main chain,\n-    // as this can we done without costly DisconnectTip calls. Active\n-    // blocks will be dealt with below (releasing cs_main in between).\n-    {\n-        LOCK(cs_main);\n-        for (const auto& entry : m_blockman.m_block_index) {\n-            if (IsWitnessEnabled(entry.second->pprev, params.GetConsensus()) && !(entry.second->nStatus & BLOCK_OPT_WITNESS) && !m_chain.Contains(entry.second)) {\n-                EraseBlockData(entry.second);\n-            }\n-        }\n-    }\n-\n-    // Find what height we need to reorganize to.\n-    CBlockIndex *tip;\n-    int nHeight = 1;\n-    {\n-        LOCK(cs_main);\n-        while (nHeight <= m_chain.Height()) {\n-            // Although SCRIPT_VERIFY_WITNESS is now generally enforced on all\n-            // blocks in ConnectBlock, we don't need to go back and\n-            // re-download/re-verify blocks from before segwit actually activated.\n-            if (IsWitnessEnabled(m_chain[nHeight - 1], params.GetConsensus()) && !(m_chain[nHeight]->nStatus & BLOCK_OPT_WITNESS)) {\n-                break;\n-            }\n-            nHeight++;\n-        }\n-\n-        tip = m_chain.Tip();\n-    }\n-    // nHeight is now the height of the first insufficiently-validated block, or tipheight + 1\n-\n-    BlockValidationState state;\n-    // Loop until the tip is below nHeight, or we reach a pruned block.\n-    while (!ShutdownRequested()) {\n-        {\n-            LOCK(cs_main);\n-            LOCK(m_mempool.cs);\n-            // Make sure nothing changed from under us (this won't happen because RewindBlockIndex runs before importing/network are active)\n-            assert(tip == m_chain.Tip());\n-            if (tip == nullptr || tip->nHeight < nHeight) break;\n-            if (fPruneMode && !(tip->nStatus & BLOCK_HAVE_DATA)) {\n-                // If pruning, don't try rewinding past the HAVE_DATA point;\n-                // since older blocks can't be served anyway, there's\n-                // no need to walk further, and trying to DisconnectTip()\n-                // will fail (and require a needless reindex/redownload\n-                // of the blockchain).\n-                break;\n-            }\n-\n-            // Disconnect block\n-            if (!DisconnectTip(state, params, nullptr)) {\n-                return error(\"RewindBlockIndex: unable to disconnect block at height %i (%s)\", tip->nHeight, state.ToString());\n-            }\n-\n-            // Reduce validity flag and have-data flags.\n-            // We do this after actual disconnecting, otherwise we'll end up writing the lack of data\n-            // to disk before writing the chainstate, resulting in a failure to continue if interrupted.\n-            // Note: If we encounter an insufficiently validated block that\n-            // is on m_chain, it must be because we are a pruning node, and\n-            // this block or some successor doesn't HAVE_DATA, so we were unable to\n-            // rewind all the way.  Blocks remaining on m_chain at this point\n-            // must not have their validity reduced.\n-            EraseBlockData(tip);\n-\n-            tip = tip->pprev;\n-        }\n-        // Make sure the queue of validation callbacks doesn't grow unboundedly.\n-        LimitValidationInterfaceQueue();\n-\n-        // Occasionally flush state to disk.\n-        if (!FlushStateToDisk(params, state, FlushStateMode::PERIODIC)) {\n-            LogPrintf(\"RewindBlockIndex: unable to flush state to disk (%s)\\n\", state.ToString());\n-            return false;\n-        }\n-    }\n-\n     {\n         LOCK(cs_main);\n-        if (m_chain.Tip() != nullptr) {\n-            // We can't prune block index candidates based on our tip if we have\n-            // no tip due to m_chain being empty!\n-            PruneBlockIndexCandidates();\n-\n-            CheckBlockIndex(params.GetConsensus());\n-\n-            // FlushStateToDisk can possibly read ::ChainActive(). Be conservative\n-            // and skip it here, we're about to -reindex-chainstate anyway, so\n-            // it'll get called a bunch real soon.\n-            BlockValidationState state;\n-            if (!FlushStateToDisk(params, state, FlushStateMode::ALWAYS)) {\n-                LogPrintf(\"RewindBlockIndex: unable to flush state to disk (%s)\\n\", state.ToString());\n-                return false;\n+        for (CBlockIndex* block = m_chain.Genesis(); block != nullptr; block = m_chain.Next(block)) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 137,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "79970c929131855666995564f7dfc3c62f5d5d31",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Can you use a range based for loop since you're iterating over all members of this container?",
      "created_at": "2021-02-02T14:54:54Z",
      "updated_at": "2021-04-21T23:09:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r568665869",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568665869"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4388,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/569358290",
      "pull_request_review_id": 582290452,
      "id": 569358290,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTM1ODI5MA==",
      "diff_hunk": "@@ -4381,143 +4381,19 @@ bool CChainState::ReplayBlocks(const CChainParams& params)\n     return true;\n }\n \n-//! Helper for CChainState::RewindBlockIndex\n-void CChainState::EraseBlockData(CBlockIndex* index)\n+bool CChainState::NeedsIBD(const CChainParams& params)\n {\n-    AssertLockHeld(cs_main);\n-    assert(!m_chain.Contains(index)); // Make sure this block isn't active\n-\n-    // Reduce validity\n-    index->nStatus = std::min<unsigned int>(index->nStatus & BLOCK_VALID_MASK, BLOCK_VALID_TREE) | (index->nStatus & ~BLOCK_VALID_MASK);\n-    // Remove have-data flags.\n-    index->nStatus &= ~(BLOCK_HAVE_DATA | BLOCK_HAVE_UNDO);\n-    // Remove storage location.\n-    index->nFile = 0;\n-    index->nDataPos = 0;\n-    index->nUndoPos = 0;\n-    // Remove various other things\n-    index->nTx = 0;\n-    index->nChainTx = 0;\n-    index->nSequenceId = 0;\n-    // Make sure it gets written.\n-    setDirtyBlockIndex.insert(index);\n-    // Update indexes\n-    setBlockIndexCandidates.erase(index);\n-    auto ret = m_blockman.m_blocks_unlinked.equal_range(index->pprev);\n-    while (ret.first != ret.second) {\n-        if (ret.first->second == index) {\n-            m_blockman.m_blocks_unlinked.erase(ret.first++);\n-        } else {\n-            ++ret.first;\n-        }\n-    }\n-    // Mark parent as eligible for main chain again\n-    if (index->pprev && index->pprev->IsValid(BLOCK_VALID_TRANSACTIONS) && index->pprev->HaveTxsDownloaded()) {\n-        setBlockIndexCandidates.insert(index->pprev);\n-    }\n-}\n-\n-bool CChainState::RewindBlockIndex(const CChainParams& params)\n-{\n-    // Note that during -reindex-chainstate we are called with an empty m_chain!\n-\n-    // First erase all post-segwit blocks without witness not in the main chain,\n-    // as this can we done without costly DisconnectTip calls. Active\n-    // blocks will be dealt with below (releasing cs_main in between).\n-    {\n-        LOCK(cs_main);\n-        for (const auto& entry : m_blockman.m_block_index) {\n-            if (IsWitnessEnabled(entry.second->pprev, params.GetConsensus()) && !(entry.second->nStatus & BLOCK_OPT_WITNESS) && !m_chain.Contains(entry.second)) {\n-                EraseBlockData(entry.second);\n-            }\n-        }\n-    }\n-\n-    // Find what height we need to reorganize to.\n-    CBlockIndex *tip;\n-    int nHeight = 1;\n-    {\n-        LOCK(cs_main);\n-        while (nHeight <= m_chain.Height()) {\n-            // Although SCRIPT_VERIFY_WITNESS is now generally enforced on all\n-            // blocks in ConnectBlock, we don't need to go back and\n-            // re-download/re-verify blocks from before segwit actually activated.\n-            if (IsWitnessEnabled(m_chain[nHeight - 1], params.GetConsensus()) && !(m_chain[nHeight]->nStatus & BLOCK_OPT_WITNESS)) {\n-                break;\n-            }\n-            nHeight++;\n-        }\n-\n-        tip = m_chain.Tip();\n-    }\n-    // nHeight is now the height of the first insufficiently-validated block, or tipheight + 1\n-\n-    BlockValidationState state;\n-    // Loop until the tip is below nHeight, or we reach a pruned block.\n-    while (!ShutdownRequested()) {\n-        {\n-            LOCK(cs_main);\n-            LOCK(m_mempool.cs);\n-            // Make sure nothing changed from under us (this won't happen because RewindBlockIndex runs before importing/network are active)\n-            assert(tip == m_chain.Tip());\n-            if (tip == nullptr || tip->nHeight < nHeight) break;\n-            if (fPruneMode && !(tip->nStatus & BLOCK_HAVE_DATA)) {\n-                // If pruning, don't try rewinding past the HAVE_DATA point;\n-                // since older blocks can't be served anyway, there's\n-                // no need to walk further, and trying to DisconnectTip()\n-                // will fail (and require a needless reindex/redownload\n-                // of the blockchain).\n-                break;\n-            }\n-\n-            // Disconnect block\n-            if (!DisconnectTip(state, params, nullptr)) {\n-                return error(\"RewindBlockIndex: unable to disconnect block at height %i (%s)\", tip->nHeight, state.ToString());\n-            }\n-\n-            // Reduce validity flag and have-data flags.\n-            // We do this after actual disconnecting, otherwise we'll end up writing the lack of data\n-            // to disk before writing the chainstate, resulting in a failure to continue if interrupted.\n-            // Note: If we encounter an insufficiently validated block that\n-            // is on m_chain, it must be because we are a pruning node, and\n-            // this block or some successor doesn't HAVE_DATA, so we were unable to\n-            // rewind all the way.  Blocks remaining on m_chain at this point\n-            // must not have their validity reduced.\n-            EraseBlockData(tip);\n-\n-            tip = tip->pprev;\n-        }\n-        // Make sure the queue of validation callbacks doesn't grow unboundedly.\n-        LimitValidationInterfaceQueue();\n-\n-        // Occasionally flush state to disk.\n-        if (!FlushStateToDisk(params, state, FlushStateMode::PERIODIC)) {\n-            LogPrintf(\"RewindBlockIndex: unable to flush state to disk (%s)\\n\", state.ToString());\n-            return false;\n-        }\n-    }\n-\n     {\n         LOCK(cs_main);\n-        if (m_chain.Tip() != nullptr) {\n-            // We can't prune block index candidates based on our tip if we have\n-            // no tip due to m_chain being empty!\n-            PruneBlockIndexCandidates();\n-\n-            CheckBlockIndex(params.GetConsensus());\n-\n-            // FlushStateToDisk can possibly read ::ChainActive(). Be conservative\n-            // and skip it here, we're about to -reindex-chainstate anyway, so\n-            // it'll get called a bunch real soon.\n-            BlockValidationState state;\n-            if (!FlushStateToDisk(params, state, FlushStateMode::ALWAYS)) {\n-                LogPrintf(\"RewindBlockIndex: unable to flush state to disk (%s)\\n\", state.ToString());\n-                return false;\n+        for (CBlockIndex* block = m_chain.Genesis(); block != nullptr; block = m_chain.Next(block)) {\n+            if (IsWitnessEnabled(block->pprev, params.GetConsensus()) && !(block->nStatus & BLOCK_OPT_WITNESS)) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 138,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "bf5c3e132775f648b3b1ca5608406fb34e0cbf45",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Do we really need to iterate on the whole block index from genesis ?\r\n\r\nSegwit activation height has been hardcoded by #16060. I think you can start the witness-valid iteration from the hardcoded height, whatever the network, minus one ?",
      "created_at": "2021-02-03T12:02:36Z",
      "updated_at": "2021-04-21T23:09:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r569358290",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/569358290"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4389,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/569402143",
      "pull_request_review_id": 582290452,
      "id": 569402143,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQwMjE0Mw==",
      "diff_hunk": "@@ -461,11 +461,8 @@ void CRegTestParams::UpdateActivationParametersFromArgs(const ArgsManager& args)\n {\n     if (args.IsArgSet(\"-segwitheight\")) {\n         int64_t height = args.GetArg(\"-segwitheight\", consensus.SegwitHeight);\n-        if (height < -1 || height >= std::numeric_limits<int>::max()) {\n+        if (height < 0 || height >= std::numeric_limits<int>::max()) {",
      "path": "src/chainparams.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "79970c929131855666995564f7dfc3c62f5d5d31",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Can you commit-split the changes around `segwithheight` from the ones around `NODE_WITNESS` ? Better to review any changes in net_processing on their own. ",
      "created_at": "2021-02-03T13:14:29Z",
      "updated_at": "2021-04-21T23:09:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r569402143",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/569402143"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 464,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/569407592",
      "pull_request_review_id": 582290452,
      "id": 569407592,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQwNzU5Mg==",
      "diff_hunk": "@@ -1948,7 +1948,7 @@ void static ProcessGetData(CNode& pfrom, Peer& peer, const CChainParams& chainpa\n \n static uint32_t GetFetchFlags(const CNode& pfrom) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n     uint32_t nFetchFlags = 0;\n-    if ((pfrom.GetLocalServices() & NODE_WITNESS) && State(pfrom.GetId())->fHaveWitness) {\n+    if (State(pfrom.GetId())->fHaveWitness) {",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 14,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "79970c929131855666995564f7dfc3c62f5d5d31",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think this is buggy. Always setting `NODE_WITNESS` to our local service flags doesn't mean we will never meet peers which aren't advertising it. Of course it's unlikely there is that much of those peers deployed but otherwise I believe we'll wrongly unserialize received txn.",
      "created_at": "2021-02-03T13:22:17Z",
      "updated_at": "2021-04-21T23:09:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r569407592",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/569407592"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1951,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/569408004",
      "pull_request_review_id": 582290452,
      "id": 569408004,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQwODAwNA==",
      "diff_hunk": "@@ -2717,7 +2716,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         bool fAnnounceUsingCMPCTBLOCK = false;\n         uint64_t nCMPCTBLOCKVersion = 0;\n         vRecv >> fAnnounceUsingCMPCTBLOCK >> nCMPCTBLOCKVersion;\n-        if (nCMPCTBLOCKVersion == 1 || ((pfrom.GetLocalServices() & NODE_WITNESS) && nCMPCTBLOCKVersion == 2)) {\n+        if (nCMPCTBLOCKVersion == 1 || nCMPCTBLOCKVersion == 2) {",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 33,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "79970c929131855666995564f7dfc3c62f5d5d31",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe better to defer those change to #20799, which will achieve the same IIRC but can be reasoned on their own ?",
      "created_at": "2021-02-03T13:22:57Z",
      "updated_at": "2021-04-21T23:09:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r569408004",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/569408004"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2719,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/569445746",
      "pull_request_review_id": 582407379,
      "id": 569445746,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ0NTc0Ng==",
      "diff_hunk": "@@ -1948,7 +1948,7 @@ void static ProcessGetData(CNode& pfrom, Peer& peer, const CChainParams& chainpa\n \n static uint32_t GetFetchFlags(const CNode& pfrom) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n     uint32_t nFetchFlags = 0;\n-    if ((pfrom.GetLocalServices() & NODE_WITNESS) && State(pfrom.GetId())->fHaveWitness) {\n+    if (State(pfrom.GetId())->fHaveWitness) {",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 14,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "79970c929131855666995564f7dfc3c62f5d5d31",
      "in_reply_to_id": 569407592,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why do you think this is buggy? We'll ~un~serialize using `MSG_WITNESS_FLAG` iff `fHaveWitness` is set to true, which happens if the peer includes `NODE_WITNESS` in its version message.\r\n\r\nEDIT: I wrote \"unserialize\" here when it should be \"serialize\". `GetFetchFlags()` is used to set our serialization when sending messages.",
      "created_at": "2021-02-03T14:15:19Z",
      "updated_at": "2021-04-21T23:09:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r569445746",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/569445746"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1951,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/570231459",
      "pull_request_review_id": 583401585,
      "id": 570231459,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDIzMTQ1OQ==",
      "diff_hunk": "@@ -1948,7 +1948,7 @@ void static ProcessGetData(CNode& pfrom, Peer& peer, const CChainParams& chainpa\n \n static uint32_t GetFetchFlags(const CNode& pfrom) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n     uint32_t nFetchFlags = 0;\n-    if ((pfrom.GetLocalServices() & NODE_WITNESS) && State(pfrom.GetId())->fHaveWitness) {\n+    if (State(pfrom.GetId())->fHaveWitness) {",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 14,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "79970c929131855666995564f7dfc3c62f5d5d31",
      "in_reply_to_id": 569407592,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think we unserialize if `fAllowWitness=true`, `MSG_WITNESS_FLAG` is used by a getdata sender to require serialization of witnesses but not at unserialization itself?\r\n\r\nThat said, you're right that `fHaveWitness` implies they advertise their local services with `NODE_WITNESS`. And those ones are static so it should be good. Further, the conditional could be already reduced to `fHaveWitness` check only, a test node with `-segwitheight== std::numeric_limits<int>::max()` will have `fHaveWitness=false` ?",
      "created_at": "2021-02-04T13:42:23Z",
      "updated_at": "2021-04-21T23:09:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r570231459",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/570231459"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1951,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/570256904",
      "pull_request_review_id": 583435750,
      "id": 570256904,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDI1NjkwNA==",
      "diff_hunk": "@@ -1948,7 +1948,7 @@ void static ProcessGetData(CNode& pfrom, Peer& peer, const CChainParams& chainpa\n \n static uint32_t GetFetchFlags(const CNode& pfrom) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n     uint32_t nFetchFlags = 0;\n-    if ((pfrom.GetLocalServices() & NODE_WITNESS) && State(pfrom.GetId())->fHaveWitness) {\n+    if (State(pfrom.GetId())->fHaveWitness) {",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 14,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "79970c929131855666995564f7dfc3c62f5d5d31",
      "in_reply_to_id": 569407592,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> MSG_WITNESS_FLAG is used by a getdata sender to require serialization of witnesses but not at unserialization itself\r\n\r\nSorry, yes - I wrote \"unserialize\" above when I meant \"serialize\"\r\n\r\n> Further, the conditional could be already reduced to fHaveWitness check only, a test node with -segwitheight== std::numeric_limits<int>::max() will have fHaveWitness=false ?\r\n\r\nI don't think that's right. Before this PR, it's checking that both:\r\n\r\n- we have signaled NODE_WITNESS to the peer\r\n- the peer has signaled NODE_WITNESS to us\r\n\r\nwe can only use witness serialization on the connection when both of those conditions are true.\r\n\r\nAfter this PR, we unconditionally signal NODE_WITNESS to all peers, so we only need to check that they signaled NODE_WITNESS to us (which is what is indicated by fHaveWitness).",
      "created_at": "2021-02-04T14:16:54Z",
      "updated_at": "2021-04-21T23:09:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r570256904",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/570256904"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1951,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/570934275",
      "pull_request_review_id": 584292660,
      "id": 570934275,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDkzNDI3NQ==",
      "diff_hunk": "@@ -1948,7 +1948,7 @@ void static ProcessGetData(CNode& pfrom, Peer& peer, const CChainParams& chainpa\n \n static uint32_t GetFetchFlags(const CNode& pfrom) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n     uint32_t nFetchFlags = 0;\n-    if ((pfrom.GetLocalServices() & NODE_WITNESS) && State(pfrom.GetId())->fHaveWitness) {\n+    if (State(pfrom.GetId())->fHaveWitness) {",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 14,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "79970c929131855666995564f7dfc3c62f5d5d31",
      "in_reply_to_id": 569407592,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Gotcha, reading comment L869 in `src/net_processing.cpp` : \"Note that pnode->GetLocalServices() is a reflection of the local services we were offering when the CNode object was created for this peer\" makes me understood this is _our_ local services, not _their_. Renaming the method `GetAnnouncedToPeerServices` or something similar would be clearer.\r\n\r\nBut further, if our local services are static beyond initialization does it make sense to track them per-peer, the same set of flags should be announced to all our peers during a runtime lifecycle ?\r\n\r\n> we can only use witness serialization on the connection when both of those conditions are true.\r\n\r\nDoes BIP144 really require double opt-in to fetch a tx and its witnesses with a getdata ? Not clear reading the BIP no more the getdata processing code.\r\n\r\n```\r\n            // WTX and WITNESS_TX imply we serialize with witness\r\n            int nSendFlags = (inv.IsMsgTx() ? SERIALIZE_TRANSACTION_NO_WITNESS : 0);\r\n            connman.PushMessage(&pfrom, msgMaker.Make(nSendFlags, NetMsgType::TX, *tx));\r\n```\r\n\r\n",
      "created_at": "2021-02-05T12:28:59Z",
      "updated_at": "2021-04-21T23:09:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r570934275",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/570934275"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1951,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/570991293",
      "pull_request_review_id": 584368593,
      "id": 570991293,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDk5MTI5Mw==",
      "diff_hunk": "@@ -1948,7 +1948,7 @@ void static ProcessGetData(CNode& pfrom, Peer& peer, const CChainParams& chainpa\n \n static uint32_t GetFetchFlags(const CNode& pfrom) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n     uint32_t nFetchFlags = 0;\n-    if ((pfrom.GetLocalServices() & NODE_WITNESS) && State(pfrom.GetId())->fHaveWitness) {\n+    if (State(pfrom.GetId())->fHaveWitness) {",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 14,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "79970c929131855666995564f7dfc3c62f5d5d31",
      "in_reply_to_id": 569407592,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm sure there are lots of improvements that could be made around how we track services (and indeed will be made as part of https://github.com/bitcoin/bitcoin/issues/19398). However, that seems orthogonal to this PR. Here, we just want to ensure that mainnet behaviour is unaffected.",
      "created_at": "2021-02-05T14:08:20Z",
      "updated_at": "2021-04-21T23:09:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r570991293",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/570991293"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1951,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571234335",
      "pull_request_review_id": 584686624,
      "id": 571234335,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTIzNDMzNQ==",
      "diff_hunk": "@@ -1687,26 +1687,23 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n                 break;\n             }\n \n-            bool failed_rewind{false};\n-            // Can't hold cs_main while calling RewindBlockIndex, so retrieve the relevant\n+            bool needs_ibd{false};\n+            // Can't hold cs_main while calling NeedsIBD, so retrieve the relevant",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 16,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "79970c929131855666995564f7dfc3c62f5d5d31",
      "in_reply_to_id": 568664358,
      "user": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2021-02-05T20:34:32Z",
      "updated_at": "2021-04-21T23:09:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r571234335",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571234335"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1691,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571234543",
      "pull_request_review_id": 584686873,
      "id": 571234543,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTIzNDU0Mw==",
      "diff_hunk": "@@ -673,7 +673,7 @@ class CChainState\n \n     /** Replay blocks that aren't fully applied to the database. */\n     bool ReplayBlocks(const CChainParams& params);\n-    bool RewindBlockIndex(const CChainParams& params) LOCKS_EXCLUDED(cs_main);\n+    bool NeedsIBD(const CChainParams& params) LOCKS_EXCLUDED(cs_main);",
      "path": "src/validation.h",
      "position": null,
      "original_position": 5,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "79970c929131855666995564f7dfc3c62f5d5d31",
      "in_reply_to_id": 568665203,
      "user": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Great idea. Done.",
      "created_at": "2021-02-05T20:34:58Z",
      "updated_at": "2021-04-21T23:09:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r571234543",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571234543"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 676,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571234627",
      "pull_request_review_id": 584686986,
      "id": 571234627,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTIzNDYyNw==",
      "diff_hunk": "@@ -4381,143 +4381,19 @@ bool CChainState::ReplayBlocks(const CChainParams& params)\n     return true;\n }\n \n-//! Helper for CChainState::RewindBlockIndex\n-void CChainState::EraseBlockData(CBlockIndex* index)\n+bool CChainState::NeedsIBD(const CChainParams& params)\n {\n-    AssertLockHeld(cs_main);\n-    assert(!m_chain.Contains(index)); // Make sure this block isn't active\n-\n-    // Reduce validity\n-    index->nStatus = std::min<unsigned int>(index->nStatus & BLOCK_VALID_MASK, BLOCK_VALID_TREE) | (index->nStatus & ~BLOCK_VALID_MASK);\n-    // Remove have-data flags.\n-    index->nStatus &= ~(BLOCK_HAVE_DATA | BLOCK_HAVE_UNDO);\n-    // Remove storage location.\n-    index->nFile = 0;\n-    index->nDataPos = 0;\n-    index->nUndoPos = 0;\n-    // Remove various other things\n-    index->nTx = 0;\n-    index->nChainTx = 0;\n-    index->nSequenceId = 0;\n-    // Make sure it gets written.\n-    setDirtyBlockIndex.insert(index);\n-    // Update indexes\n-    setBlockIndexCandidates.erase(index);\n-    auto ret = m_blockman.m_blocks_unlinked.equal_range(index->pprev);\n-    while (ret.first != ret.second) {\n-        if (ret.first->second == index) {\n-            m_blockman.m_blocks_unlinked.erase(ret.first++);\n-        } else {\n-            ++ret.first;\n-        }\n-    }\n-    // Mark parent as eligible for main chain again\n-    if (index->pprev && index->pprev->IsValid(BLOCK_VALID_TRANSACTIONS) && index->pprev->HaveTxsDownloaded()) {\n-        setBlockIndexCandidates.insert(index->pprev);\n-    }\n-}\n-\n-bool CChainState::RewindBlockIndex(const CChainParams& params)\n-{\n-    // Note that during -reindex-chainstate we are called with an empty m_chain!\n-\n-    // First erase all post-segwit blocks without witness not in the main chain,\n-    // as this can we done without costly DisconnectTip calls. Active\n-    // blocks will be dealt with below (releasing cs_main in between).\n-    {\n-        LOCK(cs_main);\n-        for (const auto& entry : m_blockman.m_block_index) {\n-            if (IsWitnessEnabled(entry.second->pprev, params.GetConsensus()) && !(entry.second->nStatus & BLOCK_OPT_WITNESS) && !m_chain.Contains(entry.second)) {\n-                EraseBlockData(entry.second);\n-            }\n-        }\n-    }\n-\n-    // Find what height we need to reorganize to.\n-    CBlockIndex *tip;\n-    int nHeight = 1;\n-    {\n-        LOCK(cs_main);\n-        while (nHeight <= m_chain.Height()) {\n-            // Although SCRIPT_VERIFY_WITNESS is now generally enforced on all\n-            // blocks in ConnectBlock, we don't need to go back and\n-            // re-download/re-verify blocks from before segwit actually activated.\n-            if (IsWitnessEnabled(m_chain[nHeight - 1], params.GetConsensus()) && !(m_chain[nHeight]->nStatus & BLOCK_OPT_WITNESS)) {\n-                break;\n-            }\n-            nHeight++;\n-        }\n-\n-        tip = m_chain.Tip();\n-    }\n-    // nHeight is now the height of the first insufficiently-validated block, or tipheight + 1\n-\n-    BlockValidationState state;\n-    // Loop until the tip is below nHeight, or we reach a pruned block.\n-    while (!ShutdownRequested()) {\n-        {\n-            LOCK(cs_main);\n-            LOCK(m_mempool.cs);\n-            // Make sure nothing changed from under us (this won't happen because RewindBlockIndex runs before importing/network are active)\n-            assert(tip == m_chain.Tip());\n-            if (tip == nullptr || tip->nHeight < nHeight) break;\n-            if (fPruneMode && !(tip->nStatus & BLOCK_HAVE_DATA)) {\n-                // If pruning, don't try rewinding past the HAVE_DATA point;\n-                // since older blocks can't be served anyway, there's\n-                // no need to walk further, and trying to DisconnectTip()\n-                // will fail (and require a needless reindex/redownload\n-                // of the blockchain).\n-                break;\n-            }\n-\n-            // Disconnect block\n-            if (!DisconnectTip(state, params, nullptr)) {\n-                return error(\"RewindBlockIndex: unable to disconnect block at height %i (%s)\", tip->nHeight, state.ToString());\n-            }\n-\n-            // Reduce validity flag and have-data flags.\n-            // We do this after actual disconnecting, otherwise we'll end up writing the lack of data\n-            // to disk before writing the chainstate, resulting in a failure to continue if interrupted.\n-            // Note: If we encounter an insufficiently validated block that\n-            // is on m_chain, it must be because we are a pruning node, and\n-            // this block or some successor doesn't HAVE_DATA, so we were unable to\n-            // rewind all the way.  Blocks remaining on m_chain at this point\n-            // must not have their validity reduced.\n-            EraseBlockData(tip);\n-\n-            tip = tip->pprev;\n-        }\n-        // Make sure the queue of validation callbacks doesn't grow unboundedly.\n-        LimitValidationInterfaceQueue();\n-\n-        // Occasionally flush state to disk.\n-        if (!FlushStateToDisk(params, state, FlushStateMode::PERIODIC)) {\n-            LogPrintf(\"RewindBlockIndex: unable to flush state to disk (%s)\\n\", state.ToString());\n-            return false;\n-        }\n-    }\n-\n     {\n         LOCK(cs_main);",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 122,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "79970c929131855666995564f7dfc3c62f5d5d31",
      "in_reply_to_id": 568665552,
      "user": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2021-02-05T20:35:09Z",
      "updated_at": "2021-04-21T23:09:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r571234627",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571234627"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4387,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571235757",
      "pull_request_review_id": 584688232,
      "id": 571235757,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTIzNTc1Nw==",
      "diff_hunk": "@@ -4381,143 +4381,19 @@ bool CChainState::ReplayBlocks(const CChainParams& params)\n     return true;\n }\n \n-//! Helper for CChainState::RewindBlockIndex\n-void CChainState::EraseBlockData(CBlockIndex* index)\n+bool CChainState::NeedsIBD(const CChainParams& params)\n {\n-    AssertLockHeld(cs_main);\n-    assert(!m_chain.Contains(index)); // Make sure this block isn't active\n-\n-    // Reduce validity\n-    index->nStatus = std::min<unsigned int>(index->nStatus & BLOCK_VALID_MASK, BLOCK_VALID_TREE) | (index->nStatus & ~BLOCK_VALID_MASK);\n-    // Remove have-data flags.\n-    index->nStatus &= ~(BLOCK_HAVE_DATA | BLOCK_HAVE_UNDO);\n-    // Remove storage location.\n-    index->nFile = 0;\n-    index->nDataPos = 0;\n-    index->nUndoPos = 0;\n-    // Remove various other things\n-    index->nTx = 0;\n-    index->nChainTx = 0;\n-    index->nSequenceId = 0;\n-    // Make sure it gets written.\n-    setDirtyBlockIndex.insert(index);\n-    // Update indexes\n-    setBlockIndexCandidates.erase(index);\n-    auto ret = m_blockman.m_blocks_unlinked.equal_range(index->pprev);\n-    while (ret.first != ret.second) {\n-        if (ret.first->second == index) {\n-            m_blockman.m_blocks_unlinked.erase(ret.first++);\n-        } else {\n-            ++ret.first;\n-        }\n-    }\n-    // Mark parent as eligible for main chain again\n-    if (index->pprev && index->pprev->IsValid(BLOCK_VALID_TRANSACTIONS) && index->pprev->HaveTxsDownloaded()) {\n-        setBlockIndexCandidates.insert(index->pprev);\n-    }\n-}\n-\n-bool CChainState::RewindBlockIndex(const CChainParams& params)\n-{\n-    // Note that during -reindex-chainstate we are called with an empty m_chain!\n-\n-    // First erase all post-segwit blocks without witness not in the main chain,\n-    // as this can we done without costly DisconnectTip calls. Active\n-    // blocks will be dealt with below (releasing cs_main in between).\n-    {\n-        LOCK(cs_main);\n-        for (const auto& entry : m_blockman.m_block_index) {\n-            if (IsWitnessEnabled(entry.second->pprev, params.GetConsensus()) && !(entry.second->nStatus & BLOCK_OPT_WITNESS) && !m_chain.Contains(entry.second)) {\n-                EraseBlockData(entry.second);\n-            }\n-        }\n-    }\n-\n-    // Find what height we need to reorganize to.\n-    CBlockIndex *tip;\n-    int nHeight = 1;\n-    {\n-        LOCK(cs_main);\n-        while (nHeight <= m_chain.Height()) {\n-            // Although SCRIPT_VERIFY_WITNESS is now generally enforced on all\n-            // blocks in ConnectBlock, we don't need to go back and\n-            // re-download/re-verify blocks from before segwit actually activated.\n-            if (IsWitnessEnabled(m_chain[nHeight - 1], params.GetConsensus()) && !(m_chain[nHeight]->nStatus & BLOCK_OPT_WITNESS)) {\n-                break;\n-            }\n-            nHeight++;\n-        }\n-\n-        tip = m_chain.Tip();\n-    }\n-    // nHeight is now the height of the first insufficiently-validated block, or tipheight + 1\n-\n-    BlockValidationState state;\n-    // Loop until the tip is below nHeight, or we reach a pruned block.\n-    while (!ShutdownRequested()) {\n-        {\n-            LOCK(cs_main);\n-            LOCK(m_mempool.cs);\n-            // Make sure nothing changed from under us (this won't happen because RewindBlockIndex runs before importing/network are active)\n-            assert(tip == m_chain.Tip());\n-            if (tip == nullptr || tip->nHeight < nHeight) break;\n-            if (fPruneMode && !(tip->nStatus & BLOCK_HAVE_DATA)) {\n-                // If pruning, don't try rewinding past the HAVE_DATA point;\n-                // since older blocks can't be served anyway, there's\n-                // no need to walk further, and trying to DisconnectTip()\n-                // will fail (and require a needless reindex/redownload\n-                // of the blockchain).\n-                break;\n-            }\n-\n-            // Disconnect block\n-            if (!DisconnectTip(state, params, nullptr)) {\n-                return error(\"RewindBlockIndex: unable to disconnect block at height %i (%s)\", tip->nHeight, state.ToString());\n-            }\n-\n-            // Reduce validity flag and have-data flags.\n-            // We do this after actual disconnecting, otherwise we'll end up writing the lack of data\n-            // to disk before writing the chainstate, resulting in a failure to continue if interrupted.\n-            // Note: If we encounter an insufficiently validated block that\n-            // is on m_chain, it must be because we are a pruning node, and\n-            // this block or some successor doesn't HAVE_DATA, so we were unable to\n-            // rewind all the way.  Blocks remaining on m_chain at this point\n-            // must not have their validity reduced.\n-            EraseBlockData(tip);\n-\n-            tip = tip->pprev;\n-        }\n-        // Make sure the queue of validation callbacks doesn't grow unboundedly.\n-        LimitValidationInterfaceQueue();\n-\n-        // Occasionally flush state to disk.\n-        if (!FlushStateToDisk(params, state, FlushStateMode::PERIODIC)) {\n-            LogPrintf(\"RewindBlockIndex: unable to flush state to disk (%s)\\n\", state.ToString());\n-            return false;\n-        }\n-    }\n-\n     {\n         LOCK(cs_main);\n-        if (m_chain.Tip() != nullptr) {\n-            // We can't prune block index candidates based on our tip if we have\n-            // no tip due to m_chain being empty!\n-            PruneBlockIndexCandidates();\n-\n-            CheckBlockIndex(params.GetConsensus());\n-\n-            // FlushStateToDisk can possibly read ::ChainActive(). Be conservative\n-            // and skip it here, we're about to -reindex-chainstate anyway, so\n-            // it'll get called a bunch real soon.\n-            BlockValidationState state;\n-            if (!FlushStateToDisk(params, state, FlushStateMode::ALWAYS)) {\n-                LogPrintf(\"RewindBlockIndex: unable to flush state to disk (%s)\\n\", state.ToString());\n-                return false;\n+        for (CBlockIndex* block = m_chain.Genesis(); block != nullptr; block = m_chain.Next(block)) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 137,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "79970c929131855666995564f7dfc3c62f5d5d31",
      "in_reply_to_id": 568665869,
      "user": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I took @ariard's suggestion and started from the `params.SegwitHeight()` - also changed it to a while loop that reads cleaner.\r\n\r\nOut of curiosity, is a defined `[]` operator all that's needed to use a range-based for loop?",
      "created_at": "2021-02-05T20:36:45Z",
      "updated_at": "2021-04-21T23:09:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r571235757",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571235757"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4388,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571236156",
      "pull_request_review_id": 584688694,
      "id": 571236156,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTIzNjE1Ng==",
      "diff_hunk": "@@ -4381,143 +4381,19 @@ bool CChainState::ReplayBlocks(const CChainParams& params)\n     return true;\n }\n \n-//! Helper for CChainState::RewindBlockIndex\n-void CChainState::EraseBlockData(CBlockIndex* index)\n+bool CChainState::NeedsIBD(const CChainParams& params)\n {\n-    AssertLockHeld(cs_main);\n-    assert(!m_chain.Contains(index)); // Make sure this block isn't active\n-\n-    // Reduce validity\n-    index->nStatus = std::min<unsigned int>(index->nStatus & BLOCK_VALID_MASK, BLOCK_VALID_TREE) | (index->nStatus & ~BLOCK_VALID_MASK);\n-    // Remove have-data flags.\n-    index->nStatus &= ~(BLOCK_HAVE_DATA | BLOCK_HAVE_UNDO);\n-    // Remove storage location.\n-    index->nFile = 0;\n-    index->nDataPos = 0;\n-    index->nUndoPos = 0;\n-    // Remove various other things\n-    index->nTx = 0;\n-    index->nChainTx = 0;\n-    index->nSequenceId = 0;\n-    // Make sure it gets written.\n-    setDirtyBlockIndex.insert(index);\n-    // Update indexes\n-    setBlockIndexCandidates.erase(index);\n-    auto ret = m_blockman.m_blocks_unlinked.equal_range(index->pprev);\n-    while (ret.first != ret.second) {\n-        if (ret.first->second == index) {\n-            m_blockman.m_blocks_unlinked.erase(ret.first++);\n-        } else {\n-            ++ret.first;\n-        }\n-    }\n-    // Mark parent as eligible for main chain again\n-    if (index->pprev && index->pprev->IsValid(BLOCK_VALID_TRANSACTIONS) && index->pprev->HaveTxsDownloaded()) {\n-        setBlockIndexCandidates.insert(index->pprev);\n-    }\n-}\n-\n-bool CChainState::RewindBlockIndex(const CChainParams& params)\n-{\n-    // Note that during -reindex-chainstate we are called with an empty m_chain!\n-\n-    // First erase all post-segwit blocks without witness not in the main chain,\n-    // as this can we done without costly DisconnectTip calls. Active\n-    // blocks will be dealt with below (releasing cs_main in between).\n-    {\n-        LOCK(cs_main);\n-        for (const auto& entry : m_blockman.m_block_index) {\n-            if (IsWitnessEnabled(entry.second->pprev, params.GetConsensus()) && !(entry.second->nStatus & BLOCK_OPT_WITNESS) && !m_chain.Contains(entry.second)) {\n-                EraseBlockData(entry.second);\n-            }\n-        }\n-    }\n-\n-    // Find what height we need to reorganize to.\n-    CBlockIndex *tip;\n-    int nHeight = 1;\n-    {\n-        LOCK(cs_main);\n-        while (nHeight <= m_chain.Height()) {\n-            // Although SCRIPT_VERIFY_WITNESS is now generally enforced on all\n-            // blocks in ConnectBlock, we don't need to go back and\n-            // re-download/re-verify blocks from before segwit actually activated.\n-            if (IsWitnessEnabled(m_chain[nHeight - 1], params.GetConsensus()) && !(m_chain[nHeight]->nStatus & BLOCK_OPT_WITNESS)) {\n-                break;\n-            }\n-            nHeight++;\n-        }\n-\n-        tip = m_chain.Tip();\n-    }\n-    // nHeight is now the height of the first insufficiently-validated block, or tipheight + 1\n-\n-    BlockValidationState state;\n-    // Loop until the tip is below nHeight, or we reach a pruned block.\n-    while (!ShutdownRequested()) {\n-        {\n-            LOCK(cs_main);\n-            LOCK(m_mempool.cs);\n-            // Make sure nothing changed from under us (this won't happen because RewindBlockIndex runs before importing/network are active)\n-            assert(tip == m_chain.Tip());\n-            if (tip == nullptr || tip->nHeight < nHeight) break;\n-            if (fPruneMode && !(tip->nStatus & BLOCK_HAVE_DATA)) {\n-                // If pruning, don't try rewinding past the HAVE_DATA point;\n-                // since older blocks can't be served anyway, there's\n-                // no need to walk further, and trying to DisconnectTip()\n-                // will fail (and require a needless reindex/redownload\n-                // of the blockchain).\n-                break;\n-            }\n-\n-            // Disconnect block\n-            if (!DisconnectTip(state, params, nullptr)) {\n-                return error(\"RewindBlockIndex: unable to disconnect block at height %i (%s)\", tip->nHeight, state.ToString());\n-            }\n-\n-            // Reduce validity flag and have-data flags.\n-            // We do this after actual disconnecting, otherwise we'll end up writing the lack of data\n-            // to disk before writing the chainstate, resulting in a failure to continue if interrupted.\n-            // Note: If we encounter an insufficiently validated block that\n-            // is on m_chain, it must be because we are a pruning node, and\n-            // this block or some successor doesn't HAVE_DATA, so we were unable to\n-            // rewind all the way.  Blocks remaining on m_chain at this point\n-            // must not have their validity reduced.\n-            EraseBlockData(tip);\n-\n-            tip = tip->pprev;\n-        }\n-        // Make sure the queue of validation callbacks doesn't grow unboundedly.\n-        LimitValidationInterfaceQueue();\n-\n-        // Occasionally flush state to disk.\n-        if (!FlushStateToDisk(params, state, FlushStateMode::PERIODIC)) {\n-            LogPrintf(\"RewindBlockIndex: unable to flush state to disk (%s)\\n\", state.ToString());\n-            return false;\n-        }\n-    }\n-\n     {\n         LOCK(cs_main);\n-        if (m_chain.Tip() != nullptr) {\n-            // We can't prune block index candidates based on our tip if we have\n-            // no tip due to m_chain being empty!\n-            PruneBlockIndexCandidates();\n-\n-            CheckBlockIndex(params.GetConsensus());\n-\n-            // FlushStateToDisk can possibly read ::ChainActive(). Be conservative\n-            // and skip it here, we're about to -reindex-chainstate anyway, so\n-            // it'll get called a bunch real soon.\n-            BlockValidationState state;\n-            if (!FlushStateToDisk(params, state, FlushStateMode::ALWAYS)) {\n-                LogPrintf(\"RewindBlockIndex: unable to flush state to disk (%s)\\n\", state.ToString());\n-                return false;\n+        for (CBlockIndex* block = m_chain.Genesis(); block != nullptr; block = m_chain.Next(block)) {\n+            if (IsWitnessEnabled(block->pprev, params.GetConsensus()) && !(block->nStatus & BLOCK_OPT_WITNESS)) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 138,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "bf5c3e132775f648b3b1ca5608406fb34e0cbf45",
      "in_reply_to_id": 569358290,
      "user": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Great idea. Updated to start from `params.SegwitHeight()`",
      "created_at": "2021-02-05T20:37:25Z",
      "updated_at": "2021-04-21T23:09:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r571236156",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571236156"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4389,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571236449",
      "pull_request_review_id": 584689037,
      "id": 571236449,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTIzNjQ0OQ==",
      "diff_hunk": "@@ -461,11 +461,8 @@ void CRegTestParams::UpdateActivationParametersFromArgs(const ArgsManager& args)\n {\n     if (args.IsArgSet(\"-segwitheight\")) {\n         int64_t height = args.GetArg(\"-segwitheight\", consensus.SegwitHeight);\n-        if (height < -1 || height >= std::numeric_limits<int>::max()) {\n+        if (height < 0 || height >= std::numeric_limits<int>::max()) {",
      "path": "src/chainparams.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "79970c929131855666995564f7dfc3c62f5d5d31",
      "in_reply_to_id": 569402143,
      "user": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done - moved the second commit to #21090 and split it up into several there.",
      "created_at": "2021-02-05T20:37:57Z",
      "updated_at": "2021-04-21T23:09:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r571236449",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571236449"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 464,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571238036",
      "pull_request_review_id": 584690961,
      "id": 571238036,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTIzODAzNg==",
      "diff_hunk": "@@ -2717,7 +2716,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         bool fAnnounceUsingCMPCTBLOCK = false;\n         uint64_t nCMPCTBLOCKVersion = 0;\n         vRecv >> fAnnounceUsingCMPCTBLOCK >> nCMPCTBLOCKVersion;\n-        if (nCMPCTBLOCKVersion == 1 || ((pfrom.GetLocalServices() & NODE_WITNESS) && nCMPCTBLOCKVersion == 2)) {\n+        if (nCMPCTBLOCKVersion == 1 || nCMPCTBLOCKVersion == 2) {",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 33,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "79970c929131855666995564f7dfc3c62f5d5d31",
      "in_reply_to_id": 569408004,
      "user": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This diff is now moved to #21090 but I left it in because the check is redundant if this code is merged. IIUC, #20799 eliminates the entire conditional so they can both be reasoned for independently?",
      "created_at": "2021-02-05T20:40:57Z",
      "updated_at": "2021-04-21T23:09:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r571238036",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571238036"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2719,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571711847",
      "pull_request_review_id": 585091048,
      "id": 571711847,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTcxMTg0Nw==",
      "diff_hunk": "@@ -4381,143 +4381,19 @@ bool CChainState::ReplayBlocks(const CChainParams& params)\n     return true;\n }\n \n-//! Helper for CChainState::RewindBlockIndex\n-void CChainState::EraseBlockData(CBlockIndex* index)\n+bool CChainState::NeedsIBD(const CChainParams& params)\n {\n-    AssertLockHeld(cs_main);\n-    assert(!m_chain.Contains(index)); // Make sure this block isn't active\n-\n-    // Reduce validity\n-    index->nStatus = std::min<unsigned int>(index->nStatus & BLOCK_VALID_MASK, BLOCK_VALID_TREE) | (index->nStatus & ~BLOCK_VALID_MASK);\n-    // Remove have-data flags.\n-    index->nStatus &= ~(BLOCK_HAVE_DATA | BLOCK_HAVE_UNDO);\n-    // Remove storage location.\n-    index->nFile = 0;\n-    index->nDataPos = 0;\n-    index->nUndoPos = 0;\n-    // Remove various other things\n-    index->nTx = 0;\n-    index->nChainTx = 0;\n-    index->nSequenceId = 0;\n-    // Make sure it gets written.\n-    setDirtyBlockIndex.insert(index);\n-    // Update indexes\n-    setBlockIndexCandidates.erase(index);\n-    auto ret = m_blockman.m_blocks_unlinked.equal_range(index->pprev);\n-    while (ret.first != ret.second) {\n-        if (ret.first->second == index) {\n-            m_blockman.m_blocks_unlinked.erase(ret.first++);\n-        } else {\n-            ++ret.first;\n-        }\n-    }\n-    // Mark parent as eligible for main chain again\n-    if (index->pprev && index->pprev->IsValid(BLOCK_VALID_TRANSACTIONS) && index->pprev->HaveTxsDownloaded()) {\n-        setBlockIndexCandidates.insert(index->pprev);\n-    }\n-}\n-\n-bool CChainState::RewindBlockIndex(const CChainParams& params)\n-{\n-    // Note that during -reindex-chainstate we are called with an empty m_chain!\n-\n-    // First erase all post-segwit blocks without witness not in the main chain,\n-    // as this can we done without costly DisconnectTip calls. Active\n-    // blocks will be dealt with below (releasing cs_main in between).\n-    {\n-        LOCK(cs_main);\n-        for (const auto& entry : m_blockman.m_block_index) {\n-            if (IsWitnessEnabled(entry.second->pprev, params.GetConsensus()) && !(entry.second->nStatus & BLOCK_OPT_WITNESS) && !m_chain.Contains(entry.second)) {\n-                EraseBlockData(entry.second);\n-            }\n-        }\n-    }\n-\n-    // Find what height we need to reorganize to.\n-    CBlockIndex *tip;\n-    int nHeight = 1;\n-    {\n-        LOCK(cs_main);\n-        while (nHeight <= m_chain.Height()) {\n-            // Although SCRIPT_VERIFY_WITNESS is now generally enforced on all\n-            // blocks in ConnectBlock, we don't need to go back and\n-            // re-download/re-verify blocks from before segwit actually activated.\n-            if (IsWitnessEnabled(m_chain[nHeight - 1], params.GetConsensus()) && !(m_chain[nHeight]->nStatus & BLOCK_OPT_WITNESS)) {\n-                break;\n-            }\n-            nHeight++;\n-        }\n-\n-        tip = m_chain.Tip();\n-    }\n-    // nHeight is now the height of the first insufficiently-validated block, or tipheight + 1\n-\n-    BlockValidationState state;\n-    // Loop until the tip is below nHeight, or we reach a pruned block.\n-    while (!ShutdownRequested()) {\n-        {\n-            LOCK(cs_main);\n-            LOCK(m_mempool.cs);\n-            // Make sure nothing changed from under us (this won't happen because RewindBlockIndex runs before importing/network are active)\n-            assert(tip == m_chain.Tip());\n-            if (tip == nullptr || tip->nHeight < nHeight) break;\n-            if (fPruneMode && !(tip->nStatus & BLOCK_HAVE_DATA)) {\n-                // If pruning, don't try rewinding past the HAVE_DATA point;\n-                // since older blocks can't be served anyway, there's\n-                // no need to walk further, and trying to DisconnectTip()\n-                // will fail (and require a needless reindex/redownload\n-                // of the blockchain).\n-                break;\n-            }\n-\n-            // Disconnect block\n-            if (!DisconnectTip(state, params, nullptr)) {\n-                return error(\"RewindBlockIndex: unable to disconnect block at height %i (%s)\", tip->nHeight, state.ToString());\n-            }\n-\n-            // Reduce validity flag and have-data flags.\n-            // We do this after actual disconnecting, otherwise we'll end up writing the lack of data\n-            // to disk before writing the chainstate, resulting in a failure to continue if interrupted.\n-            // Note: If we encounter an insufficiently validated block that\n-            // is on m_chain, it must be because we are a pruning node, and\n-            // this block or some successor doesn't HAVE_DATA, so we were unable to\n-            // rewind all the way.  Blocks remaining on m_chain at this point\n-            // must not have their validity reduced.\n-            EraseBlockData(tip);\n-\n-            tip = tip->pprev;\n-        }\n-        // Make sure the queue of validation callbacks doesn't grow unboundedly.\n-        LimitValidationInterfaceQueue();\n-\n-        // Occasionally flush state to disk.\n-        if (!FlushStateToDisk(params, state, FlushStateMode::PERIODIC)) {\n-            LogPrintf(\"RewindBlockIndex: unable to flush state to disk (%s)\\n\", state.ToString());\n-            return false;\n-        }\n-    }\n-\n     {\n         LOCK(cs_main);\n-        if (m_chain.Tip() != nullptr) {\n-            // We can't prune block index candidates based on our tip if we have\n-            // no tip due to m_chain being empty!\n-            PruneBlockIndexCandidates();\n-\n-            CheckBlockIndex(params.GetConsensus());\n-\n-            // FlushStateToDisk can possibly read ::ChainActive(). Be conservative\n-            // and skip it here, we're about to -reindex-chainstate anyway, so\n-            // it'll get called a bunch real soon.\n-            BlockValidationState state;\n-            if (!FlushStateToDisk(params, state, FlushStateMode::ALWAYS)) {\n-                LogPrintf(\"RewindBlockIndex: unable to flush state to disk (%s)\\n\", state.ToString());\n-                return false;\n+        for (CBlockIndex* block = m_chain.Genesis(); block != nullptr; block = m_chain.Next(block)) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 137,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "79970c929131855666995564f7dfc3c62f5d5d31",
      "in_reply_to_id": 568665869,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "range-based for loops need an `x.begin()` and `x.end()` (or `begin(x)` and `end(x)`) that return iterators, and the iterators need to accept `++it` and `*it` and be comparable with `!=` -- https://en.cppreference.com/w/cpp/language/range-for ",
      "created_at": "2021-02-07T22:40:49Z",
      "updated_at": "2021-04-21T23:09:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r571711847",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571711847"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4388,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571925434",
      "pull_request_review_id": 585342914,
      "id": 571925434,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTkyNTQzNA==",
      "diff_hunk": "@@ -1686,26 +1686,24 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n                 break;\n             }\n \n-            bool failed_rewind{false};\n-            // Can't hold cs_main while calling RewindBlockIndex, so retrieve the relevant\n-            // chainstates beforehand.\n-            for (CChainState* chainstate : WITH_LOCK(::cs_main, return chainman.GetAll())) {\n-                if (!fReset) {\n-                    // Note that RewindBlockIndex MUST run even if we're about to -reindex-chainstate.\n-                    // It both disconnects blocks based on the chainstate, and drops block data in\n-                    // BlockIndex() based on lack of available witness data.\n-                    uiInterface.InitMessage(_(\"Rewinding blocks...\").translated);\n-                    if (!chainstate->RewindBlockIndex(chainparams)) {\n-                        strLoadError = _(\n-                            \"Unable to rewind the database to a pre-fork state. \"\n-                            \"You will need to redownload the blockchain\");\n-                        failed_rewind = true;\n-                        break; // out of the per-chainstate loop\n+            bool needs_ibd{false};\n+            {\n+                LOCK(cs_main);\n+                for (CChainState* chainstate : chainman.GetAll()) {\n+                    if (!fReset) {\n+                        uiInterface.InitMessage(_(\"Checking if IBD is needed...\").translated);",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "9bae47d529c11b7b87a2a78ccd38ae8bcc60da3c",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This will print the message twice if there are two `CChainState`s.",
      "created_at": "2021-02-08T10:15:02Z",
      "updated_at": "2021-04-21T23:09:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r571925434",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571925434"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1694,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571930294",
      "pull_request_review_id": 585342914,
      "id": 571930294,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTkzMDI5NA==",
      "diff_hunk": "@@ -1686,26 +1686,24 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n                 break;\n             }\n \n-            bool failed_rewind{false};\n-            // Can't hold cs_main while calling RewindBlockIndex, so retrieve the relevant\n-            // chainstates beforehand.\n-            for (CChainState* chainstate : WITH_LOCK(::cs_main, return chainman.GetAll())) {\n-                if (!fReset) {\n-                    // Note that RewindBlockIndex MUST run even if we're about to -reindex-chainstate.\n-                    // It both disconnects blocks based on the chainstate, and drops block data in\n-                    // BlockIndex() based on lack of available witness data.\n-                    uiInterface.InitMessage(_(\"Rewinding blocks...\").translated);\n-                    if (!chainstate->RewindBlockIndex(chainparams)) {\n-                        strLoadError = _(\n-                            \"Unable to rewind the database to a pre-fork state. \"\n-                            \"You will need to redownload the blockchain\");\n-                        failed_rewind = true;\n-                        break; // out of the per-chainstate loop\n+            bool needs_ibd{false};\n+            {",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "9bae47d529c11b7b87a2a78ccd38ae8bcc60da3c",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "We can avoid some deep nesting and the need for a temporary variable to pass the result of the predicate out of the loop by using an stl algorithm:\r\n\r\n```diff\r\n--- a/src/init.cpp\r\n+++ b/src/init.cpp\r\n@@ -1686,27 +1686,19 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\r\n                 break;\r\n             }\r\n \r\n-            bool needs_ibd{false};\r\n-            {\r\n-                LOCK(cs_main);\r\n-                for (CChainState* chainstate : chainman.GetAll()) {\r\n-                    if (!fReset) {\r\n-                        uiInterface.InitMessage(_(\"Checking if IBD is needed...\").translated);\r\n-                        if (chainstate->NeedsIBD(chainparams)) {\r\n-                            strLoadError = _(\r\n-                                \"Segwit blocks are insufficiently validated. \"\r\n-                                \"Please delete blocks dir and chain state dir and restart.\");\r\n-                            needs_ibd = true;\r\n-                            break; // out of the per-chainstate loop\r\n-                        }\r\n-                    }\r\n+            if (!fReset) {\r\n+                uiInterface.InitMessage(_(\"Checking if redownload is needed...\").translated);\r\n+                LOCK(cs_main);\r\n+                auto chainstates{chainman.GetAll()};\r\n+                if (std::any_of(chainstates.begin(), chainstates.end(),\r\n+                                [&chainparams] (CChainState* cs) {return cs->NeedsIBD(chainparams);})) {\r\n+                    strLoadError = _(\r\n+                        \"Segwit blocks are insufficiently validated. \"\r\n+                        \"Please delete blocks dir and chain state dir and restart.\");\r\n+                    break;\r\n                 }\r\n             }\r\n \r\n-            if (needs_ibd) {\r\n-                break; // out of the chainstate activation do-while\r\n-            }\r\n-\r\n             bool failed_verification = false;\r\n```\r\n\r\nThis is exactly what `std::any_of` is designed for. Instead of creating a boolean, manually iterating through a range, executing a predicate on each member and then setting the boolean and breaking out if the predicate returns true, we can let the standard library do the heavy lifting. That makes the code more expressive by raising the level of abstraction and communicating what we want the code to do, and not what the individual steps to do it are.",
      "created_at": "2021-02-08T10:21:54Z",
      "updated_at": "2021-04-21T23:09:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r571930294",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571930294"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1690,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571931259",
      "pull_request_review_id": 585342914,
      "id": 571931259,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTkzMTI1OQ==",
      "diff_hunk": "@@ -4390,143 +4390,22 @@ bool CChainState::ReplayBlocks(const CChainParams& params)\n     return true;\n }\n \n-//! Helper for CChainState::RewindBlockIndex\n-void CChainState::EraseBlockData(CBlockIndex* index)\n+bool CChainState::NeedsIBD(const CChainParams& params)",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "9bae47d529c11b7b87a2a78ccd38ae8bcc60da3c",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Consider renaming this function `NeedsRedownload`. All nodes that are starting fresh or restarting after some time need IBD. This function is specifically for nodes that need to delete blocks and redownload them.",
      "created_at": "2021-02-08T10:23:24Z",
      "updated_at": "2021-04-21T23:09:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r571931259",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571931259"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4393,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571932692",
      "pull_request_review_id": 585342914,
      "id": 571932692,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTkzMjY5Mg==",
      "diff_hunk": "@@ -1956,21 +1959,49 @@ def test_non_standard_witness(self):\n     def test_upgrade_after_activation(self):\n         \"\"\"Test the behavior of starting up a segwit-aware node after the softfork has activated.\"\"\"\n \n-        self.restart_node(2, extra_args=[\"-segwitheight={}\".format(SEGWIT_HEIGHT)])\n+        # All nodes are caught up and node 2 is a pre-segwit node that will soon upgrade.\n+        assert_equal(self.nodes[0].getblockcount(), self.nodes[2].getblockcount())\n+        assert_equal(self.nodes[1].getblockcount(), self.nodes[2].getblockcount())\n+        assert SEGWIT_HEIGHT < self.nodes[2].getblockcount()\n+        assert softfork_active(self.nodes[0], 'segwit')\n+        assert softfork_active(self.nodes[1], 'segwit')\n+        assert 'segwit' not in self.nodes[2].getblockchaininfo()['softforks']\n+\n+        # Restarting node 2 should result in a shutdown because the blockchain consists of\n+        # insufficiently validated blocks per segwit consensus rules.\n+        self.stop_node(2)\n+        with self.nodes[2].assert_debug_log(expected_msgs=[\"Segwit blocks are insufficiently validated. Please delete blocks dir and chain state dir and restart.\"], timeout=10):\n+            self.nodes[2].start([\"-segwitheight={}\".format(SEGWIT_HEIGHT)])\n+\n+        # As directed, the user deletes the blocks and chainstate directories and restarts the node\n+        datadir = get_datadir_path(self.options.tmpdir, 2)\n+        blocks_dir = os.path.join(datadir, \"regtest\", \"blocks\")\n+        chainstate_dir = os.path.join(datadir, \"regtest\", \"chainstate\")\n+        shutil.rmtree(blocks_dir)\n+        shutil.rmtree(chainstate_dir)\n+\n+        self.start_node(2, extra_args=[\"-segwitheight={}\".format(SEGWIT_HEIGHT)])\n+        assert_equal(self.nodes[2].getblockcount(), 0)\n         self.connect_nodes(0, 2)\n \n         # We reconnect more than 100 blocks, give it plenty of time\n         self.sync_blocks(timeout=240)\n \n-        # Make sure that this peer thinks segwit has activated.\n+        # The upgraded node syncs headers and performs IBD\n+        assert_equal(self.nodes[0].getblockcount(), self.nodes[2].getblockcount())\n+        assert_equal(self.nodes[1].getblockcount(), self.nodes[2].getblockcount())\n+        assert softfork_active(self.nodes[0], 'segwit')\n+        assert softfork_active(self.nodes[1], 'segwit')\n         assert softfork_active(self.nodes[2], 'segwit')\n \n-        # Make sure this peer's blocks match those of node0.\n+        # Make sure all peers have the same blocks.",
      "path": "test/functional/p2p_segwit.py",
      "position": null,
      "original_position": 60,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "9bae47d529c11b7b87a2a78ccd38ae8bcc60da3c",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This loop seems useless. `sync_blocks()` ensures that the nodes have the same block hash at their tip. We assume that if the block hash at the tip is the same then all blocks in the chain are the same (if not, then bitcoin is fundamentally broken).",
      "created_at": "2021-02-08T10:25:34Z",
      "updated_at": "2021-04-21T23:09:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r571932692",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/571932692"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1997,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/572227822",
      "pull_request_review_id": 585740839,
      "id": 572227822,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MjIyNzgyMg==",
      "diff_hunk": "@@ -1686,26 +1686,24 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n                 break;\n             }\n \n-            bool failed_rewind{false};\n-            // Can't hold cs_main while calling RewindBlockIndex, so retrieve the relevant\n-            // chainstates beforehand.\n-            for (CChainState* chainstate : WITH_LOCK(::cs_main, return chainman.GetAll())) {\n-                if (!fReset) {\n-                    // Note that RewindBlockIndex MUST run even if we're about to -reindex-chainstate.\n-                    // It both disconnects blocks based on the chainstate, and drops block data in\n-                    // BlockIndex() based on lack of available witness data.\n-                    uiInterface.InitMessage(_(\"Rewinding blocks...\").translated);\n-                    if (!chainstate->RewindBlockIndex(chainparams)) {\n-                        strLoadError = _(\n-                            \"Unable to rewind the database to a pre-fork state. \"\n-                            \"You will need to redownload the blockchain\");\n-                        failed_rewind = true;\n-                        break; // out of the per-chainstate loop\n+            bool needs_ibd{false};\n+            {\n+                LOCK(cs_main);\n+                for (CChainState* chainstate : chainman.GetAll()) {\n+                    if (!fReset) {\n+                        uiInterface.InitMessage(_(\"Checking if IBD is needed...\").translated);",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "9bae47d529c11b7b87a2a78ccd38ae8bcc60da3c",
      "in_reply_to_id": 571925434,
      "user": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2021-02-08T17:23:33Z",
      "updated_at": "2021-04-21T23:09:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r572227822",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/572227822"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1694,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/572228350",
      "pull_request_review_id": 585741444,
      "id": 572228350,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MjIyODM1MA==",
      "diff_hunk": "@@ -1686,26 +1686,24 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n                 break;\n             }\n \n-            bool failed_rewind{false};\n-            // Can't hold cs_main while calling RewindBlockIndex, so retrieve the relevant\n-            // chainstates beforehand.\n-            for (CChainState* chainstate : WITH_LOCK(::cs_main, return chainman.GetAll())) {\n-                if (!fReset) {\n-                    // Note that RewindBlockIndex MUST run even if we're about to -reindex-chainstate.\n-                    // It both disconnects blocks based on the chainstate, and drops block data in\n-                    // BlockIndex() based on lack of available witness data.\n-                    uiInterface.InitMessage(_(\"Rewinding blocks...\").translated);\n-                    if (!chainstate->RewindBlockIndex(chainparams)) {\n-                        strLoadError = _(\n-                            \"Unable to rewind the database to a pre-fork state. \"\n-                            \"You will need to redownload the blockchain\");\n-                        failed_rewind = true;\n-                        break; // out of the per-chainstate loop\n+            bool needs_ibd{false};\n+            {",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "9bae47d529c11b7b87a2a78ccd38ae8bcc60da3c",
      "in_reply_to_id": 571930294,
      "user": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Beautiful change. Thank you for teaching so patiently!",
      "created_at": "2021-02-08T17:24:10Z",
      "updated_at": "2021-04-21T23:09:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r572228350",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/572228350"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1690,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/572228646",
      "pull_request_review_id": 585741830,
      "id": 572228646,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MjIyODY0Ng==",
      "diff_hunk": "@@ -4390,143 +4390,22 @@ bool CChainState::ReplayBlocks(const CChainParams& params)\n     return true;\n }\n \n-//! Helper for CChainState::RewindBlockIndex\n-void CChainState::EraseBlockData(CBlockIndex* index)\n+bool CChainState::NeedsIBD(const CChainParams& params)",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "9bae47d529c11b7b87a2a78ccd38ae8bcc60da3c",
      "in_reply_to_id": 571931259,
      "user": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Makes sense. Done.",
      "created_at": "2021-02-08T17:24:34Z",
      "updated_at": "2021-04-21T23:09:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r572228646",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/572228646"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4393,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/572229363",
      "pull_request_review_id": 585742728,
      "id": 572229363,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MjIyOTM2Mw==",
      "diff_hunk": "@@ -1956,21 +1959,49 @@ def test_non_standard_witness(self):\n     def test_upgrade_after_activation(self):\n         \"\"\"Test the behavior of starting up a segwit-aware node after the softfork has activated.\"\"\"\n \n-        self.restart_node(2, extra_args=[\"-segwitheight={}\".format(SEGWIT_HEIGHT)])\n+        # All nodes are caught up and node 2 is a pre-segwit node that will soon upgrade.\n+        assert_equal(self.nodes[0].getblockcount(), self.nodes[2].getblockcount())\n+        assert_equal(self.nodes[1].getblockcount(), self.nodes[2].getblockcount())\n+        assert SEGWIT_HEIGHT < self.nodes[2].getblockcount()\n+        assert softfork_active(self.nodes[0], 'segwit')\n+        assert softfork_active(self.nodes[1], 'segwit')\n+        assert 'segwit' not in self.nodes[2].getblockchaininfo()['softforks']\n+\n+        # Restarting node 2 should result in a shutdown because the blockchain consists of\n+        # insufficiently validated blocks per segwit consensus rules.\n+        self.stop_node(2)\n+        with self.nodes[2].assert_debug_log(expected_msgs=[\"Segwit blocks are insufficiently validated. Please delete blocks dir and chain state dir and restart.\"], timeout=10):\n+            self.nodes[2].start([\"-segwitheight={}\".format(SEGWIT_HEIGHT)])\n+\n+        # As directed, the user deletes the blocks and chainstate directories and restarts the node\n+        datadir = get_datadir_path(self.options.tmpdir, 2)\n+        blocks_dir = os.path.join(datadir, \"regtest\", \"blocks\")\n+        chainstate_dir = os.path.join(datadir, \"regtest\", \"chainstate\")\n+        shutil.rmtree(blocks_dir)\n+        shutil.rmtree(chainstate_dir)\n+\n+        self.start_node(2, extra_args=[\"-segwitheight={}\".format(SEGWIT_HEIGHT)])\n+        assert_equal(self.nodes[2].getblockcount(), 0)\n         self.connect_nodes(0, 2)\n \n         # We reconnect more than 100 blocks, give it plenty of time\n         self.sync_blocks(timeout=240)\n \n-        # Make sure that this peer thinks segwit has activated.\n+        # The upgraded node syncs headers and performs IBD\n+        assert_equal(self.nodes[0].getblockcount(), self.nodes[2].getblockcount())\n+        assert_equal(self.nodes[1].getblockcount(), self.nodes[2].getblockcount())\n+        assert softfork_active(self.nodes[0], 'segwit')\n+        assert softfork_active(self.nodes[1], 'segwit')\n         assert softfork_active(self.nodes[2], 'segwit')\n \n-        # Make sure this peer's blocks match those of node0.\n+        # Make sure all peers have the same blocks.",
      "path": "test/functional/p2p_segwit.py",
      "position": null,
      "original_position": 60,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "9bae47d529c11b7b87a2a78ccd38ae8bcc60da3c",
      "in_reply_to_id": 571932692,
      "user": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fair enough. I didn't remember that `sync_blocks()` verifies that the best hashes are equal. Done.",
      "created_at": "2021-02-08T17:25:33Z",
      "updated_at": "2021-04-21T23:09:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r572229363",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/572229363"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1997,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/572245344",
      "pull_request_review_id": 585762951,
      "id": 572245344,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MjI0NTM0NA==",
      "diff_hunk": "@@ -1686,26 +1686,24 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n                 break;\n             }\n \n-            bool failed_rewind{false};\n-            // Can't hold cs_main while calling RewindBlockIndex, so retrieve the relevant\n-            // chainstates beforehand.\n-            for (CChainState* chainstate : WITH_LOCK(::cs_main, return chainman.GetAll())) {\n-                if (!fReset) {\n-                    // Note that RewindBlockIndex MUST run even if we're about to -reindex-chainstate.\n-                    // It both disconnects blocks based on the chainstate, and drops block data in\n-                    // BlockIndex() based on lack of available witness data.\n-                    uiInterface.InitMessage(_(\"Rewinding blocks...\").translated);\n-                    if (!chainstate->RewindBlockIndex(chainparams)) {\n-                        strLoadError = _(\n-                            \"Unable to rewind the database to a pre-fork state. \"\n-                            \"You will need to redownload the blockchain\");\n-                        failed_rewind = true;\n-                        break; // out of the per-chainstate loop\n+            bool needs_ibd{false};\n+            {",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "9bae47d529c11b7b87a2a78ccd38ae8bcc60da3c",
      "in_reply_to_id": 571930294,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ooops. I guess the lambda needs an annotation too. Something like this maybe:\r\n\r\n```\r\n                if (std::any_of(chainstates.begin(), chainstates.end(),\r\n                                [&chainparams] (CChainState* cs) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {return cs->NeedsIBD(chainparams);})) {\r\n```",
      "created_at": "2021-02-08T17:47:15Z",
      "updated_at": "2021-04-21T23:09:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r572245344",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/572245344"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1690,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/572452874",
      "pull_request_review_id": 586020312,
      "id": 572452874,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MjQ1Mjg3NA==",
      "diff_hunk": "@@ -1686,26 +1686,24 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n                 break;\n             }\n \n-            bool failed_rewind{false};\n-            // Can't hold cs_main while calling RewindBlockIndex, so retrieve the relevant\n-            // chainstates beforehand.\n-            for (CChainState* chainstate : WITH_LOCK(::cs_main, return chainman.GetAll())) {\n-                if (!fReset) {\n-                    // Note that RewindBlockIndex MUST run even if we're about to -reindex-chainstate.\n-                    // It both disconnects blocks based on the chainstate, and drops block data in\n-                    // BlockIndex() based on lack of available witness data.\n-                    uiInterface.InitMessage(_(\"Rewinding blocks...\").translated);\n-                    if (!chainstate->RewindBlockIndex(chainparams)) {\n-                        strLoadError = _(\n-                            \"Unable to rewind the database to a pre-fork state. \"\n-                            \"You will need to redownload the blockchain\");\n-                        failed_rewind = true;\n-                        break; // out of the per-chainstate loop\n+            bool needs_ibd{false};\n+            {",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "9bae47d529c11b7b87a2a78ccd38ae8bcc60da3c",
      "in_reply_to_id": 571930294,
      "user": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That worked. For my education, what happened there and how did you know the lambda annotation would help?\r\n\r\nI suspect the annotation is evaluated with the limited scope of the bound variables, so it does not \"know\" about the locks that are acquired in the outer scope. Is that even close?",
      "created_at": "2021-02-08T23:35:16Z",
      "updated_at": "2021-04-21T23:09:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r572452874",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/572452874"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1690,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/575646238",
      "pull_request_review_id": 589956930,
      "id": 575646238,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTY0NjIzOA==",
      "diff_hunk": "@@ -4381,143 +4381,19 @@ bool CChainState::ReplayBlocks(const CChainParams& params)\n     return true;\n }\n \n-//! Helper for CChainState::RewindBlockIndex\n-void CChainState::EraseBlockData(CBlockIndex* index)\n+bool CChainState::NeedsIBD(const CChainParams& params)\n {\n-    AssertLockHeld(cs_main);\n-    assert(!m_chain.Contains(index)); // Make sure this block isn't active\n-\n-    // Reduce validity\n-    index->nStatus = std::min<unsigned int>(index->nStatus & BLOCK_VALID_MASK, BLOCK_VALID_TREE) | (index->nStatus & ~BLOCK_VALID_MASK);\n-    // Remove have-data flags.\n-    index->nStatus &= ~(BLOCK_HAVE_DATA | BLOCK_HAVE_UNDO);\n-    // Remove storage location.\n-    index->nFile = 0;\n-    index->nDataPos = 0;\n-    index->nUndoPos = 0;\n-    // Remove various other things\n-    index->nTx = 0;\n-    index->nChainTx = 0;\n-    index->nSequenceId = 0;\n-    // Make sure it gets written.\n-    setDirtyBlockIndex.insert(index);\n-    // Update indexes\n-    setBlockIndexCandidates.erase(index);\n-    auto ret = m_blockman.m_blocks_unlinked.equal_range(index->pprev);\n-    while (ret.first != ret.second) {\n-        if (ret.first->second == index) {\n-            m_blockman.m_blocks_unlinked.erase(ret.first++);\n-        } else {\n-            ++ret.first;\n-        }\n-    }\n-    // Mark parent as eligible for main chain again\n-    if (index->pprev && index->pprev->IsValid(BLOCK_VALID_TRANSACTIONS) && index->pprev->HaveTxsDownloaded()) {\n-        setBlockIndexCandidates.insert(index->pprev);\n-    }\n-}\n-\n-bool CChainState::RewindBlockIndex(const CChainParams& params)\n-{\n-    // Note that during -reindex-chainstate we are called with an empty m_chain!\n-\n-    // First erase all post-segwit blocks without witness not in the main chain,\n-    // as this can we done without costly DisconnectTip calls. Active\n-    // blocks will be dealt with below (releasing cs_main in between).\n-    {\n-        LOCK(cs_main);\n-        for (const auto& entry : m_blockman.m_block_index) {\n-            if (IsWitnessEnabled(entry.second->pprev, params.GetConsensus()) && !(entry.second->nStatus & BLOCK_OPT_WITNESS) && !m_chain.Contains(entry.second)) {\n-                EraseBlockData(entry.second);\n-            }\n-        }\n-    }\n-\n-    // Find what height we need to reorganize to.\n-    CBlockIndex *tip;\n-    int nHeight = 1;\n-    {\n-        LOCK(cs_main);\n-        while (nHeight <= m_chain.Height()) {\n-            // Although SCRIPT_VERIFY_WITNESS is now generally enforced on all\n-            // blocks in ConnectBlock, we don't need to go back and\n-            // re-download/re-verify blocks from before segwit actually activated.\n-            if (IsWitnessEnabled(m_chain[nHeight - 1], params.GetConsensus()) && !(m_chain[nHeight]->nStatus & BLOCK_OPT_WITNESS)) {\n-                break;\n-            }\n-            nHeight++;\n-        }\n-\n-        tip = m_chain.Tip();\n-    }\n-    // nHeight is now the height of the first insufficiently-validated block, or tipheight + 1\n-\n-    BlockValidationState state;\n-    // Loop until the tip is below nHeight, or we reach a pruned block.\n-    while (!ShutdownRequested()) {\n-        {\n-            LOCK(cs_main);\n-            LOCK(m_mempool.cs);\n-            // Make sure nothing changed from under us (this won't happen because RewindBlockIndex runs before importing/network are active)\n-            assert(tip == m_chain.Tip());\n-            if (tip == nullptr || tip->nHeight < nHeight) break;\n-            if (fPruneMode && !(tip->nStatus & BLOCK_HAVE_DATA)) {\n-                // If pruning, don't try rewinding past the HAVE_DATA point;\n-                // since older blocks can't be served anyway, there's\n-                // no need to walk further, and trying to DisconnectTip()\n-                // will fail (and require a needless reindex/redownload\n-                // of the blockchain).\n-                break;\n-            }\n-\n-            // Disconnect block\n-            if (!DisconnectTip(state, params, nullptr)) {\n-                return error(\"RewindBlockIndex: unable to disconnect block at height %i (%s)\", tip->nHeight, state.ToString());\n-            }\n-\n-            // Reduce validity flag and have-data flags.\n-            // We do this after actual disconnecting, otherwise we'll end up writing the lack of data\n-            // to disk before writing the chainstate, resulting in a failure to continue if interrupted.\n-            // Note: If we encounter an insufficiently validated block that\n-            // is on m_chain, it must be because we are a pruning node, and\n-            // this block or some successor doesn't HAVE_DATA, so we were unable to\n-            // rewind all the way.  Blocks remaining on m_chain at this point\n-            // must not have their validity reduced.\n-            EraseBlockData(tip);\n-\n-            tip = tip->pprev;\n-        }\n-        // Make sure the queue of validation callbacks doesn't grow unboundedly.\n-        LimitValidationInterfaceQueue();\n-\n-        // Occasionally flush state to disk.\n-        if (!FlushStateToDisk(params, state, FlushStateMode::PERIODIC)) {\n-            LogPrintf(\"RewindBlockIndex: unable to flush state to disk (%s)\\n\", state.ToString());\n-            return false;\n-        }\n-    }\n-\n     {\n         LOCK(cs_main);\n-        if (m_chain.Tip() != nullptr) {\n-            // We can't prune block index candidates based on our tip if we have\n-            // no tip due to m_chain being empty!\n-            PruneBlockIndexCandidates();\n-\n-            CheckBlockIndex(params.GetConsensus());\n-\n-            // FlushStateToDisk can possibly read ::ChainActive(). Be conservative\n-            // and skip it here, we're about to -reindex-chainstate anyway, so\n-            // it'll get called a bunch real soon.\n-            BlockValidationState state;\n-            if (!FlushStateToDisk(params, state, FlushStateMode::ALWAYS)) {\n-                LogPrintf(\"RewindBlockIndex: unable to flush state to disk (%s)\\n\", state.ToString());\n-                return false;\n+        for (CBlockIndex* block = m_chain.Genesis(); block != nullptr; block = m_chain.Next(block)) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 137,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "79970c929131855666995564f7dfc3c62f5d5d31",
      "in_reply_to_id": 568665869,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "My mistake. For some reason I thought m_chain was a container here.",
      "created_at": "2021-02-13T09:42:34Z",
      "updated_at": "2021-04-21T23:09:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r575646238",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/575646238"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4388,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/575646403",
      "pull_request_review_id": 589957043,
      "id": 575646403,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTY0NjQwMw==",
      "diff_hunk": "@@ -1686,26 +1686,24 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n                 break;\n             }\n \n-            bool failed_rewind{false};\n-            // Can't hold cs_main while calling RewindBlockIndex, so retrieve the relevant\n-            // chainstates beforehand.\n-            for (CChainState* chainstate : WITH_LOCK(::cs_main, return chainman.GetAll())) {\n-                if (!fReset) {\n-                    // Note that RewindBlockIndex MUST run even if we're about to -reindex-chainstate.\n-                    // It both disconnects blocks based on the chainstate, and drops block data in\n-                    // BlockIndex() based on lack of available witness data.\n-                    uiInterface.InitMessage(_(\"Rewinding blocks...\").translated);\n-                    if (!chainstate->RewindBlockIndex(chainparams)) {\n-                        strLoadError = _(\n-                            \"Unable to rewind the database to a pre-fork state. \"\n-                            \"You will need to redownload the blockchain\");\n-                        failed_rewind = true;\n-                        break; // out of the per-chainstate loop\n+            bool needs_ibd{false};\n+            {",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "9bae47d529c11b7b87a2a78ccd38ae8bcc60da3c",
      "in_reply_to_id": 571930294,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "As discussed, there was an error message about `NeedsIBD()` requiring cs_main. Since the compiler does not know that when it's inside the lambda, it's in a scope that already has cs_main, we need to annotate it.",
      "created_at": "2021-02-13T09:44:51Z",
      "updated_at": "2021-04-21T23:09:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r575646403",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/575646403"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1690,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/575664861",
      "pull_request_review_id": 589966686,
      "id": 575664861,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTY2NDg2MQ==",
      "diff_hunk": "@@ -1686,27 +1686,18 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n                 break;\n             }\n \n-            bool failed_rewind{false};\n-            // Can't hold cs_main while calling RewindBlockIndex, so retrieve the relevant\n-            // chainstates beforehand.\n-            for (CChainState* chainstate : WITH_LOCK(::cs_main, return chainman.GetAll())) {\n-                if (!fReset) {\n-                    // Note that RewindBlockIndex MUST run even if we're about to -reindex-chainstate.\n-                    // It both disconnects blocks based on the chainstate, and drops block data in\n-                    // BlockIndex() based on lack of available witness data.\n-                    uiInterface.InitMessage(_(\"Rewinding blocks...\").translated);\n-                    if (!chainstate->RewindBlockIndex(chainparams)) {\n-                        strLoadError = _(\n-                            \"Unable to rewind the database to a pre-fork state. \"\n-                            \"You will need to redownload the blockchain\");\n-                        failed_rewind = true;\n-                        break; // out of the per-chainstate loop\n-                    }\n-                }\n-            }\n \n-            if (failed_rewind) {\n-                break; // out of the chainstate activation do-while\n+            if (!fReset) {\n+                uiInterface.InitMessage(_(\"Checking if redownload is needed...\").translated);\n+                LOCK(cs_main);\n+                auto chainstates{chainman.GetAll()};\n+                if (std::any_of(chainstates.begin(), chainstates.end(),\n+                                [&chainparams](CChainState* cs) EXCLUSIVE_LOCKS_REQUIRED(cs_main) { return cs->NeedsRedownload(chainparams); })) {\n+                    strLoadError = _(\n+                        \"Segwit blocks are insufficiently validated. \"\n+                        \"Please delete blocks dir and chain state dir and restart.\");",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 33,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "0af05b95e9c829ff581bb76a0998b5a90386e27a",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Should we be more cautious with directly summoning users to delete directories ?\r\n\r\nMaybe we should give a more detailed path (`.bitcoin/blocks`, `.bitcoin/chainstate`) but not sure if it's platform dependent. I just want to minimize the risk of someone deleting by mistake its wallet.",
      "created_at": "2021-02-13T13:02:48Z",
      "updated_at": "2021-04-21T23:09:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r575664861",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/575664861"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1698,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/575897776",
      "pull_request_review_id": 590111302,
      "id": 575897776,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTg5Nzc3Ng==",
      "diff_hunk": "@@ -1686,27 +1686,18 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n                 break;\n             }\n \n-            bool failed_rewind{false};\n-            // Can't hold cs_main while calling RewindBlockIndex, so retrieve the relevant\n-            // chainstates beforehand.\n-            for (CChainState* chainstate : WITH_LOCK(::cs_main, return chainman.GetAll())) {\n-                if (!fReset) {\n-                    // Note that RewindBlockIndex MUST run even if we're about to -reindex-chainstate.\n-                    // It both disconnects blocks based on the chainstate, and drops block data in\n-                    // BlockIndex() based on lack of available witness data.\n-                    uiInterface.InitMessage(_(\"Rewinding blocks...\").translated);\n-                    if (!chainstate->RewindBlockIndex(chainparams)) {\n-                        strLoadError = _(\n-                            \"Unable to rewind the database to a pre-fork state. \"\n-                            \"You will need to redownload the blockchain\");\n-                        failed_rewind = true;\n-                        break; // out of the per-chainstate loop\n-                    }\n-                }\n-            }\n \n-            if (failed_rewind) {\n-                break; // out of the chainstate activation do-while\n+            if (!fReset) {\n+                uiInterface.InitMessage(_(\"Checking if redownload is needed...\").translated);\n+                LOCK(cs_main);\n+                auto chainstates{chainman.GetAll()};\n+                if (std::any_of(chainstates.begin(), chainstates.end(),\n+                                [&chainparams](CChainState* cs) EXCLUSIVE_LOCKS_REQUIRED(cs_main) { return cs->NeedsRedownload(chainparams); })) {\n+                    strLoadError = _(\n+                        \"Segwit blocks are insufficiently validated. \"\n+                        \"Please delete blocks dir and chain state dir and restart.\");",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 33,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "0af05b95e9c829ff581bb76a0998b5a90386e27a",
      "in_reply_to_id": 575664861,
      "user": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good idea! Done.",
      "created_at": "2021-02-15T01:15:06Z",
      "updated_at": "2021-04-21T23:09:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r575897776",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/575897776"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1698,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/576134367",
      "pull_request_review_id": 590402543,
      "id": 576134367,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjEzNDM2Nw==",
      "diff_hunk": "@@ -1686,27 +1686,19 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n                 break;\n             }\n \n-            bool failed_rewind{false};\n-            // Can't hold cs_main while calling RewindBlockIndex, so retrieve the relevant\n-            // chainstates beforehand.\n-            for (CChainState* chainstate : WITH_LOCK(::cs_main, return chainman.GetAll())) {\n-                if (!fReset) {\n-                    // Note that RewindBlockIndex MUST run even if we're about to -reindex-chainstate.\n-                    // It both disconnects blocks based on the chainstate, and drops block data in\n-                    // BlockIndex() based on lack of available witness data.\n-                    uiInterface.InitMessage(_(\"Rewinding blocks...\").translated);\n-                    if (!chainstate->RewindBlockIndex(chainparams)) {\n-                        strLoadError = _(\n-                            \"Unable to rewind the database to a pre-fork state. \"\n-                            \"You will need to redownload the blockchain\");\n-                        failed_rewind = true;\n-                        break; // out of the per-chainstate loop\n-                    }\n-                }\n-            }\n \n-            if (failed_rewind) {\n-                break; // out of the chainstate activation do-while\n+            if (!fReset) {\n+                uiInterface.InitMessage(_(\"Checking if redownload is needed...\").translated);\n+                LOCK(cs_main);\n+                auto chainstates{chainman.GetAll()};\n+                if (std::any_of(chainstates.begin(), chainstates.end(),\n+                                [&chainparams](CChainState* cs) EXCLUSIVE_LOCKS_REQUIRED(cs_main) { return cs->NeedsRedownload(chainparams); })) {\n+                    auto chainstate_dir = GetDataDir() / CHAINSTATE_DIRNAME;\n+                    strLoadError = strprintf(_(\n+                        \"Segwit blocks are insufficiently validated. \"\n+                        \"Please delete blocks dir(%s) and chainstate dir(%s) and restart.\"), GetBlocksDir(), chainstate_dir);",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 34,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "d9370c1c5bfc2305f327fbfecf95072b75a62a75",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "A `-reindex` should do the same with less effort?",
      "created_at": "2021-02-15T11:45:04Z",
      "updated_at": "2021-04-21T23:09:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r576134367",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/576134367"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1699,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/576370924",
      "pull_request_review_id": 590695368,
      "id": 576370924,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjM3MDkyNA==",
      "diff_hunk": "@@ -1686,27 +1686,19 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n                 break;\n             }\n \n-            bool failed_rewind{false};\n-            // Can't hold cs_main while calling RewindBlockIndex, so retrieve the relevant\n-            // chainstates beforehand.\n-            for (CChainState* chainstate : WITH_LOCK(::cs_main, return chainman.GetAll())) {\n-                if (!fReset) {\n-                    // Note that RewindBlockIndex MUST run even if we're about to -reindex-chainstate.\n-                    // It both disconnects blocks based on the chainstate, and drops block data in\n-                    // BlockIndex() based on lack of available witness data.\n-                    uiInterface.InitMessage(_(\"Rewinding blocks...\").translated);\n-                    if (!chainstate->RewindBlockIndex(chainparams)) {\n-                        strLoadError = _(\n-                            \"Unable to rewind the database to a pre-fork state. \"\n-                            \"You will need to redownload the blockchain\");\n-                        failed_rewind = true;\n-                        break; // out of the per-chainstate loop\n-                    }\n-                }\n-            }\n \n-            if (failed_rewind) {\n-                break; // out of the chainstate activation do-while\n+            if (!fReset) {\n+                uiInterface.InitMessage(_(\"Checking if redownload is needed...\").translated);\n+                LOCK(cs_main);\n+                auto chainstates{chainman.GetAll()};\n+                if (std::any_of(chainstates.begin(), chainstates.end(),\n+                                [&chainparams](CChainState* cs) EXCLUSIVE_LOCKS_REQUIRED(cs_main) { return cs->NeedsRedownload(chainparams); })) {\n+                    auto chainstate_dir = GetDataDir() / CHAINSTATE_DIRNAME;\n+                    strLoadError = strprintf(_(\n+                        \"Segwit blocks are insufficiently validated. \"\n+                        \"Please delete blocks dir(%s) and chainstate dir(%s) and restart.\"), GetBlocksDir(), chainstate_dir);",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 34,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "d9370c1c5bfc2305f327fbfecf95072b75a62a75",
      "in_reply_to_id": 576134367,
      "user": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "When a pre-segwit node upgrades to segwit, it has no way to sufficiently validate to the segwit consensus rules from the blocks on disk since witness data was never relayed to it. Help for `-reindex` says \"Rebuild chain state and block index from the blk*.dat files on disk\". Looking at the code also does not suggest to me that `-reindex` would cause the node to re-download.\r\n\r\nAm I missing something?",
      "created_at": "2021-02-15T18:39:27Z",
      "updated_at": "2021-04-21T23:09:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r576370924",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/576370924"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1699,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/576702371",
      "pull_request_review_id": 591071872,
      "id": 576702371,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjcwMjM3MQ==",
      "diff_hunk": "@@ -1686,27 +1686,19 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n                 break;\n             }\n \n-            bool failed_rewind{false};\n-            // Can't hold cs_main while calling RewindBlockIndex, so retrieve the relevant\n-            // chainstates beforehand.\n-            for (CChainState* chainstate : WITH_LOCK(::cs_main, return chainman.GetAll())) {\n-                if (!fReset) {\n-                    // Note that RewindBlockIndex MUST run even if we're about to -reindex-chainstate.\n-                    // It both disconnects blocks based on the chainstate, and drops block data in\n-                    // BlockIndex() based on lack of available witness data.\n-                    uiInterface.InitMessage(_(\"Rewinding blocks...\").translated);\n-                    if (!chainstate->RewindBlockIndex(chainparams)) {\n-                        strLoadError = _(\n-                            \"Unable to rewind the database to a pre-fork state. \"\n-                            \"You will need to redownload the blockchain\");\n-                        failed_rewind = true;\n-                        break; // out of the per-chainstate loop\n-                    }\n-                }\n-            }\n \n-            if (failed_rewind) {\n-                break; // out of the chainstate activation do-while\n+            if (!fReset) {\n+                uiInterface.InitMessage(_(\"Checking if redownload is needed...\").translated);\n+                LOCK(cs_main);\n+                auto chainstates{chainman.GetAll()};\n+                if (std::any_of(chainstates.begin(), chainstates.end(),\n+                                [&chainparams](CChainState* cs) EXCLUSIVE_LOCKS_REQUIRED(cs_main) { return cs->NeedsRedownload(chainparams); })) {\n+                    auto chainstate_dir = GetDataDir() / CHAINSTATE_DIRNAME;\n+                    strLoadError = strprintf(_(\n+                        \"Segwit blocks are insufficiently validated. \"\n+                        \"Please delete blocks dir(%s) and chainstate dir(%s) and restart.\"), GetBlocksDir(), chainstate_dir);",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 34,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "d9370c1c5bfc2305f327fbfecf95072b75a62a75",
      "in_reply_to_id": 576134367,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ah, I think this is true. `-reindex` will cause the node to try to rebuild the chain state from the block files, which will work only as far as the segwit activation height if the blocks after that are serialized without witness. The node will then try to sync by downloading all blocks from peers as normal. The test passes with the following change:\r\n\r\n```diff\r\ndiff --git a/test/functional/p2p_segwit.py b/test/functional/p2p_segwit.py\r\nindex 219c15f673..76d8967a41 100755\r\n--- a/test/functional/p2p_segwit.py\r\n+++ b/test/functional/p2p_segwit.py\r\n@@ -1973,15 +1973,8 @@ class SegWitTest(BitcoinTestFramework):\r\n         with self.nodes[2].assert_debug_log(expected_msgs=[\"Segwit blocks are insufficiently validated. Please delete blocks dir and chain state dir and restart.\"], timeout=10):\r\n             self.nodes[2].start([\"-segwitheight={}\".format(SEGWIT_HEIGHT)])\r\n \r\n-        # As directed, the user deletes the blocks and chainstate directories and restarts the node\r\n-        datadir = get_datadir_path(self.options.tmpdir, 2)\r\n-        blocks_dir = os.path.join(datadir, \"regtest\", \"blocks\")\r\n-        chainstate_dir = os.path.join(datadir, \"regtest\", \"chainstate\")\r\n-        shutil.rmtree(blocks_dir)\r\n-        shutil.rmtree(chainstate_dir)\r\n-\r\n-        self.start_node(2, extra_args=[\"-segwitheight={}\".format(SEGWIT_HEIGHT)])\r\n-        assert_equal(self.nodes[2].getblockcount(), 0)\r\n+        self.start_node(2, extra_args=[\"-reindex=1\", \"-segwitheight={}\".format(SEGWIT_HEIGHT)])\r\n+        assert_equal(self.nodes[2].getblockcount(), SEGWIT_HEIGHT - 1)\r\n         self.connect_nodes(0, 2)\r\n \r\n         # We reconnect more than 100 blocks, give it plenty of time\r\n```\r\n\r\nThere are a bunch of `AcceptBlock` errors since the blocks after height SEGWIT_HEIGHT aren't serialized properly:\r\n\r\n```\r\nnode2 2021-02-16T10:05:38.943607Z [loadblk] ERROR: AcceptBlock: bad-witness-nonce-size, ContextualCheckBlock : invalid witness reserved value size \r\n node2 2021-02-16T10:05:38.943663Z [loadblk] ERROR: AcceptBlock: bad-witness-nonce-size, ContextualCheckBlock : invalid witness reserved value size \r\n node2 2021-02-16T10:05:38.943712Z [loadblk] ERROR: AcceptBlock: bad-witness-nonce-size, ContextualCheckBlock : invalid witness reserved value size \r\n[...]\r\n```\r\n\r\nand when the node connects to its peers, it downloads and syncs to the tip, validating segwit rules as it goes.\r\n\r\nOne downside is that the old blocks are retained on disk and never deleted. However, that was the case before this PR as well.",
      "created_at": "2021-02-16T10:11:13Z",
      "updated_at": "2021-04-21T23:09:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r576702371",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/576702371"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1699,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/576963163",
      "pull_request_review_id": 591406565,
      "id": 576963163,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Njk2MzE2Mw==",
      "diff_hunk": "@@ -1686,27 +1686,19 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n                 break;\n             }\n \n-            bool failed_rewind{false};\n-            // Can't hold cs_main while calling RewindBlockIndex, so retrieve the relevant\n-            // chainstates beforehand.\n-            for (CChainState* chainstate : WITH_LOCK(::cs_main, return chainman.GetAll())) {\n-                if (!fReset) {\n-                    // Note that RewindBlockIndex MUST run even if we're about to -reindex-chainstate.\n-                    // It both disconnects blocks based on the chainstate, and drops block data in\n-                    // BlockIndex() based on lack of available witness data.\n-                    uiInterface.InitMessage(_(\"Rewinding blocks...\").translated);\n-                    if (!chainstate->RewindBlockIndex(chainparams)) {\n-                        strLoadError = _(\n-                            \"Unable to rewind the database to a pre-fork state. \"\n-                            \"You will need to redownload the blockchain\");\n-                        failed_rewind = true;\n-                        break; // out of the per-chainstate loop\n-                    }\n-                }\n-            }\n \n-            if (failed_rewind) {\n-                break; // out of the chainstate activation do-while\n+            if (!fReset) {\n+                uiInterface.InitMessage(_(\"Checking if redownload is needed...\").translated);\n+                LOCK(cs_main);\n+                auto chainstates{chainman.GetAll()};\n+                if (std::any_of(chainstates.begin(), chainstates.end(),\n+                                [&chainparams](CChainState* cs) EXCLUSIVE_LOCKS_REQUIRED(cs_main) { return cs->NeedsRedownload(chainparams); })) {\n+                    auto chainstate_dir = GetDataDir() / CHAINSTATE_DIRNAME;\n+                    strLoadError = strprintf(_(\n+                        \"Segwit blocks are insufficiently validated. \"\n+                        \"Please delete blocks dir(%s) and chainstate dir(%s) and restart.\"), GetBlocksDir(), chainstate_dir);",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 34,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "d9370c1c5bfc2305f327fbfecf95072b75a62a75",
      "in_reply_to_id": 576134367,
      "user": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ah, what I wasn't thinking about is that it is normal for the block _index_ to not be a 1:1 representation of the blk*.dat files. It happens all the time with reorgs, etc. So, upon `-reindex` the node won't be able to validate `[SEGWIT_HEIGHT, consensusTip]` blocks, will have `tip == SEGWIT_HEIGHT - 1`. It will then proceed to sync headers and therefore re-download `[SEGWIT_HEIGHT, consensusTip]`.\r\n\r\nThank you for the great suggestion @MarcoFalke! Makes for much simpler code. Updated.",
      "created_at": "2021-02-16T16:32:49Z",
      "updated_at": "2021-04-21T23:09:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r576963163",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/576963163"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1699,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/576968263",
      "pull_request_review_id": 591413118,
      "id": 576968263,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Njk2ODI2Mw==",
      "diff_hunk": "@@ -556,7 +557,7 @@ class CChainState\n         size_t cache_size_bytes,\n         bool in_memory,\n         bool should_wipe,\n-        std::string leveldb_name = \"chainstate\");\n+        std::string leveldb_name = CHAINSTATE_DIRNAME);",
      "path": "src/validation.h",
      "position": null,
      "original_position": 13,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "361300e038b4d8b13f76309c8d85b5832d850974",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why is this change needed?",
      "created_at": "2021-02-16T16:39:24Z",
      "updated_at": "2021-04-21T23:09:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r576968263",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/576968263"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 560,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/576971728",
      "pull_request_review_id": 591417724,
      "id": 576971728,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Njk3MTcyOA==",
      "diff_hunk": "@@ -556,7 +557,7 @@ class CChainState\n         size_t cache_size_bytes,\n         bool in_memory,\n         bool should_wipe,\n-        std::string leveldb_name = \"chainstate\");\n+        std::string leveldb_name = CHAINSTATE_DIRNAME);",
      "path": "src/validation.h",
      "position": null,
      "original_position": 13,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "361300e038b4d8b13f76309c8d85b5832d850974",
      "in_reply_to_id": 576968263,
      "user": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You are right - it is no longer needed with the `-reindex` change (I was previously using it to create the chainstate dir path). Removed.",
      "created_at": "2021-02-16T16:43:59Z",
      "updated_at": "2021-04-21T23:09:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r576971728",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/576971728"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 560,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/577014215",
      "pull_request_review_id": 591472314,
      "id": 577014215,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzAxNDIxNQ==",
      "diff_hunk": "@@ -1956,23 +1956,38 @@ def test_non_standard_witness(self):\n     def test_upgrade_after_activation(self):\n         \"\"\"Test the behavior of starting up a segwit-aware node after the softfork has activated.\"\"\"\n \n-        self.restart_node(2, extra_args=[\"-segwitheight={}\".format(SEGWIT_HEIGHT)])\n+        # All nodes are caught up and node 2 is a pre-segwit node that will soon upgrade.\n+        assert_equal(self.nodes[0].getblockcount(), self.nodes[2].getblockcount())\n+        assert_equal(self.nodes[1].getblockcount(), self.nodes[2].getblockcount())\n+        assert SEGWIT_HEIGHT < self.nodes[2].getblockcount()\n+        assert softfork_active(self.nodes[0], 'segwit')\n+        assert softfork_active(self.nodes[1], 'segwit')\n+        assert 'segwit' not in self.nodes[2].getblockchaininfo()['softforks']\n+\n+        # Restarting node 2 should result in a shutdown because the blockchain consists of\n+        # insufficiently validated blocks per segwit consensus rules.\n+        self.stop_node(2)\n+        with self.nodes[2].assert_debug_log(expected_msgs=[\n+                'Segwit blocks are insufficiently validated. Please restart with -reindex.'], timeout=10):\n+            self.nodes[2].start([\"-segwitheight={}\".format(SEGWIT_HEIGHT)])",
      "path": "test/functional/p2p_segwit.py",
      "position": null,
      "original_position": 18,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "5e818578524ee8419bcaf610cf1394817d867663",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "(please don't change the branch for this, but if you need to retouch for some other reason) you can use an f-string here:\r\n\r\n```suggestion\r\n            self.nodes[2].start([f\"-segwitheight={SEGWIT_HEIGHT}\"])\r\n```\r\n\r\nf-strings are supported from python 3.6, and have a slightly cleaner syntax.\r\n\r\nYou can also use an f-string in the `extra_args` argument below.",
      "created_at": "2021-02-16T17:43:40Z",
      "updated_at": "2021-04-21T23:09:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r577014215",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/577014215"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1972,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/578972424",
      "pull_request_review_id": 593912765,
      "id": 578972424,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODk3MjQyNA==",
      "diff_hunk": "@@ -1686,27 +1686,16 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n                 break;\n             }\n \n-            bool failed_rewind{false};\n-            // Can't hold cs_main while calling RewindBlockIndex, so retrieve the relevant\n-            // chainstates beforehand.\n-            for (CChainState* chainstate : WITH_LOCK(::cs_main, return chainman.GetAll())) {\n-                if (!fReset) {\n-                    // Note that RewindBlockIndex MUST run even if we're about to -reindex-chainstate.\n-                    // It both disconnects blocks based on the chainstate, and drops block data in\n-                    // BlockIndex() based on lack of available witness data.\n-                    uiInterface.InitMessage(_(\"Rewinding blocks...\").translated);\n-                    if (!chainstate->RewindBlockIndex(chainparams)) {\n-                        strLoadError = _(\n-                            \"Unable to rewind the database to a pre-fork state. \"\n-                            \"You will need to redownload the blockchain\");\n-                        failed_rewind = true;\n-                        break; // out of the per-chainstate loop\n-                    }\n-                }\n-            }\n \n-            if (failed_rewind) {\n-                break; // out of the chainstate activation do-while\n+            if (!fReset) {\n+                uiInterface.InitMessage(_(\"Checking if redownload is needed...\").translated);\n+                LOCK(cs_main);\n+                auto chainstates{chainman.GetAll()};\n+                if (std::any_of(chainstates.begin(), chainstates.end(),\n+                                [&chainparams](CChainState* cs) EXCLUSIVE_LOCKS_REQUIRED(cs_main) { return cs->NeedsRedownload(chainparams); })) {\n+                    strLoadError = _(\"Segwit blocks are insufficiently validated. Please restart with -reindex.\");",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 31,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "5e818578524ee8419bcaf610cf1394817d867663",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Perhaps `\"Witness data for blocks after height %d requires validation.Please restart with -reindex.\", params.SegwitHeight` might be better?\r\n\r\nSeems like the commit message should also be updated now this isn't recommending deleting the blocks dir.\r\n\r\nI suppose with assumeutxo, we could conceivably have a `-reindex-while-running` option, that downgraded the current tip to \"assumeutxo-valid\", and did the reindex/redownload in the background until it caught up.",
      "created_at": "2021-02-19T07:10:38Z",
      "updated_at": "2021-04-21T23:09:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r578972424",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/578972424"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1696,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/578974287",
      "pull_request_review_id": 593912765,
      "id": 578974287,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODk3NDI4Nw==",
      "diff_hunk": "@@ -4390,143 +4390,22 @@ bool CChainState::ReplayBlocks(const CChainParams& params)\n     return true;\n }\n \n-//! Helper for CChainState::RewindBlockIndex\n-void CChainState::EraseBlockData(CBlockIndex* index)\n+bool CChainState::NeedsRedownload(const CChainParams& params)\n {\n     AssertLockHeld(cs_main);\n-    assert(!m_chain.Contains(index)); // Make sure this block isn't active\n-\n-    // Reduce validity\n-    index->nStatus = std::min<unsigned int>(index->nStatus & BLOCK_VALID_MASK, BLOCK_VALID_TREE) | (index->nStatus & ~BLOCK_VALID_MASK);\n-    // Remove have-data flags.\n-    index->nStatus &= ~(BLOCK_HAVE_DATA | BLOCK_HAVE_UNDO);\n-    // Remove storage location.\n-    index->nFile = 0;\n-    index->nDataPos = 0;\n-    index->nUndoPos = 0;\n-    // Remove various other things\n-    index->nTx = 0;\n-    index->nChainTx = 0;\n-    index->nSequenceId = 0;\n-    // Make sure it gets written.\n-    setDirtyBlockIndex.insert(index);\n-    // Update indexes\n-    setBlockIndexCandidates.erase(index);\n-    auto ret = m_blockman.m_blocks_unlinked.equal_range(index->pprev);\n-    while (ret.first != ret.second) {\n-        if (ret.first->second == index) {\n-            m_blockman.m_blocks_unlinked.erase(ret.first++);\n-        } else {\n-            ++ret.first;\n-        }\n-    }\n-    // Mark parent as eligible for main chain again\n-    if (index->pprev && index->pprev->IsValid(BLOCK_VALID_TRANSACTIONS) && index->pprev->HaveTxsDownloaded()) {\n-        setBlockIndexCandidates.insert(index->pprev);\n-    }\n-}\n-\n-bool CChainState::RewindBlockIndex(const CChainParams& params)\n-{\n-    // Note that during -reindex-chainstate we are called with an empty m_chain!\n \n-    // First erase all post-segwit blocks without witness not in the main chain,\n-    // as this can we done without costly DisconnectTip calls. Active\n-    // blocks will be dealt with below (releasing cs_main in between).\n-    {\n-        LOCK(cs_main);\n-        for (const auto& entry : m_blockman.m_block_index) {\n-            if (IsWitnessEnabled(entry.second->pprev, params.GetConsensus()) && !(entry.second->nStatus & BLOCK_OPT_WITNESS) && !m_chain.Contains(entry.second)) {\n-                EraseBlockData(entry.second);\n-            }\n-        }\n-    }\n+    // At and above params.SegwitHeight, segwit consensus rules must be validated\n+    CBlockIndex* block = m_chain[params.GetConsensus().SegwitHeight];",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 57,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "5e818578524ee8419bcaf610cf1394817d867663",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm a little surprised this doesn't go from `m_chain.Tip()` backwards to `SegwitHeight`?\r\n\r\nYou're only trying to figure out if any blocks didn't have witness data checked, not which is the lowest one, and if there are any without witness data, the tip should also not have witness data (if the node software that downloaded the tip was segwit aware it would have rewound or demanded a reindex, rather than downloading the tip). I think it's still probably smart to check every block back to SegwitHeight in case of some weird bug in old software, so the normal case wouldn't be any faster.",
      "created_at": "2021-02-19T07:15:43Z",
      "updated_at": "2021-04-21T23:09:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r578974287",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/578974287"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4398,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/578975566",
      "pull_request_review_id": 593912765,
      "id": 578975566,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODk3NTU2Ng==",
      "diff_hunk": "@@ -1686,27 +1686,16 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n                 break;\n             }\n \n-            bool failed_rewind{false};\n-            // Can't hold cs_main while calling RewindBlockIndex, so retrieve the relevant\n-            // chainstates beforehand.\n-            for (CChainState* chainstate : WITH_LOCK(::cs_main, return chainman.GetAll())) {\n-                if (!fReset) {\n-                    // Note that RewindBlockIndex MUST run even if we're about to -reindex-chainstate.\n-                    // It both disconnects blocks based on the chainstate, and drops block data in\n-                    // BlockIndex() based on lack of available witness data.\n-                    uiInterface.InitMessage(_(\"Rewinding blocks...\").translated);\n-                    if (!chainstate->RewindBlockIndex(chainparams)) {\n-                        strLoadError = _(\n-                            \"Unable to rewind the database to a pre-fork state. \"\n-                            \"You will need to redownload the blockchain\");\n-                        failed_rewind = true;\n-                        break; // out of the per-chainstate loop\n-                    }\n-                }\n-            }\n \n-            if (failed_rewind) {\n-                break; // out of the chainstate activation do-while\n+            if (!fReset) {\n+                uiInterface.InitMessage(_(\"Checking if redownload is needed...\").translated);",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 26,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "5e818578524ee8419bcaf610cf1394817d867663",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Is this message really needed on every startup, rather than just a message when some action is needed?",
      "created_at": "2021-02-19T07:18:49Z",
      "updated_at": "2021-04-21T23:09:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r578975566",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/578975566"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1691,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/579597720",
      "pull_request_review_id": 593912765,
      "id": 579597720,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTU5NzcyMA==",
      "diff_hunk": "@@ -684,7 +684,7 @@ class CChainState\n \n     /** Replay blocks that aren't fully applied to the database. */\n     bool ReplayBlocks(const CChainParams& params);\n-    bool RewindBlockIndex(const CChainParams& params) LOCKS_EXCLUDED(cs_main);\n+    [[nodiscard]] bool NeedsRedownload(const CChainParams& params) EXCLUSIVE_LOCKS_REQUIRED(cs_main);",
      "path": "src/validation.h",
      "position": null,
      "original_position": 5,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "5e818578524ee8419bcaf610cf1394817d867663",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Add a doxygen comment? `/** Check if chain state needs to be redownloaded due to lack of witness data */` ?\r\n\r\nShould be a `const` method, as far as I can see.",
      "created_at": "2021-02-20T05:12:16Z",
      "updated_at": "2021-04-21T23:09:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r579597720",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/579597720"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 687,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/584186625",
      "pull_request_review_id": 600192576,
      "id": 584186625,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDE4NjYyNQ==",
      "diff_hunk": "@@ -1956,23 +1956,38 @@ def test_non_standard_witness(self):\n     def test_upgrade_after_activation(self):\n         \"\"\"Test the behavior of starting up a segwit-aware node after the softfork has activated.\"\"\"\n \n-        self.restart_node(2, extra_args=[\"-segwitheight={}\".format(SEGWIT_HEIGHT)])\n+        # All nodes are caught up and node 2 is a pre-segwit node that will soon upgrade.\n+        assert_equal(self.nodes[0].getblockcount(), self.nodes[2].getblockcount())\n+        assert_equal(self.nodes[1].getblockcount(), self.nodes[2].getblockcount())\n+        assert SEGWIT_HEIGHT < self.nodes[2].getblockcount()\n+        assert softfork_active(self.nodes[0], 'segwit')\n+        assert softfork_active(self.nodes[1], 'segwit')\n+        assert 'segwit' not in self.nodes[2].getblockchaininfo()['softforks']\n+\n+        # Restarting node 2 should result in a shutdown because the blockchain consists of\n+        # insufficiently validated blocks per segwit consensus rules.\n+        self.stop_node(2)\n+        with self.nodes[2].assert_debug_log(expected_msgs=[\n+                'Segwit blocks are insufficiently validated. Please restart with -reindex.'], timeout=10):\n+            self.nodes[2].start([\"-segwitheight={}\".format(SEGWIT_HEIGHT)])",
      "path": "test/functional/p2p_segwit.py",
      "position": null,
      "original_position": 18,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "5e818578524ee8419bcaf610cf1394817d867663",
      "in_reply_to_id": 577014215,
      "user": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks for showing me that. Done.",
      "created_at": "2021-02-27T20:25:14Z",
      "updated_at": "2021-04-21T23:09:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r584186625",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/584186625"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1972,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/584186630",
      "pull_request_review_id": 600192579,
      "id": 584186630,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDE4NjYzMA==",
      "diff_hunk": "@@ -1686,27 +1686,16 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n                 break;\n             }\n \n-            bool failed_rewind{false};\n-            // Can't hold cs_main while calling RewindBlockIndex, so retrieve the relevant\n-            // chainstates beforehand.\n-            for (CChainState* chainstate : WITH_LOCK(::cs_main, return chainman.GetAll())) {\n-                if (!fReset) {\n-                    // Note that RewindBlockIndex MUST run even if we're about to -reindex-chainstate.\n-                    // It both disconnects blocks based on the chainstate, and drops block data in\n-                    // BlockIndex() based on lack of available witness data.\n-                    uiInterface.InitMessage(_(\"Rewinding blocks...\").translated);\n-                    if (!chainstate->RewindBlockIndex(chainparams)) {\n-                        strLoadError = _(\n-                            \"Unable to rewind the database to a pre-fork state. \"\n-                            \"You will need to redownload the blockchain\");\n-                        failed_rewind = true;\n-                        break; // out of the per-chainstate loop\n-                    }\n-                }\n-            }\n \n-            if (failed_rewind) {\n-                break; // out of the chainstate activation do-while\n+            if (!fReset) {\n+                uiInterface.InitMessage(_(\"Checking if redownload is needed...\").translated);\n+                LOCK(cs_main);\n+                auto chainstates{chainman.GetAll()};\n+                if (std::any_of(chainstates.begin(), chainstates.end(),\n+                                [&chainparams](CChainState* cs) EXCLUSIVE_LOCKS_REQUIRED(cs_main) { return cs->NeedsRedownload(chainparams); })) {\n+                    strLoadError = _(\"Segwit blocks are insufficiently validated. Please restart with -reindex.\");",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 31,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "5e818578524ee8419bcaf610cf1394817d867663",
      "in_reply_to_id": 578972424,
      "user": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2021-02-27T20:25:18Z",
      "updated_at": "2021-04-21T23:09:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r584186630",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/584186630"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1696,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/584186771",
      "pull_request_review_id": 600192651,
      "id": 584186771,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDE4Njc3MQ==",
      "diff_hunk": "@@ -4390,143 +4390,22 @@ bool CChainState::ReplayBlocks(const CChainParams& params)\n     return true;\n }\n \n-//! Helper for CChainState::RewindBlockIndex\n-void CChainState::EraseBlockData(CBlockIndex* index)\n+bool CChainState::NeedsRedownload(const CChainParams& params)\n {\n     AssertLockHeld(cs_main);\n-    assert(!m_chain.Contains(index)); // Make sure this block isn't active\n-\n-    // Reduce validity\n-    index->nStatus = std::min<unsigned int>(index->nStatus & BLOCK_VALID_MASK, BLOCK_VALID_TREE) | (index->nStatus & ~BLOCK_VALID_MASK);\n-    // Remove have-data flags.\n-    index->nStatus &= ~(BLOCK_HAVE_DATA | BLOCK_HAVE_UNDO);\n-    // Remove storage location.\n-    index->nFile = 0;\n-    index->nDataPos = 0;\n-    index->nUndoPos = 0;\n-    // Remove various other things\n-    index->nTx = 0;\n-    index->nChainTx = 0;\n-    index->nSequenceId = 0;\n-    // Make sure it gets written.\n-    setDirtyBlockIndex.insert(index);\n-    // Update indexes\n-    setBlockIndexCandidates.erase(index);\n-    auto ret = m_blockman.m_blocks_unlinked.equal_range(index->pprev);\n-    while (ret.first != ret.second) {\n-        if (ret.first->second == index) {\n-            m_blockman.m_blocks_unlinked.erase(ret.first++);\n-        } else {\n-            ++ret.first;\n-        }\n-    }\n-    // Mark parent as eligible for main chain again\n-    if (index->pprev && index->pprev->IsValid(BLOCK_VALID_TRANSACTIONS) && index->pprev->HaveTxsDownloaded()) {\n-        setBlockIndexCandidates.insert(index->pprev);\n-    }\n-}\n-\n-bool CChainState::RewindBlockIndex(const CChainParams& params)\n-{\n-    // Note that during -reindex-chainstate we are called with an empty m_chain!\n \n-    // First erase all post-segwit blocks without witness not in the main chain,\n-    // as this can we done without costly DisconnectTip calls. Active\n-    // blocks will be dealt with below (releasing cs_main in between).\n-    {\n-        LOCK(cs_main);\n-        for (const auto& entry : m_blockman.m_block_index) {\n-            if (IsWitnessEnabled(entry.second->pprev, params.GetConsensus()) && !(entry.second->nStatus & BLOCK_OPT_WITNESS) && !m_chain.Contains(entry.second)) {\n-                EraseBlockData(entry.second);\n-            }\n-        }\n-    }\n+    // At and above params.SegwitHeight, segwit consensus rules must be validated\n+    CBlockIndex* block = m_chain[params.GetConsensus().SegwitHeight];",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 57,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "5e818578524ee8419bcaf610cf1394817d867663",
      "in_reply_to_id": 578974287,
      "user": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah, it's a little more intuitive to go backwards. It's also faster. Updated.\r\n\r\nNote that the code was not checking each block in `[segwit_height, tip]`. It was merely looking for one insufficiently validated block and returning true. It continues to do the same thing which is why going backwards from tip is faster.",
      "created_at": "2021-02-27T20:26:16Z",
      "updated_at": "2021-04-21T23:09:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r584186771",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/584186771"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4398,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/584186805",
      "pull_request_review_id": 600192683,
      "id": 584186805,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDE4NjgwNQ==",
      "diff_hunk": "@@ -1686,27 +1686,16 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n                 break;\n             }\n \n-            bool failed_rewind{false};\n-            // Can't hold cs_main while calling RewindBlockIndex, so retrieve the relevant\n-            // chainstates beforehand.\n-            for (CChainState* chainstate : WITH_LOCK(::cs_main, return chainman.GetAll())) {\n-                if (!fReset) {\n-                    // Note that RewindBlockIndex MUST run even if we're about to -reindex-chainstate.\n-                    // It both disconnects blocks based on the chainstate, and drops block data in\n-                    // BlockIndex() based on lack of available witness data.\n-                    uiInterface.InitMessage(_(\"Rewinding blocks...\").translated);\n-                    if (!chainstate->RewindBlockIndex(chainparams)) {\n-                        strLoadError = _(\n-                            \"Unable to rewind the database to a pre-fork state. \"\n-                            \"You will need to redownload the blockchain\");\n-                        failed_rewind = true;\n-                        break; // out of the per-chainstate loop\n-                    }\n-                }\n-            }\n \n-            if (failed_rewind) {\n-                break; // out of the chainstate activation do-while\n+            if (!fReset) {\n+                uiInterface.InitMessage(_(\"Checking if redownload is needed...\").translated);",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 26,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "5e818578524ee8419bcaf610cf1394817d867663",
      "in_reply_to_id": 578975566,
      "user": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nice idea. Removed.",
      "created_at": "2021-02-27T20:26:42Z",
      "updated_at": "2021-04-21T23:09:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r584186805",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/584186805"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1691,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/584186840",
      "pull_request_review_id": 600192695,
      "id": 584186840,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDE4Njg0MA==",
      "diff_hunk": "@@ -684,7 +684,7 @@ class CChainState\n \n     /** Replay blocks that aren't fully applied to the database. */\n     bool ReplayBlocks(const CChainParams& params);\n-    bool RewindBlockIndex(const CChainParams& params) LOCKS_EXCLUDED(cs_main);\n+    [[nodiscard]] bool NeedsRedownload(const CChainParams& params) EXCLUSIVE_LOCKS_REQUIRED(cs_main);",
      "path": "src/validation.h",
      "position": null,
      "original_position": 5,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "5e818578524ee8419bcaf610cf1394817d867663",
      "in_reply_to_id": 579597720,
      "user": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done and done.",
      "created_at": "2021-02-27T20:26:54Z",
      "updated_at": "2021-04-21T23:09:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r584186840",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/584186840"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 687,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/585467654",
      "pull_request_review_id": 601689941,
      "id": 585467654,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTQ2NzY1NA==",
      "diff_hunk": "@@ -4390,143 +4390,22 @@ bool CChainState::ReplayBlocks(const CChainParams& params)\n     return true;\n }\n \n-//! Helper for CChainState::RewindBlockIndex\n-void CChainState::EraseBlockData(CBlockIndex* index)\n+bool CChainState::NeedsRedownload(const CChainParams& params)\n {\n     AssertLockHeld(cs_main);\n-    assert(!m_chain.Contains(index)); // Make sure this block isn't active\n-\n-    // Reduce validity\n-    index->nStatus = std::min<unsigned int>(index->nStatus & BLOCK_VALID_MASK, BLOCK_VALID_TREE) | (index->nStatus & ~BLOCK_VALID_MASK);\n-    // Remove have-data flags.\n-    index->nStatus &= ~(BLOCK_HAVE_DATA | BLOCK_HAVE_UNDO);\n-    // Remove storage location.\n-    index->nFile = 0;\n-    index->nDataPos = 0;\n-    index->nUndoPos = 0;\n-    // Remove various other things\n-    index->nTx = 0;\n-    index->nChainTx = 0;\n-    index->nSequenceId = 0;\n-    // Make sure it gets written.\n-    setDirtyBlockIndex.insert(index);\n-    // Update indexes\n-    setBlockIndexCandidates.erase(index);\n-    auto ret = m_blockman.m_blocks_unlinked.equal_range(index->pprev);\n-    while (ret.first != ret.second) {\n-        if (ret.first->second == index) {\n-            m_blockman.m_blocks_unlinked.erase(ret.first++);\n-        } else {\n-            ++ret.first;\n-        }\n-    }\n-    // Mark parent as eligible for main chain again\n-    if (index->pprev && index->pprev->IsValid(BLOCK_VALID_TRANSACTIONS) && index->pprev->HaveTxsDownloaded()) {\n-        setBlockIndexCandidates.insert(index->pprev);\n-    }\n-}\n-\n-bool CChainState::RewindBlockIndex(const CChainParams& params)\n-{\n-    // Note that during -reindex-chainstate we are called with an empty m_chain!\n \n-    // First erase all post-segwit blocks without witness not in the main chain,\n-    // as this can we done without costly DisconnectTip calls. Active\n-    // blocks will be dealt with below (releasing cs_main in between).\n-    {\n-        LOCK(cs_main);\n-        for (const auto& entry : m_blockman.m_block_index) {\n-            if (IsWitnessEnabled(entry.second->pprev, params.GetConsensus()) && !(entry.second->nStatus & BLOCK_OPT_WITNESS) && !m_chain.Contains(entry.second)) {\n-                EraseBlockData(entry.second);\n-            }\n-        }\n-    }\n+    // At and above params.SegwitHeight, segwit consensus rules must be validated\n+    CBlockIndex* block = m_chain[params.GetConsensus().SegwitHeight];",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 57,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "5e818578524ee8419bcaf610cf1394817d867663",
      "in_reply_to_id": 578974287,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In the normal case it checks every block in `[segwit_height, tip]` and returns false because it didn't find a block. :) (Unless I'm very confused?)",
      "created_at": "2021-03-02T10:59:58Z",
      "updated_at": "2021-04-21T23:09:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r585467654",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/585467654"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4398,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/585575246",
      "pull_request_review_id": 601828153,
      "id": 585575246,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTU3NTI0Ng==",
      "diff_hunk": "@@ -4390,143 +4390,22 @@ bool CChainState::ReplayBlocks(const CChainParams& params)\n     return true;\n }\n \n-//! Helper for CChainState::RewindBlockIndex\n-void CChainState::EraseBlockData(CBlockIndex* index)\n+bool CChainState::NeedsRedownload(const CChainParams& params)\n {\n     AssertLockHeld(cs_main);\n-    assert(!m_chain.Contains(index)); // Make sure this block isn't active\n-\n-    // Reduce validity\n-    index->nStatus = std::min<unsigned int>(index->nStatus & BLOCK_VALID_MASK, BLOCK_VALID_TREE) | (index->nStatus & ~BLOCK_VALID_MASK);\n-    // Remove have-data flags.\n-    index->nStatus &= ~(BLOCK_HAVE_DATA | BLOCK_HAVE_UNDO);\n-    // Remove storage location.\n-    index->nFile = 0;\n-    index->nDataPos = 0;\n-    index->nUndoPos = 0;\n-    // Remove various other things\n-    index->nTx = 0;\n-    index->nChainTx = 0;\n-    index->nSequenceId = 0;\n-    // Make sure it gets written.\n-    setDirtyBlockIndex.insert(index);\n-    // Update indexes\n-    setBlockIndexCandidates.erase(index);\n-    auto ret = m_blockman.m_blocks_unlinked.equal_range(index->pprev);\n-    while (ret.first != ret.second) {\n-        if (ret.first->second == index) {\n-            m_blockman.m_blocks_unlinked.erase(ret.first++);\n-        } else {\n-            ++ret.first;\n-        }\n-    }\n-    // Mark parent as eligible for main chain again\n-    if (index->pprev && index->pprev->IsValid(BLOCK_VALID_TRANSACTIONS) && index->pprev->HaveTxsDownloaded()) {\n-        setBlockIndexCandidates.insert(index->pprev);\n-    }\n-}\n-\n-bool CChainState::RewindBlockIndex(const CChainParams& params)\n-{\n-    // Note that during -reindex-chainstate we are called with an empty m_chain!\n \n-    // First erase all post-segwit blocks without witness not in the main chain,\n-    // as this can we done without costly DisconnectTip calls. Active\n-    // blocks will be dealt with below (releasing cs_main in between).\n-    {\n-        LOCK(cs_main);\n-        for (const auto& entry : m_blockman.m_block_index) {\n-            if (IsWitnessEnabled(entry.second->pprev, params.GetConsensus()) && !(entry.second->nStatus & BLOCK_OPT_WITNESS) && !m_chain.Contains(entry.second)) {\n-                EraseBlockData(entry.second);\n-            }\n-        }\n-    }\n+    // At and above params.SegwitHeight, segwit consensus rules must be validated\n+    CBlockIndex* block = m_chain[params.GetConsensus().SegwitHeight];",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 57,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "5e818578524ee8419bcaf610cf1394817d867663",
      "in_reply_to_id": 578974287,
      "user": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You're correct. I misunderstood what you were saying.",
      "created_at": "2021-03-02T13:44:36Z",
      "updated_at": "2021-04-21T23:09:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r585575246",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/585575246"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4398,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/591607496",
      "pull_request_review_id": 608827427,
      "id": 591607496,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MTYwNzQ5Ng==",
      "diff_hunk": "@@ -4431,143 +4431,22 @@ bool CChainState::ReplayBlocks(const CChainParams& params)\n     return true;\n }\n \n-//! Helper for CChainState::RewindBlockIndex\n-void CChainState::EraseBlockData(CBlockIndex* index)\n+bool CChainState::NeedsRedownload(const CChainParams& params) const\n {\n     AssertLockHeld(cs_main);\n-    assert(!m_chain.Contains(index)); // Make sure this block isn't active\n-\n-    // Reduce validity\n-    index->nStatus = std::min<unsigned int>(index->nStatus & BLOCK_VALID_MASK, BLOCK_VALID_TREE) | (index->nStatus & ~BLOCK_VALID_MASK);\n-    // Remove have-data flags.\n-    index->nStatus &= ~(BLOCK_HAVE_DATA | BLOCK_HAVE_UNDO);\n-    // Remove storage location.\n-    index->nFile = 0;\n-    index->nDataPos = 0;\n-    index->nUndoPos = 0;\n-    // Remove various other things\n-    index->nTx = 0;\n-    index->nChainTx = 0;\n-    index->nSequenceId = 0;\n-    // Make sure it gets written.\n-    setDirtyBlockIndex.insert(index);\n-    // Update indexes\n-    setBlockIndexCandidates.erase(index);\n-    auto ret = m_blockman.m_blocks_unlinked.equal_range(index->pprev);\n-    while (ret.first != ret.second) {\n-        if (ret.first->second == index) {\n-            m_blockman.m_blocks_unlinked.erase(ret.first++);\n-        } else {\n-            ++ret.first;\n-        }\n-    }\n-    // Mark parent as eligible for main chain again\n-    if (index->pprev && index->pprev->IsValid(BLOCK_VALID_TRANSACTIONS) && index->pprev->HaveTxsDownloaded()) {\n-        setBlockIndexCandidates.insert(index->pprev);\n-    }\n-}\n-\n-bool CChainState::RewindBlockIndex(const CChainParams& params)\n-{\n-    // Note that during -reindex-chainstate we are called with an empty m_chain!\n \n-    // First erase all post-segwit blocks without witness not in the main chain,\n-    // as this can we done without costly DisconnectTip calls. Active\n-    // blocks will be dealt with below (releasing cs_main in between).\n-    {\n-        LOCK(cs_main);\n-        for (const auto& entry : m_blockman.m_block_index) {\n-            if (IsWitnessEnabled(entry.second->pprev, params.GetConsensus()) && !(entry.second->nStatus & BLOCK_OPT_WITNESS) && !m_chain.Contains(entry.second)) {\n-                EraseBlockData(entry.second);\n-            }\n-        }\n-    }\n+    // At and above params.SegwitHeight, segwit consensus rules must be validated\n+    CBlockIndex* block = m_chain.Tip();\n \n-    // Find what height we need to reorganize to.\n-    CBlockIndex *tip;\n-    int nHeight = 1;\n-    {\n-        LOCK(cs_main);\n-        while (nHeight <= m_chain.Height()) {\n-            // Although SCRIPT_VERIFY_WITNESS is now generally enforced on all\n-            // blocks in ConnectBlock, we don't need to go back and\n-            // re-download/re-verify blocks from before segwit actually activated.\n-            if (IsWitnessEnabled(m_chain[nHeight - 1], params.GetConsensus()) && !(m_chain[nHeight]->nStatus & BLOCK_OPT_WITNESS)) {\n-                break;\n-            }\n-            nHeight++;\n-        }\n-\n-        tip = m_chain.Tip();\n-    }\n-    // nHeight is now the height of the first insufficiently-validated block, or tipheight + 1\n-\n-    BlockValidationState state;\n-    // Loop until the tip is below nHeight, or we reach a pruned block.\n-    while (!ShutdownRequested()) {\n-        {\n-            LOCK(cs_main);\n-            LOCK(m_mempool.cs);\n-            // Make sure nothing changed from under us (this won't happen because RewindBlockIndex runs before importing/network are active)\n-            assert(tip == m_chain.Tip());\n-            if (tip == nullptr || tip->nHeight < nHeight) break;\n-            if (fPruneMode && !(tip->nStatus & BLOCK_HAVE_DATA)) {\n-                // If pruning, don't try rewinding past the HAVE_DATA point;\n-                // since older blocks can't be served anyway, there's\n-                // no need to walk further, and trying to DisconnectTip()\n-                // will fail (and require a needless reindex/redownload\n-                // of the blockchain).\n-                break;\n-            }\n-\n-            // Disconnect block\n-            if (!DisconnectTip(state, params, nullptr)) {\n-                return error(\"RewindBlockIndex: unable to disconnect block at height %i (%s)\", tip->nHeight, state.ToString());\n-            }\n-\n-            // Reduce validity flag and have-data flags.\n-            // We do this after actual disconnecting, otherwise we'll end up writing the lack of data\n-            // to disk before writing the chainstate, resulting in a failure to continue if interrupted.\n-            // Note: If we encounter an insufficiently validated block that\n-            // is on m_chain, it must be because we are a pruning node, and\n-            // this block or some successor doesn't HAVE_DATA, so we were unable to\n-            // rewind all the way.  Blocks remaining on m_chain at this point\n-            // must not have their validity reduced.\n-            EraseBlockData(tip);\n-\n-            tip = tip->pprev;\n-        }\n-        // Make sure the queue of validation callbacks doesn't grow unboundedly.\n-        LimitValidationInterfaceQueue();\n-\n-        // Occasionally flush state to disk.\n-        if (!FlushStateToDisk(params, state, FlushStateMode::PERIODIC)) {\n-            LogPrintf(\"RewindBlockIndex: unable to flush state to disk (%s)\\n\", state.ToString());\n-            return false;\n-        }\n-    }\n-\n-    {\n-        LOCK(cs_main);\n-        if (m_chain.Tip() != nullptr) {\n-            // We can't prune block index candidates based on our tip if we have\n-            // no tip due to m_chain being empty!\n-            PruneBlockIndexCandidates();\n-\n-            CheckBlockIndex(params.GetConsensus());\n-\n-            // FlushStateToDisk can possibly read ::ChainActive(). Be conservative\n-            // and skip it here, we're about to -reindex-chainstate anyway, so\n-            // it'll get called a bunch real soon.\n-            BlockValidationState state;\n-            if (!FlushStateToDisk(params, state, FlushStateMode::ALWAYS)) {\n-                LogPrintf(\"RewindBlockIndex: unable to flush state to disk (%s)\\n\", state.ToString());\n-                return false;\n-            }\n+    while (block != nullptr && block->nHeight >= params.GetConsensus().SegwitHeight) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 140,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "1aecaac8b46a936634245739efff852f03c32b55",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```diff\r\n-    CBlockIndex* block = m_chain.Tip();\r\n+    CBlockIndex* block{m_chain.Tip()};\r\n+    const int segwit_height{params.GetConsensus().SegwitHeight};\r\n \r\n-    while (block != nullptr && block->nHeight >= params.GetConsensus().SegwitHeight) {\r\n+    while (block != nullptr && block->nHeight >= segwit_height) {\r\n```\r\n",
      "created_at": "2021-03-10T15:14:22Z",
      "updated_at": "2021-04-21T23:09:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r591607496",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/591607496"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4441,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/591608342",
      "pull_request_review_id": 608827427,
      "id": 591608342,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MTYwODM0Mg==",
      "diff_hunk": "@@ -1956,23 +1956,38 @@ def test_non_standard_witness(self):\n     def test_upgrade_after_activation(self):\n         \"\"\"Test the behavior of starting up a segwit-aware node after the softfork has activated.\"\"\"\n \n-        self.restart_node(2, extra_args=[\"-segwitheight={}\".format(SEGWIT_HEIGHT)])\n+        # All nodes are caught up and node 2 is a pre-segwit node that will soon upgrade.\n+        assert_equal(self.nodes[0].getblockcount(), self.nodes[2].getblockcount())\n+        assert_equal(self.nodes[1].getblockcount(), self.nodes[2].getblockcount())\n+        assert SEGWIT_HEIGHT < self.nodes[2].getblockcount()\n+        assert softfork_active(self.nodes[0], 'segwit')\n+        assert softfork_active(self.nodes[1], 'segwit')\n+        assert 'segwit' not in self.nodes[2].getblockchaininfo()['softforks']",
      "path": "test/functional/p2p_segwit.py",
      "position": 10,
      "original_position": 11,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "1aecaac8b46a936634245739efff852f03c32b55",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```diff\r\n         # All nodes are caught up and node 2 is a pre-segwit node that will soon upgrade.\r\n+        for n in range(2):\r\n+            assert_equal(self.nodes[n].getblockcount(), self.nodes[2].getblockcount())\r\n+            assert softfork_active(self.nodes[n], \"segwit\")\r\n-        assert_equal(self.nodes[0].getblockcount(), self.nodes[2].getblockcount())\r\n-        assert_equal(self.nodes[1].getblockcount(), self.nodes[2].getblockcount())\r\n         assert SEGWIT_HEIGHT < self.nodes[2].getblockcount()\r\n-        assert softfork_active(self.nodes[0], 'segwit')\r\n-        assert softfork_active(self.nodes[1], 'segwit')\r\n         assert 'segwit' not in self.nodes[2].getblockchaininfo()['softforks']\r\n```\r\n",
      "created_at": "2021-03-10T15:15:17Z",
      "updated_at": "2021-04-21T23:09:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r591608342",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/591608342"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1964,
      "original_line": 1964,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/591608717",
      "pull_request_review_id": 608827427,
      "id": 591608717,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MTYwODcxNw==",
      "diff_hunk": "@@ -1956,23 +1956,38 @@ def test_non_standard_witness(self):\n     def test_upgrade_after_activation(self):\n         \"\"\"Test the behavior of starting up a segwit-aware node after the softfork has activated.\"\"\"\n \n-        self.restart_node(2, extra_args=[\"-segwitheight={}\".format(SEGWIT_HEIGHT)])\n+        # All nodes are caught up and node 2 is a pre-segwit node that will soon upgrade.\n+        assert_equal(self.nodes[0].getblockcount(), self.nodes[2].getblockcount())\n+        assert_equal(self.nodes[1].getblockcount(), self.nodes[2].getblockcount())\n+        assert SEGWIT_HEIGHT < self.nodes[2].getblockcount()\n+        assert softfork_active(self.nodes[0], 'segwit')\n+        assert softfork_active(self.nodes[1], 'segwit')\n+        assert 'segwit' not in self.nodes[2].getblockchaininfo()['softforks']\n+\n+        # Restarting node 2 should result in a shutdown because the blockchain consists of\n+        # insufficiently validated blocks per segwit consensus rules.\n+        self.stop_node(2)\n+        with self.nodes[2].assert_debug_log(expected_msgs=[\n+                f\"Witness data for blocks after height {SEGWIT_HEIGHT} requires validation. Please restart with -reindex.\"], timeout=10):\n+            self.nodes[2].start([f\"-segwitheight={SEGWIT_HEIGHT}\"])\n+\n+        # As directed, the user restarts the node with -reindex\n+        self.start_node(2, extra_args=[\"-reindex\", f\"-segwitheight={SEGWIT_HEIGHT}\"])\n+\n+        # With the segwit consensus rules, the node is able to validate only up to SEGWIT_HEIGHT - 1\n+        assert_equal(self.nodes[2].getblockcount(), SEGWIT_HEIGHT - 1)\n         self.connect_nodes(0, 2)\n \n         # We reconnect more than 100 blocks, give it plenty of time\n         self.sync_blocks(timeout=240)\n \n-        # Make sure that this peer thinks segwit has activated.\n+        # The upgraded node syncs headers and performs redownload\n+        assert_equal(self.nodes[0].getblockcount(), self.nodes[2].getblockcount())\n+        assert_equal(self.nodes[1].getblockcount(), self.nodes[2].getblockcount())\n+        assert softfork_active(self.nodes[0], 'segwit')\n+        assert softfork_active(self.nodes[1], 'segwit')\n         assert softfork_active(self.nodes[2], 'segwit')",
      "path": "test/functional/p2p_segwit.py",
      "position": null,
      "original_position": 36,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "1aecaac8b46a936634245739efff852f03c32b55",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```diff\r\n         # The upgraded node syncs headers and performs redownload\r\n-        assert_equal(self.nodes[0].getblockcount(), self.nodes[2].getblockcount())\r\n-        assert_equal(self.nodes[1].getblockcount(), self.nodes[2].getblockcount())\r\n-        assert softfork_active(self.nodes[0], 'segwit')\r\n-        assert softfork_active(self.nodes[1], 'segwit')\r\n-        assert softfork_active(self.nodes[2], 'segwit')\r\n+        for n in range(2):\r\n+            assert_equal(self.nodes[n].getblockcount(), self.nodes[2].getblockcount())\r\n+        for n in range(3):\r\n+            assert softfork_active(self.nodes[n], \"segwit\")\r\n```\r\n",
      "created_at": "2021-03-10T15:15:41Z",
      "updated_at": "2021-04-21T23:09:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r591608717",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/591608717"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1989,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/591611033",
      "pull_request_review_id": 608827427,
      "id": 591611033,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MTYxMTAzMw==",
      "diff_hunk": "@@ -724,7 +724,9 @@ class CChainState\n \n     /** Replay blocks that aren't fully applied to the database. */\n     bool ReplayBlocks(const CChainParams& params);\n-    bool RewindBlockIndex(const CChainParams& params) LOCKS_EXCLUDED(cs_main);\n+\n+    /** Check if chain state needs to be redownloaded due to lack of witness data */\n+    [[nodiscard]] bool NeedsRedownload(const CChainParams& params) const EXCLUSIVE_LOCKS_REQUIRED(cs_main);",
      "path": "src/validation.h",
      "position": 7,
      "original_position": 7,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "1aecaac8b46a936634245739efff852f03c32b55",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```diff\r\n-    /** Check if chain state needs to be redownloaded due to lack of witness data */\r\n-    [[nodiscard]] bool NeedsRedownload(const CChainParams& params) const EXCLUSIVE_LOCKS_REQUIRED(cs_main);\r\n+    /** Whether the chain state needs to be reindexed due to lack of witness data. */\r\n+    [[nodiscard]] bool NeedsReindex(const CChainParams& params) const EXCLUSIVE_LOCKS_REQUIRED(cs_main);\r\n     bool LoadGenesisBlock(const CChainParams& chainparams);\r\n```",
      "created_at": "2021-03-10T15:18:07Z",
      "updated_at": "2021-04-21T23:09:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r591611033",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/591611033"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 727,
      "original_line": 727,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/591616226",
      "pull_request_review_id": 608838809,
      "id": 591616226,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MTYxNjIyNg==",
      "diff_hunk": "@@ -1697,27 +1697,16 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n                 break;\n             }\n \n-            bool failed_rewind{false};\n-            // Can't hold cs_main while calling RewindBlockIndex, so retrieve the relevant\n-            // chainstates beforehand.\n-            for (CChainState* chainstate : WITH_LOCK(::cs_main, return chainman.GetAll())) {\n-                if (!fReset) {\n-                    // Note that RewindBlockIndex MUST run even if we're about to -reindex-chainstate.\n-                    // It both disconnects blocks based on the chainstate, and drops block data in\n-                    // BlockIndex() based on lack of available witness data.\n-                    uiInterface.InitMessage(_(\"Rewinding blocks...\").translated);\n-                    if (!chainstate->RewindBlockIndex(chainparams)) {\n-                        strLoadError = _(\n-                            \"Unable to rewind the database to a pre-fork state. \"\n-                            \"You will need to redownload the blockchain\");\n-                        failed_rewind = true;\n-                        break; // out of the per-chainstate loop\n-                    }\n-                }\n-            }\n ",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "1aecaac8b46a936634245739efff852f03c32b55",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "(nit, remove extra blank line)",
      "created_at": "2021-03-10T15:24:06Z",
      "updated_at": "2021-04-21T23:09:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r591616226",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/591616226"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1700,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/592703846",
      "pull_request_review_id": 610201526,
      "id": 592703846,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MjcwMzg0Ng==",
      "diff_hunk": "@@ -4431,143 +4431,22 @@ bool CChainState::ReplayBlocks(const CChainParams& params)\n     return true;\n }\n \n-//! Helper for CChainState::RewindBlockIndex\n-void CChainState::EraseBlockData(CBlockIndex* index)\n+bool CChainState::NeedsRedownload(const CChainParams& params) const\n {\n     AssertLockHeld(cs_main);\n-    assert(!m_chain.Contains(index)); // Make sure this block isn't active\n-\n-    // Reduce validity\n-    index->nStatus = std::min<unsigned int>(index->nStatus & BLOCK_VALID_MASK, BLOCK_VALID_TREE) | (index->nStatus & ~BLOCK_VALID_MASK);\n-    // Remove have-data flags.\n-    index->nStatus &= ~(BLOCK_HAVE_DATA | BLOCK_HAVE_UNDO);\n-    // Remove storage location.\n-    index->nFile = 0;\n-    index->nDataPos = 0;\n-    index->nUndoPos = 0;\n-    // Remove various other things\n-    index->nTx = 0;\n-    index->nChainTx = 0;\n-    index->nSequenceId = 0;\n-    // Make sure it gets written.\n-    setDirtyBlockIndex.insert(index);\n-    // Update indexes\n-    setBlockIndexCandidates.erase(index);\n-    auto ret = m_blockman.m_blocks_unlinked.equal_range(index->pprev);\n-    while (ret.first != ret.second) {\n-        if (ret.first->second == index) {\n-            m_blockman.m_blocks_unlinked.erase(ret.first++);\n-        } else {\n-            ++ret.first;\n-        }\n-    }\n-    // Mark parent as eligible for main chain again\n-    if (index->pprev && index->pprev->IsValid(BLOCK_VALID_TRANSACTIONS) && index->pprev->HaveTxsDownloaded()) {\n-        setBlockIndexCandidates.insert(index->pprev);\n-    }\n-}\n-\n-bool CChainState::RewindBlockIndex(const CChainParams& params)\n-{\n-    // Note that during -reindex-chainstate we are called with an empty m_chain!\n \n-    // First erase all post-segwit blocks without witness not in the main chain,\n-    // as this can we done without costly DisconnectTip calls. Active\n-    // blocks will be dealt with below (releasing cs_main in between).\n-    {\n-        LOCK(cs_main);\n-        for (const auto& entry : m_blockman.m_block_index) {\n-            if (IsWitnessEnabled(entry.second->pprev, params.GetConsensus()) && !(entry.second->nStatus & BLOCK_OPT_WITNESS) && !m_chain.Contains(entry.second)) {\n-                EraseBlockData(entry.second);\n-            }\n-        }\n-    }\n+    // At and above params.SegwitHeight, segwit consensus rules must be validated\n+    CBlockIndex* block = m_chain.Tip();\n \n-    // Find what height we need to reorganize to.\n-    CBlockIndex *tip;\n-    int nHeight = 1;\n-    {\n-        LOCK(cs_main);\n-        while (nHeight <= m_chain.Height()) {\n-            // Although SCRIPT_VERIFY_WITNESS is now generally enforced on all\n-            // blocks in ConnectBlock, we don't need to go back and\n-            // re-download/re-verify blocks from before segwit actually activated.\n-            if (IsWitnessEnabled(m_chain[nHeight - 1], params.GetConsensus()) && !(m_chain[nHeight]->nStatus & BLOCK_OPT_WITNESS)) {\n-                break;\n-            }\n-            nHeight++;\n-        }\n-\n-        tip = m_chain.Tip();\n-    }\n-    // nHeight is now the height of the first insufficiently-validated block, or tipheight + 1\n-\n-    BlockValidationState state;\n-    // Loop until the tip is below nHeight, or we reach a pruned block.\n-    while (!ShutdownRequested()) {\n-        {\n-            LOCK(cs_main);\n-            LOCK(m_mempool.cs);\n-            // Make sure nothing changed from under us (this won't happen because RewindBlockIndex runs before importing/network are active)\n-            assert(tip == m_chain.Tip());\n-            if (tip == nullptr || tip->nHeight < nHeight) break;\n-            if (fPruneMode && !(tip->nStatus & BLOCK_HAVE_DATA)) {\n-                // If pruning, don't try rewinding past the HAVE_DATA point;\n-                // since older blocks can't be served anyway, there's\n-                // no need to walk further, and trying to DisconnectTip()\n-                // will fail (and require a needless reindex/redownload\n-                // of the blockchain).\n-                break;\n-            }\n-\n-            // Disconnect block\n-            if (!DisconnectTip(state, params, nullptr)) {\n-                return error(\"RewindBlockIndex: unable to disconnect block at height %i (%s)\", tip->nHeight, state.ToString());\n-            }\n-\n-            // Reduce validity flag and have-data flags.\n-            // We do this after actual disconnecting, otherwise we'll end up writing the lack of data\n-            // to disk before writing the chainstate, resulting in a failure to continue if interrupted.\n-            // Note: If we encounter an insufficiently validated block that\n-            // is on m_chain, it must be because we are a pruning node, and\n-            // this block or some successor doesn't HAVE_DATA, so we were unable to\n-            // rewind all the way.  Blocks remaining on m_chain at this point\n-            // must not have their validity reduced.\n-            EraseBlockData(tip);\n-\n-            tip = tip->pprev;\n-        }\n-        // Make sure the queue of validation callbacks doesn't grow unboundedly.\n-        LimitValidationInterfaceQueue();\n-\n-        // Occasionally flush state to disk.\n-        if (!FlushStateToDisk(params, state, FlushStateMode::PERIODIC)) {\n-            LogPrintf(\"RewindBlockIndex: unable to flush state to disk (%s)\\n\", state.ToString());\n-            return false;\n-        }\n-    }\n-\n-    {\n-        LOCK(cs_main);\n-        if (m_chain.Tip() != nullptr) {\n-            // We can't prune block index candidates based on our tip if we have\n-            // no tip due to m_chain being empty!\n-            PruneBlockIndexCandidates();\n-\n-            CheckBlockIndex(params.GetConsensus());\n-\n-            // FlushStateToDisk can possibly read ::ChainActive(). Be conservative\n-            // and skip it here, we're about to -reindex-chainstate anyway, so\n-            // it'll get called a bunch real soon.\n-            BlockValidationState state;\n-            if (!FlushStateToDisk(params, state, FlushStateMode::ALWAYS)) {\n-                LogPrintf(\"RewindBlockIndex: unable to flush state to disk (%s)\\n\", state.ToString());\n-                return false;\n-            }\n+    while (block != nullptr && block->nHeight >= params.GetConsensus().SegwitHeight) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 140,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "1aecaac8b46a936634245739efff852f03c32b55",
      "in_reply_to_id": 591607496,
      "user": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2021-03-11T20:36:12Z",
      "updated_at": "2021-04-21T23:09:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r592703846",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/592703846"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4441,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/592703901",
      "pull_request_review_id": 610201600,
      "id": 592703901,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MjcwMzkwMQ==",
      "diff_hunk": "@@ -1956,23 +1956,38 @@ def test_non_standard_witness(self):\n     def test_upgrade_after_activation(self):\n         \"\"\"Test the behavior of starting up a segwit-aware node after the softfork has activated.\"\"\"\n \n-        self.restart_node(2, extra_args=[\"-segwitheight={}\".format(SEGWIT_HEIGHT)])\n+        # All nodes are caught up and node 2 is a pre-segwit node that will soon upgrade.\n+        assert_equal(self.nodes[0].getblockcount(), self.nodes[2].getblockcount())\n+        assert_equal(self.nodes[1].getblockcount(), self.nodes[2].getblockcount())\n+        assert SEGWIT_HEIGHT < self.nodes[2].getblockcount()\n+        assert softfork_active(self.nodes[0], 'segwit')\n+        assert softfork_active(self.nodes[1], 'segwit')\n+        assert 'segwit' not in self.nodes[2].getblockchaininfo()['softforks']",
      "path": "test/functional/p2p_segwit.py",
      "position": 10,
      "original_position": 11,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "1aecaac8b46a936634245739efff852f03c32b55",
      "in_reply_to_id": 591608342,
      "user": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2021-03-11T20:36:17Z",
      "updated_at": "2021-04-21T23:09:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r592703901",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/592703901"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1964,
      "original_line": 1964,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/592703937",
      "pull_request_review_id": 610201655,
      "id": 592703937,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MjcwMzkzNw==",
      "diff_hunk": "@@ -1956,23 +1956,38 @@ def test_non_standard_witness(self):\n     def test_upgrade_after_activation(self):\n         \"\"\"Test the behavior of starting up a segwit-aware node after the softfork has activated.\"\"\"\n \n-        self.restart_node(2, extra_args=[\"-segwitheight={}\".format(SEGWIT_HEIGHT)])\n+        # All nodes are caught up and node 2 is a pre-segwit node that will soon upgrade.\n+        assert_equal(self.nodes[0].getblockcount(), self.nodes[2].getblockcount())\n+        assert_equal(self.nodes[1].getblockcount(), self.nodes[2].getblockcount())\n+        assert SEGWIT_HEIGHT < self.nodes[2].getblockcount()\n+        assert softfork_active(self.nodes[0], 'segwit')\n+        assert softfork_active(self.nodes[1], 'segwit')\n+        assert 'segwit' not in self.nodes[2].getblockchaininfo()['softforks']\n+\n+        # Restarting node 2 should result in a shutdown because the blockchain consists of\n+        # insufficiently validated blocks per segwit consensus rules.\n+        self.stop_node(2)\n+        with self.nodes[2].assert_debug_log(expected_msgs=[\n+                f\"Witness data for blocks after height {SEGWIT_HEIGHT} requires validation. Please restart with -reindex.\"], timeout=10):\n+            self.nodes[2].start([f\"-segwitheight={SEGWIT_HEIGHT}\"])\n+\n+        # As directed, the user restarts the node with -reindex\n+        self.start_node(2, extra_args=[\"-reindex\", f\"-segwitheight={SEGWIT_HEIGHT}\"])\n+\n+        # With the segwit consensus rules, the node is able to validate only up to SEGWIT_HEIGHT - 1\n+        assert_equal(self.nodes[2].getblockcount(), SEGWIT_HEIGHT - 1)\n         self.connect_nodes(0, 2)\n \n         # We reconnect more than 100 blocks, give it plenty of time\n         self.sync_blocks(timeout=240)\n \n-        # Make sure that this peer thinks segwit has activated.\n+        # The upgraded node syncs headers and performs redownload\n+        assert_equal(self.nodes[0].getblockcount(), self.nodes[2].getblockcount())\n+        assert_equal(self.nodes[1].getblockcount(), self.nodes[2].getblockcount())\n+        assert softfork_active(self.nodes[0], 'segwit')\n+        assert softfork_active(self.nodes[1], 'segwit')\n         assert softfork_active(self.nodes[2], 'segwit')",
      "path": "test/functional/p2p_segwit.py",
      "position": null,
      "original_position": 36,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "1aecaac8b46a936634245739efff852f03c32b55",
      "in_reply_to_id": 591608717,
      "user": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2021-03-11T20:36:22Z",
      "updated_at": "2021-04-21T23:09:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r592703937",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/592703937"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1989,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/592705332",
      "pull_request_review_id": 610203420,
      "id": 592705332,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MjcwNTMzMg==",
      "diff_hunk": "@@ -724,7 +724,9 @@ class CChainState\n \n     /** Replay blocks that aren't fully applied to the database. */\n     bool ReplayBlocks(const CChainParams& params);\n-    bool RewindBlockIndex(const CChainParams& params) LOCKS_EXCLUDED(cs_main);\n+\n+    /** Check if chain state needs to be redownloaded due to lack of witness data */\n+    [[nodiscard]] bool NeedsRedownload(const CChainParams& params) const EXCLUSIVE_LOCKS_REQUIRED(cs_main);",
      "path": "src/validation.h",
      "position": 7,
      "original_position": 7,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "1aecaac8b46a936634245739efff852f03c32b55",
      "in_reply_to_id": 591611033,
      "user": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I left it as `NeedsRedownload` as that represents more accurately, what's needed. Restarting with `-reindex` is just the suggestion we make to the user that accomplishes the redownload. To me, `NeedsReindex` suggests merely rebuilding an index from what we have would be enough.\r\n\r\nUpdated the comment though.",
      "created_at": "2021-03-11T20:38:40Z",
      "updated_at": "2021-04-21T23:09:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r592705332",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/592705332"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 727,
      "original_line": 727,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/592705480",
      "pull_request_review_id": 610203600,
      "id": 592705480,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MjcwNTQ4MA==",
      "diff_hunk": "@@ -1697,27 +1697,16 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n                 break;\n             }\n \n-            bool failed_rewind{false};\n-            // Can't hold cs_main while calling RewindBlockIndex, so retrieve the relevant\n-            // chainstates beforehand.\n-            for (CChainState* chainstate : WITH_LOCK(::cs_main, return chainman.GetAll())) {\n-                if (!fReset) {\n-                    // Note that RewindBlockIndex MUST run even if we're about to -reindex-chainstate.\n-                    // It both disconnects blocks based on the chainstate, and drops block data in\n-                    // BlockIndex() based on lack of available witness data.\n-                    uiInterface.InitMessage(_(\"Rewinding blocks...\").translated);\n-                    if (!chainstate->RewindBlockIndex(chainparams)) {\n-                        strLoadError = _(\n-                            \"Unable to rewind the database to a pre-fork state. \"\n-                            \"You will need to redownload the blockchain\");\n-                        failed_rewind = true;\n-                        break; // out of the per-chainstate loop\n-                    }\n-                }\n-            }\n ",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "1aecaac8b46a936634245739efff852f03c32b55",
      "in_reply_to_id": 591616226,
      "user": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2021-03-11T20:38:53Z",
      "updated_at": "2021-04-21T23:09:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r592705480",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/592705480"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1700,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/616114589",
      "pull_request_review_id": 639225816,
      "id": 616114589,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNjExNDU4OQ==",
      "diff_hunk": "@@ -1956,22 +1956,35 @@ def test_non_standard_witness(self):\n     def test_upgrade_after_activation(self):\n         \"\"\"Test the behavior of starting up a segwit-aware node after the softfork has activated.\"\"\"\n \n-        self.restart_node(2, extra_args=[\"-segwitheight={}\".format(SEGWIT_HEIGHT)])\n+        # All nodes are caught up and node 2 is a pre-segwit node that will soon upgrade.\n+        for n in range(2):\n+            assert_equal(self.nodes[n].getblockcount(), self.nodes[2].getblockcount())\n+            assert softfork_active(self.nodes[n], \"segwit\")\n+        assert SEGWIT_HEIGHT < self.nodes[2].getblockcount()\n+        assert 'segwit' not in self.nodes[2].getblockchaininfo()['softforks']\n+\n+        # Restarting node 2 should result in a shutdown because the blockchain consists of\n+        # insufficiently validated blocks per segwit consensus rules.\n+        self.stop_node(2)\n+        with self.nodes[2].assert_debug_log(expected_msgs=[\n+                f\"Witness data for blocks after height {SEGWIT_HEIGHT} requires validation. Please restart with -reindex.\"], timeout=10):\n+            self.nodes[2].start([f\"-segwitheight={SEGWIT_HEIGHT}\"])\n+\n+        # As directed, the user restarts the node with -reindex\n+        self.start_node(2, extra_args=[\"-reindex\", f\"-segwitheight={SEGWIT_HEIGHT}\"])\n+\n+        # With the segwit consensus rules, the node is able to validate only up to SEGWIT_HEIGHT - 1\n+        assert_equal(self.nodes[2].getblockcount(), SEGWIT_HEIGHT - 1)\n         self.connect_nodes(0, 2)\n \n         # We reconnect more than 100 blocks, give it plenty of time\n         self.sync_blocks(timeout=240)\n \n-        # Make sure that this peer thinks segwit has activated.\n-        assert softfork_active(self.nodes[2], 'segwit')\n-\n-        # Make sure this peer's blocks match those of node0.\n-        height = self.nodes[2].getblockcount()\n-        while height >= 0:\n-            block_hash = self.nodes[2].getblockhash(height)\n-            assert_equal(block_hash, self.nodes[0].getblockhash(height))\n-            assert_equal(self.nodes[0].getblock(block_hash), self.nodes[2].getblock(block_hash))\n-            height -= 1\n+        # The upgraded node syncs headers and performs redownload\n+        for n in range(2):\n+            assert_equal(self.nodes[n].getblockcount(), self.nodes[2].getblockcount())",
      "path": "test/functional/p2p_segwit.py",
      "position": null,
      "original_position": 41,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "644827722b9eba8af40576505a3d5444272f29c3",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Perhaps worth verifying the blocks are equivalent, like in the original test?\r\n```suggestion\r\n        height = self.nodes[2].getblockcount()\r\n        blockhash = self.nodes[2].getblockhash(height)\r\n        block = self.nodes[2].getblock(blockhash)\r\n        for n in [0, 1]:\r\n            assert_equal(self.nodes[n].getblockcount(), height)\r\n            assert_equal(self.nodes[n].getblockhash(height), blockhash)\r\n            assert_equal(self.nodes[n].getblock(blockhash), block)\r\n```",
      "created_at": "2021-04-19T19:17:51Z",
      "updated_at": "2021-04-21T23:09:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r616114589",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/616114589"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": 1984,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1985,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/616123099",
      "pull_request_review_id": 639225816,
      "id": 616123099,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNjEyMzA5OQ==",
      "diff_hunk": "@@ -1698,29 +1698,17 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n                 break;\n             }\n \n-            bool failed_rewind{false};\n-            // Can't hold cs_main while calling RewindBlockIndex, so retrieve the relevant\n-            // chainstates beforehand.\n-            for (CChainState* chainstate : WITH_LOCK(::cs_main, return chainman.GetAll())) {\n-                if (!fReset) {\n-                    // Note that RewindBlockIndex MUST run even if we're about to -reindex-chainstate.\n-                    // It both disconnects blocks based on the chainstate, and drops block data in\n-                    // BlockIndex() based on lack of available witness data.\n-                    uiInterface.InitMessage(_(\"Rewinding blocks...\").translated);\n-                    if (!chainstate->RewindBlockIndex(chainparams)) {\n-                        strLoadError = _(\n-                            \"Unable to rewind the database to a pre-fork state. \"\n-                            \"You will need to redownload the blockchain\");\n-                        failed_rewind = true;\n-                        break; // out of the per-chainstate loop\n-                    }\n+            if (!fReset) {\n+                LOCK(cs_main);\n+                auto chainstates{chainman.GetAll()};\n+                if (std::any_of(chainstates.begin(), chainstates.end(),\n+                                [&chainparams](CChainState* cs) EXCLUSIVE_LOCKS_REQUIRED(cs_main) { return cs->NeedsRedownload(chainparams); })) {",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "644827722b9eba8af40576505a3d5444272f29c3",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n                                [&chainparams](const CChainState* const cs) EXCLUSIVE_LOCKS_REQUIRED(cs_main) { return cs->NeedsRedownload(chainparams); })) {\r\n```",
      "created_at": "2021-04-19T19:31:55Z",
      "updated_at": "2021-04-21T23:09:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r616123099",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/616123099"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1705,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/616129532",
      "pull_request_review_id": 639225816,
      "id": 616129532,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNjEyOTUzMg==",
      "diff_hunk": "@@ -4431,143 +4431,23 @@ bool CChainState::ReplayBlocks(const CChainParams& params)\n     return true;\n }\n \n-//! Helper for CChainState::RewindBlockIndex\n-void CChainState::EraseBlockData(CBlockIndex* index)\n+bool CChainState::NeedsRedownload(const CChainParams& params) const\n {\n     AssertLockHeld(cs_main);\n-    assert(!m_chain.Contains(index)); // Make sure this block isn't active\n-\n-    // Reduce validity\n-    index->nStatus = std::min<unsigned int>(index->nStatus & BLOCK_VALID_MASK, BLOCK_VALID_TREE) | (index->nStatus & ~BLOCK_VALID_MASK);\n-    // Remove have-data flags.\n-    index->nStatus &= ~(BLOCK_HAVE_DATA | BLOCK_HAVE_UNDO);\n-    // Remove storage location.\n-    index->nFile = 0;\n-    index->nDataPos = 0;\n-    index->nUndoPos = 0;\n-    // Remove various other things\n-    index->nTx = 0;\n-    index->nChainTx = 0;\n-    index->nSequenceId = 0;\n-    // Make sure it gets written.\n-    setDirtyBlockIndex.insert(index);\n-    // Update indexes\n-    setBlockIndexCandidates.erase(index);\n-    auto ret = m_blockman.m_blocks_unlinked.equal_range(index->pprev);\n-    while (ret.first != ret.second) {\n-        if (ret.first->second == index) {\n-            m_blockman.m_blocks_unlinked.erase(ret.first++);\n-        } else {\n-            ++ret.first;\n-        }\n-    }\n-    // Mark parent as eligible for main chain again\n-    if (index->pprev && index->pprev->IsValid(BLOCK_VALID_TRANSACTIONS) && index->pprev->HaveTxsDownloaded()) {\n-        setBlockIndexCandidates.insert(index->pprev);\n-    }\n-}\n-\n-bool CChainState::RewindBlockIndex(const CChainParams& params)\n-{\n-    // Note that during -reindex-chainstate we are called with an empty m_chain!\n \n-    // First erase all post-segwit blocks without witness not in the main chain,\n-    // as this can we done without costly DisconnectTip calls. Active\n-    // blocks will be dealt with below (releasing cs_main in between).\n-    {\n-        LOCK(cs_main);\n-        for (const auto& entry : m_blockman.m_block_index) {\n-            if (IsWitnessEnabled(entry.second->pprev, params.GetConsensus()) && !(entry.second->nStatus & BLOCK_OPT_WITNESS) && !m_chain.Contains(entry.second)) {\n-                EraseBlockData(entry.second);\n-            }\n-        }\n-    }\n+    // At and above params.SegwitHeight, segwit consensus rules must be validated\n+    CBlockIndex* block{m_chain.Tip()};\n+    const int segwit_height{params.GetConsensus().SegwitHeight};\n \n-    // Find what height we need to reorganize to.\n-    CBlockIndex *tip;\n-    int nHeight = 1;\n-    {\n-        LOCK(cs_main);\n-        while (nHeight <= m_chain.Height()) {\n-            // Although SCRIPT_VERIFY_WITNESS is now generally enforced on all\n-            // blocks in ConnectBlock, we don't need to go back and\n-            // re-download/re-verify blocks from before segwit actually activated.\n-            if (IsWitnessEnabled(m_chain[nHeight - 1], params.GetConsensus()) && !(m_chain[nHeight]->nStatus & BLOCK_OPT_WITNESS)) {\n-                break;\n-            }\n-            nHeight++;\n-        }\n-\n-        tip = m_chain.Tip();\n-    }\n-    // nHeight is now the height of the first insufficiently-validated block, or tipheight + 1\n-\n-    BlockValidationState state;\n-    // Loop until the tip is below nHeight, or we reach a pruned block.\n-    while (!ShutdownRequested()) {\n-        {\n-            LOCK(cs_main);\n-            LOCK(m_mempool.cs);\n-            // Make sure nothing changed from under us (this won't happen because RewindBlockIndex runs before importing/network are active)\n-            assert(tip == m_chain.Tip());\n-            if (tip == nullptr || tip->nHeight < nHeight) break;\n-            if (fPruneMode && !(tip->nStatus & BLOCK_HAVE_DATA)) {\n-                // If pruning, don't try rewinding past the HAVE_DATA point;\n-                // since older blocks can't be served anyway, there's\n-                // no need to walk further, and trying to DisconnectTip()\n-                // will fail (and require a needless reindex/redownload\n-                // of the blockchain).\n-                break;\n-            }\n-\n-            // Disconnect block\n-            if (!DisconnectTip(state, params, nullptr)) {\n-                return error(\"RewindBlockIndex: unable to disconnect block at height %i (%s)\", tip->nHeight, state.ToString());\n-            }\n-\n-            // Reduce validity flag and have-data flags.\n-            // We do this after actual disconnecting, otherwise we'll end up writing the lack of data\n-            // to disk before writing the chainstate, resulting in a failure to continue if interrupted.\n-            // Note: If we encounter an insufficiently validated block that\n-            // is on m_chain, it must be because we are a pruning node, and\n-            // this block or some successor doesn't HAVE_DATA, so we were unable to\n-            // rewind all the way.  Blocks remaining on m_chain at this point\n-            // must not have their validity reduced.\n-            EraseBlockData(tip);\n-\n-            tip = tip->pprev;\n-        }\n-        // Make sure the queue of validation callbacks doesn't grow unboundedly.\n-        LimitValidationInterfaceQueue();\n-\n-        // Occasionally flush state to disk.\n-        if (!FlushStateToDisk(params, state, FlushStateMode::PERIODIC)) {\n-            LogPrintf(\"RewindBlockIndex: unable to flush state to disk (%s)\\n\", state.ToString());\n-            return false;\n-        }\n-    }\n-\n-    {\n-        LOCK(cs_main);\n-        if (m_chain.Tip() != nullptr) {\n-            // We can't prune block index candidates based on our tip if we have\n-            // no tip due to m_chain being empty!\n-            PruneBlockIndexCandidates();\n-\n-            CheckBlockIndex(params.GetConsensus());\n-\n-            // FlushStateToDisk can possibly read ::ChainActive(). Be conservative\n-            // and skip it here, we're about to -reindex-chainstate anyway, so\n-            // it'll get called a bunch real soon.\n-            BlockValidationState state;\n-            if (!FlushStateToDisk(params, state, FlushStateMode::ALWAYS)) {\n-                LogPrintf(\"RewindBlockIndex: unable to flush state to disk (%s)\\n\", state.ToString());\n-                return false;\n-            }\n+    while (block != nullptr && block->nHeight >= segwit_height) {\n+        if (!(block->nStatus & BLOCK_OPT_WITNESS)) {",
      "path": "src/validation.cpp",
      "position": 142,
      "original_position": 142,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "644827722b9eba8af40576505a3d5444272f29c3",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I did a quick grep for `BLOCK_OPT_WITNESS` and came across #19806 which added a \"fake\" `BLOCK_OPT_WITNESS` \"so that RewindBlockIndex() doesn't zealously unwind the assumed-valid chain.\" I don't have much background on AssumeUTXO but is there an interaction there? Should that be cleaned up as well?",
      "created_at": "2021-04-19T19:43:12Z",
      "updated_at": "2021-04-21T23:09:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r616129532",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/616129532"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4443,
      "original_line": 4443,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/616139111",
      "pull_request_review_id": 639257329,
      "id": 616139111,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNjEzOTExMQ==",
      "diff_hunk": "@@ -1698,29 +1698,17 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n                 break;\n             }\n \n-            bool failed_rewind{false};\n-            // Can't hold cs_main while calling RewindBlockIndex, so retrieve the relevant\n-            // chainstates beforehand.\n-            for (CChainState* chainstate : WITH_LOCK(::cs_main, return chainman.GetAll())) {\n-                if (!fReset) {\n-                    // Note that RewindBlockIndex MUST run even if we're about to -reindex-chainstate.\n-                    // It both disconnects blocks based on the chainstate, and drops block data in\n-                    // BlockIndex() based on lack of available witness data.\n-                    uiInterface.InitMessage(_(\"Rewinding blocks...\").translated);\n-                    if (!chainstate->RewindBlockIndex(chainparams)) {\n-                        strLoadError = _(\n-                            \"Unable to rewind the database to a pre-fork state. \"\n-                            \"You will need to redownload the blockchain\");\n-                        failed_rewind = true;\n-                        break; // out of the per-chainstate loop\n-                    }\n+            if (!fReset) {\n+                LOCK(cs_main);\n+                auto chainstates{chainman.GetAll()};\n+                if (std::any_of(chainstates.begin(), chainstates.end(),\n+                                [&chainparams](CChainState* cs) EXCLUSIVE_LOCKS_REQUIRED(cs_main) { return cs->NeedsRedownload(chainparams); })) {",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "644827722b9eba8af40576505a3d5444272f29c3",
      "in_reply_to_id": 616123099,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "There's no harm in doing this, but I don't think making the pointer const (`CChainstate* const`) is an improvement. In c++, when you pass a pointer, the called function makes a copy of that pointer, so it being const or not communicates nothing to the caller.\r\n\r\nMaking the pointer point to const data (`const CChainstate*`) on the other hand _is_ useful. It means that the function can't mutate the thing that `cs` is pointing to (and can't be called with a pointer to non-const).",
      "created_at": "2021-04-19T19:59:42Z",
      "updated_at": "2021-04-21T23:09:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r616139111",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/616139111"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1705,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/616140260",
      "pull_request_review_id": 639259013,
      "id": 616140260,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNjE0MDI2MA==",
      "diff_hunk": "@@ -1956,22 +1956,35 @@ def test_non_standard_witness(self):\n     def test_upgrade_after_activation(self):\n         \"\"\"Test the behavior of starting up a segwit-aware node after the softfork has activated.\"\"\"\n \n-        self.restart_node(2, extra_args=[\"-segwitheight={}\".format(SEGWIT_HEIGHT)])\n+        # All nodes are caught up and node 2 is a pre-segwit node that will soon upgrade.\n+        for n in range(2):\n+            assert_equal(self.nodes[n].getblockcount(), self.nodes[2].getblockcount())\n+            assert softfork_active(self.nodes[n], \"segwit\")\n+        assert SEGWIT_HEIGHT < self.nodes[2].getblockcount()\n+        assert 'segwit' not in self.nodes[2].getblockchaininfo()['softforks']\n+\n+        # Restarting node 2 should result in a shutdown because the blockchain consists of\n+        # insufficiently validated blocks per segwit consensus rules.\n+        self.stop_node(2)\n+        with self.nodes[2].assert_debug_log(expected_msgs=[\n+                f\"Witness data for blocks after height {SEGWIT_HEIGHT} requires validation. Please restart with -reindex.\"], timeout=10):\n+            self.nodes[2].start([f\"-segwitheight={SEGWIT_HEIGHT}\"])\n+\n+        # As directed, the user restarts the node with -reindex\n+        self.start_node(2, extra_args=[\"-reindex\", f\"-segwitheight={SEGWIT_HEIGHT}\"])\n+\n+        # With the segwit consensus rules, the node is able to validate only up to SEGWIT_HEIGHT - 1\n+        assert_equal(self.nodes[2].getblockcount(), SEGWIT_HEIGHT - 1)\n         self.connect_nodes(0, 2)\n \n         # We reconnect more than 100 blocks, give it plenty of time\n         self.sync_blocks(timeout=240)\n \n-        # Make sure that this peer thinks segwit has activated.\n-        assert softfork_active(self.nodes[2], 'segwit')\n-\n-        # Make sure this peer's blocks match those of node0.\n-        height = self.nodes[2].getblockcount()\n-        while height >= 0:\n-            block_hash = self.nodes[2].getblockhash(height)\n-            assert_equal(block_hash, self.nodes[0].getblockhash(height))\n-            assert_equal(self.nodes[0].getblock(block_hash), self.nodes[2].getblock(block_hash))\n-            height -= 1\n+        # The upgraded node syncs headers and performs redownload\n+        for n in range(2):\n+            assert_equal(self.nodes[n].getblockcount(), self.nodes[2].getblockcount())",
      "path": "test/functional/p2p_segwit.py",
      "position": null,
      "original_position": 41,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "644827722b9eba8af40576505a3d5444272f29c3",
      "in_reply_to_id": 616114589,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`self.sync_blocks()` ensures that all the nodes are synced to the same block (see https://github.com/bitcoin/bitcoin/pull/21009#discussion_r571932692).",
      "created_at": "2021-04-19T20:01:52Z",
      "updated_at": "2021-04-21T23:09:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r616140260",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/616140260"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": 1984,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1985,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/616185830",
      "pull_request_review_id": 639317930,
      "id": 616185830,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNjE4NTgzMA==",
      "diff_hunk": "@@ -1698,29 +1698,17 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n                 break;\n             }\n \n-            bool failed_rewind{false};\n-            // Can't hold cs_main while calling RewindBlockIndex, so retrieve the relevant\n-            // chainstates beforehand.\n-            for (CChainState* chainstate : WITH_LOCK(::cs_main, return chainman.GetAll())) {\n-                if (!fReset) {\n-                    // Note that RewindBlockIndex MUST run even if we're about to -reindex-chainstate.\n-                    // It both disconnects blocks based on the chainstate, and drops block data in\n-                    // BlockIndex() based on lack of available witness data.\n-                    uiInterface.InitMessage(_(\"Rewinding blocks...\").translated);\n-                    if (!chainstate->RewindBlockIndex(chainparams)) {\n-                        strLoadError = _(\n-                            \"Unable to rewind the database to a pre-fork state. \"\n-                            \"You will need to redownload the blockchain\");\n-                        failed_rewind = true;\n-                        break; // out of the per-chainstate loop\n-                    }\n+            if (!fReset) {\n+                LOCK(cs_main);\n+                auto chainstates{chainman.GetAll()};\n+                if (std::any_of(chainstates.begin(), chainstates.end(),\n+                                [&chainparams](CChainState* cs) EXCLUSIVE_LOCKS_REQUIRED(cs_main) { return cs->NeedsRedownload(chainparams); })) {",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "644827722b9eba8af40576505a3d5444272f29c3",
      "in_reply_to_id": 616123099,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ah true 👍 the latter `const` is what I was going for :D ",
      "created_at": "2021-04-19T21:20:29Z",
      "updated_at": "2021-04-21T23:09:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r616185830",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/616185830"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1705,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/616759874",
      "pull_request_review_id": 640054190,
      "id": 616759874,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNjc1OTg3NA==",
      "diff_hunk": "@@ -1956,22 +1956,35 @@ def test_non_standard_witness(self):\n     def test_upgrade_after_activation(self):\n         \"\"\"Test the behavior of starting up a segwit-aware node after the softfork has activated.\"\"\"\n \n-        self.restart_node(2, extra_args=[\"-segwitheight={}\".format(SEGWIT_HEIGHT)])\n+        # All nodes are caught up and node 2 is a pre-segwit node that will soon upgrade.\n+        for n in range(2):\n+            assert_equal(self.nodes[n].getblockcount(), self.nodes[2].getblockcount())\n+            assert softfork_active(self.nodes[n], \"segwit\")\n+        assert SEGWIT_HEIGHT < self.nodes[2].getblockcount()\n+        assert 'segwit' not in self.nodes[2].getblockchaininfo()['softforks']\n+\n+        # Restarting node 2 should result in a shutdown because the blockchain consists of\n+        # insufficiently validated blocks per segwit consensus rules.\n+        self.stop_node(2)\n+        with self.nodes[2].assert_debug_log(expected_msgs=[\n+                f\"Witness data for blocks after height {SEGWIT_HEIGHT} requires validation. Please restart with -reindex.\"], timeout=10):\n+            self.nodes[2].start([f\"-segwitheight={SEGWIT_HEIGHT}\"])\n+\n+        # As directed, the user restarts the node with -reindex\n+        self.start_node(2, extra_args=[\"-reindex\", f\"-segwitheight={SEGWIT_HEIGHT}\"])\n+\n+        # With the segwit consensus rules, the node is able to validate only up to SEGWIT_HEIGHT - 1\n+        assert_equal(self.nodes[2].getblockcount(), SEGWIT_HEIGHT - 1)\n         self.connect_nodes(0, 2)\n \n         # We reconnect more than 100 blocks, give it plenty of time\n         self.sync_blocks(timeout=240)\n \n-        # Make sure that this peer thinks segwit has activated.\n-        assert softfork_active(self.nodes[2], 'segwit')\n-\n-        # Make sure this peer's blocks match those of node0.\n-        height = self.nodes[2].getblockcount()\n-        while height >= 0:\n-            block_hash = self.nodes[2].getblockhash(height)\n-            assert_equal(block_hash, self.nodes[0].getblockhash(height))\n-            assert_equal(self.nodes[0].getblock(block_hash), self.nodes[2].getblock(block_hash))\n-            height -= 1\n+        # The upgraded node syncs headers and performs redownload\n+        for n in range(2):\n+            assert_equal(self.nodes[n].getblockcount(), self.nodes[2].getblockcount())",
      "path": "test/functional/p2p_segwit.py",
      "position": null,
      "original_position": 41,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "644827722b9eba8af40576505a3d5444272f29c3",
      "in_reply_to_id": 616114589,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "is the assert_equal for `getblockcount()` necessary?",
      "created_at": "2021-04-20T14:50:49Z",
      "updated_at": "2021-04-21T23:09:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r616759874",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/616759874"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": 1984,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1985,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/617660294",
      "pull_request_review_id": 641243165,
      "id": 617660294,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNzY2MDI5NA==",
      "diff_hunk": "@@ -4431,143 +4431,23 @@ bool CChainState::ReplayBlocks(const CChainParams& params)\n     return true;\n }\n \n-//! Helper for CChainState::RewindBlockIndex\n-void CChainState::EraseBlockData(CBlockIndex* index)\n+bool CChainState::NeedsRedownload(const CChainParams& params) const\n {\n     AssertLockHeld(cs_main);\n-    assert(!m_chain.Contains(index)); // Make sure this block isn't active\n-\n-    // Reduce validity\n-    index->nStatus = std::min<unsigned int>(index->nStatus & BLOCK_VALID_MASK, BLOCK_VALID_TREE) | (index->nStatus & ~BLOCK_VALID_MASK);\n-    // Remove have-data flags.\n-    index->nStatus &= ~(BLOCK_HAVE_DATA | BLOCK_HAVE_UNDO);\n-    // Remove storage location.\n-    index->nFile = 0;\n-    index->nDataPos = 0;\n-    index->nUndoPos = 0;\n-    // Remove various other things\n-    index->nTx = 0;\n-    index->nChainTx = 0;\n-    index->nSequenceId = 0;\n-    // Make sure it gets written.\n-    setDirtyBlockIndex.insert(index);\n-    // Update indexes\n-    setBlockIndexCandidates.erase(index);\n-    auto ret = m_blockman.m_blocks_unlinked.equal_range(index->pprev);\n-    while (ret.first != ret.second) {\n-        if (ret.first->second == index) {\n-            m_blockman.m_blocks_unlinked.erase(ret.first++);\n-        } else {\n-            ++ret.first;\n-        }\n-    }\n-    // Mark parent as eligible for main chain again\n-    if (index->pprev && index->pprev->IsValid(BLOCK_VALID_TRANSACTIONS) && index->pprev->HaveTxsDownloaded()) {\n-        setBlockIndexCandidates.insert(index->pprev);\n-    }\n-}\n-\n-bool CChainState::RewindBlockIndex(const CChainParams& params)\n-{\n-    // Note that during -reindex-chainstate we are called with an empty m_chain!\n \n-    // First erase all post-segwit blocks without witness not in the main chain,\n-    // as this can we done without costly DisconnectTip calls. Active\n-    // blocks will be dealt with below (releasing cs_main in between).\n-    {\n-        LOCK(cs_main);\n-        for (const auto& entry : m_blockman.m_block_index) {\n-            if (IsWitnessEnabled(entry.second->pprev, params.GetConsensus()) && !(entry.second->nStatus & BLOCK_OPT_WITNESS) && !m_chain.Contains(entry.second)) {\n-                EraseBlockData(entry.second);\n-            }\n-        }\n-    }\n+    // At and above params.SegwitHeight, segwit consensus rules must be validated\n+    CBlockIndex* block{m_chain.Tip()};\n+    const int segwit_height{params.GetConsensus().SegwitHeight};\n \n-    // Find what height we need to reorganize to.\n-    CBlockIndex *tip;\n-    int nHeight = 1;\n-    {\n-        LOCK(cs_main);\n-        while (nHeight <= m_chain.Height()) {\n-            // Although SCRIPT_VERIFY_WITNESS is now generally enforced on all\n-            // blocks in ConnectBlock, we don't need to go back and\n-            // re-download/re-verify blocks from before segwit actually activated.\n-            if (IsWitnessEnabled(m_chain[nHeight - 1], params.GetConsensus()) && !(m_chain[nHeight]->nStatus & BLOCK_OPT_WITNESS)) {\n-                break;\n-            }\n-            nHeight++;\n-        }\n-\n-        tip = m_chain.Tip();\n-    }\n-    // nHeight is now the height of the first insufficiently-validated block, or tipheight + 1\n-\n-    BlockValidationState state;\n-    // Loop until the tip is below nHeight, or we reach a pruned block.\n-    while (!ShutdownRequested()) {\n-        {\n-            LOCK(cs_main);\n-            LOCK(m_mempool.cs);\n-            // Make sure nothing changed from under us (this won't happen because RewindBlockIndex runs before importing/network are active)\n-            assert(tip == m_chain.Tip());\n-            if (tip == nullptr || tip->nHeight < nHeight) break;\n-            if (fPruneMode && !(tip->nStatus & BLOCK_HAVE_DATA)) {\n-                // If pruning, don't try rewinding past the HAVE_DATA point;\n-                // since older blocks can't be served anyway, there's\n-                // no need to walk further, and trying to DisconnectTip()\n-                // will fail (and require a needless reindex/redownload\n-                // of the blockchain).\n-                break;\n-            }\n-\n-            // Disconnect block\n-            if (!DisconnectTip(state, params, nullptr)) {\n-                return error(\"RewindBlockIndex: unable to disconnect block at height %i (%s)\", tip->nHeight, state.ToString());\n-            }\n-\n-            // Reduce validity flag and have-data flags.\n-            // We do this after actual disconnecting, otherwise we'll end up writing the lack of data\n-            // to disk before writing the chainstate, resulting in a failure to continue if interrupted.\n-            // Note: If we encounter an insufficiently validated block that\n-            // is on m_chain, it must be because we are a pruning node, and\n-            // this block or some successor doesn't HAVE_DATA, so we were unable to\n-            // rewind all the way.  Blocks remaining on m_chain at this point\n-            // must not have their validity reduced.\n-            EraseBlockData(tip);\n-\n-            tip = tip->pprev;\n-        }\n-        // Make sure the queue of validation callbacks doesn't grow unboundedly.\n-        LimitValidationInterfaceQueue();\n-\n-        // Occasionally flush state to disk.\n-        if (!FlushStateToDisk(params, state, FlushStateMode::PERIODIC)) {\n-            LogPrintf(\"RewindBlockIndex: unable to flush state to disk (%s)\\n\", state.ToString());\n-            return false;\n-        }\n-    }\n-\n-    {\n-        LOCK(cs_main);\n-        if (m_chain.Tip() != nullptr) {\n-            // We can't prune block index candidates based on our tip if we have\n-            // no tip due to m_chain being empty!\n-            PruneBlockIndexCandidates();\n-\n-            CheckBlockIndex(params.GetConsensus());\n-\n-            // FlushStateToDisk can possibly read ::ChainActive(). Be conservative\n-            // and skip it here, we're about to -reindex-chainstate anyway, so\n-            // it'll get called a bunch real soon.\n-            BlockValidationState state;\n-            if (!FlushStateToDisk(params, state, FlushStateMode::ALWAYS)) {\n-                LogPrintf(\"RewindBlockIndex: unable to flush state to disk (%s)\\n\", state.ToString());\n-                return false;\n-            }\n+    while (block != nullptr && block->nHeight >= segwit_height) {\n+        if (!(block->nStatus & BLOCK_OPT_WITNESS)) {",
      "path": "src/validation.cpp",
      "position": 142,
      "original_position": 142,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "644827722b9eba8af40576505a3d5444272f29c3",
      "in_reply_to_id": 616129532,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good call, @glozow. I'll make a note to look at whether that's still necessary after the merge of this PR.",
      "created_at": "2021-04-21T15:34:40Z",
      "updated_at": "2021-04-21T23:09:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r617660294",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/617660294"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4443,
      "original_line": 4443,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/617953209",
      "pull_request_review_id": 641628875,
      "id": 617953209,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNzk1MzIwOQ==",
      "diff_hunk": "@@ -1956,22 +1956,35 @@ def test_non_standard_witness(self):\n     def test_upgrade_after_activation(self):\n         \"\"\"Test the behavior of starting up a segwit-aware node after the softfork has activated.\"\"\"\n \n-        self.restart_node(2, extra_args=[\"-segwitheight={}\".format(SEGWIT_HEIGHT)])\n+        # All nodes are caught up and node 2 is a pre-segwit node that will soon upgrade.\n+        for n in range(2):\n+            assert_equal(self.nodes[n].getblockcount(), self.nodes[2].getblockcount())\n+            assert softfork_active(self.nodes[n], \"segwit\")\n+        assert SEGWIT_HEIGHT < self.nodes[2].getblockcount()\n+        assert 'segwit' not in self.nodes[2].getblockchaininfo()['softforks']\n+\n+        # Restarting node 2 should result in a shutdown because the blockchain consists of\n+        # insufficiently validated blocks per segwit consensus rules.\n+        self.stop_node(2)\n+        with self.nodes[2].assert_debug_log(expected_msgs=[\n+                f\"Witness data for blocks after height {SEGWIT_HEIGHT} requires validation. Please restart with -reindex.\"], timeout=10):\n+            self.nodes[2].start([f\"-segwitheight={SEGWIT_HEIGHT}\"])\n+\n+        # As directed, the user restarts the node with -reindex\n+        self.start_node(2, extra_args=[\"-reindex\", f\"-segwitheight={SEGWIT_HEIGHT}\"])\n+\n+        # With the segwit consensus rules, the node is able to validate only up to SEGWIT_HEIGHT - 1\n+        assert_equal(self.nodes[2].getblockcount(), SEGWIT_HEIGHT - 1)\n         self.connect_nodes(0, 2)\n \n         # We reconnect more than 100 blocks, give it plenty of time\n         self.sync_blocks(timeout=240)\n \n-        # Make sure that this peer thinks segwit has activated.\n-        assert softfork_active(self.nodes[2], 'segwit')\n-\n-        # Make sure this peer's blocks match those of node0.\n-        height = self.nodes[2].getblockcount()\n-        while height >= 0:\n-            block_hash = self.nodes[2].getblockhash(height)\n-            assert_equal(block_hash, self.nodes[0].getblockhash(height))\n-            assert_equal(self.nodes[0].getblock(block_hash), self.nodes[2].getblock(block_hash))\n-            height -= 1\n+        # The upgraded node syncs headers and performs redownload\n+        for n in range(2):\n+            assert_equal(self.nodes[n].getblockcount(), self.nodes[2].getblockcount())",
      "path": "test/functional/p2p_segwit.py",
      "position": null,
      "original_position": 41,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "644827722b9eba8af40576505a3d5444272f29c3",
      "in_reply_to_id": 616114589,
      "user": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You're right. `sync_blocks()` checks for the best block hash as mentioned, so the `getblockcount()` check is really just checking for very unlikely hash collisions. Updated.",
      "created_at": "2021-04-21T23:11:02Z",
      "updated_at": "2021-04-21T23:11:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r617953209",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/617953209"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": 1984,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 1985,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/617953274",
      "pull_request_review_id": 641628919,
      "id": 617953274,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNzk1MzI3NA==",
      "diff_hunk": "@@ -1698,29 +1698,17 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n                 break;\n             }\n \n-            bool failed_rewind{false};\n-            // Can't hold cs_main while calling RewindBlockIndex, so retrieve the relevant\n-            // chainstates beforehand.\n-            for (CChainState* chainstate : WITH_LOCK(::cs_main, return chainman.GetAll())) {\n-                if (!fReset) {\n-                    // Note that RewindBlockIndex MUST run even if we're about to -reindex-chainstate.\n-                    // It both disconnects blocks based on the chainstate, and drops block data in\n-                    // BlockIndex() based on lack of available witness data.\n-                    uiInterface.InitMessage(_(\"Rewinding blocks...\").translated);\n-                    if (!chainstate->RewindBlockIndex(chainparams)) {\n-                        strLoadError = _(\n-                            \"Unable to rewind the database to a pre-fork state. \"\n-                            \"You will need to redownload the blockchain\");\n-                        failed_rewind = true;\n-                        break; // out of the per-chainstate loop\n-                    }\n+            if (!fReset) {\n+                LOCK(cs_main);\n+                auto chainstates{chainman.GetAll()};\n+                if (std::any_of(chainstates.begin(), chainstates.end(),\n+                                [&chainparams](CChainState* cs) EXCLUSIVE_LOCKS_REQUIRED(cs_main) { return cs->NeedsRedownload(chainparams); })) {",
      "path": "src/init.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "644827722b9eba8af40576505a3d5444272f29c3",
      "in_reply_to_id": 616123099,
      "user": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2021-04-21T23:11:11Z",
      "updated_at": "2021-04-21T23:11:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r617953274",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/617953274"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1705,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/617961288",
      "pull_request_review_id": 641636847,
      "id": 617961288,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNzk2MTI4OA==",
      "diff_hunk": "@@ -1956,22 +1956,33 @@ def test_non_standard_witness(self):\n     def test_upgrade_after_activation(self):\n         \"\"\"Test the behavior of starting up a segwit-aware node after the softfork has activated.\"\"\"\n \n-        self.restart_node(2, extra_args=[\"-segwitheight={}\".format(SEGWIT_HEIGHT)])\n+        # All nodes are caught up and node 2 is a pre-segwit node that will soon upgrade.\n+        for n in range(2):\n+            assert_equal(self.nodes[n].getblockcount(), self.nodes[2].getblockcount())\n+            assert softfork_active(self.nodes[n], \"segwit\")\n+        assert SEGWIT_HEIGHT < self.nodes[2].getblockcount()\n+        assert 'segwit' not in self.nodes[2].getblockchaininfo()['softforks']\n+\n+        # Restarting node 2 should result in a shutdown because the blockchain consists of\n+        # insufficiently validated blocks per segwit consensus rules.\n+        self.stop_node(2)\n+        with self.nodes[2].assert_debug_log(expected_msgs=[\n+                f\"Witness data for blocks after height {SEGWIT_HEIGHT} requires validation. Please restart with -reindex.\"], timeout=10):\n+            self.nodes[2].start([f\"-segwitheight={SEGWIT_HEIGHT}\"])\n+\n+        # As directed, the user restarts the node with -reindex\n+        self.start_node(2, extra_args=[\"-reindex\", f\"-segwitheight={SEGWIT_HEIGHT}\"])\n+\n+        # With the segwit consensus rules, the node is able to validate only up to SEGWIT_HEIGHT - 1\n+        assert_equal(self.nodes[2].getblockcount(), SEGWIT_HEIGHT - 1)\n         self.connect_nodes(0, 2)\n \n         # We reconnect more than 100 blocks, give it plenty of time\n+        # sync_blocks() also verifies the best block hash is the same for all nodes\n         self.sync_blocks(timeout=240)\n \n-        # Make sure that this peer thinks segwit has activated.\n-        assert softfork_active(self.nodes[2], 'segwit')\n-\n-        # Make sure this peer's blocks match those of node0.\n-        height = self.nodes[2].getblockcount()\n-        while height >= 0:\n-            block_hash = self.nodes[2].getblockhash(height)\n-            assert_equal(block_hash, self.nodes[0].getblockhash(height))\n-            assert_equal(self.nodes[0].getblock(block_hash), self.nodes[2].getblock(block_hash))\n-            height -= 1",
      "path": "test/functional/p2p_segwit.py",
      "position": 39,
      "original_position": 39,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "in_reply_to_id": null,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "So based on the removal of this test code (and the `SEGWIT_HEIGHT - 1` assertion above), the implication seems to be we expect users who are upgrading from pre-segwit to remove their datadir and sync to tip from scratch? Based on the assertions here, `-reindex` will not bring them to tip, so what's the point of telling the user to reindex at all? Or is this behavior specific to the functional tests, and in practice `-reindex` *would* bring the upgraded node to tip? (I'll need to review the reindex code; I can't remember what to expect there.)\r\n\r\nIf we expect users to remove their blocksdir before restarting with `-reindex`, you might consider mentioning that in the error message you've included in `init.cpp`.",
      "created_at": "2021-04-21T23:30:58Z",
      "updated_at": "2021-04-21T23:33:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r617961288",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/617961288"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1974,
      "original_line": 1974,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618165170",
      "pull_request_review_id": 641883109,
      "id": 618165170,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODE2NTE3MA==",
      "diff_hunk": "@@ -1956,22 +1956,33 @@ def test_non_standard_witness(self):\n     def test_upgrade_after_activation(self):\n         \"\"\"Test the behavior of starting up a segwit-aware node after the softfork has activated.\"\"\"\n \n-        self.restart_node(2, extra_args=[\"-segwitheight={}\".format(SEGWIT_HEIGHT)])\n+        # All nodes are caught up and node 2 is a pre-segwit node that will soon upgrade.\n+        for n in range(2):\n+            assert_equal(self.nodes[n].getblockcount(), self.nodes[2].getblockcount())\n+            assert softfork_active(self.nodes[n], \"segwit\")\n+        assert SEGWIT_HEIGHT < self.nodes[2].getblockcount()\n+        assert 'segwit' not in self.nodes[2].getblockchaininfo()['softforks']\n+\n+        # Restarting node 2 should result in a shutdown because the blockchain consists of\n+        # insufficiently validated blocks per segwit consensus rules.\n+        self.stop_node(2)\n+        with self.nodes[2].assert_debug_log(expected_msgs=[\n+                f\"Witness data for blocks after height {SEGWIT_HEIGHT} requires validation. Please restart with -reindex.\"], timeout=10):\n+            self.nodes[2].start([f\"-segwitheight={SEGWIT_HEIGHT}\"])\n+\n+        # As directed, the user restarts the node with -reindex\n+        self.start_node(2, extra_args=[\"-reindex\", f\"-segwitheight={SEGWIT_HEIGHT}\"])\n+\n+        # With the segwit consensus rules, the node is able to validate only up to SEGWIT_HEIGHT - 1\n+        assert_equal(self.nodes[2].getblockcount(), SEGWIT_HEIGHT - 1)\n         self.connect_nodes(0, 2)\n \n         # We reconnect more than 100 blocks, give it plenty of time\n+        # sync_blocks() also verifies the best block hash is the same for all nodes\n         self.sync_blocks(timeout=240)\n \n-        # Make sure that this peer thinks segwit has activated.\n-        assert softfork_active(self.nodes[2], 'segwit')\n-\n-        # Make sure this peer's blocks match those of node0.\n-        height = self.nodes[2].getblockcount()\n-        while height >= 0:\n-            block_hash = self.nodes[2].getblockhash(height)\n-            assert_equal(block_hash, self.nodes[0].getblockhash(height))\n-            assert_equal(self.nodes[0].getblock(block_hash), self.nodes[2].getblock(block_hash))\n-            height -= 1",
      "path": "test/functional/p2p_segwit.py",
      "position": 39,
      "original_position": 39,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "in_reply_to_id": 617961288,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Reindexing will result in the node discarding the blocks without witness after segwit activation and redownloading them from peers and validating. See https://github.com/bitcoin/bitcoin/pull/21009#discussion_r576134367. The reason the node doesn't sync to tip here is because in our functional tests, the nodes don't make automatic connections to each other. As soon as the nodes are connected, the upgraded node will resync from its peers.",
      "created_at": "2021-04-22T07:51:41Z",
      "updated_at": "2021-04-22T07:51:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r618165170",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618165170"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1974,
      "original_line": 1974,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618489237",
      "pull_request_review_id": 642322800,
      "id": 618489237,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODQ4OTIzNw==",
      "diff_hunk": "@@ -1956,22 +1956,33 @@ def test_non_standard_witness(self):\n     def test_upgrade_after_activation(self):\n         \"\"\"Test the behavior of starting up a segwit-aware node after the softfork has activated.\"\"\"\n \n-        self.restart_node(2, extra_args=[\"-segwitheight={}\".format(SEGWIT_HEIGHT)])\n+        # All nodes are caught up and node 2 is a pre-segwit node that will soon upgrade.\n+        for n in range(2):\n+            assert_equal(self.nodes[n].getblockcount(), self.nodes[2].getblockcount())\n+            assert softfork_active(self.nodes[n], \"segwit\")\n+        assert SEGWIT_HEIGHT < self.nodes[2].getblockcount()\n+        assert 'segwit' not in self.nodes[2].getblockchaininfo()['softforks']\n+\n+        # Restarting node 2 should result in a shutdown because the blockchain consists of\n+        # insufficiently validated blocks per segwit consensus rules.\n+        self.stop_node(2)\n+        with self.nodes[2].assert_debug_log(expected_msgs=[\n+                f\"Witness data for blocks after height {SEGWIT_HEIGHT} requires validation. Please restart with -reindex.\"], timeout=10):\n+            self.nodes[2].start([f\"-segwitheight={SEGWIT_HEIGHT}\"])\n+\n+        # As directed, the user restarts the node with -reindex\n+        self.start_node(2, extra_args=[\"-reindex\", f\"-segwitheight={SEGWIT_HEIGHT}\"])\n+\n+        # With the segwit consensus rules, the node is able to validate only up to SEGWIT_HEIGHT - 1\n+        assert_equal(self.nodes[2].getblockcount(), SEGWIT_HEIGHT - 1)\n         self.connect_nodes(0, 2)\n \n         # We reconnect more than 100 blocks, give it plenty of time\n+        # sync_blocks() also verifies the best block hash is the same for all nodes\n         self.sync_blocks(timeout=240)\n \n-        # Make sure that this peer thinks segwit has activated.\n-        assert softfork_active(self.nodes[2], 'segwit')\n-\n-        # Make sure this peer's blocks match those of node0.\n-        height = self.nodes[2].getblockcount()\n-        while height >= 0:\n-            block_hash = self.nodes[2].getblockhash(height)\n-            assert_equal(block_hash, self.nodes[0].getblockhash(height))\n-            assert_equal(self.nodes[0].getblock(block_hash), self.nodes[2].getblock(block_hash))\n-            height -= 1",
      "path": "test/functional/p2p_segwit.py",
      "position": 39,
      "original_position": 39,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "in_reply_to_id": 617961288,
      "user": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ah, I should have updated the PR description. Updated to now say:\r\n\r\n> This PR introduces NeedsRedownload() which merely checks for insufficiently validated segwit blocks and requests that the user restarts the node with `-reindex`. Reindexing the block files upon restart will make the node rebuild chain state and block index from the `blk*.dat` files on disk. The node won't be able to index the blocks with `BLOCK_OPT_WITNESS`, so they will be missing from the chain and be re-downloaded, with witness data.\r\n\r\nSorry for the confusion. \r\n\r\nAs for the `-reindex` code, the call path is: `src/init.cpp::Threadimport()` -> `validation.cpp:CChainState::LoadExternalBlockFile()` -> `validation.cpp:CChainState::AcceptBlock()` -> `validation.cpp:ContextualCheckBlock()`. The last function tries to [validate for witness commitments](https://github.com/bitcoin/bitcoin/blob/4b5659c6b115315c9fd2902b4edd4b960a5e066e/src/validation.cpp#L3418) and is [unable to](https://github.com/bitcoin/bitcoin/blob/4b5659c6b115315c9fd2902b4edd4b960a5e066e/src/validation.cpp#L3436) thereby causing the block to not be accepted into the chain upon a restart with `-reindex`\r\n\r\nUsing `combine_logs.py` for `test/functional/p2p_segwit.py` you can see lines like:\r\n\r\n```\r\n node2 2021-04-22T14:56:56.543661Z [loadblk] [util/system.h:52] [error] ERROR: AcceptBlock: bad-witness-nonce-size, ContextualCheckBlock : invalid witness reserved value size\r\n node2 2021-04-22T14:56:56.544812Z [loadblk] [util/system.h:52] [error] ERROR: AcceptBlock: bad-witness-nonce-size, ContextualCheckBlock : invalid witness reserved value size\r\n```",
      "created_at": "2021-04-22T15:07:48Z",
      "updated_at": "2021-04-22T15:13:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r618489237",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618489237"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1974,
      "original_line": 1974,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618502626",
      "pull_request_review_id": 642341443,
      "id": 618502626,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODUwMjYyNg==",
      "diff_hunk": "@@ -1956,22 +1956,33 @@ def test_non_standard_witness(self):\n     def test_upgrade_after_activation(self):\n         \"\"\"Test the behavior of starting up a segwit-aware node after the softfork has activated.\"\"\"\n \n-        self.restart_node(2, extra_args=[\"-segwitheight={}\".format(SEGWIT_HEIGHT)])\n+        # All nodes are caught up and node 2 is a pre-segwit node that will soon upgrade.\n+        for n in range(2):\n+            assert_equal(self.nodes[n].getblockcount(), self.nodes[2].getblockcount())\n+            assert softfork_active(self.nodes[n], \"segwit\")\n+        assert SEGWIT_HEIGHT < self.nodes[2].getblockcount()\n+        assert 'segwit' not in self.nodes[2].getblockchaininfo()['softforks']\n+\n+        # Restarting node 2 should result in a shutdown because the blockchain consists of\n+        # insufficiently validated blocks per segwit consensus rules.\n+        self.stop_node(2)\n+        with self.nodes[2].assert_debug_log(expected_msgs=[\n+                f\"Witness data for blocks after height {SEGWIT_HEIGHT} requires validation. Please restart with -reindex.\"], timeout=10):\n+            self.nodes[2].start([f\"-segwitheight={SEGWIT_HEIGHT}\"])\n+\n+        # As directed, the user restarts the node with -reindex\n+        self.start_node(2, extra_args=[\"-reindex\", f\"-segwitheight={SEGWIT_HEIGHT}\"])\n+\n+        # With the segwit consensus rules, the node is able to validate only up to SEGWIT_HEIGHT - 1\n+        assert_equal(self.nodes[2].getblockcount(), SEGWIT_HEIGHT - 1)\n         self.connect_nodes(0, 2)\n \n         # We reconnect more than 100 blocks, give it plenty of time\n+        # sync_blocks() also verifies the best block hash is the same for all nodes\n         self.sync_blocks(timeout=240)\n \n-        # Make sure that this peer thinks segwit has activated.\n-        assert softfork_active(self.nodes[2], 'segwit')\n-\n-        # Make sure this peer's blocks match those of node0.\n-        height = self.nodes[2].getblockcount()\n-        while height >= 0:\n-            block_hash = self.nodes[2].getblockhash(height)\n-            assert_equal(block_hash, self.nodes[0].getblockhash(height))\n-            assert_equal(self.nodes[0].getblock(block_hash), self.nodes[2].getblock(block_hash))\n-            height -= 1",
      "path": "test/functional/p2p_segwit.py",
      "position": 39,
      "original_position": 39,
      "commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "original_commit_id": "d831e711cab83c70bf2ded62fe33f484844e73dd",
      "in_reply_to_id": 617961288,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ah, thanks all. Makes sense.",
      "created_at": "2021-04-22T15:23:43Z",
      "updated_at": "2021-04-22T15:23:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21009#discussion_r618502626",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618502626"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21009"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1974,
      "original_line": 1974,
      "side": "LEFT"
    }
  ]
}