{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
    "id": 294718839,
    "node_id": "MDExOlB1bGxSZXF1ZXN0Mjk0NzE4ODM5",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16341",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/16341.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/16341.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16341",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16341/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/c37be157851666e35f42bd7520af51fb1dd06877",
    "number": 16341,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "Introduce ScriptPubKeyMan interface and use it for key and script management (aka wallet boxes)",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Introducing the `ScriptPubKeyMan` (short for ScriptPubKeyManager) for managing scriptPubKeys and their associated scripts and keys. This functionality is moved over from `CWallet`. Instead, `CWallet` will have a pointer to a `ScriptPubKeyMan` for every possible address type, internal and external. It will fetch the correct `ScriptPubKeyMan` as necessary. When fetching new addresses, it chooses the `ScriptPubKeyMan` based on address type and whether it is change. For signing, it takes the script and asks each `ScriptPubKeyMan` for whether that `ScriptPubKeyMan` considers that script `IsMine`, whether it has that script, or whether it is able to produce a signature for it. If so, the `ScriptPubKeyMan` will provide a `SigningProvider` to the caller which will use that in order to sign.\r\n\r\nThere is currently one `ScriptPubKeyMan` - the `LegacyScriptPubKeyMan`. Each `CWallet` will have only one `LegacyScriptPubKeyMan` with the pointers for all of the address types and change pointing to this `LegacyScriptPubKeyMan`. It is created when the wallet is loaded and all keys and metadata are loaded into it instead of `CWallet`. The `LegacyScriptPubKeyMan` is primarily made up of all of the key and script management that used to be in `CWallet`. For convenience, `CWallet` has a `GetLegacyScriptPubKeyMan` which will return the `LegacyScriptPubKeyMan` or a `nullptr` if it does not have one (not yet implemented, but callers will check for the `nullptr`). For purposes of signing, `LegacyScriptPubKeyMan`'s `GetSigningProvider` will return itself rather than a separate `SigningProvider`. This will be different for future `ScriptPubKeyMan`s.\r\n\r\nThe `LegacyScriptPubKeyMan` will also handle the importing and exporting of keys and scripts instead of `CWallet`. As such, a number of RPCs have been limited to work only if a `LegacyScriptPubKeyMan` can be retrieved from the wallet. These RPCs are `sethdseed`, `addmultisigaddress`, `importaddress`, `importprivkey`, `importpubkey`, `importmulti`, `dumpprivkey`, and `dumpwallet`. Other RPCs which relied on the wallet for scripts and keys have been modified in order to take the `SigningProvider` retrieved from the `ScriptPubKeyMan` for a given script.\r\n\r\nOverall, these changes should not effect how everything actually works and the user should experience no difference between having this change and not having it. As such, no functional tests were changed, and the only unit tests changed were those that were directly accessing `CWallet` functions that have been removed.\r\n\r\nThis PR is the last step in the [Wallet Structure Changes](https://github.com/bitcoin-core/bitcoin-devwiki/wiki/Wallet-Class-Structure-Changes).\r\n\r\nThe commits are organized as follows:\r\n* Miscellaneous changes that don't necessarily make sense outside of this PR\r\n  * Move wallet enums to walletutil.h\r\n  * List output types in an array in order to be iterated over\r\n  * Always try to sign for all pubkeys in multisig\r\n* Interface definitions and miscellaneous changes in preparation for `ScriptPubKeyMan` integration\r\n  * Introduce both ScriptPubKeyMan as an interface and LegacyScriptPubKeyMan as a dummy class\r\n  * Add LegacyScriptPubKeyMan to CWallet\r\n  * Add function callbacks for wallet flags and versions and wallet database\r\n  * Fetch the SigningProvider for a script from the wallet\r\n  * Fetch the ScriptPubKeyMan for given output type and internal-ness, or a given script, or ScriptPubKeyMan id\r\n* Implementation of `LegacyScriptPubKeyMan` by copying existing code from `CWallet`. These will pass all tests and do not affect `CWallet`\r\n  * Implement GetSigningProvider in LegacyScriptPubKeyMan\r\n  * Implement function to connect ScriptPubKeyMan's NotifyCanGetAddessesChanged and NotifyWatchOnlyChanged to CWallet's\r\n  * Implement IsLocked and IsCrypted in LegacyScriptPubKeyMan\r\n  * Implement LoadCryptedKey and AddCryptedKey in LegacyScriptPubKeyMan\r\n  * Implement UpdateTimeFirstKey, and GetTimeFirstKey in LegacyScriptPubKeyMan\r\n  * Implement AddWatchOnly, RemoveWatchOnly, HaveWatchOnly, and LoadWatchOnly in LegacyScriptPubKeyMan\r\n  * Implement AddKeyPubKey and LoadKey in LegacyScriptPubKeyMan\r\n  * Implement WalletLogPrintf in LegacyScriptPubKeyMan\r\n  * Implement SetHDCHain, and IsHDEnabled in LegacyScriptPubKeyMan\r\n  * Implement LoadCScript in LegacyScriptPubKeyMan\r\n  * Implement LoadKeyMetadata and LoadScriptMetadata in LegacyScriptPubKeyMan\r\n  * Implement GetKey, HaveKey, and GetPubKey in LegacyScriptPubKeyMan\r\n  * Implement GenerateNewKey in LegacyScriptPubKeyMan\r\n  * Implement LoadKeyPool in LegacyScriptPubKeyMan\r\n  * Implement GetOldestKeyPoolTime, KeypoolCountExternalKeys, and GetKeypoolSize in LegacyScriptPubKeyMan\r\n  * Implement CanGetAddresses, CanGenerateKeys, and HavePrivateKeys in LegacyScriptPubKeyMan\r\n  * Implement GenerateNewSeed, DeriveNewSeed, and SetHDSeed for LegacyScriptPubKeyMan\r\n  * Implement TopUpKeypool, TopUp, and NewKeyPool in LegacyScriptPubKeyMan\r\n  * Implement ReturnAddress, and KeepKey in LegacyScriptPubKeyMan\r\n  * Implement GetNewAddress, and GetReservedAddress in LegacyScriptPubKeyMan\r\n  * Implement MarkUnusedAddresses in LegacyScriptPubKeyMan\r\n  * Implement IsMine in LegacyScriptPubKeyMan\r\n  * Implement UpgradeKeyMetaData, SetupGeneration, IsFirstRun, Upgrade, RewriteDB in LegacyScriptPubKeyMan\r\n  * Implement Unlock, Lock, and Encrypt and LegacyScriptPubKeyMan\r\n  * Implement ImporScripts, ImportPrivKeys, ImportPubKeys, and ImportScriptPubKeys in LegacyScriptPubKeyMan\r\n  * Implement GetMetadata in LegacyScriptPubKeyMan\r\n  * Implement GetKeyOrigin in LegacyScriptPubKeyMan\r\n  * Implement actually loading everything into LegacyScriptPubKeyMan\r\n  * Implement CanProvide in LegacyScriptPubKeyMan\r\n* Replacing `CWallet` functions and RPC things with calls to `ScriptPubKeyMan` or `LegacyScriptPubKeyMan`. These will compile but are not expected to pass tests hence the `[ci skip]`.\r\n  * [ci skip] Remove CWallet from IsMine and have CWallet always use ScriptPubKeyMan's IsMine\r\n  * [ci skip] moveonly: move ismine stuff to be a module of LegacyScriptPubKeyMan\r\n  * [ci skip] Have GetNewAddress, GetNewChangeAddress, and ReserveAddress use ScriptPubKeyMan\r\n  * [ci skip] Mark used addresses in ScriptPubKeyMan\r\n  * [ci skip] Call UpgradeKeyMetaData for each ScriptPubKeyMan\r\n  * [ci skip] Sign using SigningProvider from ScriptPubKeyMan when signing within CWallet\r\n  * [ci skip] Do not allow import*, dump*, and addmultisigaddress RPCs when wallet is not backed by LegacyScriptPubKeyMan\r\n  * [ci skip] Change Imports to use LegacyScriptPubKeyMan Imports\r\n  * [ci skip] Use SigningProviders and ScriptPubKeyMans in listunspent, signmessage, signrawtransactionwithwallet, and getaddressinfo\r\n  * [ci skip] Use LegacyScriptPubKeyMan in addmultisigaddress and sethdseed\r\n  * [ci skip] Use LegacyScriptPubKeyMan for hdseedid in getwalletinfo\r\n  * [ci skip] Change KeypoolCountExternal and GetKeypoolSize to get aggregate sizes from ScriptPubKeyMans\r\n  * [ci skip] Have IsHDEnabled fetch from ScriptPubKeyMans\r\n  * [ci skip] Fetch oldest keypool time from ScriptPubKeyMans\r\n  * [ci skip] have TopUpKeyPool call TopUp in each ScriptPubKeyMan\r\n  * [ci skip] Have EncryptWallet, Lock, and Unlock call their respective functions in ScriptPubKeyMans\r\n  * [ci skip] Use LegacyScriptPubKeyMan throughout psbt_wallet_tests\r\n  * [ci skip] Use LegacyScriptPubKeyMan throughout wallettool\r\n  * [ci skip] Use ScriptPubKeyMans' Setup and Upgrade functions when loading or creating a wallet\r\n  * [ci skip] Define first run as having no ScriptPubKeyMans\r\n  * [ci skip] Use RewriteDB action when DB needs rewrite\r\n  * [ci skip] Use GetTimeFirstKey instead of nTimeFirstKey\r\n  * [ci skip] Use LegacyScriptPubKeyMan for in wallet_tests\r\n  * [ci skip] Use LegacyScriptPubKeyMan in dumpprivkey and dumpwallet\r\n  * [ci skip] Change CanGetAddresses to fetch from ScriptPubKeyMan\r\n  * [ci skip] Fetch the correct SigningProvider for signing PSBTs\r\n  * [ci skip] Use LegacyScriptPubKeyMan in test util\r\n  * [ci skip] Use LegacyScriptPubKeyMan in some parts of getbalances and createwallet\r\n  * [ci skip] Have getPubKey and getPrivKey use SigningProvider\r\n  * [ci skip] Use LegacyScriptPubKeyMan in benchmarks involving the wallet\r\n  * [ci skip] Store p2sh scripts in AddAndGetDestinationForScript\r\n* Tying everything together and removing the `CWallet` functions.\r\n  * Remove unused functions and switch CWallet to use ScriptPubKeyMan",
    "labels": [
      {
        "id": 135961,
        "node_id": "MDU6TGFiZWwxMzU5NjE=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
        "name": "Refactoring",
        "color": "E6F6D6",
        "default": false
      },
      {
        "id": 149424,
        "node_id": "MDU6TGFiZWwxNDk0MjQ=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
        "name": "Wallet",
        "color": "08a781",
        "default": false
      }
    ],
    "active_lock_reason": "resolved",
    "created_at": "2019-07-05T03:01:15Z",
    "updated_at": "2022-02-15T10:58:54Z",
    "closed_at": "2019-10-25T21:09:34Z",
    "mergeable_state": "unknown",
    "merge_commit_sha": "83b9466625e30db2264881576e9499b0b86d47db",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "achow101:box-the-wallet",
      "ref": "box-the-wallet",
      "sha": "c37be157851666e35f42bd7520af51fb1dd06877",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 45006379,
        "node_id": "MDEwOlJlcG9zaXRvcnk0NTAwNjM3OQ==",
        "name": "bitcoin",
        "full_name": "achow101/bitcoin",
        "owner": {
          "login": "achow101",
          "id": 3782274,
          "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
          "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/achow101",
          "html_url": "https://github.com/achow101",
          "followers_url": "https://api.github.com/users/achow101/followers",
          "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
          "organizations_url": "https://api.github.com/users/achow101/orgs",
          "repos_url": "https://api.github.com/users/achow101/repos",
          "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/achow101/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/achow101/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/achow101/bitcoin",
        "archive_url": "https://api.github.com/repos/achow101/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/achow101/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/achow101/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/achow101/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/achow101/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/achow101/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/achow101/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/achow101/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/achow101/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/achow101/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/achow101/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/achow101/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/achow101/bitcoin/events",
        "forks_url": "https://api.github.com/repos/achow101/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/achow101/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/achow101/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/achow101/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/achow101/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/achow101/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/achow101/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/achow101/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/achow101/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/achow101/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/achow101/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/achow101/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/achow101/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/achow101/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/achow101/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/achow101/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:achow101/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/achow101/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/achow101/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/achow101/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/achow101/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/achow101/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/achow101/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/achow101/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/achow101/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/achow101/bitcoin/hooks",
        "svn_url": "https://github.com/achow101/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 10,
        "stargazers_count": 34,
        "watchers_count": 34,
        "size": 238743,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-02T17:43:24Z",
        "created_at": "2015-10-27T00:20:28Z",
        "updated_at": "2023-05-16T00:18:41Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "a22b62481aae95747830bd3c0db3227860b12d8e",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69817,
        "watchers_count": 69817,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T22:42:00Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-07T01:13:41Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 2777,
    "deletions": 1899,
    "changed_files": 33,
    "commits": 70,
    "review_comments": 281,
    "comments": 35
  },
  "events": [
    {
      "event": "commented",
      "id": 508614075,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUwODYxNDA3NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/508614075",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-05T03:01:52Z",
      "updated_at": "2019-07-05T03:01:52Z",
      "author_association": "MEMBER",
      "body": "In the coming days I will try to squash together some of these commits so there aren't so many of them. I just wanted to get this open now for people to begin reviewing the changes.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-508614075",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16341"
    },
    {
      "event": "labeled",
      "id": 2461589642,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDI0NjE1ODk2NDI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2461589642",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-05T03:02:13Z",
      "label": {
        "name": "Wallet",
        "color": "08a781"
      }
    },
    {
      "event": "labeled",
      "id": 2461589755,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDI0NjE1ODk3NTU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2461589755",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-05T03:02:21Z",
      "label": {
        "name": "Refactoring",
        "color": "E6F6D6"
      }
    },
    {
      "event": "added_to_project",
      "id": 2461590572,
      "node_id": "MDE5OkFkZGVkVG9Qcm9qZWN0RXZlbnQyNDYxNTkwNTcy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2461590572",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-05T03:03:11Z",
      "project_card": {
        "id": 23601958,
        "url": "https://api.github.com/projects/columns/cards/23601958",
        "project_id": 2806533,
        "project_url": "https://api.github.com/projects/2806533",
        "column_name": "PRs"
      }
    },
    {
      "event": "commented",
      "id": 508627166,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUwODYyNzE2Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/508627166",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-05T04:41:28Z",
      "updated_at": "2019-10-25T14:09:09Z",
      "author_association": "MEMBER",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#17246](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17246.html) (wallet: avoid knapsack when there's no change by Sjors)\n* [#17237](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17237.html) (wallet: LearnRelatedScripts only if KeepDestination by promag)\n* [#17219](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17219.html) (wallet: allow transaction without change if keypool is empty by Sjors)\n* [#17211](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17211.html) (Allow fundrawtransaction and walletcreatefundedpsbt to take external inputs by achow101)\n* [#16946](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16946.html) (wallet: include a checksum of encrypted private keys by achow101)\n* [#16910](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16910.html) (wallet: reduce loading time by using unordered maps by achow101)\n* [#16839](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16839.html) (Replace Connman and BanMan globals with Node local by ryanofsky)\n* [#16440](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16440.html) (BIP-322: Generic signed message format by kallewoof)\n* [#16037](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16037.html) (rpc: Enable wallet import on pruned nodes by promag)\n* [#15931](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15931.html) (Remove GetDepthInMainChain dependency on locked chain interface by ariard)\n* [#15761](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15761.html) (Replace -upgradewallet startup option with upgradewallet RPC by achow101)\n* [#15294](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15294.html) ([moveonly] wallet: Extract RipeMd160 by Empact)\n* [#14942](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14942.html) (wallet: Make scan / abort status private to CWallet by Empact)\n* [#14707](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14707.html) ([RPC] Include coinbase transactions in receivedby RPCs by andrewtoth)\n* [#14384](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14384.html) (Fire TransactionRemovedFromMempool callbacks from mempool by l2a5b1)\n* [#14144](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14144.html) (Refactoring: Clarify code using encrypted_batch in CWallet by domob1812)\n* [#10785](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/10785.html) (Serialization improvements by sipa)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-508627166",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16341"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2463361189,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjQ2MzM2MTE4OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2463361189",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-05T18:41:49Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2463401468,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjQ2MzQwMTQ2OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2463401468",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-05T19:10:30Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2463416446,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjQ2MzQxNjQ0Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2463416446",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-05T19:21:10Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2463424845,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjQ2MzQyNDg0NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2463424845",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-05T19:27:09Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2463465644,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjQ2MzQ2NTY0NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2463465644",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-05T19:58:23Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2463619912,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjQ2MzYxOTkxMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2463619912",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-05T22:16:43Z"
    },
    {
      "event": "reviewed",
      "id": 258567976,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjU4NTY3OTc2",
      "url": null,
      "actor": null,
      "commit_id": "1404f8ca2888592ee5072a343e77acba2b3809ed",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "",
      "user": {
        "login": "fqlx",
        "id": 1562849,
        "node_id": "MDQ6VXNlcjE1NjI4NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1562849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fqlx",
        "html_url": "https://github.com/fqlx",
        "followers_url": "https://api.github.com/users/fqlx/followers",
        "following_url": "https://api.github.com/users/fqlx/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fqlx/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fqlx/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fqlx/subscriptions",
        "organizations_url": "https://api.github.com/users/fqlx/orgs",
        "repos_url": "https://api.github.com/users/fqlx/repos",
        "events_url": "https://api.github.com/users/fqlx/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fqlx/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#pullrequestreview-258567976",
      "submitted_at": "2019-07-06T03:15:59Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
    },
    {
      "event": "mentioned",
      "id": 2463765258,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjQ2Mzc2NTI1OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2463765258",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-06T04:12:08Z"
    },
    {
      "event": "subscribed",
      "id": 2463765259,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI0NjM3NjUyNTk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2463765259",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-06T04:12:08Z"
    },
    {
      "event": "renamed",
      "id": 2463769429,
      "node_id": "MDE3OlJlbmFtZWRUaXRsZUV2ZW50MjQ2Mzc2OTQyOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2463769429",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-06T04:27:37Z",
      "rename": {
        "from": "Introduce ScriptPubKeyMan interface and use it for key and script management (aka wallet boxes)",
        "to": "WIP: Introduce ScriptPubKeyMan interface and use it for key and script management (aka wallet boxes)"
      }
    },
    {
      "event": "labeled",
      "id": 2463769449,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDI0NjM3Njk0NDk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2463769449",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-06T04:27:42Z",
      "label": {
        "name": "Needs Conceptual Review",
        "color": "fef2c0"
      }
    },
    {
      "event": "commented",
      "id": 508896117,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUwODg5NjExNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/508896117",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-06T04:28:47Z",
      "updated_at": "2019-07-06T04:28:47Z",
      "author_association": "MEMBER",
      "body": "Everyone commenting here, note that this PR is a work in progress, and is built on top of multiple open PRs.\r\n\r\nFor now we should try and keep the discussion here at a Concept ACK/NACK & design level, rather than individual nit-picks and code review.\r\n\r\nIf you would like to review the code, please do so in the open base PRs. That will not only save the concept level discussion here from being drowned out in inline comments, but will also prevent duplicate review. i.e What you're commenting on here might have already been addressed/pointed out in the base PRs.",
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-508896117",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16341"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2463777793,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjQ2Mzc3Nzc5Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2463777793",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-06T04:59:51Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2463786673,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjQ2Mzc4NjY3Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2463786673",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-06T05:32:16Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2463798128,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjQ2Mzc5ODEyOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2463798128",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-06T06:15:32Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2463802971,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjQ2MzgwMjk3MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2463802971",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-06T06:30:31Z"
    },
    {
      "event": "commented",
      "id": 508967793,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUwODk2Nzc5Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/508967793",
      "actor": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-07T03:03:00Z",
      "updated_at": "2019-07-07T03:03:00Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK, this abstraction is definitely the right path for the wallet to take IMO as we work toward descriptor wallets.",
      "user": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-508967793",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16341"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2470737047,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjQ3MDczNzA0Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2470737047",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-09T21:35:05Z"
    },
    {
      "event": "labeled",
      "id": 2472247183,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDI0NzIyNDcxODM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2472247183",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-10T11:31:06Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2473037376,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjQ3MzAzNzM3Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2473037376",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-10T15:44:04Z"
    },
    {
      "event": "unlabeled",
      "id": 2473160621,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MjQ3MzE2MDYyMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2473160621",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-10T16:24:10Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 2473429073,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDI0NzM0MjkwNzM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2473429073",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-10T18:05:42Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2473555811,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjQ3MzU1NTgxMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2473555811",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-10T18:54:34Z"
    },
    {
      "event": "unlabeled",
      "id": 2473741269,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MjQ3Mzc0MTI2OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2473741269",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-10T20:09:28Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 510521262,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUxMDUyMTI2Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/510521262",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-11T14:56:24Z",
      "updated_at": "2019-07-11T15:12:29Z",
      "author_association": "MEMBER",
      "body": "Approach ACK.\r\n\r\nTo make some of the commits easier to review, instead of having one commit that adds a function to `LegacyScriptPubKeyMan` (e.g. `LegacyScriptPubKeyMan::LoadKey`), one commit that deletes it from CWallet (`Remove unused functions and switch CWallet to use ScriptPubKeyMan`) and one commit that moves the call over (`Implement actually loading everything into LegacyScriptPubKeyMan`), try to combine those. That lets you get rid of the CI Skip commits, and makes it easier to verify move-only parts with `--color-moved=dimmed-zebra`.\r\n\r\nIn other words, start with empty `(Legacy)ScriptPubKeyMan` and then migrate one function per commit into it.\r\n\r\nAre you sure you want to move `WalletFeature` and `WalletFlags` into `LegacyScriptPubKeyMan`? I would prefer to keep these settings global to the wallet. It does make sense for each `ScriptPubKeyMan` to have its own `IsLocked()` state, so that brings up the question what to do if a single one fails to unlock. But I'd rather not add RPC methods to unlock specific `PubKeyMan`s in a given wallet.\r\n\r\nI brainstormed how to apply this to hardware wallets: https://github.com/bitcoin/bitcoin/pull/14912#issuecomment-510520757. The unsollicited keypool topup in `GetReservedDestination` is annoying in that context. Can `ScriptPubKeyMan` have a flag to opt out of that? ",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-510521262",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16341"
    },
    {
      "event": "commented",
      "id": 510589619,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUxMDU4OTYxOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/510589619",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-11T17:57:06Z",
      "updated_at": "2019-07-11T17:57:06Z",
      "author_association": "MEMBER",
      "body": "> To make some of the commits easier to review, instead of having one commit that adds a function to `LegacyScriptPubKeyMan` (e.g. `LegacyScriptPubKeyMan::LoadKey`), one commit that deletes it from CWallet (`Remove unused functions and switch CWallet to use ScriptPubKeyMan`) and one commit that moves the call over (`Implement actually loading everything into LegacyScriptPubKeyMan`), try to combine those. That lets you get rid of the CI Skip commits, and makes it easier to verify move-only parts with `--color-moved=dimmed-zebra`.\r\n> \r\n> In other words, start with empty `(Legacy)ScriptPubKeyMan` and then migrate one function per commit into it.\r\n\r\nDoing that will cause the entirety of the PR to fail all tests (so all need ci skip) except for the very last commit. If other reviewers want that, I could reorganize it.\r\n\r\n> Are you sure you want to move `WalletFeature` and `WalletFlags` into `LegacyScriptPubKeyMan`? I would prefer to keep these settings global to the wallet.\r\n\r\nThey are global to the wallet. They are moved to `walletutil.h`. Both `LegacyScriptPubKeyMan` and `CWallet` require access to both of these enums, but having `scriptpubkeyman` including `wallet.h` would be a circular dependency, so I moved it to `walletutil.h`.\r\n\r\n> It does make sense for each `ScriptPubKeyMan` to have its own `IsLocked()` state, so that brings up the question what to do if a single one fails to unlock.\r\n\r\nI guess it should fail to unlock everything? That would indicate some corruption has occurred.\r\n\r\n> But I'd rather not add RPC methods to unlock specific `PubKeyMan`s in a given wallet.\r\n\r\nAgreed.\r\n\r\n> The unsollicited keypool topup in `GetReservedDestination` is annoying in that context. Can `ScriptPubKeyMan` have a flag to opt out of that?\\\r\n\r\nI suppose it should actually be in `LegacyScriptPubKeyMan::GetReservedDestination` rather than `CWallet`'s. However, `TopUp` can just do nothing and that won't effect this behavior. Every `ScriptPubKeyMan` needs to implement `TopUp` anyways.\r\n\r\n",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-510589619",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16341"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2477231411,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjQ3NzIzMTQxMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2477231411",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-11T20:54:02Z"
    },
    {
      "event": "commented",
      "id": 510903836,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUxMDkwMzgzNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/510903836",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-12T14:18:31Z",
      "updated_at": "2019-07-12T14:18:31Z",
      "author_association": "MEMBER",
      "body": ">> In other words, start with empty `(Legacy)ScriptPubKeyMan` and then migrate one function per commit into it.\r\n\r\n> Doing that will cause the entirety of the PR to fail all tests (so all need ci skip) except for the very last commit. If other reviewers want that, I could reorganize it.\r\n\r\nWhy would any of the test fail if `ScriptPubKeyMan` is just an empty shell, and/or a bunch of NOOP functions?\r\n\r\n>> The unsollicited keypool topup in GetReservedDestination is annoying in that context. Can ScriptPubKeyMan have a flag to opt out of that?\r\n\r\n> I suppose it should actually be in `LegacyScriptPubKeyMan::GetReservedDestination` rather than `CWallet`'s. However, `TopUp` can just do nothing and that won't effect this behavior. Every `ScriptPubKeyMan` needs to implement `TopUp` anyways.\r\n\r\nIn the context of a hardware wallet I want `TopUp` to fetch keys from the device. But it should only try that if the user explicitly calls `topupkeypool` (and the UI equivalent). Problem is that `TopUp` doesn't know where it's called from.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-510903836",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16341"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2487537963,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjQ4NzUzNzk2Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2487537963",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-16T21:25:21Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2487785022,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjQ4Nzc4NTAyMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2487785022",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-16T23:33:34Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2487802879,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjQ4NzgwMjg3OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2487802879",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-16T23:46:46Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2488004488,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjQ4ODAwNDQ4OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2488004488",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-17T02:29:58Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2488010625,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjQ4ODAxMDYyNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2488010625",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-17T02:34:57Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2490279155,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjQ5MDI3OTE1NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2490279155",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-17T17:49:43Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2494118605,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjQ5NDExODYwNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2494118605",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-18T21:46:46Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2494119285,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjQ5NDExOTI4NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2494119285",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-18T21:47:09Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2494414097,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjQ5NDQxNDA5Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2494414097",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-19T00:44:40Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2496787502,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjQ5Njc4NzUwMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2496787502",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-19T19:31:20Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2496919171,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjQ5NjkxOTE3MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2496919171",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-19T20:24:15Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2497044422,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjQ5NzA0NDQyMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2497044422",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-19T21:25:34Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2500664749,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjUwMDY2NDc0OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2500664749",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-22T18:15:11Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2500844162,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjUwMDg0NDE2Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2500844162",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-22T19:22:06Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2500965674,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjUwMDk2NTY3NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2500965674",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-22T20:09:52Z"
    },
    {
      "event": "labeled",
      "id": 2507206365,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDI1MDcyMDYzNjU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2507206365",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-24T18:15:32Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2508043482,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjUwODA0MzQ4Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2508043482",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-25T01:17:50Z"
    },
    {
      "event": "unlabeled",
      "id": 2508060037,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MjUwODA2MDAzNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2508060037",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-25T01:30:39Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2508062285,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjUwODA2MjI4NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2508062285",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-25T01:32:33Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2508084323,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjUwODA4NDMyMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2508084323",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-25T01:50:52Z"
    },
    {
      "event": "added_to_project",
      "id": 2510548537,
      "node_id": "MDE5OkFkZGVkVG9Qcm9qZWN0RXZlbnQyNTEwNTQ4NTM3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2510548537",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-25T19:10:46Z",
      "project_card": {
        "id": 24417162,
        "url": "https://api.github.com/projects/columns/cards/24417162",
        "project_id": 481835,
        "project_url": "https://api.github.com/projects/481835",
        "column_name": "Chasing Concept ACK"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2513546726,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjUxMzU0NjcyNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2513546726",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-26T19:47:12Z"
    },
    {
      "event": "renamed",
      "id": 2513553229,
      "node_id": "MDE3OlJlbmFtZWRUaXRsZUV2ZW50MjUxMzU1MzIyOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2513553229",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-26T19:50:28Z",
      "rename": {
        "from": "WIP: Introduce ScriptPubKeyMan interface and use it for key and script management (aka wallet boxes)",
        "to": "Introduce ScriptPubKeyMan interface and use it for key and script management (aka wallet boxes)"
      }
    },
    {
      "event": "commented",
      "id": 515578355,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUxNTU3ODM1NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/515578355",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-26T19:51:06Z",
      "updated_at": "2019-07-26T19:51:06Z",
      "author_association": "MEMBER",
      "body": "The PRs this depended on have been merged. I don't foresee making large changes to this anymore, so this is no longer WIP.\r\n\r\nPlease review!",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-515578355",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16341"
    },
    {
      "event": "unlabeled",
      "id": 2513909742,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MjUxMzkwOTc0Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2513909742",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-26T23:25:40Z",
      "label": {
        "name": "Needs Conceptual Review",
        "color": "fef2c0"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2516767014,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjUxNjc2NzAxNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2516767014",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-29T14:47:34Z"
    },
    {
      "event": "labeled",
      "id": 2518528591,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDI1MTg1Mjg1OTE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2518528591",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-30T05:11:50Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2520541100,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjUyMDU0MTEwMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2520541100",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-30T17:07:13Z"
    },
    {
      "event": "unlabeled",
      "id": 2520622216,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MjUyMDYyMjIxNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2520622216",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-30T17:37:22Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2521088465,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjUyMTA4ODQ2NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2521088465",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-30T19:57:45Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2521100740,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjUyMTEwMDc0MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2521100740",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-30T20:02:18Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2521125637,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjUyMTEyNTYzNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2521125637",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-30T20:11:43Z"
    },
    {
      "event": "labeled",
      "id": 2522315148,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDI1MjIzMTUxNDg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2522315148",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-31T08:03:27Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2523613671,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjUyMzYxMzY3MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2523613671",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-31T15:22:22Z"
    },
    {
      "event": "unlabeled",
      "id": 2523635512,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MjUyMzYzNTUxMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2523635512",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-31T15:28:40Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 2525224740,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDI1MjUyMjQ3NDA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2525224740",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-01T04:41:57Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2527574614,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjUyNzU3NDYxNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2527574614",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-01T19:05:14Z"
    },
    {
      "event": "unlabeled",
      "id": 2527589108,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MjUyNzU4OTEwOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2527589108",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-01T19:11:10Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "moved_columns_in_project",
      "id": 2527589622,
      "node_id": "MDI2Ok1vdmVkQ29sdW1uc0luUHJvamVjdEV2ZW50MjUyNzU4OTYyMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2527589622",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-01T19:11:20Z",
      "project_card": {
        "id": 24417162,
        "url": "https://api.github.com/projects/columns/cards/24417162",
        "project_id": 481835,
        "project_url": "https://api.github.com/projects/481835",
        "column_name": "Blockers",
        "previous_column_name": "Chasing Concept ACK"
      }
    },
    {
      "event": "labeled",
      "id": 2529644753,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDI1Mjk2NDQ3NTM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2529644753",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-02T13:20:46Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2529978730,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjUyOTk3ODczMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2529978730",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-02T15:11:59Z"
    },
    {
      "event": "unlabeled",
      "id": 2530079769,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MjUzMDA3OTc2OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2530079769",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-02T15:47:40Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 270793127,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjcwNzkzMTI3",
      "url": null,
      "actor": null,
      "commit_id": "ca02ac2532ce106d372d420dd2b94ad15e730971",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#pullrequestreview-270793127",
      "submitted_at": "2019-08-05T14:12:17Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
    },
    {
      "event": "reviewed",
      "id": 270811579,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjcwODExNTc5",
      "url": null,
      "actor": null,
      "commit_id": "ca02ac2532ce106d372d420dd2b94ad15e730971",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#pullrequestreview-270811579",
      "submitted_at": "2019-08-05T14:40:35Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2533841317,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjUzMzg0MTMxNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2533841317",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-05T15:05:05Z"
    },
    {
      "event": "reviewed",
      "id": 270830418,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjcwODMwNDE4",
      "url": null,
      "actor": null,
      "commit_id": "12a411b8a7f77753ec35241d73697f6bbcc77ec1",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#pullrequestreview-270830418",
      "submitted_at": "2019-08-05T15:09:35Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
    },
    {
      "event": "reviewed",
      "id": 270834809,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjcwODM0ODA5",
      "url": null,
      "actor": null,
      "commit_id": "12a411b8a7f77753ec35241d73697f6bbcc77ec1",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#pullrequestreview-270834809",
      "submitted_at": "2019-08-05T15:16:25Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2533995900,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjUzMzk5NTkwMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2533995900",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-05T15:53:13Z"
    },
    {
      "event": "commented",
      "id": 520825537,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUyMDgyNTUzNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/520825537",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-13T13:03:48Z",
      "updated_at": "2019-08-13T13:03:48Z",
      "author_association": "MEMBER",
      "body": "Found a bug (try in QT):\r\n1. create a wallet `blank` wallet with private keys disabled\r\n2. see that new address button in receive screen is disabled, as it should\r\n3. close QT and start again, load the wallet\r\n4. see that new address button is enabled *and creates addresses* (panic)\r\n\r\nMaybe `Always try to sign for all pubkeys in multisig` can be its own PR?\r\n\r\nI didn't pay precise attention to which methods are private / public / etc, because that's easy to change later as required.\r\n\r\nShameless plug for #12134 so we can test for accidental breakage of serialization. The existing test passes on top of this PR, but it only checks that a default \"master\" wallet can still be opened in earlier versions).",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-520825537",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16341"
    },
    {
      "event": "reviewed",
      "id": 278610269,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mjc4NjEwMjY5",
      "url": null,
      "actor": null,
      "commit_id": "d0b41dc26a74e158bd22259aed50869c9676e3fd",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Started review (will update list below with progress). Heroic effort here by achow! I've started to review a few times, but put it off for too long. Time to seriously jump in.\r\n\r\nMy initial impression here is in line with Sjors, that it would have been wiser to have sequence of commits gradually moving bits of code and bits of data with all tests passing at every commit, rather than a sequence of commits copying then a sequence of commits deleting. Moving is nicer than copying for review, because you can see the original code right in the diff instead of having to search for it manually. But I know there was an earlier attempt at this, and it didn't go well for whatever reason, and I don't think it's worth putting in more effort just to restructure the PR.\r\n\r\n- [X] d0b41dc26a74e158bd22259aed50869c9676e3fd Always try to sign for all pubkeys in multisig (1/70)\r\n- [X] e892a72f22c3359a12085f0e93d519acaa711bcd Introduce both ScriptPubKeyMan as an interface and LegacyScriptPubKeyMan as a dummy class (2/70)\r\n- [X] 8a8e141fe93bf887630df9681daa9cd8b2500f55 List output types in an array in order to be iterated over (3/70)\r\n- [X] 7a27857f91ad585f82bb784faf092e8fe7e30946 Add LegacyScriptPubKeyMan to CWallet (4/70)\r\n- [X] 16e82f0b9252cddb50b0aeeaedb13a2ebf532c29 Move wallet enums to walletutil.h (5/70)\r\n- [X] bae5b518ec507d071a54ce4810dd24b016bcfe12 Add function callbacks for wallet flags and versions and wallet database (6/70)\r\n- [X] 493486c32ad084099636c8696c10f4e21f56326e Fetch the SigningProvider for a script from the wallet (7/70)\r\n- [X] bec9b6c2f00113c4bd789562f1333d30c959ed00 Fetch the ScriptPubKeyMan for given output type and internal-ness, or a given script, or ScriptPubKeyMan id (8/70)\r\n- [x] b49bbb939be92a67ff77c3f7bca5bb94dd141906 Refactor rawtransaction_util's SignTransaction to have previous tx parsing be separate (9/70)\r\n- [x] a31374df794d709cf8acfbafc7d5b57f74b1d75a Implement GetSigningProvider in LegacyScriptPubKeyMan (10/70)\r\n- [x] 7b57deac879499e4b0ee99f1efc320600907bc59 Implement function to connect ScriptPubKeyMan's NotifyCanGetAddessesChanged and NotifyWatchOnlyChanged to CWallet's (11/70)\r\n- [x] 72a44f23a9000765bac8102f53d6606c3f0b0fe0 Implement IsLocked and IsCrypted in LegacyScriptPubKeyMan (12/70)\r\n- [x] fce5df284b2fc1b0b7f9582275c11dcce8dded86 Implement LoadCryptedKey and AddCryptedKey in LegacyScriptPubKeyMan (13/70)\r\n- [x] 6685ff5f9c0265094b97aa5aaa03d6b10ec398bb Implement UpdateTimeFirstKey, and GetTimeFirstKey in LegacyScriptPubKeyMan (14/70)\r\n- [x] eeff18e1a8e2240a9e0d0fdd252ae05f36e7f502 Implement AddWatchOnly, RemoveWatchOnly, HaveWatchOnly, and LoadWatchOnly in LegacyScriptPubKeyMan (15/70)\r\n- [x] 95522e7f84fc311521a5b4246a44a314cdc9a5ed Implement AddKeyPubKey and LoadKey in LegacyScriptPubKeyMan (16/70)\r\n- [x] c88536aaab4af1d54b42d8e95d7f9a493d1919f7 Implement WalletLogPrintf in LegacyScriptPubKeyMan (17/70)\r\n- [x] 977cb6552f033f826bc06198b1855790e61a0e8a Implement SetHDCHain, and IsHDEnabled in LegacyScriptPubKeyMan (18/70)\r\n- [x] bf224a9ccc477aa7c20c3bfd6b448b1cdf7f15c0 Implement LoadCScript in LegacyScriptPubKeyMan (19/70)\r\n- [x] e205c2c933ebde193cce7b926be240ed3f226e31 Implement LoadKeyMetadata and LoadScriptMetadata in LegacyScriptPubKeyMan (20/70)\r\n- [x] 7432db927f5990b13539999508e47a8c8d8fec1e Implement GetKey, HaveKey, and GetPubKey in LegacyScriptPubKeyMan (21/70)\r\n- [x] 0922f3f9370f00feb84690bc7942ecac9737d492 Implement GenerateNewKey in LegacyScriptPubKeyMan (22/70)\r\n- [x] c0b6d2b211a39a50e32728e4d8f52c2bf2ad7e79 Implement LoadKeyPool in LegacyScriptPubKeyMan (23/70)\r\n- [x] d3e3cc9e9f5ecd9512f4eeb8b51a789f05ac0529 Implement GetOldestKeyPoolTime, KeypoolCountExternalKeys, and GetKeypoolSize in LegacyScriptPubKeyMan (24/70)\r\n- [x] acbd549766a89c759b3a1aa435bd001c7082a323 Implement CanGetAddresses, CanGenerateKeys, and HavePrivateKeys in LegacyScriptPubKeyMan (25/70)\r\n- [x] 5e7d3149895228c4b7b7c7c582f877938b217b23 Implement GenerateNewSeed, DeriveNewSeed, and SetHDSeed for LegacyScriptPubKeyMan (26/70)\r\n- [x] d229452d6dbd94331986d267b46d13af745bf98d Implement TopUpKeypool, TopUp, and NewKeyPool in LegacyScriptPubKeyMan (27/70)\r\n- [x] 4500e0af8f964289acb680bd76031c59ffa8b968 Implement ReturnAddress, and KeepKey in LegacyScriptPubKeyMan (28/70)\r\n- [x] a7855dd0cf12314ad4a99ff77de22e60f8a9f435 Implement GetNewAddress, and GetReservedAddress in LegacyScriptPubKeyMan (29/70)\r\n- [x] 9947416fef270701c9d22fc914830448112e6bb8 Implement MarkUnusedAddresses in LegacyScriptPubKeyMan (30/70)\r\n- [x] 0ff797c105a3917c4b2fdcf0bb172125fe91349a Implement IsMine in LegacyScriptPubKeyMan (31/70)\r\n- [x] eee7b80e8c8a43b7a41bdb6df68735f295f777d2 Implement UpgradeKeyMetaData, SetupGeneration, IsFirstRun, Upgrade, RewriteDB in LegacyScriptPubKeyMan (32/70)\r\n- [x] 7a5ad98e1733f44f7b71b7247f540dd97acdcb4e Implement Unlock, Lock, and Encrypt and LegacyScriptPubKeyMan (33/70)\r\n- [x] f489836fdd5ced869babe04352c473c678d2a9a3 Implement ImporScripts, ImportPrivKeys, ImportPubKeys, and ImportScriptPubKeys in LegacyScriptPubKeyMan (34/70)\r\n- [x] cb1519c317ebcf5762567018f881d1faa5957734 Implement GetMetadata in LegacyScriptPubKeyMan (35/70)\r\n- [x] b893f0d053f1b5be1229d4fb77ced46b222f9993 Implement GetKeyOrigin in LegacyScriptPubKeyMan (36/70)\r\n- [x] 93322bf756fd8991fb445e327c878e2695fe9ca9 Implement actually loading everything into LegacyScriptPubKeyMan (37/70)\r\n- [x] ae87c89f2e66dc7cb07c541261069c08ad809ddb Implement CanProvide in LegacyScriptPubKeyMan (38/70)\r\n- [ ] 6ac3cf53cca1714f6d6c9fb3ebe16824b9ae49ea [ci skip] Remove CWallet from IsMine and have CWallet always use ScriptPubKeyMan's IsMine (39/70)\r\n- [ ] d33724a6ca11134fa4ea1f80cacbc5b873c837e3 [ci skip] moveonly: move ismine stuff to be a module of LegacyScriptPubKeyMan (40/70)\r\n- [ ] 6efeaa2ea30a4c128101ddf4cb9ee1eebb08aa9a [ci skip] Have GetNewAddress, GetNewChangeAddress, and ReserveAddress use ScriptPubKeyMan (41/70)\r\n- [ ] 9603366a7879c225aeef97988323fc482eef5f44 [ci skip] Mark used addresses in ScriptPubKeyMan (42/70)\r\n- [ ] bc6d7687f9db39577d280c500896493de1525f2f [ci skip] Call UpgradeKeyMetaData for each ScriptPubKeyMan (43/70)\r\n- [ ] 18602887c67b68f141d43f187d52ce32ae3af02b [ci skip] Sign using SigningProvider from ScriptPubKeyMan when signing within CWallet (44/70)\r\n- [ ] f95622c8db42713e617dea3af79be0531c8c69ec [ci skip] Do not allow import*, dump*, and addmultisigaddress RPCs when wallet is not backed by LegacyScriptPubKeyMan (45/70)\r\n- [ ] 08f509b7d99cf3e5a6e4654c45e411dafd3c94f7 [ci skip] Change Imports to use LegacyScriptPubKeyMan Imports (46/70)\r\n- [ ] 086225731c5bb99438d5cda6174a459332e1abdf [ci skip] Use SigningProviders and ScriptPubKeyMans in listunspent, signmessage, signrawtransactionwithwallet, and getaddressinfo (47/70)\r\n- [ ] 74777d18512f5ff38c0af86cc648fcf60c8d1ea4 [ci skip] Use LegacyScriptPubKeyMan in addmultisigaddress and sethdseed (48/70)\r\n- [ ] bac9fda14e9bf597d85d51cebfae210a03c33c07 [ci skip] Use LegacyScriptPubKeyMan for hdseedid in getwalletinfo (49/70)\r\n- [ ] 0a23a92785a2bc0eef233ad4c2ac58b7c354ff88 [ci skip] Change KeypoolCountExternal and GetKeypoolSize to get aggregate sizes from ScriptPubKeyMans (50/70)\r\n- [ ] 5db4f1fbf38cf7ad55f358d1fe918cb776e72fc9 [ci skip] Have IsHDEnabled fetch from ScriptPubKeyMans (51/70)\r\n- [ ] 29642268998127a7e46ad4ccf04cbf2bc66e1653 [ci skip] Fetch oldest keypool time from ScriptPubKeyMans (52/70)\r\n- [ ] 662d0002a3bc31be2553800b1ac9d2666df7b680 [ci skip] have TopUpKeyPool call TopUp in each ScriptPubKeyMan (53/70)\r\n- [ ] e32509e49d5f4301d6dd677d682b929caa3a2494 [ci skip] Have EncryptWallet, Lock, and Unlock call their respective functions in ScriptPubKeyMans (54/70)\r\n- [ ] cb12ea9cc8f0df83f9e29b0ac8abe48567ce4fa1 [ci skip] Use LegacyScriptPubKeyMan throughout psbt_wallet_tests (55/70)\r\n- [ ] 39e9d613aebfa611b3f599916cd595a66500c595 [ci skip] Use LegacyScriptPubKeyMan throughout wallettool (56/70)\r\n- [ ] dbb0d8f6af94300dbe84e0dd1595e0a9d45d3d07 [ci skip] Use ScriptPubKeyMans' Setup and Upgrade functions when loading or creating a wallet (57/70)\r\n- [ ] c09a7967dab25904218e6b850e871f49b4f9ea78 [ci skip] Define first run as having no ScriptPubKeyMans (58/70)\r\n- [ ] d188254886cf7ac429c1d6ebcb1e18f09f215a61 [ci skip] Use RewriteDB action when DB needs rewrite (59/70)\r\n- [ ] 5a837cbec18b6e7bf6903816f479b96fc31f0b7e [ci skip] Use GetTimeFirstKey instead of nTimeFirstKey (60/70)\r\n- [ ] 04456084ef2600909a2d162dbfae9197afcb94bb [ci skip] Use LegacyScriptPubKeyMan for in wallet_tests (61/70)\r\n- [ ] 2dd631c391fee7fccaba4d536d08306de867accd [ci skip] Use LegacyScriptPubKeyMan in dumpprivkey and dumpwallet (62/70)\r\n- [ ] dadcbef6226ed1cddcf18ebbbe12ca8470d56946 [ci skip] Change CanGetAddresses to fetch from ScriptPubKeyMan (63/70)\r\n- [ ] f353a3ca99600e6e25b92e478cb5592c69a62ed8 [ci skip] Fetch the correct SigningProvider for signing PSBTs (64/70)\r\n- [ ] fef2ffa7ac0df3373ea3146e11057a1932736336 [ci skip] Use LegacyScriptPubKeyMan in test util (65/70)\r\n- [ ] 6aac37c38c5d8d3aea67209931a7de5a14fe92bb [ci skip] Use LegacyScriptPubKeyMan in some parts of getbalances and createwallet (66/70)\r\n- [ ] 43819a86b248c089bcfc342e7c7ce43060f507c1 [ci skip] Have getPubKey and getPrivKey use SigningProvider (67/70)\r\n- [ ] 4e7c2d8fc7835133c39ad8b8c7a805d49679c0f4 [ci skip] Use LegacyScriptPubKeyMan in benchmarks involving the wallet (68/70)\r\n- [ ] dc262606b03486af8045b71e78b8292ebf225536 [ci skip] Store p2sh scripts in AddAndGetDestinationForScript (69/70)\r\n- [ ] c5f900358e582607c8386430ea3a63f02533b64e Remove unused functions and switch CWallet to use ScriptPubKeyMan (70/70)",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#pullrequestreview-278610269",
      "submitted_at": "2019-08-22T19:05:59Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
    },
    {
      "event": "reviewed",
      "id": 280336299,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjgwMzM2Mjk5",
      "url": null,
      "actor": null,
      "commit_id": "b49bbb939be92a67ff77c3f7bca5bb94dd141906",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#pullrequestreview-280336299",
      "submitted_at": "2019-08-27T17:19:04Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
    },
    {
      "event": "reviewed",
      "id": 280277366,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjgwMjc3MzY2",
      "url": null,
      "actor": null,
      "commit_id": "d0b41dc26a74e158bd22259aed50869c9676e3fd",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "dropping some comments on a partial review",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#pullrequestreview-280277366",
      "submitted_at": "2019-08-28T16:05:43Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
    },
    {
      "event": "labeled",
      "id": 2595759303,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDI1OTU3NTkzMDM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2595759303",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-30T01:40:12Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 282184583,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjgyMTg0NTgz",
      "url": null,
      "actor": null,
      "commit_id": "b893f0d053f1b5be1229d4fb77ced46b222f9993",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#pullrequestreview-282184583",
      "submitted_at": "2019-08-30T18:34:52Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
    },
    {
      "event": "commented",
      "id": 526707694,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUyNjcwNzY5NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/526707694",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-30T18:43:55Z",
      "updated_at": "2019-08-30T18:43:55Z",
      "author_association": "MEMBER",
      "body": "Suggestion just to see what others think: Split up this PR into a couple PRs, first of which is the non-test-breaking changes, the 2nd all the breaking changes+test fixes at the end?",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-526707694",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16341"
    },
    {
      "event": "commented",
      "id": 526709057,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUyNjcwOTA1Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/526709057",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-30T18:48:13Z",
      "updated_at": "2019-08-30T18:49:34Z",
      "author_association": "MEMBER",
      "body": "> Suggestion just to see what others think: Split up this PR into a couple PRs, first of which is the non-test-breaking changes, the 2nd all the breaking changes+test fixes at the end?\r\n\r\nI definitely would not want this because it would temporarily add a huge amount of duplicate code to the wallet. If this needs to be broken up to be reviewed (and I don't think it does), I'd either go with sjors approach moving things gradually, or just have one giant move-only commit followed by the actual code changes.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-526709057",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16341"
    },
    {
      "event": "commented",
      "id": 526710335,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUyNjcxMDMzNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/526710335",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-30T18:52:34Z",
      "updated_at": "2019-08-30T18:52:34Z",
      "author_association": "MEMBER",
      "body": "Or, in case I misunderstood, if you are just talking about splitting the first 9 commits into their own PR (the commits before the \"Implement...\" commits and the \"ci skip\" commits), that seems perfectly fine and would help a little.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-526710335",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16341"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2598160087,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjU5ODE2MDA4Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2598160087",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-30T19:48:46Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2598170855,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjU5ODE3MDg1NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2598170855",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-30T19:53:51Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2598208783,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjU5ODIwODc4Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2598208783",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-30T20:10:54Z"
    },
    {
      "event": "commented",
      "id": 526733789,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUyNjczMzc4OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/526733789",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-30T20:12:30Z",
      "updated_at": "2019-08-30T20:12:30Z",
      "author_association": "MEMBER",
      "body": "Rebased and addressed comments.\r\n\r\nWill look at the bug @Sjors reported next.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-526733789",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16341"
    },
    {
      "event": "mentioned",
      "id": 2598212285,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjU5ODIxMjI4NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2598212285",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-30T20:12:30Z"
    },
    {
      "event": "subscribed",
      "id": 2598212286,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI1OTgyMTIyODY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2598212286",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-30T20:12:30Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2598293852,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjU5ODI5Mzg1Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2598293852",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-30T20:52:39Z"
    },
    {
      "event": "commented",
      "id": 526746214,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUyNjc0NjIxNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/526746214",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-30T20:52:52Z",
      "updated_at": "2019-08-30T20:52:52Z",
      "author_association": "MEMBER",
      "body": "The bug @Sjors found should be fixed now.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-526746214",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16341"
    },
    {
      "event": "mentioned",
      "id": 2598294346,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjU5ODI5NDM0Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2598294346",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-30T20:52:52Z"
    },
    {
      "event": "subscribed",
      "id": 2598294348,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI1OTgyOTQzNDg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2598294348",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-30T20:52:52Z"
    },
    {
      "event": "unlabeled",
      "id": 2598430529,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MjU5ODQzMDUyOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2598430529",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-30T22:15:22Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 282298536,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjgyMjk4NTM2",
      "url": null,
      "actor": null,
      "commit_id": "cce926c576886089a9a5ca3e5229425e2b0e4333",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "The blank wallet bug is indeed fixed.\r\n\r\nI like the idea of splitting the first 9 commits out, maybe into two or three PRs. The refactors touch very different spots, so could be multiple PRs. At minimum I would put the pure refactors and new ScriptPubKeyman stuff separate PRs. Right now the commits alternate between refactors and adding new stuff.\r\n* d9ea84699fc0c63003b759ec8e41802a3e1a2cec `Always try to sign for all pubkeys in multisig` (haven't reviewed yet)\r\n* cce926c57 `Refactor rawtransaction_util's SignTransaction` code review ACK\r\n* d2d43ab141e7f27b3c965ebbf5e7db10476837f3 `Move wallet enums to walletutil.h` ACK, confirmed move only\r\n\r\nIn general I suggest splitting as much as possible out into followup, prerequisite and parallel PRs. Then let's see if we can review the remaining blob as a whole, or keep chipping small bits off. \r\n\r\nJust make sure to add all these PRs to https://github.com/bitcoin/bitcoin/projects/12; I find that work flow pretty efficient in the assume UTXO protect https://github.com/bitcoin/bitcoin/projects/11",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#pullrequestreview-282298536",
      "submitted_at": "2019-08-31T09:03:36Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
    },
    {
      "event": "commented",
      "id": 527613139,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUyNzYxMzEzOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/527613139",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-03T19:54:17Z",
      "updated_at": "2019-09-03T20:11:47Z",
      "author_association": "MEMBER",
      "body": "I split cce926c into #16798\r\n\r\nI'm unsure about splitting the other two \"unrelated\" commits since they don't actually do anything useful outside of this PR.\r\n\r\nd2d43ab is purely to avoid a circular dependency, and d9ea846 is only to fix a side effect of this PR.\r\n\r\nAlso reordered the first several commits so the \"unrelated\" commits come first.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-527613139",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16341"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2604821115,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjYwNDgyMTExNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2604821115",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-03T20:03:48Z"
    },
    {
      "event": "reviewed",
      "id": 285073862,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mjg1MDczODYy",
      "url": null,
      "actor": null,
      "commit_id": "c4cbc90efe10c43417f4cb8d1a13ebfb4107f9c2",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "reviewed through d7ff25c778ee1fbafa349b4623b3c5241ca0097c : \"Implement CanGetAddresses, CanGenerateKeys, and HavePrivateKeys in LegacyScriptPubKeyMan\"",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#pullrequestreview-285073862",
      "submitted_at": "2019-09-06T21:03:03Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2615811826,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjYxNTgxMTgyNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2615811826",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-06T23:17:55Z"
    },
    {
      "event": "referenced",
      "id": 2615887529,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI2MTU4ODc1Mjk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2615887529",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "46494b08e2393985facca362a525a598bf54495a",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46494b08e2393985facca362a525a598bf54495a",
      "created_at": "2019-09-07T00:40:14Z"
    },
    {
      "event": "labeled",
      "id": 2615907669,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDI2MTU5MDc2Njk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2615907669",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-07T01:12:51Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2615958640,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjYxNTk1ODY0MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2615958640",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-07T03:14:37Z"
    },
    {
      "event": "unlabeled",
      "id": 2615960043,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MjYxNTk2MDA0Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2615960043",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-07T03:17:59Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 529509066,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUyOTUwOTA2Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/529509066",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-09T14:42:13Z",
      "updated_at": "2019-09-09T14:42:13Z",
      "author_association": "MEMBER",
      "body": "only changes through \"Implement CanGetAddresses, CanGenerateKeys, and HavePrivateKeys in LegacyScriptPubKeyMan\" were the suggested ones in above review.",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-529509066",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16341"
    },
    {
      "event": "reviewed",
      "id": 285582874,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mjg1NTgyODc0",
      "url": null,
      "actor": null,
      "commit_id": "a007c8ac72118d871d38115a88dd64cb76a3c465",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "reviewed through `6c7c36276e26539edc8b281129bb30f1cd4a4fb8` \"Implement CanProvide in LegacyScriptPubKeyMan\"",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#pullrequestreview-285582874",
      "submitted_at": "2019-09-09T16:32:00Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2619628761,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjYxOTYyODc2MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2619628761",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-09T18:00:21Z"
    },
    {
      "event": "reviewed",
      "id": 285656678,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mjg1NjU2Njc4",
      "url": null,
      "actor": null,
      "commit_id": "6a9164679039976dbb291b581dfe4f632a107f46",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Briefly reviewed the rest of the commits as well for revision `365879e9bdba93a84bd2ef4a39816a5eb8fd31b0`\r\n\r\nOne concern I have that I'd have to take a harder look at is that some places seem to eagerly try whatever scriptpubkeyman are loaded, and some simply load the Legacy one by name. I'll more carefully go through the exposed RPC interface later.\r\n\r\n",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#pullrequestreview-285656678",
      "submitted_at": "2019-09-09T18:21:09Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2620455728,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjYyMDQ1NTcyOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2620455728",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-09T23:35:00Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2620462226,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjYyMDQ2MjIyNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2620462226",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-09T23:39:13Z"
    },
    {
      "event": "commented",
      "id": 529944785,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUyOTk0NDc4NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/529944785",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-10T13:51:02Z",
      "updated_at": "2019-09-10T13:51:02Z",
      "author_association": "MEMBER",
      "body": "tentative utACK https://github.com/bitcoin/bitcoin/pull/16341/commits/1ccf487912fd6abb2a289f4933eebd06ad4e5116  if https://github.com/bitcoin/bitcoin/pull/16341/files#r322739005 is answered\r\n\r\nThe RPC-based changes seem correct as well. Any import/dump type functionality is locked in to legacy box, and as new boxes are created we can either activate those, or make new RPC calls. For more general info-gathering-on-keys based queries, any box will do, which is what the implementation does.",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-529944785",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16341"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2622808195,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjYyMjgwODE5NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2622808195",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-10T15:56:13Z"
    },
    {
      "event": "commented",
      "id": 530008341,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUzMDAwODM0MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/530008341",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-10T16:08:02Z",
      "updated_at": "2019-09-10T19:51:37Z",
      "author_association": "MEMBER",
      "body": "re-utACK fb0058ed68a18053959001a0191f3fbcfec50526 :)",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-530008341",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16341"
    },
    {
      "event": "referenced",
      "id": 2623469554,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI2MjM0Njk1NTQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2623469554",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "9282d8beb93134e46f0b63cd7a0f88335638b6a0",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/9282d8beb93134e46f0b63cd7a0f88335638b6a0",
      "created_at": "2019-09-10T19:45:35Z"
    },
    {
      "event": "reviewed",
      "id": 287618679,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mjg3NjE4Njc5",
      "url": null,
      "actor": null,
      "commit_id": "fb0058ed68a18053959001a0191f3fbcfec50526",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#pullrequestreview-287618679",
      "submitted_at": "2019-09-12T18:24:45Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2633565076,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjYzMzU2NTA3Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2633565076",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-13T21:06:54Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2633580110,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjYzMzU4MDExMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2633580110",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-13T21:14:05Z"
    },
    {
      "event": "reviewed",
      "id": 288817991,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mjg4ODE3OTkx",
      "url": null,
      "actor": null,
      "commit_id": "5f641a5c8fc446a6df61aeab270583efcafa0f7e",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#pullrequestreview-288817991",
      "submitted_at": "2019-09-16T18:30:31Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2637753448,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjYzNzc1MzQ0OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2637753448",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-16T20:43:01Z"
    },
    {
      "event": "reviewed",
      "id": 289283445,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mjg5MjgzNDQ1",
      "url": null,
      "actor": null,
      "commit_id": "e3f2ce307aa16a732bc4a9bb04d77d36db722885",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Review in progress, borrowing @ryanofsky's fancy tools (see my [gist](https://gist.github.com/Sjors/354d6c4751aede3dde49e407271d4391)):\r\n\r\n- [x] eb428d89d09e12b9528518f6a73daeeec4845d12 Move wallet enums to walletutil.h (1/70)\r\n- [x] 4aade7bceeb5092d6a322daec61c1af07ed9775e List output types in an array in order to be iterated over (2/70)\r\n- [x] d8abfae4e93b3023d1d62b4dd10f109eb55f56bd Always try to sign for all pubkeys in multisig (3/70)\r\n- [x] 9899064017a2864ae0b8eb41c3c7e69822752129 Store p2sh scripts in AddAndGetDestinationForScript (4/70)\r\n- [x] fbb6d0142ac98a315fc230d186a4a7b673f5f5cb Introduce both ScriptPubKeyMan as an interface and LegacyScriptPubKeyMan as a dummy class (5/70)\r\n- [x] 86c2a670d6e169f2b5058946818331d354ed4f3a Add LegacyScriptPubKeyMan to CWallet (6/70)\r\n- [x] 85b38c74d7642a65af3f447322c31fd77d36780b Add WalletStorage class and have CWallet inherit it (7/70)\r\n- [x] d6b6e0bab5552916dcd166e60c5b02d31ba853e7 Add WalletStorage to ScriptPubKeyMan and passthrough some functions to it (8/70)\r\n- [x] a8e7461254b5964fc7452e5ceabfbcd303d9fbfb Fetch the SigningProvider for a script from the wallet (9/70)\r\n- [x] 1127cf6c45c860950a02f85d964b98feb03b1abe Fetch the ScriptPubKeyMan for given output type and internal-ness, or a given script, or ScriptPubKeyMan id (10/70)\r\n- [x] 501c0830a4bd6bfe3949482170f57d6e137f931c Implement GetSigningProvider in LegacyScriptPubKeyMan (11/70)\r\n- [x] e423df81761a83da3f55723f616f90705fe188b5 Implement function to connect ScriptPubKeyMan's NotifyCanGetAddessesChanged and NotifyWatchOnlyChanged to CWallet's (12/70)\r\n- [ ] 7af540932d3e405c3886a382d66bda0cac443585 Implement IsLocked and IsCrypted in LegacyScriptPubKeyMan (13/70)\r\n- [ ] 07b616b4b04dc29936cdf5fb87c5b3201bc01445 Implement LoadCryptedKey and AddCryptedKey in LegacyScriptPubKeyMan (14/70)\r\n- [x] 1c21d4e2ce2c698b9ca06c7c428d7300d33184ab Implement UpdateTimeFirstKey, and GetTimeFirstKey in LegacyScriptPubKeyMan (15/70)\r\n- [x] 17d32d65c125078063cccf58b72cb6041e6b6828 Implement AddWatchOnly, RemoveWatchOnly, HaveWatchOnly, and LoadWatchOnly in LegacyScriptPubKeyMan (16/70)\r\n- [x] 7b83f49531be8e22c45b107bcdad879ecd9a834d Implement AddKeyPubKey and LoadKey in LegacyScriptPubKeyMan (17/70)\r\n- [x] 276adc1ebc3d185d14cfc12abc4f057aaa4f164d Implement WalletLogPrintf in LegacyScriptPubKeyMan (18/70)\r\n- [x] 6ecc20b2d98f02ad4218f3924c7de88f375fa983 Implement SetHDCHain, and IsHDEnabled in LegacyScriptPubKeyMan (19/70)\r\n- [x] 8ccc29a594b34c0b6447e58b0732ee9f0840df4c Implement LoadCScript in LegacyScriptPubKeyMan (20/70)\r\n- [x] 540e60b06265fa3ea52181256ee729ce7a50c3fe Implement LoadKeyMetadata and LoadScriptMetadata in LegacyScriptPubKeyMan (21/70)\r\n- [x] 251201acb529fc5de68efa13d01b6e5882d2776f Implement GetKey, HaveKey, and GetPubKey in LegacyScriptPubKeyMan (22/70)\r\n- [x] 2760f2160c2ea437a8c4c67dbb435577cd5e956a Implement GenerateNewKey in LegacyScriptPubKeyMan (23/70)\r\n- [x] ce1ed8df731f5770f34a8579a05fa7c5a8effb72 Implement LoadKeyPool in LegacyScriptPubKeyMan (24/70)\r\n- [x] ab15835a6bc41946e9821ae68b465fab6bec4a00 Implement GetOldestKeyPoolTime, KeypoolCountExternalKeys, and GetKeypoolSize in LegacyScriptPubKeyMan (25/70)\r\n- [x] add7cbd861d29f492d2796325c51ddc8f6e34d5f Implement CanGetAddresses, CanGenerateKeys, and HavePrivateKeys in LegacyScriptPubKeyMan (26/70)\r\n- [x] dda4bffd91d569a1a0ddac46d93a99db819e5034 Implement GenerateNewSeed, DeriveNewSeed, and SetHDSeed for LegacyScriptPubKeyMan (27/70)\r\n- [x] b8af54b943ff52b259571fd458ed63d20b5a2e95 Implement TopUpKeypool, TopUp, and NewKeyPool in LegacyScriptPubKeyMan (28/70)\r\n- [x] 8611d0122a8747ba4570afa3113b4b5cca92d721 Implement ReturnAddress, and KeepKey in LegacyScriptPubKeyMan (29/70)\r\n- [x] ae9354b7694056cfecc8517e8657f811bf0c7842 Implement GetNewAddress, and GetReservedAddress in LegacyScriptPubKeyMan (30/70)\r\n- [x] 2ccffda892e4e3c8d7642b6658e5ace84357714b Implement MarkUnusedAddresses in LegacyScriptPubKeyMan (31/70)\r\n- [x] 5b6f5b926457e2423d6a4fcf0b52e0b454a20676 Implement IsMine in LegacyScriptPubKeyMan (32/70)\r\n- [ ] 205502215e1085b7f94f36d4255b9ee833f0f55a Implement UpgradeKeyMetaData, SetupGeneration, IsFirstRun, Upgrade, RewriteDB in LegacyScriptPubKeyMan (33/70)\r\n- [ ] 84470984430c34f0ad51dc3dc56e4c0d27367bf5 Implement Unlock, Lock, and Encrypt and LegacyScriptPubKeyMan (34/70)\r\n- [x] 5c03c7e5cba3e7abe00a0eca8889a5b14e9c67b6 Implement ImporScripts, ImportPrivKeys, ImportPubKeys, and ImportScriptPubKeys in LegacyScriptPubKeyMan (35/70)\r\n- [x] 3099b7c2dbfd31f4a1747f7e38629e44988d6ef7 Implement GetMetadata in LegacyScriptPubKeyMan (36/70)\r\n- [x] b1efc0af2845bb57714951613dcdfc70ccf63b47 Implement GetKeyOrigin in LegacyScriptPubKeyMan (37/70)\r\n- [x] f3739076feb69c99a6d93d6218e3b628d2e4cc57 Implement actually loading everything into LegacyScriptPubKeyMan (38/70)\r\n- [x] c2f6d4b40b8c508aa14f27f5e860cdc271a0b6b4 Implement CanProvide in LegacyScriptPubKeyMan (39/70)\r\n- [x] 842f501ead54f66143d85c5b44d9defb0f1e22d4 [ci skip] Remove CWallet from IsMine and have CWallet always use ScriptPubKeyMan's IsMine (40/70)\r\n- [x] 8a2d51c741b896842e093fa35590ef36abb907c4 [ci skip] moveonly: move ismine stuff to be a module of LegacyScriptPubKeyMan (41/70)\r\n- [x] 2d4c3de17c140cfc84df45fb9cb5d86f184b004a [ci skip] Have GetNewAddress, GetNewChangeAddress, and ReserveAddress use ScriptPubKeyMan (42/70)\r\n- [x] 73f7f54b1aad82c26240cffaa1ae7afb7cc602ee [ci skip] Mark used addresses in ScriptPubKeyMan (43/70)\r\n- [x] 99a802afd08fe4535b4a4bc65ff644186f5a0131 [ci skip] Call UpgradeKeyMetaData for each ScriptPubKeyMan (44/70)\r\n- [x] 8398e91488779baf282d7d692630f3348cb0b3fa [ci skip] Sign using SigningProvider from ScriptPubKeyMan when signing within CWallet (45/70)\r\n- [x] d8dd23fdaed2170ed41c8a702620777115483ae7 [ci skip] Do not allow import*, dump*, and addmultisigaddress RPCs when wallet is not backed by LegacyScriptPubKeyMan (46/70)\r\n- [x] 5bd936494ed2b6afe5e0cc332ae4e74f0066b061 [ci skip] Change Imports to use LegacyScriptPubKeyMan Imports (47/70)\r\n- [x] 47e43141262c07a39522361628dab30c7d7625bd [ci skip] Use SigningProviders and ScriptPubKeyMans in listunspent, signmessage, signrawtransactionwithwallet, and getaddressinfo (48/70)\r\n- [x] 46747500672cf985fd015cd8609e7b39aa175306 [ci skip] Use LegacyScriptPubKeyMan in addmultisigaddress and sethdseed (49/70)\r\n- [x] 4837bc6fcf8e165dd3ee606f46aa5316e007556c [ci skip] Use LegacyScriptPubKeyMan for hdseedid in getwalletinfo (50/70)\r\n- [x] 12d51a85b65f1f080cc483b273b43dc7596b9a53 [ci skip] Change KeypoolCountExternal and GetKeypoolSize to get aggregate sizes from ScriptPubKeyMans (51/70)\r\n- [x] 657e8f7df530ac9c5b70e337e4c2bf2ec062c7fc [ci skip] Have IsHDEnabled fetch from ScriptPubKeyMans (52/70)\r\n- [x] d3dde67e4aba051bea38daae60ed80fd4db69d3b [ci skip] Fetch oldest keypool time from ScriptPubKeyMans (53/70)\r\n- [x] f3b7ab7a6f443acac0bfc253a380a14f8f17646e [ci skip] have TopUpKeyPool call TopUp in each ScriptPubKeyMan (54/70)\r\n- [ ] 2492a85e988f1ac07655754af2f99ea2b45d9bc3 [ci skip] Have EncryptWallet, Lock, and Unlock call their respective functions in ScriptPubKeyMans (55/70)\r\n- [x] 0dc9eaffa4a9a306d0b97432ad108be39e4c3184 [ci skip] Use LegacyScriptPubKeyMan throughout psbt_wallet_tests (56/70)\r\n- [x] 0eab7717e4969a25560e776ee06593710ee0395d [ci skip] Use LegacyScriptPubKeyMan throughout wallettool (57/70)\r\n- [ ] d027cbb056c1bb2057a0be4a8356f85910768838 [ci skip] Use ScriptPubKeyMans' Setup and Upgrade functions when loading or creating a wallet (58/70)\r\n- [x] ef95b21d408b3b279a8a7c3d5f866f1bccf86c63 [ci skip] Define first run as having no ScriptPubKeyMans (59/70)\r\n- [x] dcee75f6dc2a26697a56d5741890acace3f81f06 [ci skip] Use RewriteDB action when DB needs rewrite (60/70)\r\n- [x] d1c5d16d0b338e8cdb16ec2d14e23a3c678ece6f [ci skip] Use GetTimeFirstKey instead of nTimeFirstKey (61/70)\r\n- [x] 9822895bc7cb870c356a77bc6b3763cd37409bee [ci skip] Use LegacyScriptPubKeyMan for in wallet_tests (62/70)\r\n- [x] cb56b322890273629de253b12ac4083f046112b3 [ci skip] Use LegacyScriptPubKeyMan in dumpprivkey and dumpwallet (63/70)\r\n- [x] f505d6c36e153c0560362aa297cd85bcef62c4de [ci skip] Change CanGetAddresses to fetch from ScriptPubKeyMan (64/70)\r\n- [x] 6f51d198952a4ae8146fd0947110ba03c1a711ae [ci skip] Fetch the correct SigningProvider for signing PSBTs (65/70)\r\n- [x] e2575a1f46d98261c85687956875e0c2a7ef0f31 [ci skip] Use LegacyScriptPubKeyMan in test util (66/70)\r\n- [x] fcb35328be8ac5183a216229c8e594e51aadea07 [ci skip] Use LegacyScriptPubKeyMan in some parts of getbalances and createwallet (67/70)\r\n- [x] 1573967b4aeca99357195546f2903437fa393849 [ci skip] Have getPubKey and getPrivKey use SigningProvider (68/70)\r\n- [x] 0cca3802d911d5526f96ac7325030fe39e70e3e6 [ci skip] Use LegacyScriptPubKeyMan in benchmarks involving the wallet (69/70)\r\n- [x] 1c01da74d33033b0aef4a30dc305a03594ff7d33 Remove unused functions and switch CWallet to use ScriptPubKeyMan (70/70)\r\n\r\nNit: maybe split `scriptpubkeyman_legacy.h` out from `scriptpubkeyman.h`.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#pullrequestreview-289283445",
      "submitted_at": "2019-09-17T17:02:33Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
    },
    {
      "event": "reviewed",
      "id": 289421916,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mjg5NDIxOTE2",
      "url": null,
      "actor": null,
      "commit_id": "059824a35f67be760a6050d5379c138d56fa788f",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#pullrequestreview-289421916",
      "submitted_at": "2019-09-17T17:20:14Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2640847659,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjY0MDg0NzY1OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2640847659",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-17T18:14:34Z"
    },
    {
      "event": "reviewed",
      "id": 289455552,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mjg5NDU1NTUy",
      "url": null,
      "actor": null,
      "commit_id": "0d701bd42d0d9db9da858a4e6ae346ae0b1dda90",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#pullrequestreview-289455552",
      "submitted_at": "2019-09-17T18:17:14Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2640894497,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjY0MDg5NDQ5Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2640894497",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-17T18:30:29Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2640898504,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjY0MDg5ODUwNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2640898504",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-17T18:31:41Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2640901192,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjY0MDkwMTE5Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2640901192",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-17T18:32:35Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2641661612,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjY0MTY2MTYxMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2641661612",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-17T23:50:46Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2642037172,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjY0MjAzNzE3Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2642037172",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-18T03:38:31Z"
    },
    {
      "event": "reviewed",
      "id": 290055223,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjkwMDU1MjIz",
      "url": null,
      "actor": null,
      "commit_id": "95aca1f9be874910fba8744a084cca5882b28f51",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#pullrequestreview-290055223",
      "submitted_at": "2019-09-18T16:40:57Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2644234071,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjY0NDIzNDA3MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2644234071",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-18T16:52:23Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2644261829,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjY0NDI2MTgyOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2644261829",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-18T17:02:01Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2644296142,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjY0NDI5NjE0Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2644296142",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-18T17:14:16Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2644330385,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjY0NDMzMDM4NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2644330385",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-18T17:25:40Z"
    },
    {
      "event": "reviewed",
      "id": 290098282,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjkwMDk4Mjgy",
      "url": null,
      "actor": null,
      "commit_id": "df689d59732074715e211d16800274d07a9f0faa",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#pullrequestreview-290098282",
      "submitted_at": "2019-09-18T17:56:30Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
    },
    {
      "event": "reviewed",
      "id": 290750399,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjkwNzUwMzk5",
      "url": null,
      "actor": null,
      "commit_id": "df689d59732074715e211d16800274d07a9f0faa",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#pullrequestreview-290750399",
      "submitted_at": "2019-09-19T18:11:14Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
    },
    {
      "event": "reviewed",
      "id": 290783010,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjkwNzgzMDEw",
      "url": null,
      "actor": null,
      "commit_id": "df689d59732074715e211d16800274d07a9f0faa",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#pullrequestreview-290783010",
      "submitted_at": "2019-09-19T19:08:49Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2648673347,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjY0ODY3MzM0Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2648673347",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-19T23:22:18Z"
    },
    {
      "event": "reviewed",
      "id": 291455908,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjkxNDU1OTA4",
      "url": null,
      "actor": null,
      "commit_id": "ae9354b7694056cfecc8517e8657f811bf0c7842",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Comparing function bodies side by side was less painful than I feared.\r\n\r\nACK 1c01da74d33033b0aef4a30dc305a03594ff7d33, modulo two parts I did not review yet:\r\n* wallet encryption stuff, still in flux, see discussion [here](https://github.com/bitcoin/bitcoin/pull/16341#discussion_r326691270)\r\n* wallet creation and upgrade: see discussion [here](https://github.com/bitcoin/bitcoin/pull/16341/commits/205502215e1085b7f94f36d4255b9ee833f0f55a#r322370108)\r\n\r\nI also ran the (very minimal) backwards compatibility & upgrade sanity checks in #12134.\r\n\r\nWhen all reviewers are satisfied, I suggest merging as early possible after 0.19 branch-off.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#pullrequestreview-291455908",
      "submitted_at": "2019-09-21T10:47:40Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2655037007,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjY1NTAzNzAwNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2655037007",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-23T16:07:29Z"
    },
    {
      "event": "mentioned",
      "id": 2655045889,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjY1NTA0NTg4OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2655045889",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-23T16:10:15Z"
    },
    {
      "event": "subscribed",
      "id": 2655045892,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI2NTUwNDU4OTI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2655045892",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-23T16:10:15Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2655051299,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjY1NTA1MTI5OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2655051299",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-23T16:11:59Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2655300962,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjY1NTMwMDk2Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2655300962",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-23T17:34:02Z"
    },
    {
      "event": "reviewed",
      "id": 292667391,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjkyNjY3Mzkx",
      "url": null,
      "actor": null,
      "commit_id": "3b059468570db2405979f5cedee5bb74f6fd7e87",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#pullrequestreview-292667391",
      "submitted_at": "2019-09-24T19:51:22Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
    },
    {
      "event": "reviewed",
      "id": 292673294,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjkyNjczMjk0",
      "url": null,
      "actor": null,
      "commit_id": "3b059468570db2405979f5cedee5bb74f6fd7e87",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#pullrequestreview-292673294",
      "submitted_at": "2019-09-24T20:02:12Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2659382912,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjY1OTM4MjkxMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2659382912",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-24T20:08:18Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2659388658,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjY1OTM4ODY1OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2659388658",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-24T20:10:23Z"
    },
    {
      "event": "reviewed",
      "id": 293226326,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjkzMjI2MzI2",
      "url": null,
      "actor": null,
      "commit_id": "47b342db0ddb1bc9bc595635e36bb2f16921a605",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#pullrequestreview-293226326",
      "submitted_at": "2019-09-25T16:59:19Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
    },
    {
      "event": "reviewed",
      "id": 293315156,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjkzMzE1MTU2",
      "url": null,
      "actor": null,
      "commit_id": "47b342db0ddb1bc9bc595635e36bb2f16921a605",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#pullrequestreview-293315156",
      "submitted_at": "2019-09-25T19:35:44Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
    },
    {
      "event": "reviewed",
      "id": 293880119,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjkzODgwMTE5",
      "url": null,
      "actor": null,
      "commit_id": "47b342db0ddb1bc9bc595635e36bb2f16921a605",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#pullrequestreview-293880119",
      "submitted_at": "2019-09-26T17:20:22Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
    },
    {
      "event": "reviewed",
      "id": 293920786,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjkzOTIwNzg2",
      "url": null,
      "actor": null,
      "commit_id": "47b342db0ddb1bc9bc595635e36bb2f16921a605",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#pullrequestreview-293920786",
      "submitted_at": "2019-09-26T18:29:37Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
    },
    {
      "event": "reviewed",
      "id": 293931426,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjkzOTMxNDI2",
      "url": null,
      "actor": null,
      "commit_id": "47b342db0ddb1bc9bc595635e36bb2f16921a605",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#pullrequestreview-293931426",
      "submitted_at": "2019-09-26T18:48:33Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
    },
    {
      "event": "reviewed",
      "id": 293950668,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjkzOTUwNjY4",
      "url": null,
      "actor": null,
      "commit_id": "47b342db0ddb1bc9bc595635e36bb2f16921a605",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#pullrequestreview-293950668",
      "submitted_at": "2019-09-26T19:24:42Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2666549725,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjY2NjU0OTcyNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2666549725",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-26T20:08:35Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2669574590,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjY2OTU3NDU5MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2669574590",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-27T18:48:14Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2669667008,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjY2OTY2NzAwOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2669667008",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-27T19:26:19Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2669881058,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjY2OTg4MTA1OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2669881058",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-27T20:58:37Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2669897232,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjY2OTg5NzIzMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2669897232",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-27T21:05:15Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2669920835,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjY2OTkyMDgzNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2669920835",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-27T21:15:49Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2674860737,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjY3NDg2MDczNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2674860737",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-30T21:23:29Z"
    },
    {
      "event": "reviewed",
      "id": 296366288,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mjk2MzY2Mjg4",
      "url": null,
      "actor": null,
      "commit_id": "4abd055ce1a595800ec88552a1f8aac47acb8cf4",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#pullrequestreview-296366288",
      "submitted_at": "2019-10-02T16:26:10Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
    },
    {
      "event": "reviewed",
      "id": 296393285,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mjk2MzkzMjg1",
      "url": null,
      "actor": null,
      "commit_id": "26c1ebe6a7bea812860636f9d7316fc71b8d90dc",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#pullrequestreview-296393285",
      "submitted_at": "2019-10-02T17:12:40Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
    },
    {
      "event": "reviewed",
      "id": 296405765,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mjk2NDA1NzY1",
      "url": null,
      "actor": null,
      "commit_id": "4abd055ce1a595800ec88552a1f8aac47acb8cf4",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#pullrequestreview-296405765",
      "submitted_at": "2019-10-02T17:33:44Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2682275876,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjY4MjI3NTg3Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2682275876",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-02T22:43:54Z"
    },
    {
      "event": "reviewed",
      "id": 297038629,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mjk3MDM4NjI5",
      "url": null,
      "actor": null,
      "commit_id": "0b66a22b854e39e109ac5a42a058e1f8ee51ba38",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#pullrequestreview-297038629",
      "submitted_at": "2019-10-03T18:17:48Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
    },
    {
      "event": "reviewed",
      "id": 297062952,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mjk3MDYyOTUy",
      "url": null,
      "actor": null,
      "commit_id": "0b66a22b854e39e109ac5a42a058e1f8ee51ba38",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#pullrequestreview-297062952",
      "submitted_at": "2019-10-03T18:23:13Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
    },
    {
      "event": "reviewed",
      "id": 297082772,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mjk3MDgyNzcy",
      "url": null,
      "actor": null,
      "commit_id": "0b66a22b854e39e109ac5a42a058e1f8ee51ba38",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#pullrequestreview-297082772",
      "submitted_at": "2019-10-03T18:58:00Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2685133387,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjY4NTEzMzM4Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2685133387",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-03T19:02:04Z"
    },
    {
      "event": "reviewed",
      "id": 297110410,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mjk3MTEwNDEw",
      "url": null,
      "actor": null,
      "commit_id": "c14ad7a89811cb1efe6ed82dff22890dc654ac44",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#pullrequestreview-297110410",
      "submitted_at": "2019-10-03T19:50:37Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2685373665,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjY4NTM3MzY2NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2685373665",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-03T20:29:50Z"
    },
    {
      "event": "reviewed",
      "id": 297675584,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mjk3Njc1NTg0",
      "url": null,
      "actor": null,
      "commit_id": "ce944a2f30b21f9950fd5f5b69a860eb180d2eb9",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#pullrequestreview-297675584",
      "submitted_at": "2019-10-04T19:29:38Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2688513068,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjY4ODUxMzA2OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2688513068",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-04T19:53:32Z"
    },
    {
      "event": "reviewed",
      "id": 297830914,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mjk3ODMwOTE0",
      "url": null,
      "actor": null,
      "commit_id": "2d8785dd618b85dd8714d70a47e066be9b6e1969",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#pullrequestreview-297830914",
      "submitted_at": "2019-10-06T10:42:50Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
    },
    {
      "event": "reviewed",
      "id": 297831701,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mjk3ODMxNzAx",
      "url": null,
      "actor": null,
      "commit_id": "2d8785dd618b85dd8714d70a47e066be9b6e1969",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#pullrequestreview-297831701",
      "submitted_at": "2019-10-06T11:01:06Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2689964068,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjY4OTk2NDA2OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2689964068",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-06T15:25:40Z"
    },
    {
      "event": "referenced",
      "id": 2692973174,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI2OTI5NzMxNzQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2692973174",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "022a3a1ea675949cada71f70b2c7b365be9ed6ad",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/022a3a1ea675949cada71f70b2c7b365be9ed6ad",
      "created_at": "2019-10-07T19:06:30Z"
    },
    {
      "event": "referenced",
      "id": 2692973178,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI2OTI5NzMxNzg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2692973178",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "ded789da149cbe2c5dbac7be9d03a562e63ed073",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/ded789da149cbe2c5dbac7be9d03a562e63ed073",
      "created_at": "2019-10-07T19:06:30Z"
    },
    {
      "event": "referenced",
      "id": 2692973183,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI2OTI5NzMxODM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2692973183",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "fbc33c8222b6127cbcf168f50d580b1973dee7a9",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/fbc33c8222b6127cbcf168f50d580b1973dee7a9",
      "created_at": "2019-10-07T19:06:30Z"
    },
    {
      "event": "referenced",
      "id": 2692973185,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI2OTI5NzMxODU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2692973185",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "6469adeafa54e709b027bbf58478bed5f6faf986",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/6469adeafa54e709b027bbf58478bed5f6faf986",
      "created_at": "2019-10-07T19:06:31Z"
    },
    {
      "event": "referenced",
      "id": 2692973188,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI2OTI5NzMxODg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2692973188",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "1532876c5ea6c01c0a62d7d03d99373f35cacb3a",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/1532876c5ea6c01c0a62d7d03d99373f35cacb3a",
      "created_at": "2019-10-07T19:06:31Z"
    },
    {
      "event": "referenced",
      "id": 2692973192,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI2OTI5NzMxOTI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2692973192",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "6ac26975f05f39faf26649c263984ea18e782210",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/6ac26975f05f39faf26649c263984ea18e782210",
      "created_at": "2019-10-07T19:06:31Z"
    },
    {
      "event": "referenced",
      "id": 2692973194,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI2OTI5NzMxOTQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2692973194",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "454cc4ef82387d3f05b4bf4907307182da8f5671",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/454cc4ef82387d3f05b4bf4907307182da8f5671",
      "created_at": "2019-10-07T19:06:31Z"
    },
    {
      "event": "referenced",
      "id": 2692973198,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI2OTI5NzMxOTg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2692973198",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "12b0b2bf15c08576a080d43373a04b42e9897f50",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/12b0b2bf15c08576a080d43373a04b42e9897f50",
      "created_at": "2019-10-07T19:06:31Z"
    },
    {
      "event": "reviewed",
      "id": 298360895,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mjk4MzYwODk1",
      "url": null,
      "actor": null,
      "commit_id": "0fb52e481f411fdf67257965a9144522b4bac87c",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "[Edited 10/12: [Removed ACK](https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-541330425)]\r\n\r\n~utACK 0fb52e481f411fdf67257965a9144522b4bac87c~. Nice work on this @achow101 and thank you for being so responsive to suggestions!\r\n\r\nTo review this, I created my own branch [`pr/keyman`](https://github.com/ryanofsky/bitcoin/commits/pr/keyman) with the same end result as this PR but with a different commit structure that made more sense to me. You could consider adopting this branch if you think it'd be easier for others to review. The branch consists of a pure moveonly commit followed by a renaming commit followed by smaller refactoring and bugfix commits. Unlike the current PR, moved code is never added in one commit and deleted in a separate commit, and every commit compiles and passes tests, and refactoring changes are in different commits than bugfix changes. It's possible the branch might be helpful to other reviewers even if not adopted, and in any case I'm happy with the PR in its current form.\r\n\r\n| [`pr/keyman`](https://github.com/ryanofsky/bitcoin/commits/pr/keyman) | |\r\n| --- | --- |\r\n| 3d38bf3d0c620755ff9ce9a53eb161e2d5ffd055 MOVEONLY: Move key handling code out of wallet to keyman file | +24&nbsp;-6&nbsp;⇔1375 |\r\n| 530d4d4e08826f0d28e34e81ceaf341b58d29982 Refactor: Split up CWallet and LegacyScriptPubKeyMan and classes | +591&nbsp;-350&nbsp;⇔295 |\r\n| 156ae0e3efe7ecf972856cfb97bc7dd947979e76 MOVEONLY: Reorder LegacyScriptPubKeyMan methods | +4&nbsp;-5&nbsp;⇔87 |\r\n| 797b4ab016335ec67a158ca2012d80d1ac65e867 Refactor: Declare LegacyScriptPubKeyMan methods as virtual | +21&nbsp;-6&nbsp;⇔1 |\r\n| 51acb04eded9501ffd082f798f03266e5b0f5b04 Refactor: Add new ScriptPubKeyMan virtual methods | +46&nbsp;-8&nbsp;⇔0 |\r\n| 5a4a5bcae4bcf3da1075d6c24928b6f3790bc8f2 Refactor: Move SetAddressBook call out of LegacyScriptPubKeyMan::GetNewDestination | +7&nbsp;-4&nbsp;⇔2 |\r\n| 7c71c029010556fc76c5f660c6c8f489ff9275d0 Refactor: Move SetWalletFlag out of LegacyScriptPubKeyMan::UpgradeKeyMetadata | +2&nbsp;-2&nbsp;⇔0 |\r\n| bd5b4351377a432333e0e20842a704fc3e7582fb Refactor: Remove UnsetWalletFlag call from LegacyScriptPubKeyMan::SetHDSeed | +2&nbsp;-1&nbsp;⇔0 |\r\n| addfa4fd8c2e49bb23ebe5f7a1e05f8c0afa737f Refactor: Move SetAddressBookWithDB call out of LegacyScriptPubKeyMan::ImportScriptPubKeys | +6&nbsp;-4&nbsp;⇔5 |\r\n| 9d6999c51c991b38fb837f72662dcb2576072485 Refactor: Move LoadKey LegacyScriptPubKeyMan method definition | +6&nbsp;-1&nbsp;⇔0 |\r\n| f18b5e8d08268f4c41be0db9e96633dbfbc1dc54 Refactor: Move GetMetadata code out of getaddressinfo | +21&nbsp;-8&nbsp;⇔5 |\r\n| 34aa63af4446ed3b064fcf2093991be934f3ffb4 Refactor: Move MarkUnusedAddresses code out of CWallet::AddToWalletIfInvolvingMe | +12&nbsp;-5&nbsp;⇔14 |\r\n| ac0080cf211eb4873ada28092511f5cc99ea66c6 Refactor: Move Upgrade code out of CWallet::CreateWalletFromFile | +24&nbsp;-12&nbsp;⇔20 |\r\n| 1b78923a5fcdf4423112eed3c2748cfe9e4dd6b0 Refactor: Move HavePrivateKeys code out of CWallet::CreateWalletFromFile | +13&nbsp;-2&nbsp;⇔0 |\r\n| c59ca1ecde4426e4de3cb1c817207ec68453b812 Refactor: Move SetupGeneration code out of CWallet | +22&nbsp;-11&nbsp;⇔12 |\r\n| 33c8232f0a39a355726c7f01167071a917454391 Refactor: Move RewriteDB code out of CWallet | +20&nbsp;-4&nbsp;⇔5 |\r\n| 511ee46de0fad2eba114a2ae4445087a4c8fef46 Refactor: Move GetKeypoolSize code out of CWallet | +12&nbsp;-3&nbsp;⇔8 |\r\n| 3f3fad5dd471a60abbe3c7ee6ef56465f2ec4f9e Refactor: Move nTimeFirstKey accesses out of CWallet | +16&nbsp;-3&nbsp;⇔0 |\r\n| 8aa21da6b73ddb4bcd3de65a9d51062c40865991 Refactor: Move encryption code between KeyMan and Wallet | +68&nbsp;-49&nbsp;⇔23 |\r\n| 6192746344ab4565ae6f46af177d7fdce6b5b22f Locking: Lock cs_KeyStore instead of cs_main in legacy keyman | +51&nbsp;-75&nbsp;⇔40 |\r\n| 0c50a72ac4c6192c4cfcc228306d9dc6b7e6a561 Refactor: Allow LegacyScriptPubKeyMan to be null | +72&nbsp;-27&nbsp;⇔0 |\r\n| 360cc0c4d4d8244df796b33275e3884ecd469107 Refactor: Require scriptPubKey to get wallet SigningProvider | +101&nbsp;-24&nbsp;⇔0 |\r\n| 022a3a1ea675949cada71f70b2c7b365be9ed6ad Key pool: Move CanGetAddresses call | +2&nbsp;-1&nbsp;⇔2 |\r\n| be91169dc313ea9af9b84a1002a466a6d864949c Key pool: Move LearnRelated and GetDestination calls | +8&nbsp;-8&nbsp;⇔0 |\r\n| ded789da149cbe2c5dbac7be9d03a562e63ed073 Key pool: Move TopUp call | +0&nbsp;-1&nbsp;⇔1 |\r\n| 65654f2bfbbee1735a72af699d403d8817b4ab07 Key pool: Change ReturnDestination interface to take address instead of key | +12&nbsp;-14&nbsp;⇔0 |\r\n| 1ef5245a4e6cd082a191fb144d896f8e21124daa Key pool: Make TopUp fail if unexpected wallet flags are set | +3&nbsp;-0&nbsp;⇔0 |\r\n| fbc33c8222b6127cbcf168f50d580b1973dee7a9 Key pool: Fix omitted pre-split count in GetKeyPoolSize | +1&nbsp;-1&nbsp;⇔0 |\r\n| 76dcd952ec383543b8c80e8c89eb3e1f18abf6ad IsMine: Set state to WATCH_ONLY if we can get the pubkey | +6&nbsp;-2&nbsp;⇔0 |\r\n| 6469adeafa54e709b027bbf58478bed5f6faf986 HD Split: Avoid redundant upgrades | +1&nbsp;-1&nbsp;⇔0 |\r\n| 34b50f459e0bab550553a8e6be12f3be1b4717c7 Box the wallet: Add multiple keyman maps and loops | +162&nbsp;-47&nbsp;⇔22 |\r\n| b59be76a60dfab381dc742e4a74e6c051f4693bf Refactor: Copy CWallet signals and print function to LegacyScriptPubKeyMan | +22&nbsp;-16&nbsp;⇔6 |\r\n| 3319222232df36179372985f3bbf03939973fbbe Cleanup: Update message strings and comments | +4&nbsp;-5&nbsp;⇔3 |\r\n| 2fa05963c04bcb30bfa6f4ceb622144d8fcb7e7b Cleanup: Drop unused GUI learnRelatedScripts method | +0&nbsp;-5&nbsp;⇔0 |\r\n| 1532876c5ea6c01c0a62d7d03d99373f35cacb3a Refactor: Replace SigningProvider pointers with unique_ptrs | +45&nbsp;-29&nbsp;⇔0 |\r\n| 6ac26975f05f39faf26649c263984ea18e782210 Refactor: Make LegacyScriptPubKeyMan::HasEncryptedData() call WalletStorage::HasEncryptionKeys() | +7&nbsp;-7&nbsp;⇔0 |\r\n| 454cc4ef82387d3f05b4bf4907307182da8f5671 Refactor: Add storage wrapper functions | +44&nbsp;-33&nbsp;⇔0 |\r\n| 12b0b2bf15c08576a080d43373a04b42e9897f50 Refactor: Make WalletDatabase a shared_ptr instead of a unique_ptr | +28&nbsp;-24&nbsp;⇔0 |",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#pullrequestreview-298360895",
      "submitted_at": "2019-10-07T19:33:51Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
    },
    {
      "event": "reviewed",
      "id": 299482114,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mjk5NDgyMTE0",
      "url": null,
      "actor": null,
      "commit_id": "0fb52e481f411fdf67257965a9144522b4bac87c",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#pullrequestreview-299482114",
      "submitted_at": "2019-10-09T15:03:22Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
    },
    {
      "event": "reviewed",
      "id": 299488276,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mjk5NDg4Mjc2",
      "url": null,
      "actor": null,
      "commit_id": "0fb52e481f411fdf67257965a9144522b4bac87c",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#pullrequestreview-299488276",
      "submitted_at": "2019-10-09T15:11:35Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
    },
    {
      "event": "reviewed",
      "id": 299509663,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mjk5NTA5NjYz",
      "url": null,
      "actor": null,
      "commit_id": "0fb52e481f411fdf67257965a9144522b4bac87c",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#pullrequestreview-299509663",
      "submitted_at": "2019-10-09T15:40:26Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
    },
    {
      "event": "commented",
      "id": 540067319,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU0MDA2NzMxOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/540067319",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-09T15:58:48Z",
      "updated_at": "2019-10-10T16:47:59Z",
      "author_association": "MEMBER",
      "body": "I can confirm that `git diff achow101/box-the-wallet ryanofsky/pr/keyman` returns nothing for 0fb52e4 vs. 12b0b2bf15. ACK both.\r\n\r\nA few nits in @ryanofsky's version:\r\n* in 530d4d4 the `This type of wallet does not support this command` lines could be introduced in their own commit, preserving eff07eb9cca498e2942a417545938eb773dbc513\r\n* commit  530d4d4e08826f0d28e34e81ceaf341b58d29982 complains about a missing lock: https://gist.github.com/Sjors/2b5d6cb4a7df4d96217c11ffc1f97c6f. You can use `--enable-debug` again as of 8aa21da (`Refactor: Move encryption code between KeyMan and Wallet`).\r\n* I don't have strong feelings about the last couple \"Unclear if this change is necessary or useful\" commits. \r\n\r\nWould be nice to get one final rebase of #16528, to do some testing with descriptor wallets.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-540067319",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16341"
    },
    {
      "event": "mentioned",
      "id": 2699591472,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjY5OTU5MTQ3Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2699591472",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-09T15:58:48Z"
    },
    {
      "event": "subscribed",
      "id": 2699591474,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI2OTk1OTE0NzQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2699591474",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-09T15:58:48Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2699843692,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjY5OTg0MzY5Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2699843692",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-09T17:21:26Z"
    },
    {
      "event": "commented",
      "id": 540102322,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU0MDEwMjMyMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/540102322",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-09T17:23:31Z",
      "updated_at": "2019-10-09T17:23:31Z",
      "author_association": "MEMBER",
      "body": "I'm going to stick with the current commit structure.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-540102322",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16341"
    },
    {
      "event": "referenced",
      "id": 2700279905,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3MDAyNzk5MDU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2700279905",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "3e0b0e476e4ebf59d688af009900ed5cb8528221",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/3e0b0e476e4ebf59d688af009900ed5cb8528221",
      "created_at": "2019-10-09T19:51:34Z"
    },
    {
      "event": "referenced",
      "id": 2700279907,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3MDAyNzk5MDc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2700279907",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "721b34107984104e1f2b232016e456a7c76a05a6",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/721b34107984104e1f2b232016e456a7c76a05a6",
      "created_at": "2019-10-09T19:51:34Z"
    },
    {
      "event": "referenced",
      "id": 2700279909,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3MDAyNzk5MDk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2700279909",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "5afee37fdfc10e7cd210e68f3052d1fb1ef658f5",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/5afee37fdfc10e7cd210e68f3052d1fb1ef658f5",
      "created_at": "2019-10-09T19:51:34Z"
    },
    {
      "event": "referenced",
      "id": 2700279913,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3MDAyNzk5MTM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2700279913",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "6cfb305e01113325ec0811fea8a0104536cbf967",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/6cfb305e01113325ec0811fea8a0104536cbf967",
      "created_at": "2019-10-09T19:51:34Z"
    },
    {
      "event": "referenced",
      "id": 2700279915,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3MDAyNzk5MTU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2700279915",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "6da50b7ab6b68c6607e9f9cfc78ea1bf7669d3f0",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/6da50b7ab6b68c6607e9f9cfc78ea1bf7669d3f0",
      "created_at": "2019-10-09T19:51:34Z"
    },
    {
      "event": "referenced",
      "id": 2700279918,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3MDAyNzk5MTg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2700279918",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "b4be0917a0ccf4fd844a462c4039ce7a760448c4",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/b4be0917a0ccf4fd844a462c4039ce7a760448c4",
      "created_at": "2019-10-09T19:51:34Z"
    },
    {
      "event": "referenced",
      "id": 2700279926,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3MDAyNzk5MjY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2700279926",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "fa8f61cd3748b3b5fa9b6ffbe33d9262248b127c",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/fa8f61cd3748b3b5fa9b6ffbe33d9262248b127c",
      "created_at": "2019-10-09T19:51:34Z"
    },
    {
      "event": "referenced",
      "id": 2700279928,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3MDAyNzk5Mjg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2700279928",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "d590e6b8d41499928910e13e4d2da9b8fd8a954d",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/d590e6b8d41499928910e13e4d2da9b8fd8a954d",
      "created_at": "2019-10-09T19:51:35Z"
    },
    {
      "event": "commented",
      "id": 540173610,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU0MDE3MzYxMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/540173610",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-09T20:17:50Z",
      "updated_at": "2019-10-12T14:43:43Z",
      "author_association": "MEMBER",
      "body": "[Edited 10/12: [Removed ACK](https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-541330425)]\r\n\r\n~Code review ACK 9556f59ad83690640a047192771600600c1550dc~. Only changes since last review were suggested address and lock annotation fixes.\r\n\r\nI also updated my branch. If any other reviewers struggling with this PR, I'd encourage them to use it to see a breakdown of changes in the main PR:\r\n\r\n| [`pr/keyman`](https://github.com/ryanofsky/bitcoin/commits/pr/keyman) | |\r\n| --- | --- |\r\n| 3d38bf3d0c620755ff9ce9a53eb161e2d5ffd055 MOVEONLY: Move key handling code out of wallet to keyman file | +24&nbsp;-6&nbsp;⇔1375 |\r\n| c80a4c7787ec84873e90a101cb4e5a99e4d797f0 Refactor: Split up CWallet and LegacyScriptPubKeyMan and classes | +590&nbsp;-350&nbsp;⇔296 |\r\n| 1529a4bc58035c3f1768830a4a7376086c93b9c6 MOVEONLY: Reorder LegacyScriptPubKeyMan methods | +4&nbsp;-5&nbsp;⇔87 |\r\n| fdc32d358c38e8719f1249d42ab8f2f77d4ce270 Refactor: Declare LegacyScriptPubKeyMan methods as virtual | +21&nbsp;-6&nbsp;⇔1 |\r\n| b4a321dd967124c9c52f68ae4b3e40a1f7861606 Refactor: Add new ScriptPubKeyMan virtual methods | +46&nbsp;-8&nbsp;⇔0 |\r\n| 46fe6e240acfe947ee8100ac9cdfcf9e6234a3ea Refactor: Move SetAddressBook call out of LegacyScriptPubKeyMan::GetNewDestination | +7&nbsp;-4&nbsp;⇔2 |\r\n| 5982116cd8db96e05782ecc5f7825cfd9ec04498 Refactor: Move SetWalletFlag out of LegacyScriptPubKeyMan::UpgradeKeyMetadata | +2&nbsp;-2&nbsp;⇔0 |\r\n| 9b121c57197d96ffdf79740b2b703b2aa89e53f2 Refactor: Remove UnsetWalletFlag call from LegacyScriptPubKeyMan::SetHDSeed | +2&nbsp;-1&nbsp;⇔0 |\r\n| f7d1a7d50b78671e48f269030739d46ed75656d9 Refactor: Move SetAddressBookWithDB call out of LegacyScriptPubKeyMan::ImportScriptPubKeys | +6&nbsp;-4&nbsp;⇔5 |\r\n| 01dd97cb9f15f2ea8d86f86a4bf4be4a39972bbe Refactor: Move LoadKey LegacyScriptPubKeyMan method definition | +6&nbsp;-1&nbsp;⇔0 |\r\n| dda6d03e4969e6b2a71b7f38c602d900c6faca49 Refactor: Move GetMetadata code out of getaddressinfo | +21&nbsp;-8&nbsp;⇔5 |\r\n| 00ee9e9467c66a634700bc134f21d83eb429354b Refactor: Move MarkUnusedAddresses code out of CWallet::AddToWalletIfInvolvingMe | +12&nbsp;-5&nbsp;⇔14 |\r\n| 80b3a0763f643af7d9c9be5ce6b8d6bd3c42938f Refactor: Move Upgrade code out of CWallet::CreateWalletFromFile | +24&nbsp;-12&nbsp;⇔20 |\r\n| f733cbc54693d1a1efffbe0613d53d606c2464ad Refactor: Move HavePrivateKeys code out of CWallet::CreateWalletFromFile | +13&nbsp;-2&nbsp;⇔0 |\r\n| 0d5f789e6fc249dba4125e3d22a7c365b3440789 Refactor: Move SetupGeneration code out of CWallet | +22&nbsp;-11&nbsp;⇔12 |\r\n| 993d1f1a63d0cd837aab06a7dcb03272b5b02f03 Refactor: Move RewriteDB code out of CWallet | +20&nbsp;-4&nbsp;⇔5 |\r\n| 20b68aefd252c4273ea82d672ae1459274c3e48e Refactor: Move GetKeypoolSize code out of CWallet | +12&nbsp;-3&nbsp;⇔8 |\r\n| ee77be668f61a9703e22d15cc14f60e68fb2b4e4 Refactor: Move nTimeFirstKey accesses out of CWallet | +16&nbsp;-3&nbsp;⇔0 |\r\n| 045f7de4f6d7d5e0aa927b726d277dccaee7fb5e Refactor: Move encryption code between KeyMan and Wallet | +67&nbsp;-49&nbsp;⇔24 |\r\n| 6a622f3e94193b5d8da19904a6c2ba7d1fe4b003 Locking: Lock cs_KeyStore instead of cs_main in legacy keyman | +55&nbsp;-73&nbsp;⇔37 |\r\n| f2d0b6bf38f51d7a584db9ba0556981ab5051efc Refactor: Allow LegacyScriptPubKeyMan to be null | +72&nbsp;-28&nbsp;⇔0 |\r\n| 713ff35d756c2c082a8b0bfdd6789f9673bd07ed Refactor: Require scriptPubKey to get wallet SigningProvider | +101&nbsp;-24&nbsp;⇔0 |\r\n| 3e0b0e476e4ebf59d688af009900ed5cb8528221 Key pool: Move CanGetAddresses call | +2&nbsp;-1&nbsp;⇔2 |\r\n| 7126df82214e0d1e5ea47ce43de49b021f359070 Key pool: Move LearnRelated and GetDestination calls | +9&nbsp;-8&nbsp;⇔0 |\r\n| 721b34107984104e1f2b232016e456a7c76a05a6 Key pool: Move TopUp call | +0&nbsp;-1&nbsp;⇔1 |\r\n| 22524983096745e8df808efa57671c86f7d93245 Key pool: Change ReturnDestination interface to take address instead of key | +12&nbsp;-14&nbsp;⇔0 |\r\n| df7f357fb81837edbf0e977ad319af773d10d5af Key pool: Make TopUp fail if unexpected wallet flags are set | +3&nbsp;-0&nbsp;⇔0 |\r\n| 5afee37fdfc10e7cd210e68f3052d1fb1ef658f5 Key pool: Fix omitted pre-split count in GetKeyPoolSize | +1&nbsp;-1&nbsp;⇔0 |\r\n| a71dc57498345e8e506fc52bcb1f6723035f8082 IsMine: Set state to WATCH_ONLY if we can get the pubkey | +6&nbsp;-2&nbsp;⇔0 |\r\n| 6cfb305e01113325ec0811fea8a0104536cbf967 HD Split: Avoid redundant upgrades | +1&nbsp;-1&nbsp;⇔0 |\r\n| 4040cc10d67c87aa942f618213bb1195c7b4db4e Box the wallet: Add multiple keyman maps and loops | +161&nbsp;-46&nbsp;⇔22 |\r\n| 6394d8f92c67f180cb25352a36073cf563315760 Refactor: Copy CWallet signals and print function to LegacyScriptPubKeyMan | +22&nbsp;-16&nbsp;⇔6 |\r\n| 85b944bde87bcc54f0cfc25305dc2d8073a88941 Cleanup: Update message strings and comments | +4&nbsp;-5&nbsp;⇔3 |\r\n| f25201cac1aa2e8d4191786177da9458c79a4e86 Cleanup: Drop unused GUI learnRelatedScripts method | +0&nbsp;-5&nbsp;⇔0 |\r\n| 6da50b7ab6b68c6607e9f9cfc78ea1bf7669d3f0 Refactor: Replace SigningProvider pointers with unique_ptrs | +45&nbsp;-29&nbsp;⇔0 |\r\n| b4be0917a0ccf4fd844a462c4039ce7a760448c4 Refactor: Make LegacyScriptPubKeyMan::HasEncryptedData() call WalletStorage::HasEncryptionKeys() | +7&nbsp;-7&nbsp;⇔0 |\r\n| fa8f61cd3748b3b5fa9b6ffbe33d9262248b127c Refactor: Add storage wrapper functions | +44&nbsp;-33&nbsp;⇔0 |\r\n| d590e6b8d41499928910e13e4d2da9b8fd8a954d Refactor: Make WalletDatabase a shared_ptr instead of a unique_ptr | +28&nbsp;-24&nbsp;⇔0 |",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-540173610",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16341"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2700611204,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjcwMDYxMTIwNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2700611204",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-09T21:45:23Z"
    },
    {
      "event": "commented",
      "id": 540215546,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU0MDIxNTU0Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/540215546",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-09T21:47:08Z",
      "updated_at": "2019-10-09T21:48:09Z",
      "author_association": "MEMBER",
      "body": "While rebasing #16528, I noticed that we actually don't need `HasEncryptedData` check both `HasEncryptionKeys` and `mapCryptedKeys.empty()`. It is sufficient to just check `HasEncryptionKeys` because having any encryption keys is a better indicator of encryption. So I've removed `HasEncryptedData` and the things that called it now call `HasEncryptedData`.\r\n\r\nThis also avoids some issues with locking and recursion from calling `IsLocked`.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-540215546",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16341"
    },
    {
      "event": "referenced",
      "id": 2703118674,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3MDMxMTg2NzQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2703118674",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "bd7c03d4957344c801f9f78a88e058d37e61924a",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/bd7c03d4957344c801f9f78a88e058d37e61924a",
      "created_at": "2019-10-10T15:11:09Z"
    },
    {
      "event": "referenced",
      "id": 2703118679,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3MDMxMTg2Nzk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2703118679",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "db94ae7b384299c76832d55d29e118abeda504db",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/db94ae7b384299c76832d55d29e118abeda504db",
      "created_at": "2019-10-10T15:11:09Z"
    },
    {
      "event": "referenced",
      "id": 2703118683,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3MDMxMTg2ODM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2703118683",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "1831faea1fbc98509c5b325efb2573f58a736928",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/1831faea1fbc98509c5b325efb2573f58a736928",
      "created_at": "2019-10-10T15:11:09Z"
    },
    {
      "event": "referenced",
      "id": 2703118685,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3MDMxMTg2ODU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2703118685",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "2382133e9067c5c564363b77d80ea22f92c62423",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/2382133e9067c5c564363b77d80ea22f92c62423",
      "created_at": "2019-10-10T15:11:10Z"
    },
    {
      "event": "referenced",
      "id": 2703118686,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3MDMxMTg2ODY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2703118686",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "f887adad00daf4b4f73a46050e484b37a7f46af6",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/f887adad00daf4b4f73a46050e484b37a7f46af6",
      "created_at": "2019-10-10T15:11:10Z"
    },
    {
      "event": "referenced",
      "id": 2703118689,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3MDMxMTg2ODk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2703118689",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "f3b11c61e74f5f6bd12f417d3f50a5f98472b348",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/f3b11c61e74f5f6bd12f417d3f50a5f98472b348",
      "created_at": "2019-10-10T15:11:10Z"
    },
    {
      "event": "referenced",
      "id": 2703118691,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3MDMxMTg2OTE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2703118691",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "d18e2cd8642a6b4e73be0482ef19f76698f1ef62",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/d18e2cd8642a6b4e73be0482ef19f76698f1ef62",
      "created_at": "2019-10-10T15:11:10Z"
    },
    {
      "event": "commented",
      "id": 540634442,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU0MDYzNDQ0Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/540634442",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-10T15:13:09Z",
      "updated_at": "2019-10-12T14:43:13Z",
      "author_association": "MEMBER",
      "body": "[Edited 10/12: [Removed ACK](https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-541330425)]\r\n\r\n~Code review ACK 39bd4db227d8c771502184389db97f9d7e7ac3c0~. Only change since last review was removing HasEncryptedData.\r\n\r\nI also updated my branch. If any other reviewers struggling with this PR, I'd encourage them to use it to see a breakdown of changes in the main PR:\r\n\r\n| [`pr/keyman`](https://github.com/ryanofsky/bitcoin/commits/pr/keyman) | |\r\n| --- | --- |\r\n| 3d38bf3d0c620755ff9ce9a53eb161e2d5ffd055 MOVEONLY: Move key handling code out of wallet to keyman file | +24&nbsp;-6&nbsp;⇔1375 |\r\n| c80a4c7787ec84873e90a101cb4e5a99e4d797f0 Refactor: Split up CWallet and LegacyScriptPubKeyMan and classes | +590&nbsp;-350&nbsp;⇔296 |\r\n| 1529a4bc58035c3f1768830a4a7376086c93b9c6 MOVEONLY: Reorder LegacyScriptPubKeyMan methods | +4&nbsp;-5&nbsp;⇔87 |\r\n| fdc32d358c38e8719f1249d42ab8f2f77d4ce270 Refactor: Declare LegacyScriptPubKeyMan methods as virtual | +21&nbsp;-6&nbsp;⇔1 |\r\n| b4a321dd967124c9c52f68ae4b3e40a1f7861606 Refactor: Add new ScriptPubKeyMan virtual methods | +46&nbsp;-8&nbsp;⇔0 |\r\n| 46fe6e240acfe947ee8100ac9cdfcf9e6234a3ea Refactor: Move SetAddressBook call out of LegacyScriptPubKeyMan::GetNewDestination | +7&nbsp;-4&nbsp;⇔2 |\r\n| 5982116cd8db96e05782ecc5f7825cfd9ec04498 Refactor: Move SetWalletFlag out of LegacyScriptPubKeyMan::UpgradeKeyMetadata | +2&nbsp;-2&nbsp;⇔0 |\r\n| 9b121c57197d96ffdf79740b2b703b2aa89e53f2 Refactor: Remove UnsetWalletFlag call from LegacyScriptPubKeyMan::SetHDSeed | +2&nbsp;-1&nbsp;⇔0 |\r\n| f7d1a7d50b78671e48f269030739d46ed75656d9 Refactor: Move SetAddressBookWithDB call out of LegacyScriptPubKeyMan::ImportScriptPubKeys | +6&nbsp;-4&nbsp;⇔5 |\r\n| 01dd97cb9f15f2ea8d86f86a4bf4be4a39972bbe Refactor: Move LoadKey LegacyScriptPubKeyMan method definition | +6&nbsp;-1&nbsp;⇔0 |\r\n| dda6d03e4969e6b2a71b7f38c602d900c6faca49 Refactor: Move GetMetadata code out of getaddressinfo | +21&nbsp;-8&nbsp;⇔5 |\r\n| 00ee9e9467c66a634700bc134f21d83eb429354b Refactor: Move MarkUnusedAddresses code out of CWallet::AddToWalletIfInvolvingMe | +12&nbsp;-5&nbsp;⇔14 |\r\n| 80b3a0763f643af7d9c9be5ce6b8d6bd3c42938f Refactor: Move Upgrade code out of CWallet::CreateWalletFromFile | +24&nbsp;-12&nbsp;⇔20 |\r\n| f733cbc54693d1a1efffbe0613d53d606c2464ad Refactor: Move HavePrivateKeys code out of CWallet::CreateWalletFromFile | +13&nbsp;-2&nbsp;⇔0 |\r\n| 0d5f789e6fc249dba4125e3d22a7c365b3440789 Refactor: Move SetupGeneration code out of CWallet | +22&nbsp;-11&nbsp;⇔12 |\r\n| 993d1f1a63d0cd837aab06a7dcb03272b5b02f03 Refactor: Move RewriteDB code out of CWallet | +20&nbsp;-4&nbsp;⇔5 |\r\n| 20b68aefd252c4273ea82d672ae1459274c3e48e Refactor: Move GetKeypoolSize code out of CWallet | +12&nbsp;-3&nbsp;⇔8 |\r\n| ee77be668f61a9703e22d15cc14f60e68fb2b4e4 Refactor: Move nTimeFirstKey accesses out of CWallet | +16&nbsp;-3&nbsp;⇔0 |\r\n| c6bb1b333e5ceccfef6bcc6258ceb821c7d1e11f Refactor: Move encryption code between KeyMan and Wallet | +55&nbsp;-49&nbsp;⇔19 |\r\n| 54584860885425efdba2ff65e3463b63a665c732 Locking: Lock cs_KeyStore instead of cs_main in legacy keyman | +55&nbsp;-73&nbsp;⇔37 |\r\n| b6eae875d35dd678465ae75afc5eb0bef4524f54 Refactor: Allow LegacyScriptPubKeyMan to be null | +72&nbsp;-28&nbsp;⇔0 |\r\n| f0d7bf12681c67d65949192023527bd22a81a38c Refactor: Require scriptPubKey to get wallet SigningProvider | +101&nbsp;-24&nbsp;⇔0 |\r\n| bd7c03d4957344c801f9f78a88e058d37e61924a Key pool: Move CanGetAddresses call | +2&nbsp;-1&nbsp;⇔2 |\r\n| 9193af03599c250c2290a3e66973d4956d83bd0a Key pool: Move LearnRelated and GetDestination calls | +9&nbsp;-8&nbsp;⇔0 |\r\n| db94ae7b384299c76832d55d29e118abeda504db Key pool: Move TopUp call | +0&nbsp;-1&nbsp;⇔1 |\r\n| 11ddab8aac81337e548e3fcb94f8ee175326a465 Key pool: Change ReturnDestination interface to take address instead of key | +12&nbsp;-14&nbsp;⇔0 |\r\n| b8ecc970ea4095aa6764847b70385c38d0cab7e8 Key pool: Make TopUp fail if unexpected wallet flags are set | +3&nbsp;-0&nbsp;⇔0 |\r\n| 1831faea1fbc98509c5b325efb2573f58a736928 Key pool: Fix omitted pre-split count in GetKeyPoolSize | +1&nbsp;-1&nbsp;⇔0 |\r\n| 7a6d930c21520e165fb0fed803e7b7131fab5f93 IsMine: Set state to WATCH_ONLY if we can get the pubkey | +6&nbsp;-2&nbsp;⇔0 |\r\n| 2382133e9067c5c564363b77d80ea22f92c62423 HD Split: Avoid redundant upgrades | +1&nbsp;-1&nbsp;⇔0 |\r\n| 01e94deafbe11dde66589e385a2933260f8feec4 Box the wallet: Add multiple keyman maps and loops | +159&nbsp;-44&nbsp;⇔22 |\r\n| 268bcd400439ba35c8ffeff5b4b8fa5de8f53ed7 Refactor: Copy CWallet signals and print function to LegacyScriptPubKeyMan | +22&nbsp;-16&nbsp;⇔6 |\r\n| 8ec2f6fabe72ef0f869fb1b93b722fd33d5dab8a Cleanup: Update message strings and comments | +4&nbsp;-5&nbsp;⇔3 |\r\n| aee3a1e9dda36a5d98bc6850037dc48c10fc0e96 Cleanup: Drop unused GUI learnRelatedScripts method | +0&nbsp;-5&nbsp;⇔0 |\r\n| f887adad00daf4b4f73a46050e484b37a7f46af6 Refactor: Replace SigningProvider pointers with unique_ptrs | +45&nbsp;-29&nbsp;⇔0 |\r\n| f3b11c61e74f5f6bd12f417d3f50a5f98472b348 Refactor: Add storage wrapper functions | +49&nbsp;-38&nbsp;⇔0 |\r\n| d18e2cd8642a6b4e73be0482ef19f76698f1ef62 Refactor: Make WalletDatabase a shared_ptr instead of a unique_ptr | +28&nbsp;-24&nbsp;⇔0 |",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-540634442",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16341"
    },
    {
      "event": "commented",
      "id": 540695975,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU0MDY5NTk3NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/540695975",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-10T17:44:40Z",
      "updated_at": "2019-10-10T17:44:40Z",
      "author_association": "MEMBER",
      "body": "I tested 39bd4db227d8c771502184389db97f9d7e7ac3c0 with the follow descriptor wallet PR.\r\n\r\nAre you sure your last change handles non-HD wallets correctly? IIUC `mapCryptedKeys` is non-empty, but `mapMasterKeys` is, so `HasEncryptionKeys()` will return `false`. I tested with an encrypted `-usehd=0` wallet from `v0.15.2` and can't find any problems though. ",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-540695975",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16341"
    },
    {
      "event": "commented",
      "id": 540696659,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU0MDY5NjY1OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/540696659",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-10T17:46:32Z",
      "updated_at": "2019-10-10T17:46:32Z",
      "author_association": "MEMBER",
      "body": "> I tested [39bd4db](https://github.com/bitcoin/bitcoin/commit/39bd4db227d8c771502184389db97f9d7e7ac3c0) with the follow descriptor wallet PR.\r\n> \r\n> Are you sure your last change handles non-HD wallets correctly? IIUC `mapCryptedKeys` is non-empty, but `mapMasterKeys` is, so `HasEncryptionKeys()` will return `false`. I tested with an encrypted `-usehd=0` wallet from `v0.15.2` and can't find any problems though.\r\n\r\nHuh? Encryption has nothing to do with HD wallets. `mapMasterKeys` is named poorly and refers to encryption keys, not HD master keys. We don't even use HD master keys, we an HD seed which then becomes a master key for key derivation.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-540696659",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16341"
    },
    {
      "event": "commented",
      "id": 540707995,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU0MDcwNzk5NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/540707995",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-10T18:14:57Z",
      "updated_at": "2019-10-11T08:21:29Z",
      "author_association": "MEMBER",
      "body": "Ah yes, it's the master encryption key map (`typedef std::map<unsigned int, CMasterKey> MasterKeyMap`), not the master hd key (`CHDChain`).\r\n\r\nACK  39bd4db. I like that with @ryanofsky's alternative history we now have a DAG :-) If you can link to it in the PR description, then it should be preserved.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-540707995",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16341"
    },
    {
      "event": "mentioned",
      "id": 2705333263,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjcwNTMzMzI2Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2705333263",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-11T08:21:29Z"
    },
    {
      "event": "subscribed",
      "id": 2705333264,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI3MDUzMzMyNjQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2705333264",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-11T08:21:29Z"
    },
    {
      "event": "reviewed",
      "id": 300911895,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzAwOTExODk1",
      "url": null,
      "actor": null,
      "commit_id": "39bd4db227d8c771502184389db97f9d7e7ac3c0",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "A few clarifying questions and some non-blocking nits, while I go look at descriptor wallet PR...\r\n\r\n\"WalletStorage\" is the new thing for me.\r\n\r\nre-reviewed all the way to https://github.com/bitcoin/bitcoin/commit/39bd4db227d8c771502184389db97f9d7e7ac3c0",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#pullrequestreview-300911895",
      "submitted_at": "2019-10-11T21:09:03Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
    },
    {
      "event": "commented",
      "id": 541231331,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU0MTIzMTMzMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/541231331",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-11T21:32:23Z",
      "updated_at": "2019-10-11T21:32:23Z",
      "author_association": "MEMBER",
      "body": "utACK https://github.com/bitcoin/bitcoin/commit/39bd4db227d8c771502184389db97f9d7e7ac3c0\r\n\r\ncontingent on expanded explanation of role of `WalletStorage` between the various concepts",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-541231331",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16341"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2707514877,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjcwNzUxNDg3Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2707514877",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-11T21:47:45Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2707722216,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjcwNzcyMjIxNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2707722216",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-12T00:43:42Z"
    },
    {
      "event": "commented",
      "id": 541265050,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU0MTI2NTA1MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/541265050",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-12T00:44:11Z",
      "updated_at": "2019-10-12T00:44:11Z",
      "author_association": "MEMBER",
      "body": "There was a hidden merge conflict with master, so I had to rebase this. resolving that conflict required changing the `WatchOnlyPubKeys` test case in the wallet tests to use `LegacyScriptPubKeyMan`,",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-541265050",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16341"
    },
    {
      "event": "reviewed",
      "id": 301003088,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzAxMDAzMDg4",
      "url": null,
      "actor": null,
      "commit_id": "e418a29df300fc2d33ac333b00579f577d2bdf5c",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#pullrequestreview-301003088",
      "submitted_at": "2019-10-12T12:22:57Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
    },
    {
      "event": "commented",
      "id": 541330425,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU0MTMzMDQyNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/541330425",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-12T14:35:47Z",
      "updated_at": "2019-10-12T14:35:47Z",
      "author_association": "MEMBER",
      "body": "Apologies to @achow101 because the work here is great and very promising, but I want to remove my ACK from this PR. With Sjors and Instagibbs ACKs coming so quickly after mine, it seems possible my review might be being given more weight than it warrants, and I want to avoid this possibility.\r\n\r\nNormally when I ACK something I want to at least be able to say \"I'd be surprised if this PR introduced a bug\", but with [all the changes broken out](https://github.com/ryanofsky/bitcoin/commits/pr/keyman), and several I haven't deeply looked into, I might be more surprised if this PR didn't introduce any bugs than if it did.\r\n\r\nI think it'd be fine to merge this PR with reviews and ACKs from other people. And personally I'd feel comfortable adding my ACK to smaller, more broken down PRs. But just given size of this PR, the time I've spent on it, and my level of understanding, I don't think my review should count for that much and I want to make sure this change gets in depth review and more confident ACKs from other people if it will be merged.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-541330425",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16341"
    },
    {
      "event": "mentioned",
      "id": 2708116319,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjcwODExNjMxOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2708116319",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-12T14:35:47Z"
    },
    {
      "event": "subscribed",
      "id": 2708116320,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI3MDgxMTYzMjA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2708116320",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-12T14:35:47Z"
    },
    {
      "event": "commented",
      "id": 541332138,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU0MTMzMjEzOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/541332138",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-12T14:56:21Z",
      "updated_at": "2019-10-12T15:18:48Z",
      "author_association": "MEMBER",
      "body": "@ryanofsky note that my ACK was mostly based on my own previous review (i.e. @achow101's commits). I used your variant to sanity check. But I agree this PR needs more people looking at it. Lots of moving parts. More tests would also be useful, because a lot of things can be changed without breaking any.\r\n\r\n@meshcollider mentioned on IRC he's also in the process of reviewing. \r\n\r\nConfirming that e418a29 is a rebase of my previous ACK, but I haven't re-tested it. It takes into account the new bech32 default, the new watch-only tests added in #16786 and adds a bunch of comments.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-541332138",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16341"
    },
    {
      "event": "mentioned",
      "id": 2708126586,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjcwODEyNjU4Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2708126586",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-12T14:56:21Z"
    },
    {
      "event": "subscribed",
      "id": 2708126589,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI3MDgxMjY1ODk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2708126589",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-12T14:56:21Z"
    },
    {
      "event": "mentioned",
      "id": 2708126832,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjcwODEyNjgzMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2708126832",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-12T14:56:44Z"
    },
    {
      "event": "subscribed",
      "id": 2708126833,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI3MDgxMjY4MzM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2708126833",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-12T14:56:44Z"
    },
    {
      "event": "mentioned",
      "id": 2708138844,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjcwODEzODg0NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2708138844",
      "actor": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-12T15:18:48Z"
    },
    {
      "event": "subscribed",
      "id": 2708138845,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI3MDgxMzg4NDU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2708138845",
      "actor": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-12T15:18:48Z"
    },
    {
      "event": "commented",
      "id": 541334524,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU0MTMzNDUyNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/541334524",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-12T15:22:50Z",
      "updated_at": "2019-10-12T15:22:50Z",
      "author_association": "MEMBER",
      "body": "There were only a couple significant changes since my last ACK. I only\nreviewed after Russel because I didn't feel like reviewing 60 different\nversions  I do agree it needs more ACKs than typical due to size of\nchanges.\n\nOn Sat, Oct 12, 2019, 10:59 AM Sjors Provoost <notifications@github.com>\nwrote:\n\n> @ryanofsky <https://github.com/ryanofsky> note that my ACK was mostly\n> based on my own previous review. I used your variant to sanity check. But I\n> agree this PR needs more people looking at it. Lots of moving parts.\n>\n> —\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/bitcoin/bitcoin/pull/16341?email_source=notifications&email_token=ABMAFUZLFL666DUPQUPBF3LQOHQ43A5CNFSM4H6EPYF2YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOEBCBFKQ#issuecomment-541332138>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/ABMAFU3XNAG7XFM7NJ3ZLTDQOHQ43ANCNFSM4H6EPYFQ>\n> .\n>\n",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-541334524",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16341"
    },
    {
      "event": "mentioned",
      "id": 2708141001,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjcwODE0MTAwMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2708141001",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-12T15:22:50Z"
    },
    {
      "event": "subscribed",
      "id": 2708141002,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI3MDgxNDEwMDI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2708141002",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-12T15:22:50Z"
    },
    {
      "event": "referenced",
      "id": 2715245278,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3MTUyNDUyNzg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2715245278",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "e425848214952e8cce8c9bbb54758244bf5daf38",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/e425848214952e8cce8c9bbb54758244bf5daf38",
      "created_at": "2019-10-15T19:52:14Z"
    },
    {
      "event": "referenced",
      "id": 2715245284,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3MTUyNDUyODQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2715245284",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "e27c8409b6ea0d65d8f0859cd9b26faa66fb3248",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/e27c8409b6ea0d65d8f0859cd9b26faa66fb3248",
      "created_at": "2019-10-15T19:52:14Z"
    },
    {
      "event": "referenced",
      "id": 2715245289,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3MTUyNDUyODk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2715245289",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "6ff45aaaa60251be6977f49ce6d9e366d4c0f646",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/6ff45aaaa60251be6977f49ce6d9e366d4c0f646",
      "created_at": "2019-10-15T19:52:14Z"
    },
    {
      "event": "referenced",
      "id": 2715245293,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3MTUyNDUyOTM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2715245293",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "efff76918ac61f6a7bf25c8593bdf3dd62f7d29e",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/efff76918ac61f6a7bf25c8593bdf3dd62f7d29e",
      "created_at": "2019-10-15T19:52:15Z"
    },
    {
      "event": "referenced",
      "id": 2715245295,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3MTUyNDUyOTU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2715245295",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "34a2abc2b0e2b269619e8e230c27272f37926dc0",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/34a2abc2b0e2b269619e8e230c27272f37926dc0",
      "created_at": "2019-10-15T19:52:15Z"
    },
    {
      "event": "referenced",
      "id": 2715245298,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3MTUyNDUyOTg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2715245298",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "362484c7d1fc044b15cf0e55048a2d00d5d77c77",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/362484c7d1fc044b15cf0e55048a2d00d5d77c77",
      "created_at": "2019-10-15T19:52:15Z"
    },
    {
      "event": "referenced",
      "id": 2715245299,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3MTUyNDUyOTk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2715245299",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "d5dd89fdc288f6f73bf8ec19eed6da02ff653735",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/d5dd89fdc288f6f73bf8ec19eed6da02ff653735",
      "created_at": "2019-10-15T19:52:15Z"
    },
    {
      "event": "labeled",
      "id": 2719342019,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDI3MTkzNDIwMTk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2719342019",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-16T22:38:21Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 302359468,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzAyMzU5NDY4",
      "url": null,
      "actor": null,
      "commit_id": "e3efac92393d6c366c0a6be7561eb2a3c54855e0",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Sorry for not doing this sooner, I've finally finished reviewing it. Awesome work Andrew. ACK e418a29df300fc2d33ac333b00579f577d2bdf5c without building GUI\r\n\r\n- [X] 3dc782fb556b9e65b9c35977c1bc8bd94cee671f Move wallet enums to walletutil.h\r\n- [X] 223882da23084a8206415b0b2a238c618654a718 List output types in an array in order to be iterated over\r\n- [X] 4e0b7dd5946a10d4b809702104c9f5486800b3f5 Always try to sign for all pubkeys in multisig\r\n- [X] 0e83a5d43fe95be7bcf251791cbef015c751b85e Store p2sh scripts in AddAndGetDestinationForScript\r\n- [X] a9f852f494b1c6f72333aa15770b3e119080e578 Introduce both ScriptPubKeyMan as an interface and LegacyScriptPubKeyMan as a dummy class\r\n- [X] e3efac92393d6c366c0a6be7561eb2a3c54855e0 Add LegacyScriptPubKeyMan to CWallet\r\n- [X] d89011ffca9144ddd28e53177d5e722fadaf2164 Add WalletStorage class and have CWallet inherit it\r\n- [X] 790f8398db115d53e521aeed4cde3b192a0c3a14 Fetch the SigningProvider for a script from the wallet\r\n- [X] dc0611244f18a4cac814f29f2951e46e43a89bba Fetch the ScriptPubKeyMan for given output type and internal-ness, or a given script, or ScriptPubKeyMan id\r\n- [X] 274340f8234a124612fdd9d7100cc8d3a8191184 Implement GetSigningProvider in LegacyScriptPubKeyMan\r\n- [X] b79da31e8c4f2920a28c297d4554df7564cdcee9 Implement function to connect ScriptPubKeyMan's NotifyCanGetAddessesChanged and NotifyWatchOnlyChanged to CWallet's\r\n- [X] da1a68fb28b1c85cbbf1981f71f316901222de22 Implement HasEncryptedData, SetCrypted, LoadCryptedKey, and AddCryptedKey in LegacyScriptPubKeyMan\r\n- [X] 713cf419d51837ca17a44bc16069a9b43ec93c04 Implement UpdateTimeFirstKey, and GetTimeFirstKey in LegacyScriptPubKeyMan\r\n- [X] e7254f0f2e02f764ce5fe26ff35be1499a441bfb Implement AddWatchOnly, RemoveWatchOnly, HaveWatchOnly, and LoadWatchOnly in LegacyScriptPubKeyMan\r\n- [X] dd59ea1c78848766f0166c251ce83ae8d6d3eabf Implement AddKeyPubKey and LoadKey in LegacyScriptPubKeyMan\r\n- [X] 5343a9f0273b25fdd8d236d31b78aa039216bbf4 Implement WalletLogPrintf in LegacyScriptPubKeyMan\r\n- [X] ab9d81eaecfbd02e0af8c8582094dd6bcefdf48a Implement SetHDCHain, and IsHDEnabled in LegacyScriptPubKeyMan\r\n- [X] fc136aab3366e5a41304e54526b59f144deaa2b2 Implement LoadCScript in LegacyScriptPubKeyMan\r\n- [X] 0e71f718133b2e0bf7a7965692c6433bb328b229 Implement LoadKeyMetadata and LoadScriptMetadata in LegacyScriptPubKeyMan\r\n- [X] fe1ebe542c3d8f8e44c86f6fdc0aa0d4c54a544d Implement GetKey, HaveKey, and GetPubKey in LegacyScriptPubKeyMan\r\n- [X] ff90cccd99705a1d1f163fa99f7b3b314ad42695 Implement GenerateNewKey in LegacyScriptPubKeyMan\r\n- [X] 1fedc29d7e4c8828939d3c71da3750f12ef7e0c4 Implement LoadKeyPool in LegacyScriptPubKeyMan\r\n- [X] e22f2616be40eeb9b554e8dc44bb650d6dea30a4 Implement GetOldestKeyPoolTime, KeypoolCountExternalKeys, and GetKeypoolSize in LegacyScriptPubKeyMan\r\n- [X] d7eb32b58abdb782b2b770eab25e83806915deff Implement CanGetAddresses, CanGenerateKeys, and HavePrivateKeys in LegacyScriptPubKeyMan\r\n- [X] d9e9ae8fffc51accaa7c8ac59bf2732d81f8cde4 Implement GenerateNewSeed, DeriveNewSeed, and SetHDSeed for LegacyScriptPubKeyMan\r\n- [X] c836a6cad69dc54b0c4a5f2cf3b0de9b249fa8ad Implement TopUpKeypool, TopUp, and NewKeyPool in LegacyScriptPubKeyMan\r\n- [X] a25d83f4c2abb5d58c64b3ee5ba5be6df04cf381 Implement ReturnAddress, and KeepKey in LegacyScriptPubKeyMan\r\n- [X] e99778c18ceb0809e4a68ea5688e6c26aba14294 Implement GetNewAddress, and GetReservedAddress in LegacyScriptPubKeyMan\r\n- [X] 23ea5cfafd01f202573d6915c4b901caf8fa160d Implement MarkUnusedAddresses in LegacyScriptPubKeyMan\r\n- [X] bf80f299b8544a4330b5b468495e71ecfd7b44e9 Implement IsMine in LegacyScriptPubKeyMan\r\n- [X] c2bdabae3e98b3a7e1b2795f66a202fc5c0b60cc Implement UpgradeKeyMetaData, SetupGeneration, IsFirstRun, Upgrade, RewriteDB in LegacyScriptPubKeyMan\r\n- [X] c5895f35a998664141beda2f0c4a58a3969f954e Implement Unlock, Lock, and Encrypt and LegacyScriptPubKeyMan\r\n- [X] 9c4ba789aa6a671045ebf37d7b566a147bf6ac09 Implement ImporScripts, ImportPrivKeys, ImportPubKeys, and ImportScriptPubKeys in LegacyScriptPubKeyMan\r\n- [X] e2c664d2e6d3739256a9706958c26cedef978c4e Implement GetMetadata in LegacyScriptPubKeyMan\r\n- [X] 0b8af682533d0e766ea7e6b951c6217a557e6af8 Implement GetKeyOrigin in LegacyScriptPubKeyMan\r\n- [X] 8972801f344fc2366987bfd8668a06dd56546061 Implement actually loading everything into LegacyScriptPubKeyMan\r\n- [X] fb60065c64617ff1ec3914ffd9de31c8e2af02c7 Implement CanProvide in LegacyScriptPubKeyMan\r\n- [X] b77a6774fe690cf51f660bcc40b85cbdfe4e4464 Implement GetKeys in LegacyScriptPubKeyMan\r\n- [X] 81bcdc126ac73dccd077e1ce9fec6278ddea3128 [ci skip] Remove CWallet from IsMine and have CWallet always use ScriptPubKeyMan's IsMine\r\n- [X] 5293b57fd5bbcb114f2ddda5630fa5bd21dfbb59 [ci skip] moveonly: move ismine stuff to be a module of LegacyScriptPubKeyMan\r\n- [X] 4821f3b52c702ba06ae6ef626e8eb2ab1792ec7b [ci skip] IsMine set state to WATCH_ONLY if we can get the pubkey\r\n- [X] 404f182bda8977f9abc573584acdce81e6fb219c [ci skip] Have GetNewAddress, GetNewChangeAddress, and ReserveAddress use ScriptPubKeyMan\r\n- [X] 890db7a782e598bdfc75b0fa9768f9be7442a28a [ci skip] Mark used addresses in ScriptPubKeyMan\r\n- [X] 458c2449fc1d113afe3694b7a3eb37a2b9b2e9bc [ci skip] Call UpgradeKeyMetaData for each ScriptPubKeyMan\r\n- [X] fa5f552cbee969c8d86a5239e9e8d65ddefb764c [ci skip] Sign using SigningProvider from ScriptPubKeyMan when signing within CWallet\r\n- [X] 6c5b3187aac3a033e512979009145436feaa1823 [ci skip] Do not allow import*, dump*, and addmultisigaddress RPCs when wallet is not backed by LegacyScriptPubKeyMan\r\n- [X] 1ba7d942f45eb1997f0e036acff2b85351ff8e29 [ci skip] Change Imports to use LegacyScriptPubKeyMan Imports\r\n- [X] f853ad2af5ad2fad9a54fa37c7ae0d8846a5cf6f [ci skip] Use SigningProviders and ScriptPubKeyMans in listunspent, signmessage, signrawtransactionwithwallet, and getaddressinfo\r\n- [X] f44fe2573459a32106a5af7e1edbad8e90365a28 [ci skip] Use LegacyScriptPubKeyMan in addmultisigaddress and sethdseed\r\n- [X] 4791b5e33df28a593f0e47d4983fd56f5dbe938f [ci skip] Use LegacyScriptPubKeyMan for hdseedid in getwalletinfo\r\n- [X] ba2740be33f77fc6ad02a9069032117fa8e89efa [ci skip] Change KeypoolCountExternal and GetKeypoolSize to get aggregate sizes from ScriptPubKeyMans\r\n- [X] de8036ecde165b32df2671db0fa0fbb2339d6e19 [ci skip] Have IsHDEnabled fetch from ScriptPubKeyMans\r\n- [X] 22e10490b3eb51096d47f98b1aee5fa2143bf559 [ci skip] Fetch oldest keypool time from ScriptPubKeyMans\r\n- [X] 83748acf031436dceb3c0eeb60c65a2aadb05592 [ci skip] have TopUpKeyPool call TopUp in each ScriptPubKeyMan\r\n- [X] 02b7221e42d9a081d21aab6b03d1ebdbdc1bdcd6 [ci skip] Have EncryptWallet, Lock, and Unlock call their respective functions in ScriptPubKeyMans\r\n- [X] cb719eb88af5c88579c7ad8faa3d83fbf26d6e5c [ci skip] Use LegacyScriptPubKeyMan throughout psbt_wallet_tests\r\n- [X] f493b0a12343385da5ea5e29a934be740819bd86 [ci skip] Use LegacyScriptPubKeyMan throughout wallettool\r\n- [X] f9144d83d97ea6f1207d080662f504c63f9d9408 [ci skip] Use ScriptPubKeyMans' Setup and Upgrade functions when loading or creating a wallet\r\n- [X] 018a77ab490923c433563ca3552ea13147a85f3d [ci skip] Define first run as having no ScriptPubKeyMans\r\n- [X] f43d480b24076a763f61689159e42da801fe43a3 [ci skip] Use RewriteDB action when DB needs rewrite\r\n- [X] 2d108185054a45f68230d8e641df15a9a12bce3a [ci skip] Use GetTimeFirstKey instead of nTimeFirstKey\r\n- [X] 208dd51e4b8e0abd062d21ccc12e57a3d4289b41 [ci skip] Use LegacyScriptPubKeyMan for in wallet_tests\r\n- [X] ccd70050f970c099a6d7fd6cdbc9d1ecde82f426 [ci skip] Use LegacyScriptPubKeyMan in dumpprivkey and dumpwallet\r\n- [X] 7bfed77bbe6b09aded26a053b5e7651cc1b86bcd [ci skip] Change CanGetAddresses to fetch from ScriptPubKeyMan\r\n- [X] 0e5177d2c85a34b4e8596a20bc0e21927e027bac [ci skip] Fetch the correct SigningProvider for signing PSBTs\r\n- [X] 312d3610b0bd0a7ef812ace9e30cb9c9e9d000a1 [ci skip] Use LegacyScriptPubKeyMan in test util\r\n- [X] ac65f820104f3c6973a1718a07f1003dcf2d8793 [ci skip] Use LegacyScriptPubKeyMan in some parts of getbalances and createwallet\r\n- [X] 0442e54abf075b7bf9bb3a7522406085e2253f1e [ci skip] Have getPubKey and getPrivKey use SigningProvider\r\n- [X] 6622ca6dbde936ad1436afe404165870412bcace [ci skip] Use LegacyScriptPubKeyMan in benchmarks involving the wallet\r\n- [X] e418a29df300fc2d33ac333b00579f577d2bdf5c Remove unused functions and switch CWallet to use ScriptPubKeyMan\r\n\r\nWith reviews from instagibbs, Sjors, ryanofsky and myself, I think this is fairly ready to merge. I know promag said on IRC that he is currently reviewing it too so I will wait for him.\r\nA review from @jnewbery or @sipa would be awesome but this is a large PR so understandable if they don't have the time at the moment.\r\nWith 0.19 only just branched off I think its good to merge this soon, with plenty of time before 0.20, so that bugs can be found and squashed long before the next release.",
      "user": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#pullrequestreview-302359468",
      "submitted_at": "2019-10-17T04:11:58Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2719866317,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjcxOTg2NjMxNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2719866317",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-17T04:43:57Z"
    },
    {
      "event": "unlabeled",
      "id": 2719872553,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MjcxOTg3MjU1Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2719872553",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-17T04:48:10Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2719898795,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjcxOTg5ODc5NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2719898795",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-17T05:06:32Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2719966031,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjcxOTk2NjAzMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2719966031",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-17T05:49:18Z"
    },
    {
      "event": "commented",
      "id": 543014459,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU0MzAxNDQ1OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/543014459",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-17T05:50:32Z",
      "updated_at": "2019-10-17T05:50:32Z",
      "author_association": "MEMBER",
      "body": "Latest push adds `#include <functional>` to `util/translation.h` as it was causing some travis builds to fail for some reason.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-543014459",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16341"
    },
    {
      "event": "labeled",
      "id": 2728051385,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDI3MjgwNTEzODU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2728051385",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-21T01:12:42Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNDRhMWY0MjAyZDRlMWQ3NDg5MTBhYzFkYmEwZjhlYjYwNDdkZWM4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f44a1f4202d4e1d748910ac1dba0f8eb6047dec8",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f44a1f4202d4e1d748910ac1dba0f8eb6047dec8",
      "tree": {
        "sha": "3090d547ac0e9b8b2de3167fe24b6b4cc8edff6e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3090d547ac0e9b8b2de3167fe24b6b4cc8edff6e"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a22b62481aae95747830bd3c0db3227860b12d8e",
          "sha": "a22b62481aae95747830bd3c0db3227860b12d8e",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/a22b62481aae95747830bd3c0db3227860b12d8e"
        }
      ],
      "message": "Move wallet enums to walletutil.h",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-20T21:34:33Z"
      },
      "sha": "f44a1f4202d4e1d748910ac1dba0f8eb6047dec8"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYTVmYjAxMzVkYjMwMmFmMTAxNjI0MDI2MWJhODQ2ZWE5MDZiODYy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3a5fb0135db302af1016240261ba846ea906b862",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/3a5fb0135db302af1016240261ba846ea906b862",
      "tree": {
        "sha": "3161408c00784a2586142b9c93d4ac2ece0714da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3161408c00784a2586142b9c93d4ac2ece0714da"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f44a1f4202d4e1d748910ac1dba0f8eb6047dec8",
          "sha": "f44a1f4202d4e1d748910ac1dba0f8eb6047dec8",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f44a1f4202d4e1d748910ac1dba0f8eb6047dec8"
        }
      ],
      "message": "List output types in an array in order to be iterated over",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T18:53:27Z"
      },
      "sha": "3a5fb0135db302af1016240261ba846ea906b862"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNmVhZjllNzM5OWQ5MDk3YWE3ZmJkZjNkNzk5MDU3NjVlZTNmZGI0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/36eaf9e7399d9097aa7fbdf3d79905765ee3fdb4",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/36eaf9e7399d9097aa7fbdf3d79905765ee3fdb4",
      "tree": {
        "sha": "5efcb316a2b14f0ff69951cd9e3a5bb675d41682",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5efcb316a2b14f0ff69951cd9e3a5bb675d41682"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3a5fb0135db302af1016240261ba846ea906b862",
          "sha": "3a5fb0135db302af1016240261ba846ea906b862",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/3a5fb0135db302af1016240261ba846ea906b862"
        }
      ],
      "message": "Always try to sign for all pubkeys in multisig",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-03T20:58:28Z"
      },
      "sha": "36eaf9e7399d9097aa7fbdf3d79905765ee3fdb4"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2Nzg5MWFlN2YzNDVjMTg4OWFkMmFhZGY5YTIxNTI2MzNlNzFmODFh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/67891ae7f345c1889ad2aadf9a2152633e71f81a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/67891ae7f345c1889ad2aadf9a2152633e71f81a",
      "tree": {
        "sha": "bb12b2242eb8a060999833da5db61f09a39682b4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bb12b2242eb8a060999833da5db61f09a39682b4"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/36eaf9e7399d9097aa7fbdf3d79905765ee3fdb4",
          "sha": "36eaf9e7399d9097aa7fbdf3d79905765ee3fdb4",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/36eaf9e7399d9097aa7fbdf3d79905765ee3fdb4"
        }
      ],
      "message": "Store p2sh scripts in AddAndGetDestinationForScript",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-02T20:21:50Z"
      },
      "sha": "67891ae7f345c1889ad2aadf9a2152633e71f81a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYjc2NDdhNmZjM2I0NGE2MmE2MDhjMmIyOGZiNTQ2YTM1ZDQ0NTg2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fb7647a6fc3b44a62a608c2b28fb546a35d44586",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/fb7647a6fc3b44a62a608c2b28fb546a35d44586",
      "tree": {
        "sha": "b80f30debe9da07b85a9d8cba28fc5a825d4cd68",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b80f30debe9da07b85a9d8cba28fc5a825d4cd68"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/67891ae7f345c1889ad2aadf9a2152633e71f81a",
          "sha": "67891ae7f345c1889ad2aadf9a2152633e71f81a",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/67891ae7f345c1889ad2aadf9a2152633e71f81a"
        }
      ],
      "message": "Introduce both ScriptPubKeyMan as an interface and LegacyScriptPubKeyMan as a dummy class",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-08T09:05:07Z"
      },
      "sha": "fb7647a6fc3b44a62a608c2b28fb546a35d44586"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0M2M0M2ZmNGQ0OTgzNDNmODQwODE5M2NmN2UwM2MyNjk3OWJhMmVk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/43c43ff4d498343f8408193cf7e03c26979ba2ed",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/43c43ff4d498343f8408193cf7e03c26979ba2ed",
      "tree": {
        "sha": "25f25f959cd34b2519d58582b199b578cb8e4191",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/25f25f959cd34b2519d58582b199b578cb8e4191"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fb7647a6fc3b44a62a608c2b28fb546a35d44586",
          "sha": "fb7647a6fc3b44a62a608c2b28fb546a35d44586",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/fb7647a6fc3b44a62a608c2b28fb546a35d44586"
        }
      ],
      "message": "Add LegacyScriptPubKeyMan to CWallet",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-18T17:56:07Z"
      },
      "sha": "43c43ff4d498343f8408193cf7e03c26979ba2ed"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMzYzZGUzNTVkMmZkYmQwMjA4ZDEzNDdmNjM3NmIwODNkZjA0Y2Zk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b363de355d2fdbd0208d1347f6376b083df04cfd",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/b363de355d2fdbd0208d1347f6376b083df04cfd",
      "tree": {
        "sha": "8ce14287185b0e5fcca795368376c9c252ae43dc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8ce14287185b0e5fcca795368376c9c252ae43dc"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/43c43ff4d498343f8408193cf7e03c26979ba2ed",
          "sha": "43c43ff4d498343f8408193cf7e03c26979ba2ed",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/43c43ff4d498343f8408193cf7e03c26979ba2ed"
        }
      ],
      "message": "Add WalletStorage class and have CWallet inherit it",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-09-13T20:23:31Z"
      },
      "sha": "b363de355d2fdbd0208d1347f6376b083df04cfd"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZTZiYWNkN2I1ZGRkOGMwNDFiNTBiMDU5N2YyMjQ4Yzg5NzZlYzg0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ee6bacd7b5ddd8c041b50b0597f2248c8976ec84",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ee6bacd7b5ddd8c041b50b0597f2248c8976ec84",
      "tree": {
        "sha": "81838fb9fd87d904d56ad9408404dff8174c4f4e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/81838fb9fd87d904d56ad9408404dff8174c4f4e"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b363de355d2fdbd0208d1347f6376b083df04cfd",
          "sha": "b363de355d2fdbd0208d1347f6376b083df04cfd",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/b363de355d2fdbd0208d1347f6376b083df04cfd"
        }
      ],
      "message": "Fetch the SigningProvider for a script from the wallet",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T19:54:11Z"
      },
      "sha": "ee6bacd7b5ddd8c041b50b0597f2248c8976ec84"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNDk1OGE0ZWU3MTc3MmFjYjM3M2M0NTUzODMwYzc0MDhiZDg0MTNj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f4958a4ee71772acb373c4553830c7408bd8413c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f4958a4ee71772acb373c4553830c7408bd8413c",
      "tree": {
        "sha": "92f75af22019331217d64aa2c013c208c0d59c2a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/92f75af22019331217d64aa2c013c208c0d59c2a"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ee6bacd7b5ddd8c041b50b0597f2248c8976ec84",
          "sha": "ee6bacd7b5ddd8c041b50b0597f2248c8976ec84",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ee6bacd7b5ddd8c041b50b0597f2248c8976ec84"
        }
      ],
      "message": "Fetch the ScriptPubKeyMan for given output type and internal-ness, or a given script, or ScriptPubKeyMan id\n\nCo-authored-by: Hugo Nguyen <hugh.hn@gmail.com>",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T20:55:40Z"
      },
      "sha": "f4958a4ee71772acb373c4553830c7408bd8413c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkODgzMWVlNWUwODQxMmM1MDJlZDAxYzM2NWU4NmZlMDQwZGI3Y2Qw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d8831ee5e08412c502ed01c365e86fe040db7cd0",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/d8831ee5e08412c502ed01c365e86fe040db7cd0",
      "tree": {
        "sha": "cd313e29784acdc8c340276c209b732908416bf8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cd313e29784acdc8c340276c209b732908416bf8"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f4958a4ee71772acb373c4553830c7408bd8413c",
          "sha": "f4958a4ee71772acb373c4553830c7408bd8413c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f4958a4ee71772acb373c4553830c7408bd8413c"
        }
      ],
      "message": "Implement GetSigningProvider in LegacyScriptPubKeyMan",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-17T16:52:24Z"
      },
      "sha": "d8831ee5e08412c502ed01c365e86fe040db7cd0"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNTU3YmI2NGE4ZWVkM2E1MjQ3NDgxZmNjNmJmN2NhMWZkZWIzZGMx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1557bb64a8eed3a5247481fcc6bf7ca1fdeb3dc1",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/1557bb64a8eed3a5247481fcc6bf7ca1fdeb3dc1",
      "tree": {
        "sha": "33028c9967b3aee9426508b45a768db91562751d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/33028c9967b3aee9426508b45a768db91562751d"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d8831ee5e08412c502ed01c365e86fe040db7cd0",
          "sha": "d8831ee5e08412c502ed01c365e86fe040db7cd0",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d8831ee5e08412c502ed01c365e86fe040db7cd0"
        }
      ],
      "message": "Implement function to connect ScriptPubKeyMan's NotifyCanGetAddessesChanged and NotifyWatchOnlyChanged to CWallet's",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-28T02:20:46Z"
      },
      "sha": "1557bb64a8eed3a5247481fcc6bf7ca1fdeb3dc1"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOTQ2ZWZjZGU2Y2YwZWU2ODI1Y2Y0MWZlN2FmYWYwZTcwYjdhYTQw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3946efcde6cf0ee6825cf41fe7afaf0e70b7aa40",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/3946efcde6cf0ee6825cf41fe7afaf0e70b7aa40",
      "tree": {
        "sha": "1ed46571d205bb9842eaffb4bb46c6eede79b8f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1ed46571d205bb9842eaffb4bb46c6eede79b8f9"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1557bb64a8eed3a5247481fcc6bf7ca1fdeb3dc1",
          "sha": "1557bb64a8eed3a5247481fcc6bf7ca1fdeb3dc1",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/1557bb64a8eed3a5247481fcc6bf7ca1fdeb3dc1"
        }
      ],
      "message": "Implement HasEncryptedData, SetCrypted, LoadCryptedKey, and AddCryptedKey in LegacyScriptPubKeyMan",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T15:40:12Z"
      },
      "sha": "3946efcde6cf0ee6825cf41fe7afaf0e70b7aa40"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNjdiOGY0MWZlZGFhZDliYmM5ZGVjOTc1MWQ2Mjk1ZjJjMmY1MGM2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d67b8f41fedaad9bbc9dec9751d6295f2c2f50c6",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/d67b8f41fedaad9bbc9dec9751d6295f2c2f50c6",
      "tree": {
        "sha": "146d623ce8f1e0397c62f78088248414df7c404b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/146d623ce8f1e0397c62f78088248414df7c404b"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3946efcde6cf0ee6825cf41fe7afaf0e70b7aa40",
          "sha": "3946efcde6cf0ee6825cf41fe7afaf0e70b7aa40",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/3946efcde6cf0ee6825cf41fe7afaf0e70b7aa40"
        }
      ],
      "message": "Implement UpdateTimeFirstKey, and GetTimeFirstKey in LegacyScriptPubKeyMan",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T15:53:27Z"
      },
      "sha": "d67b8f41fedaad9bbc9dec9751d6295f2c2f50c6"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMzMzMzM2NTAzNmI5ZWQzODA4NmViZWY4ODUxZjFlNGIzZGUyY2Jh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e3333365036b9ed38086ebef8851f1e4b3de2cba",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/e3333365036b9ed38086ebef8851f1e4b3de2cba",
      "tree": {
        "sha": "3bee9334b1901fc4bc874401295355d40dba603a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3bee9334b1901fc4bc874401295355d40dba603a"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d67b8f41fedaad9bbc9dec9751d6295f2c2f50c6",
          "sha": "d67b8f41fedaad9bbc9dec9751d6295f2c2f50c6",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d67b8f41fedaad9bbc9dec9751d6295f2c2f50c6"
        }
      ],
      "message": "Implement AddWatchOnly, RemoveWatchOnly, HaveWatchOnly, and LoadWatchOnly in LegacyScriptPubKeyMan",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T16:01:30Z"
      },
      "sha": "e3333365036b9ed38086ebef8851f1e4b3de2cba"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NjI2ZGFhY2Q0MDc0OTE3ZjQzMjYyYTM5YzI3M2IwOGYxNzgzMmM4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4626daacd4074917f43262a39c273b08f17832c8",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/4626daacd4074917f43262a39c273b08f17832c8",
      "tree": {
        "sha": "cd0adb22c356412d96dfb61f50e86a1dad2e5e96",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cd0adb22c356412d96dfb61f50e86a1dad2e5e96"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e3333365036b9ed38086ebef8851f1e4b3de2cba",
          "sha": "e3333365036b9ed38086ebef8851f1e4b3de2cba",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/e3333365036b9ed38086ebef8851f1e4b3de2cba"
        }
      ],
      "message": "Implement AddKeyPubKey and LoadKey in LegacyScriptPubKeyMan",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T16:05:40Z"
      },
      "sha": "4626daacd4074917f43262a39c273b08f17832c8"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YmZlOWU1YmJlYTUzZjA1MjVjNzc2MjQ3ZmEzNzdkYWM0ZjU2NjNi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8bfe9e5bbea53f0525c776247fa377dac4f5663b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/8bfe9e5bbea53f0525c776247fa377dac4f5663b",
      "tree": {
        "sha": "adfb4845edd69a590f107f393c5b0638ca4b8007",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/adfb4845edd69a590f107f393c5b0638ca4b8007"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4626daacd4074917f43262a39c273b08f17832c8",
          "sha": "4626daacd4074917f43262a39c273b08f17832c8",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/4626daacd4074917f43262a39c273b08f17832c8"
        }
      ],
      "message": "Implement WalletLogPrintf in LegacyScriptPubKeyMan",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T16:12:49Z"
      },
      "sha": "8bfe9e5bbea53f0525c776247fa377dac4f5663b"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNmQxYjJkNWJhN2UxMTlkYWY2ZDZmNGNiMGEyNjg3YWY4YjFlMmUz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a6d1b2d5ba7e119daf6d6f4cb0a2687af8b1e2e3",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/a6d1b2d5ba7e119daf6d6f4cb0a2687af8b1e2e3",
      "tree": {
        "sha": "1a018fc35fd1dd17370939357b46442855ac2173",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1a018fc35fd1dd17370939357b46442855ac2173"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8bfe9e5bbea53f0525c776247fa377dac4f5663b",
          "sha": "8bfe9e5bbea53f0525c776247fa377dac4f5663b",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/8bfe9e5bbea53f0525c776247fa377dac4f5663b"
        }
      ],
      "message": "Implement SetHDCHain, and IsHDEnabled in LegacyScriptPubKeyMan",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-24T17:14:16Z"
      },
      "sha": "a6d1b2d5ba7e119daf6d6f4cb0a2687af8b1e2e3"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOTAwYWJiNmUzNGM2ZDJhNWFmMDI2MmQwM2I3N2FmMzcyMmU0ZDMy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3900abb6e34c6d2a5af0262d03b77af3722e4d32",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/3900abb6e34c6d2a5af0262d03b77af3722e4d32",
      "tree": {
        "sha": "987be1a649308fbcdd4db711013108119e06ceff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/987be1a649308fbcdd4db711013108119e06ceff"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a6d1b2d5ba7e119daf6d6f4cb0a2687af8b1e2e3",
          "sha": "a6d1b2d5ba7e119daf6d6f4cb0a2687af8b1e2e3",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/a6d1b2d5ba7e119daf6d6f4cb0a2687af8b1e2e3"
        }
      ],
      "message": "Implement LoadCScript in LegacyScriptPubKeyMan",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-24T17:40:48Z"
      },
      "sha": "3900abb6e34c6d2a5af0262d03b77af3722e4d32"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NDJhODAyYjM2MjJhYTA2N2I3NWE0MDU1NDZmYmJiOGVhZWEyNWQ4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/642a802b3622aa067b75a405546fbbb8eaea25d8",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/642a802b3622aa067b75a405546fbbb8eaea25d8",
      "tree": {
        "sha": "14ada5f4fd91db576dd3840de7f9210bbcb174e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/14ada5f4fd91db576dd3840de7f9210bbcb174e2"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3900abb6e34c6d2a5af0262d03b77af3722e4d32",
          "sha": "3900abb6e34c6d2a5af0262d03b77af3722e4d32",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/3900abb6e34c6d2a5af0262d03b77af3722e4d32"
        }
      ],
      "message": "Implement LoadKeyMetadata and LoadScriptMetadata in LegacyScriptPubKeyMan",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-24T17:43:20Z"
      },
      "sha": "642a802b3622aa067b75a405546fbbb8eaea25d8"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MzlhY2U4MTQ0ZWQ4ZGM5OTAzYWE5ZDRmNWM5YWQ3NTJhMTE2ODE5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/739ace8144ed8dc9903aa9d4f5c9ad752a116819",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/739ace8144ed8dc9903aa9d4f5c9ad752a116819",
      "tree": {
        "sha": "b6dcce12c79f6e73ead3d131c3cf42f6de7f9e5e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b6dcce12c79f6e73ead3d131c3cf42f6de7f9e5e"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/642a802b3622aa067b75a405546fbbb8eaea25d8",
          "sha": "642a802b3622aa067b75a405546fbbb8eaea25d8",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/642a802b3622aa067b75a405546fbbb8eaea25d8"
        }
      ],
      "message": "Implement GetKey, HaveKey, and GetPubKey in LegacyScriptPubKeyMan",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T16:32:01Z"
      },
      "sha": "739ace8144ed8dc9903aa9d4f5c9ad752a116819"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMTYxYzBjMjBmZDczZjMyOGQ5ZTllYjg1MmFhMzZhODg5ZWMzZmE0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0161c0c20fd73f328d9e9eb852aa36a889ec3fa4",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/0161c0c20fd73f328d9e9eb852aa36a889ec3fa4",
      "tree": {
        "sha": "c0c46d81c0dcddad1e3e08e56b6f240878eb9aa3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c0c46d81c0dcddad1e3e08e56b6f240878eb9aa3"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/739ace8144ed8dc9903aa9d4f5c9ad752a116819",
          "sha": "739ace8144ed8dc9903aa9d4f5c9ad752a116819",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/739ace8144ed8dc9903aa9d4f5c9ad752a116819"
        }
      ],
      "message": "Implement GenerateNewKey in LegacyScriptPubKeyMan",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T16:33:19Z"
      },
      "sha": "0161c0c20fd73f328d9e9eb852aa36a889ec3fa4"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NjgwMWYwZDU2ZDFjMGE3NzBhMGE5MjJmNTRiODI5NTI1MGMyMzBk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/96801f0d56d1c0a770a0a922f54b8295250c230d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/96801f0d56d1c0a770a0a922f54b8295250c230d",
      "tree": {
        "sha": "a89bf6f265531ff86c5422dd8ecba355b533fb63",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a89bf6f265531ff86c5422dd8ecba355b533fb63"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0161c0c20fd73f328d9e9eb852aa36a889ec3fa4",
          "sha": "0161c0c20fd73f328d9e9eb852aa36a889ec3fa4",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/0161c0c20fd73f328d9e9eb852aa36a889ec3fa4"
        }
      ],
      "message": "Implement LoadKeyPool in LegacyScriptPubKeyMan",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T16:34:44Z"
      },
      "sha": "96801f0d56d1c0a770a0a922f54b8295250c230d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NGIyOTQyNTljMDUzYTM4ODY0OTI0NDU5NmIxZmYzNDc0NmM1MzMz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/84b294259c053a388649244596b1ff34746c5333",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/84b294259c053a388649244596b1ff34746c5333",
      "tree": {
        "sha": "9631a236179f848057a2f3b028f02f565a123984",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9631a236179f848057a2f3b028f02f565a123984"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/96801f0d56d1c0a770a0a922f54b8295250c230d",
          "sha": "96801f0d56d1c0a770a0a922f54b8295250c230d",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/96801f0d56d1c0a770a0a922f54b8295250c230d"
        }
      ],
      "message": "Implement GetOldestKeyPoolTime, KeypoolCountExternalKeys, and GetKeypoolSize in LegacyScriptPubKeyMan",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T16:39:52Z"
      },
      "sha": "84b294259c053a388649244596b1ff34746c5333"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MmQ1NzEwOGI4N2IxODRjYzA5OGYyYTZiNzY5NTQxYTkwODE0MjAx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/62d57108b87b184cc098f2a6b769541a90814201",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/62d57108b87b184cc098f2a6b769541a90814201",
      "tree": {
        "sha": "8fdda5a228895ec803549038e0b0a05487ae35c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8fdda5a228895ec803549038e0b0a05487ae35c1"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/84b294259c053a388649244596b1ff34746c5333",
          "sha": "84b294259c053a388649244596b1ff34746c5333",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/84b294259c053a388649244596b1ff34746c5333"
        }
      ],
      "message": "Implement CanGetAddresses, CanGenerateKeys, and HavePrivateKeys in LegacyScriptPubKeyMan",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T16:52:47Z"
      },
      "sha": "62d57108b87b184cc098f2a6b769541a90814201"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiODhiMjdkMGMzOGJiNTdmZjQ2OWRlMjc3MGE2ZWZiMGYyMzc1MGI1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b88b27d0c38bb57ff469de2770a6efb0f23750b5",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/b88b27d0c38bb57ff469de2770a6efb0f23750b5",
      "tree": {
        "sha": "7987254a7135b556115fa89416d6c2b18afaebfe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7987254a7135b556115fa89416d6c2b18afaebfe"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/62d57108b87b184cc098f2a6b769541a90814201",
          "sha": "62d57108b87b184cc098f2a6b769541a90814201",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/62d57108b87b184cc098f2a6b769541a90814201"
        }
      ],
      "message": "Implement GenerateNewSeed, DeriveNewSeed, and SetHDSeed for LegacyScriptPubKeyMan",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T17:09:56Z"
      },
      "sha": "b88b27d0c38bb57ff469de2770a6efb0f23750b5"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYzExZGYxODQzNzBjOGNhMTUyMjQ1MzdkZmM2MTQ3ZTFhZDdhZDQ3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cc11df184370c8ca15224537dfc6147e1ad7ad47",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/cc11df184370c8ca15224537dfc6147e1ad7ad47",
      "tree": {
        "sha": "cbbd2674c1e905d83a6732a5f9825041ff8c0d57",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cbbd2674c1e905d83a6732a5f9825041ff8c0d57"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b88b27d0c38bb57ff469de2770a6efb0f23750b5",
          "sha": "b88b27d0c38bb57ff469de2770a6efb0f23750b5",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/b88b27d0c38bb57ff469de2770a6efb0f23750b5"
        }
      ],
      "message": "Implement TopUpKeypool, TopUp, and NewKeyPool in LegacyScriptPubKeyMan",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T17:32:35Z"
      },
      "sha": "cc11df184370c8ca15224537dfc6147e1ad7ad47"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NjUzZGI1ZWQ1YWRjMzE0NzJiYzNmZmIxNWYzMjk5ODdmZTFiYjYy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8653db5ed5adc31472bc3ffb15f329987fe1bb62",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/8653db5ed5adc31472bc3ffb15f329987fe1bb62",
      "tree": {
        "sha": "9854e5666bbfbb45074a0497154108895c32f6fa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9854e5666bbfbb45074a0497154108895c32f6fa"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cc11df184370c8ca15224537dfc6147e1ad7ad47",
          "sha": "cc11df184370c8ca15224537dfc6147e1ad7ad47",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/cc11df184370c8ca15224537dfc6147e1ad7ad47"
        }
      ],
      "message": "Implement ReturnAddress, and KeepKey in LegacyScriptPubKeyMan",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T17:47:50Z"
      },
      "sha": "8653db5ed5adc31472bc3ffb15f329987fe1bb62"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMzRiYjE3MzQwMzA1MTk5MWMyYWMyMmU1ZDU0YzlmZTRlZTI3ZjRm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/334bb173403051991c2ac22e5d54c9fe4ee27f4f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/334bb173403051991c2ac22e5d54c9fe4ee27f4f",
      "tree": {
        "sha": "f5506b5d7a44e02e3cd3d146193a0a72f566e4c9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f5506b5d7a44e02e3cd3d146193a0a72f566e4c9"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8653db5ed5adc31472bc3ffb15f329987fe1bb62",
          "sha": "8653db5ed5adc31472bc3ffb15f329987fe1bb62",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/8653db5ed5adc31472bc3ffb15f329987fe1bb62"
        }
      ],
      "message": "Implement GetNewDestination, and GetReservedDestination in LegacyScriptPubKeyMan",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T17:56:08Z"
      },
      "sha": "334bb173403051991c2ac22e5d54c9fe4ee27f4f"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMTUwMzdjYmY5MDRiZGRiNjFjMjQxNzc5Y2QxOTBmZmNkMDI5NjVi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e15037cbf904bddb61c241779cd190ffcd02965b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/e15037cbf904bddb61c241779cd190ffcd02965b",
      "tree": {
        "sha": "4ba262172a6fe0d7a21f2d9f5d1dee69b72f0595",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4ba262172a6fe0d7a21f2d9f5d1dee69b72f0595"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/334bb173403051991c2ac22e5d54c9fe4ee27f4f",
          "sha": "334bb173403051991c2ac22e5d54c9fe4ee27f4f",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/334bb173403051991c2ac22e5d54c9fe4ee27f4f"
        }
      ],
      "message": "Implement MarkUnusedAddresses in LegacyScriptPubKeyMan",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T18:01:57Z"
      },
      "sha": "e15037cbf904bddb61c241779cd190ffcd02965b"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMDQ1ZTM3MmU3NTYwNWQ2YzIxYjEzMTkyYzdjNjlhMzE3Mzc4ZDdk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0045e372e75605d6c21b13192c7c69a317378d7d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/0045e372e75605d6c21b13192c7c69a317378d7d",
      "tree": {
        "sha": "f9bcc2ad445f13091eee05c44cbcbeb01e393668",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f9bcc2ad445f13091eee05c44cbcbeb01e393668"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e15037cbf904bddb61c241779cd190ffcd02965b",
          "sha": "e15037cbf904bddb61c241779cd190ffcd02965b",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/e15037cbf904bddb61c241779cd190ffcd02965b"
        }
      ],
      "message": "Implement IsMine in LegacyScriptPubKeyMan",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T18:10:59Z"
      },
      "sha": "0045e372e75605d6c21b13192c7c69a317378d7d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NjZmZjM2MmI2ODdhMTY5ZjkxMmRmYjZlZGIxNjFlMjk0MzNhZTQy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/666ff362b687a169f912dfb6edb161e29433ae42",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/666ff362b687a169f912dfb6edb161e29433ae42",
      "tree": {
        "sha": "5fcbfe2cbf669a88eaf960a86f60a91c4e03df15",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5fcbfe2cbf669a88eaf960a86f60a91c4e03df15"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0045e372e75605d6c21b13192c7c69a317378d7d",
          "sha": "0045e372e75605d6c21b13192c7c69a317378d7d",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/0045e372e75605d6c21b13192c7c69a317378d7d"
        }
      ],
      "message": "Implement UpgradeKeyMetaData, SetupGeneration, IsFirstRun, Upgrade, RewriteDB in LegacyScriptPubKeyMan",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T18:16:36Z"
      },
      "sha": "666ff362b687a169f912dfb6edb161e29433ae42"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NTUwZTM2NWNhY2E3NzI1NDQ3MGRhMTIwYzFkYmFmMTMwYzc2MjNi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8550e365caca77254470da120c1dbaf130c7623b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/8550e365caca77254470da120c1dbaf130c7623b",
      "tree": {
        "sha": "ae9c2f33a5800fa842c5eb5bcf474fd0a0d77234",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ae9c2f33a5800fa842c5eb5bcf474fd0a0d77234"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/666ff362b687a169f912dfb6edb161e29433ae42",
          "sha": "666ff362b687a169f912dfb6edb161e29433ae42",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/666ff362b687a169f912dfb6edb161e29433ae42"
        }
      ],
      "message": "Implement Unlock, Lock, and Encrypt and LegacyScriptPubKeyMan",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T18:32:41Z"
      },
      "sha": "8550e365caca77254470da120c1dbaf130c7623b"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMTgzNGFjMDY0MmUyNDQ0YjVjZmY2MDk3OTMzZWViYjc5NzYxYTI0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d1834ac0642e2444b5cff6097933eebb79761a24",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/d1834ac0642e2444b5cff6097933eebb79761a24",
      "tree": {
        "sha": "931167d82e374a8c43cc26bc8caf9708660f77da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/931167d82e374a8c43cc26bc8caf9708660f77da"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8550e365caca77254470da120c1dbaf130c7623b",
          "sha": "8550e365caca77254470da120c1dbaf130c7623b",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/8550e365caca77254470da120c1dbaf130c7623b"
        }
      ],
      "message": "Implement ImportScripts, ImportPrivKeys, ImportPubKeys, and ImportScriptPubKeys in LegacyScriptPubKeyMan",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T20:26:01Z"
      },
      "sha": "d1834ac0642e2444b5cff6097933eebb79761a24"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYzI2NDJlMWRlOTQ2ZDY0OGNkODM4NjY1NGQzYWUxODMwZTAxN2M3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dc2642e1de946d648cd8386654d3ae1830e017c7",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/dc2642e1de946d648cd8386654d3ae1830e017c7",
      "tree": {
        "sha": "59b365259ed41ef6f63fc9b738b00e83cfaff5b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/59b365259ed41ef6f63fc9b738b00e83cfaff5b9"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d1834ac0642e2444b5cff6097933eebb79761a24",
          "sha": "d1834ac0642e2444b5cff6097933eebb79761a24",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d1834ac0642e2444b5cff6097933eebb79761a24"
        }
      ],
      "message": "Implement GetMetadata in LegacyScriptPubKeyMan",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T20:54:08Z"
      },
      "sha": "dc2642e1de946d648cd8386654d3ae1830e017c7"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMzVlZGU5NjZiMDZhODM1YzIxYzNlN2Q1ZDdkZTM3YjI3YjQyMTQ5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/335ede966b06a835c21c3e7d5d7de37b27b42149",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/335ede966b06a835c21c3e7d5d7de37b27b42149",
      "tree": {
        "sha": "2c422f9e6462748482a4bba4097c2e97ac988f07",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2c422f9e6462748482a4bba4097c2e97ac988f07"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dc2642e1de946d648cd8386654d3ae1830e017c7",
          "sha": "dc2642e1de946d648cd8386654d3ae1830e017c7",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/dc2642e1de946d648cd8386654d3ae1830e017c7"
        }
      ],
      "message": "Implement GetKeyOrigin in LegacyScriptPubKeyMan",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-08-30T19:39:51Z"
      },
      "sha": "335ede966b06a835c21c3e7d5d7de37b27b42149"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NGQwZWEwZWJjMjFhYzhhY2VlMmUxNjZjZGJlMjcyNjI1NzlkOWY5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/94d0ea0ebc21ac8acee2e166cdbe27262579d9f9",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/94d0ea0ebc21ac8acee2e166cdbe27262579d9f9",
      "tree": {
        "sha": "504ba94ba134df6c2f46dd4cd0100e0b5689ef6c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/504ba94ba134df6c2f46dd4cd0100e0b5689ef6c"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/335ede966b06a835c21c3e7d5d7de37b27b42149",
          "sha": "335ede966b06a835c21c3e7d5d7de37b27b42149",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/335ede966b06a835c21c3e7d5d7de37b27b42149"
        }
      ],
      "message": "Implement actually loading everything into LegacyScriptPubKeyMan",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-25T17:57:23Z"
      },
      "sha": "94d0ea0ebc21ac8acee2e166cdbe27262579d9f9"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0Y2Q4MzkyZjI5ODYxNDlhYzAyYzMxY2UwZjdkNjg1ZmRlYTQ4ZTg5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4cd8392f2986149ac02c31ce0f7d685fdea48e89",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/4cd8392f2986149ac02c31ce0f7d685fdea48e89",
      "tree": {
        "sha": "b1adbcd885d632406cff1fd525c14d577f65d92c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b1adbcd885d632406cff1fd525c14d577f65d92c"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/94d0ea0ebc21ac8acee2e166cdbe27262579d9f9",
          "sha": "94d0ea0ebc21ac8acee2e166cdbe27262579d9f9",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/94d0ea0ebc21ac8acee2e166cdbe27262579d9f9"
        }
      ],
      "message": "Implement CanProvide in LegacyScriptPubKeyMan",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-03T21:01:10Z"
      },
      "sha": "4cd8392f2986149ac02c31ce0f7d685fdea48e89"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyODBlOGM2YjYxNDI4MzlmODc5M2I1NGY0OWZmYzk0NjFhNzNiNjBm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/280e8c6b6142839f8793b54f49ffc9461a73b60f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/280e8c6b6142839f8793b54f49ffc9461a73b60f",
      "tree": {
        "sha": "202e8860839ce0efa7b37f5d2b4128eca087c347",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/202e8860839ce0efa7b37f5d2b4128eca087c347"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4cd8392f2986149ac02c31ce0f7d685fdea48e89",
          "sha": "4cd8392f2986149ac02c31ce0f7d685fdea48e89",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/4cd8392f2986149ac02c31ce0f7d685fdea48e89"
        }
      ],
      "message": "Implement GetKeys in LegacyScriptPubKeyMan",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-09-26T20:01:54Z"
      },
      "sha": "280e8c6b6142839f8793b54f49ffc9461a73b60f"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZWM2ODI4Y2MxY2Y0ZGE5NWU4ODU2ZmI5M2VmMzJjYWNmYWExZWU0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cec6828cc1cf4da95e8856fb93ef32cacfaa1ee4",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/cec6828cc1cf4da95e8856fb93ef32cacfaa1ee4",
      "tree": {
        "sha": "1557ab1de27a55e8a4ba88cef2a6c45e91c5b8f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1557ab1de27a55e8a4ba88cef2a6c45e91c5b8f2"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/280e8c6b6142839f8793b54f49ffc9461a73b60f",
          "sha": "280e8c6b6142839f8793b54f49ffc9461a73b60f",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/280e8c6b6142839f8793b54f49ffc9461a73b60f"
        }
      ],
      "message": "[ci skip] Remove CWallet from IsMine and have CWallet always use ScriptPubKeyMan's IsMine",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T18:38:01Z"
      },
      "sha": "cec6828cc1cf4da95e8856fb93ef32cacfaa1ee4"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNTBkYmZmZGU1OWM0NjBmMzk2NTAzOTUwZTIwMGE2NzliYzFiZjg3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/150dbffde59c460f396503950e200a679bc1bf87",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/150dbffde59c460f396503950e200a679bc1bf87",
      "tree": {
        "sha": "a4eb1ef76489017079797f9bc51b9fccc08abd3f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a4eb1ef76489017079797f9bc51b9fccc08abd3f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cec6828cc1cf4da95e8856fb93ef32cacfaa1ee4",
          "sha": "cec6828cc1cf4da95e8856fb93ef32cacfaa1ee4",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/cec6828cc1cf4da95e8856fb93ef32cacfaa1ee4"
        }
      ],
      "message": "[ci skip] moveonly: move ismine stuff to be a module of LegacyScriptPubKeyMan",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-05T19:56:30Z"
      },
      "sha": "150dbffde59c460f396503950e200a679bc1bf87"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZGMxYjZlMjIxMGU5MTZhOGI5MTkxODhmODYzNmIzMzM0ZmIxZTMz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7dc1b6e2210e916a8b919188f8636b3334fb1e33",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/7dc1b6e2210e916a8b919188f8636b3334fb1e33",
      "tree": {
        "sha": "f6d7aeee661f8f4f78e75eec68123150e0c6014e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f6d7aeee661f8f4f78e75eec68123150e0c6014e"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/150dbffde59c460f396503950e200a679bc1bf87",
          "sha": "150dbffde59c460f396503950e200a679bc1bf87",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/150dbffde59c460f396503950e200a679bc1bf87"
        }
      ],
      "message": "[ci skip] IsMine set state to WATCH_ONLY if we can get the pubkey",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-09-23T16:25:08Z"
      },
      "sha": "7dc1b6e2210e916a8b919188f8636b3334fb1e33"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZjBmNzQwYWU5OWNjZmE1ZDFiNjg3NmViMjU4Y2E2YTkxN2UxNmU3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/af0f740ae99ccfa5d1b6876eb258ca6a917e16e7",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/af0f740ae99ccfa5d1b6876eb258ca6a917e16e7",
      "tree": {
        "sha": "239cb1f81517371a6ab08f6eb4773466acc8de9c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/239cb1f81517371a6ab08f6eb4773466acc8de9c"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7dc1b6e2210e916a8b919188f8636b3334fb1e33",
          "sha": "7dc1b6e2210e916a8b919188f8636b3334fb1e33",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/7dc1b6e2210e916a8b919188f8636b3334fb1e33"
        }
      ],
      "message": "[ci skip] Have GetNewDestination, GetNewChangeDestination, and ReserveDestination use ScriptPubKeyMan",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T18:49:07Z"
      },
      "sha": "af0f740ae99ccfa5d1b6876eb258ca6a917e16e7"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZTczNmYxMDkyZTcwZTdlYjg4NjUzOTVhZmYyMDcwZWE3ODU2MWRj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8e736f1092e70e7eb8865395aff2070ea78561dc",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/8e736f1092e70e7eb8865395aff2070ea78561dc",
      "tree": {
        "sha": "d5294e04f6fcfeb4dfcab993efab8722649bc196",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d5294e04f6fcfeb4dfcab993efab8722649bc196"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/af0f740ae99ccfa5d1b6876eb258ca6a917e16e7",
          "sha": "af0f740ae99ccfa5d1b6876eb258ca6a917e16e7",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/af0f740ae99ccfa5d1b6876eb258ca6a917e16e7"
        }
      ],
      "message": "[ci skip] Mark used addresses in ScriptPubKeyMan",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-26T16:04:59Z"
      },
      "sha": "8e736f1092e70e7eb8865395aff2070ea78561dc"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiM2U3MTJhNzJiOGU5YjY0NTBhNGRhZDhiNWRlNDc3YjEwNDFlOTI3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b3e712a72b8e9b6450a4dad8b5de477b1041e927",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/b3e712a72b8e9b6450a4dad8b5de477b1041e927",
      "tree": {
        "sha": "159aabd380d10cdfa68240e7d83897f03193d965",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/159aabd380d10cdfa68240e7d83897f03193d965"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8e736f1092e70e7eb8865395aff2070ea78561dc",
          "sha": "8e736f1092e70e7eb8865395aff2070ea78561dc",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/8e736f1092e70e7eb8865395aff2070ea78561dc"
        }
      ],
      "message": "[ci skip] Call UpgradeKeyMetaData for each ScriptPubKeyMan",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T19:45:50Z"
      },
      "sha": "b3e712a72b8e9b6450a4dad8b5de477b1041e927"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NWU5MzQzYjBkNjRjMWZkOGZjYjliNjE1N2VhYzRiNDM0ZmEzYzkw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/95e9343b0d64c1fd8fcb9b6157eac4b434fa3c90",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/95e9343b0d64c1fd8fcb9b6157eac4b434fa3c90",
      "tree": {
        "sha": "4d11860f6be7771ba772545b14b1cb6877427e32",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4d11860f6be7771ba772545b14b1cb6877427e32"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b3e712a72b8e9b6450a4dad8b5de477b1041e927",
          "sha": "b3e712a72b8e9b6450a4dad8b5de477b1041e927",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/b3e712a72b8e9b6450a4dad8b5de477b1041e927"
        }
      ],
      "message": "[ci skip] Sign using SigningProvider from ScriptPubKeyMan when signing within CWallet",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T20:12:58Z"
      },
      "sha": "95e9343b0d64c1fd8fcb9b6157eac4b434fa3c90"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NDE3YTY4MDQ3YmY3YmQ3Y2ExYjUxY2Q2ZjQ2NTJiNDRmZTI5NjBi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9417a68047bf7bd7ca1b51cd6f4652b44fe2960b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/9417a68047bf7bd7ca1b51cd6f4652b44fe2960b",
      "tree": {
        "sha": "6d9823e9ff2d90680c28dcd76679ec0a7eddce9a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6d9823e9ff2d90680c28dcd76679ec0a7eddce9a"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/95e9343b0d64c1fd8fcb9b6157eac4b434fa3c90",
          "sha": "95e9343b0d64c1fd8fcb9b6157eac4b434fa3c90",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/95e9343b0d64c1fd8fcb9b6157eac4b434fa3c90"
        }
      ],
      "message": "[ci skip] Do not allow import*, dump*, and addmultisigaddress RPCs when wallet is not backed by LegacyScriptPubKeyMan",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T20:20:44Z"
      },
      "sha": "9417a68047bf7bd7ca1b51cd6f4652b44fe2960b"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NmMwNWIxMGFlMTljYzY2OGY5YzA2Yjk3Njg3NzI5NWMzY2NmOWFh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/86c05b10ae19cc668f9c06b976877295c3ccf9aa",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/86c05b10ae19cc668f9c06b976877295c3ccf9aa",
      "tree": {
        "sha": "b9c8bdc92f4d63b9cfb7a53cad2539f158423921",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b9c8bdc92f4d63b9cfb7a53cad2539f158423921"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9417a68047bf7bd7ca1b51cd6f4652b44fe2960b",
          "sha": "9417a68047bf7bd7ca1b51cd6f4652b44fe2960b",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/9417a68047bf7bd7ca1b51cd6f4652b44fe2960b"
        }
      ],
      "message": "[ci skip] Change Imports to use LegacyScriptPubKeyMan Imports",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T20:28:52Z"
      },
      "sha": "86c05b10ae19cc668f9c06b976877295c3ccf9aa"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYmY0Y2Q0MjQ1MDcyNzlkN2JmYzgwMmUzNzNmYWJhNDNkNjY4ZGMx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3bf4cd424507279d7bfc802e373faba43d668dc1",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/3bf4cd424507279d7bfc802e373faba43d668dc1",
      "tree": {
        "sha": "506b57d8c06770033f278642c45cdd6dcca55ca8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/506b57d8c06770033f278642c45cdd6dcca55ca8"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/86c05b10ae19cc668f9c06b976877295c3ccf9aa",
          "sha": "86c05b10ae19cc668f9c06b976877295c3ccf9aa",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/86c05b10ae19cc668f9c06b976877295c3ccf9aa"
        }
      ],
      "message": "[ci skip] Use SigningProviders and ScriptPubKeyMans in listunspent, signmessage, signrawtransactionwithwallet, and getaddressinfo",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T20:57:47Z"
      },
      "sha": "3bf4cd424507279d7bfc802e373faba43d668dc1"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzplY2M0MzcxYzQ2YjljODk5OTE2YTZhYjhmZTU1NDgzODJkODc3MTk5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ecc4371c46b9c899916a6ab8fe5548382d877199",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ecc4371c46b9c899916a6ab8fe5548382d877199",
      "tree": {
        "sha": "ea1d67433f0825e34a96473ee3aaeceab4677c04",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ea1d67433f0825e34a96473ee3aaeceab4677c04"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3bf4cd424507279d7bfc802e373faba43d668dc1",
          "sha": "3bf4cd424507279d7bfc802e373faba43d668dc1",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/3bf4cd424507279d7bfc802e373faba43d668dc1"
        }
      ],
      "message": "[ci skip] Use LegacyScriptPubKeyMan in addmultisigaddress and sethdseed",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T20:58:34Z"
      },
      "sha": "ecc4371c46b9c899916a6ab8fe5548382d877199"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMDNlZDJjNzdmNjc5YzJlMjYxYTVlMDBiMzE3YzkxNGNiMzQ5NTBm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d03ed2c77f679c2e261a5e00b317c914cb34950f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/d03ed2c77f679c2e261a5e00b317c914cb34950f",
      "tree": {
        "sha": "8862b5adb98b0b401371bd6c3efbb32f6c64fcf5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8862b5adb98b0b401371bd6c3efbb32f6c64fcf5"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ecc4371c46b9c899916a6ab8fe5548382d877199",
          "sha": "ecc4371c46b9c899916a6ab8fe5548382d877199",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ecc4371c46b9c899916a6ab8fe5548382d877199"
        }
      ],
      "message": "[ci skip] Use LegacyScriptPubKeyMan for hdseedid in getwalletinfo",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:32:16Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T20:59:25Z"
      },
      "sha": "d03ed2c77f679c2e261a5e00b317c914cb34950f"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NzNkZjgzN2FhNDk0NjFjNTlkMWE3ZGNlMGE3MWZlMmZhNTEyZmU2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/473df837aa49461c59d1a7dce0a71fe2fa512fe6",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/473df837aa49461c59d1a7dce0a71fe2fa512fe6",
      "tree": {
        "sha": "956d12d972bea238378acb4ba53cc95345668abb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/956d12d972bea238378acb4ba53cc95345668abb"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d03ed2c77f679c2e261a5e00b317c914cb34950f",
          "sha": "d03ed2c77f679c2e261a5e00b317c914cb34950f",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d03ed2c77f679c2e261a5e00b317c914cb34950f"
        }
      ],
      "message": "[ci skip] Change KeypoolCountExternal and GetKeypoolSize to get aggregate sizes from ScriptPubKeyMans",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:33:00Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T21:04:22Z"
      },
      "sha": "473df837aa49461c59d1a7dce0a71fe2fa512fe6"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MjEyNjFlMjQ1NmI2N2QyN2E3MDI5NTI0NjdiMGQzNTk1ZjlhZWY5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/921261e2456b67d27a702952467b0d3595f9aef9",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/921261e2456b67d27a702952467b0d3595f9aef9",
      "tree": {
        "sha": "5ebee28e12d0d1eeb3a2371eb3797bd2a393af53",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5ebee28e12d0d1eeb3a2371eb3797bd2a393af53"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/473df837aa49461c59d1a7dce0a71fe2fa512fe6",
          "sha": "473df837aa49461c59d1a7dce0a71fe2fa512fe6",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/473df837aa49461c59d1a7dce0a71fe2fa512fe6"
        }
      ],
      "message": "[ci skip] Have IsHDEnabled fetch from ScriptPubKeyMans",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:33:01Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T21:08:19Z"
      },
      "sha": "921261e2456b67d27a702952467b0d3595f9aef9"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZjg0OTFjNWYwNjZlOTg2MzU2ZWQ3ODYyZWFmMWY5ZTcxZTM3M2Mx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bf8491c5f066e986356ed7862eaf1f9e71e373c1",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/bf8491c5f066e986356ed7862eaf1f9e71e373c1",
      "tree": {
        "sha": "6bb7c14f4fd2dcbaba00003c4671e42975a55387",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6bb7c14f4fd2dcbaba00003c4671e42975a55387"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/921261e2456b67d27a702952467b0d3595f9aef9",
          "sha": "921261e2456b67d27a702952467b0d3595f9aef9",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/921261e2456b67d27a702952467b0d3595f9aef9"
        }
      ],
      "message": "[ci skip] Fetch oldest keypool time from ScriptPubKeyMans",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:33:01Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T21:12:14Z"
      },
      "sha": "bf8491c5f066e986356ed7862eaf1f9e71e373c1"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZGZhYzI4YTIyMGU4MWQ5YmI1NDY5YmRkNGQ2MmM4Y2U2ZjI5ZGQ2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bdfac28a220e81d9bb5469bdd4d62c8ce6f29dd6",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/bdfac28a220e81d9bb5469bdd4d62c8ce6f29dd6",
      "tree": {
        "sha": "f83aff3b0ec4080af4e25f86b8d0604e5abb90ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f83aff3b0ec4080af4e25f86b8d0604e5abb90ea"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bf8491c5f066e986356ed7862eaf1f9e71e373c1",
          "sha": "bf8491c5f066e986356ed7862eaf1f9e71e373c1",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/bf8491c5f066e986356ed7862eaf1f9e71e373c1"
        }
      ],
      "message": "[ci skip] have TopUpKeyPool call TopUp in each ScriptPubKeyMan",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:33:01Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T21:15:55Z"
      },
      "sha": "bdfac28a220e81d9bb5469bdd4d62c8ce6f29dd6"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYTRjYTI0Y2VkMDMwNDBkY2FmZWQ4OTA5NzgxNzVjMWEwNmI4ZmJh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/da4ca24ced03040dcafed890978175c1a06b8fba",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/da4ca24ced03040dcafed890978175c1a06b8fba",
      "tree": {
        "sha": "7616ed6e6b7d203f972f41dc7bb8ee0d1deeca9b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7616ed6e6b7d203f972f41dc7bb8ee0d1deeca9b"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bdfac28a220e81d9bb5469bdd4d62c8ce6f29dd6",
          "sha": "bdfac28a220e81d9bb5469bdd4d62c8ce6f29dd6",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/bdfac28a220e81d9bb5469bdd4d62c8ce6f29dd6"
        }
      ],
      "message": "[ci skip] Have EncryptWallet, Lock, and Unlock call their respective functions in ScriptPubKeyMans",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:33:01Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T21:17:50Z"
      },
      "sha": "da4ca24ced03040dcafed890978175c1a06b8fba"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZmEzNTg1OTFjOWY5ZTJmMGUwMmUyMGVmOTk1MzA4OGRlNjU5MTll",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6fa358591c9f9e2f0e02e20ef9953088de65919e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/6fa358591c9f9e2f0e02e20ef9953088de65919e",
      "tree": {
        "sha": "7fe920e706ae959dc3cfb68b7209612a47dc82f8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7fe920e706ae959dc3cfb68b7209612a47dc82f8"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/da4ca24ced03040dcafed890978175c1a06b8fba",
          "sha": "da4ca24ced03040dcafed890978175c1a06b8fba",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/da4ca24ced03040dcafed890978175c1a06b8fba"
        }
      ],
      "message": "[ci skip] Use LegacyScriptPubKeyMan throughout psbt_wallet_tests",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:33:01Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T21:22:26Z"
      },
      "sha": "6fa358591c9f9e2f0e02e20ef9953088de65919e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NDgwOTEwZmJhOGQwOWI2MmRlYWI4ZjhmMjY0ZTViMWZhMDRmNDA1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6480910fba8d09b62deab8f8f264e5b1fa04f405",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/6480910fba8d09b62deab8f8f264e5b1fa04f405",
      "tree": {
        "sha": "ca40747287698e2bf51e66f3eb756da3e0782597",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ca40747287698e2bf51e66f3eb756da3e0782597"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6fa358591c9f9e2f0e02e20ef9953088de65919e",
          "sha": "6fa358591c9f9e2f0e02e20ef9953088de65919e",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/6fa358591c9f9e2f0e02e20ef9953088de65919e"
        }
      ],
      "message": "[ci skip] Use LegacyScriptPubKeyMan throughout wallettool",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:33:01Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T21:24:50Z"
      },
      "sha": "6480910fba8d09b62deab8f8f264e5b1fa04f405"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NTg1NTI3YTU2MjI4MTA4OGQ4ZGNiMmVjMTMzYmExMzExNjQwZTJl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9585527a562281088d8dcb2ec133ba1311640e2e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/9585527a562281088d8dcb2ec133ba1311640e2e",
      "tree": {
        "sha": "1845a7230e7699305da3f9c732cc7cc0f0218f61",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1845a7230e7699305da3f9c732cc7cc0f0218f61"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6480910fba8d09b62deab8f8f264e5b1fa04f405",
          "sha": "6480910fba8d09b62deab8f8f264e5b1fa04f405",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/6480910fba8d09b62deab8f8f264e5b1fa04f405"
        }
      ],
      "message": "[ci skip] Use ScriptPubKeyMans' Setup and Upgrade functions when loading or creating a wallet",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:35:03Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-27T21:28:27Z"
      },
      "sha": "9585527a562281088d8dcb2ec133ba1311640e2e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0Yzk3YTZiYTUxNWU4YWIyMWQ0OTE0MTU4YzkwMDA5NmYxNjM0ZDRh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4c97a6ba515e8ab21d4914158c900096f1634d4a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/4c97a6ba515e8ab21d4914158c900096f1634d4a",
      "tree": {
        "sha": "fdfb0047b0f7ce3f8161fbe83a5fb60a380ab92a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fdfb0047b0f7ce3f8161fbe83a5fb60a380ab92a"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9585527a562281088d8dcb2ec133ba1311640e2e",
          "sha": "9585527a562281088d8dcb2ec133ba1311640e2e",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/9585527a562281088d8dcb2ec133ba1311640e2e"
        }
      ],
      "message": "[ci skip] Define first run as having no ScriptPubKeyMans",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:35:04Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-26T19:13:20Z"
      },
      "sha": "4c97a6ba515e8ab21d4914158c900096f1634d4a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMTFhMDk0NzkxMjNmMjdmNjg0MjJkZDVkNzc2ZmJkYjFiYzE2NTVh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/111a09479123f27f68422dd5d776fbdb1bc1655a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/111a09479123f27f68422dd5d776fbdb1bc1655a",
      "tree": {
        "sha": "d2fcc7477da37b9ce566b962f2faeb6e0c2a04a8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d2fcc7477da37b9ce566b962f2faeb6e0c2a04a8"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4c97a6ba515e8ab21d4914158c900096f1634d4a",
          "sha": "4c97a6ba515e8ab21d4914158c900096f1634d4a",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/4c97a6ba515e8ab21d4914158c900096f1634d4a"
        }
      ],
      "message": "[ci skip] Use RewriteDB action when DB needs rewrite",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:35:04Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-26T19:22:15Z"
      },
      "sha": "111a09479123f27f68422dd5d776fbdb1bc1655a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZWUwYzVhODdlMWEwZGJmMjJmYzM2OTFmOTJhNjIwOTgyNGU2Yjk5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1ee0c5a87e1a0dbf22fc3691f92a6209824e6b99",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/1ee0c5a87e1a0dbf22fc3691f92a6209824e6b99",
      "tree": {
        "sha": "487527f2da5186689d3f61285603c947bb565a05",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/487527f2da5186689d3f61285603c947bb565a05"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/111a09479123f27f68422dd5d776fbdb1bc1655a",
          "sha": "111a09479123f27f68422dd5d776fbdb1bc1655a",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/111a09479123f27f68422dd5d776fbdb1bc1655a"
        }
      ],
      "message": "[ci skip] Use GetTimeFirstKey instead of nTimeFirstKey",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:35:04Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-26T20:00:40Z"
      },
      "sha": "1ee0c5a87e1a0dbf22fc3691f92a6209824e6b99"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNWI4MzRlOGVlZTQ3MjY0YjdjMGZhYWEzNTU3Y2IzMDJlNjI0MDc2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e5b834e8eee47264b7c0faaa3557cb302e624076",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/e5b834e8eee47264b7c0faaa3557cb302e624076",
      "tree": {
        "sha": "d0ed467e0b706ecb5199a1e016b4d8c0eff5697c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d0ed467e0b706ecb5199a1e016b4d8c0eff5697c"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1ee0c5a87e1a0dbf22fc3691f92a6209824e6b99",
          "sha": "1ee0c5a87e1a0dbf22fc3691f92a6209824e6b99",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/1ee0c5a87e1a0dbf22fc3691f92a6209824e6b99"
        }
      ],
      "message": "[ci skip] Use LegacyScriptPubKeyMan for in wallet_tests",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:35:04Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-26T21:24:38Z"
      },
      "sha": "e5b834e8eee47264b7c0faaa3557cb302e624076"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYzFhM2NkMGNlMjVhY2UyYTdhYTgxYzVlYTJjOWNjZDg5ZmE0YjBh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0c1a3cd0ce25ace2a7aa81c5ea2c9ccd89fa4b0a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/0c1a3cd0ce25ace2a7aa81c5ea2c9ccd89fa4b0a",
      "tree": {
        "sha": "af435b9276dabc18064e32b70aa3ff2593535671",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/af435b9276dabc18064e32b70aa3ff2593535671"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e5b834e8eee47264b7c0faaa3557cb302e624076",
          "sha": "e5b834e8eee47264b7c0faaa3557cb302e624076",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/e5b834e8eee47264b7c0faaa3557cb302e624076"
        }
      ],
      "message": "[ci skip] Use LegacyScriptPubKeyMan in dumpprivkey and dumpwallet",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:35:04Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-28T01:04:01Z"
      },
      "sha": "0c1a3cd0ce25ace2a7aa81c5ea2c9ccd89fa4b0a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMWZhNmRjMWE1NDQ3Njk0ODcyMzAxYTg2NTQxYTgxY2Q1OWUwYWY4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/01fa6dc1a5447694872301a86541a81cd59e0af8",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/01fa6dc1a5447694872301a86541a81cd59e0af8",
      "tree": {
        "sha": "b5784eed9cf3db433a27521bdf2f50488751d38a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b5784eed9cf3db433a27521bdf2f50488751d38a"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0c1a3cd0ce25ace2a7aa81c5ea2c9ccd89fa4b0a",
          "sha": "0c1a3cd0ce25ace2a7aa81c5ea2c9ccd89fa4b0a",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/0c1a3cd0ce25ace2a7aa81c5ea2c9ccd89fa4b0a"
        }
      ],
      "message": "[ci skip] Change CanGetAddresses to fetch from ScriptPubKeyMan\n\nCo-authored-by: Hugo Nguyen <hugh.hn@gmail.com>",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:35:04Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-28T01:35:23Z"
      },
      "sha": "01fa6dc1a5447694872301a86541a81cd59e0af8"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NzQxN2I0MzYwYTdkNzEwNWZjNTZkMDI2NzFlNjllOTQzYTk5MzY1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/77417b4360a7d7105fc56d02671e69e943a99365",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/77417b4360a7d7105fc56d02671e69e943a99365",
      "tree": {
        "sha": "9301b93b46ef73000451f8ade6043a8e8662a032",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9301b93b46ef73000451f8ade6043a8e8662a032"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/01fa6dc1a5447694872301a86541a81cd59e0af8",
          "sha": "01fa6dc1a5447694872301a86541a81cd59e0af8",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/01fa6dc1a5447694872301a86541a81cd59e0af8"
        }
      ],
      "message": "[ci skip] Fetch the correct SigningProvider for signing PSBTs",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:35:04Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-28T01:44:28Z"
      },
      "sha": "77417b4360a7d7105fc56d02671e69e943a99365"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzplY2Q3MDU0ZjNlYWY3Yjc1OTA0ZGY5MGIzNzY0ODY0NmZmMzEwOWE3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ecd7054f3eaf7b75904df90b37648646ff3109a7",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ecd7054f3eaf7b75904df90b37648646ff3109a7",
      "tree": {
        "sha": "8dae280f1618dd089cd5b6e0819ecb02e53c4113",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8dae280f1618dd089cd5b6e0819ecb02e53c4113"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/77417b4360a7d7105fc56d02671e69e943a99365",
          "sha": "77417b4360a7d7105fc56d02671e69e943a99365",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/77417b4360a7d7105fc56d02671e69e943a99365"
        }
      ],
      "message": "[ci skip] Use LegacyScriptPubKeyMan in test util",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:35:04Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-28T02:36:27Z"
      },
      "sha": "ecd7054f3eaf7b75904df90b37648646ff3109a7"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzozY2I0MWQ3OGY4OTc0YmUyN2U1MzA4MDlmZDk2YjI1ZTViZjkyYjk0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3cb41d78f8974be27e530809fd96b25e5bf92b94",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/3cb41d78f8974be27e530809fd96b25e5bf92b94",
      "tree": {
        "sha": "70ed4cb3583da47c07b5ed31607d0347f3437f2f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/70ed4cb3583da47c07b5ed31607d0347f3437f2f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ecd7054f3eaf7b75904df90b37648646ff3109a7",
          "sha": "ecd7054f3eaf7b75904df90b37648646ff3109a7",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ecd7054f3eaf7b75904df90b37648646ff3109a7"
        }
      ],
      "message": "[ci skip] Use LegacyScriptPubKeyMan in some parts of getbalances and createwallet",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:35:04Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-28T02:37:00Z"
      },
      "sha": "3cb41d78f8974be27e530809fd96b25e5bf92b94"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmODYxMDBjOGJmMjAzMjIzOTI2MjlmYTI0ZWNkOGI0NWIwM2E3YzZh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f86100c8bf20322392629fa24ecd8b45b03a7c6a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f86100c8bf20322392629fa24ecd8b45b03a7c6a",
      "tree": {
        "sha": "752409a2a5982bd92b993f6ac73f2013f1a00201",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/752409a2a5982bd92b993f6ac73f2013f1a00201"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3cb41d78f8974be27e530809fd96b25e5bf92b94",
          "sha": "3cb41d78f8974be27e530809fd96b25e5bf92b94",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/3cb41d78f8974be27e530809fd96b25e5bf92b94"
        }
      ],
      "message": "[ci skip] Have getPubKey and getPrivKey use SigningProvider",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:35:04Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-28T03:49:23Z"
      },
      "sha": "f86100c8bf20322392629fa24ecd8b45b03a7c6a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YzQ1MmIwZTg2ZGQ2MDg2OTI2NTYxZDczYjg5Y2IwODIzZjMxZThj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9c452b0e86dd6086926561d73b89cb0823f31e8c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/9c452b0e86dd6086926561d73b89cb0823f31e8c",
      "tree": {
        "sha": "32d12334df7b73161637620a543019255fb71941",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/32d12334df7b73161637620a543019255fb71941"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f86100c8bf20322392629fa24ecd8b45b03a7c6a",
          "sha": "f86100c8bf20322392629fa24ecd8b45b03a7c6a",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f86100c8bf20322392629fa24ecd8b45b03a7c6a"
        }
      ],
      "message": "[ci skip] Use LegacyScriptPubKeyMan in benchmarks involving the wallet",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:35:04Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-29T00:06:35Z"
      },
      "sha": "9c452b0e86dd6086926561d73b89cb0823f31e8c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMzdiZTE1Nzg1MTY2NmUzNWY0MmJkNzUyMGFmNTFmYjFkZDA2ODc3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c37be157851666e35f42bd7520af51fb1dd06877",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c37be157851666e35f42bd7520af51fb1dd06877",
      "tree": {
        "sha": "3d8a745ae36f7a6a3deb4d7cd388e9f164c73637",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3d8a745ae36f7a6a3deb4d7cd388e9f164c73637"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9c452b0e86dd6086926561d73b89cb0823f31e8c",
          "sha": "9c452b0e86dd6086926561d73b89cb0823f31e8c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/9c452b0e86dd6086926561d73b89cb0823f31e8c"
        }
      ],
      "message": "Remove unused functions and switch CWallet to use ScriptPubKeyMan",
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-21T15:36:26Z"
      },
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-26T22:19:39Z"
      },
      "sha": "c37be157851666e35f42bd7520af51fb1dd06877"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2730210835,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjczMDIxMDgzNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2730210835",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-21T15:46:15Z"
    },
    {
      "event": "commented",
      "id": 544578246,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU0NDU3ODI0Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/544578246",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-21T15:49:37Z",
      "updated_at": "2019-10-21T15:49:37Z",
      "author_association": "MEMBER",
      "body": "Rebased",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-544578246",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16341"
    },
    {
      "event": "unlabeled",
      "id": 2730607499,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MjczMDYwNzQ5OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2730607499",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-21T17:40:18Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "referenced",
      "id": 2730937801,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3MzA5Mzc4MDE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2730937801",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "9ee565d7b1821d3b7434e286a59209e5cec56f94",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/9ee565d7b1821d3b7434e286a59209e5cec56f94",
      "created_at": "2019-10-21T19:20:14Z"
    },
    {
      "event": "referenced",
      "id": 2730937810,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3MzA5Mzc4MTA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2730937810",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "e91b42f9f6c2e50e04dc93e206ae35a1ba3c7e01",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/e91b42f9f6c2e50e04dc93e206ae35a1ba3c7e01",
      "created_at": "2019-10-21T19:20:14Z"
    },
    {
      "event": "referenced",
      "id": 2730937815,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3MzA5Mzc4MTU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2730937815",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "37301e5cb42b8934b6abde33f452be954e49d59c",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/37301e5cb42b8934b6abde33f452be954e49d59c",
      "created_at": "2019-10-21T19:20:15Z"
    },
    {
      "event": "referenced",
      "id": 2730937818,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3MzA5Mzc4MTg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2730937818",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "af89fe136b446781d7e57808a34621d78a8722fa",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/af89fe136b446781d7e57808a34621d78a8722fa",
      "created_at": "2019-10-21T19:20:15Z"
    },
    {
      "event": "referenced",
      "id": 2730937820,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3MzA5Mzc4MjA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2730937820",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "a9ee4ca8060f71b8edc2b4aff685f9dbc3841488",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/a9ee4ca8060f71b8edc2b4aff685f9dbc3841488",
      "created_at": "2019-10-21T19:20:15Z"
    },
    {
      "event": "referenced",
      "id": 2730937825,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3MzA5Mzc4MjU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2730937825",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "2d08c308a3d9936c389c86786e666c0b71c81052",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/2d08c308a3d9936c389c86786e666c0b71c81052",
      "created_at": "2019-10-21T19:20:15Z"
    },
    {
      "event": "referenced",
      "id": 2730937827,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3MzA5Mzc4Mjc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2730937827",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "1d089c6d8893e83379808e6475b71d699ea8dcf2",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/1d089c6d8893e83379808e6475b71d699ea8dcf2",
      "created_at": "2019-10-21T19:20:15Z"
    },
    {
      "event": "mentioned",
      "id": 2743477979,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mjc0MzQ3Nzk3OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2743477979",
      "actor": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-25T09:03:01Z"
    },
    {
      "event": "subscribed",
      "id": 2743477980,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI3NDM0Nzc5ODA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2743477980",
      "actor": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-25T09:03:01Z"
    },
    {
      "event": "commented",
      "id": 546274939,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU0NjI3NDkzOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/546274939",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-25T09:16:58Z",
      "updated_at": "2019-10-25T09:16:58Z",
      "author_association": "MEMBER",
      "body": "Code review re-ACK c37be15",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-546274939",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16341"
    },
    {
      "event": "mentioned",
      "id": 2744109058,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mjc0NDEwOTA1OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2744109058",
      "actor": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-25T12:57:07Z"
    },
    {
      "event": "subscribed",
      "id": 2744109060,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI3NDQxMDkwNjA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2744109060",
      "actor": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-25T12:57:07Z"
    },
    {
      "event": "referenced",
      "id": 2745381413,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3NDUzODE0MTM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2745381413",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "66e675ec1e1dc60948bddf9fc23b1acc58365da5",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/66e675ec1e1dc60948bddf9fc23b1acc58365da5",
      "created_at": "2019-10-25T20:26:03Z"
    },
    {
      "event": "referenced",
      "id": 2745381417,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3NDUzODE0MTc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2745381417",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "c968ca5a161eb42277fbc646f377ca689e0e49ee",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/c968ca5a161eb42277fbc646f377ca689e0e49ee",
      "created_at": "2019-10-25T20:26:03Z"
    },
    {
      "event": "referenced",
      "id": 2745381420,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3NDUzODE0MjA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2745381420",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "11ee7b705bdd995ffae072332048830884a189ec",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/11ee7b705bdd995ffae072332048830884a189ec",
      "created_at": "2019-10-25T20:26:03Z"
    },
    {
      "event": "referenced",
      "id": 2745381428,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3NDUzODE0Mjg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2745381428",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "4eb8c892d7ded2a86f651385325bd8e20be9aaf2",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/4eb8c892d7ded2a86f651385325bd8e20be9aaf2",
      "created_at": "2019-10-25T20:26:03Z"
    },
    {
      "event": "referenced",
      "id": 2745381436,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3NDUzODE0MzY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2745381436",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "2e20c13cec746fc5ecd559130a49e6a91bc86e3d",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/2e20c13cec746fc5ecd559130a49e6a91bc86e3d",
      "created_at": "2019-10-25T20:26:03Z"
    },
    {
      "event": "referenced",
      "id": 2745381441,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3NDUzODE0NDE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2745381441",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "952ba99a447b619e353816cac429f825cb3bcaff",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/952ba99a447b619e353816cac429f825cb3bcaff",
      "created_at": "2019-10-25T20:26:03Z"
    },
    {
      "event": "referenced",
      "id": 2745381450,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3NDUzODE0NTA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2745381450",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "299296e51f6ea0e416aa84d7fc139195be96a58d",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/299296e51f6ea0e416aa84d7fc139195be96a58d",
      "created_at": "2019-10-25T20:26:04Z"
    },
    {
      "event": "referenced",
      "id": 2745476319,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3NDU0NzYzMTk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2745476319",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "ce1f7cde688fe7f8485579925c1e6c6f63a454f7",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/ce1f7cde688fe7f8485579925c1e6c6f63a454f7",
      "created_at": "2019-10-25T21:05:13Z"
    },
    {
      "event": "referenced",
      "id": 2745476322,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3NDU0NzYzMjI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2745476322",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "5ca467def2281191a8b04cdf8642fae82611dd69",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/5ca467def2281191a8b04cdf8642fae82611dd69",
      "created_at": "2019-10-25T21:05:13Z"
    },
    {
      "event": "referenced",
      "id": 2745476329,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3NDU0NzYzMjk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2745476329",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "9ee0f740ec6dd281ab1e295c1c4a136ac804e787",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/9ee0f740ec6dd281ab1e295c1c4a136ac804e787",
      "created_at": "2019-10-25T21:05:13Z"
    },
    {
      "event": "referenced",
      "id": 2745476335,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3NDU0NzYzMzU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2745476335",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "0800db90d88991f79912ada74b5760c811dca934",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/0800db90d88991f79912ada74b5760c811dca934",
      "created_at": "2019-10-25T21:05:13Z"
    },
    {
      "event": "commented",
      "id": 546514449,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU0NjUxNDQ0OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/546514449",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-25T21:09:34Z",
      "updated_at": "2019-10-25T21:09:34Z",
      "author_association": "MEMBER",
      "body": "As per the wallet meeting today, we will be using @ryanofsky's branch (with some modification maybe) and split it up into multiple PRs in an attempt to reduce review burden.",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-546514449",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16341"
    },
    {
      "event": "closed",
      "id": 2745485295,
      "node_id": "MDExOkNsb3NlZEV2ZW50Mjc0NTQ4NTI5NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2745485295",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-25T21:09:35Z"
    },
    {
      "event": "mentioned",
      "id": 2745485308,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mjc0NTQ4NTMwOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2745485308",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-25T21:09:35Z"
    },
    {
      "event": "subscribed",
      "id": 2745485309,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI3NDU0ODUzMDk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2745485309",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-25T21:09:35Z"
    },
    {
      "event": "referenced",
      "id": 2745878480,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3NDU4Nzg0ODA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2745878480",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "e69d048559f2cdf55a6d13add6abb1794e17c068",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/e69d048559f2cdf55a6d13add6abb1794e17c068",
      "created_at": "2019-10-26T05:11:37Z"
    },
    {
      "event": "referenced",
      "id": 2745878481,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3NDU4Nzg0ODE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2745878481",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "de888ec3d9d806ae0d401be7148e77da8482cd12",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/de888ec3d9d806ae0d401be7148e77da8482cd12",
      "created_at": "2019-10-26T05:11:37Z"
    },
    {
      "event": "referenced",
      "id": 2745878482,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3NDU4Nzg0ODI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2745878482",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "5bd8339ea00d570a4785ee44ffb7527e6b624103",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/5bd8339ea00d570a4785ee44ffb7527e6b624103",
      "created_at": "2019-10-26T05:11:38Z"
    },
    {
      "event": "referenced",
      "id": 2745878483,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3NDU4Nzg0ODM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2745878483",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "5f086a126232d89c7bddafc0b6d1a1eff8854f7e",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/5f086a126232d89c7bddafc0b6d1a1eff8854f7e",
      "created_at": "2019-10-26T05:11:38Z"
    },
    {
      "event": "referenced",
      "id": 2746072407,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3NDYwNzI0MDc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2746072407",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "9e30fef671e8699b9c2c5a15a2322524eac6730e",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/9e30fef671e8699b9c2c5a15a2322524eac6730e",
      "created_at": "2019-10-26T13:27:44Z"
    },
    {
      "event": "referenced",
      "id": 2746072408,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3NDYwNzI0MDg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2746072408",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "e19bacbdc801489a99186c82774e170207d0ca1e",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/e19bacbdc801489a99186c82774e170207d0ca1e",
      "created_at": "2019-10-26T13:27:44Z"
    },
    {
      "event": "referenced",
      "id": 2746072409,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3NDYwNzI0MDk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2746072409",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "44bd915ca05701f1cb809652b1a82c155c8daa03",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/44bd915ca05701f1cb809652b1a82c155c8daa03",
      "created_at": "2019-10-26T13:27:44Z"
    },
    {
      "event": "referenced",
      "id": 2746072410,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3NDYwNzI0MTA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2746072410",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "9875c8922046f2c421ff681bf11ff7564f3199c2",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/9875c8922046f2c421ff681bf11ff7564f3199c2",
      "created_at": "2019-10-26T13:27:44Z"
    },
    {
      "event": "removed_from_project",
      "id": 2746580276,
      "node_id": "MDIzOlJlbW92ZWRGcm9tUHJvamVjdEV2ZW50Mjc0NjU4MDI3Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2746580276",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-27T11:10:40Z",
      "project_card": {
        "id": 24417162,
        "url": "https://api.github.com/projects/columns/cards/24417162",
        "project_id": 481835,
        "project_url": "https://api.github.com/projects/481835",
        "column_name": "Blockers"
      }
    },
    {
      "event": "referenced",
      "id": 2753301357,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3NTMzMDEzNTc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2753301357",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "c1a4093648d4df2a72cdffe6f5b6aee69ec2427c",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/c1a4093648d4df2a72cdffe6f5b6aee69ec2427c",
      "created_at": "2019-10-29T18:22:42Z"
    },
    {
      "event": "referenced",
      "id": 2753301361,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3NTMzMDEzNjE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2753301361",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "9cef9ab9a9bd1a7dfefa579714237b2929b7c6d4",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/9cef9ab9a9bd1a7dfefa579714237b2929b7c6d4",
      "created_at": "2019-10-29T18:22:42Z"
    },
    {
      "event": "referenced",
      "id": 2753301368,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3NTMzMDEzNjg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2753301368",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "aadcaf2e43939a4d916b6d13eacddc2cdb814d7f",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/aadcaf2e43939a4d916b6d13eacddc2cdb814d7f",
      "created_at": "2019-10-29T18:22:42Z"
    },
    {
      "event": "referenced",
      "id": 2753301374,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3NTMzMDEzNzQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2753301374",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "3af7b5d4fae22948d8a64f0f47bdadef53b198a3",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/3af7b5d4fae22948d8a64f0f47bdadef53b198a3",
      "created_at": "2019-10-29T18:22:42Z"
    },
    {
      "event": "referenced",
      "id": 2753434839,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3NTM0MzQ4Mzk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2753434839",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "5d160fa0b723b92c25158d73ceb836c2b8893fa0",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/5d160fa0b723b92c25158d73ceb836c2b8893fa0",
      "created_at": "2019-10-29T19:03:44Z"
    },
    {
      "event": "referenced",
      "id": 2753434846,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3NTM0MzQ4NDY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2753434846",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "a0cf2b646b2480c97b6df6ae28592f20ecfb6e92",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/a0cf2b646b2480c97b6df6ae28592f20ecfb6e92",
      "created_at": "2019-10-29T19:03:44Z"
    },
    {
      "event": "referenced",
      "id": 2753434850,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3NTM0MzQ4NTA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2753434850",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "0a682f3eef3c878c7ad6208e6fd5ca963db0d153",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/0a682f3eef3c878c7ad6208e6fd5ca963db0d153",
      "created_at": "2019-10-29T19:03:44Z"
    },
    {
      "event": "referenced",
      "id": 2753434853,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3NTM0MzQ4NTM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2753434853",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "ac51a6d634a25e0f3be2442e478794a3069ed1ca",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/ac51a6d634a25e0f3be2442e478794a3069ed1ca",
      "created_at": "2019-10-29T19:03:44Z"
    },
    {
      "event": "referenced",
      "id": 2753454949,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3NTM0NTQ5NDk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2753454949",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "ef7e9ec083b10f4180586837e3fb91354f678cc4",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/ef7e9ec083b10f4180586837e3fb91354f678cc4",
      "created_at": "2019-10-29T19:10:08Z"
    },
    {
      "event": "referenced",
      "id": 2753454953,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3NTM0NTQ5NTM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2753454953",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "da93efc30a782a20546e952e22d628480dda2c9a",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/da93efc30a782a20546e952e22d628480dda2c9a",
      "created_at": "2019-10-29T19:10:08Z"
    },
    {
      "event": "referenced",
      "id": 2753454956,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3NTM0NTQ5NTY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2753454956",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "16a22682d0f2dccd78e39276e89eddb396ea73a6",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/16a22682d0f2dccd78e39276e89eddb396ea73a6",
      "created_at": "2019-10-29T19:10:08Z"
    },
    {
      "event": "referenced",
      "id": 2753454959,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3NTM0NTQ5NTk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2753454959",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "3a09dd5a8e53ded606aa637f0c9d2046fed5fab8",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/3a09dd5a8e53ded606aa637f0c9d2046fed5fab8",
      "created_at": "2019-10-29T19:10:08Z"
    },
    {
      "event": "referenced",
      "id": 2756671226,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3NTY2NzEyMjY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2756671226",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "9134d9089a68966f09f7f9e79893e9678072803d",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/9134d9089a68966f09f7f9e79893e9678072803d",
      "created_at": "2019-10-30T16:12:26Z"
    },
    {
      "event": "referenced",
      "id": 2756671227,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3NTY2NzEyMjc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2756671227",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "187064f9174b0b064a4342358f601b7adae8b0fa",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/187064f9174b0b064a4342358f601b7adae8b0fa",
      "created_at": "2019-10-30T16:12:27Z"
    },
    {
      "event": "referenced",
      "id": 2756671230,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3NTY2NzEyMzA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2756671230",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "df1cdab34991f1f1a2aa6569e6ee52cc1a579115",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/df1cdab34991f1f1a2aa6569e6ee52cc1a579115",
      "created_at": "2019-10-30T16:12:27Z"
    },
    {
      "event": "referenced",
      "id": 2756671234,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3NTY2NzEyMzQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2756671234",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "5402e001dbf87eec6868b7326f33ed3cbb3761db",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/5402e001dbf87eec6868b7326f33ed3cbb3761db",
      "created_at": "2019-10-30T16:12:27Z"
    },
    {
      "event": "referenced",
      "id": 2758817776,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3NTg4MTc3NzY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2758817776",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "8afbe97853b2a646c57d174725a53bd9c0ab1b42",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/8afbe97853b2a646c57d174725a53bd9c0ab1b42",
      "created_at": "2019-10-31T08:17:56Z"
    },
    {
      "event": "referenced",
      "id": 2758817781,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3NTg4MTc3ODE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2758817781",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "b3b53e404b17a121bfc2495c0c1e6f6d29956f13",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/b3b53e404b17a121bfc2495c0c1e6f6d29956f13",
      "created_at": "2019-10-31T08:17:56Z"
    },
    {
      "event": "referenced",
      "id": 2758817783,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3NTg4MTc3ODM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2758817783",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "7cd863f7d8eeb6244b231802c0ccb3382fd4b867",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/7cd863f7d8eeb6244b231802c0ccb3382fd4b867",
      "created_at": "2019-10-31T08:17:56Z"
    },
    {
      "event": "referenced",
      "id": 2758817786,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3NTg4MTc3ODY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2758817786",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "7ee67e3d1483a3b303897c9fe8e0ee8653777e25",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/7ee67e3d1483a3b303897c9fe8e0ee8653777e25",
      "created_at": "2019-10-31T08:17:56Z"
    },
    {
      "event": "referenced",
      "id": 2768425544,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3Njg0MjU1NDQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2768425544",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "71f1a7ff10408211b7f86ee3c932a3d264441643",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/71f1a7ff10408211b7f86ee3c932a3d264441643",
      "created_at": "2019-11-04T16:46:58Z"
    },
    {
      "event": "referenced",
      "id": 2768425548,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3Njg0MjU1NDg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2768425548",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "922252b6ff74a9d0da60c7bd87217eb5b938e220",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/922252b6ff74a9d0da60c7bd87217eb5b938e220",
      "created_at": "2019-11-04T16:46:58Z"
    },
    {
      "event": "referenced",
      "id": 2768425554,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3Njg0MjU1NTQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2768425554",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "68a35f25bf3036d3390243c1a06887681d144586",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/68a35f25bf3036d3390243c1a06887681d144586",
      "created_at": "2019-11-04T16:46:58Z"
    },
    {
      "event": "referenced",
      "id": 2768425561,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3Njg0MjU1NjE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2768425561",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "85a1bb8e3a363eeca8f15505b716d6c04733cd11",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/85a1bb8e3a363eeca8f15505b716d6c04733cd11",
      "created_at": "2019-11-04T16:46:58Z"
    },
    {
      "event": "referenced",
      "id": 2768756266,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3Njg3NTYyNjY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2768756266",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "7a0cc863d45053f124da33c9565f52694cb33c07",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/7a0cc863d45053f124da33c9565f52694cb33c07",
      "created_at": "2019-11-04T18:29:24Z"
    },
    {
      "event": "referenced",
      "id": 2768756270,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3Njg3NTYyNzA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2768756270",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "7fff46e2a6d91d0142f07bfd289e460ec117c2e9",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/7fff46e2a6d91d0142f07bfd289e460ec117c2e9",
      "created_at": "2019-11-04T18:29:24Z"
    },
    {
      "event": "referenced",
      "id": 2768756273,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3Njg3NTYyNzM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2768756273",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "236a6440d68bdf24e268cf9af1ef0ef653b02aac",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/236a6440d68bdf24e268cf9af1ef0ef653b02aac",
      "created_at": "2019-11-04T18:29:24Z"
    },
    {
      "event": "referenced",
      "id": 2768756278,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3Njg3NTYyNzg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2768756278",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "c4f33a2c168a0164acff54d036afd2ada4e563d7",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/c4f33a2c168a0164acff54d036afd2ada4e563d7",
      "created_at": "2019-11-04T18:29:24Z"
    },
    {
      "event": "referenced",
      "id": 2768761105,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3Njg3NjExMDU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2768761105",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "f6285f6bcd8974124d846ef7bf463838339e0574",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/f6285f6bcd8974124d846ef7bf463838339e0574",
      "created_at": "2019-11-04T18:30:56Z"
    },
    {
      "event": "referenced",
      "id": 2768761107,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3Njg3NjExMDc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2768761107",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "32321348e217fba280f0a6ab7e75e84e1b3750a8",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/32321348e217fba280f0a6ab7e75e84e1b3750a8",
      "created_at": "2019-11-04T18:30:56Z"
    },
    {
      "event": "referenced",
      "id": 2768761109,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3Njg3NjExMDk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2768761109",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "ef5cb38fbe104b1a61676a9d8163f6e72108dd6f",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/ef5cb38fbe104b1a61676a9d8163f6e72108dd6f",
      "created_at": "2019-11-04T18:30:56Z"
    },
    {
      "event": "referenced",
      "id": 2768761112,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3Njg3NjExMTI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2768761112",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "a9a1b186cf414cb4319f8f5e0b7e9e6f07e5af6d",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/a9a1b186cf414cb4319f8f5e0b7e9e6f07e5af6d",
      "created_at": "2019-11-04T18:30:56Z"
    },
    {
      "event": "referenced",
      "id": 2768906343,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3Njg5MDYzNDM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2768906343",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "13925af2c6b6d0e2eee3186a242542f26fdee225",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/13925af2c6b6d0e2eee3186a242542f26fdee225",
      "created_at": "2019-11-04T19:19:42Z"
    },
    {
      "event": "referenced",
      "id": 2768906345,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3Njg5MDYzNDU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2768906345",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "17baba8248ed16b53a310f7f67e7178a037aceba",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/17baba8248ed16b53a310f7f67e7178a037aceba",
      "created_at": "2019-11-04T19:19:42Z"
    },
    {
      "event": "referenced",
      "id": 2768906348,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3Njg5MDYzNDg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2768906348",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "eba7066b48310a35f63dd8528a20abe3e66a3638",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/eba7066b48310a35f63dd8528a20abe3e66a3638",
      "created_at": "2019-11-04T19:19:42Z"
    },
    {
      "event": "referenced",
      "id": 2768906352,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3Njg5MDYzNTI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2768906352",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "86ad24f6a442f0ad0609390e20cefde6cf846024",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/86ad24f6a442f0ad0609390e20cefde6cf846024",
      "created_at": "2019-11-04T19:19:42Z"
    },
    {
      "event": "referenced",
      "id": 2769562003,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3Njk1NjIwMDM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2769562003",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "4e9c2a59f500d017dbc1e3b6a3548f7b93977459",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/4e9c2a59f500d017dbc1e3b6a3548f7b93977459",
      "created_at": "2019-11-04T23:18:52Z"
    },
    {
      "event": "referenced",
      "id": 2769562004,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3Njk1NjIwMDQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2769562004",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "79c0a7c0d6e1f4b1c5c8187add57e4e6fae04e7d",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/79c0a7c0d6e1f4b1c5c8187add57e4e6fae04e7d",
      "created_at": "2019-11-04T23:18:52Z"
    },
    {
      "event": "referenced",
      "id": 2769562007,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3Njk1NjIwMDc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2769562007",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "d7affb5fc2d6bf089fc8d12a70ab0e9ba6d49f3c",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/d7affb5fc2d6bf089fc8d12a70ab0e9ba6d49f3c",
      "created_at": "2019-11-04T23:18:52Z"
    },
    {
      "event": "referenced",
      "id": 2773218797,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3NzMyMTg3OTc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2773218797",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "8655224ab739c64843b6cbf59e2dac27c40ae048",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/8655224ab739c64843b6cbf59e2dac27c40ae048",
      "created_at": "2019-11-05T22:21:48Z"
    },
    {
      "event": "referenced",
      "id": 2777169510,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3NzcxNjk1MTA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2777169510",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "f034e5748aa2fac9fb8c9010c806d00b2b8d79ba",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/f034e5748aa2fac9fb8c9010c806d00b2b8d79ba",
      "created_at": "2019-11-06T22:52:12Z"
    },
    {
      "event": "referenced",
      "id": 2777169511,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3NzcxNjk1MTE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2777169511",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "8c0367050f93726e2970408702e1eebadadc41dc",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/8c0367050f93726e2970408702e1eebadadc41dc",
      "created_at": "2019-11-06T22:52:12Z"
    },
    {
      "event": "referenced",
      "id": 2777169514,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3NzcxNjk1MTQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2777169514",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "c810114b276b164f847527ea448e89a251227435",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/c810114b276b164f847527ea448e89a251227435",
      "created_at": "2019-11-06T22:52:13Z"
    },
    {
      "event": "referenced",
      "id": 2777197370,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3NzcxOTczNzA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2777197370",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "8b9a1ed9fb5ef64385d3881b1423059e4daaef13",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/8b9a1ed9fb5ef64385d3881b1423059e4daaef13",
      "created_at": "2019-11-06T23:04:33Z"
    },
    {
      "event": "referenced",
      "id": 2777197374,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3NzcxOTczNzQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2777197374",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "228a316e6390e512668095331417a5ae25130170",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/228a316e6390e512668095331417a5ae25130170",
      "created_at": "2019-11-06T23:04:33Z"
    },
    {
      "event": "referenced",
      "id": 2777275215,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3NzcyNzUyMTU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2777275215",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "6b23558a702592b4ad3eb602f71dd76c93752e1e",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/6b23558a702592b4ad3eb602f71dd76c93752e1e",
      "created_at": "2019-11-06T23:43:27Z"
    },
    {
      "event": "referenced",
      "id": 2777275220,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3NzcyNzUyMjA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2777275220",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "a8a61f655d116ecf4cd203d4f874b1ae55fd6c5a",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/a8a61f655d116ecf4cd203d4f874b1ae55fd6c5a",
      "created_at": "2019-11-06T23:43:28Z"
    },
    {
      "event": "referenced",
      "id": 2777275221,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3NzcyNzUyMjE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2777275221",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "c592354dc22c490dda7f8aca1f973b25deb4cc9a",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/c592354dc22c490dda7f8aca1f973b25deb4cc9a",
      "created_at": "2019-11-06T23:43:28Z"
    },
    {
      "event": "referenced",
      "id": 2777275224,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3NzcyNzUyMjQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2777275224",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "ff4c545c3e88c695387c553ca73e742a5cb30eaf",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/ff4c545c3e88c695387c553ca73e742a5cb30eaf",
      "created_at": "2019-11-06T23:43:28Z"
    },
    {
      "event": "referenced",
      "id": 2780087678,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3ODAwODc2Nzg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2780087678",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "062768df72e60a77c45cc4432bb26309b8bd3425",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/062768df72e60a77c45cc4432bb26309b8bd3425",
      "created_at": "2019-11-07T16:53:48Z"
    },
    {
      "event": "referenced",
      "id": 2780087686,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3ODAwODc2ODY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2780087686",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "7daf7ae1ce9df81e4aef2e1a7553c531f7f80dd2",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/7daf7ae1ce9df81e4aef2e1a7553c531f7f80dd2",
      "created_at": "2019-11-07T16:53:49Z"
    },
    {
      "event": "referenced",
      "id": 2780087693,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3ODAwODc2OTM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2780087693",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "5ac919d1ec417b905f86d00701995d308bd6e62d",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/5ac919d1ec417b905f86d00701995d308bd6e62d",
      "created_at": "2019-11-07T16:53:49Z"
    },
    {
      "event": "referenced",
      "id": 2780087702,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3ODAwODc3MDI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2780087702",
      "actor": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "16fa4935b53c1733cb6a228ea671598f6781cab2",
      "commit_url": "https://api.github.com/repos/Sjors/bitcoin/commits/16fa4935b53c1733cb6a228ea671598f6781cab2",
      "created_at": "2019-11-07T16:53:49Z"
    },
    {
      "event": "referenced",
      "id": 2783855095,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3ODM4NTUwOTU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2783855095",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "60b57a3da6e12ca8fec06b528339591dc5cb7535",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/60b57a3da6e12ca8fec06b528339591dc5cb7535",
      "created_at": "2019-11-08T16:46:51Z"
    },
    {
      "event": "referenced",
      "id": 2783855098,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3ODM4NTUwOTg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2783855098",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "2135d369db58d70b7bc6c19520ece861445a35c6",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/2135d369db58d70b7bc6c19520ece861445a35c6",
      "created_at": "2019-11-08T16:46:51Z"
    },
    {
      "event": "referenced",
      "id": 2783855099,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3ODM4NTUwOTk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2783855099",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "e9651318a1fe68d84c950a271e5fb6e32dd75009",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/e9651318a1fe68d84c950a271e5fb6e32dd75009",
      "created_at": "2019-11-08T16:46:51Z"
    },
    {
      "event": "referenced",
      "id": 2783855102,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3ODM4NTUxMDI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2783855102",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "0af77494fe788312e697eca6df990095ce6ceb8d",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/0af77494fe788312e697eca6df990095ce6ceb8d",
      "created_at": "2019-11-08T16:46:51Z"
    },
    {
      "event": "moved_columns_in_project",
      "id": 2789498302,
      "node_id": "MDI2Ok1vdmVkQ29sdW1uc0luUHJvamVjdEV2ZW50Mjc4OTQ5ODMwMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2789498302",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-11T22:14:54Z",
      "project_card": {
        "id": 23601958,
        "url": "https://api.github.com/projects/columns/cards/23601958",
        "project_id": 2806533,
        "project_url": "https://api.github.com/projects/2806533",
        "column_name": "Done",
        "previous_column_name": "PRs"
      }
    },
    {
      "event": "referenced",
      "id": 2800768397,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI4MDA3NjgzOTc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2800768397",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "b118878bb174941ab6fda8b137166f4c19d0833b",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/b118878bb174941ab6fda8b137166f4c19d0833b",
      "created_at": "2019-11-14T22:16:47Z"
    },
    {
      "event": "referenced",
      "id": 2800768399,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI4MDA3NjgzOTk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2800768399",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "a175268f0e406336cc5d97a0ed458b8f4a805b91",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/a175268f0e406336cc5d97a0ed458b8f4a805b91",
      "created_at": "2019-11-14T22:16:47Z"
    },
    {
      "event": "referenced",
      "id": 2800768400,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI4MDA3Njg0MDA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2800768400",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "eb9c2601377d40c4d55798a5ffcbe8c4791b91e5",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/eb9c2601377d40c4d55798a5ffcbe8c4791b91e5",
      "created_at": "2019-11-14T22:16:48Z"
    },
    {
      "event": "referenced",
      "id": 2813456405,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI4MTM0NTY0MDU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2813456405",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "68dbf527192a2386e718579cf5038b2e2787c9fb",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/68dbf527192a2386e718579cf5038b2e2787c9fb",
      "created_at": "2019-11-20T00:06:04Z"
    },
    {
      "event": "referenced",
      "id": 2813463867,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI4MTM0NjM4Njc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2813463867",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "69533f2193556aea7a46b704b6a961dc11957701",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/69533f2193556aea7a46b704b6a961dc11957701",
      "created_at": "2019-11-20T00:10:16Z"
    },
    {
      "event": "referenced",
      "id": 2816160751,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI4MTYxNjA3NTE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2816160751",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "42ddfe9125fce4da6738307ef3acf100daac9d75",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/42ddfe9125fce4da6738307ef3acf100daac9d75",
      "created_at": "2019-11-20T17:31:30Z"
    },
    {
      "event": "referenced",
      "id": 2825118578,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI4MjUxMTg1Nzg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2825118578",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "596f6460f9fd8273665c8754ccd673d93a4f25f0",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/596f6460f9fd8273665c8754ccd673d93a4f25f0",
      "created_at": "2019-11-23T04:19:10Z"
    },
    {
      "event": "referenced",
      "id": 2825118579,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI4MjUxMTg1Nzk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2825118579",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "5daefe31c34e12d2a0678aa93e74e94b76d834f5",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/5daefe31c34e12d2a0678aa93e74e94b76d834f5",
      "created_at": "2019-11-23T04:19:10Z"
    },
    {
      "event": "referenced",
      "id": 2825195041,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI4MjUxOTUwNDE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2825195041",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "a477750ad2b5129a11a148de3bd2eb325ceafa7c",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/a477750ad2b5129a11a148de3bd2eb325ceafa7c",
      "created_at": "2019-11-23T07:42:45Z"
    },
    {
      "event": "referenced",
      "id": 2825195042,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI4MjUxOTUwNDI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2825195042",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "0bd9dd413cf427ee5ba0df305d23c3840f3dede1",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/0bd9dd413cf427ee5ba0df305d23c3840f3dede1",
      "created_at": "2019-11-23T07:42:45Z"
    },
    {
      "event": "referenced",
      "id": 2825195043,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI4MjUxOTUwNDM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2825195043",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "1e0a4bde0ae9131c136cfb6008f8c67d16a68b8b",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/1e0a4bde0ae9131c136cfb6008f8c67d16a68b8b",
      "created_at": "2019-11-23T07:42:45Z"
    },
    {
      "event": "referenced",
      "id": 2830149095,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI4MzAxNDkwOTU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2830149095",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "e2e40428083a968ad4709b93d020cdd4ac5f21c0",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/e2e40428083a968ad4709b93d020cdd4ac5f21c0",
      "created_at": "2019-11-26T00:58:06Z"
    },
    {
      "event": "referenced",
      "id": 2830157478,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI4MzAxNTc0Nzg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2830157478",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "0670042d7e06391a5195b89c94cbc524cac08f23",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/0670042d7e06391a5195b89c94cbc524cac08f23",
      "created_at": "2019-11-26T01:03:03Z"
    },
    {
      "event": "referenced",
      "id": 2832740842,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI4MzI3NDA4NDI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2832740842",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "562a4b0e1c5362689ff63f744737b93abd88677c",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/562a4b0e1c5362689ff63f744737b93abd88677c",
      "created_at": "2019-11-26T17:03:48Z"
    },
    {
      "event": "referenced",
      "id": 2832920410,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI4MzI5MjA0MTA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2832920410",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "dc63fce9d9bd996263ab24e3a523f2b35526a458",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/dc63fce9d9bd996263ab24e3a523f2b35526a458",
      "created_at": "2019-11-26T17:59:16Z"
    },
    {
      "event": "referenced",
      "id": 2832920411,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI4MzI5MjA0MTE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2832920411",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "f540bbe3cc9e4e0249dc8cbe6a99a2cf430b7f45",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/f540bbe3cc9e4e0249dc8cbe6a99a2cf430b7f45",
      "created_at": "2019-11-26T17:59:16Z"
    },
    {
      "event": "referenced",
      "id": 2832920413,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI4MzI5MjA0MTM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2832920413",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "d17100df2e88e84f3d5f2807c5dea168e2d735af",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/d17100df2e88e84f3d5f2807c5dea168e2d735af",
      "created_at": "2019-11-26T17:59:16Z"
    },
    {
      "event": "referenced",
      "id": 2836234766,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI4MzYyMzQ3NjY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2836234766",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "24b25eee17d3166ecdea964d0b7f7029d13bc1df",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/24b25eee17d3166ecdea964d0b7f7029d13bc1df",
      "created_at": "2019-11-27T16:14:52Z"
    },
    {
      "event": "referenced",
      "id": 2836236383,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI4MzYyMzYzODM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2836236383",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "66b82896d5c9d40abb9e62a7035a97025aa8aad3",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/66b82896d5c9d40abb9e62a7035a97025aa8aad3",
      "created_at": "2019-11-27T16:15:18Z"
    },
    {
      "event": "referenced",
      "id": 2845992632,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI4NDU5OTI2MzI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2845992632",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "244f5c23f864068242e6b4721577aaa470762ed5",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/244f5c23f864068242e6b4721577aaa470762ed5",
      "created_at": "2019-12-02T14:56:58Z"
    },
    {
      "event": "referenced",
      "id": 2846472117,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI4NDY0NzIxMTc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2846472117",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "886f1731bec4393dd342403ac34069a3a4f95eea",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/886f1731bec4393dd342403ac34069a3a4f95eea",
      "created_at": "2019-12-02T16:58:59Z"
    },
    {
      "event": "referenced",
      "id": 2862659487,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI4NjI2NTk0ODc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2862659487",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "4099344168289cc74f06a90e16bfb6f46d4aa656",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/4099344168289cc74f06a90e16bfb6f46d4aa656",
      "created_at": "2019-12-06T20:26:13Z"
    },
    {
      "event": "referenced",
      "id": 2878518796,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI4Nzg1MTg3OTY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2878518796",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "f28008ce64da029e0d3aebb2878fe28c4ade3570",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/f28008ce64da029e0d3aebb2878fe28c4ade3570",
      "created_at": "2019-12-12T16:15:52Z"
    },
    {
      "event": "referenced",
      "id": 2882005404,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI4ODIwMDU0MDQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2882005404",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "a3e5ffe1990cb8090779bc00d7f6dd582b0ab083",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/a3e5ffe1990cb8090779bc00d7f6dd582b0ab083",
      "created_at": "2019-12-13T16:59:34Z"
    },
    {
      "event": "referenced",
      "id": 2890603382,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI4OTA2MDMzODI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2890603382",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "216f65542fc0dd660bdc3a99d6ed1f3733cf863f",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/216f65542fc0dd660bdc3a99d6ed1f3733cf863f",
      "created_at": "2019-12-17T16:56:05Z"
    },
    {
      "event": "referenced",
      "id": 2890930330,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI4OTA5MzAzMzA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2890930330",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "eca2793f7188fa819a42207ae621138c48d2578f",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/eca2793f7188fa819a42207ae621138c48d2578f",
      "created_at": "2019-12-17T18:40:09Z"
    },
    {
      "event": "referenced",
      "id": 2914589605,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI5MTQ1ODk2MDU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2914589605",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "ecdbacc563918029a9c72d446701b1087b6c597f",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/ecdbacc563918029a9c72d446701b1087b6c597f",
      "created_at": "2019-12-30T19:55:46Z"
    },
    {
      "event": "referenced",
      "id": 2925236849,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI5MjUyMzY4NDk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2925236849",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "c6a061d10eff4c7dfdf37986dde68abcda3ad4d8",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/c6a061d10eff4c7dfdf37986dde68abcda3ad4d8",
      "created_at": "2020-01-06T19:06:19Z"
    },
    {
      "event": "referenced",
      "id": 2925297444,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI5MjUyOTc0NDQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2925297444",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "05e08b8a3b0dd3e9e99b79c139c238b8855f4df8",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/05e08b8a3b0dd3e9e99b79c139c238b8855f4df8",
      "created_at": "2020-01-06T19:26:14Z"
    },
    {
      "event": "referenced",
      "id": 2925308608,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI5MjUzMDg2MDg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2925308608",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "b890cac2656a0cf6b0ea75b3867c752a02235ad0",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/b890cac2656a0cf6b0ea75b3867c752a02235ad0",
      "created_at": "2020-01-06T19:29:56Z"
    },
    {
      "event": "referenced",
      "id": 2951715205,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI5NTE3MTUyMDU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2951715205",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "c5842c171b9f94411ae826ac6214ec819f8bdda1",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/c5842c171b9f94411ae826ac6214ec819f8bdda1",
      "created_at": "2020-01-15T17:39:16Z"
    },
    {
      "event": "referenced",
      "id": 2952700473,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI5NTI3MDA0NzM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2952700473",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "8540dcb0bb48ce6cecd5c9be422a79f753f9aec0",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/8540dcb0bb48ce6cecd5c9be422a79f753f9aec0",
      "created_at": "2020-01-15T23:43:02Z"
    },
    {
      "event": "referenced",
      "id": 2956680893,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI5NTY2ODA4OTM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2956680893",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "d27e13f5050b1ed24a49e351a2fa607297104794",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/d27e13f5050b1ed24a49e351a2fa607297104794",
      "created_at": "2020-01-17T02:10:00Z"
    },
    {
      "event": "referenced",
      "id": 2958208272,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI5NTgyMDgyNzI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2958208272",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "7a9fef765517d4fe11b68f909582547415753a2f",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/7a9fef765517d4fe11b68f909582547415753a2f",
      "created_at": "2020-01-17T13:49:12Z"
    },
    {
      "event": "referenced",
      "id": 2959042905,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI5NTkwNDI5MDU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2959042905",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "5b580074ba195e2b925900ceb1da067655f9917f",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/5b580074ba195e2b925900ceb1da067655f9917f",
      "created_at": "2020-01-17T18:12:02Z"
    },
    {
      "event": "referenced",
      "id": 2975424158,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI5NzU0MjQxNTg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2975424158",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "415afcccd3e5583defdb76e3a280f48e98983301",
      "commit_url": "https://api.github.com/repos/achow101/bitcoin/commits/415afcccd3e5583defdb76e3a280f48e98983301",
      "created_at": "2020-01-23T21:56:50Z"
    },
    {
      "event": "referenced",
      "id": 3019389065,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMwMTkzODkwNjU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3019389065",
      "actor": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "7f08a0e8013d91e1d5d6700c38791333ef01c992",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f08a0e8013d91e1d5d6700c38791333ef01c992",
      "created_at": "2020-02-07T23:03:04Z"
    },
    {
      "event": "referenced",
      "id": 3117115022,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMxMTcxMTUwMjI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3117115022",
      "actor": {
        "login": "furszy",
        "id": 5377650,
        "node_id": "MDQ6VXNlcjUzNzc2NTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5377650?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/furszy",
        "html_url": "https://github.com/furszy",
        "followers_url": "https://api.github.com/users/furszy/followers",
        "following_url": "https://api.github.com/users/furszy/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/furszy/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/furszy/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/furszy/subscriptions",
        "organizations_url": "https://api.github.com/users/furszy/orgs",
        "repos_url": "https://api.github.com/users/furszy/repos",
        "events_url": "https://api.github.com/users/furszy/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/furszy/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "d58fd6fee1261e73c52ea75efcbee7a38ec46b24",
      "commit_url": "https://api.github.com/repos/PIVX-Project/PIVX/commits/d58fd6fee1261e73c52ea75efcbee7a38ec46b24",
      "created_at": "2020-03-11T02:41:33Z"
    },
    {
      "event": "referenced",
      "id": 3244175940,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMyNDQxNzU5NDA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3244175940",
      "actor": {
        "login": "HashUnlimited",
        "id": 26601261,
        "node_id": "MDQ6VXNlcjI2NjAxMjYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/26601261?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/HashUnlimited",
        "html_url": "https://github.com/HashUnlimited",
        "followers_url": "https://api.github.com/users/HashUnlimited/followers",
        "following_url": "https://api.github.com/users/HashUnlimited/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/HashUnlimited/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/HashUnlimited/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/HashUnlimited/subscriptions",
        "organizations_url": "https://api.github.com/users/HashUnlimited/orgs",
        "repos_url": "https://api.github.com/users/HashUnlimited/repos",
        "events_url": "https://api.github.com/users/HashUnlimited/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/HashUnlimited/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "b329fd5fc140f75da26c61536d01f3240031a99f",
      "commit_url": "https://api.github.com/repos/HashUnlimited/chaincoin/commits/b329fd5fc140f75da26c61536d01f3240031a99f",
      "created_at": "2020-04-17T12:28:27Z"
    },
    {
      "event": "referenced",
      "id": 3244175945,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMyNDQxNzU5NDU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3244175945",
      "actor": {
        "login": "HashUnlimited",
        "id": 26601261,
        "node_id": "MDQ6VXNlcjI2NjAxMjYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/26601261?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/HashUnlimited",
        "html_url": "https://github.com/HashUnlimited",
        "followers_url": "https://api.github.com/users/HashUnlimited/followers",
        "following_url": "https://api.github.com/users/HashUnlimited/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/HashUnlimited/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/HashUnlimited/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/HashUnlimited/subscriptions",
        "organizations_url": "https://api.github.com/users/HashUnlimited/orgs",
        "repos_url": "https://api.github.com/users/HashUnlimited/repos",
        "events_url": "https://api.github.com/users/HashUnlimited/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/HashUnlimited/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "6c2fbd7cbacb3bfe0491e85913051874cdab9a9a",
      "commit_url": "https://api.github.com/repos/HashUnlimited/chaincoin/commits/6c2fbd7cbacb3bfe0491e85913051874cdab9a9a",
      "created_at": "2020-04-17T12:28:27Z"
    },
    {
      "event": "referenced",
      "id": 3244176044,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMyNDQxNzYwNDQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3244176044",
      "actor": {
        "login": "HashUnlimited",
        "id": 26601261,
        "node_id": "MDQ6VXNlcjI2NjAxMjYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/26601261?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/HashUnlimited",
        "html_url": "https://github.com/HashUnlimited",
        "followers_url": "https://api.github.com/users/HashUnlimited/followers",
        "following_url": "https://api.github.com/users/HashUnlimited/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/HashUnlimited/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/HashUnlimited/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/HashUnlimited/subscriptions",
        "organizations_url": "https://api.github.com/users/HashUnlimited/orgs",
        "repos_url": "https://api.github.com/users/HashUnlimited/repos",
        "events_url": "https://api.github.com/users/HashUnlimited/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/HashUnlimited/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "5a0000aa15adfd834968a97d37046b853e0c391d",
      "commit_url": "https://api.github.com/repos/HashUnlimited/chaincoin/commits/5a0000aa15adfd834968a97d37046b853e0c391d",
      "created_at": "2020-04-17T12:28:29Z"
    },
    {
      "event": "referenced",
      "id": 3273545658,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMyNzM1NDU2NTg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3273545658",
      "actor": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "eef90c14ed0f559e3f6e187341009270b84f45cb",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eef90c14ed0f559e3f6e187341009270b84f45cb",
      "created_at": "2020-04-27T00:23:29Z"
    },
    {
      "event": "referenced",
      "id": 3273752608,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMyNzM3NTI2MDg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3273752608",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "46ed584a4ab66b8304f71b2cfd558f01ef732832",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/46ed584a4ab66b8304f71b2cfd558f01ef732832",
      "created_at": "2020-04-27T02:49:11Z"
    },
    {
      "event": "referenced",
      "id": 3863059682,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM4NjMwNTk2ODI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3863059682",
      "actor": {
        "login": "jasonbcox",
        "id": 602513,
        "node_id": "MDQ6VXNlcjYwMjUxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/602513?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jasonbcox",
        "html_url": "https://github.com/jasonbcox",
        "followers_url": "https://api.github.com/users/jasonbcox/followers",
        "following_url": "https://api.github.com/users/jasonbcox/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jasonbcox/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jasonbcox/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jasonbcox/subscriptions",
        "organizations_url": "https://api.github.com/users/jasonbcox/orgs",
        "repos_url": "https://api.github.com/users/jasonbcox/repos",
        "events_url": "https://api.github.com/users/jasonbcox/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jasonbcox/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "343d199ad140198d5a092a02dd7e390d0cda56ca",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/343d199ad140198d5a092a02dd7e390d0cda56ca",
      "created_at": "2020-10-10T19:45:18Z"
    },
    {
      "event": "referenced",
      "id": 3939602591,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM5Mzk2MDI1OTE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3939602591",
      "actor": {
        "login": "van-orton",
        "id": 67952067,
        "node_id": "MDQ6VXNlcjY3OTUyMDY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/67952067?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/van-orton",
        "html_url": "https://github.com/van-orton",
        "followers_url": "https://api.github.com/users/van-orton/followers",
        "following_url": "https://api.github.com/users/van-orton/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/van-orton/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/van-orton/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/van-orton/subscriptions",
        "organizations_url": "https://api.github.com/users/van-orton/orgs",
        "repos_url": "https://api.github.com/users/van-orton/repos",
        "events_url": "https://api.github.com/users/van-orton/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/van-orton/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "1affd98073aa06b581d5c1491829ecdd75427542",
      "commit_url": "https://api.github.com/repos/BitgesellOfficial/bitgesell/commits/1affd98073aa06b581d5c1491829ecdd75427542",
      "created_at": "2020-10-30T05:44:56Z"
    },
    {
      "event": "referenced",
      "id": 4518456888,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ1MTg0NTY4ODg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4518456888",
      "actor": {
        "login": "backpacker69",
        "id": 19201340,
        "node_id": "MDQ6VXNlcjE5MjAxMzQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/19201340?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/backpacker69",
        "html_url": "https://github.com/backpacker69",
        "followers_url": "https://api.github.com/users/backpacker69/followers",
        "following_url": "https://api.github.com/users/backpacker69/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/backpacker69/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/backpacker69/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/backpacker69/subscriptions",
        "organizations_url": "https://api.github.com/users/backpacker69/orgs",
        "repos_url": "https://api.github.com/users/backpacker69/repos",
        "events_url": "https://api.github.com/users/backpacker69/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/backpacker69/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "80c0e7739e8fb9574aa049d4dca880461b389f49",
      "commit_url": "https://api.github.com/repos/peercoin/peercoin/commits/80c0e7739e8fb9574aa049d4dca880461b389f49",
      "created_at": "2021-03-28T19:23:24Z"
    },
    {
      "event": "referenced",
      "id": 4518456890,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ1MTg0NTY4OTA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4518456890",
      "actor": {
        "login": "backpacker69",
        "id": 19201340,
        "node_id": "MDQ6VXNlcjE5MjAxMzQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/19201340?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/backpacker69",
        "html_url": "https://github.com/backpacker69",
        "followers_url": "https://api.github.com/users/backpacker69/followers",
        "following_url": "https://api.github.com/users/backpacker69/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/backpacker69/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/backpacker69/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/backpacker69/subscriptions",
        "organizations_url": "https://api.github.com/users/backpacker69/orgs",
        "repos_url": "https://api.github.com/users/backpacker69/repos",
        "events_url": "https://api.github.com/users/backpacker69/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/backpacker69/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "de5717dd91feb7d1fcbcbf945fbc7b6de21a1eec",
      "commit_url": "https://api.github.com/repos/peercoin/peercoin/commits/de5717dd91feb7d1fcbcbf945fbc7b6de21a1eec",
      "created_at": "2021-03-28T19:23:24Z"
    },
    {
      "event": "referenced",
      "id": 4518456927,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ1MTg0NTY5Mjc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4518456927",
      "actor": {
        "login": "backpacker69",
        "id": 19201340,
        "node_id": "MDQ6VXNlcjE5MjAxMzQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/19201340?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/backpacker69",
        "html_url": "https://github.com/backpacker69",
        "followers_url": "https://api.github.com/users/backpacker69/followers",
        "following_url": "https://api.github.com/users/backpacker69/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/backpacker69/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/backpacker69/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/backpacker69/subscriptions",
        "organizations_url": "https://api.github.com/users/backpacker69/orgs",
        "repos_url": "https://api.github.com/users/backpacker69/repos",
        "events_url": "https://api.github.com/users/backpacker69/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/backpacker69/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "88cdbf163a26a21fbd5d36b8e1de9e1581ca1a0d",
      "commit_url": "https://api.github.com/repos/peercoin/peercoin/commits/88cdbf163a26a21fbd5d36b8e1de9e1581ca1a0d",
      "created_at": "2021-03-28T19:23:25Z"
    },
    {
      "event": "locked",
      "id": 6073978244,
      "node_id": "LOE_lADOABII584brtA7zwAAAAFqCY2E",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6073978244",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-15T10:58:54Z",
      "lock_reason": "resolved"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300812193",
      "pull_request_review_id": 258567976,
      "id": 300812193,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDgxMjE5Mw==",
      "diff_hunk": "@@ -170,7 +193,7 @@ class WalletImpl : public Wallet\n             *name = it->second.name;\n         }\n         if (is_mine) {\n-            *is_mine = IsMine(*m_wallet, dest);\n+            *is_mine = m_wallet->IsMine(dest);",
      "path": "src/interfaces/wallet.cpp",
      "position": 50,
      "original_position": 85,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "1404f8ca2888592ee5072a343e77acba2b3809ed",
      "in_reply_to_id": null,
      "user": {
        "login": "fqlx",
        "id": 1562849,
        "node_id": "MDQ6VXNlcjE1NjI4NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1562849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fqlx",
        "html_url": "https://github.com/fqlx",
        "followers_url": "https://api.github.com/users/fqlx/followers",
        "following_url": "https://api.github.com/users/fqlx/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fqlx/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fqlx/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fqlx/subscriptions",
        "organizations_url": "https://api.github.com/users/fqlx/orgs",
        "repos_url": "https://api.github.com/users/fqlx/repos",
        "events_url": "https://api.github.com/users/fqlx/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fqlx/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm very suspect at this line. We are assigning a dereference pointer. \r\nI think we should prefer `is_mine = &m_wallet->IsMine(dest);`",
      "created_at": "2019-07-05T23:55:04Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300812193",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300812193"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 168,
      "original_line": 168,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300812273",
      "pull_request_review_id": 258567976,
      "id": 300812273,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDgxMjI3Mw==",
      "diff_hunk": "@@ -78,14 +78,14 @@ class Wallet\n     //! Get wallet name.\n     virtual std::string getWalletName() = 0;\n \n-    // Get key from pool.\n-    virtual bool getKeyFromPool(bool internal, CPubKey& pub_key) = 0;\n+    // Get a new address.\n+    virtual bool getNewAddress(const OutputType type, const std::string label, CTxDestination& dest) = 0;\n \n     //! Get public key.\n-    virtual bool getPubKey(const CKeyID& address, CPubKey& pub_key) = 0;\n+    virtual bool getPubKey(const CScript& script, const CKeyID& address, CPubKey& pub_key) = 0;",
      "path": "src/interfaces/wallet.h",
      "position": 5,
      "original_position": 11,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "1404f8ca2888592ee5072a343e77acba2b3809ed",
      "in_reply_to_id": null,
      "user": {
        "login": "fqlx",
        "id": 1562849,
        "node_id": "MDQ6VXNlcjE1NjI4NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1562849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fqlx",
        "html_url": "https://github.com/fqlx",
        "followers_url": "https://api.github.com/users/fqlx/followers",
        "following_url": "https://api.github.com/users/fqlx/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fqlx/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fqlx/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fqlx/subscriptions",
        "organizations_url": "https://api.github.com/users/fqlx/orgs",
        "repos_url": "https://api.github.com/users/fqlx/repos",
        "events_url": "https://api.github.com/users/fqlx/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fqlx/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This name doesn't indicate a boolean return value. 🤔 Why not isPubKey()?",
      "created_at": "2019-07-05T23:56:39Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300812273",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300812273"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 84,
      "original_line": 84,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300812837",
      "pull_request_review_id": 258567976,
      "id": 300812837,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDgxMjgzNw==",
      "diff_hunk": "@@ -83,23 +137,23 @@ bool CBasicKeyStore::GetKey(const CKeyID &address, CKey &keyOut) const\n     return false;\n }\n \n-bool CBasicKeyStore::AddCScript(const CScript& redeemScript)\n+bool FillableSigningProvider::AddCScript(const CScript& redeemScript)\n {\n     if (redeemScript.size() > MAX_SCRIPT_ELEMENT_SIZE)\n-        return error(\"CBasicKeyStore::AddCScript(): redeemScripts > %i bytes are invalid\", MAX_SCRIPT_ELEMENT_SIZE);\n+        return error(\"FillableSigningProvider::AddCScript(): redeemScripts > %i bytes are invalid\", MAX_SCRIPT_ELEMENT_SIZE);",
      "path": "src/script/signingprovider.cpp",
      "position": null,
      "original_position": 144,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "1404f8ca2888592ee5072a343e77acba2b3809ed",
      "in_reply_to_id": null,
      "user": {
        "login": "fqlx",
        "id": 1562849,
        "node_id": "MDQ6VXNlcjE1NjI4NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1562849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fqlx",
        "html_url": "https://github.com/fqlx",
        "followers_url": "https://api.github.com/users/fqlx/followers",
        "following_url": "https://api.github.com/users/fqlx/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fqlx/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fqlx/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fqlx/subscriptions",
        "organizations_url": "https://api.github.com/users/fqlx/orgs",
        "repos_url": "https://api.github.com/users/fqlx/repos",
        "events_url": "https://api.github.com/users/fqlx/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fqlx/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Include `redeemScript.size()` size in the logging so we can debug easier ",
      "created_at": "2019-07-06T00:08:28Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300812837",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300812837"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 143,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300812883",
      "pull_request_review_id": 258567976,
      "id": 300812883,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDgxMjg4Mw==",
      "diff_hunk": "@@ -0,0 +1,37 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SCRIPT_KEYORIGIN_H\n+#define BITCOIN_SCRIPT_KEYORIGIN_H\n+\n+#include <serialize.h>\n+#include <streams.h>\n+#include <vector>\n+\n+struct KeyOriginInfo\n+{\n+    unsigned char fingerprint[4]; //!< First 32 bits of the Hash160 of the public key at the root of the path",
      "path": "src/script/keyorigin.h",
      "position": null,
      "original_position": 14,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "1404f8ca2888592ee5072a343e77acba2b3809ed",
      "in_reply_to_id": null,
      "user": {
        "login": "fqlx",
        "id": 1562849,
        "node_id": "MDQ6VXNlcjE1NjI4NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1562849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fqlx",
        "html_url": "https://github.com/fqlx",
        "followers_url": "https://api.github.com/users/fqlx/followers",
        "following_url": "https://api.github.com/users/fqlx/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fqlx/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fqlx/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fqlx/subscriptions",
        "organizations_url": "https://api.github.com/users/fqlx/orgs",
        "repos_url": "https://api.github.com/users/fqlx/repos",
        "events_url": "https://api.github.com/users/fqlx/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fqlx/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Can we use BYTE to be more informative of the type",
      "created_at": "2019-07-06T00:09:19Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300812883",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300812883"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 13,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300813241",
      "pull_request_review_id": 258567976,
      "id": 300813241,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDgxMzI0MQ==",
      "diff_hunk": "@@ -3083,7 +3097,8 @@ static UniValue listunspent(const JSONRPCRequest& request)\n         entry.pushKV(\"spendable\", out.fSpendable);\n         entry.pushKV(\"solvable\", out.fSolvable);\n         if (out.fSolvable) {\n-            auto descriptor = InferDescriptor(scriptPubKey, *pwallet);\n+            const SigningProvider* provider = pwallet->GetSigningProvider(scriptPubKey);\n+            auto descriptor = InferDescriptor(scriptPubKey, *provider);",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 320,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "1404f8ca2888592ee5072a343e77acba2b3809ed",
      "in_reply_to_id": null,
      "user": {
        "login": "fqlx",
        "id": 1562849,
        "node_id": "MDQ6VXNlcjE1NjI4NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1562849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fqlx",
        "html_url": "https://github.com/fqlx",
        "followers_url": "https://api.github.com/users/fqlx/followers",
        "following_url": "https://api.github.com/users/fqlx/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fqlx/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fqlx/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fqlx/subscriptions",
        "organizations_url": "https://api.github.com/users/fqlx/orgs",
        "repos_url": "https://api.github.com/users/fqlx/repos",
        "events_url": "https://api.github.com/users/fqlx/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fqlx/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`provider` should be checked before dereferencing ",
      "created_at": "2019-07-06T00:17:04Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300813241",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300813241"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3101,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300813882",
      "pull_request_review_id": 258567976,
      "id": 300813882,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDgxMzg4Mg==",
      "diff_hunk": "@@ -1661,71 +1311,48 @@ bool CWallet::DummySignTx(CMutableTransaction &txNew, const std::vector<CTxOut>\n     return true;\n }\n \n-bool CWallet::ImportScripts(const std::set<CScript> scripts)\n+bool CWallet::ImportScripts(const std::set<CScript> scripts, int64_t time)\n {\n-    WalletBatch batch(*database);\n-    for (const auto& entry : scripts) {\n-        if (!HaveCScript(CScriptID(entry)) && !AddCScriptWithDB(batch, entry)) {\n-            return false;\n-        }\n+    auto spk_man =GetLegacyScriptPubKeyMan();\n+    if (!spk_man) {\n+        return false;\n     }\n-    return true;\n+    LOCK(spk_man->cs_KeyStore);\n+    return GetLegacyScriptPubKeyMan()->ImportScripts(scripts, time);\n }\n \n bool CWallet::ImportPrivKeys(const std::map<CKeyID, CKey>& privkey_map, const int64_t timestamp)\n {\n-    WalletBatch batch(*database);\n-    for (const auto& entry : privkey_map) {\n-        const CKey& key = entry.second;\n-        CPubKey pubkey = key.GetPubKey();\n-        const CKeyID& id = entry.first;\n-        assert(key.VerifyPubKey(pubkey));\n-        mapKeyMetadata[id].nCreateTime = timestamp;\n-        // If the private key is not present in the wallet, insert it.\n-        if (!HaveKey(id) && !AddKeyPubKeyWithDB(batch, key, pubkey)) {\n-            return false;\n-        }\n-        UpdateTimeFirstKey(timestamp);\n+    auto spk_man =GetLegacyScriptPubKeyMan();\n+    if (!spk_man) {\n+        return false;\n     }\n-    return true;\n+    LOCK(spk_man->cs_KeyStore);\n+    return GetLegacyScriptPubKeyMan()->ImportPrivKeys(privkey_map, timestamp);\n }\n \n bool CWallet::ImportPubKeys(const std::vector<CKeyID>& ordered_pubkeys, const std::map<CKeyID, CPubKey>& pubkey_map, const std::map<CKeyID, std::pair<CPubKey, KeyOriginInfo>>& key_origins, const bool add_keypool, const bool internal, const int64_t timestamp)\n {\n-    WalletBatch batch(*database);\n-    for (const auto& entry : key_origins) {\n-        AddKeyOriginWithDB(batch, entry.second.first, entry.second.second);\n-    }\n-    for (const CKeyID& id : ordered_pubkeys) {\n-        auto entry = pubkey_map.find(id);\n-        if (entry == pubkey_map.end()) {\n-            continue;\n-        }\n-        const CPubKey& pubkey = entry->second;\n-        CPubKey temp;\n-        if (!GetPubKey(id, temp) && !AddWatchOnlyWithDB(batch, GetScriptForRawPubKey(pubkey), timestamp)) {\n-            return false;\n-        }\n-        mapKeyMetadata[id].nCreateTime = timestamp;\n-\n-        // Add to keypool only works with pubkeys\n-        if (add_keypool) {\n-            AddKeypoolPubkeyWithDB(pubkey, internal, batch);\n-            NotifyCanGetAddressesChanged();\n-        }\n+    auto spk_man =GetLegacyScriptPubKeyMan();\n+    if (!spk_man) {\n+        return false;\n     }\n-    return true;\n+    LOCK(spk_man->cs_KeyStore);\n+    return GetLegacyScriptPubKeyMan()->ImportPubKeys(ordered_pubkeys, pubkey_map, key_origins, add_keypool, internal, timestamp);\n }\n \n bool CWallet::ImportScriptPubKeys(const std::string& label, const std::set<CScript>& script_pub_keys, const bool have_solving_data, const bool internal, const int64_t timestamp)\n {\n+    auto spk_man =GetLegacyScriptPubKeyMan();",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 695,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "1404f8ca2888592ee5072a343e77acba2b3809ed",
      "in_reply_to_id": null,
      "user": {
        "login": "fqlx",
        "id": 1562849,
        "node_id": "MDQ6VXNlcjE1NjI4NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1562849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fqlx",
        "html_url": "https://github.com/fqlx",
        "followers_url": "https://api.github.com/users/fqlx/followers",
        "following_url": "https://api.github.com/users/fqlx/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fqlx/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fqlx/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fqlx/subscriptions",
        "organizations_url": "https://api.github.com/users/fqlx/orgs",
        "repos_url": "https://api.github.com/users/fqlx/repos",
        "events_url": "https://api.github.com/users/fqlx/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fqlx/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Please add space around operators ",
      "created_at": "2019-07-06T00:31:41Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300813882",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300813882"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1346,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300818049",
      "pull_request_review_id": 258567976,
      "id": 300818049,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDgxODA0OQ==",
      "diff_hunk": "@@ -32,37 +92,31 @@ void CBasicKeyStore::ImplicitlyLearnRelatedKeyScripts(const CPubKey& pubkey)\n     }\n }\n \n-bool CBasicKeyStore::GetPubKey(const CKeyID &address, CPubKey &vchPubKeyOut) const\n+bool FillableSigningProvider::GetPubKey(const CKeyID &address, CPubKey &vchPubKeyOut) const\n {\n     CKey key;\n     if (!GetKey(address, key)) {\n-        LOCK(cs_KeyStore);\n-        WatchKeyMap::const_iterator it = mapWatchKeys.find(address);\n-        if (it != mapWatchKeys.end()) {\n-            vchPubKeyOut = it->second;\n-            return true;\n-        }\n         return false;\n     }\n     vchPubKeyOut = key.GetPubKey();\n     return true;\n }\n \n-bool CBasicKeyStore::AddKeyPubKey(const CKey& key, const CPubKey &pubkey)\n+bool FillableSigningProvider::AddKeyPubKey(const CKey& key, const CPubKey &pubkey)",
      "path": "src/script/signingprovider.cpp",
      "position": null,
      "original_position": 106,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "1404f8ca2888592ee5072a343e77acba2b3809ed",
      "in_reply_to_id": null,
      "user": {
        "login": "fqlx",
        "id": 1562849,
        "node_id": "MDQ6VXNlcjE1NjI4NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1562849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fqlx",
        "html_url": "https://github.com/fqlx",
        "followers_url": "https://api.github.com/users/fqlx/followers",
        "following_url": "https://api.github.com/users/fqlx/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fqlx/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fqlx/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fqlx/subscriptions",
        "organizations_url": "https://api.github.com/users/fqlx/orgs",
        "repos_url": "https://api.github.com/users/fqlx/repos",
        "events_url": "https://api.github.com/users/fqlx/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fqlx/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Could be void since we always return true.",
      "created_at": "2019-07-06T03:02:04Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300818049",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300818049"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 105,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300818112",
      "pull_request_review_id": 258567976,
      "id": 300818112,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDgxODExMg==",
      "diff_hunk": "@@ -140,14 +140,37 @@ class WalletImpl : public Wallet\n     void abortRescan() override { m_wallet->AbortRescan(); }\n     bool backupWallet(const std::string& filename) override { return m_wallet->BackupWallet(filename); }\n     std::string getWalletName() override { return m_wallet->GetName(); }\n-    bool getKeyFromPool(bool internal, CPubKey& pub_key) override\n+    bool getNewAddress(const OutputType type, const std::string label, CTxDestination& dest) override\n     {\n-        return m_wallet->GetKeyFromPool(pub_key, internal);\n+        LOCK(m_wallet->cs_wallet);\n+        std::string error;",
      "path": "src/interfaces/wallet.cpp",
      "position": 10,
      "original_position": 45,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "1404f8ca2888592ee5072a343e77acba2b3809ed",
      "in_reply_to_id": null,
      "user": {
        "login": "fqlx",
        "id": 1562849,
        "node_id": "MDQ6VXNlcjE1NjI4NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1562849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fqlx",
        "html_url": "https://github.com/fqlx",
        "followers_url": "https://api.github.com/users/fqlx/followers",
        "following_url": "https://api.github.com/users/fqlx/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fqlx/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fqlx/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fqlx/subscriptions",
        "organizations_url": "https://api.github.com/users/fqlx/orgs",
        "repos_url": "https://api.github.com/users/fqlx/repos",
        "events_url": "https://api.github.com/users/fqlx/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fqlx/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Looks like we could remove error and use empty string `\"\"`  below. ",
      "created_at": "2019-07-06T03:05:57Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300818112",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300818112"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 118,
      "original_line": 118,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300818241",
      "pull_request_review_id": 258567976,
      "id": 300818241,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDgxODI0MQ==",
      "diff_hunk": "@@ -4560,31 +3942,141 @@ std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outpu\n     return groups;\n }\n \n-bool CWallet::GetKeyOrigin(const CKeyID& keyID, KeyOriginInfo& info) const\n+bool CWallet::SetCrypted()\n {\n-    CKeyMetadata meta;\n+    LOCK(cs_wallet);\n+    if (fUseCrypto)\n+        return true;\n+    fUseCrypto = true;\n+    return true;",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 1491,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "1404f8ca2888592ee5072a343e77acba2b3809ed",
      "in_reply_to_id": null,
      "user": {
        "login": "fqlx",
        "id": 1562849,
        "node_id": "MDQ6VXNlcjE1NjI4NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1562849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fqlx",
        "html_url": "https://github.com/fqlx",
        "followers_url": "https://api.github.com/users/fqlx/followers",
        "following_url": "https://api.github.com/users/fqlx/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fqlx/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fqlx/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fqlx/subscriptions",
        "organizations_url": "https://api.github.com/users/fqlx/orgs",
        "repos_url": "https://api.github.com/users/fqlx/repos",
        "events_url": "https://api.github.com/users/fqlx/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fqlx/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Is this done as an optimization? I'd prefer:\r\n```\r\nvoid CWallet::SetCrypted()\r\n{ \r\n    LOCK(cs_wallet);\r\n    fUseCrypto = true;\r\n}\r\n```",
      "created_at": "2019-07-06T03:14:11Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300818241",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300818241"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4002,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300818321",
      "pull_request_review_id": 258575305,
      "id": 300818321,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDgxODMyMQ==",
      "diff_hunk": "@@ -170,7 +193,7 @@ class WalletImpl : public Wallet\n             *name = it->second.name;\n         }\n         if (is_mine) {\n-            *is_mine = IsMine(*m_wallet, dest);\n+            *is_mine = m_wallet->IsMine(dest);",
      "path": "src/interfaces/wallet.cpp",
      "position": 50,
      "original_position": 85,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "1404f8ca2888592ee5072a343e77acba2b3809ed",
      "in_reply_to_id": 300812193,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Please try to understand the code you're commenting on.",
      "created_at": "2019-07-06T03:18:57Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300818321",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300818321"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 168,
      "original_line": 168,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300818335",
      "pull_request_review_id": 258575318,
      "id": 300818335,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDgxODMzNQ==",
      "diff_hunk": "@@ -0,0 +1,37 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SCRIPT_KEYORIGIN_H\n+#define BITCOIN_SCRIPT_KEYORIGIN_H\n+\n+#include <serialize.h>\n+#include <streams.h>\n+#include <vector>\n+\n+struct KeyOriginInfo\n+{\n+    unsigned char fingerprint[4]; //!< First 32 bits of the Hash160 of the public key at the root of the path",
      "path": "src/script/keyorigin.h",
      "position": null,
      "original_position": 14,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "1404f8ca2888592ee5072a343e77acba2b3809ed",
      "in_reply_to_id": 300812883,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "C++11 does not have such a type.",
      "created_at": "2019-07-06T03:19:45Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300818335",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300818335"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 13,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300819296",
      "pull_request_review_id": 258576343,
      "id": 300819296,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDgxOTI5Ng==",
      "diff_hunk": "@@ -170,7 +193,7 @@ class WalletImpl : public Wallet\n             *name = it->second.name;\n         }\n         if (is_mine) {\n-            *is_mine = IsMine(*m_wallet, dest);\n+            *is_mine = m_wallet->IsMine(dest);",
      "path": "src/interfaces/wallet.cpp",
      "position": 50,
      "original_position": 85,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "1404f8ca2888592ee5072a343e77acba2b3809ed",
      "in_reply_to_id": 300812193,
      "user": {
        "login": "dandv",
        "id": 33569,
        "node_id": "MDQ6VXNlcjMzNTY5",
        "avatar_url": "https://avatars.githubusercontent.com/u/33569?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dandv",
        "html_url": "https://github.com/dandv",
        "followers_url": "https://api.github.com/users/dandv/followers",
        "following_url": "https://api.github.com/users/dandv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dandv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dandv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dandv/subscriptions",
        "organizations_url": "https://api.github.com/users/dandv/orgs",
        "repos_url": "https://api.github.com/users/dandv/repos",
        "events_url": "https://api.github.com/users/dandv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dandv/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@sipa: Clarifying what you're referring to would be both constructive and polite :)",
      "created_at": "2019-07-06T04:12:08Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300819296",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300819296"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 168,
      "original_line": 168,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300819341",
      "pull_request_review_id": 258576394,
      "id": 300819341,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDgxOTM0MQ==",
      "diff_hunk": "@@ -78,14 +78,14 @@ class Wallet\n     //! Get wallet name.\n     virtual std::string getWalletName() = 0;\n \n-    // Get key from pool.\n-    virtual bool getKeyFromPool(bool internal, CPubKey& pub_key) = 0;\n+    // Get a new address.\n+    virtual bool getNewAddress(const OutputType type, const std::string label, CTxDestination& dest) = 0;\n \n     //! Get public key.\n-    virtual bool getPubKey(const CKeyID& address, CPubKey& pub_key) = 0;\n+    virtual bool getPubKey(const CScript& script, const CKeyID& address, CPubKey& pub_key) = 0;",
      "path": "src/interfaces/wallet.h",
      "position": 5,
      "original_position": 11,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "1404f8ca2888592ee5072a343e77acba2b3809ed",
      "in_reply_to_id": 300812273,
      "user": {
        "login": "dandv",
        "id": 33569,
        "node_id": "MDQ6VXNlcjMzNTY5",
        "avatar_url": "https://avatars.githubusercontent.com/u/33569?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dandv",
        "html_url": "https://github.com/dandv",
        "followers_url": "https://api.github.com/users/dandv/followers",
        "following_url": "https://api.github.com/users/dandv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dandv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dandv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dandv/subscriptions",
        "organizations_url": "https://api.github.com/users/dandv/orgs",
        "repos_url": "https://api.github.com/users/dandv/repos",
        "events_url": "https://api.github.com/users/dandv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dandv/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The old `get...Key` returning `bool` smells: either the pubKey is a boolean, or `getPubKey` has a side effect of getting the key somewhere else instead of as a result. Could this PR fix that by renaming it to `isPubKey()`?",
      "created_at": "2019-07-06T04:14:54Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300819341",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300819341"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 84,
      "original_line": 84,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300819367",
      "pull_request_review_id": 258576422,
      "id": 300819367,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDgxOTM2Nw==",
      "diff_hunk": "@@ -1661,71 +1311,48 @@ bool CWallet::DummySignTx(CMutableTransaction &txNew, const std::vector<CTxOut>\n     return true;\n }\n \n-bool CWallet::ImportScripts(const std::set<CScript> scripts)\n+bool CWallet::ImportScripts(const std::set<CScript> scripts, int64_t time)\n {\n-    WalletBatch batch(*database);\n-    for (const auto& entry : scripts) {\n-        if (!HaveCScript(CScriptID(entry)) && !AddCScriptWithDB(batch, entry)) {\n-            return false;\n-        }\n+    auto spk_man =GetLegacyScriptPubKeyMan();\n+    if (!spk_man) {\n+        return false;\n     }\n-    return true;\n+    LOCK(spk_man->cs_KeyStore);\n+    return GetLegacyScriptPubKeyMan()->ImportScripts(scripts, time);\n }\n \n bool CWallet::ImportPrivKeys(const std::map<CKeyID, CKey>& privkey_map, const int64_t timestamp)\n {\n-    WalletBatch batch(*database);\n-    for (const auto& entry : privkey_map) {\n-        const CKey& key = entry.second;\n-        CPubKey pubkey = key.GetPubKey();\n-        const CKeyID& id = entry.first;\n-        assert(key.VerifyPubKey(pubkey));\n-        mapKeyMetadata[id].nCreateTime = timestamp;\n-        // If the private key is not present in the wallet, insert it.\n-        if (!HaveKey(id) && !AddKeyPubKeyWithDB(batch, key, pubkey)) {\n-            return false;\n-        }\n-        UpdateTimeFirstKey(timestamp);\n+    auto spk_man =GetLegacyScriptPubKeyMan();\n+    if (!spk_man) {\n+        return false;\n     }\n-    return true;\n+    LOCK(spk_man->cs_KeyStore);\n+    return GetLegacyScriptPubKeyMan()->ImportPrivKeys(privkey_map, timestamp);\n }\n \n bool CWallet::ImportPubKeys(const std::vector<CKeyID>& ordered_pubkeys, const std::map<CKeyID, CPubKey>& pubkey_map, const std::map<CKeyID, std::pair<CPubKey, KeyOriginInfo>>& key_origins, const bool add_keypool, const bool internal, const int64_t timestamp)\n {\n-    WalletBatch batch(*database);\n-    for (const auto& entry : key_origins) {\n-        AddKeyOriginWithDB(batch, entry.second.first, entry.second.second);\n-    }\n-    for (const CKeyID& id : ordered_pubkeys) {\n-        auto entry = pubkey_map.find(id);\n-        if (entry == pubkey_map.end()) {\n-            continue;\n-        }\n-        const CPubKey& pubkey = entry->second;\n-        CPubKey temp;\n-        if (!GetPubKey(id, temp) && !AddWatchOnlyWithDB(batch, GetScriptForRawPubKey(pubkey), timestamp)) {\n-            return false;\n-        }\n-        mapKeyMetadata[id].nCreateTime = timestamp;\n-\n-        // Add to keypool only works with pubkeys\n-        if (add_keypool) {\n-            AddKeypoolPubkeyWithDB(pubkey, internal, batch);\n-            NotifyCanGetAddressesChanged();\n-        }\n+    auto spk_man =GetLegacyScriptPubKeyMan();\n+    if (!spk_man) {\n+        return false;\n     }\n-    return true;\n+    LOCK(spk_man->cs_KeyStore);\n+    return GetLegacyScriptPubKeyMan()->ImportPubKeys(ordered_pubkeys, pubkey_map, key_origins, add_keypool, internal, timestamp);\n }\n \n bool CWallet::ImportScriptPubKeys(const std::string& label, const std::set<CScript>& script_pub_keys, const bool have_solving_data, const bool internal, const int64_t timestamp)\n {\n+    auto spk_man =GetLegacyScriptPubKeyMan();",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 695,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "1404f8ca2888592ee5072a343e77acba2b3809ed",
      "in_reply_to_id": 300813882,
      "user": {
        "login": "dandv",
        "id": 33569,
        "node_id": "MDQ6VXNlcjMzNTY5",
        "avatar_url": "https://avatars.githubusercontent.com/u/33569?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dandv",
        "html_url": "https://github.com/dandv",
        "followers_url": "https://api.github.com/users/dandv/followers",
        "following_url": "https://api.github.com/users/dandv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dandv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dandv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dandv/subscriptions",
        "organizations_url": "https://api.github.com/users/dandv/orgs",
        "repos_url": "https://api.github.com/users/dandv/repos",
        "events_url": "https://api.github.com/users/dandv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dandv/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Such key code would certainly benefit from linting.",
      "created_at": "2019-07-06T04:16:24Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300819367",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300819367"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1346,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300819626",
      "pull_request_review_id": 258576720,
      "id": 300819626,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDgxOTYyNg==",
      "diff_hunk": "@@ -170,7 +193,7 @@ class WalletImpl : public Wallet\n             *name = it->second.name;\n         }\n         if (is_mine) {\n-            *is_mine = IsMine(*m_wallet, dest);\n+            *is_mine = m_wallet->IsMine(dest);",
      "path": "src/interfaces/wallet.cpp",
      "position": 50,
      "original_position": 85,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "1404f8ca2888592ee5072a343e77acba2b3809ed",
      "in_reply_to_id": 300812193,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This line is merely changing how `IsMine` is called. In order to avoid difficulties for reviewers, the existing code (the assignment itself) is not being changed.",
      "created_at": "2019-07-06T04:31:00Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300819626",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300819626"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 168,
      "original_line": 168,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300819651",
      "pull_request_review_id": 258576752,
      "id": 300819651,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDgxOTY1MQ==",
      "diff_hunk": "@@ -78,14 +78,14 @@ class Wallet\n     //! Get wallet name.\n     virtual std::string getWalletName() = 0;\n \n-    // Get key from pool.\n-    virtual bool getKeyFromPool(bool internal, CPubKey& pub_key) = 0;\n+    // Get a new address.\n+    virtual bool getNewAddress(const OutputType type, const std::string label, CTxDestination& dest) = 0;\n \n     //! Get public key.\n-    virtual bool getPubKey(const CKeyID& address, CPubKey& pub_key) = 0;\n+    virtual bool getPubKey(const CScript& script, const CKeyID& address, CPubKey& pub_key) = 0;",
      "path": "src/interfaces/wallet.h",
      "position": 5,
      "original_position": 11,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "1404f8ca2888592ee5072a343e77acba2b3809ed",
      "in_reply_to_id": 300812273,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I am trying to avoid changing existing code as much as possible in order to avoid additional review burden. Feel free to change this later, but changing it here is out of scope for this PR.",
      "created_at": "2019-07-06T04:32:32Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300819651",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300819651"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 84,
      "original_line": 84,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300819681",
      "pull_request_review_id": 258576788,
      "id": 300819681,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDgxOTY4MQ==",
      "diff_hunk": "@@ -83,23 +137,23 @@ bool CBasicKeyStore::GetKey(const CKeyID &address, CKey &keyOut) const\n     return false;\n }\n \n-bool CBasicKeyStore::AddCScript(const CScript& redeemScript)\n+bool FillableSigningProvider::AddCScript(const CScript& redeemScript)\n {\n     if (redeemScript.size() > MAX_SCRIPT_ELEMENT_SIZE)\n-        return error(\"CBasicKeyStore::AddCScript(): redeemScripts > %i bytes are invalid\", MAX_SCRIPT_ELEMENT_SIZE);\n+        return error(\"FillableSigningProvider::AddCScript(): redeemScripts > %i bytes are invalid\", MAX_SCRIPT_ELEMENT_SIZE);",
      "path": "src/script/signingprovider.cpp",
      "position": null,
      "original_position": 144,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "1404f8ca2888592ee5072a343e77acba2b3809ed",
      "in_reply_to_id": 300812837,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is part of a scripted diff. Such a change would both not part of the script and be unrelated to this PR.",
      "created_at": "2019-07-06T04:33:40Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300819681",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300819681"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 143,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300819703",
      "pull_request_review_id": 258576815,
      "id": 300819703,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDgxOTcwMw==",
      "diff_hunk": "@@ -32,37 +92,31 @@ void CBasicKeyStore::ImplicitlyLearnRelatedKeyScripts(const CPubKey& pubkey)\n     }\n }\n \n-bool CBasicKeyStore::GetPubKey(const CKeyID &address, CPubKey &vchPubKeyOut) const\n+bool FillableSigningProvider::GetPubKey(const CKeyID &address, CPubKey &vchPubKeyOut) const\n {\n     CKey key;\n     if (!GetKey(address, key)) {\n-        LOCK(cs_KeyStore);\n-        WatchKeyMap::const_iterator it = mapWatchKeys.find(address);\n-        if (it != mapWatchKeys.end()) {\n-            vchPubKeyOut = it->second;\n-            return true;\n-        }\n         return false;\n     }\n     vchPubKeyOut = key.GetPubKey();\n     return true;\n }\n \n-bool CBasicKeyStore::AddKeyPubKey(const CKey& key, const CPubKey &pubkey)\n+bool FillableSigningProvider::AddKeyPubKey(const CKey& key, const CPubKey &pubkey)",
      "path": "src/script/signingprovider.cpp",
      "position": null,
      "original_position": 106,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "1404f8ca2888592ee5072a343e77acba2b3809ed",
      "in_reply_to_id": 300818049,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is existing code and is merely a rename. Changing what it returns is out of scope for this PR.",
      "created_at": "2019-07-06T04:34:53Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300819703",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300819703"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 105,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300819762",
      "pull_request_review_id": 258576853,
      "id": 300819762,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDgxOTc2Mg==",
      "diff_hunk": "@@ -4560,31 +3942,141 @@ std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outpu\n     return groups;\n }\n \n-bool CWallet::GetKeyOrigin(const CKeyID& keyID, KeyOriginInfo& info) const\n+bool CWallet::SetCrypted()\n {\n-    CKeyMetadata meta;\n+    LOCK(cs_wallet);\n+    if (fUseCrypto)\n+        return true;\n+    fUseCrypto = true;\n+    return true;",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 1491,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "1404f8ca2888592ee5072a343e77acba2b3809ed",
      "in_reply_to_id": 300818241,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is moved code and I will not be changing it in order to avoid overburdening reviewers with ensuring that behavior hasn't changed.",
      "created_at": "2019-07-06T04:36:06Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300819762",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300819762"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4002,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300819836",
      "pull_request_review_id": 258576934,
      "id": 300819836,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDgxOTgzNg==",
      "diff_hunk": "@@ -140,14 +140,37 @@ class WalletImpl : public Wallet\n     void abortRescan() override { m_wallet->AbortRescan(); }\n     bool backupWallet(const std::string& filename) override { return m_wallet->BackupWallet(filename); }\n     std::string getWalletName() override { return m_wallet->GetName(); }\n-    bool getKeyFromPool(bool internal, CPubKey& pub_key) override\n+    bool getNewAddress(const OutputType type, const std::string label, CTxDestination& dest) override\n     {\n-        return m_wallet->GetKeyFromPool(pub_key, internal);\n+        LOCK(m_wallet->cs_wallet);\n+        std::string error;",
      "path": "src/interfaces/wallet.cpp",
      "position": 10,
      "original_position": 45,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "1404f8ca2888592ee5072a343e77acba2b3809ed",
      "in_reply_to_id": 300818112,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No, `GetNewAddress` takes a reference which `\"\"` is not.",
      "created_at": "2019-07-06T04:39:57Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300819836",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300819836"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 118,
      "original_line": 118,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300820287",
      "pull_request_review_id": 258577357,
      "id": 300820287,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDgyMDI4Nw==",
      "diff_hunk": "@@ -3083,7 +3097,8 @@ static UniValue listunspent(const JSONRPCRequest& request)\n         entry.pushKV(\"spendable\", out.fSpendable);\n         entry.pushKV(\"solvable\", out.fSolvable);\n         if (out.fSolvable) {\n-            auto descriptor = InferDescriptor(scriptPubKey, *pwallet);\n+            const SigningProvider* provider = pwallet->GetSigningProvider(scriptPubKey);\n+            auto descriptor = InferDescriptor(scriptPubKey, *provider);",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 320,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "1404f8ca2888592ee5072a343e77acba2b3809ed",
      "in_reply_to_id": 300813241,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2019-07-06T04:59:53Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300820287",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300820287"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3101,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300820289",
      "pull_request_review_id": 258577359,
      "id": 300820289,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDgyMDI4OQ==",
      "diff_hunk": "@@ -1661,71 +1311,48 @@ bool CWallet::DummySignTx(CMutableTransaction &txNew, const std::vector<CTxOut>\n     return true;\n }\n \n-bool CWallet::ImportScripts(const std::set<CScript> scripts)\n+bool CWallet::ImportScripts(const std::set<CScript> scripts, int64_t time)\n {\n-    WalletBatch batch(*database);\n-    for (const auto& entry : scripts) {\n-        if (!HaveCScript(CScriptID(entry)) && !AddCScriptWithDB(batch, entry)) {\n-            return false;\n-        }\n+    auto spk_man =GetLegacyScriptPubKeyMan();\n+    if (!spk_man) {\n+        return false;\n     }\n-    return true;\n+    LOCK(spk_man->cs_KeyStore);\n+    return GetLegacyScriptPubKeyMan()->ImportScripts(scripts, time);\n }\n \n bool CWallet::ImportPrivKeys(const std::map<CKeyID, CKey>& privkey_map, const int64_t timestamp)\n {\n-    WalletBatch batch(*database);\n-    for (const auto& entry : privkey_map) {\n-        const CKey& key = entry.second;\n-        CPubKey pubkey = key.GetPubKey();\n-        const CKeyID& id = entry.first;\n-        assert(key.VerifyPubKey(pubkey));\n-        mapKeyMetadata[id].nCreateTime = timestamp;\n-        // If the private key is not present in the wallet, insert it.\n-        if (!HaveKey(id) && !AddKeyPubKeyWithDB(batch, key, pubkey)) {\n-            return false;\n-        }\n-        UpdateTimeFirstKey(timestamp);\n+    auto spk_man =GetLegacyScriptPubKeyMan();\n+    if (!spk_man) {\n+        return false;\n     }\n-    return true;\n+    LOCK(spk_man->cs_KeyStore);\n+    return GetLegacyScriptPubKeyMan()->ImportPrivKeys(privkey_map, timestamp);\n }\n \n bool CWallet::ImportPubKeys(const std::vector<CKeyID>& ordered_pubkeys, const std::map<CKeyID, CPubKey>& pubkey_map, const std::map<CKeyID, std::pair<CPubKey, KeyOriginInfo>>& key_origins, const bool add_keypool, const bool internal, const int64_t timestamp)\n {\n-    WalletBatch batch(*database);\n-    for (const auto& entry : key_origins) {\n-        AddKeyOriginWithDB(batch, entry.second.first, entry.second.second);\n-    }\n-    for (const CKeyID& id : ordered_pubkeys) {\n-        auto entry = pubkey_map.find(id);\n-        if (entry == pubkey_map.end()) {\n-            continue;\n-        }\n-        const CPubKey& pubkey = entry->second;\n-        CPubKey temp;\n-        if (!GetPubKey(id, temp) && !AddWatchOnlyWithDB(batch, GetScriptForRawPubKey(pubkey), timestamp)) {\n-            return false;\n-        }\n-        mapKeyMetadata[id].nCreateTime = timestamp;\n-\n-        // Add to keypool only works with pubkeys\n-        if (add_keypool) {\n-            AddKeypoolPubkeyWithDB(pubkey, internal, batch);\n-            NotifyCanGetAddressesChanged();\n-        }\n+    auto spk_man =GetLegacyScriptPubKeyMan();\n+    if (!spk_man) {\n+        return false;\n     }\n-    return true;\n+    LOCK(spk_man->cs_KeyStore);\n+    return GetLegacyScriptPubKeyMan()->ImportPubKeys(ordered_pubkeys, pubkey_map, key_origins, add_keypool, internal, timestamp);\n }\n \n bool CWallet::ImportScriptPubKeys(const std::string& label, const std::set<CScript>& script_pub_keys, const bool have_solving_data, const bool internal, const int64_t timestamp)\n {\n+    auto spk_man =GetLegacyScriptPubKeyMan();",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 695,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "1404f8ca2888592ee5072a343e77acba2b3809ed",
      "in_reply_to_id": 300813882,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2019-07-06T04:59:59Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300820289",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300820289"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1346,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/310624791",
      "pull_request_review_id": 270793127,
      "id": 310624791,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMDYyNDc5MQ==",
      "diff_hunk": "@@ -144,8 +144,10 @@ static bool SignStep(const SigningProvider& provider, const BaseSignatureCreator\n         ret.push_back(valtype()); // workaround CHECKMULTISIG bug\n         for (size_t i = 1; i < vSolutions.size() - 1; ++i) {\n             CPubKey pubkey = CPubKey(vSolutions[i]);\n-            if (ret.size() < required + 1 && CreateSig(creator, sigdata, provider, sig, pubkey, scriptPubKey, sigversion)) {\n-                ret.push_back(std::move(sig));\n+            if (CreateSig(creator, sigdata, provider, sig, pubkey, scriptPubKey, sigversion)) {\n+                if (ret.size() < required + 1) {",
      "path": "src/script/sign.cpp",
      "position": 10,
      "original_position": 7,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "ca02ac2532ce106d372d420dd2b94ad15e730971",
      "in_reply_to_id": null,
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The nice thing about the way it was done before is that if this expr returns false it would get short circuited and `CreateSig` wouldn't be called too.\r\n\r\nNow it's the opposite. which I think makes less sense when we know that CreateSig is more work than that simple expr, so it might do CreateSig just to fail that if afterwards.",
      "created_at": "2019-08-05T14:12:17Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r310624791",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/310624791"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 151,
      "original_line": 151,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/310639109",
      "pull_request_review_id": 270811579,
      "id": 310639109,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMDYzOTEwOQ==",
      "diff_hunk": "@@ -78,22 +78,30 @@ CTxDestination AddAndGetDestinationForScript(FillableSigningProvider& keystore,\n {\n     // Add script to keystore\n     keystore.AddCScript(script);\n+    ScriptHash sh = ScriptHash(script);\n     // Note that scripts over 520 bytes are not yet supported.\n     switch (type) {\n-    case OutputType::LEGACY:\n-        return ScriptHash(script);\n+    case OutputType::LEGACY: {\n+        keystore.AddCScript(GetScriptForDestination(sh));\n+        return sh;\n+    }\n     case OutputType::P2SH_SEGWIT:\n     case OutputType::BECH32: {\n         CTxDestination witdest = WitnessV0ScriptHash(script);\n         CScript witprog = GetScriptForDestination(witdest);\n         // Check if the resulting program is solvable (i.e. doesn't use an uncompressed key)\n-        if (!IsSolvable(keystore, witprog)) return ScriptHash(script);\n+        if (!IsSolvable(keystore, witprog)) {\n+            keystore.AddCScript(GetScriptForDestination(sh));\n+            return ScriptHash(script);",
      "path": "src/outputtype.cpp",
      "position": null,
      "original_position": 21,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "ca02ac2532ce106d372d420dd2b94ad15e730971",
      "in_reply_to_id": null,
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "shouldn't this be `return sh;`?",
      "created_at": "2019-08-05T14:40:35Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r310639109",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/310639109"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 95,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/310643788",
      "pull_request_review_id": 270817769,
      "id": 310643788,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMDY0Mzc4OA==",
      "diff_hunk": "@@ -144,8 +144,10 @@ static bool SignStep(const SigningProvider& provider, const BaseSignatureCreator\n         ret.push_back(valtype()); // workaround CHECKMULTISIG bug\n         for (size_t i = 1; i < vSolutions.size() - 1; ++i) {\n             CPubKey pubkey = CPubKey(vSolutions[i]);\n-            if (ret.size() < required + 1 && CreateSig(creator, sigdata, provider, sig, pubkey, scriptPubKey, sigversion)) {\n-                ret.push_back(std::move(sig));\n+            if (CreateSig(creator, sigdata, provider, sig, pubkey, scriptPubKey, sigversion)) {\n+                if (ret.size() < required + 1) {",
      "path": "src/script/sign.cpp",
      "position": 10,
      "original_position": 7,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "ca02ac2532ce106d372d420dd2b94ad15e730971",
      "in_reply_to_id": 310624791,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is necessary for `LegacyScriptPubKeyMan::CanProvide` to pass. That uses the `DUMMY_SIGNATURE_CREATOR` which creates dummy signatures without checking whether the `SigningProvider` has the private keys (as it should). However, in `CanProvide`, we want to make sure that we do actually have the private keys, and if the dummy signing returns us dummy signatures that correspond to keys that we don't have, `CanProvide` will fail. So we need it to give us all of the signatures (by putting them in the `sigdata`) so that `CanProvide` can check for whether it actually could sign.",
      "created_at": "2019-08-05T14:49:58Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r310643788",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/310643788"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 151,
      "original_line": 151,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/310651218",
      "pull_request_review_id": 270827605,
      "id": 310651218,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMDY1MTIxOA==",
      "diff_hunk": "@@ -78,22 +78,30 @@ CTxDestination AddAndGetDestinationForScript(FillableSigningProvider& keystore,\n {\n     // Add script to keystore\n     keystore.AddCScript(script);\n+    ScriptHash sh = ScriptHash(script);\n     // Note that scripts over 520 bytes are not yet supported.\n     switch (type) {\n-    case OutputType::LEGACY:\n-        return ScriptHash(script);\n+    case OutputType::LEGACY: {\n+        keystore.AddCScript(GetScriptForDestination(sh));\n+        return sh;\n+    }\n     case OutputType::P2SH_SEGWIT:\n     case OutputType::BECH32: {\n         CTxDestination witdest = WitnessV0ScriptHash(script);\n         CScript witprog = GetScriptForDestination(witdest);\n         // Check if the resulting program is solvable (i.e. doesn't use an uncompressed key)\n-        if (!IsSolvable(keystore, witprog)) return ScriptHash(script);\n+        if (!IsSolvable(keystore, witprog)) {\n+            keystore.AddCScript(GetScriptForDestination(sh));\n+            return ScriptHash(script);",
      "path": "src/outputtype.cpp",
      "position": null,
      "original_position": 21,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "ca02ac2532ce106d372d420dd2b94ad15e730971",
      "in_reply_to_id": 310639109,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, done.",
      "created_at": "2019-08-05T15:05:06Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r310651218",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/310651218"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 95,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/310653358",
      "pull_request_review_id": 270830418,
      "id": 310653358,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMDY1MzM1OA==",
      "diff_hunk": "@@ -90,11 +92,12 @@ static std::shared_ptr<CWallet> LoadWallet(const std::string& name, const fs::pa\n \n static void WalletShowInfo(CWallet* wallet_instance)\n {\n-    LOCK(wallet_instance->cs_wallet);\n+    auto spk_man = wallet_instance->GetLegacyScriptPubKeyMan();\n+    LOCK2(wallet_instance->cs_wallet, spk_man->cs_KeyStore);\n \n     tfm::format(std::cout, \"Wallet info\\n===========\\n\");\n     tfm::format(std::cout, \"Encrypted: %s\\n\", wallet_instance->IsCrypted() ? \"yes\" : \"no\");\n-    tfm::format(std::cout, \"HD (hd seed available): %s\\n\", wallet_instance->GetHDChain().seed_id.IsNull() ? \"no\" : \"yes\");\n+    tfm::format(std::cout, \"HD (hd seed available): %s\\n\", (spk_man && spk_man->GetHDChain().seed_id.IsNull()) ? \"no\" : \"yes\");",
      "path": "src/wallet/wallettool.cpp",
      "position": null,
      "original_position": 31,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "12a411b8a7f77753ec35241d73697f6bbcc77ec1",
      "in_reply_to_id": null,
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "is checking that `spk_man` isn't null needed here assuming you already call `spk_man->cs_KeyStore` which is a deference?",
      "created_at": "2019-08-05T15:09:34Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r310653358",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/310653358"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 100,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/310656799",
      "pull_request_review_id": 270834809,
      "id": 310656799,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMDY1Njc5OQ==",
      "diff_hunk": "@@ -147,9 +147,8 @@ static void TxInErrorToJSON(const CTxIn& txin, UniValue& vErrorsRet, const std::\n     vErrorsRet.push_back(entry);\n }\n \n-UniValue SignTransaction(CMutableTransaction& mtx, const UniValue& prevTxsUnival, FillableSigningProvider* keystore, std::map<COutPoint, Coin>& coins, bool is_temp_keystore, const UniValue& hashType)\n+void ParsePrevouts(const UniValue& prevTxsUnival, FillableSigningProvider* keystore, std::map<COutPoint, Coin>& coins)",
      "path": "src/rpc/rawtransaction_util.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "12a411b8a7f77753ec35241d73697f6bbcc77ec1",
      "in_reply_to_id": null,
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit. snake case for the function arguments?",
      "created_at": "2019-08-05T15:16:25Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r310656799",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/310656799"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 150,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/310658586",
      "pull_request_review_id": 270837156,
      "id": 310658586,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMDY1ODU4Ng==",
      "diff_hunk": "@@ -90,11 +92,12 @@ static std::shared_ptr<CWallet> LoadWallet(const std::string& name, const fs::pa\n \n static void WalletShowInfo(CWallet* wallet_instance)\n {\n-    LOCK(wallet_instance->cs_wallet);\n+    auto spk_man = wallet_instance->GetLegacyScriptPubKeyMan();\n+    LOCK2(wallet_instance->cs_wallet, spk_man->cs_KeyStore);\n \n     tfm::format(std::cout, \"Wallet info\\n===========\\n\");\n     tfm::format(std::cout, \"Encrypted: %s\\n\", wallet_instance->IsCrypted() ? \"yes\" : \"no\");\n-    tfm::format(std::cout, \"HD (hd seed available): %s\\n\", wallet_instance->GetHDChain().seed_id.IsNull() ? \"no\" : \"yes\");\n+    tfm::format(std::cout, \"HD (hd seed available): %s\\n\", (spk_man && spk_man->GetHDChain().seed_id.IsNull()) ? \"no\" : \"yes\");",
      "path": "src/wallet/wallettool.cpp",
      "position": null,
      "original_position": 31,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "12a411b8a7f77753ec35241d73697f6bbcc77ec1",
      "in_reply_to_id": 310653358,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "&& short-circuits; it doesn't evaluate its right hand is the left hand was false.",
      "created_at": "2019-08-05T15:20:12Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r310658586",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/310658586"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 100,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/310660927",
      "pull_request_review_id": 270840064,
      "id": 310660927,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMDY2MDkyNw==",
      "diff_hunk": "@@ -90,11 +92,12 @@ static std::shared_ptr<CWallet> LoadWallet(const std::string& name, const fs::pa\n \n static void WalletShowInfo(CWallet* wallet_instance)\n {\n-    LOCK(wallet_instance->cs_wallet);\n+    auto spk_man = wallet_instance->GetLegacyScriptPubKeyMan();\n+    LOCK2(wallet_instance->cs_wallet, spk_man->cs_KeyStore);\n \n     tfm::format(std::cout, \"Wallet info\\n===========\\n\");\n     tfm::format(std::cout, \"Encrypted: %s\\n\", wallet_instance->IsCrypted() ? \"yes\" : \"no\");\n-    tfm::format(std::cout, \"HD (hd seed available): %s\\n\", wallet_instance->GetHDChain().seed_id.IsNull() ? \"no\" : \"yes\");\n+    tfm::format(std::cout, \"HD (hd seed available): %s\\n\", (spk_man && spk_man->GetHDChain().seed_id.IsNull()) ? \"no\" : \"yes\");",
      "path": "src/wallet/wallettool.cpp",
      "position": null,
      "original_position": 31,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "12a411b8a7f77753ec35241d73697f6bbcc77ec1",
      "in_reply_to_id": 310653358,
      "user": {
        "login": "elichai",
        "id": 2167860,
        "node_id": "MDQ6VXNlcjIxNjc4NjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elichai",
        "html_url": "https://github.com/elichai",
        "followers_url": "https://api.github.com/users/elichai/followers",
        "following_url": "https://api.github.com/users/elichai/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/elichai/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/elichai/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
        "organizations_url": "https://api.github.com/users/elichai/orgs",
        "repos_url": "https://api.github.com/users/elichai/repos",
        "events_url": "https://api.github.com/users/elichai/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/elichai/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes. My point was that he deferences it a few lines above when he acquires a lock. ",
      "created_at": "2019-08-05T15:24:55Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r310660927",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/310660927"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 100,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/310663427",
      "pull_request_review_id": 270843247,
      "id": 310663427,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMDY2MzQyNw==",
      "diff_hunk": "@@ -90,11 +92,12 @@ static std::shared_ptr<CWallet> LoadWallet(const std::string& name, const fs::pa\n \n static void WalletShowInfo(CWallet* wallet_instance)\n {\n-    LOCK(wallet_instance->cs_wallet);\n+    auto spk_man = wallet_instance->GetLegacyScriptPubKeyMan();\n+    LOCK2(wallet_instance->cs_wallet, spk_man->cs_KeyStore);\n \n     tfm::format(std::cout, \"Wallet info\\n===========\\n\");\n     tfm::format(std::cout, \"Encrypted: %s\\n\", wallet_instance->IsCrypted() ? \"yes\" : \"no\");\n-    tfm::format(std::cout, \"HD (hd seed available): %s\\n\", wallet_instance->GetHDChain().seed_id.IsNull() ? \"no\" : \"yes\");\n+    tfm::format(std::cout, \"HD (hd seed available): %s\\n\", (spk_man && spk_man->GetHDChain().seed_id.IsNull()) ? \"no\" : \"yes\");",
      "path": "src/wallet/wallettool.cpp",
      "position": null,
      "original_position": 31,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "12a411b8a7f77753ec35241d73697f6bbcc77ec1",
      "in_reply_to_id": 310653358,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "wallettool looks to be broken when there are other `ScriptPubKeyMan` classes. I'll investigate in the Descriptor wallets PR.",
      "created_at": "2019-08-05T15:30:06Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r310663427",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/310663427"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 100,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/310674086",
      "pull_request_review_id": 270856879,
      "id": 310674086,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMDY3NDA4Ng==",
      "diff_hunk": "@@ -90,11 +92,12 @@ static std::shared_ptr<CWallet> LoadWallet(const std::string& name, const fs::pa\n \n static void WalletShowInfo(CWallet* wallet_instance)\n {\n-    LOCK(wallet_instance->cs_wallet);\n+    auto spk_man = wallet_instance->GetLegacyScriptPubKeyMan();\n+    LOCK2(wallet_instance->cs_wallet, spk_man->cs_KeyStore);\n \n     tfm::format(std::cout, \"Wallet info\\n===========\\n\");\n     tfm::format(std::cout, \"Encrypted: %s\\n\", wallet_instance->IsCrypted() ? \"yes\" : \"no\");\n-    tfm::format(std::cout, \"HD (hd seed available): %s\\n\", wallet_instance->GetHDChain().seed_id.IsNull() ? \"no\" : \"yes\");\n+    tfm::format(std::cout, \"HD (hd seed available): %s\\n\", (spk_man && spk_man->GetHDChain().seed_id.IsNull()) ? \"no\" : \"yes\");",
      "path": "src/wallet/wallettool.cpp",
      "position": null,
      "original_position": 31,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "12a411b8a7f77753ec35241d73697f6bbcc77ec1",
      "in_reply_to_id": 310653358,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This change to using `spk_man` here is not actually needed. I've changed it to use `CWallet::IsHDEnabled`",
      "created_at": "2019-08-05T15:53:31Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r310674086",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/310674086"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 100,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/316826832",
      "pull_request_review_id": 278610269,
      "id": 316826832,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNjgyNjgzMg==",
      "diff_hunk": "@@ -144,8 +144,10 @@ static bool SignStep(const SigningProvider& provider, const BaseSignatureCreator\n         ret.push_back(valtype()); // workaround CHECKMULTISIG bug\n         for (size_t i = 1; i < vSolutions.size() - 1; ++i) {\n             CPubKey pubkey = CPubKey(vSolutions[i]);\n-            if (ret.size() < required + 1 && CreateSig(creator, sigdata, provider, sig, pubkey, scriptPubKey, sigversion)) {\n-                ret.push_back(std::move(sig));\n+            if (CreateSig(creator, sigdata, provider, sig, pubkey, scriptPubKey, sigversion)) {\n+                if (ret.size() < required + 1) {",
      "path": "src/script/sign.cpp",
      "position": 10,
      "original_position": 7,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "ca02ac2532ce106d372d420dd2b94ad15e730971",
      "in_reply_to_id": 310624791,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Always try to sign for all pubkeys in multisig\" (d0b41dc26a74e158bd22259aed50869c9676e3fd)\r\n\r\nI'm not deeply familiar with this code, and I found the explanation a little hard to follow, but in case it helps anyone else, the key seems to be that calling CreateSig unconditionally is needed to fill sigdata. I can confirm that `rpc_psbt.py` test fails without this change.",
      "created_at": "2019-08-22T18:33:32Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r316826832",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/316826832"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 151,
      "original_line": 151,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/316833572",
      "pull_request_review_id": 278610269,
      "id": 316833572,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNjgzMzU3Mg==",
      "diff_hunk": "@@ -85,7 +116,9 @@ class ScriptPubKeyMan\n class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProvider\n {\n public:\n-    LegacyScriptPubKeyMan() {}\n+    LegacyScriptPubKeyMan(FlagSetFunc is_set_func, FlagFunc set_flag_func, FlagFuncWithDB unset_flag_func, VersionFunc feature_sup_func, NameFunc wallet_name_func, SetVersionFunc set_version_func, std::shared_ptr<WalletDatabase> database)",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": null,
      "original_position": 51,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "bae5b518ec507d071a54ce4810dd24b016bcfe12",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Add function callbacks for wallet flags and versions and wallet database\" (bae5b518ec507d071a54ce4810dd24b016bcfe12)\r\n\r\nThis could just say `using ScriptPubKeyMan::ScriptPubKeyMan` to inherit the parent constructor instead of repeating it all. Even at the end of this PR, this constructor is empty except for some member initializations which would be better to do at the points of declaration.",
      "created_at": "2019-08-22T18:49:53Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r316833572",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/316833572"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 119,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318143710",
      "pull_request_review_id": 280277366,
      "id": 318143710,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxODE0MzcxMA==",
      "diff_hunk": "@@ -144,8 +144,10 @@ static bool SignStep(const SigningProvider& provider, const BaseSignatureCreator\n         ret.push_back(valtype()); // workaround CHECKMULTISIG bug\n         for (size_t i = 1; i < vSolutions.size() - 1; ++i) {\n             CPubKey pubkey = CPubKey(vSolutions[i]);\n-            if (ret.size() < required + 1 && CreateSig(creator, sigdata, provider, sig, pubkey, scriptPubKey, sigversion)) {\n-                ret.push_back(std::move(sig));\n+            if (CreateSig(creator, sigdata, provider, sig, pubkey, scriptPubKey, sigversion)) {\n+                if (ret.size() < required + 1) {",
      "path": "src/script/sign.cpp",
      "position": 10,
      "original_position": 7,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "ca02ac2532ce106d372d420dd2b94ad15e730971",
      "in_reply_to_id": 310624791,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I also found this explanation difficult. Is there any way to succinctly say the desired effect, and put it in a comment in the code?",
      "created_at": "2019-08-27T15:21:32Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r318143710",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318143710"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 151,
      "original_line": 151,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318147258",
      "pull_request_review_id": 280277366,
      "id": 318147258,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxODE0NzI1OA==",
      "diff_hunk": "@@ -0,0 +1,137 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+#define BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <wallet/crypter.h>\n+#include <wallet/ismine.h>\n+#include <wallet/walletdb.h>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+enum class OutputType;\n+\n+class ScriptPubKeyMan",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": 145,
      "original_position": 18,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "e892a72f22c3359a12085f0e93d519acaa711bcd",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Please add a short comment on what this is in charge of and what it's not.",
      "created_at": "2019-08-27T15:27:30Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r318147258",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318147258"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 145,
      "original_line": 145,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318149544",
      "pull_request_review_id": 280277366,
      "id": 318149544,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxODE0OTU0NA==",
      "diff_hunk": "@@ -27,6 +28,8 @@ enum class OutputType {\n     CHANGE_AUTO,\n };\n \n+const std::array<OutputType, 3> output_types = {OutputType::LEGACY, OutputType::P2SH_SEGWIT, OutputType::BECH32};",
      "path": "src/outputtype.h",
      "position": null,
      "original_position": 12,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "8a8e141fe93bf887630df9681daa9cd8b2500f55",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "s/output_types/OUTPUT_TYPES/",
      "created_at": "2019-08-27T15:31:34Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r318149544",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318149544"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 31,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318153110",
      "pull_request_review_id": 280277366,
      "id": 318153110,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxODE1MzExMA==",
      "diff_hunk": "@@ -833,6 +834,11 @@ class CWallet final : public FillableSigningProvider, private interfaces::Chain:\n     //! Fetches a key from the keypool\n     bool GetKeyFromPool(CPubKey &key, bool internal = false);\n \n+    std::map<OutputType, std::shared_ptr<ScriptPubKeyMan>> m_external_spk_managers;\n+    std::map<OutputType, std::shared_ptr<ScriptPubKeyMan>> m_internal_spk_managers;\n+\n+    std::map<uint256, std::shared_ptr<ScriptPubKeyMan>> m_spk_managers;",
      "path": "src/wallet/wallet.h",
      "position": null,
      "original_position": 15,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "7a27857f91ad585f82bb784faf092e8fe7e30946",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Comment on how these are indexed?",
      "created_at": "2019-08-27T15:38:14Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r318153110",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318153110"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 695,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318155569",
      "pull_request_review_id": 280277366,
      "id": 318155569,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxODE1NTU2OQ==",
      "diff_hunk": "@@ -4935,3 +4935,32 @@ bool CWallet::AddCryptedKeyInner(const CPubKey &vchPubKey, const std::vector<uns\n     ImplicitlyLearnRelatedKeyScripts(vchPubKey);\n     return true;\n }\n+\n+std::shared_ptr<LegacyScriptPubKeyMan> CWallet::GetLegacyScriptPubKeyMan()\n+{\n+    SetupLegacyScriptPubKeyMan();\n+    return std::dynamic_pointer_cast<LegacyScriptPubKeyMan>(m_internal_spk_managers[OutputType::LEGACY]);",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 8,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "7a27857f91ad585f82bb784faf092e8fe7e30946",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> m_internal_spk_managers[OutputType::LEGACY]\r\n\r\nPlease leave a comment noting that any output type is the same in this context.",
      "created_at": "2019-08-27T15:42:52Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r318155569",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318155569"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4120,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318158886",
      "pull_request_review_id": 280277366,
      "id": 318158886,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxODE1ODg4Ng==",
      "diff_hunk": "@@ -4935,3 +4935,32 @@ bool CWallet::AddCryptedKeyInner(const CPubKey &vchPubKey, const std::vector<uns\n     ImplicitlyLearnRelatedKeyScripts(vchPubKey);\n     return true;\n }\n+\n+std::shared_ptr<LegacyScriptPubKeyMan> CWallet::GetLegacyScriptPubKeyMan()\n+{\n+    SetupLegacyScriptPubKeyMan();\n+    return std::dynamic_pointer_cast<LegacyScriptPubKeyMan>(m_internal_spk_managers[OutputType::LEGACY]);\n+}\n+\n+void CWallet::SetupLegacyScriptPubKeyMan()\n+{\n+    if (m_internal_spk_managers.empty() && m_external_spk_managers.empty() && m_spk_managers.empty()) {\n+        auto spk_manager = std::shared_ptr<ScriptPubKeyMan>(new LegacyScriptPubKeyMan());\n+        m_internal_spk_managers[OutputType::LEGACY] = spk_manager;",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "7a27857f91ad585f82bb784faf092e8fe7e30946",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "we have the list of output types, let's just iterate through them here to build this",
      "created_at": "2019-08-27T15:49:15Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r318158886",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318158886"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4949,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318159265",
      "pull_request_review_id": 280277366,
      "id": 318159265,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxODE1OTI2NQ==",
      "diff_hunk": "@@ -4935,3 +4935,32 @@ bool CWallet::AddCryptedKeyInner(const CPubKey &vchPubKey, const std::vector<uns\n     ImplicitlyLearnRelatedKeyScripts(vchPubKey);\n     return true;\n }\n+\n+std::shared_ptr<LegacyScriptPubKeyMan> CWallet::GetLegacyScriptPubKeyMan()\n+{\n+    SetupLegacyScriptPubKeyMan();\n+    return std::dynamic_pointer_cast<LegacyScriptPubKeyMan>(m_internal_spk_managers[OutputType::LEGACY]);\n+}\n+\n+void CWallet::SetupLegacyScriptPubKeyMan()\n+{\n+    if (m_internal_spk_managers.empty() && m_external_spk_managers.empty() && m_spk_managers.empty()) {\n+        auto spk_manager = std::shared_ptr<ScriptPubKeyMan>(new LegacyScriptPubKeyMan());\n+        m_internal_spk_managers[OutputType::LEGACY] = spk_manager;\n+        m_internal_spk_managers[OutputType::P2SH_SEGWIT] = spk_manager;\n+        m_internal_spk_managers[OutputType::BECH32] = spk_manager;\n+        m_external_spk_managers[OutputType::LEGACY] = spk_manager;\n+        m_external_spk_managers[OutputType::P2SH_SEGWIT] = spk_manager;\n+        m_external_spk_managers[OutputType::BECH32] = spk_manager;\n+        m_spk_managers[spk_manager->GetID()] = spk_manager;\n+    }\n+    // These all need to exist and be the same\n+    assert(m_internal_spk_managers.count(OutputType::LEGACY) > 0);\n+    std::shared_ptr<ScriptPubKeyMan> spk_man = m_internal_spk_managers.at(OutputType::LEGACY);\n+    assert(m_internal_spk_managers.at(OutputType::P2SH_SEGWIT) == spk_man);",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 26,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "7a27857f91ad585f82bb784faf092e8fe7e30946",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "we have the list of output types, let's just iterate through them here to assert these",
      "created_at": "2019-08-27T15:49:58Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r318159265",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318159265"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4960,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318190081",
      "pull_request_review_id": 280336299,
      "id": 318190081,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxODE5MDA4MQ==",
      "diff_hunk": "@@ -147,9 +147,8 @@ static void TxInErrorToJSON(const CTxIn& txin, UniValue& vErrorsRet, const std::\n     vErrorsRet.push_back(entry);\n }\n \n-UniValue SignTransaction(CMutableTransaction& mtx, const UniValue& prevTxsUnival, FillableSigningProvider* keystore, std::map<COutPoint, Coin>& coins, bool is_temp_keystore, const UniValue& hashType)\n+void ParsePrevouts(const UniValue& prevTxsUnival, FillableSigningProvider* keystore, std::map<COutPoint, Coin>& coins)",
      "path": "src/rpc/rawtransaction_util.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "12a411b8a7f77753ec35241d73697f6bbcc77ec1",
      "in_reply_to_id": 310656799,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Refactor rawtransaction_util's SignTransaction to have previous tx parsing be separate\" (b49bbb939be92a67ff77c3f7bca5bb94dd141906)\r\n\r\n> nit. snake case for the function arguments?\r\n\r\nBetter in a separate PR, this PR is huge already and the change would make this commit a lot harder to follow.",
      "created_at": "2019-08-27T16:55:37Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r318190081",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318190081"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 150,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318192477",
      "pull_request_review_id": 280336299,
      "id": 318192477,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxODE5MjQ3Nw==",
      "diff_hunk": "@@ -167,4 +167,20 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     uint256 GetID() const override;\n };\n \n+/** Wraps a LegacyScriptPubKeyMan so that it can be returned in a new unique_ptr */\n+class LegacySigningProvider : public SigningProvider\n+{\n+private:\n+    const LegacyScriptPubKeyMan* spk_man;",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": null,
      "original_position": 8,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "a31374df794d709cf8acfbafc7d5b57f74b1d75a",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Implement GetSigningProvider in LegacyScriptPubKeyMan\" (a31374df794d709cf8acfbafc7d5b57f74b1d75a)\r\n\r\nNot important, but this should never be null so a reference makes more sense than a pointer in this class",
      "created_at": "2019-08-27T17:01:11Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r318192477",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318192477"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 174,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318193983",
      "pull_request_review_id": 280336299,
      "id": 318193983,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxODE5Mzk4Mw==",
      "diff_hunk": "@@ -5032,3 +5033,11 @@ void CWallet::SetupLegacyScriptPubKeyMan()\n     assert(m_external_spk_managers.at(OutputType::BECH32) == spk_man);\n     assert(m_spk_managers.size() == 1);\n }\n+\n+void CWallet::ConnectScriptPubKeyManNotifiers()\n+{\n+    for (auto spk_man_pair : m_spk_managers) {",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "7b57deac879499e4b0ee99f1efc320600907bc59",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Implement function to connect ScriptPubKeyMan's NotifyCanGetAddessesChanged and NotifyWatchOnlyChanged to CWallet's\" (7b57deac879499e4b0ee99f1efc320600907bc59)\r\n\r\n`const auto&` instead of `auto` would avoid copying and incrementing / decrementing shared_ptr atomic reference counts, would also make it clear that the std::pair is not changing",
      "created_at": "2019-08-27T17:04:49Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r318193983",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318193983"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5039,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/319628054",
      "pull_request_review_id": 282184583,
      "id": 319628054,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxOTYyODA1NA==",
      "diff_hunk": "@@ -123,6 +123,7 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n {\n \n     LOCK(testWallet.cs_wallet);\n+    testWallet.SetupLegacyScriptPubKeyMan();",
      "path": "src/wallet/test/coinselector_tests.cpp",
      "position": 4,
      "original_position": 4,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "b893f0d053f1b5be1229d4fb77ced46b222f9993",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Implement GetKeyOrigin in LegacyScriptPubKeyMan\" (b893f0d053f1b5be1229d4fb77ced46b222f9993)\r\n\r\nIt's unclear why this change is in this commit. Is it supposed to be part of the next one\r\n93322bf756fd8991fb445e327c878e2695fe9ca9?",
      "created_at": "2019-08-30T18:24:52Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r319628054",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/319628054"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 126,
      "original_line": 126,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/319653872",
      "pull_request_review_id": 282218618,
      "id": 319653872,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxOTY1Mzg3Mg==",
      "diff_hunk": "@@ -144,8 +144,10 @@ static bool SignStep(const SigningProvider& provider, const BaseSignatureCreator\n         ret.push_back(valtype()); // workaround CHECKMULTISIG bug\n         for (size_t i = 1; i < vSolutions.size() - 1; ++i) {\n             CPubKey pubkey = CPubKey(vSolutions[i]);\n-            if (ret.size() < required + 1 && CreateSig(creator, sigdata, provider, sig, pubkey, scriptPubKey, sigversion)) {\n-                ret.push_back(std::move(sig));\n+            if (CreateSig(creator, sigdata, provider, sig, pubkey, scriptPubKey, sigversion)) {\n+                if (ret.size() < required + 1) {",
      "path": "src/script/sign.cpp",
      "position": 10,
      "original_position": 7,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "ca02ac2532ce106d372d420dd2b94ad15e730971",
      "in_reply_to_id": 310624791,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I added a comment.",
      "created_at": "2019-08-30T19:49:13Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r319653872",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/319653872"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 151,
      "original_line": 151,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/319653909",
      "pull_request_review_id": 282218681,
      "id": 319653909,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxOTY1MzkwOQ==",
      "diff_hunk": "@@ -85,7 +116,9 @@ class ScriptPubKeyMan\n class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProvider\n {\n public:\n-    LegacyScriptPubKeyMan() {}\n+    LegacyScriptPubKeyMan(FlagSetFunc is_set_func, FlagFunc set_flag_func, FlagFuncWithDB unset_flag_func, VersionFunc feature_sup_func, NameFunc wallet_name_func, SetVersionFunc set_version_func, std::shared_ptr<WalletDatabase> database)",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": null,
      "original_position": 51,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "bae5b518ec507d071a54ce4810dd24b016bcfe12",
      "in_reply_to_id": 316833572,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2019-08-30T19:49:21Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r319653909",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/319653909"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 119,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/319653940",
      "pull_request_review_id": 282218727,
      "id": 319653940,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxOTY1Mzk0MA==",
      "diff_hunk": "@@ -167,4 +167,20 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     uint256 GetID() const override;\n };\n \n+/** Wraps a LegacyScriptPubKeyMan so that it can be returned in a new unique_ptr */\n+class LegacySigningProvider : public SigningProvider\n+{\n+private:\n+    const LegacyScriptPubKeyMan* spk_man;",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": null,
      "original_position": 8,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "a31374df794d709cf8acfbafc7d5b57f74b1d75a",
      "in_reply_to_id": 318192477,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2019-08-30T19:49:28Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r319653940",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/319653940"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 174,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/319653992",
      "pull_request_review_id": 282218794,
      "id": 319653992,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxOTY1Mzk5Mg==",
      "diff_hunk": "@@ -5032,3 +5033,11 @@ void CWallet::SetupLegacyScriptPubKeyMan()\n     assert(m_external_spk_managers.at(OutputType::BECH32) == spk_man);\n     assert(m_spk_managers.size() == 1);\n }\n+\n+void CWallet::ConnectScriptPubKeyManNotifiers()\n+{\n+    for (auto spk_man_pair : m_spk_managers) {",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "7b57deac879499e4b0ee99f1efc320600907bc59",
      "in_reply_to_id": 318193983,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Changed all of these iterations to `const auto&`",
      "created_at": "2019-08-30T19:49:38Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r319653992",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/319653992"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 5039,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/319654014",
      "pull_request_review_id": 282218827,
      "id": 319654014,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxOTY1NDAxNA==",
      "diff_hunk": "@@ -0,0 +1,137 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+#define BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <wallet/crypter.h>\n+#include <wallet/ismine.h>\n+#include <wallet/walletdb.h>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+enum class OutputType;\n+\n+class ScriptPubKeyMan",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": 145,
      "original_position": 18,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "e892a72f22c3359a12085f0e93d519acaa711bcd",
      "in_reply_to_id": 318147258,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2019-08-30T19:49:43Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r319654014",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/319654014"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 145,
      "original_line": 145,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/319654040",
      "pull_request_review_id": 282218863,
      "id": 319654040,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxOTY1NDA0MA==",
      "diff_hunk": "@@ -27,6 +28,8 @@ enum class OutputType {\n     CHANGE_AUTO,\n };\n \n+const std::array<OutputType, 3> output_types = {OutputType::LEGACY, OutputType::P2SH_SEGWIT, OutputType::BECH32};",
      "path": "src/outputtype.h",
      "position": null,
      "original_position": 12,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "8a8e141fe93bf887630df9681daa9cd8b2500f55",
      "in_reply_to_id": 318149544,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2019-08-30T19:49:48Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r319654040",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/319654040"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 31,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/319654069",
      "pull_request_review_id": 282218902,
      "id": 319654069,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxOTY1NDA2OQ==",
      "diff_hunk": "@@ -4935,3 +4935,32 @@ bool CWallet::AddCryptedKeyInner(const CPubKey &vchPubKey, const std::vector<uns\n     ImplicitlyLearnRelatedKeyScripts(vchPubKey);\n     return true;\n }\n+\n+std::shared_ptr<LegacyScriptPubKeyMan> CWallet::GetLegacyScriptPubKeyMan()\n+{\n+    SetupLegacyScriptPubKeyMan();\n+    return std::dynamic_pointer_cast<LegacyScriptPubKeyMan>(m_internal_spk_managers[OutputType::LEGACY]);",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 8,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "7a27857f91ad585f82bb784faf092e8fe7e30946",
      "in_reply_to_id": 318155569,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2019-08-30T19:49:55Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r319654069",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/319654069"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4120,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/319654084",
      "pull_request_review_id": 282218928,
      "id": 319654084,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxOTY1NDA4NA==",
      "diff_hunk": "@@ -4935,3 +4935,32 @@ bool CWallet::AddCryptedKeyInner(const CPubKey &vchPubKey, const std::vector<uns\n     ImplicitlyLearnRelatedKeyScripts(vchPubKey);\n     return true;\n }\n+\n+std::shared_ptr<LegacyScriptPubKeyMan> CWallet::GetLegacyScriptPubKeyMan()\n+{\n+    SetupLegacyScriptPubKeyMan();\n+    return std::dynamic_pointer_cast<LegacyScriptPubKeyMan>(m_internal_spk_managers[OutputType::LEGACY]);\n+}\n+\n+void CWallet::SetupLegacyScriptPubKeyMan()\n+{\n+    if (m_internal_spk_managers.empty() && m_external_spk_managers.empty() && m_spk_managers.empty()) {\n+        auto spk_manager = std::shared_ptr<ScriptPubKeyMan>(new LegacyScriptPubKeyMan());\n+        m_internal_spk_managers[OutputType::LEGACY] = spk_manager;",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "7a27857f91ad585f82bb784faf092e8fe7e30946",
      "in_reply_to_id": 318158886,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2019-08-30T19:49:58Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r319654084",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/319654084"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4949,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/319654232",
      "pull_request_review_id": 282219135,
      "id": 319654232,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxOTY1NDIzMg==",
      "diff_hunk": "@@ -4935,3 +4935,32 @@ bool CWallet::AddCryptedKeyInner(const CPubKey &vchPubKey, const std::vector<uns\n     ImplicitlyLearnRelatedKeyScripts(vchPubKey);\n     return true;\n }\n+\n+std::shared_ptr<LegacyScriptPubKeyMan> CWallet::GetLegacyScriptPubKeyMan()\n+{\n+    SetupLegacyScriptPubKeyMan();\n+    return std::dynamic_pointer_cast<LegacyScriptPubKeyMan>(m_internal_spk_managers[OutputType::LEGACY]);\n+}\n+\n+void CWallet::SetupLegacyScriptPubKeyMan()\n+{\n+    if (m_internal_spk_managers.empty() && m_external_spk_managers.empty() && m_spk_managers.empty()) {\n+        auto spk_manager = std::shared_ptr<ScriptPubKeyMan>(new LegacyScriptPubKeyMan());\n+        m_internal_spk_managers[OutputType::LEGACY] = spk_manager;\n+        m_internal_spk_managers[OutputType::P2SH_SEGWIT] = spk_manager;\n+        m_internal_spk_managers[OutputType::BECH32] = spk_manager;\n+        m_external_spk_managers[OutputType::LEGACY] = spk_manager;\n+        m_external_spk_managers[OutputType::P2SH_SEGWIT] = spk_manager;\n+        m_external_spk_managers[OutputType::BECH32] = spk_manager;\n+        m_spk_managers[spk_manager->GetID()] = spk_manager;\n+    }\n+    // These all need to exist and be the same\n+    assert(m_internal_spk_managers.count(OutputType::LEGACY) > 0);\n+    std::shared_ptr<ScriptPubKeyMan> spk_man = m_internal_spk_managers.at(OutputType::LEGACY);\n+    assert(m_internal_spk_managers.at(OutputType::P2SH_SEGWIT) == spk_man);",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 26,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "7a27857f91ad585f82bb784faf092e8fe7e30946",
      "in_reply_to_id": 318159265,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2019-08-30T19:50:31Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r319654232",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/319654232"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4960,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/319654309",
      "pull_request_review_id": 282219206,
      "id": 319654309,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxOTY1NDMwOQ==",
      "diff_hunk": "@@ -123,6 +123,7 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n {\n \n     LOCK(testWallet.cs_wallet);\n+    testWallet.SetupLegacyScriptPubKeyMan();",
      "path": "src/wallet/test/coinselector_tests.cpp",
      "position": 4,
      "original_position": 4,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "b893f0d053f1b5be1229d4fb77ced46b222f9993",
      "in_reply_to_id": 319628054,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah. Moved it",
      "created_at": "2019-08-30T19:50:42Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r319654309",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/319654309"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 126,
      "original_line": 126,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/319655153",
      "pull_request_review_id": 282220349,
      "id": 319655153,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxOTY1NTE1Mw==",
      "diff_hunk": "@@ -833,6 +834,11 @@ class CWallet final : public FillableSigningProvider, private interfaces::Chain:\n     //! Fetches a key from the keypool\n     bool GetKeyFromPool(CPubKey &key, bool internal = false);\n \n+    std::map<OutputType, std::shared_ptr<ScriptPubKeyMan>> m_external_spk_managers;\n+    std::map<OutputType, std::shared_ptr<ScriptPubKeyMan>> m_internal_spk_managers;\n+\n+    std::map<uint256, std::shared_ptr<ScriptPubKeyMan>> m_spk_managers;",
      "path": "src/wallet/wallet.h",
      "position": null,
      "original_position": 15,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "7a27857f91ad585f82bb784faf092e8fe7e30946",
      "in_reply_to_id": 318153110,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2019-08-30T19:53:49Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r319655153",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/319655153"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 695,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/319716775",
      "pull_request_review_id": 282298536,
      "id": 319716775,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxOTcxNjc3NQ==",
      "diff_hunk": "@@ -147,9 +147,8 @@ static void TxInErrorToJSON(const CTxIn& txin, UniValue& vErrorsRet, const std::\n     vErrorsRet.push_back(entry);\n }\n \n-UniValue SignTransaction(CMutableTransaction& mtx, const UniValue& prevTxsUnival, FillableSigningProvider* keystore, std::map<COutPoint, Coin>& coins, bool is_temp_keystore, const UniValue& hashType)\n+void ParsePrevouts(const UniValue& prevTxsUnival, FillableSigningProvider* keystore, std::map<COutPoint, Coin>& coins)",
      "path": "src/rpc/rawtransaction_util.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "12a411b8a7f77753ec35241d73697f6bbcc77ec1",
      "in_reply_to_id": 310656799,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think this commit deserves its own PR anyway; as does any refactor that's a prequisite for the main PR.",
      "created_at": "2019-08-31T08:43:57Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r319716775",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/319716775"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 150,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/321891057",
      "pull_request_review_id": 285073862,
      "id": 321891057,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMTg5MTA1Nw==",
      "diff_hunk": "@@ -1319,6 +1319,16 @@ class CWallet final : public FillableSigningProvider, private interfaces::Chain:\n     /** Implement lookup of key origin information through wallet key metadata. */\n     bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const override;\n \n+    std::set<std::shared_ptr<ScriptPubKeyMan>> GetActiveScriptPubKeyMans() const;\n+\n+    //! Get the ScriptPubKeyMan for the given OutputType and internal/external chain. If it doesn't exist, instantiate one",
      "path": "src/wallet/wallet.h",
      "position": null,
      "original_position": 6,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "c4cbc90efe10c43417f4cb8d1a13ebfb4107f9c2",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "this function doesn't create one, just returns null",
      "created_at": "2019-09-06T20:06:03Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r321891057",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/321891057"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1324,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/321892466",
      "pull_request_review_id": 285073862,
      "id": 321892466,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMTg5MjQ2Ng==",
      "diff_hunk": "@@ -123,6 +123,15 @@ class ScriptPubKeyMan\n \n class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProvider\n {\n+private:\n+    //! if fUseCrypto is true, mapKeys must be empty\n+    //! if fUseCrypto is false, vMasterKey must be empty\n+    std::atomic<bool> fUseCrypto{false};",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": null,
      "original_position": 7,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "f504e8a5372263dd1621bf19395360149e84f98d",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I know this is from CWallet but I'd rather avoid hungarian notation for new variables: `m_use_crypto`",
      "created_at": "2019-09-06T20:10:35Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r321892466",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/321892466"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 237,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/321893577",
      "pull_request_review_id": 285073862,
      "id": 321893577,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMTg5MzU3Nw==",
      "diff_hunk": "@@ -123,6 +123,15 @@ class ScriptPubKeyMan\n \n class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProvider\n {\n+private:\n+    //! if fUseCrypto is true, mapKeys must be empty\n+    //! if fUseCrypto is false, vMasterKey must be empty\n+    std::atomic<bool> fUseCrypto{false};\n+\n+    bool SetCrypted();\n+\n+    CKeyingMaterial vMasterKey GUARDED_BY(cs_KeyStore);",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": null,
      "original_position": 11,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "f504e8a5372263dd1621bf19395360149e84f98d",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I know there's no documentation where you got this from but could there be an explanation of this field?",
      "created_at": "2019-09-06T20:13:58Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r321893577",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/321893577"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 244,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/321894091",
      "pull_request_review_id": 285073862,
      "id": 321894091,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMTg5NDA5MQ==",
      "diff_hunk": "@@ -16,12 +16,27 @@ isminetype LegacyScriptPubKeyMan::IsMine(const CScript& script) const\n \n bool LegacyScriptPubKeyMan::IsCrypted() const\n {\n-    return false;\n+    return fUseCrypto;",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "f504e8a5372263dd1621bf19395360149e84f98d",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "for reviewers: this whole commit is cloned from CWallet's implementation",
      "created_at": "2019-09-06T20:15:33Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r321894091",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/321894091"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 210,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/321894821",
      "pull_request_review_id": 285073862,
      "id": 321894821,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMTg5NDgyMQ==",
      "diff_hunk": "@@ -148,3 +148,38 @@ uint256 LegacyScriptPubKeyMan::GetID() const\n {\n     return uint256S(\"0000000000000000000000000000000000000000000000000000000000000001\");\n }\n+\n+bool LegacyScriptPubKeyMan::LoadCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret)\n+{\n+    return AddCryptedKeyInner(vchPubKey, vchCryptedSecret);\n+}\n+\n+bool LegacyScriptPubKeyMan::AddCryptedKeyInner(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret)\n+{\n+    LOCK(cs_KeyStore);\n+    if (!SetCrypted()) {\n+        return false;\n+    }\n+\n+    mapCryptedKeys[vchPubKey.GetID()] = make_pair(vchPubKey, vchCryptedSecret);",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 17,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "d5bec330bd64e39b3cd324a9df1ec65c2afe076c",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I know this is cloning but `std::make_pair` like everywhere else",
      "created_at": "2019-09-06T20:17:53Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r321894821",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/321894821"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 164,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/321898519",
      "pull_request_review_id": 285073862,
      "id": 321898519,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMTg5ODUxOQ==",
      "diff_hunk": "@@ -161,6 +162,9 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     //! Adds a watch-only address to the store, and saves it to disk.\n     bool AddWatchOnlyWithDB(WalletBatch &batch, const CScript& dest, int64_t create_time) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n \n+    //! Adds a key to the store, and saves it to disk.",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": 272,
      "original_position": 12,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "aba2ac2b7e7d3d61b2aee0c484926682d1858098",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "please change all these \"store\" references to pubkeyman references",
      "created_at": "2019-09-06T20:28:54Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r321898519",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/321898519"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 272,
      "original_line": 272,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/321905454",
      "pull_request_review_id": 285073862,
      "id": 321905454,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMTkwNTQ1NA==",
      "diff_hunk": "@@ -459,3 +459,97 @@ bool LegacyScriptPubKeyMan::GetPubKey(const CKeyID &address, CPubKey& vchPubKeyO\n     // Check for watch-only pubkeys\n     return GetWatchPubKey(address, vchPubKeyOut);\n }\n+\n+CPubKey LegacyScriptPubKeyMan::GenerateNewKey(WalletBatch &batch, bool internal)\n+{\n+    assert(!IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n+    assert(!IsWalletFlagSet(WALLET_FLAG_BLANK_WALLET));\n+    AssertLockHeld(cs_KeyStore);\n+    bool fCompressed = CanSupportFeature(FEATURE_COMPRPUBKEY); // default to compressed public keys if we want 0.6.0 wallets\n+\n+    CKey secret;\n+\n+    // Create new metadata\n+    int64_t nCreationTime = GetTime();\n+    CKeyMetadata metadata(nCreationTime);\n+\n+    // use HD key derivation if HD was enabled during wallet creation and a seed is present\n+    if (IsHDEnabled()) {\n+        DeriveNewChildKey(batch, metadata, secret, (CanSupportFeature(FEATURE_HD_SPLIT) ? internal : false));\n+    } else {\n+        secret.MakeNewKey(fCompressed);\n+    }\n+\n+    // Compressed public keys were introduced in version 0.6.0\n+    if (fCompressed) {\n+        SetMinVersion(FEATURE_COMPRPUBKEY, nullptr, false);",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 27,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "4d53fa7f1c98792cd2d599ccde7a5a37bdade007",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "this seems to add the optional params for no reason vs master. remove them, or at least annotate what they mean.",
      "created_at": "2019-09-06T20:50:29Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r321905454",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/321905454"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 485,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/321907947",
      "pull_request_review_id": 285073862,
      "id": 321907947,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMTkwNzk0Nw==",
      "diff_hunk": "@@ -0,0 +1,144 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+#define BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <wallet/crypter.h>\n+#include <wallet/ismine.h>\n+#include <wallet/walletdb.h>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+enum class OutputType;\n+\n+/*\n+ * A class implementing ScriptPubKeyMan manages some (or all) scriptPubKeys used in a wallet.\n+ * It contains the scripts and keys related to the scriptPubKeys it manages.\n+ * A ScriptPubKeyMan will be able to give out scriptPubKeys to be used, as well as marking\n+ * when a scriptPubKey has been used. It also handles when and how to store a scriptPubKey\n+ * and it's related scripts and keys, including encryption.\n+ */\n+class ScriptPubKeyMan\n+{\n+public:\n+    virtual ~ScriptPubKeyMan() {};\n+    virtual bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) { return false; }\n+    virtual isminetype IsMine(const CScript& script) const { return ISMINE_NO; }\n+\n+    virtual bool IsCrypted() const { return false; }\n+    virtual bool IsLocked() const { return false; }\n+    virtual bool Lock() { return false; }\n+\n+    virtual bool Unlock(const CKeyingMaterial& vMasterKeyIn, bool accept_no_keys = false) { return false; }\n+    virtual bool Encrypt(CKeyingMaterial& vMasterKeyIn, WalletBatch* batch) { return false; }\n+\n+    virtual bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool) { return false; }\n+    virtual void KeepDestination(int64_t index) {}\n+    virtual void ReturnDestination(int64_t index, bool internal, const CTxDestination& addr) {}\n+\n+    virtual bool TopUp(unsigned int size = 0) { return false; }\n+\n+    //! Mark unused addresses as being used\n+    virtual void MarkUnusedAddresses(const CScript& script) {}\n+\n+    //! Upgrade stored CKeyMetadata objects to store key origin info as KeyOriginInfo\n+    virtual void UpgradeKeyMetadata() {}\n+\n+    /** Sets up the key generation stuff.\n+      * Returns false if already setup or setup fails, true if setup is successful\n+      * Set force=true to make it re-setup if already setup, used for upgrades\n+      */\n+    virtual bool SetupGeneration(bool force = false) { return false; }\n+\n+    /* Returns true if HD is enabled */\n+    virtual bool IsHDEnabled() const { return false; }\n+\n+    /* Returns true if the wallet can give out new addresses. This means it has keys in the keypool or can generate new keys */\n+    virtual bool CanGetAddresses(bool internal = false) { return false; }\n+\n+    /** Upgrades the wallet to the specified version */\n+    virtual bool Upgrade(int prev_version, int new_version, std::string& error) { return false; }\n+\n+    virtual bool HavePrivateKeys() const { return false; }\n+\n+    //! The action to do when the DB needs rewrite\n+    virtual void RewriteDB() {}\n+\n+    virtual int64_t GetOldestKeyPoolTime() { return GetTime(); }\n+\n+    virtual size_t KeypoolCountExternalKeys() { return 0; }\n+    virtual unsigned int GetKeypoolSize() const { return 0; }\n+\n+    virtual int64_t GetTimeFirstKey() const { return 0; }\n+\n+    virtual const CKeyMetadata* GetMetadata(uint160 id) const { return nullptr; }\n+\n+    virtual std::unique_ptr<SigningProvider> GetSigningProvider(const CScript& script) const { return nullptr; }\n+    virtual bool CanProvide(const CScript& script, SignatureData& sigdata) { return false; }\n+\n+    virtual uint256 GetID() const { return uint256(); }\n+\n+    /** Watch-only address added */\n+    boost::signals2::signal<void (bool fHaveWatchOnly)> NotifyWatchonlyChanged;\n+\n+    /** Keypool has new keys */\n+    boost::signals2::signal<void ()> NotifyCanGetAddressesChanged;\n+};\n+\n+class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProvider\n+{\n+public:\n+    using ScriptPubKeyMan::ScriptPubKeyMan;\n+\n+    bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) override EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+    isminetype IsMine(const CScript& script) const override;\n+\n+    bool IsCrypted() const override;\n+    bool IsLocked() const override;\n+    bool Lock() override;\n+\n+    bool Unlock(const CKeyingMaterial& vMasterKeyIn, bool accept_no_keys = false) override;\n+    bool Encrypt(CKeyingMaterial& vMasterKeyIn, WalletBatch* batch) override;\n+\n+    bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool) override;\n+    void KeepDestination(int64_t index) override;\n+    void ReturnDestination(int64_t index, bool internal, const CTxDestination& addr) override;\n+\n+    bool TopUp(unsigned int size = 0) override;\n+\n+    void MarkUnusedAddresses(const CScript& script) override;\n+\n+    void UpgradeKeyMetadata() override EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+\n+    bool IsHDEnabled() const override;\n+\n+    bool SetupGeneration(bool force = false) override;\n+\n+    bool Upgrade(int prev_version, int new_version, std::string& error) override;\n+\n+    bool HavePrivateKeys() const override;\n+\n+    void RewriteDB() override;\n+\n+    int64_t GetOldestKeyPoolTime() override;\n+    size_t KeypoolCountExternalKeys() override EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+    unsigned int GetKeypoolSize() const override;",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": null,
      "original_position": 129,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "c43d7572a2cf0363f7df763e8c0d6437e3cb87ff",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "renamed to `GetTotalKeypoolSize` to make it clear it counts both?",
      "created_at": "2019-09-06T20:58:33Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r321907947",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/321907947"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 351,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/321909406",
      "pull_request_review_id": 285098599,
      "id": 321909406,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMTkwOTQwNg==",
      "diff_hunk": "@@ -123,6 +123,15 @@ class ScriptPubKeyMan\n \n class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProvider\n {\n+private:\n+    //! if fUseCrypto is true, mapKeys must be empty\n+    //! if fUseCrypto is false, vMasterKey must be empty\n+    std::atomic<bool> fUseCrypto{false};",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": null,
      "original_position": 7,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "f504e8a5372263dd1621bf19395360149e84f98d",
      "in_reply_to_id": 321892466,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "on second thought, nevermind. for now straight copy is good.",
      "created_at": "2019-09-06T21:03:28Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r321909406",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/321909406"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 237,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/321937412",
      "pull_request_review_id": 285134547,
      "id": 321937412,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMTkzNzQxMg==",
      "diff_hunk": "@@ -0,0 +1,144 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+#define BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <wallet/crypter.h>\n+#include <wallet/ismine.h>\n+#include <wallet/walletdb.h>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+enum class OutputType;\n+\n+/*\n+ * A class implementing ScriptPubKeyMan manages some (or all) scriptPubKeys used in a wallet.\n+ * It contains the scripts and keys related to the scriptPubKeys it manages.\n+ * A ScriptPubKeyMan will be able to give out scriptPubKeys to be used, as well as marking\n+ * when a scriptPubKey has been used. It also handles when and how to store a scriptPubKey\n+ * and it's related scripts and keys, including encryption.\n+ */\n+class ScriptPubKeyMan\n+{\n+public:\n+    virtual ~ScriptPubKeyMan() {};\n+    virtual bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) { return false; }\n+    virtual isminetype IsMine(const CScript& script) const { return ISMINE_NO; }\n+\n+    virtual bool IsCrypted() const { return false; }\n+    virtual bool IsLocked() const { return false; }\n+    virtual bool Lock() { return false; }\n+\n+    virtual bool Unlock(const CKeyingMaterial& vMasterKeyIn, bool accept_no_keys = false) { return false; }\n+    virtual bool Encrypt(CKeyingMaterial& vMasterKeyIn, WalletBatch* batch) { return false; }\n+\n+    virtual bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool) { return false; }\n+    virtual void KeepDestination(int64_t index) {}\n+    virtual void ReturnDestination(int64_t index, bool internal, const CTxDestination& addr) {}\n+\n+    virtual bool TopUp(unsigned int size = 0) { return false; }\n+\n+    //! Mark unused addresses as being used\n+    virtual void MarkUnusedAddresses(const CScript& script) {}\n+\n+    //! Upgrade stored CKeyMetadata objects to store key origin info as KeyOriginInfo\n+    virtual void UpgradeKeyMetadata() {}\n+\n+    /** Sets up the key generation stuff.\n+      * Returns false if already setup or setup fails, true if setup is successful\n+      * Set force=true to make it re-setup if already setup, used for upgrades\n+      */\n+    virtual bool SetupGeneration(bool force = false) { return false; }\n+\n+    /* Returns true if HD is enabled */\n+    virtual bool IsHDEnabled() const { return false; }\n+\n+    /* Returns true if the wallet can give out new addresses. This means it has keys in the keypool or can generate new keys */\n+    virtual bool CanGetAddresses(bool internal = false) { return false; }\n+\n+    /** Upgrades the wallet to the specified version */\n+    virtual bool Upgrade(int prev_version, int new_version, std::string& error) { return false; }\n+\n+    virtual bool HavePrivateKeys() const { return false; }\n+\n+    //! The action to do when the DB needs rewrite\n+    virtual void RewriteDB() {}\n+\n+    virtual int64_t GetOldestKeyPoolTime() { return GetTime(); }\n+\n+    virtual size_t KeypoolCountExternalKeys() { return 0; }\n+    virtual unsigned int GetKeypoolSize() const { return 0; }\n+\n+    virtual int64_t GetTimeFirstKey() const { return 0; }\n+\n+    virtual const CKeyMetadata* GetMetadata(uint160 id) const { return nullptr; }\n+\n+    virtual std::unique_ptr<SigningProvider> GetSigningProvider(const CScript& script) const { return nullptr; }\n+    virtual bool CanProvide(const CScript& script, SignatureData& sigdata) { return false; }\n+\n+    virtual uint256 GetID() const { return uint256(); }\n+\n+    /** Watch-only address added */\n+    boost::signals2::signal<void (bool fHaveWatchOnly)> NotifyWatchonlyChanged;\n+\n+    /** Keypool has new keys */\n+    boost::signals2::signal<void ()> NotifyCanGetAddressesChanged;\n+};\n+\n+class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProvider\n+{\n+public:\n+    using ScriptPubKeyMan::ScriptPubKeyMan;\n+\n+    bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) override EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+    isminetype IsMine(const CScript& script) const override;\n+\n+    bool IsCrypted() const override;\n+    bool IsLocked() const override;\n+    bool Lock() override;\n+\n+    bool Unlock(const CKeyingMaterial& vMasterKeyIn, bool accept_no_keys = false) override;\n+    bool Encrypt(CKeyingMaterial& vMasterKeyIn, WalletBatch* batch) override;\n+\n+    bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool) override;\n+    void KeepDestination(int64_t index) override;\n+    void ReturnDestination(int64_t index, bool internal, const CTxDestination& addr) override;\n+\n+    bool TopUp(unsigned int size = 0) override;\n+\n+    void MarkUnusedAddresses(const CScript& script) override;\n+\n+    void UpgradeKeyMetadata() override EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+\n+    bool IsHDEnabled() const override;\n+\n+    bool SetupGeneration(bool force = false) override;\n+\n+    bool Upgrade(int prev_version, int new_version, std::string& error) override;\n+\n+    bool HavePrivateKeys() const override;\n+\n+    void RewriteDB() override;\n+\n+    int64_t GetOldestKeyPoolTime() override;\n+    size_t KeypoolCountExternalKeys() override EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+    unsigned int GetKeypoolSize() const override;",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": null,
      "original_position": 129,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "c43d7572a2cf0363f7df763e8c0d6437e3cb87ff",
      "in_reply_to_id": 321907947,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It's always counted both, and I would prefer to keep this consistent with `CWallet::GetKeypoolSize`.",
      "created_at": "2019-09-06T23:10:07Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r321937412",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/321937412"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 351,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/321937683",
      "pull_request_review_id": 285134818,
      "id": 321937683,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMTkzNzY4Mw==",
      "diff_hunk": "@@ -161,6 +162,9 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     //! Adds a watch-only address to the store, and saves it to disk.\n     bool AddWatchOnlyWithDB(WalletBatch &batch, const CScript& dest, int64_t create_time) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n \n+    //! Adds a key to the store, and saves it to disk.",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": 272,
      "original_position": 12,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "aba2ac2b7e7d3d61b2aee0c484926682d1858098",
      "in_reply_to_id": 321898519,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think it's necessary to change all of these.",
      "created_at": "2019-09-06T23:11:43Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r321937683",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/321937683"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 272,
      "original_line": 272,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/321938576",
      "pull_request_review_id": 285135945,
      "id": 321938576,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMTkzODU3Ng==",
      "diff_hunk": "@@ -1319,6 +1319,16 @@ class CWallet final : public FillableSigningProvider, private interfaces::Chain:\n     /** Implement lookup of key origin information through wallet key metadata. */\n     bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const override;\n \n+    std::set<std::shared_ptr<ScriptPubKeyMan>> GetActiveScriptPubKeyMans() const;\n+\n+    //! Get the ScriptPubKeyMan for the given OutputType and internal/external chain. If it doesn't exist, instantiate one",
      "path": "src/wallet/wallet.h",
      "position": null,
      "original_position": 6,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "c4cbc90efe10c43417f4cb8d1a13ebfb4107f9c2",
      "in_reply_to_id": 321891057,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Edited comment.",
      "created_at": "2019-09-06T23:17:59Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r321938576",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/321938576"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1324,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/321938597",
      "pull_request_review_id": 285135971,
      "id": 321938597,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMTkzODU5Nw==",
      "diff_hunk": "@@ -123,6 +123,15 @@ class ScriptPubKeyMan\n \n class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProvider\n {\n+private:\n+    //! if fUseCrypto is true, mapKeys must be empty\n+    //! if fUseCrypto is false, vMasterKey must be empty\n+    std::atomic<bool> fUseCrypto{false};\n+\n+    bool SetCrypted();\n+\n+    CKeyingMaterial vMasterKey GUARDED_BY(cs_KeyStore);",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": null,
      "original_position": 11,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "f504e8a5372263dd1621bf19395360149e84f98d",
      "in_reply_to_id": 321893577,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2019-09-06T23:18:05Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r321938597",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/321938597"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 244,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/321938626",
      "pull_request_review_id": 285136007,
      "id": 321938626,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMTkzODYyNg==",
      "diff_hunk": "@@ -148,3 +148,38 @@ uint256 LegacyScriptPubKeyMan::GetID() const\n {\n     return uint256S(\"0000000000000000000000000000000000000000000000000000000000000001\");\n }\n+\n+bool LegacyScriptPubKeyMan::LoadCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret)\n+{\n+    return AddCryptedKeyInner(vchPubKey, vchCryptedSecret);\n+}\n+\n+bool LegacyScriptPubKeyMan::AddCryptedKeyInner(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret)\n+{\n+    LOCK(cs_KeyStore);\n+    if (!SetCrypted()) {\n+        return false;\n+    }\n+\n+    mapCryptedKeys[vchPubKey.GetID()] = make_pair(vchPubKey, vchCryptedSecret);",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 17,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "d5bec330bd64e39b3cd324a9df1ec65c2afe076c",
      "in_reply_to_id": 321894821,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2019-09-06T23:18:15Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r321938626",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/321938626"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 164,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/321938694",
      "pull_request_review_id": 285136101,
      "id": 321938694,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMTkzODY5NA==",
      "diff_hunk": "@@ -459,3 +459,97 @@ bool LegacyScriptPubKeyMan::GetPubKey(const CKeyID &address, CPubKey& vchPubKeyO\n     // Check for watch-only pubkeys\n     return GetWatchPubKey(address, vchPubKeyOut);\n }\n+\n+CPubKey LegacyScriptPubKeyMan::GenerateNewKey(WalletBatch &batch, bool internal)\n+{\n+    assert(!IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n+    assert(!IsWalletFlagSet(WALLET_FLAG_BLANK_WALLET));\n+    AssertLockHeld(cs_KeyStore);\n+    bool fCompressed = CanSupportFeature(FEATURE_COMPRPUBKEY); // default to compressed public keys if we want 0.6.0 wallets\n+\n+    CKey secret;\n+\n+    // Create new metadata\n+    int64_t nCreationTime = GetTime();\n+    CKeyMetadata metadata(nCreationTime);\n+\n+    // use HD key derivation if HD was enabled during wallet creation and a seed is present\n+    if (IsHDEnabled()) {\n+        DeriveNewChildKey(batch, metadata, secret, (CanSupportFeature(FEATURE_HD_SPLIT) ? internal : false));\n+    } else {\n+        secret.MakeNewKey(fCompressed);\n+    }\n+\n+    // Compressed public keys were introduced in version 0.6.0\n+    if (fCompressed) {\n+        SetMinVersion(FEATURE_COMPRPUBKEY, nullptr, false);",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 27,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "4d53fa7f1c98792cd2d599ccde7a5a37bdade007",
      "in_reply_to_id": 321905454,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Removed the optional params. They still need to be specified in when binding the function though.",
      "created_at": "2019-09-06T23:18:50Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r321938694",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/321938694"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 485,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322299705",
      "pull_request_review_id": 285582874,
      "id": 322299705,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjI5OTcwNQ==",
      "diff_hunk": "@@ -3,11 +3,22 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <key_io.h>\n+#include <outputtype.h>\n #include <wallet/scriptpubkeyman.h>\n \n bool LegacyScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n {\n-    return false;\n+    TopUpKeyPool();",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 17,
      "original_position": 10,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "a007c8ac72118d871d38115a88dd64cb76a3c465",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "missing `error.clear()` that CWallet has?",
      "created_at": "2019-09-09T15:14:00Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322299705",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322299705"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 17,
      "original_line": 17,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322301283",
      "pull_request_review_id": 285582874,
      "id": 322301283,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjMwMTI4Mw==",
      "diff_hunk": "@@ -284,6 +284,25 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     std::map<CKeyID, int64_t> m_pool_key_to_index;\n     std::map<int64_t, CKeyID> m_reserved_key_to_index;",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": 295,
      "original_position": 2,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "a007c8ac72118d871d38115a88dd64cb76a3c465",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "realized this doesn't exist in master, please put explanation in comment on what it's used for",
      "created_at": "2019-09-09T15:16:57Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322301283",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322301283"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 295,
      "original_line": 295,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322310615",
      "pull_request_review_id": 285582874,
      "id": 322310615,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjMxMDYxNQ==",
      "diff_hunk": "@@ -118,11 +120,51 @@ void LegacyScriptPubKeyMan::MarkUnusedAddresses(const CScript& script)\n \n void LegacyScriptPubKeyMan::UpgradeKeyMetadata()\n {\n+    LOCK(cs_KeyStore);\n+    if (IsLocked() || IsWalletFlagSet(WALLET_FLAG_KEY_ORIGIN_METADATA)) {\n+        return;\n+    }\n+\n+    std::unique_ptr<WalletBatch> batch = MakeUnique<WalletBatch>(*m_database);\n+    for (auto& meta_pair : mapKeyMetadata) {\n+        CKeyMetadata& meta = meta_pair.second;\n+        if (!meta.hd_seed_id.IsNull() && !meta.has_key_origin && meta.hdKeypath != \"s\") { // If the hdKeypath is \"s\", that's the seed and it doesn't have a key origin\n+            CKey key;\n+            GetKey(meta.hd_seed_id, key);\n+            CExtKey masterKey;\n+            masterKey.SetSeed(key.begin(), key.size());\n+            // Add to map\n+            CKeyID master_id = masterKey.key.GetPubKey().GetID();\n+            std::copy(master_id.begin(), master_id.begin() + 4, meta.key_origin.fingerprint);\n+            if (!ParseHDKeypath(meta.hdKeypath, meta.key_origin.path)) {\n+                throw std::runtime_error(\"Invalid stored hdKeypath\");\n+            }\n+            meta.has_key_origin = true;\n+            if (meta.nVersion < CKeyMetadata::VERSION_WITH_KEY_ORIGIN) {\n+                meta.nVersion = CKeyMetadata::VERSION_WITH_KEY_ORIGIN;\n+            }\n+\n+            // Write meta to wallet\n+            CPubKey pubkey;\n+            if (GetPubKey(meta_pair.first, pubkey)) {\n+                batch->WriteKeyMetadata(meta, pubkey, true);\n+            }\n+        }\n+    }\n+    batch.reset(); //write before setting the flag",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 44,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "c83bb3c7ad9a5c01e6b0de750fe95b90e1cc1d9a",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "there's no flag being set here anymore. If intentional, I'd like an explanation and fixup of this comment",
      "created_at": "2019-09-09T15:33:59Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322310615",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322310615"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 154,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322312299",
      "pull_request_review_id": 285582874,
      "id": 322312299,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjMxMjI5OQ==",
      "diff_hunk": "@@ -0,0 +1,479 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+#define BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <wallet/crypter.h>\n+#include <wallet/ismine.h>\n+#include <wallet/walletdb.h>\n+#include <wallet/walletutil.h>\n+\n+#include <functional>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+enum class OutputType;\n+\n+//! Default for -keypool\n+static const unsigned int DEFAULT_KEYPOOL_SIZE = 1000;\n+\n+std::vector<CKeyID> GetAffectedKeys(const CScript& spk, const SigningProvider& provider);\n+\n+/** A key from a CWallet's keypool\n+ *\n+ * The wallet holds one (for pre HD-split wallets) or several keypools. These\n+ * are sets of keys that have not yet been used to provide addresses or receive\n+ * change.\n+ *\n+ * The Bitcoin Core wallet was originally a collection of unrelated private\n+ * keys with their associated addresses. If a non-HD wallet generated a\n+ * key/address, gave that address out and then restored a backup from before\n+ * that key's generation, then any funds sent to that address would be\n+ * lost definitively.\n+ *\n+ * The keypool was implemented to avoid this scenario (commit: 10384941). The\n+ * wallet would generate a set of keys (100 by default). When a new public key\n+ * was required, either to give out as an address or to use in a change output,\n+ * it would be drawn from the keypool. The keypool would then be topped up to\n+ * maintain 100 keys. This ensured that as long as the wallet hadn't used more\n+ * than 100 keys since the previous backup, all funds would be safe, since a\n+ * restored wallet would be able to scan for all owned addresses.\n+ *\n+ * A keypool also allowed encrypted wallets to give out addresses without\n+ * having to be decrypted to generate a new private key.\n+ *\n+ * With the introduction of HD wallets (commit: f1902510), the keypool\n+ * essentially became an address look-ahead pool. Restoring old backups can no\n+ * longer definitively lose funds as long as the addresses used were from the\n+ * wallet's HD seed (since all private keys can be rederived from the seed).\n+ * However, if many addresses were used since the backup, then the wallet may\n+ * not know how far ahead in the HD chain to look for its addresses. The\n+ * keypool is used to implement a 'gap limit'. The keypool maintains a set of\n+ * keys (by default 1000) ahead of the last used key and scans for the\n+ * addresses of those keys.  This avoids the risk of not seeing transactions\n+ * involving the wallet's addresses, or of re-using the same address.\n+ *\n+ * The HD-split wallet feature added a second keypool (commit: 02592f4c). There\n+ * is an external keypool (for addresses to hand out) and an internal keypool\n+ * (for change addresses).\n+ *\n+ * Keypool keys are stored in the wallet/keystore's keymap. The keypool data is\n+ * stored as sets of indexes in the wallet (setInternalKeyPool,\n+ * setExternalKeyPool and set_pre_split_keypool), and a map from the key to the\n+ * index (m_pool_key_to_index). The CKeyPool object is used to\n+ * serialize/deserialize the pool data to/from the database.\n+ */\n+class CKeyPool\n+{\n+public:\n+    //! The time at which the key was generated. Set in AddKeypoolPubKeyWithDB\n+    int64_t nTime;\n+    //! The public key\n+    CPubKey vchPubKey;\n+    //! Whether this keypool entry is in the internal keypool (for change outputs)\n+    bool fInternal;\n+    //! Whether this key was generated for a keypool before the wallet was upgraded to HD-split\n+    bool m_pre_split;\n+\n+    CKeyPool();\n+    CKeyPool(const CPubKey& vchPubKeyIn, bool internalIn);\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        int nVersion = s.GetVersion();\n+        if (!(s.GetType() & SER_GETHASH))\n+            READWRITE(nVersion);\n+        READWRITE(nTime);\n+        READWRITE(vchPubKey);\n+        if (ser_action.ForRead()) {\n+            try {\n+                READWRITE(fInternal);\n+            }\n+            catch (std::ios_base::failure&) {\n+                /* flag as external address if we can't read the internal boolean\n+                   (this will be the case for any wallet before the HD chain split version) */\n+                fInternal = false;\n+            }\n+            try {\n+                READWRITE(m_pre_split);\n+            }\n+            catch (std::ios_base::failure&) {\n+                /* flag as postsplit address if we can't read the m_pre_split boolean\n+                   (this will be the case for any wallet that upgrades to HD chain split)*/\n+                m_pre_split = false;\n+            }\n+        }\n+        else {\n+            READWRITE(fInternal);\n+            READWRITE(m_pre_split);\n+        }\n+    }\n+};\n+\n+typedef std::function<void(uint64_t)> FlagFunc;\n+typedef std::function<void(WalletBatch&, uint64_t)> FlagFuncWithDB;\n+typedef std::function<bool(uint64_t)> FlagSetFunc;\n+typedef std::function<bool(enum WalletFeature)> VersionFunc;\n+typedef std::function<std::string()> NameFunc;\n+typedef std::function<void(enum WalletFeature)> SetVersionFunc;\n+\n+/*\n+ * A class implementing ScriptPubKeyMan manages some (or all) scriptPubKeys used in a wallet.\n+ * It contains the scripts and keys related to the scriptPubKeys it manages.\n+ * A ScriptPubKeyMan will be able to give out scriptPubKeys to be used, as well as marking\n+ * when a scriptPubKey has been used. It also handles when and how to store a scriptPubKey\n+ * and it's related scripts and keys, including encryption.\n+ */\n+\n+class ScriptPubKeyMan\n+{\n+protected:\n+    FlagSetFunc IsWalletFlagSet; // Function pointer to function that determines if a wallet flag is set\n+    FlagFunc SetWalletFlag; // Function pointer to function to set wallet flags\n+    FlagFuncWithDB UnsetWalletFlagWithDB; // Function pointer to function to unset wallet flags\n+    VersionFunc CanSupportFeature; // Function pointer to function that indicates whether the feature is supported\n+    NameFunc GetDisplayName; // Function pointer to GetDisplayName to get the name of a wallet for WalletLogPrintf\n+    SetVersionFunc SetMinVersion; // Function pointer to SetMinVersion in the wallet\n+\n+    /** Internal database handle. */\n+    std::shared_ptr<WalletDatabase> m_database;\n+\n+public:\n+    ScriptPubKeyMan(FlagSetFunc is_set_func, FlagFunc set_flag_func, FlagFuncWithDB unset_flag_func, VersionFunc feature_sup_func, NameFunc wallet_name_func, SetVersionFunc set_version_func, std::shared_ptr<WalletDatabase> database)\n+        :   IsWalletFlagSet(is_set_func),\n+            SetWalletFlag(set_flag_func),\n+            UnsetWalletFlagWithDB(unset_flag_func),\n+            CanSupportFeature(feature_sup_func),\n+            GetDisplayName(wallet_name_func),\n+            SetMinVersion(set_version_func),\n+            m_database(database)\n+        {}\n+\n+    virtual ~ScriptPubKeyMan() {};\n+    virtual bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) { return false; }\n+    virtual isminetype IsMine(const CScript& script) const { return ISMINE_NO; }\n+\n+    virtual bool IsCrypted() const { return false; }\n+    virtual bool IsLocked() const { return false; }\n+    virtual bool Lock() { return false; }\n+\n+    virtual bool Unlock(const CKeyingMaterial& vMasterKeyIn, bool accept_no_keys = false) { return false; }\n+    virtual bool Encrypt(CKeyingMaterial& vMasterKeyIn, WalletBatch* batch) { return false; }\n+\n+    virtual bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool) { return false; }\n+    virtual void KeepDestination(int64_t index) {}\n+    virtual void ReturnDestination(int64_t index, bool internal, const CTxDestination& addr) {}\n+\n+    virtual bool TopUp(unsigned int size = 0) { return false; }\n+\n+    //! Mark unused addresses as being used\n+    virtual void MarkUnusedAddresses(const CScript& script) {}\n+\n+    //! Upgrade stored CKeyMetadata objects to store key origin info as KeyOriginInfo\n+    virtual void UpgradeKeyMetadata() {}\n+\n+    /** Sets up the key generation stuff.",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": null,
      "original_position": 181,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "365879e9bdba93a84bd2ef4a39816a5eb8fd31b0",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "please elaborate on stuff :P \r\n\r\nit's important for spotting missing functionality since I don't think there's an equiv block in old wallet code",
      "created_at": "2019-09-09T15:37:05Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322312299",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322312299"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 181,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322313000",
      "pull_request_review_id": 285582874,
      "id": 322313000,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjMxMzAwMA==",
      "diff_hunk": "@@ -0,0 +1,479 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+#define BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <wallet/crypter.h>\n+#include <wallet/ismine.h>\n+#include <wallet/walletdb.h>\n+#include <wallet/walletutil.h>\n+\n+#include <functional>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+enum class OutputType;\n+\n+//! Default for -keypool\n+static const unsigned int DEFAULT_KEYPOOL_SIZE = 1000;\n+\n+std::vector<CKeyID> GetAffectedKeys(const CScript& spk, const SigningProvider& provider);\n+\n+/** A key from a CWallet's keypool\n+ *\n+ * The wallet holds one (for pre HD-split wallets) or several keypools. These\n+ * are sets of keys that have not yet been used to provide addresses or receive\n+ * change.\n+ *\n+ * The Bitcoin Core wallet was originally a collection of unrelated private\n+ * keys with their associated addresses. If a non-HD wallet generated a\n+ * key/address, gave that address out and then restored a backup from before\n+ * that key's generation, then any funds sent to that address would be\n+ * lost definitively.\n+ *\n+ * The keypool was implemented to avoid this scenario (commit: 10384941). The\n+ * wallet would generate a set of keys (100 by default). When a new public key\n+ * was required, either to give out as an address or to use in a change output,\n+ * it would be drawn from the keypool. The keypool would then be topped up to\n+ * maintain 100 keys. This ensured that as long as the wallet hadn't used more\n+ * than 100 keys since the previous backup, all funds would be safe, since a\n+ * restored wallet would be able to scan for all owned addresses.\n+ *\n+ * A keypool also allowed encrypted wallets to give out addresses without\n+ * having to be decrypted to generate a new private key.\n+ *\n+ * With the introduction of HD wallets (commit: f1902510), the keypool\n+ * essentially became an address look-ahead pool. Restoring old backups can no\n+ * longer definitively lose funds as long as the addresses used were from the\n+ * wallet's HD seed (since all private keys can be rederived from the seed).\n+ * However, if many addresses were used since the backup, then the wallet may\n+ * not know how far ahead in the HD chain to look for its addresses. The\n+ * keypool is used to implement a 'gap limit'. The keypool maintains a set of\n+ * keys (by default 1000) ahead of the last used key and scans for the\n+ * addresses of those keys.  This avoids the risk of not seeing transactions\n+ * involving the wallet's addresses, or of re-using the same address.\n+ *\n+ * The HD-split wallet feature added a second keypool (commit: 02592f4c). There\n+ * is an external keypool (for addresses to hand out) and an internal keypool\n+ * (for change addresses).\n+ *\n+ * Keypool keys are stored in the wallet/keystore's keymap. The keypool data is\n+ * stored as sets of indexes in the wallet (setInternalKeyPool,\n+ * setExternalKeyPool and set_pre_split_keypool), and a map from the key to the\n+ * index (m_pool_key_to_index). The CKeyPool object is used to\n+ * serialize/deserialize the pool data to/from the database.\n+ */\n+class CKeyPool\n+{\n+public:\n+    //! The time at which the key was generated. Set in AddKeypoolPubKeyWithDB\n+    int64_t nTime;\n+    //! The public key\n+    CPubKey vchPubKey;\n+    //! Whether this keypool entry is in the internal keypool (for change outputs)\n+    bool fInternal;\n+    //! Whether this key was generated for a keypool before the wallet was upgraded to HD-split\n+    bool m_pre_split;\n+\n+    CKeyPool();\n+    CKeyPool(const CPubKey& vchPubKeyIn, bool internalIn);\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        int nVersion = s.GetVersion();\n+        if (!(s.GetType() & SER_GETHASH))\n+            READWRITE(nVersion);\n+        READWRITE(nTime);\n+        READWRITE(vchPubKey);\n+        if (ser_action.ForRead()) {\n+            try {\n+                READWRITE(fInternal);\n+            }\n+            catch (std::ios_base::failure&) {\n+                /* flag as external address if we can't read the internal boolean\n+                   (this will be the case for any wallet before the HD chain split version) */\n+                fInternal = false;\n+            }\n+            try {\n+                READWRITE(m_pre_split);\n+            }\n+            catch (std::ios_base::failure&) {\n+                /* flag as postsplit address if we can't read the m_pre_split boolean\n+                   (this will be the case for any wallet that upgrades to HD chain split)*/\n+                m_pre_split = false;\n+            }\n+        }\n+        else {\n+            READWRITE(fInternal);\n+            READWRITE(m_pre_split);\n+        }\n+    }\n+};\n+\n+typedef std::function<void(uint64_t)> FlagFunc;\n+typedef std::function<void(WalletBatch&, uint64_t)> FlagFuncWithDB;\n+typedef std::function<bool(uint64_t)> FlagSetFunc;\n+typedef std::function<bool(enum WalletFeature)> VersionFunc;\n+typedef std::function<std::string()> NameFunc;\n+typedef std::function<void(enum WalletFeature)> SetVersionFunc;\n+\n+/*\n+ * A class implementing ScriptPubKeyMan manages some (or all) scriptPubKeys used in a wallet.\n+ * It contains the scripts and keys related to the scriptPubKeys it manages.\n+ * A ScriptPubKeyMan will be able to give out scriptPubKeys to be used, as well as marking\n+ * when a scriptPubKey has been used. It also handles when and how to store a scriptPubKey\n+ * and it's related scripts and keys, including encryption.\n+ */\n+\n+class ScriptPubKeyMan\n+{\n+protected:\n+    FlagSetFunc IsWalletFlagSet; // Function pointer to function that determines if a wallet flag is set\n+    FlagFunc SetWalletFlag; // Function pointer to function to set wallet flags\n+    FlagFuncWithDB UnsetWalletFlagWithDB; // Function pointer to function to unset wallet flags\n+    VersionFunc CanSupportFeature; // Function pointer to function that indicates whether the feature is supported\n+    NameFunc GetDisplayName; // Function pointer to GetDisplayName to get the name of a wallet for WalletLogPrintf\n+    SetVersionFunc SetMinVersion; // Function pointer to SetMinVersion in the wallet\n+\n+    /** Internal database handle. */\n+    std::shared_ptr<WalletDatabase> m_database;\n+\n+public:\n+    ScriptPubKeyMan(FlagSetFunc is_set_func, FlagFunc set_flag_func, FlagFuncWithDB unset_flag_func, VersionFunc feature_sup_func, NameFunc wallet_name_func, SetVersionFunc set_version_func, std::shared_ptr<WalletDatabase> database)\n+        :   IsWalletFlagSet(is_set_func),\n+            SetWalletFlag(set_flag_func),\n+            UnsetWalletFlagWithDB(unset_flag_func),\n+            CanSupportFeature(feature_sup_func),\n+            GetDisplayName(wallet_name_func),\n+            SetMinVersion(set_version_func),\n+            m_database(database)\n+        {}\n+\n+    virtual ~ScriptPubKeyMan() {};\n+    virtual bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) { return false; }\n+    virtual isminetype IsMine(const CScript& script) const { return ISMINE_NO; }\n+\n+    virtual bool IsCrypted() const { return false; }\n+    virtual bool IsLocked() const { return false; }\n+    virtual bool Lock() { return false; }\n+\n+    virtual bool Unlock(const CKeyingMaterial& vMasterKeyIn, bool accept_no_keys = false) { return false; }\n+    virtual bool Encrypt(CKeyingMaterial& vMasterKeyIn, WalletBatch* batch) { return false; }\n+\n+    virtual bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool) { return false; }\n+    virtual void KeepDestination(int64_t index) {}\n+    virtual void ReturnDestination(int64_t index, bool internal, const CTxDestination& addr) {}\n+\n+    virtual bool TopUp(unsigned int size = 0) { return false; }\n+\n+    //! Mark unused addresses as being used\n+    virtual void MarkUnusedAddresses(const CScript& script) {}\n+\n+    //! Upgrade stored CKeyMetadata objects to store key origin info as KeyOriginInfo\n+    virtual void UpgradeKeyMetadata() {}\n+\n+    /** Sets up the key generation stuff.",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": null,
      "original_position": 181,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "365879e9bdba93a84bd2ef4a39816a5eb8fd31b0",
      "in_reply_to_id": 322312299,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "seems a bit of a misnomer even based on my reading",
      "created_at": "2019-09-09T15:38:26Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322313000",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322313000"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 181,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322314647",
      "pull_request_review_id": 285582874,
      "id": 322314647,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjMxNDY0Nw==",
      "diff_hunk": "@@ -149,7 +191,36 @@ bool LegacyScriptPubKeyMan::CanGetAddresses(bool internal)\n \n bool LegacyScriptPubKeyMan::Upgrade(int prev_version, int new_version, std::string& error)\n {\n-    return false;\n+    LOCK(cs_KeyStore);\n+    error = \"\";\n+    bool hd_upgrade = false;\n+    bool split_upgrade = false;\n+    if (CanSupportFeature(FEATURE_HD) && !IsHDEnabled()) {\n+        WalletLogPrintf(\"Upgrading wallet to HD\\n\");\n+        SetMinVersion(FEATURE_HD);\n+\n+        // generate a new master key\n+        SetHDSeed(GenerateNewSeed());\n+        hd_upgrade = true;\n+    }\n+    // Upgrade to HD chain split if necessary\n+    if (CanSupportFeature(FEATURE_HD_SPLIT) && hdChain.nVersion < 2 /* VERSION_HD_CHAIN_SPLIT */) {",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 411,
      "original_position": 80,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "c83bb3c7ad9a5c01e6b0de750fe95b90e1cc1d9a",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "any reason you're not actually referencing `VERSION_HD_CHAIN_SPLIT` directly?",
      "created_at": "2019-09-09T15:41:33Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322314647",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322314647"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 411,
      "original_line": 411,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322315266",
      "pull_request_review_id": 285582874,
      "id": 322315266,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjMxNTI2Ng==",
      "diff_hunk": "@@ -149,7 +191,36 @@ bool LegacyScriptPubKeyMan::CanGetAddresses(bool internal)\n \n bool LegacyScriptPubKeyMan::Upgrade(int prev_version, int new_version, std::string& error)\n {\n-    return false;\n+    LOCK(cs_KeyStore);\n+    error = \"\";\n+    bool hd_upgrade = false;\n+    bool split_upgrade = false;\n+    if (CanSupportFeature(FEATURE_HD) && !IsHDEnabled()) {\n+        WalletLogPrintf(\"Upgrading wallet to HD\\n\");\n+        SetMinVersion(FEATURE_HD);\n+\n+        // generate a new master key\n+        SetHDSeed(GenerateNewSeed());\n+        hd_upgrade = true;\n+    }\n+    // Upgrade to HD chain split if necessary\n+    if (CanSupportFeature(FEATURE_HD_SPLIT) && hdChain.nVersion < 2 /* VERSION_HD_CHAIN_SPLIT */) {",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 411,
      "original_position": 80,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "c83bb3c7ad9a5c01e6b0de750fe95b90e1cc1d9a",
      "in_reply_to_id": 322314647,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "and why the logic change here? master doesn't have this version check",
      "created_at": "2019-09-09T15:42:39Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322315266",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322315266"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 411,
      "original_line": 411,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322316694",
      "pull_request_review_id": 285582874,
      "id": 322316694,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjMxNjY5NA==",
      "diff_hunk": "@@ -0,0 +1,1462 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <key_io.h>\n+#include <outputtype.h>\n+#include <script/descriptor.h>\n+#include <util/bip32.h>\n+#include <util/strencodings.h>\n+#include <util/translation.h>\n+#include <wallet/scriptpubkeyman.h>\n+\n+bool LegacyScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n+{\n+    TopUpKeyPool();\n+\n+    // Generate a new key that is added to wallet\n+    CPubKey new_key;\n+    if (!GetKeyFromPool(new_key)) {\n+        error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+        return false;\n+    }\n+    LearnRelatedScripts(new_key, type);\n+    dest = GetDestinationForKey(new_key, type);\n+    return true;\n+}\n+\n+typedef std::vector<unsigned char> valtype;\n+\n+namespace {\n+\n+/**\n+ * This is an enum that tracks the execution context of a script, similar to\n+ * SigVersion in script/interpreter. It is separate however because we want to\n+ * distinguish between top-level scriptPubKey execution and P2SH redeemScript\n+ * execution (a distinction that has no impact on consensus rules).\n+ */\n+enum class IsMineSigVersion\n+{\n+    TOP = 0,        //!< scriptPubKey execution\n+    P2SH = 1,       //!< P2SH redeemScript\n+    WITNESS_V0 = 2, //!< P2WSH witness script execution\n+};\n+\n+/**\n+ * This is an internal representation of isminetype + invalidity.\n+ * Its order is significant, as we return the max of all explored\n+ * possibilities.\n+ */\n+enum class IsMineResult\n+{\n+    NO = 0,         //!< Not ours\n+    WATCH_ONLY = 1, //!< Included in watch-only balance\n+    SPENDABLE = 2,  //!< Included in all balances\n+    INVALID = 3,    //!< Not spendable by anyone (uncompressed pubkey in segwit, P2SH inside P2SH or witness, witness inside witness)\n+};\n+\n+bool PermitsUncompressed(IsMineSigVersion sigversion)\n+{\n+    return sigversion == IsMineSigVersion::TOP || sigversion == IsMineSigVersion::P2SH;\n+}\n+\n+bool HaveKeys(const std::vector<valtype>& pubkeys, const LegacyScriptPubKeyMan& keystore)\n+{\n+    for (const valtype& pubkey : pubkeys) {\n+        CKeyID keyID = CPubKey(pubkey).GetID();\n+        if (!keystore.HaveKey(keyID)) return false;\n+    }\n+    return true;\n+}\n+\n+IsMineResult IsMineInner(const LegacyScriptPubKeyMan& keystore, const CScript& scriptPubKey, IsMineSigVersion sigversion)\n+{\n+    IsMineResult ret = IsMineResult::NO;\n+\n+    std::vector<valtype> vSolutions;\n+    txnouttype whichType = Solver(scriptPubKey, vSolutions);\n+\n+    CKeyID keyID;\n+    switch (whichType)\n+    {\n+    case TX_NONSTANDARD:\n+    case TX_NULL_DATA:\n+    case TX_WITNESS_UNKNOWN:\n+        break;\n+    case TX_PUBKEY:\n+        keyID = CPubKey(vSolutions[0]).GetID();\n+        if (!PermitsUncompressed(sigversion) && vSolutions[0].size() != 33) {\n+            return IsMineResult::INVALID;\n+        }\n+        if (keystore.HaveKey(keyID)) {\n+            ret = std::max(ret, IsMineResult::SPENDABLE);\n+        }\n+        break;\n+    case TX_WITNESS_V0_KEYHASH:\n+    {\n+        if (sigversion == IsMineSigVersion::WITNESS_V0) {\n+            // P2WPKH inside P2WSH is invalid.\n+            return IsMineResult::INVALID;\n+        }\n+        if (sigversion == IsMineSigVersion::TOP && !keystore.HaveCScript(CScriptID(CScript() << OP_0 << vSolutions[0]))) {\n+            // We do not support bare witness outputs unless the P2SH version of it would be\n+            // acceptable as well. This protects against matching before segwit activates.\n+            // This also applies to the P2WSH case.\n+            break;\n+        }\n+        ret = std::max(ret, IsMineInner(keystore, GetScriptForDestination(PKHash(uint160(vSolutions[0]))), IsMineSigVersion::WITNESS_V0));\n+        break;\n+    }\n+    case TX_PUBKEYHASH:\n+    {\n+        keyID = CKeyID(uint160(vSolutions[0]));\n+        CPubKey pubkey;\n+        if (keystore.GetPubKey(keyID, pubkey)) {\n+            if (!PermitsUncompressed(sigversion) && !pubkey.IsCompressed()) {\n+                return IsMineResult::INVALID;\n+            } else {\n+                ret = std::max(ret, IsMineResult::WATCH_ONLY);\n+            }\n+        }\n+        if (keystore.HaveKey(keyID)) {\n+            ret = std::max(ret, IsMineResult::SPENDABLE);\n+        }\n+        break;\n+    }\n+    case TX_SCRIPTHASH:\n+    {\n+        if (sigversion != IsMineSigVersion::TOP) {\n+            // P2SH inside P2WSH or P2SH is invalid.\n+            return IsMineResult::INVALID;\n+        }\n+        CScriptID scriptID = CScriptID(uint160(vSolutions[0]));\n+        CScript subscript;\n+        if (keystore.GetCScript(scriptID, subscript)) {\n+            ret = std::max(ret, IsMineInner(keystore, subscript, IsMineSigVersion::P2SH));\n+        }\n+        break;\n+    }\n+    case TX_WITNESS_V0_SCRIPTHASH:\n+    {\n+        if (sigversion == IsMineSigVersion::WITNESS_V0) {\n+            // P2WSH inside P2WSH is invalid.\n+            return IsMineResult::INVALID;\n+        }\n+        if (sigversion == IsMineSigVersion::TOP && !keystore.HaveCScript(CScriptID(CScript() << OP_0 << vSolutions[0]))) {\n+            break;\n+        }\n+        uint160 hash;\n+        CRIPEMD160().Write(&vSolutions[0][0], vSolutions[0].size()).Finalize(hash.begin());\n+        CScriptID scriptID = CScriptID(hash);\n+        CScript subscript;\n+        if (keystore.GetCScript(scriptID, subscript)) {\n+            ret = std::max(ret, IsMineInner(keystore, subscript, IsMineSigVersion::WITNESS_V0));\n+        }\n+        break;\n+    }\n+\n+    case TX_MULTISIG:\n+    {\n+        // Never treat bare multisig outputs as ours (they can still be made watchonly-though)\n+        if (sigversion == IsMineSigVersion::TOP) {\n+            break;\n+        }\n+\n+        // Only consider transactions \"mine\" if we own ALL the\n+        // keys involved. Multi-signature transactions that are\n+        // partially owned (somebody else has a key that can spend\n+        // them) enable spend-out-from-under-you attacks, especially\n+        // in shared-wallet situations.\n+        std::vector<valtype> keys(vSolutions.begin()+1, vSolutions.begin()+vSolutions.size()-1);\n+        if (!PermitsUncompressed(sigversion)) {\n+            for (size_t i = 0; i < keys.size(); i++) {\n+                if (keys[i].size() != 33) {\n+                    return IsMineResult::INVALID;\n+                }\n+            }\n+        }\n+        if (HaveKeys(keys, keystore)) {\n+            ret = std::max(ret, IsMineResult::SPENDABLE);\n+        }\n+        break;\n+    }\n+    }\n+\n+    if (ret == IsMineResult::NO && keystore.HaveWatchOnly(scriptPubKey)) {\n+        ret = std::max(ret, IsMineResult::WATCH_ONLY);\n+    }\n+    return ret;\n+}\n+\n+} // namespace\n+\n+isminetype LegacyScriptPubKeyMan::IsMine(const CScript& script) const\n+{\n+    switch (IsMineInner(*this, script, IsMineSigVersion::TOP)) {\n+    case IsMineResult::INVALID:\n+    case IsMineResult::NO:\n+        return ISMINE_NO;\n+    case IsMineResult::WATCH_ONLY:\n+        return ISMINE_WATCH_ONLY;\n+    case IsMineResult::SPENDABLE:\n+        return ISMINE_SPENDABLE;\n+    }\n+    assert(false);\n+}\n+\n+bool LegacyScriptPubKeyMan::IsCrypted() const\n+{\n+    return fUseCrypto;\n+}\n+\n+bool LegacyScriptPubKeyMan::SetCrypted()\n+{\n+    LOCK(cs_KeyStore);\n+    if (fUseCrypto)\n+        return true;\n+    if (!mapKeys.empty())\n+        return false;\n+    fUseCrypto = true;\n+    return true;\n+}\n+\n+bool LegacyScriptPubKeyMan::IsLocked() const\n+{\n+    if (!IsCrypted()) {\n+        return false;\n+    }\n+    LOCK(cs_KeyStore);\n+    return vMasterKey.empty();\n+}\n+\n+bool LegacyScriptPubKeyMan::Lock()\n+{\n+    if (!SetCrypted())\n+        return false;\n+\n+    {\n+        LOCK(cs_KeyStore);\n+        vMasterKey.clear();\n+    }\n+\n+    return true;\n+}\n+\n+bool LegacyScriptPubKeyMan::GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool)\n+{\n+    if (!CanGetAddresses(internal)) {\n+        return false;\n+    }\n+\n+    {\n+        LOCK(cs_KeyStore);\n+        if (!ReserveKeyFromKeyPool(index, keypool, internal) && !IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+            return false;\n+        }\n+        address = GetDestinationForKey(keypool.vchPubKey, type);\n+    }\n+    return true;\n+}\n+\n+void LegacyScriptPubKeyMan::KeepDestination(int64_t index)\n+{\n+    KeepKey(index);\n+}\n+\n+void LegacyScriptPubKeyMan::ReturnDestination(int64_t index, bool internal, const CTxDestination& addr)\n+{\n+    ReturnKey(index, internal, m_reserved_key_to_index[index]);\n+    m_reserved_key_to_index.erase(index);\n+}\n+\n+bool LegacyScriptPubKeyMan::TopUp(unsigned int size)\n+{\n+    return TopUpKeyPool(size);\n+}\n+\n+void LegacyScriptPubKeyMan::MarkUnusedAddresses(const CScript& script)\n+{\n+    LOCK(cs_KeyStore);\n+    // extract addresses and check if they match with an unused keypool key\n+    for (const auto& keyid : GetAffectedKeys(script, *this)) {\n+        std::map<CKeyID, int64_t>::const_iterator mi = m_pool_key_to_index.find(keyid);\n+        if (mi != m_pool_key_to_index.end()) {\n+            WalletLogPrintf(\"%s: Detected a used keypool key, mark all keypool key up to this key as used\\n\", __func__);\n+            MarkReserveKeysAsUsed(mi->second);\n+\n+            if (!TopUpKeyPool()) {\n+                WalletLogPrintf(\"%s: Topping up keypool failed (locked wallet)\\n\", __func__);\n+            }\n+        }\n+    }\n+}\n+\n+void LegacyScriptPubKeyMan::UpgradeKeyMetadata()\n+{\n+    LOCK(cs_KeyStore);\n+    if (IsLocked() || IsWalletFlagSet(WALLET_FLAG_KEY_ORIGIN_METADATA)) {\n+        return;\n+    }\n+\n+    std::unique_ptr<WalletBatch> batch = MakeUnique<WalletBatch>(*m_database);\n+    for (auto& meta_pair : mapKeyMetadata) {\n+        CKeyMetadata& meta = meta_pair.second;\n+        if (!meta.hd_seed_id.IsNull() && !meta.has_key_origin && meta.hdKeypath != \"s\") { // If the hdKeypath is \"s\", that's the seed and it doesn't have a key origin\n+            CKey key;\n+            GetKey(meta.hd_seed_id, key);\n+            CExtKey masterKey;\n+            masterKey.SetSeed(key.begin(), key.size());\n+            // Add to map\n+            CKeyID master_id = masterKey.key.GetPubKey().GetID();\n+            std::copy(master_id.begin(), master_id.begin() + 4, meta.key_origin.fingerprint);\n+            if (!ParseHDKeypath(meta.hdKeypath, meta.key_origin.path)) {\n+                throw std::runtime_error(\"Invalid stored hdKeypath\");\n+            }\n+            meta.has_key_origin = true;\n+            if (meta.nVersion < CKeyMetadata::VERSION_WITH_KEY_ORIGIN) {\n+                meta.nVersion = CKeyMetadata::VERSION_WITH_KEY_ORIGIN;\n+            }\n+\n+            // Write meta to wallet\n+            CPubKey pubkey;\n+            if (GetPubKey(meta_pair.first, pubkey)) {\n+                batch->WriteKeyMetadata(meta, pubkey, true);\n+            }\n+        }\n+    }\n+    batch.reset(); //write before setting the flag\n+}\n+\n+bool LegacyScriptPubKeyMan::SetupGeneration(bool force)\n+{\n+    if ((CanGenerateKeys() && !force) || IsLocked()) {\n+        return false;\n+    }\n+\n+    SetHDSeed(GenerateNewSeed());\n+    if (!NewKeyPool()) {\n+        return false;\n+    }\n+    return true;\n+}\n+\n+bool LegacyScriptPubKeyMan::IsHDEnabled() const\n+{\n+    return !hdChain.seed_id.IsNull();\n+}\n+\n+bool LegacyScriptPubKeyMan::CanGetAddresses(bool internal)\n+{\n+    LOCK(cs_KeyStore);\n+    // Check if the keypool has keys\n+    bool keypool_has_keys;\n+    if (internal && CanSupportFeature(FEATURE_HD_SPLIT)) {\n+        keypool_has_keys = setInternalKeyPool.size() > 0;\n+    } else {\n+        keypool_has_keys = KeypoolCountExternalKeys() > 0;\n+    }\n+    // If the keypool doesn't have keys, check if we can generate them\n+    if (!keypool_has_keys) {\n+        return CanGenerateKeys();\n+    }\n+    return keypool_has_keys;\n+}\n+\n+bool LegacyScriptPubKeyMan::Upgrade(int prev_version, int new_version, std::string& error)\n+{\n+    LOCK(cs_KeyStore);\n+    error = \"\";\n+    bool hd_upgrade = false;\n+    bool split_upgrade = false;\n+    if (CanSupportFeature(FEATURE_HD) && !IsHDEnabled()) {\n+        WalletLogPrintf(\"Upgrading wallet to HD\\n\");\n+        SetMinVersion(FEATURE_HD);\n+\n+        // generate a new master key\n+        SetHDSeed(GenerateNewSeed());\n+        hd_upgrade = true;\n+    }\n+    // Upgrade to HD chain split if necessary\n+    if (CanSupportFeature(FEATURE_HD_SPLIT) && hdChain.nVersion < 2 /* VERSION_HD_CHAIN_SPLIT */) {\n+        WalletLogPrintf(\"Upgrading wallet to use HD chain split\\n\");\n+        SetMinVersion(FEATURE_PRE_SPLIT_KEYPOOL);\n+        split_upgrade = FEATURE_HD_SPLIT > prev_version;\n+    }\n+    // Mark all keys currently in the keypool as pre-split\n+    if (split_upgrade) {\n+        MarkPreSplitKeys();\n+    }\n+    // Regenerate the keypool if upgraded to HD\n+    if (hd_upgrade) {\n+        if (!TopUpKeyPool()) {\n+            error = _(\"Unable to generate keys\").translated;\n+            return false;\n+        }\n+    }\n+    return true;\n+}\n+\n+bool LegacyScriptPubKeyMan::HavePrivateKeys() const\n+{\n+    LOCK(cs_KeyStore);\n+    return !mapKeys.empty() || !mapCryptedKeys.empty();\n+}\n+\n+void LegacyScriptPubKeyMan::RewriteDB()",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 436,
      "original_position": 405,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "365879e9bdba93a84bd2ef4a39816a5eb8fd31b0",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "this has nothing to do with the DB, other than it's called right after `database->Rewrite(\"\\x04pool\")` by the caller.\r\n\r\nPlease rename it to something sensible e.g., `ClearKeypool`",
      "created_at": "2019-09-09T15:45:26Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322316694",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322316694"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 436,
      "original_line": 436,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322319993",
      "pull_request_review_id": 285582874,
      "id": 322319993,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjMxOTk5Mw==",
      "diff_hunk": "@@ -429,6 +427,36 @@ bool LegacyScriptPubKeyMan::AddKeyPubKeyInner(const CKey& key, const CPubKey &pu\n     return true;\n }\n \n+bool LegacyScriptPubKeyMan::Encrypt(CKeyingMaterial& vMasterKeyIn, WalletBatch* batch)\n+{\n+    LOCK(cs_KeyStore);\n+    encrypted_batch = batch;",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 32,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "b5cb8f59ca2a501aa1f50f78b65fb029eff07d80",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "can you explain the diff in code from master with the batch pointer being set in this function, when it's set to null, etc?",
      "created_at": "2019-09-09T15:52:10Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322319993",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322319993"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 638,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322323465",
      "pull_request_review_id": 285582874,
      "id": 322323465,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjMyMzQ2NQ==",
      "diff_hunk": "@@ -1122,3 +1123,122 @@ void LegacyScriptPubKeyMan::MarkPreSplitKeys()\n         it = setExternalKeyPool.erase(it);\n     }\n }\n+\n+bool LegacyScriptPubKeyMan::AddCScript(const CScript& redeemScript)\n+{\n+    WalletBatch batch(*m_database);\n+    return AddCScriptWithDB(batch, redeemScript);\n+}\n+\n+bool LegacyScriptPubKeyMan::AddCScriptWithDB(WalletBatch& batch, const CScript& redeemScript)\n+{\n+    if (!FillableSigningProvider::AddCScript(redeemScript))\n+        return false;\n+    if (batch.WriteCScript(Hash160(redeemScript), redeemScript)) {\n+        UnsetWalletFlagWithDB(batch, WALLET_FLAG_BLANK_WALLET);\n+        return true;\n+    }\n+    return false;\n+}\n+\n+bool LegacyScriptPubKeyMan::AddKeyOriginWithDB(WalletBatch& batch, const CPubKey& pubkey, const KeyOriginInfo& info)\n+{\n+    LOCK(cs_KeyStore);\n+    std::copy(info.fingerprint, info.fingerprint + 4, mapKeyMetadata[pubkey.GetID()].key_origin.fingerprint);\n+    mapKeyMetadata[pubkey.GetID()].key_origin.path = info.path;\n+    mapKeyMetadata[pubkey.GetID()].has_key_origin = true;\n+    mapKeyMetadata[pubkey.GetID()].hdKeypath = WriteHDKeypath(info.path);\n+    return batch.WriteKeyMetadata(mapKeyMetadata[pubkey.GetID()], pubkey, true);\n+}\n+\n+bool LegacyScriptPubKeyMan::ImportScripts(const std::set<CScript> scripts, int64_t timestamp)\n+{\n+    WalletBatch batch(*m_database);\n+    for (const auto& entry : scripts) {\n+        CScriptID id(entry);\n+        if (HaveCScript(id)) {\n+            WalletLogPrintf(\"Already have script %s, skipping\\n\", HexStr(entry));\n+            continue;\n+        }\n+        if (!AddCScriptWithDB(batch, entry)) {\n+            return false;\n+        }\n+\n+        if (timestamp > 0) {\n+            m_script_metadata[CScriptID(entry)].nCreateTime = timestamp;\n+        }\n+    }\n+    if (timestamp > 0) {\n+        UpdateTimeFirstKey(timestamp);\n+    }\n+\n+    return true;\n+}\n+\n+bool LegacyScriptPubKeyMan::ImportPrivKeys(const std::map<CKeyID, CKey>& privkey_map, const int64_t timestamp)\n+{\n+    WalletBatch batch(*m_database);\n+    for (const auto& entry : privkey_map) {\n+        const CKey& key = entry.second;\n+        CPubKey pubkey = key.GetPubKey();\n+        const CKeyID& id = entry.first;\n+        assert(key.VerifyPubKey(pubkey));\n+        // Skip if we already have the key\n+        if (HaveKey(id)) {\n+            WalletLogPrintf(\"Already have key with pubkey %s, skipping\\n\", HexStr(pubkey));\n+            continue;\n+        }\n+        mapKeyMetadata[id].nCreateTime = timestamp;\n+        // If the private key is not present in the wallet, insert it.\n+        if (!AddKeyPubKeyWithDB(batch, key, pubkey)) {\n+            return false;\n+        }\n+        UpdateTimeFirstKey(timestamp);\n+    }\n+    return true;\n+}\n+\n+bool LegacyScriptPubKeyMan::ImportPubKeys(const std::vector<CKeyID>& ordered_pubkeys, const std::map<CKeyID, CPubKey>& pubkey_map, const std::map<CKeyID, std::pair<CPubKey, KeyOriginInfo>>& key_origins, const bool add_keypool, const bool internal, const int64_t timestamp)\n+{\n+    WalletBatch batch(*m_database);\n+    for (const auto& entry : key_origins) {\n+        AddKeyOriginWithDB(batch, entry.second.first, entry.second.second);\n+    }\n+    for (const CKeyID& id : ordered_pubkeys) {\n+        auto entry = pubkey_map.find(id);\n+        if (entry == pubkey_map.end()) {\n+            continue;\n+        }\n+        const CPubKey& pubkey = entry->second;\n+        CPubKey temp;\n+        if (GetPubKey(id, temp)) {\n+            // Already have pubkey, skipping\n+            WalletLogPrintf(\"Already have pubkey %s, skipping\\n\", HexStr(temp));\n+            continue;\n+        }\n+        if (!AddWatchOnlyWithDB(batch, GetScriptForRawPubKey(pubkey), timestamp)) {\n+            return false;\n+        }\n+        mapKeyMetadata[id].nCreateTime = timestamp;\n+\n+        // Add to keypool only works with pubkeys\n+        if (add_keypool) {\n+            AddKeypoolPubkeyWithDB(pubkey, internal, batch);\n+            NotifyCanGetAddressesChanged();\n+        }\n+    }\n+    return true;\n+}\n+\n+bool LegacyScriptPubKeyMan::ImportScriptPubKeys(const std::set<CScript>& script_pub_keys, const bool have_solving_data, const int64_t timestamp)\n+{\n+    WalletBatch batch(*m_database);\n+    for (const CScript& script : script_pub_keys) {\n+        if (!have_solving_data || !IsMine(script)) { // Always call AddWatchOnly for non-solvable watch-only, so that watch timestamp gets updated\n+            if (!AddWatchOnlyWithDB(batch, script, timestamp)) {\n+                return false;\n+            }\n+        }",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 1427,
      "original_position": 127,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "c02e6daf1842ba1589802c612a2228744b43d7c3",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Can you explain where the `SetAddressBookWithDB` call went for reviewers? ",
      "created_at": "2019-09-09T15:58:58Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322323465",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322323465"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1427,
      "original_line": 1427,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322325223",
      "pull_request_review_id": 285582874,
      "id": 322325223,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjMyNTIyMw==",
      "diff_hunk": "@@ -0,0 +1,479 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+#define BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <wallet/crypter.h>\n+#include <wallet/ismine.h>\n+#include <wallet/walletdb.h>\n+#include <wallet/walletutil.h>\n+\n+#include <functional>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+enum class OutputType;\n+\n+//! Default for -keypool\n+static const unsigned int DEFAULT_KEYPOOL_SIZE = 1000;\n+\n+std::vector<CKeyID> GetAffectedKeys(const CScript& spk, const SigningProvider& provider);\n+\n+/** A key from a CWallet's keypool\n+ *\n+ * The wallet holds one (for pre HD-split wallets) or several keypools. These\n+ * are sets of keys that have not yet been used to provide addresses or receive\n+ * change.\n+ *\n+ * The Bitcoin Core wallet was originally a collection of unrelated private\n+ * keys with their associated addresses. If a non-HD wallet generated a\n+ * key/address, gave that address out and then restored a backup from before\n+ * that key's generation, then any funds sent to that address would be\n+ * lost definitively.\n+ *\n+ * The keypool was implemented to avoid this scenario (commit: 10384941). The\n+ * wallet would generate a set of keys (100 by default). When a new public key\n+ * was required, either to give out as an address or to use in a change output,\n+ * it would be drawn from the keypool. The keypool would then be topped up to\n+ * maintain 100 keys. This ensured that as long as the wallet hadn't used more\n+ * than 100 keys since the previous backup, all funds would be safe, since a\n+ * restored wallet would be able to scan for all owned addresses.\n+ *\n+ * A keypool also allowed encrypted wallets to give out addresses without\n+ * having to be decrypted to generate a new private key.\n+ *\n+ * With the introduction of HD wallets (commit: f1902510), the keypool\n+ * essentially became an address look-ahead pool. Restoring old backups can no\n+ * longer definitively lose funds as long as the addresses used were from the\n+ * wallet's HD seed (since all private keys can be rederived from the seed).\n+ * However, if many addresses were used since the backup, then the wallet may\n+ * not know how far ahead in the HD chain to look for its addresses. The\n+ * keypool is used to implement a 'gap limit'. The keypool maintains a set of\n+ * keys (by default 1000) ahead of the last used key and scans for the\n+ * addresses of those keys.  This avoids the risk of not seeing transactions\n+ * involving the wallet's addresses, or of re-using the same address.\n+ *\n+ * The HD-split wallet feature added a second keypool (commit: 02592f4c). There\n+ * is an external keypool (for addresses to hand out) and an internal keypool\n+ * (for change addresses).\n+ *\n+ * Keypool keys are stored in the wallet/keystore's keymap. The keypool data is\n+ * stored as sets of indexes in the wallet (setInternalKeyPool,\n+ * setExternalKeyPool and set_pre_split_keypool), and a map from the key to the\n+ * index (m_pool_key_to_index). The CKeyPool object is used to\n+ * serialize/deserialize the pool data to/from the database.\n+ */\n+class CKeyPool\n+{\n+public:\n+    //! The time at which the key was generated. Set in AddKeypoolPubKeyWithDB\n+    int64_t nTime;\n+    //! The public key\n+    CPubKey vchPubKey;\n+    //! Whether this keypool entry is in the internal keypool (for change outputs)\n+    bool fInternal;\n+    //! Whether this key was generated for a keypool before the wallet was upgraded to HD-split\n+    bool m_pre_split;\n+\n+    CKeyPool();\n+    CKeyPool(const CPubKey& vchPubKeyIn, bool internalIn);\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        int nVersion = s.GetVersion();\n+        if (!(s.GetType() & SER_GETHASH))\n+            READWRITE(nVersion);\n+        READWRITE(nTime);\n+        READWRITE(vchPubKey);\n+        if (ser_action.ForRead()) {\n+            try {\n+                READWRITE(fInternal);\n+            }\n+            catch (std::ios_base::failure&) {\n+                /* flag as external address if we can't read the internal boolean\n+                   (this will be the case for any wallet before the HD chain split version) */\n+                fInternal = false;\n+            }\n+            try {\n+                READWRITE(m_pre_split);\n+            }\n+            catch (std::ios_base::failure&) {\n+                /* flag as postsplit address if we can't read the m_pre_split boolean\n+                   (this will be the case for any wallet that upgrades to HD chain split)*/\n+                m_pre_split = false;\n+            }\n+        }\n+        else {\n+            READWRITE(fInternal);\n+            READWRITE(m_pre_split);\n+        }\n+    }\n+};\n+\n+typedef std::function<void(uint64_t)> FlagFunc;\n+typedef std::function<void(WalletBatch&, uint64_t)> FlagFuncWithDB;\n+typedef std::function<bool(uint64_t)> FlagSetFunc;\n+typedef std::function<bool(enum WalletFeature)> VersionFunc;\n+typedef std::function<std::string()> NameFunc;\n+typedef std::function<void(enum WalletFeature)> SetVersionFunc;\n+\n+/*\n+ * A class implementing ScriptPubKeyMan manages some (or all) scriptPubKeys used in a wallet.\n+ * It contains the scripts and keys related to the scriptPubKeys it manages.\n+ * A ScriptPubKeyMan will be able to give out scriptPubKeys to be used, as well as marking\n+ * when a scriptPubKey has been used. It also handles when and how to store a scriptPubKey\n+ * and it's related scripts and keys, including encryption.\n+ */\n+\n+class ScriptPubKeyMan\n+{\n+protected:\n+    FlagSetFunc IsWalletFlagSet; // Function pointer to function that determines if a wallet flag is set\n+    FlagFunc SetWalletFlag; // Function pointer to function to set wallet flags\n+    FlagFuncWithDB UnsetWalletFlagWithDB; // Function pointer to function to unset wallet flags\n+    VersionFunc CanSupportFeature; // Function pointer to function that indicates whether the feature is supported\n+    NameFunc GetDisplayName; // Function pointer to GetDisplayName to get the name of a wallet for WalletLogPrintf\n+    SetVersionFunc SetMinVersion; // Function pointer to SetMinVersion in the wallet\n+\n+    /** Internal database handle. */\n+    std::shared_ptr<WalletDatabase> m_database;\n+\n+public:\n+    ScriptPubKeyMan(FlagSetFunc is_set_func, FlagFunc set_flag_func, FlagFuncWithDB unset_flag_func, VersionFunc feature_sup_func, NameFunc wallet_name_func, SetVersionFunc set_version_func, std::shared_ptr<WalletDatabase> database)\n+        :   IsWalletFlagSet(is_set_func),\n+            SetWalletFlag(set_flag_func),\n+            UnsetWalletFlagWithDB(unset_flag_func),\n+            CanSupportFeature(feature_sup_func),\n+            GetDisplayName(wallet_name_func),\n+            SetMinVersion(set_version_func),\n+            m_database(database)\n+        {}\n+\n+    virtual ~ScriptPubKeyMan() {};\n+    virtual bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) { return false; }\n+    virtual isminetype IsMine(const CScript& script) const { return ISMINE_NO; }\n+\n+    virtual bool IsCrypted() const { return false; }\n+    virtual bool IsLocked() const { return false; }\n+    virtual bool Lock() { return false; }\n+\n+    virtual bool Unlock(const CKeyingMaterial& vMasterKeyIn, bool accept_no_keys = false) { return false; }\n+    virtual bool Encrypt(CKeyingMaterial& vMasterKeyIn, WalletBatch* batch) { return false; }\n+\n+    virtual bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool) { return false; }\n+    virtual void KeepDestination(int64_t index) {}\n+    virtual void ReturnDestination(int64_t index, bool internal, const CTxDestination& addr) {}\n+\n+    virtual bool TopUp(unsigned int size = 0) { return false; }\n+\n+    //! Mark unused addresses as being used\n+    virtual void MarkUnusedAddresses(const CScript& script) {}\n+\n+    //! Upgrade stored CKeyMetadata objects to store key origin info as KeyOriginInfo\n+    virtual void UpgradeKeyMetadata() {}\n+\n+    /** Sets up the key generation stuff.\n+      * Returns false if already setup or setup fails, true if setup is successful\n+      * Set force=true to make it re-setup if already setup, used for upgrades\n+      */\n+    virtual bool SetupGeneration(bool force = false) { return false; }\n+\n+    /* Returns true if HD is enabled */\n+    virtual bool IsHDEnabled() const { return false; }\n+\n+    /* Returns true if the wallet can give out new addresses. This means it has keys in the keypool or can generate new keys */\n+    virtual bool CanGetAddresses(bool internal = false) { return false; }\n+\n+    /** Upgrades the wallet to the specified version */\n+    virtual bool Upgrade(int prev_version, int new_version, std::string& error) { return false; }\n+\n+    virtual bool HavePrivateKeys() const { return false; }\n+\n+    //! The action to do when the DB needs rewrite\n+    virtual void RewriteDB() {}\n+\n+    virtual int64_t GetOldestKeyPoolTime() { return GetTime(); }\n+\n+    virtual size_t KeypoolCountExternalKeys() { return 0; }\n+    virtual unsigned int GetKeypoolSize() const { return 0; }\n+\n+    virtual int64_t GetTimeFirstKey() const { return 0; }\n+\n+    virtual const CKeyMetadata* GetMetadata(uint160 id) const { return nullptr; }",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": 211,
      "original_position": 208,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "365879e9bdba93a84bd2ef4a39816a5eb8fd31b0",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Brief comment on what this does? (I don't think similar existed before in CWallet)",
      "created_at": "2019-09-09T16:02:36Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322325223",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322325223"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 211,
      "original_line": 211,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322326671",
      "pull_request_review_id": 285582874,
      "id": 322326671,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjMyNjY3MQ==",
      "diff_hunk": "@@ -74,6 +72,8 @@ class FillableSigningProvider : public SigningProvider\n     void ImplicitlyLearnRelatedKeyScripts(const CPubKey& pubkey) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n \n public:\n+    mutable CCriticalSection cs_KeyStore;",
      "path": "src/script/signingprovider.h",
      "position": 13,
      "original_position": 13,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "6806ad09a18e4800e3eb1cdcd483b7fe8907d684",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "why this move? is this preparatory? ",
      "created_at": "2019-09-09T16:05:35Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322326671",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322326671"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 75,
      "original_line": 75,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322336189",
      "pull_request_review_id": 285582874,
      "id": 322336189,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjMzNjE4OQ==",
      "diff_hunk": "@@ -310,6 +312,11 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n                 strErr = \"Error reading wallet database: LoadKey failed\";\n                 return false;\n             }\n+            if (!pwallet->GetLegacyScriptPubKeyMan()->LoadKey(key, vchPubKey))\n+            {\n+                strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadKey failed\";\n+                return false;\n+            }\n         } else if (strType == DBKeys::MASTER_KEY) {",
      "path": "src/wallet/walletdb.cpp",
      "position": 23,
      "original_position": 21,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "6806ad09a18e4800e3eb1cdcd483b7fe8907d684",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe leave a comment in this block that the pubkeyman has no use for this key, it's just an encryption key. I was tripped up on this. Bad naming! bad!",
      "created_at": "2019-09-09T16:26:22Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322336189",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322336189"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 314,
      "original_line": 314,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322337263",
      "pull_request_review_id": 285582874,
      "id": 322337263,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjMzNzI2Mw==",
      "diff_hunk": "@@ -296,7 +296,22 @@ std::unique_ptr<SigningProvider> LegacyScriptPubKeyMan::GetSigningProvider(const\n \n bool LegacyScriptPubKeyMan::CanProvide(const CScript& script, SignatureData& sigdata)",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 502,
      "original_position": 2,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "6c7c36276e26539edc8b281129bb30f1cd4a4fb8",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "please explain in header what it `CanProvide`",
      "created_at": "2019-09-09T16:28:42Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322337263",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322337263"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 502,
      "original_line": 502,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322337866",
      "pull_request_review_id": 285582874,
      "id": 322337866,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjMzNzg2Ng==",
      "diff_hunk": "@@ -296,7 +296,22 @@ std::unique_ptr<SigningProvider> LegacyScriptPubKeyMan::GetSigningProvider(const\n \n bool LegacyScriptPubKeyMan::CanProvide(const CScript& script, SignatureData& sigdata)\n {\n-    return false;\n+    if (IsMine(script) != ISMINE_NO) {\n+        return true;\n+    } else if (HaveCScript(CScriptID(script))) {\n+        return true;\n+    } else {\n+        ProduceSignature(*this, DUMMY_SIGNATURE_CREATOR, script, sigdata);\n+        if (!sigdata.signatures.empty()) {\n+            // If we could make signatures, make sure we have the private key",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "6c7c36276e26539edc8b281129bb30f1cd4a4fb8",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "why?",
      "created_at": "2019-09-09T16:30:09Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322337866",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322337866"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 482,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322356879",
      "pull_request_review_id": 285656678,
      "id": 322356879,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjM1Njg3OQ==",
      "diff_hunk": "@@ -3709,28 +3709,23 @@ bool CWallet::GetNewDestination(const OutputType type, const std::string label,\n {\n     LOCK(cs_wallet);\n     error.clear();\n-\n-    TopUpKeyPool();\n-\n-    // Generate a new key that is added to wallet\n-    CPubKey new_key;\n-    if (!GetKeyFromPool(new_key)) {\n-        error = \"Error: Keypool ran out, please call keypoolrefill first\";\n-        return false;\n+    bool result = false;\n+    auto spk_man = GetScriptPubKeyMan(type, false);",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 13,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "6a9164679039976dbb291b581dfe4f632a107f46",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: annotate the bool arg, or make it an enum",
      "created_at": "2019-09-09T17:14:36Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322356879",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322356879"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3093,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322358340",
      "pull_request_review_id": 285656678,
      "id": 322358340,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjM1ODM0MA==",
      "diff_hunk": "@@ -3922,42 +3917,44 @@ std::set<CTxDestination> CWallet::GetLabelAddresses(const std::string& label) co\n \n bool ReserveDestination::GetReservedDestination(const OutputType type, CTxDestination& dest, bool internal)\n {\n-    if (!pwallet->CanGetAddresses(internal)) {\n+    spk_man = pwallet->GetScriptPubKeyMan(type, internal);\n+    if (!spk_man) {\n+        return false;\n+    }\n+\n+    if (!spk_man->IsLocked()) {",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 48,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "6a9164679039976dbb291b581dfe4f632a107f46",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "no need to gate here, `TopUp` already checks for this in `TopUpKeyPool`",
      "created_at": "2019-09-09T17:18:01Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322358340",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322358340"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3283,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322358957",
      "pull_request_review_id": 285656678,
      "id": 322358957,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjM1ODk1Nw==",
      "diff_hunk": "@@ -3922,42 +3917,44 @@ std::set<CTxDestination> CWallet::GetLabelAddresses(const std::string& label) co\n \n bool ReserveDestination::GetReservedDestination(const OutputType type, CTxDestination& dest, bool internal)\n {\n-    if (!pwallet->CanGetAddresses(internal)) {\n+    spk_man = pwallet->GetScriptPubKeyMan(type, internal);\n+    if (!spk_man) {\n+        return false;\n+    }\n+\n+    if (!spk_man->IsLocked()) {\n+        spk_man->TopUp();\n+    }\n+\n+    if (!spk_man->CanGetAddresses(internal)) {",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 52,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "6a9164679039976dbb291b581dfe4f632a107f46",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`LegacyScriptPubKeyMan::GetReservedDestination` does this check as well",
      "created_at": "2019-09-09T17:19:25Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322358957",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322358957"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3287,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322360258",
      "pull_request_review_id": 285661221,
      "id": 322360258,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjM2MDI1OA==",
      "diff_hunk": "@@ -1122,3 +1123,122 @@ void LegacyScriptPubKeyMan::MarkPreSplitKeys()\n         it = setExternalKeyPool.erase(it);\n     }\n }\n+\n+bool LegacyScriptPubKeyMan::AddCScript(const CScript& redeemScript)\n+{\n+    WalletBatch batch(*m_database);\n+    return AddCScriptWithDB(batch, redeemScript);\n+}\n+\n+bool LegacyScriptPubKeyMan::AddCScriptWithDB(WalletBatch& batch, const CScript& redeemScript)\n+{\n+    if (!FillableSigningProvider::AddCScript(redeemScript))\n+        return false;\n+    if (batch.WriteCScript(Hash160(redeemScript), redeemScript)) {\n+        UnsetWalletFlagWithDB(batch, WALLET_FLAG_BLANK_WALLET);\n+        return true;\n+    }\n+    return false;\n+}\n+\n+bool LegacyScriptPubKeyMan::AddKeyOriginWithDB(WalletBatch& batch, const CPubKey& pubkey, const KeyOriginInfo& info)\n+{\n+    LOCK(cs_KeyStore);\n+    std::copy(info.fingerprint, info.fingerprint + 4, mapKeyMetadata[pubkey.GetID()].key_origin.fingerprint);\n+    mapKeyMetadata[pubkey.GetID()].key_origin.path = info.path;\n+    mapKeyMetadata[pubkey.GetID()].has_key_origin = true;\n+    mapKeyMetadata[pubkey.GetID()].hdKeypath = WriteHDKeypath(info.path);\n+    return batch.WriteKeyMetadata(mapKeyMetadata[pubkey.GetID()], pubkey, true);\n+}\n+\n+bool LegacyScriptPubKeyMan::ImportScripts(const std::set<CScript> scripts, int64_t timestamp)\n+{\n+    WalletBatch batch(*m_database);\n+    for (const auto& entry : scripts) {\n+        CScriptID id(entry);\n+        if (HaveCScript(id)) {\n+            WalletLogPrintf(\"Already have script %s, skipping\\n\", HexStr(entry));\n+            continue;\n+        }\n+        if (!AddCScriptWithDB(batch, entry)) {\n+            return false;\n+        }\n+\n+        if (timestamp > 0) {\n+            m_script_metadata[CScriptID(entry)].nCreateTime = timestamp;\n+        }\n+    }\n+    if (timestamp > 0) {\n+        UpdateTimeFirstKey(timestamp);\n+    }\n+\n+    return true;\n+}\n+\n+bool LegacyScriptPubKeyMan::ImportPrivKeys(const std::map<CKeyID, CKey>& privkey_map, const int64_t timestamp)\n+{\n+    WalletBatch batch(*m_database);\n+    for (const auto& entry : privkey_map) {\n+        const CKey& key = entry.second;\n+        CPubKey pubkey = key.GetPubKey();\n+        const CKeyID& id = entry.first;\n+        assert(key.VerifyPubKey(pubkey));\n+        // Skip if we already have the key\n+        if (HaveKey(id)) {\n+            WalletLogPrintf(\"Already have key with pubkey %s, skipping\\n\", HexStr(pubkey));\n+            continue;\n+        }\n+        mapKeyMetadata[id].nCreateTime = timestamp;\n+        // If the private key is not present in the wallet, insert it.\n+        if (!AddKeyPubKeyWithDB(batch, key, pubkey)) {\n+            return false;\n+        }\n+        UpdateTimeFirstKey(timestamp);\n+    }\n+    return true;\n+}\n+\n+bool LegacyScriptPubKeyMan::ImportPubKeys(const std::vector<CKeyID>& ordered_pubkeys, const std::map<CKeyID, CPubKey>& pubkey_map, const std::map<CKeyID, std::pair<CPubKey, KeyOriginInfo>>& key_origins, const bool add_keypool, const bool internal, const int64_t timestamp)\n+{\n+    WalletBatch batch(*m_database);\n+    for (const auto& entry : key_origins) {\n+        AddKeyOriginWithDB(batch, entry.second.first, entry.second.second);\n+    }\n+    for (const CKeyID& id : ordered_pubkeys) {\n+        auto entry = pubkey_map.find(id);\n+        if (entry == pubkey_map.end()) {\n+            continue;\n+        }\n+        const CPubKey& pubkey = entry->second;\n+        CPubKey temp;\n+        if (GetPubKey(id, temp)) {\n+            // Already have pubkey, skipping\n+            WalletLogPrintf(\"Already have pubkey %s, skipping\\n\", HexStr(temp));\n+            continue;\n+        }\n+        if (!AddWatchOnlyWithDB(batch, GetScriptForRawPubKey(pubkey), timestamp)) {\n+            return false;\n+        }\n+        mapKeyMetadata[id].nCreateTime = timestamp;\n+\n+        // Add to keypool only works with pubkeys\n+        if (add_keypool) {\n+            AddKeypoolPubkeyWithDB(pubkey, internal, batch);\n+            NotifyCanGetAddressesChanged();\n+        }\n+    }\n+    return true;\n+}\n+\n+bool LegacyScriptPubKeyMan::ImportScriptPubKeys(const std::set<CScript>& script_pub_keys, const bool have_solving_data, const int64_t timestamp)\n+{\n+    WalletBatch batch(*m_database);\n+    for (const CScript& script : script_pub_keys) {\n+        if (!have_solving_data || !IsMine(script)) { // Always call AddWatchOnly for non-solvable watch-only, so that watch timestamp gets updated\n+            if (!AddWatchOnlyWithDB(batch, script, timestamp)) {\n+                return false;\n+            }\n+        }",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 1427,
      "original_position": 127,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "c02e6daf1842ba1589802c612a2228744b43d7c3",
      "in_reply_to_id": 322323465,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It remains in wallet.cpp since the address book isn't part of `ScriptPubKeyMan`.",
      "created_at": "2019-09-09T17:22:34Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322360258",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322360258"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1427,
      "original_line": 1427,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322361186",
      "pull_request_review_id": 285656678,
      "id": 322361186,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjM2MTE4Ng==",
      "diff_hunk": "@@ -3922,42 +3917,44 @@ std::set<CTxDestination> CWallet::GetLabelAddresses(const std::string& label) co\n \n bool ReserveDestination::GetReservedDestination(const OutputType type, CTxDestination& dest, bool internal)\n {\n-    if (!pwallet->CanGetAddresses(internal)) {\n+    spk_man = pwallet->GetScriptPubKeyMan(type, internal);\n+    if (!spk_man) {\n+        return false;\n+    }\n+\n+    if (!spk_man->IsLocked()) {\n+        spk_man->TopUp();\n+    }\n+\n+    if (!spk_man->CanGetAddresses(internal)) {\n         return false;\n     }\n \n     if (nIndex == -1)\n     {\n         CKeyPool keypool;\n-        if (!pwallet->ReserveKeyFromKeyPool(nIndex, keypool, internal)) {\n+        if (!spk_man->GetReservedDestination(type, internal, dest, nIndex, keypool)) {\n             return false;\n         }\n-        vchPubKey = keypool.vchPubKey;\n         fInternal = keypool.fInternal;\n     }\n-    assert(vchPubKey.IsValid());\n-    pwallet->LearnRelatedScripts(vchPubKey, type);",
      "path": "src/wallet/wallet.cpp",
      "position": 1230,
      "original_position": 67,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "6a9164679039976dbb291b581dfe4f632a107f46",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "not immediately obvious to me how this gets accomplished in new flow? `GetNewDestination` case is covered, just not this one?",
      "created_at": "2019-09-09T17:24:38Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322361186",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322361186"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3922,
      "original_line": 3922,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322362131",
      "pull_request_review_id": 285663578,
      "id": 322362131,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjM2MjEzMQ==",
      "diff_hunk": "@@ -296,7 +296,22 @@ std::unique_ptr<SigningProvider> LegacyScriptPubKeyMan::GetSigningProvider(const\n \n bool LegacyScriptPubKeyMan::CanProvide(const CScript& script, SignatureData& sigdata)\n {\n-    return false;\n+    if (IsMine(script) != ISMINE_NO) {\n+        return true;\n+    } else if (HaveCScript(CScriptID(script))) {\n+        return true;\n+    } else {\n+        ProduceSignature(*this, DUMMY_SIGNATURE_CREATOR, script, sigdata);\n+        if (!sigdata.signatures.empty()) {\n+            // If we could make signatures, make sure we have the private key",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "6c7c36276e26539edc8b281129bb30f1cd4a4fb8",
      "in_reply_to_id": 322337866,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It could be watch only (as DUMMY_SIGNATURE_CREATOR works for watch only things), which then causes issues elsewhere when a private key is assumed to exist but doesn't for watch only things. So this prevents those code paths being taken for watch only things.",
      "created_at": "2019-09-09T17:26:36Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322362131",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322362131"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 482,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322366919",
      "pull_request_review_id": 285669744,
      "id": 322366919,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjM2NjkxOQ==",
      "diff_hunk": "@@ -0,0 +1,479 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+#define BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <wallet/crypter.h>\n+#include <wallet/ismine.h>\n+#include <wallet/walletdb.h>\n+#include <wallet/walletutil.h>\n+\n+#include <functional>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+enum class OutputType;\n+\n+//! Default for -keypool\n+static const unsigned int DEFAULT_KEYPOOL_SIZE = 1000;\n+\n+std::vector<CKeyID> GetAffectedKeys(const CScript& spk, const SigningProvider& provider);\n+\n+/** A key from a CWallet's keypool\n+ *\n+ * The wallet holds one (for pre HD-split wallets) or several keypools. These\n+ * are sets of keys that have not yet been used to provide addresses or receive\n+ * change.\n+ *\n+ * The Bitcoin Core wallet was originally a collection of unrelated private\n+ * keys with their associated addresses. If a non-HD wallet generated a\n+ * key/address, gave that address out and then restored a backup from before\n+ * that key's generation, then any funds sent to that address would be\n+ * lost definitively.\n+ *\n+ * The keypool was implemented to avoid this scenario (commit: 10384941). The\n+ * wallet would generate a set of keys (100 by default). When a new public key\n+ * was required, either to give out as an address or to use in a change output,\n+ * it would be drawn from the keypool. The keypool would then be topped up to\n+ * maintain 100 keys. This ensured that as long as the wallet hadn't used more\n+ * than 100 keys since the previous backup, all funds would be safe, since a\n+ * restored wallet would be able to scan for all owned addresses.\n+ *\n+ * A keypool also allowed encrypted wallets to give out addresses without\n+ * having to be decrypted to generate a new private key.\n+ *\n+ * With the introduction of HD wallets (commit: f1902510), the keypool\n+ * essentially became an address look-ahead pool. Restoring old backups can no\n+ * longer definitively lose funds as long as the addresses used were from the\n+ * wallet's HD seed (since all private keys can be rederived from the seed).\n+ * However, if many addresses were used since the backup, then the wallet may\n+ * not know how far ahead in the HD chain to look for its addresses. The\n+ * keypool is used to implement a 'gap limit'. The keypool maintains a set of\n+ * keys (by default 1000) ahead of the last used key and scans for the\n+ * addresses of those keys.  This avoids the risk of not seeing transactions\n+ * involving the wallet's addresses, or of re-using the same address.\n+ *\n+ * The HD-split wallet feature added a second keypool (commit: 02592f4c). There\n+ * is an external keypool (for addresses to hand out) and an internal keypool\n+ * (for change addresses).\n+ *\n+ * Keypool keys are stored in the wallet/keystore's keymap. The keypool data is\n+ * stored as sets of indexes in the wallet (setInternalKeyPool,\n+ * setExternalKeyPool and set_pre_split_keypool), and a map from the key to the\n+ * index (m_pool_key_to_index). The CKeyPool object is used to\n+ * serialize/deserialize the pool data to/from the database.\n+ */\n+class CKeyPool\n+{\n+public:\n+    //! The time at which the key was generated. Set in AddKeypoolPubKeyWithDB\n+    int64_t nTime;\n+    //! The public key\n+    CPubKey vchPubKey;\n+    //! Whether this keypool entry is in the internal keypool (for change outputs)\n+    bool fInternal;\n+    //! Whether this key was generated for a keypool before the wallet was upgraded to HD-split\n+    bool m_pre_split;\n+\n+    CKeyPool();\n+    CKeyPool(const CPubKey& vchPubKeyIn, bool internalIn);\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        int nVersion = s.GetVersion();\n+        if (!(s.GetType() & SER_GETHASH))\n+            READWRITE(nVersion);\n+        READWRITE(nTime);\n+        READWRITE(vchPubKey);\n+        if (ser_action.ForRead()) {\n+            try {\n+                READWRITE(fInternal);\n+            }\n+            catch (std::ios_base::failure&) {\n+                /* flag as external address if we can't read the internal boolean\n+                   (this will be the case for any wallet before the HD chain split version) */\n+                fInternal = false;\n+            }\n+            try {\n+                READWRITE(m_pre_split);\n+            }\n+            catch (std::ios_base::failure&) {\n+                /* flag as postsplit address if we can't read the m_pre_split boolean\n+                   (this will be the case for any wallet that upgrades to HD chain split)*/\n+                m_pre_split = false;\n+            }\n+        }\n+        else {\n+            READWRITE(fInternal);\n+            READWRITE(m_pre_split);\n+        }\n+    }\n+};\n+\n+typedef std::function<void(uint64_t)> FlagFunc;\n+typedef std::function<void(WalletBatch&, uint64_t)> FlagFuncWithDB;\n+typedef std::function<bool(uint64_t)> FlagSetFunc;\n+typedef std::function<bool(enum WalletFeature)> VersionFunc;\n+typedef std::function<std::string()> NameFunc;\n+typedef std::function<void(enum WalletFeature)> SetVersionFunc;\n+\n+/*\n+ * A class implementing ScriptPubKeyMan manages some (or all) scriptPubKeys used in a wallet.\n+ * It contains the scripts and keys related to the scriptPubKeys it manages.\n+ * A ScriptPubKeyMan will be able to give out scriptPubKeys to be used, as well as marking\n+ * when a scriptPubKey has been used. It also handles when and how to store a scriptPubKey\n+ * and it's related scripts and keys, including encryption.\n+ */\n+\n+class ScriptPubKeyMan\n+{\n+protected:\n+    FlagSetFunc IsWalletFlagSet; // Function pointer to function that determines if a wallet flag is set\n+    FlagFunc SetWalletFlag; // Function pointer to function to set wallet flags\n+    FlagFuncWithDB UnsetWalletFlagWithDB; // Function pointer to function to unset wallet flags\n+    VersionFunc CanSupportFeature; // Function pointer to function that indicates whether the feature is supported\n+    NameFunc GetDisplayName; // Function pointer to GetDisplayName to get the name of a wallet for WalletLogPrintf\n+    SetVersionFunc SetMinVersion; // Function pointer to SetMinVersion in the wallet\n+\n+    /** Internal database handle. */\n+    std::shared_ptr<WalletDatabase> m_database;\n+\n+public:\n+    ScriptPubKeyMan(FlagSetFunc is_set_func, FlagFunc set_flag_func, FlagFuncWithDB unset_flag_func, VersionFunc feature_sup_func, NameFunc wallet_name_func, SetVersionFunc set_version_func, std::shared_ptr<WalletDatabase> database)\n+        :   IsWalletFlagSet(is_set_func),\n+            SetWalletFlag(set_flag_func),\n+            UnsetWalletFlagWithDB(unset_flag_func),\n+            CanSupportFeature(feature_sup_func),\n+            GetDisplayName(wallet_name_func),\n+            SetMinVersion(set_version_func),\n+            m_database(database)\n+        {}\n+\n+    virtual ~ScriptPubKeyMan() {};\n+    virtual bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) { return false; }\n+    virtual isminetype IsMine(const CScript& script) const { return ISMINE_NO; }\n+\n+    virtual bool IsCrypted() const { return false; }\n+    virtual bool IsLocked() const { return false; }\n+    virtual bool Lock() { return false; }\n+\n+    virtual bool Unlock(const CKeyingMaterial& vMasterKeyIn, bool accept_no_keys = false) { return false; }\n+    virtual bool Encrypt(CKeyingMaterial& vMasterKeyIn, WalletBatch* batch) { return false; }\n+\n+    virtual bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool) { return false; }\n+    virtual void KeepDestination(int64_t index) {}\n+    virtual void ReturnDestination(int64_t index, bool internal, const CTxDestination& addr) {}\n+\n+    virtual bool TopUp(unsigned int size = 0) { return false; }\n+\n+    //! Mark unused addresses as being used\n+    virtual void MarkUnusedAddresses(const CScript& script) {}\n+\n+    //! Upgrade stored CKeyMetadata objects to store key origin info as KeyOriginInfo\n+    virtual void UpgradeKeyMetadata() {}\n+\n+    /** Sets up the key generation stuff.",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": null,
      "original_position": 181,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "365879e9bdba93a84bd2ef4a39816a5eb8fd31b0",
      "in_reply_to_id": 322312299,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The equivalent blocks in old wallet code are the various `SetHDSeed(GenerateNewSeed())` lines scattered around in a bunch of places.\r\n\r\nHow is it a misnomer?",
      "created_at": "2019-09-09T17:37:14Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322366919",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322366919"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 181,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322367040",
      "pull_request_review_id": 285656678,
      "id": 322367040,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjM2NzA0MA==",
      "diff_hunk": "@@ -1744,92 +1744,46 @@ bool CWallet::DummySignTx(CMutableTransaction &txNew, const std::vector<CTxOut>\n \n bool CWallet::ImportScripts(const std::set<CScript> scripts, int64_t timestamp)\n {\n-    WalletBatch batch(*database);\n-    for (const auto& entry : scripts) {\n-        CScriptID id(entry);\n-        if (HaveCScript(id)) {\n-            WalletLogPrintf(\"Already have script %s, skipping\\n\", HexStr(entry));\n-            continue;\n-        }\n-        if (!AddCScriptWithDB(batch, entry)) {\n-            return false;\n-        }\n-\n-        if (timestamp > 0) {\n-            m_script_metadata[CScriptID(entry)].nCreateTime = timestamp;\n-        }\n-    }\n-    if (timestamp > 0) {\n-        UpdateTimeFirstKey(timestamp);\n+    auto spk_man = GetLegacyScriptPubKeyMan();\n+    if (!spk_man) {\n+        return false;\n     }\n-\n-    return true;\n+    LOCK(spk_man->cs_KeyStore);\n+    return GetLegacyScriptPubKeyMan()->ImportScripts(scripts, timestamp);",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 28,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "c78b003846eb5989f12b6d532c0a8d6ae2dd3029",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "just use `spk_man` here (if you cannot, please annotate why in comments)",
      "created_at": "2019-09-09T17:37:35Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322367040",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322367040"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1385,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322367377",
      "pull_request_review_id": 285656678,
      "id": 322367377,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjM2NzM3Nw==",
      "diff_hunk": "@@ -1744,92 +1744,46 @@ bool CWallet::DummySignTx(CMutableTransaction &txNew, const std::vector<CTxOut>\n \n bool CWallet::ImportScripts(const std::set<CScript> scripts, int64_t timestamp)\n {\n-    WalletBatch batch(*database);\n-    for (const auto& entry : scripts) {\n-        CScriptID id(entry);\n-        if (HaveCScript(id)) {\n-            WalletLogPrintf(\"Already have script %s, skipping\\n\", HexStr(entry));\n-            continue;\n-        }\n-        if (!AddCScriptWithDB(batch, entry)) {\n-            return false;\n-        }\n-\n-        if (timestamp > 0) {\n-            m_script_metadata[CScriptID(entry)].nCreateTime = timestamp;\n-        }\n-    }\n-    if (timestamp > 0) {\n-        UpdateTimeFirstKey(timestamp);\n+    auto spk_man = GetLegacyScriptPubKeyMan();\n+    if (!spk_man) {\n+        return false;\n     }\n-\n-    return true;\n+    LOCK(spk_man->cs_KeyStore);\n+    return GetLegacyScriptPubKeyMan()->ImportScripts(scripts, timestamp);\n }\n \n bool CWallet::ImportPrivKeys(const std::map<CKeyID, CKey>& privkey_map, const int64_t timestamp)\n {\n-    WalletBatch batch(*database);\n-    for (const auto& entry : privkey_map) {\n-        const CKey& key = entry.second;\n-        CPubKey pubkey = key.GetPubKey();\n-        const CKeyID& id = entry.first;\n-        assert(key.VerifyPubKey(pubkey));\n-        // Skip if we already have the key\n-        if (HaveKey(id)) {\n-            WalletLogPrintf(\"Already have key with pubkey %s, skipping\\n\", HexStr(pubkey));\n-            continue;\n-        }\n-        mapKeyMetadata[id].nCreateTime = timestamp;\n-        // If the private key is not present in the wallet, insert it.\n-        if (!AddKeyPubKeyWithDB(batch, key, pubkey)) {\n-            return false;\n-        }\n-        UpdateTimeFirstKey(timestamp);\n+    auto spk_man = GetLegacyScriptPubKeyMan();\n+    if (!spk_man) {\n+        return false;\n     }\n-    return true;\n+    LOCK(spk_man->cs_KeyStore);\n+    return GetLegacyScriptPubKeyMan()->ImportPrivKeys(privkey_map, timestamp);",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 56,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "c78b003846eb5989f12b6d532c0a8d6ae2dd3029",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "just use spk_man here (if you cannot, please annotate why in comments)",
      "created_at": "2019-09-09T17:38:23Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322367377",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322367377"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1395,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322367622",
      "pull_request_review_id": 285656678,
      "id": 322367622,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjM2NzYyMg==",
      "diff_hunk": "@@ -1744,92 +1744,46 @@ bool CWallet::DummySignTx(CMutableTransaction &txNew, const std::vector<CTxOut>\n \n bool CWallet::ImportScripts(const std::set<CScript> scripts, int64_t timestamp)\n {\n-    WalletBatch batch(*database);\n-    for (const auto& entry : scripts) {\n-        CScriptID id(entry);\n-        if (HaveCScript(id)) {\n-            WalletLogPrintf(\"Already have script %s, skipping\\n\", HexStr(entry));\n-            continue;\n-        }\n-        if (!AddCScriptWithDB(batch, entry)) {\n-            return false;\n-        }\n-\n-        if (timestamp > 0) {\n-            m_script_metadata[CScriptID(entry)].nCreateTime = timestamp;\n-        }\n-    }\n-    if (timestamp > 0) {\n-        UpdateTimeFirstKey(timestamp);\n+    auto spk_man = GetLegacyScriptPubKeyMan();\n+    if (!spk_man) {\n+        return false;\n     }\n-\n-    return true;\n+    LOCK(spk_man->cs_KeyStore);\n+    return GetLegacyScriptPubKeyMan()->ImportScripts(scripts, timestamp);\n }\n \n bool CWallet::ImportPrivKeys(const std::map<CKeyID, CKey>& privkey_map, const int64_t timestamp)\n {\n-    WalletBatch batch(*database);\n-    for (const auto& entry : privkey_map) {\n-        const CKey& key = entry.second;\n-        CPubKey pubkey = key.GetPubKey();\n-        const CKeyID& id = entry.first;\n-        assert(key.VerifyPubKey(pubkey));\n-        // Skip if we already have the key\n-        if (HaveKey(id)) {\n-            WalletLogPrintf(\"Already have key with pubkey %s, skipping\\n\", HexStr(pubkey));\n-            continue;\n-        }\n-        mapKeyMetadata[id].nCreateTime = timestamp;\n-        // If the private key is not present in the wallet, insert it.\n-        if (!AddKeyPubKeyWithDB(batch, key, pubkey)) {\n-            return false;\n-        }\n-        UpdateTimeFirstKey(timestamp);\n+    auto spk_man = GetLegacyScriptPubKeyMan();\n+    if (!spk_man) {\n+        return false;\n     }\n-    return true;\n+    LOCK(spk_man->cs_KeyStore);\n+    return GetLegacyScriptPubKeyMan()->ImportPrivKeys(privkey_map, timestamp);\n }\n \n bool CWallet::ImportPubKeys(const std::vector<CKeyID>& ordered_pubkeys, const std::map<CKeyID, CPubKey>& pubkey_map, const std::map<CKeyID, std::pair<CPubKey, KeyOriginInfo>>& key_origins, const bool add_keypool, const bool internal, const int64_t timestamp)\n {\n-    WalletBatch batch(*database);\n-    for (const auto& entry : key_origins) {\n-        AddKeyOriginWithDB(batch, entry.second.first, entry.second.second);\n-    }\n-    for (const CKeyID& id : ordered_pubkeys) {\n-        auto entry = pubkey_map.find(id);\n-        if (entry == pubkey_map.end()) {\n-            continue;\n-        }\n-        const CPubKey& pubkey = entry->second;\n-        CPubKey temp;\n-        if (GetPubKey(id, temp)) {\n-            // Already have pubkey, skipping\n-            WalletLogPrintf(\"Already have pubkey %s, skipping\\n\", HexStr(temp));\n-            continue;\n-        }\n-        if (!AddWatchOnlyWithDB(batch, GetScriptForRawPubKey(pubkey), timestamp)) {\n-            return false;\n-        }\n-        mapKeyMetadata[id].nCreateTime = timestamp;\n-\n-        // Add to keypool only works with pubkeys\n-        if (add_keypool) {\n-            AddKeypoolPubkeyWithDB(pubkey, internal, batch);\n-            NotifyCanGetAddressesChanged();\n-        }\n+    auto spk_man = GetLegacyScriptPubKeyMan();\n+    if (!spk_man) {\n+        return false;\n     }\n-    return true;\n+    LOCK(spk_man->cs_KeyStore);\n+    return GetLegacyScriptPubKeyMan()->ImportPubKeys(ordered_pubkeys, pubkey_map, key_origins, add_keypool, internal, timestamp);",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 93,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "c78b003846eb5989f12b6d532c0a8d6ae2dd3029",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "just use spk_man here (if you cannot, please annotate why in comments)",
      "created_at": "2019-09-09T17:38:54Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322367622",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322367622"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1405,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322367743",
      "pull_request_review_id": 285656678,
      "id": 322367743,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjM2Nzc0Mw==",
      "diff_hunk": "@@ -1744,92 +1744,46 @@ bool CWallet::DummySignTx(CMutableTransaction &txNew, const std::vector<CTxOut>\n \n bool CWallet::ImportScripts(const std::set<CScript> scripts, int64_t timestamp)\n {\n-    WalletBatch batch(*database);\n-    for (const auto& entry : scripts) {\n-        CScriptID id(entry);\n-        if (HaveCScript(id)) {\n-            WalletLogPrintf(\"Already have script %s, skipping\\n\", HexStr(entry));\n-            continue;\n-        }\n-        if (!AddCScriptWithDB(batch, entry)) {\n-            return false;\n-        }\n-\n-        if (timestamp > 0) {\n-            m_script_metadata[CScriptID(entry)].nCreateTime = timestamp;\n-        }\n-    }\n-    if (timestamp > 0) {\n-        UpdateTimeFirstKey(timestamp);\n+    auto spk_man = GetLegacyScriptPubKeyMan();\n+    if (!spk_man) {\n+        return false;\n     }\n-\n-    return true;\n+    LOCK(spk_man->cs_KeyStore);\n+    return GetLegacyScriptPubKeyMan()->ImportScripts(scripts, timestamp);\n }\n \n bool CWallet::ImportPrivKeys(const std::map<CKeyID, CKey>& privkey_map, const int64_t timestamp)\n {\n-    WalletBatch batch(*database);\n-    for (const auto& entry : privkey_map) {\n-        const CKey& key = entry.second;\n-        CPubKey pubkey = key.GetPubKey();\n-        const CKeyID& id = entry.first;\n-        assert(key.VerifyPubKey(pubkey));\n-        // Skip if we already have the key\n-        if (HaveKey(id)) {\n-            WalletLogPrintf(\"Already have key with pubkey %s, skipping\\n\", HexStr(pubkey));\n-            continue;\n-        }\n-        mapKeyMetadata[id].nCreateTime = timestamp;\n-        // If the private key is not present in the wallet, insert it.\n-        if (!AddKeyPubKeyWithDB(batch, key, pubkey)) {\n-            return false;\n-        }\n-        UpdateTimeFirstKey(timestamp);\n+    auto spk_man = GetLegacyScriptPubKeyMan();\n+    if (!spk_man) {\n+        return false;\n     }\n-    return true;\n+    LOCK(spk_man->cs_KeyStore);\n+    return GetLegacyScriptPubKeyMan()->ImportPrivKeys(privkey_map, timestamp);\n }\n \n bool CWallet::ImportPubKeys(const std::vector<CKeyID>& ordered_pubkeys, const std::map<CKeyID, CPubKey>& pubkey_map, const std::map<CKeyID, std::pair<CPubKey, KeyOriginInfo>>& key_origins, const bool add_keypool, const bool internal, const int64_t timestamp)\n {\n-    WalletBatch batch(*database);\n-    for (const auto& entry : key_origins) {\n-        AddKeyOriginWithDB(batch, entry.second.first, entry.second.second);\n-    }\n-    for (const CKeyID& id : ordered_pubkeys) {\n-        auto entry = pubkey_map.find(id);\n-        if (entry == pubkey_map.end()) {\n-            continue;\n-        }\n-        const CPubKey& pubkey = entry->second;\n-        CPubKey temp;\n-        if (GetPubKey(id, temp)) {\n-            // Already have pubkey, skipping\n-            WalletLogPrintf(\"Already have pubkey %s, skipping\\n\", HexStr(temp));\n-            continue;\n-        }\n-        if (!AddWatchOnlyWithDB(batch, GetScriptForRawPubKey(pubkey), timestamp)) {\n-            return false;\n-        }\n-        mapKeyMetadata[id].nCreateTime = timestamp;\n-\n-        // Add to keypool only works with pubkeys\n-        if (add_keypool) {\n-            AddKeypoolPubkeyWithDB(pubkey, internal, batch);\n-            NotifyCanGetAddressesChanged();\n-        }\n+    auto spk_man = GetLegacyScriptPubKeyMan();\n+    if (!spk_man) {\n+        return false;\n     }\n-    return true;\n+    LOCK(spk_man->cs_KeyStore);\n+    return GetLegacyScriptPubKeyMan()->ImportPubKeys(ordered_pubkeys, pubkey_map, key_origins, add_keypool, internal, timestamp);\n }\n \n bool CWallet::ImportScriptPubKeys(const std::string& label, const std::set<CScript>& script_pub_keys, const bool have_solving_data, const bool apply_label, const int64_t timestamp)\n {\n+    auto spk_man = GetLegacyScriptPubKeyMan();\n+    if (!spk_man) {\n+        return false;\n+    }\n+    LOCK(spk_man->cs_KeyStore);\n+    if (!GetLegacyScriptPubKeyMan()->ImportScriptPubKeys(script_pub_keys, have_solving_data, timestamp)) {",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 103,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "c78b003846eb5989f12b6d532c0a8d6ae2dd3029",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "just use spk_man here (if you cannot, please annotate why in comments)",
      "created_at": "2019-09-09T17:39:11Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322367743",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322367743"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1415,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322370108",
      "pull_request_review_id": 285673931,
      "id": 322370108,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjM3MDEwOA==",
      "diff_hunk": "@@ -149,7 +191,36 @@ bool LegacyScriptPubKeyMan::CanGetAddresses(bool internal)\n \n bool LegacyScriptPubKeyMan::Upgrade(int prev_version, int new_version, std::string& error)\n {\n-    return false;\n+    LOCK(cs_KeyStore);\n+    error = \"\";\n+    bool hd_upgrade = false;\n+    bool split_upgrade = false;\n+    if (CanSupportFeature(FEATURE_HD) && !IsHDEnabled()) {\n+        WalletLogPrintf(\"Upgrading wallet to HD\\n\");\n+        SetMinVersion(FEATURE_HD);\n+\n+        // generate a new master key\n+        SetHDSeed(GenerateNewSeed());\n+        hd_upgrade = true;\n+    }\n+    // Upgrade to HD chain split if necessary\n+    if (CanSupportFeature(FEATURE_HD_SPLIT) && hdChain.nVersion < 2 /* VERSION_HD_CHAIN_SPLIT */) {",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 411,
      "original_position": 80,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "c83bb3c7ad9a5c01e6b0de750fe95b90e1cc1d9a",
      "in_reply_to_id": 322314647,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Referencing `VERSION_HD_CHAIN_SPLIT` directly requires including walletdb.h which is a circular dependency.\r\n\r\nThe logic is slightly different here because without it, it would end up marking the newly generated keys as pre-split on later runs on the same LegacyScriptPubKeyMan. This is an issue because for a LegacyScriptPubKeyMan, Upgrade() will be called 6 times (once for each address type and internalness). If you were to run `-upgradewallet` multiple times on master, you would see the same problem.",
      "created_at": "2019-09-09T17:44:47Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322370108",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322370108"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 411,
      "original_line": 411,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322370677",
      "pull_request_review_id": 285674735,
      "id": 322370677,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjM3MDY3Nw==",
      "diff_hunk": "@@ -0,0 +1,1462 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <key_io.h>\n+#include <outputtype.h>\n+#include <script/descriptor.h>\n+#include <util/bip32.h>\n+#include <util/strencodings.h>\n+#include <util/translation.h>\n+#include <wallet/scriptpubkeyman.h>\n+\n+bool LegacyScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n+{\n+    TopUpKeyPool();\n+\n+    // Generate a new key that is added to wallet\n+    CPubKey new_key;\n+    if (!GetKeyFromPool(new_key)) {\n+        error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+        return false;\n+    }\n+    LearnRelatedScripts(new_key, type);\n+    dest = GetDestinationForKey(new_key, type);\n+    return true;\n+}\n+\n+typedef std::vector<unsigned char> valtype;\n+\n+namespace {\n+\n+/**\n+ * This is an enum that tracks the execution context of a script, similar to\n+ * SigVersion in script/interpreter. It is separate however because we want to\n+ * distinguish between top-level scriptPubKey execution and P2SH redeemScript\n+ * execution (a distinction that has no impact on consensus rules).\n+ */\n+enum class IsMineSigVersion\n+{\n+    TOP = 0,        //!< scriptPubKey execution\n+    P2SH = 1,       //!< P2SH redeemScript\n+    WITNESS_V0 = 2, //!< P2WSH witness script execution\n+};\n+\n+/**\n+ * This is an internal representation of isminetype + invalidity.\n+ * Its order is significant, as we return the max of all explored\n+ * possibilities.\n+ */\n+enum class IsMineResult\n+{\n+    NO = 0,         //!< Not ours\n+    WATCH_ONLY = 1, //!< Included in watch-only balance\n+    SPENDABLE = 2,  //!< Included in all balances\n+    INVALID = 3,    //!< Not spendable by anyone (uncompressed pubkey in segwit, P2SH inside P2SH or witness, witness inside witness)\n+};\n+\n+bool PermitsUncompressed(IsMineSigVersion sigversion)\n+{\n+    return sigversion == IsMineSigVersion::TOP || sigversion == IsMineSigVersion::P2SH;\n+}\n+\n+bool HaveKeys(const std::vector<valtype>& pubkeys, const LegacyScriptPubKeyMan& keystore)\n+{\n+    for (const valtype& pubkey : pubkeys) {\n+        CKeyID keyID = CPubKey(pubkey).GetID();\n+        if (!keystore.HaveKey(keyID)) return false;\n+    }\n+    return true;\n+}\n+\n+IsMineResult IsMineInner(const LegacyScriptPubKeyMan& keystore, const CScript& scriptPubKey, IsMineSigVersion sigversion)\n+{\n+    IsMineResult ret = IsMineResult::NO;\n+\n+    std::vector<valtype> vSolutions;\n+    txnouttype whichType = Solver(scriptPubKey, vSolutions);\n+\n+    CKeyID keyID;\n+    switch (whichType)\n+    {\n+    case TX_NONSTANDARD:\n+    case TX_NULL_DATA:\n+    case TX_WITNESS_UNKNOWN:\n+        break;\n+    case TX_PUBKEY:\n+        keyID = CPubKey(vSolutions[0]).GetID();\n+        if (!PermitsUncompressed(sigversion) && vSolutions[0].size() != 33) {\n+            return IsMineResult::INVALID;\n+        }\n+        if (keystore.HaveKey(keyID)) {\n+            ret = std::max(ret, IsMineResult::SPENDABLE);\n+        }\n+        break;\n+    case TX_WITNESS_V0_KEYHASH:\n+    {\n+        if (sigversion == IsMineSigVersion::WITNESS_V0) {\n+            // P2WPKH inside P2WSH is invalid.\n+            return IsMineResult::INVALID;\n+        }\n+        if (sigversion == IsMineSigVersion::TOP && !keystore.HaveCScript(CScriptID(CScript() << OP_0 << vSolutions[0]))) {\n+            // We do not support bare witness outputs unless the P2SH version of it would be\n+            // acceptable as well. This protects against matching before segwit activates.\n+            // This also applies to the P2WSH case.\n+            break;\n+        }\n+        ret = std::max(ret, IsMineInner(keystore, GetScriptForDestination(PKHash(uint160(vSolutions[0]))), IsMineSigVersion::WITNESS_V0));\n+        break;\n+    }\n+    case TX_PUBKEYHASH:\n+    {\n+        keyID = CKeyID(uint160(vSolutions[0]));\n+        CPubKey pubkey;\n+        if (keystore.GetPubKey(keyID, pubkey)) {\n+            if (!PermitsUncompressed(sigversion) && !pubkey.IsCompressed()) {\n+                return IsMineResult::INVALID;\n+            } else {\n+                ret = std::max(ret, IsMineResult::WATCH_ONLY);\n+            }\n+        }\n+        if (keystore.HaveKey(keyID)) {\n+            ret = std::max(ret, IsMineResult::SPENDABLE);\n+        }\n+        break;\n+    }\n+    case TX_SCRIPTHASH:\n+    {\n+        if (sigversion != IsMineSigVersion::TOP) {\n+            // P2SH inside P2WSH or P2SH is invalid.\n+            return IsMineResult::INVALID;\n+        }\n+        CScriptID scriptID = CScriptID(uint160(vSolutions[0]));\n+        CScript subscript;\n+        if (keystore.GetCScript(scriptID, subscript)) {\n+            ret = std::max(ret, IsMineInner(keystore, subscript, IsMineSigVersion::P2SH));\n+        }\n+        break;\n+    }\n+    case TX_WITNESS_V0_SCRIPTHASH:\n+    {\n+        if (sigversion == IsMineSigVersion::WITNESS_V0) {\n+            // P2WSH inside P2WSH is invalid.\n+            return IsMineResult::INVALID;\n+        }\n+        if (sigversion == IsMineSigVersion::TOP && !keystore.HaveCScript(CScriptID(CScript() << OP_0 << vSolutions[0]))) {\n+            break;\n+        }\n+        uint160 hash;\n+        CRIPEMD160().Write(&vSolutions[0][0], vSolutions[0].size()).Finalize(hash.begin());\n+        CScriptID scriptID = CScriptID(hash);\n+        CScript subscript;\n+        if (keystore.GetCScript(scriptID, subscript)) {\n+            ret = std::max(ret, IsMineInner(keystore, subscript, IsMineSigVersion::WITNESS_V0));\n+        }\n+        break;\n+    }\n+\n+    case TX_MULTISIG:\n+    {\n+        // Never treat bare multisig outputs as ours (they can still be made watchonly-though)\n+        if (sigversion == IsMineSigVersion::TOP) {\n+            break;\n+        }\n+\n+        // Only consider transactions \"mine\" if we own ALL the\n+        // keys involved. Multi-signature transactions that are\n+        // partially owned (somebody else has a key that can spend\n+        // them) enable spend-out-from-under-you attacks, especially\n+        // in shared-wallet situations.\n+        std::vector<valtype> keys(vSolutions.begin()+1, vSolutions.begin()+vSolutions.size()-1);\n+        if (!PermitsUncompressed(sigversion)) {\n+            for (size_t i = 0; i < keys.size(); i++) {\n+                if (keys[i].size() != 33) {\n+                    return IsMineResult::INVALID;\n+                }\n+            }\n+        }\n+        if (HaveKeys(keys, keystore)) {\n+            ret = std::max(ret, IsMineResult::SPENDABLE);\n+        }\n+        break;\n+    }\n+    }\n+\n+    if (ret == IsMineResult::NO && keystore.HaveWatchOnly(scriptPubKey)) {\n+        ret = std::max(ret, IsMineResult::WATCH_ONLY);\n+    }\n+    return ret;\n+}\n+\n+} // namespace\n+\n+isminetype LegacyScriptPubKeyMan::IsMine(const CScript& script) const\n+{\n+    switch (IsMineInner(*this, script, IsMineSigVersion::TOP)) {\n+    case IsMineResult::INVALID:\n+    case IsMineResult::NO:\n+        return ISMINE_NO;\n+    case IsMineResult::WATCH_ONLY:\n+        return ISMINE_WATCH_ONLY;\n+    case IsMineResult::SPENDABLE:\n+        return ISMINE_SPENDABLE;\n+    }\n+    assert(false);\n+}\n+\n+bool LegacyScriptPubKeyMan::IsCrypted() const\n+{\n+    return fUseCrypto;\n+}\n+\n+bool LegacyScriptPubKeyMan::SetCrypted()\n+{\n+    LOCK(cs_KeyStore);\n+    if (fUseCrypto)\n+        return true;\n+    if (!mapKeys.empty())\n+        return false;\n+    fUseCrypto = true;\n+    return true;\n+}\n+\n+bool LegacyScriptPubKeyMan::IsLocked() const\n+{\n+    if (!IsCrypted()) {\n+        return false;\n+    }\n+    LOCK(cs_KeyStore);\n+    return vMasterKey.empty();\n+}\n+\n+bool LegacyScriptPubKeyMan::Lock()\n+{\n+    if (!SetCrypted())\n+        return false;\n+\n+    {\n+        LOCK(cs_KeyStore);\n+        vMasterKey.clear();\n+    }\n+\n+    return true;\n+}\n+\n+bool LegacyScriptPubKeyMan::GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool)\n+{\n+    if (!CanGetAddresses(internal)) {\n+        return false;\n+    }\n+\n+    {\n+        LOCK(cs_KeyStore);\n+        if (!ReserveKeyFromKeyPool(index, keypool, internal) && !IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+            return false;\n+        }\n+        address = GetDestinationForKey(keypool.vchPubKey, type);\n+    }\n+    return true;\n+}\n+\n+void LegacyScriptPubKeyMan::KeepDestination(int64_t index)\n+{\n+    KeepKey(index);\n+}\n+\n+void LegacyScriptPubKeyMan::ReturnDestination(int64_t index, bool internal, const CTxDestination& addr)\n+{\n+    ReturnKey(index, internal, m_reserved_key_to_index[index]);\n+    m_reserved_key_to_index.erase(index);\n+}\n+\n+bool LegacyScriptPubKeyMan::TopUp(unsigned int size)\n+{\n+    return TopUpKeyPool(size);\n+}\n+\n+void LegacyScriptPubKeyMan::MarkUnusedAddresses(const CScript& script)\n+{\n+    LOCK(cs_KeyStore);\n+    // extract addresses and check if they match with an unused keypool key\n+    for (const auto& keyid : GetAffectedKeys(script, *this)) {\n+        std::map<CKeyID, int64_t>::const_iterator mi = m_pool_key_to_index.find(keyid);\n+        if (mi != m_pool_key_to_index.end()) {\n+            WalletLogPrintf(\"%s: Detected a used keypool key, mark all keypool key up to this key as used\\n\", __func__);\n+            MarkReserveKeysAsUsed(mi->second);\n+\n+            if (!TopUpKeyPool()) {\n+                WalletLogPrintf(\"%s: Topping up keypool failed (locked wallet)\\n\", __func__);\n+            }\n+        }\n+    }\n+}\n+\n+void LegacyScriptPubKeyMan::UpgradeKeyMetadata()\n+{\n+    LOCK(cs_KeyStore);\n+    if (IsLocked() || IsWalletFlagSet(WALLET_FLAG_KEY_ORIGIN_METADATA)) {\n+        return;\n+    }\n+\n+    std::unique_ptr<WalletBatch> batch = MakeUnique<WalletBatch>(*m_database);\n+    for (auto& meta_pair : mapKeyMetadata) {\n+        CKeyMetadata& meta = meta_pair.second;\n+        if (!meta.hd_seed_id.IsNull() && !meta.has_key_origin && meta.hdKeypath != \"s\") { // If the hdKeypath is \"s\", that's the seed and it doesn't have a key origin\n+            CKey key;\n+            GetKey(meta.hd_seed_id, key);\n+            CExtKey masterKey;\n+            masterKey.SetSeed(key.begin(), key.size());\n+            // Add to map\n+            CKeyID master_id = masterKey.key.GetPubKey().GetID();\n+            std::copy(master_id.begin(), master_id.begin() + 4, meta.key_origin.fingerprint);\n+            if (!ParseHDKeypath(meta.hdKeypath, meta.key_origin.path)) {\n+                throw std::runtime_error(\"Invalid stored hdKeypath\");\n+            }\n+            meta.has_key_origin = true;\n+            if (meta.nVersion < CKeyMetadata::VERSION_WITH_KEY_ORIGIN) {\n+                meta.nVersion = CKeyMetadata::VERSION_WITH_KEY_ORIGIN;\n+            }\n+\n+            // Write meta to wallet\n+            CPubKey pubkey;\n+            if (GetPubKey(meta_pair.first, pubkey)) {\n+                batch->WriteKeyMetadata(meta, pubkey, true);\n+            }\n+        }\n+    }\n+    batch.reset(); //write before setting the flag\n+}\n+\n+bool LegacyScriptPubKeyMan::SetupGeneration(bool force)\n+{\n+    if ((CanGenerateKeys() && !force) || IsLocked()) {\n+        return false;\n+    }\n+\n+    SetHDSeed(GenerateNewSeed());\n+    if (!NewKeyPool()) {\n+        return false;\n+    }\n+    return true;\n+}\n+\n+bool LegacyScriptPubKeyMan::IsHDEnabled() const\n+{\n+    return !hdChain.seed_id.IsNull();\n+}\n+\n+bool LegacyScriptPubKeyMan::CanGetAddresses(bool internal)\n+{\n+    LOCK(cs_KeyStore);\n+    // Check if the keypool has keys\n+    bool keypool_has_keys;\n+    if (internal && CanSupportFeature(FEATURE_HD_SPLIT)) {\n+        keypool_has_keys = setInternalKeyPool.size() > 0;\n+    } else {\n+        keypool_has_keys = KeypoolCountExternalKeys() > 0;\n+    }\n+    // If the keypool doesn't have keys, check if we can generate them\n+    if (!keypool_has_keys) {\n+        return CanGenerateKeys();\n+    }\n+    return keypool_has_keys;\n+}\n+\n+bool LegacyScriptPubKeyMan::Upgrade(int prev_version, int new_version, std::string& error)\n+{\n+    LOCK(cs_KeyStore);\n+    error = \"\";\n+    bool hd_upgrade = false;\n+    bool split_upgrade = false;\n+    if (CanSupportFeature(FEATURE_HD) && !IsHDEnabled()) {\n+        WalletLogPrintf(\"Upgrading wallet to HD\\n\");\n+        SetMinVersion(FEATURE_HD);\n+\n+        // generate a new master key\n+        SetHDSeed(GenerateNewSeed());\n+        hd_upgrade = true;\n+    }\n+    // Upgrade to HD chain split if necessary\n+    if (CanSupportFeature(FEATURE_HD_SPLIT) && hdChain.nVersion < 2 /* VERSION_HD_CHAIN_SPLIT */) {\n+        WalletLogPrintf(\"Upgrading wallet to use HD chain split\\n\");\n+        SetMinVersion(FEATURE_PRE_SPLIT_KEYPOOL);\n+        split_upgrade = FEATURE_HD_SPLIT > prev_version;\n+    }\n+    // Mark all keys currently in the keypool as pre-split\n+    if (split_upgrade) {\n+        MarkPreSplitKeys();\n+    }\n+    // Regenerate the keypool if upgraded to HD\n+    if (hd_upgrade) {\n+        if (!TopUpKeyPool()) {\n+            error = _(\"Unable to generate keys\").translated;\n+            return false;\n+        }\n+    }\n+    return true;\n+}\n+\n+bool LegacyScriptPubKeyMan::HavePrivateKeys() const\n+{\n+    LOCK(cs_KeyStore);\n+    return !mapKeys.empty() || !mapCryptedKeys.empty();\n+}\n+\n+void LegacyScriptPubKeyMan::RewriteDB()",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 436,
      "original_position": 405,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "365879e9bdba93a84bd2ef4a39816a5eb8fd31b0",
      "in_reply_to_id": 322316694,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It's supposed to be post-processing that is done by ScriptPubKeyMan when the db had to be rewritten, hence the name. Other ScriptPubKeyMans may do something different.",
      "created_at": "2019-09-09T17:46:10Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322370677",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322370677"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 436,
      "original_line": 436,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322372539",
      "pull_request_review_id": 285677165,
      "id": 322372539,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjM3MjUzOQ==",
      "diff_hunk": "@@ -429,6 +427,36 @@ bool LegacyScriptPubKeyMan::AddKeyPubKeyInner(const CKey& key, const CPubKey &pu\n     return true;\n }\n \n+bool LegacyScriptPubKeyMan::Encrypt(CKeyingMaterial& vMasterKeyIn, WalletBatch* batch)\n+{\n+    LOCK(cs_KeyStore);\n+    encrypted_batch = batch;",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 32,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "b5cb8f59ca2a501aa1f50f78b65fb029eff07d80",
      "in_reply_to_id": 322319993,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "encrypted_batch used to be set from within `EncryptWallet` before `EncryptKeys` was called. Since `EncryptKeys` is now `ScriptPubKeyMan::Encrypt`, it doesn't have access to CWallet's encrypted_batch, so we need to pass it in and set it when the `ScriptPubKeyMan` is encrypting.",
      "created_at": "2019-09-09T17:50:26Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322372539",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322372539"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 638,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322373793",
      "pull_request_review_id": 285678804,
      "id": 322373793,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjM3Mzc5Mw==",
      "diff_hunk": "@@ -0,0 +1,479 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+#define BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <wallet/crypter.h>\n+#include <wallet/ismine.h>\n+#include <wallet/walletdb.h>\n+#include <wallet/walletutil.h>\n+\n+#include <functional>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+enum class OutputType;\n+\n+//! Default for -keypool\n+static const unsigned int DEFAULT_KEYPOOL_SIZE = 1000;\n+\n+std::vector<CKeyID> GetAffectedKeys(const CScript& spk, const SigningProvider& provider);\n+\n+/** A key from a CWallet's keypool\n+ *\n+ * The wallet holds one (for pre HD-split wallets) or several keypools. These\n+ * are sets of keys that have not yet been used to provide addresses or receive\n+ * change.\n+ *\n+ * The Bitcoin Core wallet was originally a collection of unrelated private\n+ * keys with their associated addresses. If a non-HD wallet generated a\n+ * key/address, gave that address out and then restored a backup from before\n+ * that key's generation, then any funds sent to that address would be\n+ * lost definitively.\n+ *\n+ * The keypool was implemented to avoid this scenario (commit: 10384941). The\n+ * wallet would generate a set of keys (100 by default). When a new public key\n+ * was required, either to give out as an address or to use in a change output,\n+ * it would be drawn from the keypool. The keypool would then be topped up to\n+ * maintain 100 keys. This ensured that as long as the wallet hadn't used more\n+ * than 100 keys since the previous backup, all funds would be safe, since a\n+ * restored wallet would be able to scan for all owned addresses.\n+ *\n+ * A keypool also allowed encrypted wallets to give out addresses without\n+ * having to be decrypted to generate a new private key.\n+ *\n+ * With the introduction of HD wallets (commit: f1902510), the keypool\n+ * essentially became an address look-ahead pool. Restoring old backups can no\n+ * longer definitively lose funds as long as the addresses used were from the\n+ * wallet's HD seed (since all private keys can be rederived from the seed).\n+ * However, if many addresses were used since the backup, then the wallet may\n+ * not know how far ahead in the HD chain to look for its addresses. The\n+ * keypool is used to implement a 'gap limit'. The keypool maintains a set of\n+ * keys (by default 1000) ahead of the last used key and scans for the\n+ * addresses of those keys.  This avoids the risk of not seeing transactions\n+ * involving the wallet's addresses, or of re-using the same address.\n+ *\n+ * The HD-split wallet feature added a second keypool (commit: 02592f4c). There\n+ * is an external keypool (for addresses to hand out) and an internal keypool\n+ * (for change addresses).\n+ *\n+ * Keypool keys are stored in the wallet/keystore's keymap. The keypool data is\n+ * stored as sets of indexes in the wallet (setInternalKeyPool,\n+ * setExternalKeyPool and set_pre_split_keypool), and a map from the key to the\n+ * index (m_pool_key_to_index). The CKeyPool object is used to\n+ * serialize/deserialize the pool data to/from the database.\n+ */\n+class CKeyPool\n+{\n+public:\n+    //! The time at which the key was generated. Set in AddKeypoolPubKeyWithDB\n+    int64_t nTime;\n+    //! The public key\n+    CPubKey vchPubKey;\n+    //! Whether this keypool entry is in the internal keypool (for change outputs)\n+    bool fInternal;\n+    //! Whether this key was generated for a keypool before the wallet was upgraded to HD-split\n+    bool m_pre_split;\n+\n+    CKeyPool();\n+    CKeyPool(const CPubKey& vchPubKeyIn, bool internalIn);\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        int nVersion = s.GetVersion();\n+        if (!(s.GetType() & SER_GETHASH))\n+            READWRITE(nVersion);\n+        READWRITE(nTime);\n+        READWRITE(vchPubKey);\n+        if (ser_action.ForRead()) {\n+            try {\n+                READWRITE(fInternal);\n+            }\n+            catch (std::ios_base::failure&) {\n+                /* flag as external address if we can't read the internal boolean\n+                   (this will be the case for any wallet before the HD chain split version) */\n+                fInternal = false;\n+            }\n+            try {\n+                READWRITE(m_pre_split);\n+            }\n+            catch (std::ios_base::failure&) {\n+                /* flag as postsplit address if we can't read the m_pre_split boolean\n+                   (this will be the case for any wallet that upgrades to HD chain split)*/\n+                m_pre_split = false;\n+            }\n+        }\n+        else {\n+            READWRITE(fInternal);\n+            READWRITE(m_pre_split);\n+        }\n+    }\n+};\n+\n+typedef std::function<void(uint64_t)> FlagFunc;\n+typedef std::function<void(WalletBatch&, uint64_t)> FlagFuncWithDB;\n+typedef std::function<bool(uint64_t)> FlagSetFunc;\n+typedef std::function<bool(enum WalletFeature)> VersionFunc;\n+typedef std::function<std::string()> NameFunc;\n+typedef std::function<void(enum WalletFeature)> SetVersionFunc;\n+\n+/*\n+ * A class implementing ScriptPubKeyMan manages some (or all) scriptPubKeys used in a wallet.\n+ * It contains the scripts and keys related to the scriptPubKeys it manages.\n+ * A ScriptPubKeyMan will be able to give out scriptPubKeys to be used, as well as marking\n+ * when a scriptPubKey has been used. It also handles when and how to store a scriptPubKey\n+ * and it's related scripts and keys, including encryption.\n+ */\n+\n+class ScriptPubKeyMan\n+{\n+protected:\n+    FlagSetFunc IsWalletFlagSet; // Function pointer to function that determines if a wallet flag is set\n+    FlagFunc SetWalletFlag; // Function pointer to function to set wallet flags\n+    FlagFuncWithDB UnsetWalletFlagWithDB; // Function pointer to function to unset wallet flags\n+    VersionFunc CanSupportFeature; // Function pointer to function that indicates whether the feature is supported\n+    NameFunc GetDisplayName; // Function pointer to GetDisplayName to get the name of a wallet for WalletLogPrintf\n+    SetVersionFunc SetMinVersion; // Function pointer to SetMinVersion in the wallet\n+\n+    /** Internal database handle. */\n+    std::shared_ptr<WalletDatabase> m_database;\n+\n+public:\n+    ScriptPubKeyMan(FlagSetFunc is_set_func, FlagFunc set_flag_func, FlagFuncWithDB unset_flag_func, VersionFunc feature_sup_func, NameFunc wallet_name_func, SetVersionFunc set_version_func, std::shared_ptr<WalletDatabase> database)\n+        :   IsWalletFlagSet(is_set_func),\n+            SetWalletFlag(set_flag_func),\n+            UnsetWalletFlagWithDB(unset_flag_func),\n+            CanSupportFeature(feature_sup_func),\n+            GetDisplayName(wallet_name_func),\n+            SetMinVersion(set_version_func),\n+            m_database(database)\n+        {}\n+\n+    virtual ~ScriptPubKeyMan() {};\n+    virtual bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) { return false; }\n+    virtual isminetype IsMine(const CScript& script) const { return ISMINE_NO; }\n+\n+    virtual bool IsCrypted() const { return false; }\n+    virtual bool IsLocked() const { return false; }\n+    virtual bool Lock() { return false; }\n+\n+    virtual bool Unlock(const CKeyingMaterial& vMasterKeyIn, bool accept_no_keys = false) { return false; }\n+    virtual bool Encrypt(CKeyingMaterial& vMasterKeyIn, WalletBatch* batch) { return false; }\n+\n+    virtual bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool) { return false; }\n+    virtual void KeepDestination(int64_t index) {}\n+    virtual void ReturnDestination(int64_t index, bool internal, const CTxDestination& addr) {}\n+\n+    virtual bool TopUp(unsigned int size = 0) { return false; }\n+\n+    //! Mark unused addresses as being used\n+    virtual void MarkUnusedAddresses(const CScript& script) {}\n+\n+    //! Upgrade stored CKeyMetadata objects to store key origin info as KeyOriginInfo\n+    virtual void UpgradeKeyMetadata() {}\n+\n+    /** Sets up the key generation stuff.\n+      * Returns false if already setup or setup fails, true if setup is successful\n+      * Set force=true to make it re-setup if already setup, used for upgrades\n+      */\n+    virtual bool SetupGeneration(bool force = false) { return false; }\n+\n+    /* Returns true if HD is enabled */\n+    virtual bool IsHDEnabled() const { return false; }\n+\n+    /* Returns true if the wallet can give out new addresses. This means it has keys in the keypool or can generate new keys */\n+    virtual bool CanGetAddresses(bool internal = false) { return false; }\n+\n+    /** Upgrades the wallet to the specified version */\n+    virtual bool Upgrade(int prev_version, int new_version, std::string& error) { return false; }\n+\n+    virtual bool HavePrivateKeys() const { return false; }\n+\n+    //! The action to do when the DB needs rewrite\n+    virtual void RewriteDB() {}\n+\n+    virtual int64_t GetOldestKeyPoolTime() { return GetTime(); }\n+\n+    virtual size_t KeypoolCountExternalKeys() { return 0; }\n+    virtual unsigned int GetKeypoolSize() const { return 0; }\n+\n+    virtual int64_t GetTimeFirstKey() const { return 0; }\n+\n+    virtual const CKeyMetadata* GetMetadata(uint160 id) const { return nullptr; }",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": 211,
      "original_position": 208,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "365879e9bdba93a84bd2ef4a39816a5eb8fd31b0",
      "in_reply_to_id": 322325223,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It just returns a `CKeyMetadata` as the function name suggests.\r\n\r\nIt is needed so that getting metadata no longer requires direct access to `mapKeyMetadata` which no longer exists in CWallet and is not guaranteed to exist in other ScriptPubKeyMans (e.g. it is generated on the fly in native descriptor wallets).",
      "created_at": "2019-09-09T17:53:17Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322373793",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322373793"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 211,
      "original_line": 211,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322374333",
      "pull_request_review_id": 285679409,
      "id": 322374333,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjM3NDMzMw==",
      "diff_hunk": "@@ -74,6 +72,8 @@ class FillableSigningProvider : public SigningProvider\n     void ImplicitlyLearnRelatedKeyScripts(const CPubKey& pubkey) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n \n public:\n+    mutable CCriticalSection cs_KeyStore;",
      "path": "src/script/signingprovider.h",
      "position": 13,
      "original_position": 13,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "6806ad09a18e4800e3eb1cdcd483b7fe8907d684",
      "in_reply_to_id": 322326671,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes. `cs_KeyStore` sometimes needs to be locked by the caller.",
      "created_at": "2019-09-09T17:54:23Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322374333",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322374333"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 75,
      "original_line": 75,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322377020",
      "pull_request_review_id": 285682850,
      "id": 322377020,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjM3NzAyMA==",
      "diff_hunk": "@@ -3,11 +3,22 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <key_io.h>\n+#include <outputtype.h>\n #include <wallet/scriptpubkeyman.h>\n \n bool LegacyScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n {\n-    return false;\n+    TopUpKeyPool();",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 17,
      "original_position": 10,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "a007c8ac72118d871d38115a88dd64cb76a3c465",
      "in_reply_to_id": 322299705,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2019-09-09T18:00:18Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322377020",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322377020"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 17,
      "original_line": 17,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322377086",
      "pull_request_review_id": 285682955,
      "id": 322377086,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjM3NzA4Ng==",
      "diff_hunk": "@@ -284,6 +284,25 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     std::map<CKeyID, int64_t> m_pool_key_to_index;\n     std::map<int64_t, CKeyID> m_reserved_key_to_index;",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": 295,
      "original_position": 2,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "a007c8ac72118d871d38115a88dd64cb76a3c465",
      "in_reply_to_id": 322301283,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2019-09-09T18:00:29Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322377086",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322377086"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 295,
      "original_line": 295,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322377163",
      "pull_request_review_id": 285683057,
      "id": 322377163,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjM3NzE2Mw==",
      "diff_hunk": "@@ -118,11 +120,51 @@ void LegacyScriptPubKeyMan::MarkUnusedAddresses(const CScript& script)\n \n void LegacyScriptPubKeyMan::UpgradeKeyMetadata()\n {\n+    LOCK(cs_KeyStore);\n+    if (IsLocked() || IsWalletFlagSet(WALLET_FLAG_KEY_ORIGIN_METADATA)) {\n+        return;\n+    }\n+\n+    std::unique_ptr<WalletBatch> batch = MakeUnique<WalletBatch>(*m_database);\n+    for (auto& meta_pair : mapKeyMetadata) {\n+        CKeyMetadata& meta = meta_pair.second;\n+        if (!meta.hd_seed_id.IsNull() && !meta.has_key_origin && meta.hdKeypath != \"s\") { // If the hdKeypath is \"s\", that's the seed and it doesn't have a key origin\n+            CKey key;\n+            GetKey(meta.hd_seed_id, key);\n+            CExtKey masterKey;\n+            masterKey.SetSeed(key.begin(), key.size());\n+            // Add to map\n+            CKeyID master_id = masterKey.key.GetPubKey().GetID();\n+            std::copy(master_id.begin(), master_id.begin() + 4, meta.key_origin.fingerprint);\n+            if (!ParseHDKeypath(meta.hdKeypath, meta.key_origin.path)) {\n+                throw std::runtime_error(\"Invalid stored hdKeypath\");\n+            }\n+            meta.has_key_origin = true;\n+            if (meta.nVersion < CKeyMetadata::VERSION_WITH_KEY_ORIGIN) {\n+                meta.nVersion = CKeyMetadata::VERSION_WITH_KEY_ORIGIN;\n+            }\n+\n+            // Write meta to wallet\n+            CPubKey pubkey;\n+            if (GetPubKey(meta_pair.first, pubkey)) {\n+                batch->WriteKeyMetadata(meta, pubkey, true);\n+            }\n+        }\n+    }\n+    batch.reset(); //write before setting the flag",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 44,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "c83bb3c7ad9a5c01e6b0de750fe95b90e1cc1d9a",
      "in_reply_to_id": 322310615,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Removed the comment.",
      "created_at": "2019-09-09T18:00:38Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322377163",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322377163"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 154,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322377247",
      "pull_request_review_id": 285683187,
      "id": 322377247,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjM3NzI0Nw==",
      "diff_hunk": "@@ -0,0 +1,479 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+#define BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <wallet/crypter.h>\n+#include <wallet/ismine.h>\n+#include <wallet/walletdb.h>\n+#include <wallet/walletutil.h>\n+\n+#include <functional>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+enum class OutputType;\n+\n+//! Default for -keypool\n+static const unsigned int DEFAULT_KEYPOOL_SIZE = 1000;\n+\n+std::vector<CKeyID> GetAffectedKeys(const CScript& spk, const SigningProvider& provider);\n+\n+/** A key from a CWallet's keypool\n+ *\n+ * The wallet holds one (for pre HD-split wallets) or several keypools. These\n+ * are sets of keys that have not yet been used to provide addresses or receive\n+ * change.\n+ *\n+ * The Bitcoin Core wallet was originally a collection of unrelated private\n+ * keys with their associated addresses. If a non-HD wallet generated a\n+ * key/address, gave that address out and then restored a backup from before\n+ * that key's generation, then any funds sent to that address would be\n+ * lost definitively.\n+ *\n+ * The keypool was implemented to avoid this scenario (commit: 10384941). The\n+ * wallet would generate a set of keys (100 by default). When a new public key\n+ * was required, either to give out as an address or to use in a change output,\n+ * it would be drawn from the keypool. The keypool would then be topped up to\n+ * maintain 100 keys. This ensured that as long as the wallet hadn't used more\n+ * than 100 keys since the previous backup, all funds would be safe, since a\n+ * restored wallet would be able to scan for all owned addresses.\n+ *\n+ * A keypool also allowed encrypted wallets to give out addresses without\n+ * having to be decrypted to generate a new private key.\n+ *\n+ * With the introduction of HD wallets (commit: f1902510), the keypool\n+ * essentially became an address look-ahead pool. Restoring old backups can no\n+ * longer definitively lose funds as long as the addresses used were from the\n+ * wallet's HD seed (since all private keys can be rederived from the seed).\n+ * However, if many addresses were used since the backup, then the wallet may\n+ * not know how far ahead in the HD chain to look for its addresses. The\n+ * keypool is used to implement a 'gap limit'. The keypool maintains a set of\n+ * keys (by default 1000) ahead of the last used key and scans for the\n+ * addresses of those keys.  This avoids the risk of not seeing transactions\n+ * involving the wallet's addresses, or of re-using the same address.\n+ *\n+ * The HD-split wallet feature added a second keypool (commit: 02592f4c). There\n+ * is an external keypool (for addresses to hand out) and an internal keypool\n+ * (for change addresses).\n+ *\n+ * Keypool keys are stored in the wallet/keystore's keymap. The keypool data is\n+ * stored as sets of indexes in the wallet (setInternalKeyPool,\n+ * setExternalKeyPool and set_pre_split_keypool), and a map from the key to the\n+ * index (m_pool_key_to_index). The CKeyPool object is used to\n+ * serialize/deserialize the pool data to/from the database.\n+ */\n+class CKeyPool\n+{\n+public:\n+    //! The time at which the key was generated. Set in AddKeypoolPubKeyWithDB\n+    int64_t nTime;\n+    //! The public key\n+    CPubKey vchPubKey;\n+    //! Whether this keypool entry is in the internal keypool (for change outputs)\n+    bool fInternal;\n+    //! Whether this key was generated for a keypool before the wallet was upgraded to HD-split\n+    bool m_pre_split;\n+\n+    CKeyPool();\n+    CKeyPool(const CPubKey& vchPubKeyIn, bool internalIn);\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        int nVersion = s.GetVersion();\n+        if (!(s.GetType() & SER_GETHASH))\n+            READWRITE(nVersion);\n+        READWRITE(nTime);\n+        READWRITE(vchPubKey);\n+        if (ser_action.ForRead()) {\n+            try {\n+                READWRITE(fInternal);\n+            }\n+            catch (std::ios_base::failure&) {\n+                /* flag as external address if we can't read the internal boolean\n+                   (this will be the case for any wallet before the HD chain split version) */\n+                fInternal = false;\n+            }\n+            try {\n+                READWRITE(m_pre_split);\n+            }\n+            catch (std::ios_base::failure&) {\n+                /* flag as postsplit address if we can't read the m_pre_split boolean\n+                   (this will be the case for any wallet that upgrades to HD chain split)*/\n+                m_pre_split = false;\n+            }\n+        }\n+        else {\n+            READWRITE(fInternal);\n+            READWRITE(m_pre_split);\n+        }\n+    }\n+};\n+\n+typedef std::function<void(uint64_t)> FlagFunc;\n+typedef std::function<void(WalletBatch&, uint64_t)> FlagFuncWithDB;\n+typedef std::function<bool(uint64_t)> FlagSetFunc;\n+typedef std::function<bool(enum WalletFeature)> VersionFunc;\n+typedef std::function<std::string()> NameFunc;\n+typedef std::function<void(enum WalletFeature)> SetVersionFunc;\n+\n+/*\n+ * A class implementing ScriptPubKeyMan manages some (or all) scriptPubKeys used in a wallet.\n+ * It contains the scripts and keys related to the scriptPubKeys it manages.\n+ * A ScriptPubKeyMan will be able to give out scriptPubKeys to be used, as well as marking\n+ * when a scriptPubKey has been used. It also handles when and how to store a scriptPubKey\n+ * and it's related scripts and keys, including encryption.\n+ */\n+\n+class ScriptPubKeyMan\n+{\n+protected:\n+    FlagSetFunc IsWalletFlagSet; // Function pointer to function that determines if a wallet flag is set\n+    FlagFunc SetWalletFlag; // Function pointer to function to set wallet flags\n+    FlagFuncWithDB UnsetWalletFlagWithDB; // Function pointer to function to unset wallet flags\n+    VersionFunc CanSupportFeature; // Function pointer to function that indicates whether the feature is supported\n+    NameFunc GetDisplayName; // Function pointer to GetDisplayName to get the name of a wallet for WalletLogPrintf\n+    SetVersionFunc SetMinVersion; // Function pointer to SetMinVersion in the wallet\n+\n+    /** Internal database handle. */\n+    std::shared_ptr<WalletDatabase> m_database;\n+\n+public:\n+    ScriptPubKeyMan(FlagSetFunc is_set_func, FlagFunc set_flag_func, FlagFuncWithDB unset_flag_func, VersionFunc feature_sup_func, NameFunc wallet_name_func, SetVersionFunc set_version_func, std::shared_ptr<WalletDatabase> database)\n+        :   IsWalletFlagSet(is_set_func),\n+            SetWalletFlag(set_flag_func),\n+            UnsetWalletFlagWithDB(unset_flag_func),\n+            CanSupportFeature(feature_sup_func),\n+            GetDisplayName(wallet_name_func),\n+            SetMinVersion(set_version_func),\n+            m_database(database)\n+        {}\n+\n+    virtual ~ScriptPubKeyMan() {};\n+    virtual bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) { return false; }\n+    virtual isminetype IsMine(const CScript& script) const { return ISMINE_NO; }\n+\n+    virtual bool IsCrypted() const { return false; }\n+    virtual bool IsLocked() const { return false; }\n+    virtual bool Lock() { return false; }\n+\n+    virtual bool Unlock(const CKeyingMaterial& vMasterKeyIn, bool accept_no_keys = false) { return false; }\n+    virtual bool Encrypt(CKeyingMaterial& vMasterKeyIn, WalletBatch* batch) { return false; }\n+\n+    virtual bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool) { return false; }\n+    virtual void KeepDestination(int64_t index) {}\n+    virtual void ReturnDestination(int64_t index, bool internal, const CTxDestination& addr) {}\n+\n+    virtual bool TopUp(unsigned int size = 0) { return false; }\n+\n+    //! Mark unused addresses as being used\n+    virtual void MarkUnusedAddresses(const CScript& script) {}\n+\n+    //! Upgrade stored CKeyMetadata objects to store key origin info as KeyOriginInfo\n+    virtual void UpgradeKeyMetadata() {}\n+\n+    /** Sets up the key generation stuff.",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": null,
      "original_position": 181,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "365879e9bdba93a84bd2ef4a39816a5eb8fd31b0",
      "in_reply_to_id": 322312299,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I updated the comment.",
      "created_at": "2019-09-09T18:00:51Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322377247",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322377247"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 181,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322377747",
      "pull_request_review_id": 285683848,
      "id": 322377747,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjM3Nzc0Nw==",
      "diff_hunk": "@@ -310,6 +312,11 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n                 strErr = \"Error reading wallet database: LoadKey failed\";\n                 return false;\n             }\n+            if (!pwallet->GetLegacyScriptPubKeyMan()->LoadKey(key, vchPubKey))\n+            {\n+                strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadKey failed\";\n+                return false;\n+            }\n         } else if (strType == DBKeys::MASTER_KEY) {",
      "path": "src/wallet/walletdb.cpp",
      "position": 23,
      "original_position": 21,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "6806ad09a18e4800e3eb1cdcd483b7fe8907d684",
      "in_reply_to_id": 322336189,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2019-09-09T18:02:00Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322377747",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322377747"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 314,
      "original_line": 314,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322377790",
      "pull_request_review_id": 285683903,
      "id": 322377790,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjM3Nzc5MA==",
      "diff_hunk": "@@ -296,7 +296,22 @@ std::unique_ptr<SigningProvider> LegacyScriptPubKeyMan::GetSigningProvider(const\n \n bool LegacyScriptPubKeyMan::CanProvide(const CScript& script, SignatureData& sigdata)",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 502,
      "original_position": 2,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "6c7c36276e26539edc8b281129bb30f1cd4a4fb8",
      "in_reply_to_id": 322337263,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2019-09-09T18:02:06Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322377790",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322377790"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 502,
      "original_line": 502,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322378586",
      "pull_request_review_id": 285656678,
      "id": 322378586,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjM3ODU4Ng==",
      "diff_hunk": "@@ -3509,48 +3509,20 @@ void CWallet::LoadKeyPool(int64_t nIndex, const CKeyPool &keypool)\n \n bool CWallet::TopUpKeyPool(unsigned int kpSize)\n {\n-    if (!CanGenerateKeys()) {\n+    LOCK(cs_wallet);\n+    if (IsWalletFlagSet(WALLET_FLAG_BLANK_WALLET) || IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n         return false;\n     }\n-    {\n-        LOCK(cs_wallet);\n-\n-        if (IsLocked()) return false;\n-\n-        // Top up key pool\n-        unsigned int nTargetSize;\n-        if (kpSize > 0)\n-            nTargetSize = kpSize;\n-        else\n-            nTargetSize = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 0);\n-\n-        // count amount of available keys (internal, external)\n-        // make sure the keypool of external and internal keys fits the user selected target (-keypool)\n-        int64_t missingExternal = std::max(std::max((int64_t) nTargetSize, (int64_t) 1) - (int64_t)setExternalKeyPool.size(), (int64_t) 0);\n-        int64_t missingInternal = std::max(std::max((int64_t) nTargetSize, (int64_t) 1) - (int64_t)setInternalKeyPool.size(), (int64_t) 0);\n-\n-        if (!IsHDEnabled() || !CanSupportFeature(FEATURE_HD_SPLIT))\n-        {\n-            // don't create extra internal keys\n-            missingInternal = 0;\n-        }\n-        bool internal = false;\n-        WalletBatch batch(*database);\n-        for (int64_t i = missingInternal + missingExternal; i--;)\n-        {\n-            if (i < missingInternal) {\n-                internal = true;\n+    bool res = true;",
      "path": "src/wallet/wallet.cpp",
      "position": 1121,
      "original_position": 37,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "f4ff4c5f1a9d9da212ff3843f314557011baaa43",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "why not just iterate over `GetActiveScriptPubKeyMans` result, should be more complete and less brittle to updates?",
      "created_at": "2019-09-09T18:03:51Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322378586",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322378586"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3052,
      "original_line": 3052,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322380725",
      "pull_request_review_id": 285656678,
      "id": 322380725,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjM4MDcyNQ==",
      "diff_hunk": "@@ -4262,32 +4262,15 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n             return nullptr;\n         }\n \n-        bool hd_upgrade = false;\n-        bool split_upgrade = false;\n-        if (walletInstance->CanSupportFeature(FEATURE_HD) && !walletInstance->IsHDEnabled()) {\n-            walletInstance->WalletLogPrintf(\"Upgrading wallet to HD\\n\");\n-            walletInstance->SetMinVersion(FEATURE_HD);\n-\n-            // generate a new master key\n-            CPubKey masterPubKey = walletInstance->GenerateNewSeed();\n-            walletInstance->SetHDSeed(masterPubKey);\n-            hd_upgrade = true;\n-        }\n-        // Upgrade to HD chain split if necessary\n-        if (walletInstance->CanSupportFeature(FEATURE_HD_SPLIT)) {\n-            walletInstance->WalletLogPrintf(\"Upgrading wallet to use HD chain split\\n\");\n-            walletInstance->SetMinVersion(FEATURE_PRE_SPLIT_KEYPOOL);\n-            split_upgrade = FEATURE_HD_SPLIT > prev_version;\n-        }\n-        // Mark all keys currently in the keypool as pre-split\n-        if (split_upgrade) {\n-            walletInstance->MarkPreSplitKeys();\n-        }\n-        // Regenerate the keypool if upgraded to HD\n-        if (hd_upgrade) {\n-            if (!walletInstance->TopUpKeyPool()) {\n-                chain.initError(_(\"Unable to generate keys\").translated);\n-                return nullptr;\n+\n+        for (bool internal : {false, true}) {",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 31,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "3e6cd81d3da4b1d96d9162756f2909660e1efc54",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`GetActiveScriptPubKeyMans`?",
      "created_at": "2019-09-09T18:08:44Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322380725",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322380725"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4266,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322381977",
      "pull_request_review_id": 285656678,
      "id": 322381977,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjM4MTk3Nw==",
      "diff_hunk": "@@ -4449,8 +4449,17 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n \n         // No need to read and scan block if block was created before\n         // our wallet birthday (as adjusted for block time variability)\n-        if (walletInstance->nTimeFirstKey) {\n-            if (Optional<int> first_block = locked_chain->findFirstBlockWithTimeAndHeight(walletInstance->nTimeFirstKey - TIMESTAMP_WINDOW, rescan_height, nullptr)) {\n+        int64_t time_first_key = std::numeric_limits<int64_t>::max();\n+        for (bool internal : {false, true}) {",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "e3b5a71ae09c71c46381b6d2c254a51a085c6b4d",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "GetActiveScriptPubKeyMans?",
      "created_at": "2019-09-09T18:11:35Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322381977",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322381977"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4453,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322383899",
      "pull_request_review_id": 285656678,
      "id": 322383899,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjM4Mzg5OQ==",
      "diff_hunk": "@@ -214,9 +214,17 @@ WalletCreationStatus CreateWallet(interfaces::Chain& chain, const SecureString&\n             }\n \n             // Set a seed for the wallet\n-            CPubKey master_pub_key = wallet->GenerateNewSeed();\n-            wallet->SetHDSeed(master_pub_key);\n-            wallet->NewKeyPool();\n+            {\n+                LOCK(wallet->cs_wallet);\n+                for (bool internal : {false, true}) {",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 9,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "595fb6723821a40b4158d60ed3dbdf9c4ff88870",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "GetActiveScriptPubKeyMans?",
      "created_at": "2019-09-09T18:16:02Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322383899",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322383899"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 219,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322385026",
      "pull_request_review_id": 285656678,
      "id": 322385026,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjM4NTAyNg==",
      "diff_hunk": "@@ -78,22 +78,30 @@ CTxDestination AddAndGetDestinationForScript(FillableSigningProvider& keystore,\n {\n     // Add script to keystore\n     keystore.AddCScript(script);\n+    ScriptHash sh = ScriptHash(script);",
      "path": "src/outputtype.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "592177c771ee120472b11036ccf6e3aad0bba8af",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "comment for this whole commit: why is this here? I don't see direct connection with anything. Could this be moved earlier in PR or split out?",
      "created_at": "2019-09-09T18:18:40Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322385026",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322385026"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 81,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322495058",
      "pull_request_review_id": 285835591,
      "id": 322495058,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjQ5NTA1OA==",
      "diff_hunk": "@@ -3922,42 +3917,44 @@ std::set<CTxDestination> CWallet::GetLabelAddresses(const std::string& label) co\n \n bool ReserveDestination::GetReservedDestination(const OutputType type, CTxDestination& dest, bool internal)\n {\n-    if (!pwallet->CanGetAddresses(internal)) {\n+    spk_man = pwallet->GetScriptPubKeyMan(type, internal);\n+    if (!spk_man) {\n+        return false;\n+    }\n+\n+    if (!spk_man->IsLocked()) {\n+        spk_man->TopUp();\n+    }\n+\n+    if (!spk_man->CanGetAddresses(internal)) {\n         return false;\n     }\n \n     if (nIndex == -1)\n     {\n         CKeyPool keypool;\n-        if (!pwallet->ReserveKeyFromKeyPool(nIndex, keypool, internal)) {\n+        if (!spk_man->GetReservedDestination(type, internal, dest, nIndex, keypool)) {\n             return false;\n         }\n-        vchPubKey = keypool.vchPubKey;\n         fInternal = keypool.fInternal;\n     }\n-    assert(vchPubKey.IsValid());\n-    pwallet->LearnRelatedScripts(vchPubKey, type);",
      "path": "src/wallet/wallet.cpp",
      "position": 1230,
      "original_position": 67,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "6a9164679039976dbb291b581dfe4f632a107f46",
      "in_reply_to_id": 322361186,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It's handled internally by `spk_man` in the same way that `GetNewDestination` does.",
      "created_at": "2019-09-09T23:24:51Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322495058",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322495058"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3922,
      "original_line": 3922,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322497261",
      "pull_request_review_id": 285838317,
      "id": 322497261,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjQ5NzI2MQ==",
      "diff_hunk": "@@ -3709,28 +3709,23 @@ bool CWallet::GetNewDestination(const OutputType type, const std::string label,\n {\n     LOCK(cs_wallet);\n     error.clear();\n-\n-    TopUpKeyPool();\n-\n-    // Generate a new key that is added to wallet\n-    CPubKey new_key;\n-    if (!GetKeyFromPool(new_key)) {\n-        error = \"Error: Keypool ran out, please call keypoolrefill first\";\n-        return false;\n+    bool result = false;\n+    auto spk_man = GetScriptPubKeyMan(type, false);",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 13,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "6a9164679039976dbb291b581dfe4f632a107f46",
      "in_reply_to_id": 322356879,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2019-09-09T23:34:53Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322497261",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322497261"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3093,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322497279",
      "pull_request_review_id": 285838342,
      "id": 322497279,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjQ5NzI3OQ==",
      "diff_hunk": "@@ -3922,42 +3917,44 @@ std::set<CTxDestination> CWallet::GetLabelAddresses(const std::string& label) co\n \n bool ReserveDestination::GetReservedDestination(const OutputType type, CTxDestination& dest, bool internal)\n {\n-    if (!pwallet->CanGetAddresses(internal)) {\n+    spk_man = pwallet->GetScriptPubKeyMan(type, internal);\n+    if (!spk_man) {\n+        return false;\n+    }\n+\n+    if (!spk_man->IsLocked()) {",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 48,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "6a9164679039976dbb291b581dfe4f632a107f46",
      "in_reply_to_id": 322358340,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2019-09-09T23:34:57Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322497279",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322497279"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3283,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322497293",
      "pull_request_review_id": 285838351,
      "id": 322497293,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjQ5NzI5Mw==",
      "diff_hunk": "@@ -3922,42 +3917,44 @@ std::set<CTxDestination> CWallet::GetLabelAddresses(const std::string& label) co\n \n bool ReserveDestination::GetReservedDestination(const OutputType type, CTxDestination& dest, bool internal)\n {\n-    if (!pwallet->CanGetAddresses(internal)) {\n+    spk_man = pwallet->GetScriptPubKeyMan(type, internal);\n+    if (!spk_man) {\n+        return false;\n+    }\n+\n+    if (!spk_man->IsLocked()) {\n+        spk_man->TopUp();\n+    }\n+\n+    if (!spk_man->CanGetAddresses(internal)) {",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 52,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "6a9164679039976dbb291b581dfe4f632a107f46",
      "in_reply_to_id": 322358957,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2019-09-09T23:35:01Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322497293",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322497293"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3287,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322497315",
      "pull_request_review_id": 285838379,
      "id": 322497315,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjQ5NzMxNQ==",
      "diff_hunk": "@@ -1744,92 +1744,46 @@ bool CWallet::DummySignTx(CMutableTransaction &txNew, const std::vector<CTxOut>\n \n bool CWallet::ImportScripts(const std::set<CScript> scripts, int64_t timestamp)\n {\n-    WalletBatch batch(*database);\n-    for (const auto& entry : scripts) {\n-        CScriptID id(entry);\n-        if (HaveCScript(id)) {\n-            WalletLogPrintf(\"Already have script %s, skipping\\n\", HexStr(entry));\n-            continue;\n-        }\n-        if (!AddCScriptWithDB(batch, entry)) {\n-            return false;\n-        }\n-\n-        if (timestamp > 0) {\n-            m_script_metadata[CScriptID(entry)].nCreateTime = timestamp;\n-        }\n-    }\n-    if (timestamp > 0) {\n-        UpdateTimeFirstKey(timestamp);\n+    auto spk_man = GetLegacyScriptPubKeyMan();\n+    if (!spk_man) {\n+        return false;\n     }\n-\n-    return true;\n+    LOCK(spk_man->cs_KeyStore);\n+    return GetLegacyScriptPubKeyMan()->ImportScripts(scripts, timestamp);",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 28,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "c78b003846eb5989f12b6d532c0a8d6ae2dd3029",
      "in_reply_to_id": 322367040,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2019-09-09T23:35:06Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322497315",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322497315"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1385,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322497330",
      "pull_request_review_id": 285838399,
      "id": 322497330,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjQ5NzMzMA==",
      "diff_hunk": "@@ -1744,92 +1744,46 @@ bool CWallet::DummySignTx(CMutableTransaction &txNew, const std::vector<CTxOut>\n \n bool CWallet::ImportScripts(const std::set<CScript> scripts, int64_t timestamp)\n {\n-    WalletBatch batch(*database);\n-    for (const auto& entry : scripts) {\n-        CScriptID id(entry);\n-        if (HaveCScript(id)) {\n-            WalletLogPrintf(\"Already have script %s, skipping\\n\", HexStr(entry));\n-            continue;\n-        }\n-        if (!AddCScriptWithDB(batch, entry)) {\n-            return false;\n-        }\n-\n-        if (timestamp > 0) {\n-            m_script_metadata[CScriptID(entry)].nCreateTime = timestamp;\n-        }\n-    }\n-    if (timestamp > 0) {\n-        UpdateTimeFirstKey(timestamp);\n+    auto spk_man = GetLegacyScriptPubKeyMan();\n+    if (!spk_man) {\n+        return false;\n     }\n-\n-    return true;\n+    LOCK(spk_man->cs_KeyStore);\n+    return GetLegacyScriptPubKeyMan()->ImportScripts(scripts, timestamp);\n }\n \n bool CWallet::ImportPrivKeys(const std::map<CKeyID, CKey>& privkey_map, const int64_t timestamp)\n {\n-    WalletBatch batch(*database);\n-    for (const auto& entry : privkey_map) {\n-        const CKey& key = entry.second;\n-        CPubKey pubkey = key.GetPubKey();\n-        const CKeyID& id = entry.first;\n-        assert(key.VerifyPubKey(pubkey));\n-        // Skip if we already have the key\n-        if (HaveKey(id)) {\n-            WalletLogPrintf(\"Already have key with pubkey %s, skipping\\n\", HexStr(pubkey));\n-            continue;\n-        }\n-        mapKeyMetadata[id].nCreateTime = timestamp;\n-        // If the private key is not present in the wallet, insert it.\n-        if (!AddKeyPubKeyWithDB(batch, key, pubkey)) {\n-            return false;\n-        }\n-        UpdateTimeFirstKey(timestamp);\n+    auto spk_man = GetLegacyScriptPubKeyMan();\n+    if (!spk_man) {\n+        return false;\n     }\n-    return true;\n+    LOCK(spk_man->cs_KeyStore);\n+    return GetLegacyScriptPubKeyMan()->ImportPrivKeys(privkey_map, timestamp);",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 56,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "c78b003846eb5989f12b6d532c0a8d6ae2dd3029",
      "in_reply_to_id": 322367377,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2019-09-09T23:35:09Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322497330",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322497330"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1395,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322497338",
      "pull_request_review_id": 285838411,
      "id": 322497338,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjQ5NzMzOA==",
      "diff_hunk": "@@ -1744,92 +1744,46 @@ bool CWallet::DummySignTx(CMutableTransaction &txNew, const std::vector<CTxOut>\n \n bool CWallet::ImportScripts(const std::set<CScript> scripts, int64_t timestamp)\n {\n-    WalletBatch batch(*database);\n-    for (const auto& entry : scripts) {\n-        CScriptID id(entry);\n-        if (HaveCScript(id)) {\n-            WalletLogPrintf(\"Already have script %s, skipping\\n\", HexStr(entry));\n-            continue;\n-        }\n-        if (!AddCScriptWithDB(batch, entry)) {\n-            return false;\n-        }\n-\n-        if (timestamp > 0) {\n-            m_script_metadata[CScriptID(entry)].nCreateTime = timestamp;\n-        }\n-    }\n-    if (timestamp > 0) {\n-        UpdateTimeFirstKey(timestamp);\n+    auto spk_man = GetLegacyScriptPubKeyMan();\n+    if (!spk_man) {\n+        return false;\n     }\n-\n-    return true;\n+    LOCK(spk_man->cs_KeyStore);\n+    return GetLegacyScriptPubKeyMan()->ImportScripts(scripts, timestamp);\n }\n \n bool CWallet::ImportPrivKeys(const std::map<CKeyID, CKey>& privkey_map, const int64_t timestamp)\n {\n-    WalletBatch batch(*database);\n-    for (const auto& entry : privkey_map) {\n-        const CKey& key = entry.second;\n-        CPubKey pubkey = key.GetPubKey();\n-        const CKeyID& id = entry.first;\n-        assert(key.VerifyPubKey(pubkey));\n-        // Skip if we already have the key\n-        if (HaveKey(id)) {\n-            WalletLogPrintf(\"Already have key with pubkey %s, skipping\\n\", HexStr(pubkey));\n-            continue;\n-        }\n-        mapKeyMetadata[id].nCreateTime = timestamp;\n-        // If the private key is not present in the wallet, insert it.\n-        if (!AddKeyPubKeyWithDB(batch, key, pubkey)) {\n-            return false;\n-        }\n-        UpdateTimeFirstKey(timestamp);\n+    auto spk_man = GetLegacyScriptPubKeyMan();\n+    if (!spk_man) {\n+        return false;\n     }\n-    return true;\n+    LOCK(spk_man->cs_KeyStore);\n+    return GetLegacyScriptPubKeyMan()->ImportPrivKeys(privkey_map, timestamp);\n }\n \n bool CWallet::ImportPubKeys(const std::vector<CKeyID>& ordered_pubkeys, const std::map<CKeyID, CPubKey>& pubkey_map, const std::map<CKeyID, std::pair<CPubKey, KeyOriginInfo>>& key_origins, const bool add_keypool, const bool internal, const int64_t timestamp)\n {\n-    WalletBatch batch(*database);\n-    for (const auto& entry : key_origins) {\n-        AddKeyOriginWithDB(batch, entry.second.first, entry.second.second);\n-    }\n-    for (const CKeyID& id : ordered_pubkeys) {\n-        auto entry = pubkey_map.find(id);\n-        if (entry == pubkey_map.end()) {\n-            continue;\n-        }\n-        const CPubKey& pubkey = entry->second;\n-        CPubKey temp;\n-        if (GetPubKey(id, temp)) {\n-            // Already have pubkey, skipping\n-            WalletLogPrintf(\"Already have pubkey %s, skipping\\n\", HexStr(temp));\n-            continue;\n-        }\n-        if (!AddWatchOnlyWithDB(batch, GetScriptForRawPubKey(pubkey), timestamp)) {\n-            return false;\n-        }\n-        mapKeyMetadata[id].nCreateTime = timestamp;\n-\n-        // Add to keypool only works with pubkeys\n-        if (add_keypool) {\n-            AddKeypoolPubkeyWithDB(pubkey, internal, batch);\n-            NotifyCanGetAddressesChanged();\n-        }\n+    auto spk_man = GetLegacyScriptPubKeyMan();\n+    if (!spk_man) {\n+        return false;\n     }\n-    return true;\n+    LOCK(spk_man->cs_KeyStore);\n+    return GetLegacyScriptPubKeyMan()->ImportPubKeys(ordered_pubkeys, pubkey_map, key_origins, add_keypool, internal, timestamp);",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 93,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "c78b003846eb5989f12b6d532c0a8d6ae2dd3029",
      "in_reply_to_id": 322367622,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2019-09-09T23:35:13Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322497338",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322497338"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1405,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322497348",
      "pull_request_review_id": 285838431,
      "id": 322497348,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjQ5NzM0OA==",
      "diff_hunk": "@@ -1744,92 +1744,46 @@ bool CWallet::DummySignTx(CMutableTransaction &txNew, const std::vector<CTxOut>\n \n bool CWallet::ImportScripts(const std::set<CScript> scripts, int64_t timestamp)\n {\n-    WalletBatch batch(*database);\n-    for (const auto& entry : scripts) {\n-        CScriptID id(entry);\n-        if (HaveCScript(id)) {\n-            WalletLogPrintf(\"Already have script %s, skipping\\n\", HexStr(entry));\n-            continue;\n-        }\n-        if (!AddCScriptWithDB(batch, entry)) {\n-            return false;\n-        }\n-\n-        if (timestamp > 0) {\n-            m_script_metadata[CScriptID(entry)].nCreateTime = timestamp;\n-        }\n-    }\n-    if (timestamp > 0) {\n-        UpdateTimeFirstKey(timestamp);\n+    auto spk_man = GetLegacyScriptPubKeyMan();\n+    if (!spk_man) {\n+        return false;\n     }\n-\n-    return true;\n+    LOCK(spk_man->cs_KeyStore);\n+    return GetLegacyScriptPubKeyMan()->ImportScripts(scripts, timestamp);\n }\n \n bool CWallet::ImportPrivKeys(const std::map<CKeyID, CKey>& privkey_map, const int64_t timestamp)\n {\n-    WalletBatch batch(*database);\n-    for (const auto& entry : privkey_map) {\n-        const CKey& key = entry.second;\n-        CPubKey pubkey = key.GetPubKey();\n-        const CKeyID& id = entry.first;\n-        assert(key.VerifyPubKey(pubkey));\n-        // Skip if we already have the key\n-        if (HaveKey(id)) {\n-            WalletLogPrintf(\"Already have key with pubkey %s, skipping\\n\", HexStr(pubkey));\n-            continue;\n-        }\n-        mapKeyMetadata[id].nCreateTime = timestamp;\n-        // If the private key is not present in the wallet, insert it.\n-        if (!AddKeyPubKeyWithDB(batch, key, pubkey)) {\n-            return false;\n-        }\n-        UpdateTimeFirstKey(timestamp);\n+    auto spk_man = GetLegacyScriptPubKeyMan();\n+    if (!spk_man) {\n+        return false;\n     }\n-    return true;\n+    LOCK(spk_man->cs_KeyStore);\n+    return GetLegacyScriptPubKeyMan()->ImportPrivKeys(privkey_map, timestamp);\n }\n \n bool CWallet::ImportPubKeys(const std::vector<CKeyID>& ordered_pubkeys, const std::map<CKeyID, CPubKey>& pubkey_map, const std::map<CKeyID, std::pair<CPubKey, KeyOriginInfo>>& key_origins, const bool add_keypool, const bool internal, const int64_t timestamp)\n {\n-    WalletBatch batch(*database);\n-    for (const auto& entry : key_origins) {\n-        AddKeyOriginWithDB(batch, entry.second.first, entry.second.second);\n-    }\n-    for (const CKeyID& id : ordered_pubkeys) {\n-        auto entry = pubkey_map.find(id);\n-        if (entry == pubkey_map.end()) {\n-            continue;\n-        }\n-        const CPubKey& pubkey = entry->second;\n-        CPubKey temp;\n-        if (GetPubKey(id, temp)) {\n-            // Already have pubkey, skipping\n-            WalletLogPrintf(\"Already have pubkey %s, skipping\\n\", HexStr(temp));\n-            continue;\n-        }\n-        if (!AddWatchOnlyWithDB(batch, GetScriptForRawPubKey(pubkey), timestamp)) {\n-            return false;\n-        }\n-        mapKeyMetadata[id].nCreateTime = timestamp;\n-\n-        // Add to keypool only works with pubkeys\n-        if (add_keypool) {\n-            AddKeypoolPubkeyWithDB(pubkey, internal, batch);\n-            NotifyCanGetAddressesChanged();\n-        }\n+    auto spk_man = GetLegacyScriptPubKeyMan();\n+    if (!spk_man) {\n+        return false;\n     }\n-    return true;\n+    LOCK(spk_man->cs_KeyStore);\n+    return GetLegacyScriptPubKeyMan()->ImportPubKeys(ordered_pubkeys, pubkey_map, key_origins, add_keypool, internal, timestamp);\n }\n \n bool CWallet::ImportScriptPubKeys(const std::string& label, const std::set<CScript>& script_pub_keys, const bool have_solving_data, const bool apply_label, const int64_t timestamp)\n {\n+    auto spk_man = GetLegacyScriptPubKeyMan();\n+    if (!spk_man) {\n+        return false;\n+    }\n+    LOCK(spk_man->cs_KeyStore);\n+    if (!GetLegacyScriptPubKeyMan()->ImportScriptPubKeys(script_pub_keys, have_solving_data, timestamp)) {",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 103,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "c78b003846eb5989f12b6d532c0a8d6ae2dd3029",
      "in_reply_to_id": 322367743,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2019-09-09T23:35:16Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322497348",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322497348"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1415,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322497368",
      "pull_request_review_id": 285838451,
      "id": 322497368,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjQ5NzM2OA==",
      "diff_hunk": "@@ -3509,48 +3509,20 @@ void CWallet::LoadKeyPool(int64_t nIndex, const CKeyPool &keypool)\n \n bool CWallet::TopUpKeyPool(unsigned int kpSize)\n {\n-    if (!CanGenerateKeys()) {\n+    LOCK(cs_wallet);\n+    if (IsWalletFlagSet(WALLET_FLAG_BLANK_WALLET) || IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n         return false;\n     }\n-    {\n-        LOCK(cs_wallet);\n-\n-        if (IsLocked()) return false;\n-\n-        // Top up key pool\n-        unsigned int nTargetSize;\n-        if (kpSize > 0)\n-            nTargetSize = kpSize;\n-        else\n-            nTargetSize = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 0);\n-\n-        // count amount of available keys (internal, external)\n-        // make sure the keypool of external and internal keys fits the user selected target (-keypool)\n-        int64_t missingExternal = std::max(std::max((int64_t) nTargetSize, (int64_t) 1) - (int64_t)setExternalKeyPool.size(), (int64_t) 0);\n-        int64_t missingInternal = std::max(std::max((int64_t) nTargetSize, (int64_t) 1) - (int64_t)setInternalKeyPool.size(), (int64_t) 0);\n-\n-        if (!IsHDEnabled() || !CanSupportFeature(FEATURE_HD_SPLIT))\n-        {\n-            // don't create extra internal keys\n-            missingInternal = 0;\n-        }\n-        bool internal = false;\n-        WalletBatch batch(*database);\n-        for (int64_t i = missingInternal + missingExternal; i--;)\n-        {\n-            if (i < missingInternal) {\n-                internal = true;\n+    bool res = true;",
      "path": "src/wallet/wallet.cpp",
      "position": 1121,
      "original_position": 37,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "f4ff4c5f1a9d9da212ff3843f314557011baaa43",
      "in_reply_to_id": 322378586,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2019-09-09T23:35:20Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322497368",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322497368"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3052,
      "original_line": 3052,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322497381",
      "pull_request_review_id": 285838469,
      "id": 322497381,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjQ5NzM4MQ==",
      "diff_hunk": "@@ -4262,32 +4262,15 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n             return nullptr;\n         }\n \n-        bool hd_upgrade = false;\n-        bool split_upgrade = false;\n-        if (walletInstance->CanSupportFeature(FEATURE_HD) && !walletInstance->IsHDEnabled()) {\n-            walletInstance->WalletLogPrintf(\"Upgrading wallet to HD\\n\");\n-            walletInstance->SetMinVersion(FEATURE_HD);\n-\n-            // generate a new master key\n-            CPubKey masterPubKey = walletInstance->GenerateNewSeed();\n-            walletInstance->SetHDSeed(masterPubKey);\n-            hd_upgrade = true;\n-        }\n-        // Upgrade to HD chain split if necessary\n-        if (walletInstance->CanSupportFeature(FEATURE_HD_SPLIT)) {\n-            walletInstance->WalletLogPrintf(\"Upgrading wallet to use HD chain split\\n\");\n-            walletInstance->SetMinVersion(FEATURE_PRE_SPLIT_KEYPOOL);\n-            split_upgrade = FEATURE_HD_SPLIT > prev_version;\n-        }\n-        // Mark all keys currently in the keypool as pre-split\n-        if (split_upgrade) {\n-            walletInstance->MarkPreSplitKeys();\n-        }\n-        // Regenerate the keypool if upgraded to HD\n-        if (hd_upgrade) {\n-            if (!walletInstance->TopUpKeyPool()) {\n-                chain.initError(_(\"Unable to generate keys\").translated);\n-                return nullptr;\n+\n+        for (bool internal : {false, true}) {",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 31,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "3e6cd81d3da4b1d96d9162756f2909660e1efc54",
      "in_reply_to_id": 322380725,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2019-09-09T23:35:23Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322497381",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322497381"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4266,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322497399",
      "pull_request_review_id": 285838490,
      "id": 322497399,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjQ5NzM5OQ==",
      "diff_hunk": "@@ -4449,8 +4449,17 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n \n         // No need to read and scan block if block was created before\n         // our wallet birthday (as adjusted for block time variability)\n-        if (walletInstance->nTimeFirstKey) {\n-            if (Optional<int> first_block = locked_chain->findFirstBlockWithTimeAndHeight(walletInstance->nTimeFirstKey - TIMESTAMP_WINDOW, rescan_height, nullptr)) {\n+        int64_t time_first_key = std::numeric_limits<int64_t>::max();\n+        for (bool internal : {false, true}) {",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "e3b5a71ae09c71c46381b6d2c254a51a085c6b4d",
      "in_reply_to_id": 322381977,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2019-09-09T23:35:27Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322497399",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322497399"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4453,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322497409",
      "pull_request_review_id": 285838503,
      "id": 322497409,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjQ5NzQwOQ==",
      "diff_hunk": "@@ -214,9 +214,17 @@ WalletCreationStatus CreateWallet(interfaces::Chain& chain, const SecureString&\n             }\n \n             // Set a seed for the wallet\n-            CPubKey master_pub_key = wallet->GenerateNewSeed();\n-            wallet->SetHDSeed(master_pub_key);\n-            wallet->NewKeyPool();\n+            {\n+                LOCK(wallet->cs_wallet);\n+                for (bool internal : {false, true}) {",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 9,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "595fb6723821a40b4158d60ed3dbdf9c4ff88870",
      "in_reply_to_id": 322383899,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2019-09-09T23:35:30Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322497409",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322497409"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 219,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322502117",
      "pull_request_review_id": 285844020,
      "id": 322502117,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjUwMjExNw==",
      "diff_hunk": "@@ -78,22 +78,30 @@ CTxDestination AddAndGetDestinationForScript(FillableSigningProvider& keystore,\n {\n     // Add script to keystore\n     keystore.AddCScript(script);\n+    ScriptHash sh = ScriptHash(script);",
      "path": "src/outputtype.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "592177c771ee120472b11036ccf6e3aad0bba8af",
      "in_reply_to_id": 322385026,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "it was needed for some tests to pass. I've moved it up near the front of the PR.",
      "created_at": "2019-09-09T23:56:43Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322502117",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322502117"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 81,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322739005",
      "pull_request_review_id": 286146219,
      "id": 322739005,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjczOTAwNQ==",
      "diff_hunk": "@@ -3922,42 +3917,44 @@ std::set<CTxDestination> CWallet::GetLabelAddresses(const std::string& label) co\n \n bool ReserveDestination::GetReservedDestination(const OutputType type, CTxDestination& dest, bool internal)\n {\n-    if (!pwallet->CanGetAddresses(internal)) {\n+    spk_man = pwallet->GetScriptPubKeyMan(type, internal);\n+    if (!spk_man) {\n+        return false;\n+    }\n+\n+    if (!spk_man->IsLocked()) {\n+        spk_man->TopUp();\n+    }\n+\n+    if (!spk_man->CanGetAddresses(internal)) {\n         return false;\n     }\n \n     if (nIndex == -1)\n     {\n         CKeyPool keypool;\n-        if (!pwallet->ReserveKeyFromKeyPool(nIndex, keypool, internal)) {\n+        if (!spk_man->GetReservedDestination(type, internal, dest, nIndex, keypool)) {\n             return false;\n         }\n-        vchPubKey = keypool.vchPubKey;\n         fInternal = keypool.fInternal;\n     }\n-    assert(vchPubKey.IsValid());\n-    pwallet->LearnRelatedScripts(vchPubKey, type);",
      "path": "src/wallet/wallet.cpp",
      "position": 1230,
      "original_position": 67,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "6a9164679039976dbb291b581dfe4f632a107f46",
      "in_reply_to_id": 322361186,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Please be specific. `GetNewDestination` literally has the call to `LearnRelatedScripts`, I can't find the corresponding one for this.",
      "created_at": "2019-09-10T13:22:33Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322739005",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322739005"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3922,
      "original_line": 3922,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322827322",
      "pull_request_review_id": 286261574,
      "id": 322827322,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjgyNzMyMg==",
      "diff_hunk": "@@ -3922,42 +3917,44 @@ std::set<CTxDestination> CWallet::GetLabelAddresses(const std::string& label) co\n \n bool ReserveDestination::GetReservedDestination(const OutputType type, CTxDestination& dest, bool internal)\n {\n-    if (!pwallet->CanGetAddresses(internal)) {\n+    spk_man = pwallet->GetScriptPubKeyMan(type, internal);\n+    if (!spk_man) {\n+        return false;\n+    }\n+\n+    if (!spk_man->IsLocked()) {\n+        spk_man->TopUp();\n+    }\n+\n+    if (!spk_man->CanGetAddresses(internal)) {\n         return false;\n     }\n \n     if (nIndex == -1)\n     {\n         CKeyPool keypool;\n-        if (!pwallet->ReserveKeyFromKeyPool(nIndex, keypool, internal)) {\n+        if (!spk_man->GetReservedDestination(type, internal, dest, nIndex, keypool)) {\n             return false;\n         }\n-        vchPubKey = keypool.vchPubKey;\n         fInternal = keypool.fInternal;\n     }\n-    assert(vchPubKey.IsValid());\n-    pwallet->LearnRelatedScripts(vchPubKey, type);",
      "path": "src/wallet/wallet.cpp",
      "position": 1230,
      "original_position": 67,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "6a9164679039976dbb291b581dfe4f632a107f46",
      "in_reply_to_id": 322361186,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I've added a call to `LearnRelatedScripts` in `GetReservedDestination`",
      "created_at": "2019-09-10T15:55:49Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322827322",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322827322"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3922,
      "original_line": 3922,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/323884483",
      "pull_request_review_id": 287618679,
      "id": 323884483,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMzg4NDQ4Mw==",
      "diff_hunk": "@@ -0,0 +1,484 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+#define BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <wallet/crypter.h>\n+#include <wallet/ismine.h>\n+#include <wallet/walletdb.h>\n+#include <wallet/walletutil.h>\n+\n+#include <functional>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+enum class OutputType;\n+\n+//! Default for -keypool\n+static const unsigned int DEFAULT_KEYPOOL_SIZE = 1000;\n+\n+std::vector<CKeyID> GetAffectedKeys(const CScript& spk, const SigningProvider& provider);\n+\n+/** A key from a CWallet's keypool\n+ *\n+ * The wallet holds one (for pre HD-split wallets) or several keypools. These\n+ * are sets of keys that have not yet been used to provide addresses or receive\n+ * change.\n+ *\n+ * The Bitcoin Core wallet was originally a collection of unrelated private\n+ * keys with their associated addresses. If a non-HD wallet generated a\n+ * key/address, gave that address out and then restored a backup from before\n+ * that key's generation, then any funds sent to that address would be\n+ * lost definitively.\n+ *\n+ * The keypool was implemented to avoid this scenario (commit: 10384941). The\n+ * wallet would generate a set of keys (100 by default). When a new public key\n+ * was required, either to give out as an address or to use in a change output,\n+ * it would be drawn from the keypool. The keypool would then be topped up to\n+ * maintain 100 keys. This ensured that as long as the wallet hadn't used more\n+ * than 100 keys since the previous backup, all funds would be safe, since a\n+ * restored wallet would be able to scan for all owned addresses.\n+ *\n+ * A keypool also allowed encrypted wallets to give out addresses without\n+ * having to be decrypted to generate a new private key.\n+ *\n+ * With the introduction of HD wallets (commit: f1902510), the keypool\n+ * essentially became an address look-ahead pool. Restoring old backups can no\n+ * longer definitively lose funds as long as the addresses used were from the\n+ * wallet's HD seed (since all private keys can be rederived from the seed).\n+ * However, if many addresses were used since the backup, then the wallet may\n+ * not know how far ahead in the HD chain to look for its addresses. The\n+ * keypool is used to implement a 'gap limit'. The keypool maintains a set of\n+ * keys (by default 1000) ahead of the last used key and scans for the\n+ * addresses of those keys.  This avoids the risk of not seeing transactions\n+ * involving the wallet's addresses, or of re-using the same address.\n+ *\n+ * The HD-split wallet feature added a second keypool (commit: 02592f4c). There\n+ * is an external keypool (for addresses to hand out) and an internal keypool\n+ * (for change addresses).\n+ *\n+ * Keypool keys are stored in the wallet/keystore's keymap. The keypool data is\n+ * stored as sets of indexes in the wallet (setInternalKeyPool,\n+ * setExternalKeyPool and set_pre_split_keypool), and a map from the key to the\n+ * index (m_pool_key_to_index). The CKeyPool object is used to\n+ * serialize/deserialize the pool data to/from the database.\n+ */\n+class CKeyPool\n+{\n+public:\n+    //! The time at which the key was generated. Set in AddKeypoolPubKeyWithDB\n+    int64_t nTime;\n+    //! The public key\n+    CPubKey vchPubKey;\n+    //! Whether this keypool entry is in the internal keypool (for change outputs)\n+    bool fInternal;\n+    //! Whether this key was generated for a keypool before the wallet was upgraded to HD-split\n+    bool m_pre_split;\n+\n+    CKeyPool();\n+    CKeyPool(const CPubKey& vchPubKeyIn, bool internalIn);\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        int nVersion = s.GetVersion();\n+        if (!(s.GetType() & SER_GETHASH))\n+            READWRITE(nVersion);\n+        READWRITE(nTime);\n+        READWRITE(vchPubKey);\n+        if (ser_action.ForRead()) {\n+            try {\n+                READWRITE(fInternal);\n+            }\n+            catch (std::ios_base::failure&) {\n+                /* flag as external address if we can't read the internal boolean\n+                   (this will be the case for any wallet before the HD chain split version) */\n+                fInternal = false;\n+            }\n+            try {\n+                READWRITE(m_pre_split);\n+            }\n+            catch (std::ios_base::failure&) {\n+                /* flag as postsplit address if we can't read the m_pre_split boolean\n+                   (this will be the case for any wallet that upgrades to HD chain split)*/\n+                m_pre_split = false;\n+            }\n+        }\n+        else {\n+            READWRITE(fInternal);\n+            READWRITE(m_pre_split);\n+        }\n+    }\n+};\n+\n+typedef std::function<void(uint64_t)> FlagFunc;\n+typedef std::function<void(WalletBatch&, uint64_t)> FlagFuncWithDB;\n+typedef std::function<bool(uint64_t)> FlagSetFunc;\n+typedef std::function<bool(enum WalletFeature)> VersionFunc;\n+typedef std::function<std::string()> NameFunc;\n+typedef std::function<void(enum WalletFeature)> SetVersionFunc;\n+\n+/*\n+ * A class implementing ScriptPubKeyMan manages some (or all) scriptPubKeys used in a wallet.\n+ * It contains the scripts and keys related to the scriptPubKeys it manages.\n+ * A ScriptPubKeyMan will be able to give out scriptPubKeys to be used, as well as marking\n+ * when a scriptPubKey has been used. It also handles when and how to store a scriptPubKey\n+ * and it's related scripts and keys, including encryption.\n+ */\n+\n+class ScriptPubKeyMan\n+{\n+protected:\n+    FlagSetFunc IsWalletFlagSet; // Function pointer to function that determines if a wallet flag is set\n+    FlagFunc SetWalletFlag; // Function pointer to function to set wallet flags\n+    FlagFuncWithDB UnsetWalletFlagWithDB; // Function pointer to function to unset wallet flags\n+    VersionFunc CanSupportFeature; // Function pointer to function that indicates whether the feature is supported\n+    NameFunc GetDisplayName; // Function pointer to GetDisplayName to get the name of a wallet for WalletLogPrintf\n+    SetVersionFunc SetMinVersion; // Function pointer to SetMinVersion in the wallet\n+\n+    /** Internal database handle. */\n+    std::shared_ptr<WalletDatabase> m_database;\n+\n+public:\n+    ScriptPubKeyMan(FlagSetFunc is_set_func, FlagFunc set_flag_func, FlagFuncWithDB unset_flag_func, VersionFunc feature_sup_func, NameFunc wallet_name_func, SetVersionFunc set_version_func, std::shared_ptr<WalletDatabase> database)\n+        :   IsWalletFlagSet(is_set_func),\n+            SetWalletFlag(set_flag_func),\n+            UnsetWalletFlagWithDB(unset_flag_func),\n+            CanSupportFeature(feature_sup_func),\n+            GetDisplayName(wallet_name_func),\n+            SetMinVersion(set_version_func),\n+            m_database(database)\n+        {}\n+\n+    virtual ~ScriptPubKeyMan() {};\n+    virtual bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) { return false; }\n+    virtual isminetype IsMine(const CScript& script) const { return ISMINE_NO; }\n+\n+    virtual bool IsCrypted() const { return false; }\n+    virtual bool IsLocked() const { return false; }\n+    virtual bool Lock() { return false; }\n+\n+    virtual bool Unlock(const CKeyingMaterial& vMasterKeyIn, bool accept_no_keys = false) { return false; }\n+    virtual bool Encrypt(CKeyingMaterial& vMasterKeyIn, WalletBatch* batch) { return false; }\n+\n+    virtual bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool) { return false; }\n+    virtual void KeepDestination(int64_t index) {}\n+    virtual void ReturnDestination(int64_t index, bool internal, const CTxDestination& addr) {}\n+\n+    virtual bool TopUp(unsigned int size = 0) { return false; }\n+\n+    //! Mark unused addresses as being used\n+    virtual void MarkUnusedAddresses(const CScript& script) {}\n+\n+    //! Upgrade stored CKeyMetadata objects to store key origin info as KeyOriginInfo\n+    virtual void UpgradeKeyMetadata() {}\n+\n+    /** Sets up the key generation stuff, i.e. generates new HD seeds and sets them as active.\n+      * Returns false if already setup or setup fails, true if setup is successful\n+      * Set force=true to make it re-setup if already setup, used for upgrades\n+      */\n+    virtual bool SetupGeneration(bool force = false) { return false; }\n+\n+    /* Returns true if HD is enabled */\n+    virtual bool IsHDEnabled() const { return false; }\n+\n+    /* Returns true if the wallet can give out new addresses. This means it has keys in the keypool or can generate new keys */\n+    virtual bool CanGetAddresses(bool internal = false) { return false; }\n+\n+    /** Upgrades the wallet to the specified version */\n+    virtual bool Upgrade(int prev_version, int new_version, std::string& error) { return false; }\n+\n+    virtual bool HavePrivateKeys() const { return false; }\n+\n+    //! The action to do when the DB needs rewrite\n+    virtual void RewriteDB() {}\n+\n+    virtual int64_t GetOldestKeyPoolTime() { return GetTime(); }\n+\n+    virtual size_t KeypoolCountExternalKeys() { return 0; }\n+    virtual unsigned int GetKeypoolSize() const { return 0; }\n+\n+    virtual int64_t GetTimeFirstKey() const { return 0; }\n+\n+    virtual const CKeyMetadata* GetMetadata(uint160 id) const { return nullptr; }\n+\n+    virtual std::unique_ptr<SigningProvider> GetSigningProvider(const CScript& script) const { return nullptr; }\n+\n+    /** Whether this ScriptPubKeyMan can provide a SigningProvider (via GetSigningProvider) that, combined with\n+      * sigdata, can produce a valid signature.\n+      */\n+    virtual bool CanProvide(const CScript& script, SignatureData& sigdata) { return false; }\n+\n+    virtual uint256 GetID() const { return uint256(); }\n+\n+    /** Prepends the wallet name in logging output to ease debugging in multi-wallet use cases */\n+    template<typename... Params>\n+    void WalletLogPrintf(std::string fmt, Params... parameters) const {\n+        LogPrintf((\"%s \" + fmt).c_str(), GetDisplayName(), parameters...);\n+    };\n+\n+    /** Watch-only address added */\n+    boost::signals2::signal<void (bool fHaveWatchOnly)> NotifyWatchonlyChanged;\n+\n+    /** Keypool has new keys */\n+    boost::signals2::signal<void ()> NotifyCanGetAddressesChanged;\n+};\n+\n+class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProvider\n+{\n+private:\n+    //! if fUseCrypto is true, mapKeys must be empty\n+    //! if fUseCrypto is false, vMasterKey must be empty\n+    std::atomic<bool> fUseCrypto{false};\n+\n+    bool SetCrypted();\n+\n+    //! keeps track of whether Unlock has run a thorough check before\n+    bool fDecryptionThoroughlyChecked = false;\n+\n+    //! Master encryption key for the wallet. Keys are encrypted with this.\n+    //! Wallet is unlocked if this is not null.\n+    CKeyingMaterial vMasterKey GUARDED_BY(cs_KeyStore);",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": null,
      "original_position": 246,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "fb0058ed68a18053959001a0191f3fbcfec50526",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The state variables vMasterKey, fUseCrypto, and fDecryptionThoroughlyChecked seem to end up duplicated in both the CWallet and in KeyMan classes:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/fb0058ed68a18053959001a0191f3fbcfec50526/src/wallet/wallet.h#L591\r\nhttps://github.com/bitcoin/bitcoin/blob/fb0058ed68a18053959001a0191f3fbcfec50526/src/wallet/scriptpubkeyman.h#L246\r\n\r\nIs this by design, or could KeyMan instances store references or pointers instead? It seems not ideal for different KeyMan instances to potentially be storing their own copies of encryption state and maybe having variables like fDecryptionThoroughlyChecked set inconsistently.\r\n\r\nAlso, the SetCrypted and IsLocked functions are duplicated almost but not quite verbatim across both classes:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/fb0058ed68a18053959001a0191f3fbcfec50526/src/wallet/wallet.cpp#L3996-L4012\r\nhttps://github.com/bitcoin/bitcoin/blob/fb0058ed68a18053959001a0191f3fbcfec50526/src/wallet/scriptpubkeyman.cpp#L213-L231\r\n\r\nI don't know if any of this is harmful, but it does seem more messy than it needs to be. What would you think about introducing an interface like: \r\n\r\n```c++\r\nclass WalletStorage\r\n{\r\n    virtual ~WalletStorage() = default;\r\n    virtual const std::string& GetDisplayName() = 0;\r\n    virtual WalletDatabase& GetDatabase() = 0;\r\n    virtual const CKeyingMaterial& GetMasterKey() = 0;\r\n    virtual void IsWalletFlagSet(uint64_t)> = 0;\r\n    virtual void SetWalletFlag(WalletBatch&, uint64_t)> = 0;\r\n    virtual bool UnsetWalletFlagWithDB(uint64_t) = 0;\r\n    virtual bool CanSupportFeature(enum WalletFeature) = 0;\r\n    virtual void SetMinVersion(enum WalletFeature) = 0;\r\n};\r\n```\r\n\r\nthat would allow ScriptPubKeyMan to get access to database and crypto functionality without creating a circular dependency on CWallet, and without needing the current std::function trampolines and duplication of crypto code.\r\n\r\nThe idea would be to declare this interface in scriptpubkeyman.h or a standalone header, pass it to scriptpubkeymanager instances, and have CWallet inherit and implement it.",
      "created_at": "2019-09-12T18:21:37Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r323884483",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/323884483"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 244,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/324369235",
      "pull_request_review_id": 288253164,
      "id": 324369235,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNDM2OTIzNQ==",
      "diff_hunk": "@@ -0,0 +1,484 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+#define BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <wallet/crypter.h>\n+#include <wallet/ismine.h>\n+#include <wallet/walletdb.h>\n+#include <wallet/walletutil.h>\n+\n+#include <functional>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+enum class OutputType;\n+\n+//! Default for -keypool\n+static const unsigned int DEFAULT_KEYPOOL_SIZE = 1000;\n+\n+std::vector<CKeyID> GetAffectedKeys(const CScript& spk, const SigningProvider& provider);\n+\n+/** A key from a CWallet's keypool\n+ *\n+ * The wallet holds one (for pre HD-split wallets) or several keypools. These\n+ * are sets of keys that have not yet been used to provide addresses or receive\n+ * change.\n+ *\n+ * The Bitcoin Core wallet was originally a collection of unrelated private\n+ * keys with their associated addresses. If a non-HD wallet generated a\n+ * key/address, gave that address out and then restored a backup from before\n+ * that key's generation, then any funds sent to that address would be\n+ * lost definitively.\n+ *\n+ * The keypool was implemented to avoid this scenario (commit: 10384941). The\n+ * wallet would generate a set of keys (100 by default). When a new public key\n+ * was required, either to give out as an address or to use in a change output,\n+ * it would be drawn from the keypool. The keypool would then be topped up to\n+ * maintain 100 keys. This ensured that as long as the wallet hadn't used more\n+ * than 100 keys since the previous backup, all funds would be safe, since a\n+ * restored wallet would be able to scan for all owned addresses.\n+ *\n+ * A keypool also allowed encrypted wallets to give out addresses without\n+ * having to be decrypted to generate a new private key.\n+ *\n+ * With the introduction of HD wallets (commit: f1902510), the keypool\n+ * essentially became an address look-ahead pool. Restoring old backups can no\n+ * longer definitively lose funds as long as the addresses used were from the\n+ * wallet's HD seed (since all private keys can be rederived from the seed).\n+ * However, if many addresses were used since the backup, then the wallet may\n+ * not know how far ahead in the HD chain to look for its addresses. The\n+ * keypool is used to implement a 'gap limit'. The keypool maintains a set of\n+ * keys (by default 1000) ahead of the last used key and scans for the\n+ * addresses of those keys.  This avoids the risk of not seeing transactions\n+ * involving the wallet's addresses, or of re-using the same address.\n+ *\n+ * The HD-split wallet feature added a second keypool (commit: 02592f4c). There\n+ * is an external keypool (for addresses to hand out) and an internal keypool\n+ * (for change addresses).\n+ *\n+ * Keypool keys are stored in the wallet/keystore's keymap. The keypool data is\n+ * stored as sets of indexes in the wallet (setInternalKeyPool,\n+ * setExternalKeyPool and set_pre_split_keypool), and a map from the key to the\n+ * index (m_pool_key_to_index). The CKeyPool object is used to\n+ * serialize/deserialize the pool data to/from the database.\n+ */\n+class CKeyPool\n+{\n+public:\n+    //! The time at which the key was generated. Set in AddKeypoolPubKeyWithDB\n+    int64_t nTime;\n+    //! The public key\n+    CPubKey vchPubKey;\n+    //! Whether this keypool entry is in the internal keypool (for change outputs)\n+    bool fInternal;\n+    //! Whether this key was generated for a keypool before the wallet was upgraded to HD-split\n+    bool m_pre_split;\n+\n+    CKeyPool();\n+    CKeyPool(const CPubKey& vchPubKeyIn, bool internalIn);\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        int nVersion = s.GetVersion();\n+        if (!(s.GetType() & SER_GETHASH))\n+            READWRITE(nVersion);\n+        READWRITE(nTime);\n+        READWRITE(vchPubKey);\n+        if (ser_action.ForRead()) {\n+            try {\n+                READWRITE(fInternal);\n+            }\n+            catch (std::ios_base::failure&) {\n+                /* flag as external address if we can't read the internal boolean\n+                   (this will be the case for any wallet before the HD chain split version) */\n+                fInternal = false;\n+            }\n+            try {\n+                READWRITE(m_pre_split);\n+            }\n+            catch (std::ios_base::failure&) {\n+                /* flag as postsplit address if we can't read the m_pre_split boolean\n+                   (this will be the case for any wallet that upgrades to HD chain split)*/\n+                m_pre_split = false;\n+            }\n+        }\n+        else {\n+            READWRITE(fInternal);\n+            READWRITE(m_pre_split);\n+        }\n+    }\n+};\n+\n+typedef std::function<void(uint64_t)> FlagFunc;\n+typedef std::function<void(WalletBatch&, uint64_t)> FlagFuncWithDB;\n+typedef std::function<bool(uint64_t)> FlagSetFunc;\n+typedef std::function<bool(enum WalletFeature)> VersionFunc;\n+typedef std::function<std::string()> NameFunc;\n+typedef std::function<void(enum WalletFeature)> SetVersionFunc;\n+\n+/*\n+ * A class implementing ScriptPubKeyMan manages some (or all) scriptPubKeys used in a wallet.\n+ * It contains the scripts and keys related to the scriptPubKeys it manages.\n+ * A ScriptPubKeyMan will be able to give out scriptPubKeys to be used, as well as marking\n+ * when a scriptPubKey has been used. It also handles when and how to store a scriptPubKey\n+ * and it's related scripts and keys, including encryption.\n+ */\n+\n+class ScriptPubKeyMan\n+{\n+protected:\n+    FlagSetFunc IsWalletFlagSet; // Function pointer to function that determines if a wallet flag is set\n+    FlagFunc SetWalletFlag; // Function pointer to function to set wallet flags\n+    FlagFuncWithDB UnsetWalletFlagWithDB; // Function pointer to function to unset wallet flags\n+    VersionFunc CanSupportFeature; // Function pointer to function that indicates whether the feature is supported\n+    NameFunc GetDisplayName; // Function pointer to GetDisplayName to get the name of a wallet for WalletLogPrintf\n+    SetVersionFunc SetMinVersion; // Function pointer to SetMinVersion in the wallet\n+\n+    /** Internal database handle. */\n+    std::shared_ptr<WalletDatabase> m_database;\n+\n+public:\n+    ScriptPubKeyMan(FlagSetFunc is_set_func, FlagFunc set_flag_func, FlagFuncWithDB unset_flag_func, VersionFunc feature_sup_func, NameFunc wallet_name_func, SetVersionFunc set_version_func, std::shared_ptr<WalletDatabase> database)\n+        :   IsWalletFlagSet(is_set_func),\n+            SetWalletFlag(set_flag_func),\n+            UnsetWalletFlagWithDB(unset_flag_func),\n+            CanSupportFeature(feature_sup_func),\n+            GetDisplayName(wallet_name_func),\n+            SetMinVersion(set_version_func),\n+            m_database(database)\n+        {}\n+\n+    virtual ~ScriptPubKeyMan() {};\n+    virtual bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) { return false; }\n+    virtual isminetype IsMine(const CScript& script) const { return ISMINE_NO; }\n+\n+    virtual bool IsCrypted() const { return false; }\n+    virtual bool IsLocked() const { return false; }\n+    virtual bool Lock() { return false; }\n+\n+    virtual bool Unlock(const CKeyingMaterial& vMasterKeyIn, bool accept_no_keys = false) { return false; }\n+    virtual bool Encrypt(CKeyingMaterial& vMasterKeyIn, WalletBatch* batch) { return false; }\n+\n+    virtual bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool) { return false; }\n+    virtual void KeepDestination(int64_t index) {}\n+    virtual void ReturnDestination(int64_t index, bool internal, const CTxDestination& addr) {}\n+\n+    virtual bool TopUp(unsigned int size = 0) { return false; }\n+\n+    //! Mark unused addresses as being used\n+    virtual void MarkUnusedAddresses(const CScript& script) {}\n+\n+    //! Upgrade stored CKeyMetadata objects to store key origin info as KeyOriginInfo\n+    virtual void UpgradeKeyMetadata() {}\n+\n+    /** Sets up the key generation stuff, i.e. generates new HD seeds and sets them as active.\n+      * Returns false if already setup or setup fails, true if setup is successful\n+      * Set force=true to make it re-setup if already setup, used for upgrades\n+      */\n+    virtual bool SetupGeneration(bool force = false) { return false; }\n+\n+    /* Returns true if HD is enabled */\n+    virtual bool IsHDEnabled() const { return false; }\n+\n+    /* Returns true if the wallet can give out new addresses. This means it has keys in the keypool or can generate new keys */\n+    virtual bool CanGetAddresses(bool internal = false) { return false; }\n+\n+    /** Upgrades the wallet to the specified version */\n+    virtual bool Upgrade(int prev_version, int new_version, std::string& error) { return false; }\n+\n+    virtual bool HavePrivateKeys() const { return false; }\n+\n+    //! The action to do when the DB needs rewrite\n+    virtual void RewriteDB() {}\n+\n+    virtual int64_t GetOldestKeyPoolTime() { return GetTime(); }\n+\n+    virtual size_t KeypoolCountExternalKeys() { return 0; }\n+    virtual unsigned int GetKeypoolSize() const { return 0; }\n+\n+    virtual int64_t GetTimeFirstKey() const { return 0; }\n+\n+    virtual const CKeyMetadata* GetMetadata(uint160 id) const { return nullptr; }\n+\n+    virtual std::unique_ptr<SigningProvider> GetSigningProvider(const CScript& script) const { return nullptr; }\n+\n+    /** Whether this ScriptPubKeyMan can provide a SigningProvider (via GetSigningProvider) that, combined with\n+      * sigdata, can produce a valid signature.\n+      */\n+    virtual bool CanProvide(const CScript& script, SignatureData& sigdata) { return false; }\n+\n+    virtual uint256 GetID() const { return uint256(); }\n+\n+    /** Prepends the wallet name in logging output to ease debugging in multi-wallet use cases */\n+    template<typename... Params>\n+    void WalletLogPrintf(std::string fmt, Params... parameters) const {\n+        LogPrintf((\"%s \" + fmt).c_str(), GetDisplayName(), parameters...);\n+    };\n+\n+    /** Watch-only address added */\n+    boost::signals2::signal<void (bool fHaveWatchOnly)> NotifyWatchonlyChanged;\n+\n+    /** Keypool has new keys */\n+    boost::signals2::signal<void ()> NotifyCanGetAddressesChanged;\n+};\n+\n+class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProvider\n+{\n+private:\n+    //! if fUseCrypto is true, mapKeys must be empty\n+    //! if fUseCrypto is false, vMasterKey must be empty\n+    std::atomic<bool> fUseCrypto{false};\n+\n+    bool SetCrypted();\n+\n+    //! keeps track of whether Unlock has run a thorough check before\n+    bool fDecryptionThoroughlyChecked = false;\n+\n+    //! Master encryption key for the wallet. Keys are encrypted with this.\n+    //! Wallet is unlocked if this is not null.\n+    CKeyingMaterial vMasterKey GUARDED_BY(cs_KeyStore);",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": null,
      "original_position": 246,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "fb0058ed68a18053959001a0191f3fbcfec50526",
      "in_reply_to_id": 323884483,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I've added `WalletStorage` as you suggested. However I did not change `vMasterKey`, `fUseCrypto`, and `fDecryptionThorouglyChecked` to be references or pointers as allowing `ScriptPubKeyMan`s to modify these variables in `CWallet` itself may result in inconsistent states where one `ScriptPubKeyMan` has finished en/decrypting but another has not. Properly changing them to use references could be done in the future, but doing it now would cause the places that use them to differ even more and thus make review harder.",
      "created_at": "2019-09-13T21:08:56Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r324369235",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/324369235"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 244,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/324821792",
      "pull_request_review_id": 288817991,
      "id": 324821792,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNDgyMTc5Mg==",
      "diff_hunk": "@@ -0,0 +1,481 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+#define BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <wallet/crypter.h>\n+#include <wallet/ismine.h>\n+#include <wallet/walletdb.h>\n+#include <wallet/walletutil.h>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+enum class OutputType;\n+\n+class WalletStorage\n+{\n+public:\n+    virtual ~WalletStorage() = default;\n+    virtual const std::string GetDisplayName() const = 0;\n+    virtual std::shared_ptr<WalletDatabase> GetDatabase() = 0;\n+    virtual bool IsWalletFlagSet(uint64_t) const = 0;\n+    virtual void SetWalletFlag(uint64_t) = 0;\n+    virtual void UnsetWalletFlagWithDB(WalletBatch&, uint64_t) = 0;\n+    virtual bool CanSupportFeature(enum WalletFeature) const = 0;\n+    virtual void SetMinVersion(enum WalletFeature, WalletBatch* = nullptr, bool = false) = 0;\n+};\n+\n+//! Default for -keypool\n+static const unsigned int DEFAULT_KEYPOOL_SIZE = 1000;\n+\n+std::vector<CKeyID> GetAffectedKeys(const CScript& spk, const SigningProvider& provider);\n+\n+/** A key from a CWallet's keypool\n+ *\n+ * The wallet holds one (for pre HD-split wallets) or several keypools. These\n+ * are sets of keys that have not yet been used to provide addresses or receive\n+ * change.\n+ *\n+ * The Bitcoin Core wallet was originally a collection of unrelated private\n+ * keys with their associated addresses. If a non-HD wallet generated a\n+ * key/address, gave that address out and then restored a backup from before\n+ * that key's generation, then any funds sent to that address would be\n+ * lost definitively.\n+ *\n+ * The keypool was implemented to avoid this scenario (commit: 10384941). The\n+ * wallet would generate a set of keys (100 by default). When a new public key\n+ * was required, either to give out as an address or to use in a change output,\n+ * it would be drawn from the keypool. The keypool would then be topped up to\n+ * maintain 100 keys. This ensured that as long as the wallet hadn't used more\n+ * than 100 keys since the previous backup, all funds would be safe, since a\n+ * restored wallet would be able to scan for all owned addresses.\n+ *\n+ * A keypool also allowed encrypted wallets to give out addresses without\n+ * having to be decrypted to generate a new private key.\n+ *\n+ * With the introduction of HD wallets (commit: f1902510), the keypool\n+ * essentially became an address look-ahead pool. Restoring old backups can no\n+ * longer definitively lose funds as long as the addresses used were from the\n+ * wallet's HD seed (since all private keys can be rederived from the seed).\n+ * However, if many addresses were used since the backup, then the wallet may\n+ * not know how far ahead in the HD chain to look for its addresses. The\n+ * keypool is used to implement a 'gap limit'. The keypool maintains a set of\n+ * keys (by default 1000) ahead of the last used key and scans for the\n+ * addresses of those keys.  This avoids the risk of not seeing transactions\n+ * involving the wallet's addresses, or of re-using the same address.\n+ *\n+ * The HD-split wallet feature added a second keypool (commit: 02592f4c). There\n+ * is an external keypool (for addresses to hand out) and an internal keypool\n+ * (for change addresses).\n+ *\n+ * Keypool keys are stored in the wallet/keystore's keymap. The keypool data is\n+ * stored as sets of indexes in the wallet (setInternalKeyPool,\n+ * setExternalKeyPool and set_pre_split_keypool), and a map from the key to the\n+ * index (m_pool_key_to_index). The CKeyPool object is used to\n+ * serialize/deserialize the pool data to/from the database.\n+ */\n+class CKeyPool\n+{\n+public:\n+    //! The time at which the key was generated. Set in AddKeypoolPubKeyWithDB\n+    int64_t nTime;\n+    //! The public key\n+    CPubKey vchPubKey;\n+    //! Whether this keypool entry is in the internal keypool (for change outputs)\n+    bool fInternal;\n+    //! Whether this key was generated for a keypool before the wallet was upgraded to HD-split\n+    bool m_pre_split;\n+\n+    CKeyPool();\n+    CKeyPool(const CPubKey& vchPubKeyIn, bool internalIn);\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        int nVersion = s.GetVersion();\n+        if (!(s.GetType() & SER_GETHASH))\n+            READWRITE(nVersion);\n+        READWRITE(nTime);\n+        READWRITE(vchPubKey);\n+        if (ser_action.ForRead()) {\n+            try {\n+                READWRITE(fInternal);\n+            }\n+            catch (std::ios_base::failure&) {\n+                /* flag as external address if we can't read the internal boolean\n+                   (this will be the case for any wallet before the HD chain split version) */\n+                fInternal = false;\n+            }\n+            try {\n+                READWRITE(m_pre_split);\n+            }\n+            catch (std::ios_base::failure&) {\n+                /* flag as postsplit address if we can't read the m_pre_split boolean\n+                   (this will be the case for any wallet that upgrades to HD chain split)*/\n+                m_pre_split = false;\n+            }\n+        }\n+        else {\n+            READWRITE(fInternal);\n+            READWRITE(m_pre_split);\n+        }\n+    }\n+};\n+\n+/*\n+ * A class implementing ScriptPubKeyMan manages some (or all) scriptPubKeys used in a wallet.\n+ * It contains the scripts and keys related to the scriptPubKeys it manages.\n+ * A ScriptPubKeyMan will be able to give out scriptPubKeys to be used, as well as marking\n+ * when a scriptPubKey has been used. It also handles when and how to store a scriptPubKey\n+ * and it's related scripts and keys, including encryption.\n+ */\n+class ScriptPubKeyMan\n+{\n+private:\n+    WalletStorage& storage;\n+\n+protected:\n+    std::shared_ptr<WalletDatabase> m_database;\n+\n+public:\n+    ScriptPubKeyMan(WalletStorage& storage) : storage(storage), m_database(storage.GetDatabase()) {}\n+\n+    const std::string GetDisplayName() const { return storage.GetDisplayName(); }\n+    bool IsWalletFlagSet(uint64_t flag) const { return storage.IsWalletFlagSet(flag); }\n+    void SetWalletFlag(uint64_t flag) { return storage.SetWalletFlag(flag); }\n+    void UnsetWalletFlagWithDB(WalletBatch& batch, uint64_t flag) { return storage.UnsetWalletFlagWithDB(batch, flag); }\n+    bool CanSupportFeature(enum WalletFeature wf) const { return storage.CanSupportFeature(wf); }\n+    void SetMinVersion(enum WalletFeature wf) { return storage.SetMinVersion(wf); }\n+\n+    virtual ~ScriptPubKeyMan() {};\n+    virtual bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) { return false; }\n+    virtual isminetype IsMine(const CScript& script) const { return ISMINE_NO; }\n+\n+    virtual bool IsCrypted() const { return false; }\n+    virtual bool IsLocked() const { return false; }\n+    virtual bool Lock() { return false; }\n+\n+    virtual bool Unlock(const CKeyingMaterial& vMasterKeyIn, bool accept_no_keys = false) { return false; }\n+    virtual bool Encrypt(CKeyingMaterial& vMasterKeyIn, WalletBatch* batch) { return false; }\n+\n+    virtual bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool) { return false; }\n+    virtual void KeepDestination(int64_t index) {}\n+    virtual void ReturnDestination(int64_t index, bool internal, const CTxDestination& addr) {}\n+\n+    virtual bool TopUp(unsigned int size = 0) { return false; }\n+\n+    //! Mark unused addresses as being used\n+    virtual void MarkUnusedAddresses(const CScript& script) {}\n+\n+    //! Upgrade stored CKeyMetadata objects to store key origin info as KeyOriginInfo\n+    virtual void UpgradeKeyMetadata() {}\n+\n+    /** Sets up the key generation stuff, i.e. generates new HD seeds and sets them as active.\n+      * Returns false if already setup or setup fails, true if setup is successful\n+      * Set force=true to make it re-setup if already setup, used for upgrades\n+      */\n+    virtual bool SetupGeneration(bool force = false) { return false; }\n+\n+    /* Returns true if HD is enabled */\n+    virtual bool IsHDEnabled() const { return false; }\n+\n+    /* Returns true if the wallet can give out new addresses. This means it has keys in the keypool or can generate new keys */\n+    virtual bool CanGetAddresses(bool internal = false) { return false; }\n+\n+    /** Upgrades the wallet to the specified version */\n+    virtual bool Upgrade(int prev_version, int new_version, std::string& error) { return false; }\n+\n+    virtual bool HavePrivateKeys() const { return false; }\n+\n+    //! The action to do when the DB needs rewrite\n+    virtual void RewriteDB() {}\n+\n+    virtual int64_t GetOldestKeyPoolTime() { return GetTime(); }\n+\n+    virtual size_t KeypoolCountExternalKeys() { return 0; }\n+    virtual unsigned int GetKeypoolSize() const { return 0; }\n+\n+    virtual int64_t GetTimeFirstKey() const { return 0; }\n+\n+    virtual const CKeyMetadata* GetMetadata(uint160 id) const { return nullptr; }\n+\n+    virtual std::unique_ptr<SigningProvider> GetSigningProvider(const CScript& script) const { return nullptr; }\n+\n+    /** Whether this ScriptPubKeyMan can provide a SigningProvider (via GetSigningProvider) that, combined with\n+      * sigdata, can produce a valid signature.\n+      */\n+    virtual bool CanProvide(const CScript& script, SignatureData& sigdata) { return false; }\n+\n+    virtual uint256 GetID() const { return uint256(); }\n+\n+    /** Prepends the wallet name in logging output to ease debugging in multi-wallet use cases */\n+    template<typename... Params>\n+    void WalletLogPrintf(std::string fmt, Params... parameters) const {\n+        LogPrintf((\"%s \" + fmt).c_str(), GetDisplayName(), parameters...);\n+    };\n+\n+    /** Watch-only address added */\n+    boost::signals2::signal<void (bool fHaveWatchOnly)> NotifyWatchonlyChanged;\n+\n+    /** Keypool has new keys */\n+    boost::signals2::signal<void ()> NotifyCanGetAddressesChanged;\n+};\n+\n+class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProvider\n+{\n+private:\n+    //! if fUseCrypto is true, mapKeys must be empty\n+    //! if fUseCrypto is false, vMasterKey must be empty\n+    std::atomic<bool> fUseCrypto{false};\n+\n+    bool SetCrypted();\n+\n+    //! keeps track of whether Unlock has run a thorough check before\n+    bool fDecryptionThoroughlyChecked = false;\n+\n+    //! Master encryption key for the wallet. Keys are encrypted with this.\n+    //! Wallet is unlocked if this is not null.\n+    CKeyingMaterial vMasterKey GUARDED_BY(cs_KeyStore);\n+    using WatchOnlySet = std::set<CScript>;\n+    using WatchKeyMap = std::map<CKeyID, CPubKey>;\n+\n+    WalletBatch *encrypted_batch GUARDED_BY(cs_KeyStore) = nullptr;\n+\n+    using CryptedKeyMap = std::map<CKeyID, std::pair<CPubKey, std::vector<unsigned char>>>;\n+\n+    CryptedKeyMap mapCryptedKeys GUARDED_BY(cs_KeyStore);\n+    WatchOnlySet setWatchOnly GUARDED_BY(cs_KeyStore);\n+    WatchKeyMap mapWatchKeys GUARDED_BY(cs_KeyStore);\n+\n+    int64_t nTimeFirstKey GUARDED_BY(cs_KeyStore) = 0;\n+\n+    bool AddKeyPubKeyInner(const CKey& key, const CPubKey &pubkey);\n+    bool AddCryptedKeyInner(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n+\n+    /**\n+     * Private version of AddWatchOnly method which does not accept a\n+     * timestamp, and which will reset the wallet's nTimeFirstKey value to 1 if\n+     * the watch key did not previously have a timestamp associated with it.\n+     * Because this is an inherited virtual method, it is accessible despite\n+     * being marked private, but it is marked private anyway to encourage use\n+     * of the other AddWatchOnly which accepts a timestamp and sets\n+     * nTimeFirstKey more intelligently for more efficient rescans.\n+     */\n+    bool AddWatchOnly(const CScript& dest) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+    bool AddWatchOnlyWithDB(WalletBatch &batch, const CScript& dest) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+    bool AddWatchOnlyInMem(const CScript &dest);\n+    //! Adds a watch-only address to the store, and saves it to disk.\n+    bool AddWatchOnlyWithDB(WalletBatch &batch, const CScript& dest, int64_t create_time) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+\n+    //! Adds a key to the store, and saves it to disk.\n+    bool AddKeyPubKeyWithDB(WalletBatch &batch,const CKey& key, const CPubKey &pubkey) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+\n+    void AddKeypoolPubkeyWithDB(const CPubKey& pubkey, const bool internal, WalletBatch& batch);\n+\n+    //! Adds a script to the store and saves it to disk\n+    bool AddCScriptWithDB(WalletBatch& batch, const CScript& script);\n+\n+    /** Add a KeyOriginInfo to the wallet */\n+    bool AddKeyOriginWithDB(WalletBatch& batch, const CPubKey& pubkey, const KeyOriginInfo& info);\n+\n+    /* the HD chain data model (external chain counters) */\n+    CHDChain hdChain;\n+\n+    /* HD derive new child key (on internal or external chain) */\n+    void DeriveNewChildKey(WalletBatch& batch, CKeyMetadata& metadata, CKey& secret, bool internal = false) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+\n+    std::set<int64_t> setInternalKeyPool GUARDED_BY(cs_KeyStore);\n+    std::set<int64_t> setExternalKeyPool GUARDED_BY(cs_KeyStore);\n+    std::set<int64_t> set_pre_split_keypool GUARDED_BY(cs_KeyStore);\n+    int64_t m_max_keypool_index GUARDED_BY(cs_KeyStore) = 0;\n+    std::map<CKeyID, int64_t> m_pool_key_to_index;\n+    // Tracks keypool indexes to CKeyIDs of keys that have been taken out of the keypool but may be returned to it\n+    std::map<int64_t, CKeyID> m_reserved_key_to_index;\n+\n+    //! Fetches a key from the keypool\n+    bool GetKeyFromPool(CPubKey &key, bool internal = false);\n+\n+    /**\n+     * Reserves a key from the keypool and sets nIndex to its index\n+     *\n+     * @param[out] nIndex the index of the key in keypool\n+     * @param[out] keypool the keypool the key was drawn from, which could be the\n+     *     the pre-split pool if present, or the internal or external pool\n+     * @param fRequestedInternal true if the caller would like the key drawn\n+     *     from the internal keypool, false if external is preferred\n+     *\n+     * @return true if succeeded, false if failed due to empty keypool\n+     * @throws std::runtime_error if keypool read failed, key was invalid,\n+     *     was not found in the wallet, or was misclassified in the internal\n+     *     or external keypool\n+     */\n+    bool ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool fRequestedInternal);\n+\n+    void KeepKey(int64_t nIndex);\n+    void ReturnKey(int64_t nIndex, bool fInternal, const CKeyID& pubkey_id);\n+\n+public:\n+    using ScriptPubKeyMan::ScriptPubKeyMan;\n+\n+    bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) override EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+    isminetype IsMine(const CScript& script) const override;\n+\n+    bool IsCrypted() const override;\n+    bool IsLocked() const override;\n+    bool Lock() override;\n+\n+    bool Unlock(const CKeyingMaterial& vMasterKeyIn, bool accept_no_keys = false) override;\n+    bool Encrypt(CKeyingMaterial& vMasterKeyIn, WalletBatch* batch) override;\n+\n+    bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool) override;\n+    void KeepDestination(int64_t index) override;\n+    void ReturnDestination(int64_t index, bool internal, const CTxDestination& addr) override;\n+\n+    bool TopUp(unsigned int size = 0) override;\n+\n+    void MarkUnusedAddresses(const CScript& script) override;\n+\n+    void UpgradeKeyMetadata() override;\n+\n+    bool IsHDEnabled() const override;\n+\n+    bool SetupGeneration(bool force = false) override;\n+\n+    bool Upgrade(int prev_version, int new_version, std::string& error) override;\n+\n+    bool HavePrivateKeys() const override;\n+\n+    void RewriteDB() override;\n+\n+    int64_t GetOldestKeyPoolTime() override;\n+    size_t KeypoolCountExternalKeys() override;\n+    unsigned int GetKeypoolSize() const override;\n+\n+    int64_t GetTimeFirstKey() const override;\n+\n+    const CKeyMetadata* GetMetadata(uint160 id) const override;\n+\n+    bool CanGetAddresses(bool internal = false) override;\n+\n+    std::unique_ptr<SigningProvider> GetSigningProvider(const CScript& script) const override;\n+\n+    bool CanProvide(const CScript& script, SignatureData& sigdata) override;\n+\n+    uint256 GetID() const override;\n+\n+    // Map from Key ID to key metadata.\n+    std::map<CKeyID, CKeyMetadata> mapKeyMetadata GUARDED_BY(cs_KeyStore);\n+\n+    // Map from Script ID to key metadata (for watch-only keys).\n+    std::map<CScriptID, CKeyMetadata> m_script_metadata GUARDED_BY(cs_KeyStore);\n+\n+    //! Adds a key to the store, and saves it to disk.\n+    bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey) override EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+    //! Adds a key to the store, without saving it to disk (used by LoadWallet)\n+    bool LoadKey(const CKey& key, const CPubKey &pubkey);\n+    //! Adds an encrypted key to the store, and saves it to disk.\n+    bool AddCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n+    //! Adds an encrypted key to the store, without saving it to disk (used by LoadWallet)\n+    bool LoadCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n+    void UpdateTimeFirstKey(int64_t nCreateTime) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+    //! Adds a CScript to the store\n+    bool LoadCScript(const CScript& redeemScript);\n+    //! Load metadata (used by LoadWallet)\n+    void LoadKeyMetadata(const CKeyID& keyID, const CKeyMetadata &metadata);\n+    void LoadScriptMetadata(const CScriptID& script_id, const CKeyMetadata &metadata);\n+    //! Generate a new key\n+    CPubKey GenerateNewKey(WalletBatch& batch, bool internal = false) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+\n+    /* Set the HD chain model (chain child index counters) */\n+    void SetHDChain(const CHDChain& chain, bool memonly);\n+    const CHDChain& GetHDChain() const { return hdChain; }\n+\n+    //! Adds a watch-only address to the store, without saving it to disk (used by LoadWallet)\n+    bool LoadWatchOnly(const CScript &dest);\n+    //! Returns whether the watch-only script is in the wallet\n+    bool HaveWatchOnly(const CScript &dest) const;\n+    //! Returns whether there are any watch-only things in the wallet\n+    bool HaveWatchOnly() const;\n+    //! Remove a watch only script from the keystore\n+    bool RemoveWatchOnly(const CScript &dest);\n+    bool AddWatchOnly(const CScript& dest, int64_t nCreateTime) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+\n+    //! Fetches a pubkey from mapWatchKeys if it exists there\n+    bool GetWatchPubKey(const CKeyID &address, CPubKey &pubkey_out) const;\n+\n+    /* SigningProvider overrides */\n+    bool HaveKey(const CKeyID &address) const override;\n+    bool GetKey(const CKeyID &address, CKey& keyOut) const override;\n+    bool GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const override;\n+    bool AddCScript(const CScript& redeemScript) override;\n+    bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const override;\n+\n+    //! Load a keypool entry\n+    void LoadKeyPool(int64_t nIndex, const CKeyPool &keypool);\n+    bool TopUpKeyPool(unsigned int kpSize = 0);\n+    bool NewKeyPool();\n+    void MarkPreSplitKeys() EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+\n+    bool ImportScripts(const std::set<CScript> scripts, int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+    bool ImportPrivKeys(const std::map<CKeyID, CKey>& privkey_map, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+    bool ImportPubKeys(const std::vector<CKeyID>& ordered_pubkeys, const std::map<CKeyID, CPubKey>& pubkey_map, const std::map<CKeyID, std::pair<CPubKey, KeyOriginInfo>>& key_origins, const bool add_keypool, const bool internal, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+    bool ImportScriptPubKeys(const std::set<CScript>& script_pub_keys, const bool have_solving_data, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+\n+    /* Returns true if the wallet can generate new keys */\n+    bool CanGenerateKeys();\n+\n+    /* Generates a new HD seed (will not be activated) */\n+    CPubKey GenerateNewSeed();\n+\n+    /* Derives a new HD seed (will not be activated) */\n+    CPubKey DeriveNewSeed(const CKey& key);\n+\n+    /* Set the current HD seed (will reset the chain child index counters)\n+       Sets the seed's version based on the current wallet version (so the\n+       caller must ensure the current wallet version is correct before calling\n+       this function). */\n+    void SetHDSeed(const CPubKey& key);\n+\n+    /**\n+     * Explicitly make the wallet learn the related scripts for outputs to the\n+     * given key. This is purely to make the wallet file compatible with older\n+     * software, as FillableSigningProvider automatically does this implicitly for all\n+     * keys now.\n+     */\n+    void LearnRelatedScripts(const CPubKey& key, OutputType);\n+\n+    /**\n+     * Same as LearnRelatedScripts, but when the OutputType is not known (and could\n+     * be anything).\n+     */\n+    void LearnAllRelatedScripts(const CPubKey& key);\n+\n+    /**\n+     * Marks all keys in the keypool up to and including reserve_key as used.\n+     */\n+    void MarkReserveKeysAsUsed(int64_t keypool_id) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+    const std::map<CKeyID, int64_t>& GetAllReserveKeys() const { return m_pool_key_to_index; }\n+};\n+\n+/** Wraps a LegacyScriptPubKeyMan so that it can be returned in a new unique_ptr */",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": 460,
      "original_position": 465,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "5f641a5c8fc446a6df61aeab270583efcafa0f7e",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "What's the reason for using `unique_ptr` and `shared_ptr` so many places to begin with? It doesn't seem like we'd ever want `KeyMan` instances to outlive their `CWallet` instance, or to be shared between multiple `CWallet` instances. So wouldn't it be simplest to store `KeyMan` instances in `CWallet` `unique_ptr<>` or `set<unique_ptr<>>` member variables so they get cleaned up when the wallet does, but otherwise just use plain `&` references or `*` pointers everywhere else (address types maps, accessors, and higher level code)?",
      "created_at": "2019-09-16T18:29:24Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r324821792",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/324821792"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 460,
      "original_line": 460,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/324876493",
      "pull_request_review_id": 288888951,
      "id": 324876493,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNDg3NjQ5Mw==",
      "diff_hunk": "@@ -0,0 +1,481 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+#define BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <wallet/crypter.h>\n+#include <wallet/ismine.h>\n+#include <wallet/walletdb.h>\n+#include <wallet/walletutil.h>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+enum class OutputType;\n+\n+class WalletStorage\n+{\n+public:\n+    virtual ~WalletStorage() = default;\n+    virtual const std::string GetDisplayName() const = 0;\n+    virtual std::shared_ptr<WalletDatabase> GetDatabase() = 0;\n+    virtual bool IsWalletFlagSet(uint64_t) const = 0;\n+    virtual void SetWalletFlag(uint64_t) = 0;\n+    virtual void UnsetWalletFlagWithDB(WalletBatch&, uint64_t) = 0;\n+    virtual bool CanSupportFeature(enum WalletFeature) const = 0;\n+    virtual void SetMinVersion(enum WalletFeature, WalletBatch* = nullptr, bool = false) = 0;\n+};\n+\n+//! Default for -keypool\n+static const unsigned int DEFAULT_KEYPOOL_SIZE = 1000;\n+\n+std::vector<CKeyID> GetAffectedKeys(const CScript& spk, const SigningProvider& provider);\n+\n+/** A key from a CWallet's keypool\n+ *\n+ * The wallet holds one (for pre HD-split wallets) or several keypools. These\n+ * are sets of keys that have not yet been used to provide addresses or receive\n+ * change.\n+ *\n+ * The Bitcoin Core wallet was originally a collection of unrelated private\n+ * keys with their associated addresses. If a non-HD wallet generated a\n+ * key/address, gave that address out and then restored a backup from before\n+ * that key's generation, then any funds sent to that address would be\n+ * lost definitively.\n+ *\n+ * The keypool was implemented to avoid this scenario (commit: 10384941). The\n+ * wallet would generate a set of keys (100 by default). When a new public key\n+ * was required, either to give out as an address or to use in a change output,\n+ * it would be drawn from the keypool. The keypool would then be topped up to\n+ * maintain 100 keys. This ensured that as long as the wallet hadn't used more\n+ * than 100 keys since the previous backup, all funds would be safe, since a\n+ * restored wallet would be able to scan for all owned addresses.\n+ *\n+ * A keypool also allowed encrypted wallets to give out addresses without\n+ * having to be decrypted to generate a new private key.\n+ *\n+ * With the introduction of HD wallets (commit: f1902510), the keypool\n+ * essentially became an address look-ahead pool. Restoring old backups can no\n+ * longer definitively lose funds as long as the addresses used were from the\n+ * wallet's HD seed (since all private keys can be rederived from the seed).\n+ * However, if many addresses were used since the backup, then the wallet may\n+ * not know how far ahead in the HD chain to look for its addresses. The\n+ * keypool is used to implement a 'gap limit'. The keypool maintains a set of\n+ * keys (by default 1000) ahead of the last used key and scans for the\n+ * addresses of those keys.  This avoids the risk of not seeing transactions\n+ * involving the wallet's addresses, or of re-using the same address.\n+ *\n+ * The HD-split wallet feature added a second keypool (commit: 02592f4c). There\n+ * is an external keypool (for addresses to hand out) and an internal keypool\n+ * (for change addresses).\n+ *\n+ * Keypool keys are stored in the wallet/keystore's keymap. The keypool data is\n+ * stored as sets of indexes in the wallet (setInternalKeyPool,\n+ * setExternalKeyPool and set_pre_split_keypool), and a map from the key to the\n+ * index (m_pool_key_to_index). The CKeyPool object is used to\n+ * serialize/deserialize the pool data to/from the database.\n+ */\n+class CKeyPool\n+{\n+public:\n+    //! The time at which the key was generated. Set in AddKeypoolPubKeyWithDB\n+    int64_t nTime;\n+    //! The public key\n+    CPubKey vchPubKey;\n+    //! Whether this keypool entry is in the internal keypool (for change outputs)\n+    bool fInternal;\n+    //! Whether this key was generated for a keypool before the wallet was upgraded to HD-split\n+    bool m_pre_split;\n+\n+    CKeyPool();\n+    CKeyPool(const CPubKey& vchPubKeyIn, bool internalIn);\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        int nVersion = s.GetVersion();\n+        if (!(s.GetType() & SER_GETHASH))\n+            READWRITE(nVersion);\n+        READWRITE(nTime);\n+        READWRITE(vchPubKey);\n+        if (ser_action.ForRead()) {\n+            try {\n+                READWRITE(fInternal);\n+            }\n+            catch (std::ios_base::failure&) {\n+                /* flag as external address if we can't read the internal boolean\n+                   (this will be the case for any wallet before the HD chain split version) */\n+                fInternal = false;\n+            }\n+            try {\n+                READWRITE(m_pre_split);\n+            }\n+            catch (std::ios_base::failure&) {\n+                /* flag as postsplit address if we can't read the m_pre_split boolean\n+                   (this will be the case for any wallet that upgrades to HD chain split)*/\n+                m_pre_split = false;\n+            }\n+        }\n+        else {\n+            READWRITE(fInternal);\n+            READWRITE(m_pre_split);\n+        }\n+    }\n+};\n+\n+/*\n+ * A class implementing ScriptPubKeyMan manages some (or all) scriptPubKeys used in a wallet.\n+ * It contains the scripts and keys related to the scriptPubKeys it manages.\n+ * A ScriptPubKeyMan will be able to give out scriptPubKeys to be used, as well as marking\n+ * when a scriptPubKey has been used. It also handles when and how to store a scriptPubKey\n+ * and it's related scripts and keys, including encryption.\n+ */\n+class ScriptPubKeyMan\n+{\n+private:\n+    WalletStorage& storage;\n+\n+protected:\n+    std::shared_ptr<WalletDatabase> m_database;\n+\n+public:\n+    ScriptPubKeyMan(WalletStorage& storage) : storage(storage), m_database(storage.GetDatabase()) {}\n+\n+    const std::string GetDisplayName() const { return storage.GetDisplayName(); }\n+    bool IsWalletFlagSet(uint64_t flag) const { return storage.IsWalletFlagSet(flag); }\n+    void SetWalletFlag(uint64_t flag) { return storage.SetWalletFlag(flag); }\n+    void UnsetWalletFlagWithDB(WalletBatch& batch, uint64_t flag) { return storage.UnsetWalletFlagWithDB(batch, flag); }\n+    bool CanSupportFeature(enum WalletFeature wf) const { return storage.CanSupportFeature(wf); }\n+    void SetMinVersion(enum WalletFeature wf) { return storage.SetMinVersion(wf); }\n+\n+    virtual ~ScriptPubKeyMan() {};\n+    virtual bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) { return false; }\n+    virtual isminetype IsMine(const CScript& script) const { return ISMINE_NO; }\n+\n+    virtual bool IsCrypted() const { return false; }\n+    virtual bool IsLocked() const { return false; }\n+    virtual bool Lock() { return false; }\n+\n+    virtual bool Unlock(const CKeyingMaterial& vMasterKeyIn, bool accept_no_keys = false) { return false; }\n+    virtual bool Encrypt(CKeyingMaterial& vMasterKeyIn, WalletBatch* batch) { return false; }\n+\n+    virtual bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool) { return false; }\n+    virtual void KeepDestination(int64_t index) {}\n+    virtual void ReturnDestination(int64_t index, bool internal, const CTxDestination& addr) {}\n+\n+    virtual bool TopUp(unsigned int size = 0) { return false; }\n+\n+    //! Mark unused addresses as being used\n+    virtual void MarkUnusedAddresses(const CScript& script) {}\n+\n+    //! Upgrade stored CKeyMetadata objects to store key origin info as KeyOriginInfo\n+    virtual void UpgradeKeyMetadata() {}\n+\n+    /** Sets up the key generation stuff, i.e. generates new HD seeds and sets them as active.\n+      * Returns false if already setup or setup fails, true if setup is successful\n+      * Set force=true to make it re-setup if already setup, used for upgrades\n+      */\n+    virtual bool SetupGeneration(bool force = false) { return false; }\n+\n+    /* Returns true if HD is enabled */\n+    virtual bool IsHDEnabled() const { return false; }\n+\n+    /* Returns true if the wallet can give out new addresses. This means it has keys in the keypool or can generate new keys */\n+    virtual bool CanGetAddresses(bool internal = false) { return false; }\n+\n+    /** Upgrades the wallet to the specified version */\n+    virtual bool Upgrade(int prev_version, int new_version, std::string& error) { return false; }\n+\n+    virtual bool HavePrivateKeys() const { return false; }\n+\n+    //! The action to do when the DB needs rewrite\n+    virtual void RewriteDB() {}\n+\n+    virtual int64_t GetOldestKeyPoolTime() { return GetTime(); }\n+\n+    virtual size_t KeypoolCountExternalKeys() { return 0; }\n+    virtual unsigned int GetKeypoolSize() const { return 0; }\n+\n+    virtual int64_t GetTimeFirstKey() const { return 0; }\n+\n+    virtual const CKeyMetadata* GetMetadata(uint160 id) const { return nullptr; }\n+\n+    virtual std::unique_ptr<SigningProvider> GetSigningProvider(const CScript& script) const { return nullptr; }\n+\n+    /** Whether this ScriptPubKeyMan can provide a SigningProvider (via GetSigningProvider) that, combined with\n+      * sigdata, can produce a valid signature.\n+      */\n+    virtual bool CanProvide(const CScript& script, SignatureData& sigdata) { return false; }\n+\n+    virtual uint256 GetID() const { return uint256(); }\n+\n+    /** Prepends the wallet name in logging output to ease debugging in multi-wallet use cases */\n+    template<typename... Params>\n+    void WalletLogPrintf(std::string fmt, Params... parameters) const {\n+        LogPrintf((\"%s \" + fmt).c_str(), GetDisplayName(), parameters...);\n+    };\n+\n+    /** Watch-only address added */\n+    boost::signals2::signal<void (bool fHaveWatchOnly)> NotifyWatchonlyChanged;\n+\n+    /** Keypool has new keys */\n+    boost::signals2::signal<void ()> NotifyCanGetAddressesChanged;\n+};\n+\n+class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProvider\n+{\n+private:\n+    //! if fUseCrypto is true, mapKeys must be empty\n+    //! if fUseCrypto is false, vMasterKey must be empty\n+    std::atomic<bool> fUseCrypto{false};\n+\n+    bool SetCrypted();\n+\n+    //! keeps track of whether Unlock has run a thorough check before\n+    bool fDecryptionThoroughlyChecked = false;\n+\n+    //! Master encryption key for the wallet. Keys are encrypted with this.\n+    //! Wallet is unlocked if this is not null.\n+    CKeyingMaterial vMasterKey GUARDED_BY(cs_KeyStore);\n+    using WatchOnlySet = std::set<CScript>;\n+    using WatchKeyMap = std::map<CKeyID, CPubKey>;\n+\n+    WalletBatch *encrypted_batch GUARDED_BY(cs_KeyStore) = nullptr;\n+\n+    using CryptedKeyMap = std::map<CKeyID, std::pair<CPubKey, std::vector<unsigned char>>>;\n+\n+    CryptedKeyMap mapCryptedKeys GUARDED_BY(cs_KeyStore);\n+    WatchOnlySet setWatchOnly GUARDED_BY(cs_KeyStore);\n+    WatchKeyMap mapWatchKeys GUARDED_BY(cs_KeyStore);\n+\n+    int64_t nTimeFirstKey GUARDED_BY(cs_KeyStore) = 0;\n+\n+    bool AddKeyPubKeyInner(const CKey& key, const CPubKey &pubkey);\n+    bool AddCryptedKeyInner(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n+\n+    /**\n+     * Private version of AddWatchOnly method which does not accept a\n+     * timestamp, and which will reset the wallet's nTimeFirstKey value to 1 if\n+     * the watch key did not previously have a timestamp associated with it.\n+     * Because this is an inherited virtual method, it is accessible despite\n+     * being marked private, but it is marked private anyway to encourage use\n+     * of the other AddWatchOnly which accepts a timestamp and sets\n+     * nTimeFirstKey more intelligently for more efficient rescans.\n+     */\n+    bool AddWatchOnly(const CScript& dest) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+    bool AddWatchOnlyWithDB(WalletBatch &batch, const CScript& dest) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+    bool AddWatchOnlyInMem(const CScript &dest);\n+    //! Adds a watch-only address to the store, and saves it to disk.\n+    bool AddWatchOnlyWithDB(WalletBatch &batch, const CScript& dest, int64_t create_time) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+\n+    //! Adds a key to the store, and saves it to disk.\n+    bool AddKeyPubKeyWithDB(WalletBatch &batch,const CKey& key, const CPubKey &pubkey) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+\n+    void AddKeypoolPubkeyWithDB(const CPubKey& pubkey, const bool internal, WalletBatch& batch);\n+\n+    //! Adds a script to the store and saves it to disk\n+    bool AddCScriptWithDB(WalletBatch& batch, const CScript& script);\n+\n+    /** Add a KeyOriginInfo to the wallet */\n+    bool AddKeyOriginWithDB(WalletBatch& batch, const CPubKey& pubkey, const KeyOriginInfo& info);\n+\n+    /* the HD chain data model (external chain counters) */\n+    CHDChain hdChain;\n+\n+    /* HD derive new child key (on internal or external chain) */\n+    void DeriveNewChildKey(WalletBatch& batch, CKeyMetadata& metadata, CKey& secret, bool internal = false) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+\n+    std::set<int64_t> setInternalKeyPool GUARDED_BY(cs_KeyStore);\n+    std::set<int64_t> setExternalKeyPool GUARDED_BY(cs_KeyStore);\n+    std::set<int64_t> set_pre_split_keypool GUARDED_BY(cs_KeyStore);\n+    int64_t m_max_keypool_index GUARDED_BY(cs_KeyStore) = 0;\n+    std::map<CKeyID, int64_t> m_pool_key_to_index;\n+    // Tracks keypool indexes to CKeyIDs of keys that have been taken out of the keypool but may be returned to it\n+    std::map<int64_t, CKeyID> m_reserved_key_to_index;\n+\n+    //! Fetches a key from the keypool\n+    bool GetKeyFromPool(CPubKey &key, bool internal = false);\n+\n+    /**\n+     * Reserves a key from the keypool and sets nIndex to its index\n+     *\n+     * @param[out] nIndex the index of the key in keypool\n+     * @param[out] keypool the keypool the key was drawn from, which could be the\n+     *     the pre-split pool if present, or the internal or external pool\n+     * @param fRequestedInternal true if the caller would like the key drawn\n+     *     from the internal keypool, false if external is preferred\n+     *\n+     * @return true if succeeded, false if failed due to empty keypool\n+     * @throws std::runtime_error if keypool read failed, key was invalid,\n+     *     was not found in the wallet, or was misclassified in the internal\n+     *     or external keypool\n+     */\n+    bool ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool fRequestedInternal);\n+\n+    void KeepKey(int64_t nIndex);\n+    void ReturnKey(int64_t nIndex, bool fInternal, const CKeyID& pubkey_id);\n+\n+public:\n+    using ScriptPubKeyMan::ScriptPubKeyMan;\n+\n+    bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) override EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+    isminetype IsMine(const CScript& script) const override;\n+\n+    bool IsCrypted() const override;\n+    bool IsLocked() const override;\n+    bool Lock() override;\n+\n+    bool Unlock(const CKeyingMaterial& vMasterKeyIn, bool accept_no_keys = false) override;\n+    bool Encrypt(CKeyingMaterial& vMasterKeyIn, WalletBatch* batch) override;\n+\n+    bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool) override;\n+    void KeepDestination(int64_t index) override;\n+    void ReturnDestination(int64_t index, bool internal, const CTxDestination& addr) override;\n+\n+    bool TopUp(unsigned int size = 0) override;\n+\n+    void MarkUnusedAddresses(const CScript& script) override;\n+\n+    void UpgradeKeyMetadata() override;\n+\n+    bool IsHDEnabled() const override;\n+\n+    bool SetupGeneration(bool force = false) override;\n+\n+    bool Upgrade(int prev_version, int new_version, std::string& error) override;\n+\n+    bool HavePrivateKeys() const override;\n+\n+    void RewriteDB() override;\n+\n+    int64_t GetOldestKeyPoolTime() override;\n+    size_t KeypoolCountExternalKeys() override;\n+    unsigned int GetKeypoolSize() const override;\n+\n+    int64_t GetTimeFirstKey() const override;\n+\n+    const CKeyMetadata* GetMetadata(uint160 id) const override;\n+\n+    bool CanGetAddresses(bool internal = false) override;\n+\n+    std::unique_ptr<SigningProvider> GetSigningProvider(const CScript& script) const override;\n+\n+    bool CanProvide(const CScript& script, SignatureData& sigdata) override;\n+\n+    uint256 GetID() const override;\n+\n+    // Map from Key ID to key metadata.\n+    std::map<CKeyID, CKeyMetadata> mapKeyMetadata GUARDED_BY(cs_KeyStore);\n+\n+    // Map from Script ID to key metadata (for watch-only keys).\n+    std::map<CScriptID, CKeyMetadata> m_script_metadata GUARDED_BY(cs_KeyStore);\n+\n+    //! Adds a key to the store, and saves it to disk.\n+    bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey) override EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+    //! Adds a key to the store, without saving it to disk (used by LoadWallet)\n+    bool LoadKey(const CKey& key, const CPubKey &pubkey);\n+    //! Adds an encrypted key to the store, and saves it to disk.\n+    bool AddCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n+    //! Adds an encrypted key to the store, without saving it to disk (used by LoadWallet)\n+    bool LoadCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n+    void UpdateTimeFirstKey(int64_t nCreateTime) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+    //! Adds a CScript to the store\n+    bool LoadCScript(const CScript& redeemScript);\n+    //! Load metadata (used by LoadWallet)\n+    void LoadKeyMetadata(const CKeyID& keyID, const CKeyMetadata &metadata);\n+    void LoadScriptMetadata(const CScriptID& script_id, const CKeyMetadata &metadata);\n+    //! Generate a new key\n+    CPubKey GenerateNewKey(WalletBatch& batch, bool internal = false) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+\n+    /* Set the HD chain model (chain child index counters) */\n+    void SetHDChain(const CHDChain& chain, bool memonly);\n+    const CHDChain& GetHDChain() const { return hdChain; }\n+\n+    //! Adds a watch-only address to the store, without saving it to disk (used by LoadWallet)\n+    bool LoadWatchOnly(const CScript &dest);\n+    //! Returns whether the watch-only script is in the wallet\n+    bool HaveWatchOnly(const CScript &dest) const;\n+    //! Returns whether there are any watch-only things in the wallet\n+    bool HaveWatchOnly() const;\n+    //! Remove a watch only script from the keystore\n+    bool RemoveWatchOnly(const CScript &dest);\n+    bool AddWatchOnly(const CScript& dest, int64_t nCreateTime) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+\n+    //! Fetches a pubkey from mapWatchKeys if it exists there\n+    bool GetWatchPubKey(const CKeyID &address, CPubKey &pubkey_out) const;\n+\n+    /* SigningProvider overrides */\n+    bool HaveKey(const CKeyID &address) const override;\n+    bool GetKey(const CKeyID &address, CKey& keyOut) const override;\n+    bool GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const override;\n+    bool AddCScript(const CScript& redeemScript) override;\n+    bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const override;\n+\n+    //! Load a keypool entry\n+    void LoadKeyPool(int64_t nIndex, const CKeyPool &keypool);\n+    bool TopUpKeyPool(unsigned int kpSize = 0);\n+    bool NewKeyPool();\n+    void MarkPreSplitKeys() EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+\n+    bool ImportScripts(const std::set<CScript> scripts, int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+    bool ImportPrivKeys(const std::map<CKeyID, CKey>& privkey_map, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+    bool ImportPubKeys(const std::vector<CKeyID>& ordered_pubkeys, const std::map<CKeyID, CPubKey>& pubkey_map, const std::map<CKeyID, std::pair<CPubKey, KeyOriginInfo>>& key_origins, const bool add_keypool, const bool internal, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+    bool ImportScriptPubKeys(const std::set<CScript>& script_pub_keys, const bool have_solving_data, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+\n+    /* Returns true if the wallet can generate new keys */\n+    bool CanGenerateKeys();\n+\n+    /* Generates a new HD seed (will not be activated) */\n+    CPubKey GenerateNewSeed();\n+\n+    /* Derives a new HD seed (will not be activated) */\n+    CPubKey DeriveNewSeed(const CKey& key);\n+\n+    /* Set the current HD seed (will reset the chain child index counters)\n+       Sets the seed's version based on the current wallet version (so the\n+       caller must ensure the current wallet version is correct before calling\n+       this function). */\n+    void SetHDSeed(const CPubKey& key);\n+\n+    /**\n+     * Explicitly make the wallet learn the related scripts for outputs to the\n+     * given key. This is purely to make the wallet file compatible with older\n+     * software, as FillableSigningProvider automatically does this implicitly for all\n+     * keys now.\n+     */\n+    void LearnRelatedScripts(const CPubKey& key, OutputType);\n+\n+    /**\n+     * Same as LearnRelatedScripts, but when the OutputType is not known (and could\n+     * be anything).\n+     */\n+    void LearnAllRelatedScripts(const CPubKey& key);\n+\n+    /**\n+     * Marks all keys in the keypool up to and including reserve_key as used.\n+     */\n+    void MarkReserveKeysAsUsed(int64_t keypool_id) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+    const std::map<CKeyID, int64_t>& GetAllReserveKeys() const { return m_pool_key_to_index; }\n+};\n+\n+/** Wraps a LegacyScriptPubKeyMan so that it can be returned in a new unique_ptr */",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": 460,
      "original_position": 465,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "5f641a5c8fc446a6df61aeab270583efcafa0f7e",
      "in_reply_to_id": 324821792,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The use of `shared_ptr` was because `ScriptPubKeyMan` objects were being passed around a lot. I've changed this to store them as a `unique_ptr` and instead just pass around the `ScriptPubKeyMan*` as you suggested.",
      "created_at": "2019-09-16T20:43:17Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r324876493",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/324876493"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 460,
      "original_line": 460,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/324898415",
      "pull_request_review_id": 288916582,
      "id": 324898415,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNDg5ODQxNQ==",
      "diff_hunk": "@@ -0,0 +1,481 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+#define BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <wallet/crypter.h>\n+#include <wallet/ismine.h>\n+#include <wallet/walletdb.h>\n+#include <wallet/walletutil.h>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+enum class OutputType;\n+\n+class WalletStorage\n+{\n+public:\n+    virtual ~WalletStorage() = default;\n+    virtual const std::string GetDisplayName() const = 0;\n+    virtual std::shared_ptr<WalletDatabase> GetDatabase() = 0;\n+    virtual bool IsWalletFlagSet(uint64_t) const = 0;\n+    virtual void SetWalletFlag(uint64_t) = 0;\n+    virtual void UnsetWalletFlagWithDB(WalletBatch&, uint64_t) = 0;\n+    virtual bool CanSupportFeature(enum WalletFeature) const = 0;\n+    virtual void SetMinVersion(enum WalletFeature, WalletBatch* = nullptr, bool = false) = 0;\n+};\n+\n+//! Default for -keypool\n+static const unsigned int DEFAULT_KEYPOOL_SIZE = 1000;\n+\n+std::vector<CKeyID> GetAffectedKeys(const CScript& spk, const SigningProvider& provider);\n+\n+/** A key from a CWallet's keypool\n+ *\n+ * The wallet holds one (for pre HD-split wallets) or several keypools. These\n+ * are sets of keys that have not yet been used to provide addresses or receive\n+ * change.\n+ *\n+ * The Bitcoin Core wallet was originally a collection of unrelated private\n+ * keys with their associated addresses. If a non-HD wallet generated a\n+ * key/address, gave that address out and then restored a backup from before\n+ * that key's generation, then any funds sent to that address would be\n+ * lost definitively.\n+ *\n+ * The keypool was implemented to avoid this scenario (commit: 10384941). The\n+ * wallet would generate a set of keys (100 by default). When a new public key\n+ * was required, either to give out as an address or to use in a change output,\n+ * it would be drawn from the keypool. The keypool would then be topped up to\n+ * maintain 100 keys. This ensured that as long as the wallet hadn't used more\n+ * than 100 keys since the previous backup, all funds would be safe, since a\n+ * restored wallet would be able to scan for all owned addresses.\n+ *\n+ * A keypool also allowed encrypted wallets to give out addresses without\n+ * having to be decrypted to generate a new private key.\n+ *\n+ * With the introduction of HD wallets (commit: f1902510), the keypool\n+ * essentially became an address look-ahead pool. Restoring old backups can no\n+ * longer definitively lose funds as long as the addresses used were from the\n+ * wallet's HD seed (since all private keys can be rederived from the seed).\n+ * However, if many addresses were used since the backup, then the wallet may\n+ * not know how far ahead in the HD chain to look for its addresses. The\n+ * keypool is used to implement a 'gap limit'. The keypool maintains a set of\n+ * keys (by default 1000) ahead of the last used key and scans for the\n+ * addresses of those keys.  This avoids the risk of not seeing transactions\n+ * involving the wallet's addresses, or of re-using the same address.\n+ *\n+ * The HD-split wallet feature added a second keypool (commit: 02592f4c). There\n+ * is an external keypool (for addresses to hand out) and an internal keypool\n+ * (for change addresses).\n+ *\n+ * Keypool keys are stored in the wallet/keystore's keymap. The keypool data is\n+ * stored as sets of indexes in the wallet (setInternalKeyPool,\n+ * setExternalKeyPool and set_pre_split_keypool), and a map from the key to the\n+ * index (m_pool_key_to_index). The CKeyPool object is used to\n+ * serialize/deserialize the pool data to/from the database.\n+ */\n+class CKeyPool\n+{\n+public:\n+    //! The time at which the key was generated. Set in AddKeypoolPubKeyWithDB\n+    int64_t nTime;\n+    //! The public key\n+    CPubKey vchPubKey;\n+    //! Whether this keypool entry is in the internal keypool (for change outputs)\n+    bool fInternal;\n+    //! Whether this key was generated for a keypool before the wallet was upgraded to HD-split\n+    bool m_pre_split;\n+\n+    CKeyPool();\n+    CKeyPool(const CPubKey& vchPubKeyIn, bool internalIn);\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        int nVersion = s.GetVersion();\n+        if (!(s.GetType() & SER_GETHASH))\n+            READWRITE(nVersion);\n+        READWRITE(nTime);\n+        READWRITE(vchPubKey);\n+        if (ser_action.ForRead()) {\n+            try {\n+                READWRITE(fInternal);\n+            }\n+            catch (std::ios_base::failure&) {\n+                /* flag as external address if we can't read the internal boolean\n+                   (this will be the case for any wallet before the HD chain split version) */\n+                fInternal = false;\n+            }\n+            try {\n+                READWRITE(m_pre_split);\n+            }\n+            catch (std::ios_base::failure&) {\n+                /* flag as postsplit address if we can't read the m_pre_split boolean\n+                   (this will be the case for any wallet that upgrades to HD chain split)*/\n+                m_pre_split = false;\n+            }\n+        }\n+        else {\n+            READWRITE(fInternal);\n+            READWRITE(m_pre_split);\n+        }\n+    }\n+};\n+\n+/*\n+ * A class implementing ScriptPubKeyMan manages some (or all) scriptPubKeys used in a wallet.\n+ * It contains the scripts and keys related to the scriptPubKeys it manages.\n+ * A ScriptPubKeyMan will be able to give out scriptPubKeys to be used, as well as marking\n+ * when a scriptPubKey has been used. It also handles when and how to store a scriptPubKey\n+ * and it's related scripts and keys, including encryption.\n+ */\n+class ScriptPubKeyMan\n+{\n+private:\n+    WalletStorage& storage;\n+\n+protected:\n+    std::shared_ptr<WalletDatabase> m_database;\n+\n+public:\n+    ScriptPubKeyMan(WalletStorage& storage) : storage(storage), m_database(storage.GetDatabase()) {}\n+\n+    const std::string GetDisplayName() const { return storage.GetDisplayName(); }\n+    bool IsWalletFlagSet(uint64_t flag) const { return storage.IsWalletFlagSet(flag); }\n+    void SetWalletFlag(uint64_t flag) { return storage.SetWalletFlag(flag); }\n+    void UnsetWalletFlagWithDB(WalletBatch& batch, uint64_t flag) { return storage.UnsetWalletFlagWithDB(batch, flag); }\n+    bool CanSupportFeature(enum WalletFeature wf) const { return storage.CanSupportFeature(wf); }\n+    void SetMinVersion(enum WalletFeature wf) { return storage.SetMinVersion(wf); }\n+\n+    virtual ~ScriptPubKeyMan() {};\n+    virtual bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) { return false; }\n+    virtual isminetype IsMine(const CScript& script) const { return ISMINE_NO; }\n+\n+    virtual bool IsCrypted() const { return false; }\n+    virtual bool IsLocked() const { return false; }\n+    virtual bool Lock() { return false; }\n+\n+    virtual bool Unlock(const CKeyingMaterial& vMasterKeyIn, bool accept_no_keys = false) { return false; }\n+    virtual bool Encrypt(CKeyingMaterial& vMasterKeyIn, WalletBatch* batch) { return false; }\n+\n+    virtual bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool) { return false; }\n+    virtual void KeepDestination(int64_t index) {}\n+    virtual void ReturnDestination(int64_t index, bool internal, const CTxDestination& addr) {}\n+\n+    virtual bool TopUp(unsigned int size = 0) { return false; }\n+\n+    //! Mark unused addresses as being used\n+    virtual void MarkUnusedAddresses(const CScript& script) {}\n+\n+    //! Upgrade stored CKeyMetadata objects to store key origin info as KeyOriginInfo\n+    virtual void UpgradeKeyMetadata() {}\n+\n+    /** Sets up the key generation stuff, i.e. generates new HD seeds and sets them as active.\n+      * Returns false if already setup or setup fails, true if setup is successful\n+      * Set force=true to make it re-setup if already setup, used for upgrades\n+      */\n+    virtual bool SetupGeneration(bool force = false) { return false; }\n+\n+    /* Returns true if HD is enabled */\n+    virtual bool IsHDEnabled() const { return false; }\n+\n+    /* Returns true if the wallet can give out new addresses. This means it has keys in the keypool or can generate new keys */\n+    virtual bool CanGetAddresses(bool internal = false) { return false; }\n+\n+    /** Upgrades the wallet to the specified version */\n+    virtual bool Upgrade(int prev_version, int new_version, std::string& error) { return false; }\n+\n+    virtual bool HavePrivateKeys() const { return false; }\n+\n+    //! The action to do when the DB needs rewrite\n+    virtual void RewriteDB() {}\n+\n+    virtual int64_t GetOldestKeyPoolTime() { return GetTime(); }\n+\n+    virtual size_t KeypoolCountExternalKeys() { return 0; }\n+    virtual unsigned int GetKeypoolSize() const { return 0; }\n+\n+    virtual int64_t GetTimeFirstKey() const { return 0; }\n+\n+    virtual const CKeyMetadata* GetMetadata(uint160 id) const { return nullptr; }\n+\n+    virtual std::unique_ptr<SigningProvider> GetSigningProvider(const CScript& script) const { return nullptr; }\n+\n+    /** Whether this ScriptPubKeyMan can provide a SigningProvider (via GetSigningProvider) that, combined with\n+      * sigdata, can produce a valid signature.\n+      */\n+    virtual bool CanProvide(const CScript& script, SignatureData& sigdata) { return false; }\n+\n+    virtual uint256 GetID() const { return uint256(); }\n+\n+    /** Prepends the wallet name in logging output to ease debugging in multi-wallet use cases */\n+    template<typename... Params>\n+    void WalletLogPrintf(std::string fmt, Params... parameters) const {\n+        LogPrintf((\"%s \" + fmt).c_str(), GetDisplayName(), parameters...);\n+    };\n+\n+    /** Watch-only address added */\n+    boost::signals2::signal<void (bool fHaveWatchOnly)> NotifyWatchonlyChanged;\n+\n+    /** Keypool has new keys */\n+    boost::signals2::signal<void ()> NotifyCanGetAddressesChanged;\n+};\n+\n+class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProvider\n+{\n+private:\n+    //! if fUseCrypto is true, mapKeys must be empty\n+    //! if fUseCrypto is false, vMasterKey must be empty\n+    std::atomic<bool> fUseCrypto{false};\n+\n+    bool SetCrypted();\n+\n+    //! keeps track of whether Unlock has run a thorough check before\n+    bool fDecryptionThoroughlyChecked = false;\n+\n+    //! Master encryption key for the wallet. Keys are encrypted with this.\n+    //! Wallet is unlocked if this is not null.\n+    CKeyingMaterial vMasterKey GUARDED_BY(cs_KeyStore);\n+    using WatchOnlySet = std::set<CScript>;\n+    using WatchKeyMap = std::map<CKeyID, CPubKey>;\n+\n+    WalletBatch *encrypted_batch GUARDED_BY(cs_KeyStore) = nullptr;\n+\n+    using CryptedKeyMap = std::map<CKeyID, std::pair<CPubKey, std::vector<unsigned char>>>;\n+\n+    CryptedKeyMap mapCryptedKeys GUARDED_BY(cs_KeyStore);\n+    WatchOnlySet setWatchOnly GUARDED_BY(cs_KeyStore);\n+    WatchKeyMap mapWatchKeys GUARDED_BY(cs_KeyStore);\n+\n+    int64_t nTimeFirstKey GUARDED_BY(cs_KeyStore) = 0;\n+\n+    bool AddKeyPubKeyInner(const CKey& key, const CPubKey &pubkey);\n+    bool AddCryptedKeyInner(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n+\n+    /**\n+     * Private version of AddWatchOnly method which does not accept a\n+     * timestamp, and which will reset the wallet's nTimeFirstKey value to 1 if\n+     * the watch key did not previously have a timestamp associated with it.\n+     * Because this is an inherited virtual method, it is accessible despite\n+     * being marked private, but it is marked private anyway to encourage use\n+     * of the other AddWatchOnly which accepts a timestamp and sets\n+     * nTimeFirstKey more intelligently for more efficient rescans.\n+     */\n+    bool AddWatchOnly(const CScript& dest) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+    bool AddWatchOnlyWithDB(WalletBatch &batch, const CScript& dest) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+    bool AddWatchOnlyInMem(const CScript &dest);\n+    //! Adds a watch-only address to the store, and saves it to disk.\n+    bool AddWatchOnlyWithDB(WalletBatch &batch, const CScript& dest, int64_t create_time) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+\n+    //! Adds a key to the store, and saves it to disk.\n+    bool AddKeyPubKeyWithDB(WalletBatch &batch,const CKey& key, const CPubKey &pubkey) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+\n+    void AddKeypoolPubkeyWithDB(const CPubKey& pubkey, const bool internal, WalletBatch& batch);\n+\n+    //! Adds a script to the store and saves it to disk\n+    bool AddCScriptWithDB(WalletBatch& batch, const CScript& script);\n+\n+    /** Add a KeyOriginInfo to the wallet */\n+    bool AddKeyOriginWithDB(WalletBatch& batch, const CPubKey& pubkey, const KeyOriginInfo& info);\n+\n+    /* the HD chain data model (external chain counters) */\n+    CHDChain hdChain;\n+\n+    /* HD derive new child key (on internal or external chain) */\n+    void DeriveNewChildKey(WalletBatch& batch, CKeyMetadata& metadata, CKey& secret, bool internal = false) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+\n+    std::set<int64_t> setInternalKeyPool GUARDED_BY(cs_KeyStore);\n+    std::set<int64_t> setExternalKeyPool GUARDED_BY(cs_KeyStore);\n+    std::set<int64_t> set_pre_split_keypool GUARDED_BY(cs_KeyStore);\n+    int64_t m_max_keypool_index GUARDED_BY(cs_KeyStore) = 0;\n+    std::map<CKeyID, int64_t> m_pool_key_to_index;\n+    // Tracks keypool indexes to CKeyIDs of keys that have been taken out of the keypool but may be returned to it\n+    std::map<int64_t, CKeyID> m_reserved_key_to_index;\n+\n+    //! Fetches a key from the keypool\n+    bool GetKeyFromPool(CPubKey &key, bool internal = false);\n+\n+    /**\n+     * Reserves a key from the keypool and sets nIndex to its index\n+     *\n+     * @param[out] nIndex the index of the key in keypool\n+     * @param[out] keypool the keypool the key was drawn from, which could be the\n+     *     the pre-split pool if present, or the internal or external pool\n+     * @param fRequestedInternal true if the caller would like the key drawn\n+     *     from the internal keypool, false if external is preferred\n+     *\n+     * @return true if succeeded, false if failed due to empty keypool\n+     * @throws std::runtime_error if keypool read failed, key was invalid,\n+     *     was not found in the wallet, or was misclassified in the internal\n+     *     or external keypool\n+     */\n+    bool ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool fRequestedInternal);\n+\n+    void KeepKey(int64_t nIndex);\n+    void ReturnKey(int64_t nIndex, bool fInternal, const CKeyID& pubkey_id);\n+\n+public:\n+    using ScriptPubKeyMan::ScriptPubKeyMan;\n+\n+    bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) override EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+    isminetype IsMine(const CScript& script) const override;\n+\n+    bool IsCrypted() const override;\n+    bool IsLocked() const override;\n+    bool Lock() override;\n+\n+    bool Unlock(const CKeyingMaterial& vMasterKeyIn, bool accept_no_keys = false) override;\n+    bool Encrypt(CKeyingMaterial& vMasterKeyIn, WalletBatch* batch) override;\n+\n+    bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool) override;\n+    void KeepDestination(int64_t index) override;\n+    void ReturnDestination(int64_t index, bool internal, const CTxDestination& addr) override;\n+\n+    bool TopUp(unsigned int size = 0) override;\n+\n+    void MarkUnusedAddresses(const CScript& script) override;\n+\n+    void UpgradeKeyMetadata() override;\n+\n+    bool IsHDEnabled() const override;\n+\n+    bool SetupGeneration(bool force = false) override;\n+\n+    bool Upgrade(int prev_version, int new_version, std::string& error) override;\n+\n+    bool HavePrivateKeys() const override;\n+\n+    void RewriteDB() override;\n+\n+    int64_t GetOldestKeyPoolTime() override;\n+    size_t KeypoolCountExternalKeys() override;\n+    unsigned int GetKeypoolSize() const override;\n+\n+    int64_t GetTimeFirstKey() const override;\n+\n+    const CKeyMetadata* GetMetadata(uint160 id) const override;\n+\n+    bool CanGetAddresses(bool internal = false) override;\n+\n+    std::unique_ptr<SigningProvider> GetSigningProvider(const CScript& script) const override;\n+\n+    bool CanProvide(const CScript& script, SignatureData& sigdata) override;\n+\n+    uint256 GetID() const override;\n+\n+    // Map from Key ID to key metadata.\n+    std::map<CKeyID, CKeyMetadata> mapKeyMetadata GUARDED_BY(cs_KeyStore);\n+\n+    // Map from Script ID to key metadata (for watch-only keys).\n+    std::map<CScriptID, CKeyMetadata> m_script_metadata GUARDED_BY(cs_KeyStore);\n+\n+    //! Adds a key to the store, and saves it to disk.\n+    bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey) override EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+    //! Adds a key to the store, without saving it to disk (used by LoadWallet)\n+    bool LoadKey(const CKey& key, const CPubKey &pubkey);\n+    //! Adds an encrypted key to the store, and saves it to disk.\n+    bool AddCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n+    //! Adds an encrypted key to the store, without saving it to disk (used by LoadWallet)\n+    bool LoadCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n+    void UpdateTimeFirstKey(int64_t nCreateTime) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+    //! Adds a CScript to the store\n+    bool LoadCScript(const CScript& redeemScript);\n+    //! Load metadata (used by LoadWallet)\n+    void LoadKeyMetadata(const CKeyID& keyID, const CKeyMetadata &metadata);\n+    void LoadScriptMetadata(const CScriptID& script_id, const CKeyMetadata &metadata);\n+    //! Generate a new key\n+    CPubKey GenerateNewKey(WalletBatch& batch, bool internal = false) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+\n+    /* Set the HD chain model (chain child index counters) */\n+    void SetHDChain(const CHDChain& chain, bool memonly);\n+    const CHDChain& GetHDChain() const { return hdChain; }\n+\n+    //! Adds a watch-only address to the store, without saving it to disk (used by LoadWallet)\n+    bool LoadWatchOnly(const CScript &dest);\n+    //! Returns whether the watch-only script is in the wallet\n+    bool HaveWatchOnly(const CScript &dest) const;\n+    //! Returns whether there are any watch-only things in the wallet\n+    bool HaveWatchOnly() const;\n+    //! Remove a watch only script from the keystore\n+    bool RemoveWatchOnly(const CScript &dest);\n+    bool AddWatchOnly(const CScript& dest, int64_t nCreateTime) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+\n+    //! Fetches a pubkey from mapWatchKeys if it exists there\n+    bool GetWatchPubKey(const CKeyID &address, CPubKey &pubkey_out) const;\n+\n+    /* SigningProvider overrides */\n+    bool HaveKey(const CKeyID &address) const override;\n+    bool GetKey(const CKeyID &address, CKey& keyOut) const override;\n+    bool GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const override;\n+    bool AddCScript(const CScript& redeemScript) override;\n+    bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const override;\n+\n+    //! Load a keypool entry\n+    void LoadKeyPool(int64_t nIndex, const CKeyPool &keypool);\n+    bool TopUpKeyPool(unsigned int kpSize = 0);\n+    bool NewKeyPool();\n+    void MarkPreSplitKeys() EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+\n+    bool ImportScripts(const std::set<CScript> scripts, int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+    bool ImportPrivKeys(const std::map<CKeyID, CKey>& privkey_map, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+    bool ImportPubKeys(const std::vector<CKeyID>& ordered_pubkeys, const std::map<CKeyID, CPubKey>& pubkey_map, const std::map<CKeyID, std::pair<CPubKey, KeyOriginInfo>>& key_origins, const bool add_keypool, const bool internal, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+    bool ImportScriptPubKeys(const std::set<CScript>& script_pub_keys, const bool have_solving_data, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+\n+    /* Returns true if the wallet can generate new keys */\n+    bool CanGenerateKeys();\n+\n+    /* Generates a new HD seed (will not be activated) */\n+    CPubKey GenerateNewSeed();\n+\n+    /* Derives a new HD seed (will not be activated) */\n+    CPubKey DeriveNewSeed(const CKey& key);\n+\n+    /* Set the current HD seed (will reset the chain child index counters)\n+       Sets the seed's version based on the current wallet version (so the\n+       caller must ensure the current wallet version is correct before calling\n+       this function). */\n+    void SetHDSeed(const CPubKey& key);\n+\n+    /**\n+     * Explicitly make the wallet learn the related scripts for outputs to the\n+     * given key. This is purely to make the wallet file compatible with older\n+     * software, as FillableSigningProvider automatically does this implicitly for all\n+     * keys now.\n+     */\n+    void LearnRelatedScripts(const CPubKey& key, OutputType);\n+\n+    /**\n+     * Same as LearnRelatedScripts, but when the OutputType is not known (and could\n+     * be anything).\n+     */\n+    void LearnAllRelatedScripts(const CPubKey& key);\n+\n+    /**\n+     * Marks all keys in the keypool up to and including reserve_key as used.\n+     */\n+    void MarkReserveKeysAsUsed(int64_t keypool_id) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+    const std::map<CKeyID, int64_t>& GetAllReserveKeys() const { return m_pool_key_to_index; }\n+};\n+\n+/** Wraps a LegacyScriptPubKeyMan so that it can be returned in a new unique_ptr */",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": 460,
      "original_position": 465,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "5f641a5c8fc446a6df61aeab270583efcafa0f7e",
      "in_reply_to_id": 324821792,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks! If desired, I think you could take it further and drop LegacySigningProvider wrapper class if the CWallet::GetSigningProvider methods are returning plain pointers. Also, I think there's no need anymore to change CWallet::database from a unique_ptr to a shared_ptr. (It's a little nicer as a unique_ptr to be sure the database is closed when a wallet's unloaded and not kept open with a dangling reference.)",
      "created_at": "2019-09-16T21:40:35Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r324898415",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/324898415"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 460,
      "original_line": 460,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325183255",
      "pull_request_review_id": 289283445,
      "id": 325183255,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNTE4MzI1NQ==",
      "diff_hunk": "@@ -144,8 +144,10 @@ static bool SignStep(const SigningProvider& provider, const BaseSignatureCreator\n         ret.push_back(valtype()); // workaround CHECKMULTISIG bug\n         for (size_t i = 1; i < vSolutions.size() - 1; ++i) {\n             CPubKey pubkey = CPubKey(vSolutions[i]);\n-            if (ret.size() < required + 1 && CreateSig(creator, sigdata, provider, sig, pubkey, scriptPubKey, sigversion)) {\n-                ret.push_back(std::move(sig));\n+            if (CreateSig(creator, sigdata, provider, sig, pubkey, scriptPubKey, sigversion)) {\n+                if (ret.size() < required + 1) {",
      "path": "src/script/sign.cpp",
      "position": 10,
      "original_position": 7,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "ca02ac2532ce106d372d420dd2b94ad15e730971",
      "in_reply_to_id": 310624791,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Can you add the bit about `LegacyScriptPubKeyMan::CanProvide` as well to the comment?",
      "created_at": "2019-09-17T13:59:34Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r325183255",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325183255"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 151,
      "original_line": 151,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325190353",
      "pull_request_review_id": 289283445,
      "id": 325190353,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNTE5MDM1Mw==",
      "diff_hunk": "@@ -296,7 +296,22 @@ std::unique_ptr<SigningProvider> LegacyScriptPubKeyMan::GetSigningProvider(const\n \n bool LegacyScriptPubKeyMan::CanProvide(const CScript& script, SignatureData& sigdata)\n {\n-    return false;\n+    if (IsMine(script) != ISMINE_NO) {\n+        return true;\n+    } else if (HaveCScript(CScriptID(script))) {\n+        return true;\n+    } else {\n+        ProduceSignature(*this, DUMMY_SIGNATURE_CREATOR, script, sigdata);\n+        if (!sigdata.signatures.empty()) {\n+            // If we could make signatures, make sure we have the private key",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "6c7c36276e26539edc8b281129bb30f1cd4a4fb8",
      "in_reply_to_id": 322337866,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Should this say \"we have _any_ private key\" instead of _the_ private key? \"DUMMY_SIGNATURE_CREATOR works for watch only things\" is useful to add as a comment. Can you also explain under what circumstance `DUMMY_SIGNATURE_CREATOR` does _not_ produce a signature? It's also useful to reiterate here that `ProduceSignature` doesn't necessarily produce an ECDSA signature, but a script signature, which in turn may contain a (dummy?) ECDSA signature.",
      "created_at": "2019-09-17T14:11:19Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r325190353",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325190353"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 482,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325192947",
      "pull_request_review_id": 289283445,
      "id": 325192947,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNTE5Mjk0Nw==",
      "diff_hunk": "@@ -298,7 +298,22 @@ std::unique_ptr<SigningProvider> LegacyScriptPubKeyMan::GetSigningProvider(const\n \n bool LegacyScriptPubKeyMan::CanProvide(const CScript& script, SignatureData& sigdata)\n {",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 503,
      "original_position": 3,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "803e3250f685d7ec556c1a4dd5c6241f68f447c7",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "What's the equivalent pre-box code for this? If nothing, can you explain in a comment why you need these three distinct checks?",
      "created_at": "2019-09-17T14:15:12Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r325192947",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325192947"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 503,
      "original_line": 503,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325226579",
      "pull_request_review_id": 289283445,
      "id": 325226579,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNTIyNjU3OQ==",
      "diff_hunk": "@@ -78,22 +78,30 @@ CTxDestination AddAndGetDestinationForScript(FillableSigningProvider& keystore,\n {\n     // Add script to keystore\n     keystore.AddCScript(script);\n+    ScriptHash sh = ScriptHash(script);",
      "path": "src/outputtype.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "592177c771ee120472b11036ccf6e3aad0bba8af",
      "in_reply_to_id": 322385026,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think you can drop `[ci-skip]`; tests pass for me locally on this commit.\r\n\r\nIt's still not clear to me what this is doing. The function already calls ` keystore.AddCScript`, so why do this twice?",
      "created_at": "2019-09-17T15:11:49Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r325226579",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325226579"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 81,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325233797",
      "pull_request_review_id": 289283445,
      "id": 325233797,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNTIzMzc5Nw==",
      "diff_hunk": "@@ -0,0 +1,148 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+#define BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <wallet/crypter.h>\n+#include <wallet/ismine.h>\n+#include <wallet/walletdb.h>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+enum class OutputType;\n+\n+/*\n+ * A class implementing ScriptPubKeyMan manages some (or all) scriptPubKeys used in a wallet.\n+ * It contains the scripts and keys related to the scriptPubKeys it manages.\n+ * A ScriptPubKeyMan will be able to give out scriptPubKeys to be used, as well as marking\n+ * when a scriptPubKey has been used. It also handles when and how to store a scriptPubKey\n+ * and it's related scripts and keys, including encryption.\n+ */\n+class ScriptPubKeyMan\n+{\n+public:\n+    virtual ~ScriptPubKeyMan() {};\n+    virtual bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) { return false; }\n+    virtual isminetype IsMine(const CScript& script) const { return ISMINE_NO; }",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": 166,
      "original_position": 30,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "1e572c14d88ff900a568e9a840ea8cd82809a0e4",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I suppose we can't burry `IsMine` deep inside a private method? :-)",
      "created_at": "2019-09-17T15:24:20Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r325233797",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325233797"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 166,
      "original_line": 166,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325235296",
      "pull_request_review_id": 289283445,
      "id": 325235296,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNTIzNTI5Ng==",
      "diff_hunk": "@@ -0,0 +1,148 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+#define BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <wallet/crypter.h>\n+#include <wallet/ismine.h>\n+#include <wallet/walletdb.h>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+enum class OutputType;\n+\n+/*\n+ * A class implementing ScriptPubKeyMan manages some (or all) scriptPubKeys used in a wallet.\n+ * It contains the scripts and keys related to the scriptPubKeys it manages.\n+ * A ScriptPubKeyMan will be able to give out scriptPubKeys to be used, as well as marking\n+ * when a scriptPubKey has been used. It also handles when and how to store a scriptPubKey\n+ * and it's related scripts and keys, including encryption.\n+ */\n+class ScriptPubKeyMan\n+{\n+public:\n+    virtual ~ScriptPubKeyMan() {};\n+    virtual bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) { return false; }\n+    virtual isminetype IsMine(const CScript& script) const { return ISMINE_NO; }\n+\n+    virtual bool IsCrypted() const { return false; }\n+    virtual bool IsLocked() const { return false; }\n+    virtual bool Lock() { return false; }\n+\n+    virtual bool Unlock(const CKeyingMaterial& vMasterKeyIn, bool accept_no_keys = false) { return false; }\n+    virtual bool Encrypt(CKeyingMaterial& vMasterKeyIn, WalletBatch* batch) { return false; }\n+\n+    virtual bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool) { return false; }\n+    virtual void KeepDestination(int64_t index) {}\n+    virtual void ReturnDestination(int64_t index, bool internal, const CTxDestination& addr) {}\n+\n+    virtual bool TopUp(unsigned int size = 0) { return false; }\n+\n+    //! Mark unused addresses as being used\n+    virtual void MarkUnusedAddresses(const CScript& script) {}\n+\n+    //! Upgrade stored CKeyMetadata objects to store key origin info as KeyOriginInfo\n+    virtual void UpgradeKeyMetadata() {}\n+\n+    /** Sets up the key generation stuff, i.e. generates new HD seeds and sets them as active.\n+      * Returns false if already setup or setup fails, true if setup is successful\n+      * Set force=true to make it re-setup if already setup, used for upgrades\n+      */\n+    virtual bool SetupGeneration(bool force = false) { return false; }\n+\n+    /* Returns true if HD is enabled */\n+    virtual bool IsHDEnabled() const { return false; }\n+\n+    /* Returns true if the wallet can give out new addresses. This means it has keys in the keypool or can generate new keys */\n+    virtual bool CanGetAddresses(bool internal = false) { return false; }\n+\n+    /** Upgrades the wallet to the specified version */\n+    virtual bool Upgrade(int prev_version, int new_version, std::string& error) { return false; }",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": null,
      "original_position": 64,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "1e572c14d88ff900a568e9a840ea8cd82809a0e4",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nit: move closer to `UpgradeKeyMetadata`",
      "created_at": "2019-09-17T15:27:03Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r325235296",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325235296"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 197,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325236865",
      "pull_request_review_id": 289283445,
      "id": 325236865,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNTIzNjg2NQ==",
      "diff_hunk": "@@ -0,0 +1,148 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+#define BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <wallet/crypter.h>\n+#include <wallet/ismine.h>\n+#include <wallet/walletdb.h>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+enum class OutputType;\n+\n+/*\n+ * A class implementing ScriptPubKeyMan manages some (or all) scriptPubKeys used in a wallet.\n+ * It contains the scripts and keys related to the scriptPubKeys it manages.\n+ * A ScriptPubKeyMan will be able to give out scriptPubKeys to be used, as well as marking\n+ * when a scriptPubKey has been used. It also handles when and how to store a scriptPubKey\n+ * and it's related scripts and keys, including encryption.\n+ */\n+class ScriptPubKeyMan\n+{\n+public:\n+    virtual ~ScriptPubKeyMan() {};\n+    virtual bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) { return false; }\n+    virtual isminetype IsMine(const CScript& script) const { return ISMINE_NO; }\n+\n+    virtual bool IsCrypted() const { return false; }\n+    virtual bool IsLocked() const { return false; }\n+    virtual bool Lock() { return false; }\n+\n+    virtual bool Unlock(const CKeyingMaterial& vMasterKeyIn, bool accept_no_keys = false) { return false; }\n+    virtual bool Encrypt(CKeyingMaterial& vMasterKeyIn, WalletBatch* batch) { return false; }\n+\n+    virtual bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool) { return false; }\n+    virtual void KeepDestination(int64_t index) {}\n+    virtual void ReturnDestination(int64_t index, bool internal, const CTxDestination& addr) {}\n+\n+    virtual bool TopUp(unsigned int size = 0) { return false; }\n+\n+    //! Mark unused addresses as being used\n+    virtual void MarkUnusedAddresses(const CScript& script) {}\n+\n+    //! Upgrade stored CKeyMetadata objects to store key origin info as KeyOriginInfo\n+    virtual void UpgradeKeyMetadata() {}\n+\n+    /** Sets up the key generation stuff, i.e. generates new HD seeds and sets them as active.\n+      * Returns false if already setup or setup fails, true if setup is successful\n+      * Set force=true to make it re-setup if already setup, used for upgrades\n+      */\n+    virtual bool SetupGeneration(bool force = false) { return false; }\n+\n+    /* Returns true if HD is enabled */\n+    virtual bool IsHDEnabled() const { return false; }\n+\n+    /* Returns true if the wallet can give out new addresses. This means it has keys in the keypool or can generate new keys */\n+    virtual bool CanGetAddresses(bool internal = false) { return false; }\n+\n+    /** Upgrades the wallet to the specified version */\n+    virtual bool Upgrade(int prev_version, int new_version, std::string& error) { return false; }\n+\n+    virtual bool HavePrivateKeys() const { return false; }\n+\n+    //! The action to do when the DB needs rewrite\n+    virtual void RewriteDB() {}\n+\n+    virtual int64_t GetOldestKeyPoolTime() { return GetTime(); }\n+\n+    virtual size_t KeypoolCountExternalKeys() { return 0; }\n+    virtual unsigned int GetKeypoolSize() const { return 0; }\n+\n+    virtual int64_t GetTimeFirstKey() const { return 0; }\n+\n+    virtual const CKeyMetadata* GetMetadata(uint160 id) const { return nullptr; }\n+\n+    virtual std::unique_ptr<SigningProvider> GetSigningProvider(const CScript& script) const { return nullptr; }\n+\n+    /** Whether this ScriptPubKeyMan can provide a SigningProvider (via GetSigningProvider) that, combined with\n+      * sigdata, can produce a valid signature.\n+      */\n+    virtual bool CanProvide(const CScript& script, SignatureData& sigdata) { return false; }\n+\n+    virtual uint256 GetID() const { return uint256(); }\n+\n+    /** Watch-only address added */\n+    boost::signals2::signal<void (bool fHaveWatchOnly)> NotifyWatchonlyChanged;",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": 229,
      "original_position": 90,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "1e572c14d88ff900a568e9a840ea8cd82809a0e4",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Shouldn't this be part of the legacy box?",
      "created_at": "2019-09-17T15:29:38Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r325236865",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325236865"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 229,
      "original_line": 229,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325245279",
      "pull_request_review_id": 289283445,
      "id": 325245279,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNTI0NTI3OQ==",
      "diff_hunk": "@@ -10,11 +10,25 @@\n #include <wallet/crypter.h>\n #include <wallet/ismine.h>\n #include <wallet/walletdb.h>\n+#include <wallet/walletutil.h>\n \n #include <boost/signals2/signal.hpp>\n \n enum class OutputType;\n \n+class WalletStorage",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": 24,
      "original_position": 10,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "957ac1c094ba7a9d76a78824a023651a0ca066db",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why does this live in `scriptpubkeyman.h` rather than `wallet.h`?\r\nCan you add a few comment lines to explain the purpose of `WalletStorage` and how it relates to `CWallet` and `ScriptPubKeyMan`?\r\n\r\nIn particular I don't get why (in the next commit) each `ScriptPubKeyMan` instance needs this.\r\n\r\nMaybe move this commit closer to where you first need it.",
      "created_at": "2019-09-17T15:45:08Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r325245279",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325245279"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 24,
      "original_line": 24,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325251003",
      "pull_request_review_id": 289283445,
      "id": 325251003,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNTI1MTAwMw==",
      "diff_hunk": "@@ -4947,3 +4947,30 @@ bool CWallet::AddCryptedKeyInner(const CPubKey &vchPubKey, const std::vector<uns\n     ImplicitlyLearnRelatedKeyScripts(vchPubKey);\n     return true;\n }\n+\n+LegacyScriptPubKeyMan* CWallet::GetLegacyScriptPubKeyMan()\n+{\n+    SetupLegacyScriptPubKeyMan();\n+    // All active ScriptPubKeyMans are the same LegacyScriptPubKeyMan\n+    return (LegacyScriptPubKeyMan*)m_internal_spk_managers[OutputType::LEGACY];\n+}\n+\n+void CWallet::SetupLegacyScriptPubKeyMan()\n+{\n+    if (m_internal_spk_managers.empty() && m_external_spk_managers.empty() && m_spk_managers.empty()) {\n+        auto spk_manager = std::unique_ptr<ScriptPubKeyMan>(new LegacyScriptPubKeyMan());\n+        for (const auto& type : OUTPUT_TYPES) {\n+            m_internal_spk_managers[type] = spk_manager.get();\n+            m_external_spk_managers[type] = spk_manager.get();\n+        }\n+        m_spk_managers[spk_manager->GetID()] = std::move(spk_manager);\n+    }\n+    // These all need to exist and be the same\n+    assert(m_internal_spk_managers.count(OutputType::LEGACY) > 0);\n+    ScriptPubKeyMan* spk_man = m_internal_spk_managers.at(OutputType::LEGACY);\n+    for (const auto& type : OUTPUT_TYPES) {\n+        assert(m_internal_spk_managers.at(type) == spk_man);\n+        assert(m_external_spk_managers.at(type) == spk_man);\n+    }\n+    assert(m_spk_managers.size() == 1);",
      "path": "src/wallet/wallet.cpp",
      "position": 1748,
      "original_position": 29,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "04aba6b8af0df2cb7f8dac8105f16746f4cb0aac",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe point out that having only 1 entry in `m_spk_managers` here means that functions like `GetSigningProvider`  that iterate over \"all\" `PubKeyMan`s really only query once.",
      "created_at": "2019-09-17T15:55:53Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r325251003",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325251003"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4118,
      "original_line": 4118,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325253320",
      "pull_request_review_id": 289283445,
      "id": 325253320,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNTI1MzMyMA==",
      "diff_hunk": "@@ -4948,6 +4948,58 @@ bool CWallet::AddCryptedKeyInner(const CPubKey &vchPubKey, const std::vector<uns\n     return true;\n }\n \n+std::set<ScriptPubKeyMan*> CWallet::GetActiveScriptPubKeyMans() const",
      "path": "src/wallet/wallet.cpp",
      "position": 1571,
      "original_position": 4,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "15a633b8dc65e376cefb4fae0866c171d699d6bf",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "How is this different from `m_spk_managers`?",
      "created_at": "2019-09-17T16:00:08Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r325253320",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325253320"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4020,
      "original_line": 4020,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325254154",
      "pull_request_review_id": 289283445,
      "id": 325254154,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNTI1NDE1NA==",
      "diff_hunk": "@@ -1375,6 +1375,16 @@ class CWallet final : public FillableSigningProvider, public WalletStorage, priv\n     /** Implement lookup of key origin information through wallet key metadata. */\n     bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const override;\n \n+    std::set<ScriptPubKeyMan*> GetActiveScriptPubKeyMans() const;",
      "path": "src/wallet/wallet.h",
      "position": 574,
      "original_position": 4,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "15a633b8dc65e376cefb4fae0866c171d699d6bf",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe clarify the meaning of \"Active\", and how this is different from `m_spk_managers`. Presumably the latter may, in a descriptor wallet, include `PubKeyMan` that we don't draw new address for.\r\n\r\nMaybe rename commit to `Introduce GetScriptPubKeyMan methods`.",
      "created_at": "2019-09-17T16:01:58Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r325254154",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325254154"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1102,
      "original_line": 1102,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325256738",
      "pull_request_review_id": 289283445,
      "id": 325256738,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNTI1NjczOA==",
      "diff_hunk": "@@ -0,0 +1,481 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+#define BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <wallet/crypter.h>\n+#include <wallet/ismine.h>\n+#include <wallet/walletdb.h>\n+#include <wallet/walletutil.h>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+enum class OutputType;\n+\n+class WalletStorage\n+{\n+public:\n+    virtual ~WalletStorage() = default;\n+    virtual const std::string GetDisplayName() const = 0;\n+    virtual std::shared_ptr<WalletDatabase> GetDatabase() = 0;\n+    virtual bool IsWalletFlagSet(uint64_t) const = 0;\n+    virtual void SetWalletFlag(uint64_t) = 0;\n+    virtual void UnsetWalletFlagWithDB(WalletBatch&, uint64_t) = 0;\n+    virtual bool CanSupportFeature(enum WalletFeature) const = 0;\n+    virtual void SetMinVersion(enum WalletFeature, WalletBatch* = nullptr, bool = false) = 0;\n+};\n+\n+//! Default for -keypool\n+static const unsigned int DEFAULT_KEYPOOL_SIZE = 1000;\n+\n+std::vector<CKeyID> GetAffectedKeys(const CScript& spk, const SigningProvider& provider);\n+\n+/** A key from a CWallet's keypool\n+ *\n+ * The wallet holds one (for pre HD-split wallets) or several keypools. These\n+ * are sets of keys that have not yet been used to provide addresses or receive\n+ * change.\n+ *\n+ * The Bitcoin Core wallet was originally a collection of unrelated private\n+ * keys with their associated addresses. If a non-HD wallet generated a\n+ * key/address, gave that address out and then restored a backup from before\n+ * that key's generation, then any funds sent to that address would be\n+ * lost definitively.\n+ *\n+ * The keypool was implemented to avoid this scenario (commit: 10384941). The\n+ * wallet would generate a set of keys (100 by default). When a new public key\n+ * was required, either to give out as an address or to use in a change output,\n+ * it would be drawn from the keypool. The keypool would then be topped up to\n+ * maintain 100 keys. This ensured that as long as the wallet hadn't used more\n+ * than 100 keys since the previous backup, all funds would be safe, since a\n+ * restored wallet would be able to scan for all owned addresses.\n+ *\n+ * A keypool also allowed encrypted wallets to give out addresses without\n+ * having to be decrypted to generate a new private key.\n+ *\n+ * With the introduction of HD wallets (commit: f1902510), the keypool\n+ * essentially became an address look-ahead pool. Restoring old backups can no\n+ * longer definitively lose funds as long as the addresses used were from the\n+ * wallet's HD seed (since all private keys can be rederived from the seed).\n+ * However, if many addresses were used since the backup, then the wallet may\n+ * not know how far ahead in the HD chain to look for its addresses. The\n+ * keypool is used to implement a 'gap limit'. The keypool maintains a set of\n+ * keys (by default 1000) ahead of the last used key and scans for the\n+ * addresses of those keys.  This avoids the risk of not seeing transactions\n+ * involving the wallet's addresses, or of re-using the same address.\n+ *\n+ * The HD-split wallet feature added a second keypool (commit: 02592f4c). There\n+ * is an external keypool (for addresses to hand out) and an internal keypool\n+ * (for change addresses).\n+ *\n+ * Keypool keys are stored in the wallet/keystore's keymap. The keypool data is\n+ * stored as sets of indexes in the wallet (setInternalKeyPool,\n+ * setExternalKeyPool and set_pre_split_keypool), and a map from the key to the\n+ * index (m_pool_key_to_index). The CKeyPool object is used to\n+ * serialize/deserialize the pool data to/from the database.\n+ */\n+class CKeyPool\n+{\n+public:\n+    //! The time at which the key was generated. Set in AddKeypoolPubKeyWithDB\n+    int64_t nTime;\n+    //! The public key\n+    CPubKey vchPubKey;\n+    //! Whether this keypool entry is in the internal keypool (for change outputs)\n+    bool fInternal;\n+    //! Whether this key was generated for a keypool before the wallet was upgraded to HD-split\n+    bool m_pre_split;\n+\n+    CKeyPool();\n+    CKeyPool(const CPubKey& vchPubKeyIn, bool internalIn);\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        int nVersion = s.GetVersion();\n+        if (!(s.GetType() & SER_GETHASH))\n+            READWRITE(nVersion);\n+        READWRITE(nTime);\n+        READWRITE(vchPubKey);\n+        if (ser_action.ForRead()) {\n+            try {\n+                READWRITE(fInternal);\n+            }\n+            catch (std::ios_base::failure&) {\n+                /* flag as external address if we can't read the internal boolean\n+                   (this will be the case for any wallet before the HD chain split version) */\n+                fInternal = false;\n+            }\n+            try {\n+                READWRITE(m_pre_split);\n+            }\n+            catch (std::ios_base::failure&) {\n+                /* flag as postsplit address if we can't read the m_pre_split boolean\n+                   (this will be the case for any wallet that upgrades to HD chain split)*/\n+                m_pre_split = false;\n+            }\n+        }\n+        else {\n+            READWRITE(fInternal);\n+            READWRITE(m_pre_split);\n+        }\n+    }\n+};\n+\n+/*\n+ * A class implementing ScriptPubKeyMan manages some (or all) scriptPubKeys used in a wallet.\n+ * It contains the scripts and keys related to the scriptPubKeys it manages.\n+ * A ScriptPubKeyMan will be able to give out scriptPubKeys to be used, as well as marking\n+ * when a scriptPubKey has been used. It also handles when and how to store a scriptPubKey\n+ * and it's related scripts and keys, including encryption.\n+ */\n+class ScriptPubKeyMan\n+{\n+private:\n+    WalletStorage& storage;\n+\n+protected:\n+    std::shared_ptr<WalletDatabase> m_database;\n+\n+public:\n+    ScriptPubKeyMan(WalletStorage& storage) : storage(storage), m_database(storage.GetDatabase()) {}\n+\n+    const std::string GetDisplayName() const { return storage.GetDisplayName(); }\n+    bool IsWalletFlagSet(uint64_t flag) const { return storage.IsWalletFlagSet(flag); }\n+    void SetWalletFlag(uint64_t flag) { return storage.SetWalletFlag(flag); }\n+    void UnsetWalletFlagWithDB(WalletBatch& batch, uint64_t flag) { return storage.UnsetWalletFlagWithDB(batch, flag); }\n+    bool CanSupportFeature(enum WalletFeature wf) const { return storage.CanSupportFeature(wf); }\n+    void SetMinVersion(enum WalletFeature wf) { return storage.SetMinVersion(wf); }\n+\n+    virtual ~ScriptPubKeyMan() {};\n+    virtual bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) { return false; }\n+    virtual isminetype IsMine(const CScript& script) const { return ISMINE_NO; }\n+\n+    virtual bool IsCrypted() const { return false; }\n+    virtual bool IsLocked() const { return false; }\n+    virtual bool Lock() { return false; }\n+\n+    virtual bool Unlock(const CKeyingMaterial& vMasterKeyIn, bool accept_no_keys = false) { return false; }\n+    virtual bool Encrypt(CKeyingMaterial& vMasterKeyIn, WalletBatch* batch) { return false; }\n+\n+    virtual bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool) { return false; }\n+    virtual void KeepDestination(int64_t index) {}\n+    virtual void ReturnDestination(int64_t index, bool internal, const CTxDestination& addr) {}\n+\n+    virtual bool TopUp(unsigned int size = 0) { return false; }\n+\n+    //! Mark unused addresses as being used\n+    virtual void MarkUnusedAddresses(const CScript& script) {}\n+\n+    //! Upgrade stored CKeyMetadata objects to store key origin info as KeyOriginInfo\n+    virtual void UpgradeKeyMetadata() {}\n+\n+    /** Sets up the key generation stuff, i.e. generates new HD seeds and sets them as active.\n+      * Returns false if already setup or setup fails, true if setup is successful\n+      * Set force=true to make it re-setup if already setup, used for upgrades\n+      */\n+    virtual bool SetupGeneration(bool force = false) { return false; }\n+\n+    /* Returns true if HD is enabled */\n+    virtual bool IsHDEnabled() const { return false; }\n+\n+    /* Returns true if the wallet can give out new addresses. This means it has keys in the keypool or can generate new keys */\n+    virtual bool CanGetAddresses(bool internal = false) { return false; }\n+\n+    /** Upgrades the wallet to the specified version */\n+    virtual bool Upgrade(int prev_version, int new_version, std::string& error) { return false; }\n+\n+    virtual bool HavePrivateKeys() const { return false; }\n+\n+    //! The action to do when the DB needs rewrite\n+    virtual void RewriteDB() {}\n+\n+    virtual int64_t GetOldestKeyPoolTime() { return GetTime(); }\n+\n+    virtual size_t KeypoolCountExternalKeys() { return 0; }\n+    virtual unsigned int GetKeypoolSize() const { return 0; }\n+\n+    virtual int64_t GetTimeFirstKey() const { return 0; }\n+\n+    virtual const CKeyMetadata* GetMetadata(uint160 id) const { return nullptr; }\n+\n+    virtual std::unique_ptr<SigningProvider> GetSigningProvider(const CScript& script) const { return nullptr; }\n+\n+    /** Whether this ScriptPubKeyMan can provide a SigningProvider (via GetSigningProvider) that, combined with\n+      * sigdata, can produce a valid signature.\n+      */\n+    virtual bool CanProvide(const CScript& script, SignatureData& sigdata) { return false; }\n+\n+    virtual uint256 GetID() const { return uint256(); }\n+\n+    /** Prepends the wallet name in logging output to ease debugging in multi-wallet use cases */\n+    template<typename... Params>\n+    void WalletLogPrintf(std::string fmt, Params... parameters) const {\n+        LogPrintf((\"%s \" + fmt).c_str(), GetDisplayName(), parameters...);\n+    };\n+\n+    /** Watch-only address added */\n+    boost::signals2::signal<void (bool fHaveWatchOnly)> NotifyWatchonlyChanged;\n+\n+    /** Keypool has new keys */\n+    boost::signals2::signal<void ()> NotifyCanGetAddressesChanged;\n+};\n+\n+class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProvider\n+{\n+private:\n+    //! if fUseCrypto is true, mapKeys must be empty\n+    //! if fUseCrypto is false, vMasterKey must be empty\n+    std::atomic<bool> fUseCrypto{false};\n+\n+    bool SetCrypted();\n+\n+    //! keeps track of whether Unlock has run a thorough check before\n+    bool fDecryptionThoroughlyChecked = false;\n+\n+    //! Master encryption key for the wallet. Keys are encrypted with this.\n+    //! Wallet is unlocked if this is not null.\n+    CKeyingMaterial vMasterKey GUARDED_BY(cs_KeyStore);\n+    using WatchOnlySet = std::set<CScript>;\n+    using WatchKeyMap = std::map<CKeyID, CPubKey>;\n+\n+    WalletBatch *encrypted_batch GUARDED_BY(cs_KeyStore) = nullptr;\n+\n+    using CryptedKeyMap = std::map<CKeyID, std::pair<CPubKey, std::vector<unsigned char>>>;\n+\n+    CryptedKeyMap mapCryptedKeys GUARDED_BY(cs_KeyStore);\n+    WatchOnlySet setWatchOnly GUARDED_BY(cs_KeyStore);\n+    WatchKeyMap mapWatchKeys GUARDED_BY(cs_KeyStore);\n+\n+    int64_t nTimeFirstKey GUARDED_BY(cs_KeyStore) = 0;\n+\n+    bool AddKeyPubKeyInner(const CKey& key, const CPubKey &pubkey);\n+    bool AddCryptedKeyInner(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n+\n+    /**\n+     * Private version of AddWatchOnly method which does not accept a\n+     * timestamp, and which will reset the wallet's nTimeFirstKey value to 1 if\n+     * the watch key did not previously have a timestamp associated with it.\n+     * Because this is an inherited virtual method, it is accessible despite\n+     * being marked private, but it is marked private anyway to encourage use\n+     * of the other AddWatchOnly which accepts a timestamp and sets\n+     * nTimeFirstKey more intelligently for more efficient rescans.\n+     */\n+    bool AddWatchOnly(const CScript& dest) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+    bool AddWatchOnlyWithDB(WalletBatch &batch, const CScript& dest) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+    bool AddWatchOnlyInMem(const CScript &dest);\n+    //! Adds a watch-only address to the store, and saves it to disk.\n+    bool AddWatchOnlyWithDB(WalletBatch &batch, const CScript& dest, int64_t create_time) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+\n+    //! Adds a key to the store, and saves it to disk.\n+    bool AddKeyPubKeyWithDB(WalletBatch &batch,const CKey& key, const CPubKey &pubkey) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+\n+    void AddKeypoolPubkeyWithDB(const CPubKey& pubkey, const bool internal, WalletBatch& batch);\n+\n+    //! Adds a script to the store and saves it to disk\n+    bool AddCScriptWithDB(WalletBatch& batch, const CScript& script);\n+\n+    /** Add a KeyOriginInfo to the wallet */\n+    bool AddKeyOriginWithDB(WalletBatch& batch, const CPubKey& pubkey, const KeyOriginInfo& info);\n+\n+    /* the HD chain data model (external chain counters) */\n+    CHDChain hdChain;\n+\n+    /* HD derive new child key (on internal or external chain) */\n+    void DeriveNewChildKey(WalletBatch& batch, CKeyMetadata& metadata, CKey& secret, bool internal = false) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+\n+    std::set<int64_t> setInternalKeyPool GUARDED_BY(cs_KeyStore);\n+    std::set<int64_t> setExternalKeyPool GUARDED_BY(cs_KeyStore);\n+    std::set<int64_t> set_pre_split_keypool GUARDED_BY(cs_KeyStore);\n+    int64_t m_max_keypool_index GUARDED_BY(cs_KeyStore) = 0;\n+    std::map<CKeyID, int64_t> m_pool_key_to_index;\n+    // Tracks keypool indexes to CKeyIDs of keys that have been taken out of the keypool but may be returned to it\n+    std::map<int64_t, CKeyID> m_reserved_key_to_index;\n+\n+    //! Fetches a key from the keypool\n+    bool GetKeyFromPool(CPubKey &key, bool internal = false);\n+\n+    /**\n+     * Reserves a key from the keypool and sets nIndex to its index\n+     *\n+     * @param[out] nIndex the index of the key in keypool\n+     * @param[out] keypool the keypool the key was drawn from, which could be the\n+     *     the pre-split pool if present, or the internal or external pool\n+     * @param fRequestedInternal true if the caller would like the key drawn\n+     *     from the internal keypool, false if external is preferred\n+     *\n+     * @return true if succeeded, false if failed due to empty keypool\n+     * @throws std::runtime_error if keypool read failed, key was invalid,\n+     *     was not found in the wallet, or was misclassified in the internal\n+     *     or external keypool\n+     */\n+    bool ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool fRequestedInternal);\n+\n+    void KeepKey(int64_t nIndex);\n+    void ReturnKey(int64_t nIndex, bool fInternal, const CKeyID& pubkey_id);\n+\n+public:\n+    using ScriptPubKeyMan::ScriptPubKeyMan;\n+\n+    bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) override EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+    isminetype IsMine(const CScript& script) const override;\n+\n+    bool IsCrypted() const override;\n+    bool IsLocked() const override;\n+    bool Lock() override;\n+\n+    bool Unlock(const CKeyingMaterial& vMasterKeyIn, bool accept_no_keys = false) override;\n+    bool Encrypt(CKeyingMaterial& vMasterKeyIn, WalletBatch* batch) override;\n+\n+    bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool) override;\n+    void KeepDestination(int64_t index) override;\n+    void ReturnDestination(int64_t index, bool internal, const CTxDestination& addr) override;\n+\n+    bool TopUp(unsigned int size = 0) override;\n+\n+    void MarkUnusedAddresses(const CScript& script) override;\n+\n+    void UpgradeKeyMetadata() override;\n+\n+    bool IsHDEnabled() const override;\n+\n+    bool SetupGeneration(bool force = false) override;\n+\n+    bool Upgrade(int prev_version, int new_version, std::string& error) override;\n+\n+    bool HavePrivateKeys() const override;\n+\n+    void RewriteDB() override;\n+\n+    int64_t GetOldestKeyPoolTime() override;\n+    size_t KeypoolCountExternalKeys() override;\n+    unsigned int GetKeypoolSize() const override;\n+\n+    int64_t GetTimeFirstKey() const override;\n+\n+    const CKeyMetadata* GetMetadata(uint160 id) const override;\n+\n+    bool CanGetAddresses(bool internal = false) override;\n+\n+    std::unique_ptr<SigningProvider> GetSigningProvider(const CScript& script) const override;\n+\n+    bool CanProvide(const CScript& script, SignatureData& sigdata) override;\n+\n+    uint256 GetID() const override;\n+\n+    // Map from Key ID to key metadata.\n+    std::map<CKeyID, CKeyMetadata> mapKeyMetadata GUARDED_BY(cs_KeyStore);\n+\n+    // Map from Script ID to key metadata (for watch-only keys).\n+    std::map<CScriptID, CKeyMetadata> m_script_metadata GUARDED_BY(cs_KeyStore);\n+\n+    //! Adds a key to the store, and saves it to disk.\n+    bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey) override EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+    //! Adds a key to the store, without saving it to disk (used by LoadWallet)\n+    bool LoadKey(const CKey& key, const CPubKey &pubkey);\n+    //! Adds an encrypted key to the store, and saves it to disk.\n+    bool AddCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n+    //! Adds an encrypted key to the store, without saving it to disk (used by LoadWallet)\n+    bool LoadCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n+    void UpdateTimeFirstKey(int64_t nCreateTime) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+    //! Adds a CScript to the store\n+    bool LoadCScript(const CScript& redeemScript);\n+    //! Load metadata (used by LoadWallet)\n+    void LoadKeyMetadata(const CKeyID& keyID, const CKeyMetadata &metadata);\n+    void LoadScriptMetadata(const CScriptID& script_id, const CKeyMetadata &metadata);\n+    //! Generate a new key\n+    CPubKey GenerateNewKey(WalletBatch& batch, bool internal = false) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+\n+    /* Set the HD chain model (chain child index counters) */\n+    void SetHDChain(const CHDChain& chain, bool memonly);\n+    const CHDChain& GetHDChain() const { return hdChain; }\n+\n+    //! Adds a watch-only address to the store, without saving it to disk (used by LoadWallet)\n+    bool LoadWatchOnly(const CScript &dest);\n+    //! Returns whether the watch-only script is in the wallet\n+    bool HaveWatchOnly(const CScript &dest) const;\n+    //! Returns whether there are any watch-only things in the wallet\n+    bool HaveWatchOnly() const;\n+    //! Remove a watch only script from the keystore\n+    bool RemoveWatchOnly(const CScript &dest);\n+    bool AddWatchOnly(const CScript& dest, int64_t nCreateTime) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+\n+    //! Fetches a pubkey from mapWatchKeys if it exists there\n+    bool GetWatchPubKey(const CKeyID &address, CPubKey &pubkey_out) const;\n+\n+    /* SigningProvider overrides */\n+    bool HaveKey(const CKeyID &address) const override;\n+    bool GetKey(const CKeyID &address, CKey& keyOut) const override;\n+    bool GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const override;\n+    bool AddCScript(const CScript& redeemScript) override;\n+    bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const override;\n+\n+    //! Load a keypool entry\n+    void LoadKeyPool(int64_t nIndex, const CKeyPool &keypool);\n+    bool TopUpKeyPool(unsigned int kpSize = 0);\n+    bool NewKeyPool();\n+    void MarkPreSplitKeys() EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+\n+    bool ImportScripts(const std::set<CScript> scripts, int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+    bool ImportPrivKeys(const std::map<CKeyID, CKey>& privkey_map, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+    bool ImportPubKeys(const std::vector<CKeyID>& ordered_pubkeys, const std::map<CKeyID, CPubKey>& pubkey_map, const std::map<CKeyID, std::pair<CPubKey, KeyOriginInfo>>& key_origins, const bool add_keypool, const bool internal, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+    bool ImportScriptPubKeys(const std::set<CScript>& script_pub_keys, const bool have_solving_data, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+\n+    /* Returns true if the wallet can generate new keys */\n+    bool CanGenerateKeys();\n+\n+    /* Generates a new HD seed (will not be activated) */\n+    CPubKey GenerateNewSeed();\n+\n+    /* Derives a new HD seed (will not be activated) */\n+    CPubKey DeriveNewSeed(const CKey& key);\n+\n+    /* Set the current HD seed (will reset the chain child index counters)\n+       Sets the seed's version based on the current wallet version (so the\n+       caller must ensure the current wallet version is correct before calling\n+       this function). */\n+    void SetHDSeed(const CPubKey& key);\n+\n+    /**\n+     * Explicitly make the wallet learn the related scripts for outputs to the\n+     * given key. This is purely to make the wallet file compatible with older\n+     * software, as FillableSigningProvider automatically does this implicitly for all\n+     * keys now.\n+     */\n+    void LearnRelatedScripts(const CPubKey& key, OutputType);\n+\n+    /**\n+     * Same as LearnRelatedScripts, but when the OutputType is not known (and could\n+     * be anything).\n+     */\n+    void LearnAllRelatedScripts(const CPubKey& key);\n+\n+    /**\n+     * Marks all keys in the keypool up to and including reserve_key as used.\n+     */\n+    void MarkReserveKeysAsUsed(int64_t keypool_id) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+    const std::map<CKeyID, int64_t>& GetAllReserveKeys() const { return m_pool_key_to_index; }\n+};\n+\n+/** Wraps a LegacyScriptPubKeyMan so that it can be returned in a new unique_ptr */",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": 460,
      "original_position": 465,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "5f641a5c8fc446a6df61aeab270583efcafa0f7e",
      "in_reply_to_id": 324821792,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think `LegacySigningProvider` class adds some clarity.",
      "created_at": "2019-09-17T16:07:26Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r325256738",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325256738"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 460,
      "original_line": 460,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325277192",
      "pull_request_review_id": 289283445,
      "id": 325277192,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNTI3NzE5Mg==",
      "diff_hunk": "@@ -5042,3 +5043,11 @@ void CWallet::SetupLegacyScriptPubKeyMan()\n     }\n     assert(m_spk_managers.size() == 1);\n }\n+\n+void CWallet::ConnectScriptPubKeyManNotifiers()\n+{\n+    for (const auto& spk_man_pair : m_spk_managers) {\n+        spk_man_pair.second->NotifyWatchonlyChanged.connect(NotifyWatchonlyChanged);\n+        spk_man_pair.second->NotifyCanGetAddressesChanged.connect(NotifyCanGetAddressesChanged);",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 17,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "65b9a1376d98003b32ebd599f733dcedbbb2f9e9",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Shouldn't this only loop over active `ScriptPubKeyMan`s?",
      "created_at": "2019-09-17T16:51:07Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r325277192",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325277192"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4147,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325278591",
      "pull_request_review_id": 289283445,
      "id": 325278591,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNTI3ODU5MQ==",
      "diff_hunk": "@@ -0,0 +1,484 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+#define BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <wallet/crypter.h>\n+#include <wallet/ismine.h>\n+#include <wallet/walletdb.h>\n+#include <wallet/walletutil.h>\n+\n+#include <functional>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+enum class OutputType;\n+\n+//! Default for -keypool\n+static const unsigned int DEFAULT_KEYPOOL_SIZE = 1000;\n+\n+std::vector<CKeyID> GetAffectedKeys(const CScript& spk, const SigningProvider& provider);\n+\n+/** A key from a CWallet's keypool\n+ *\n+ * The wallet holds one (for pre HD-split wallets) or several keypools. These\n+ * are sets of keys that have not yet been used to provide addresses or receive\n+ * change.\n+ *\n+ * The Bitcoin Core wallet was originally a collection of unrelated private\n+ * keys with their associated addresses. If a non-HD wallet generated a\n+ * key/address, gave that address out and then restored a backup from before\n+ * that key's generation, then any funds sent to that address would be\n+ * lost definitively.\n+ *\n+ * The keypool was implemented to avoid this scenario (commit: 10384941). The\n+ * wallet would generate a set of keys (100 by default). When a new public key\n+ * was required, either to give out as an address or to use in a change output,\n+ * it would be drawn from the keypool. The keypool would then be topped up to\n+ * maintain 100 keys. This ensured that as long as the wallet hadn't used more\n+ * than 100 keys since the previous backup, all funds would be safe, since a\n+ * restored wallet would be able to scan for all owned addresses.\n+ *\n+ * A keypool also allowed encrypted wallets to give out addresses without\n+ * having to be decrypted to generate a new private key.\n+ *\n+ * With the introduction of HD wallets (commit: f1902510), the keypool\n+ * essentially became an address look-ahead pool. Restoring old backups can no\n+ * longer definitively lose funds as long as the addresses used were from the\n+ * wallet's HD seed (since all private keys can be rederived from the seed).\n+ * However, if many addresses were used since the backup, then the wallet may\n+ * not know how far ahead in the HD chain to look for its addresses. The\n+ * keypool is used to implement a 'gap limit'. The keypool maintains a set of\n+ * keys (by default 1000) ahead of the last used key and scans for the\n+ * addresses of those keys.  This avoids the risk of not seeing transactions\n+ * involving the wallet's addresses, or of re-using the same address.\n+ *\n+ * The HD-split wallet feature added a second keypool (commit: 02592f4c). There\n+ * is an external keypool (for addresses to hand out) and an internal keypool\n+ * (for change addresses).\n+ *\n+ * Keypool keys are stored in the wallet/keystore's keymap. The keypool data is\n+ * stored as sets of indexes in the wallet (setInternalKeyPool,\n+ * setExternalKeyPool and set_pre_split_keypool), and a map from the key to the\n+ * index (m_pool_key_to_index). The CKeyPool object is used to\n+ * serialize/deserialize the pool data to/from the database.\n+ */\n+class CKeyPool\n+{\n+public:\n+    //! The time at which the key was generated. Set in AddKeypoolPubKeyWithDB\n+    int64_t nTime;\n+    //! The public key\n+    CPubKey vchPubKey;\n+    //! Whether this keypool entry is in the internal keypool (for change outputs)\n+    bool fInternal;\n+    //! Whether this key was generated for a keypool before the wallet was upgraded to HD-split\n+    bool m_pre_split;\n+\n+    CKeyPool();\n+    CKeyPool(const CPubKey& vchPubKeyIn, bool internalIn);\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        int nVersion = s.GetVersion();\n+        if (!(s.GetType() & SER_GETHASH))\n+            READWRITE(nVersion);\n+        READWRITE(nTime);\n+        READWRITE(vchPubKey);\n+        if (ser_action.ForRead()) {\n+            try {\n+                READWRITE(fInternal);\n+            }\n+            catch (std::ios_base::failure&) {\n+                /* flag as external address if we can't read the internal boolean\n+                   (this will be the case for any wallet before the HD chain split version) */\n+                fInternal = false;\n+            }\n+            try {\n+                READWRITE(m_pre_split);\n+            }\n+            catch (std::ios_base::failure&) {\n+                /* flag as postsplit address if we can't read the m_pre_split boolean\n+                   (this will be the case for any wallet that upgrades to HD chain split)*/\n+                m_pre_split = false;\n+            }\n+        }\n+        else {\n+            READWRITE(fInternal);\n+            READWRITE(m_pre_split);\n+        }\n+    }\n+};\n+\n+typedef std::function<void(uint64_t)> FlagFunc;\n+typedef std::function<void(WalletBatch&, uint64_t)> FlagFuncWithDB;\n+typedef std::function<bool(uint64_t)> FlagSetFunc;\n+typedef std::function<bool(enum WalletFeature)> VersionFunc;\n+typedef std::function<std::string()> NameFunc;\n+typedef std::function<void(enum WalletFeature)> SetVersionFunc;\n+\n+/*\n+ * A class implementing ScriptPubKeyMan manages some (or all) scriptPubKeys used in a wallet.\n+ * It contains the scripts and keys related to the scriptPubKeys it manages.\n+ * A ScriptPubKeyMan will be able to give out scriptPubKeys to be used, as well as marking\n+ * when a scriptPubKey has been used. It also handles when and how to store a scriptPubKey\n+ * and it's related scripts and keys, including encryption.\n+ */\n+\n+class ScriptPubKeyMan\n+{\n+protected:\n+    FlagSetFunc IsWalletFlagSet; // Function pointer to function that determines if a wallet flag is set\n+    FlagFunc SetWalletFlag; // Function pointer to function to set wallet flags\n+    FlagFuncWithDB UnsetWalletFlagWithDB; // Function pointer to function to unset wallet flags\n+    VersionFunc CanSupportFeature; // Function pointer to function that indicates whether the feature is supported\n+    NameFunc GetDisplayName; // Function pointer to GetDisplayName to get the name of a wallet for WalletLogPrintf\n+    SetVersionFunc SetMinVersion; // Function pointer to SetMinVersion in the wallet\n+\n+    /** Internal database handle. */\n+    std::shared_ptr<WalletDatabase> m_database;\n+\n+public:\n+    ScriptPubKeyMan(FlagSetFunc is_set_func, FlagFunc set_flag_func, FlagFuncWithDB unset_flag_func, VersionFunc feature_sup_func, NameFunc wallet_name_func, SetVersionFunc set_version_func, std::shared_ptr<WalletDatabase> database)\n+        :   IsWalletFlagSet(is_set_func),\n+            SetWalletFlag(set_flag_func),\n+            UnsetWalletFlagWithDB(unset_flag_func),\n+            CanSupportFeature(feature_sup_func),\n+            GetDisplayName(wallet_name_func),\n+            SetMinVersion(set_version_func),\n+            m_database(database)\n+        {}\n+\n+    virtual ~ScriptPubKeyMan() {};\n+    virtual bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) { return false; }\n+    virtual isminetype IsMine(const CScript& script) const { return ISMINE_NO; }\n+\n+    virtual bool IsCrypted() const { return false; }\n+    virtual bool IsLocked() const { return false; }\n+    virtual bool Lock() { return false; }\n+\n+    virtual bool Unlock(const CKeyingMaterial& vMasterKeyIn, bool accept_no_keys = false) { return false; }\n+    virtual bool Encrypt(CKeyingMaterial& vMasterKeyIn, WalletBatch* batch) { return false; }\n+\n+    virtual bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool) { return false; }\n+    virtual void KeepDestination(int64_t index) {}\n+    virtual void ReturnDestination(int64_t index, bool internal, const CTxDestination& addr) {}\n+\n+    virtual bool TopUp(unsigned int size = 0) { return false; }\n+\n+    //! Mark unused addresses as being used\n+    virtual void MarkUnusedAddresses(const CScript& script) {}\n+\n+    //! Upgrade stored CKeyMetadata objects to store key origin info as KeyOriginInfo\n+    virtual void UpgradeKeyMetadata() {}\n+\n+    /** Sets up the key generation stuff, i.e. generates new HD seeds and sets them as active.\n+      * Returns false if already setup or setup fails, true if setup is successful\n+      * Set force=true to make it re-setup if already setup, used for upgrades\n+      */\n+    virtual bool SetupGeneration(bool force = false) { return false; }\n+\n+    /* Returns true if HD is enabled */\n+    virtual bool IsHDEnabled() const { return false; }\n+\n+    /* Returns true if the wallet can give out new addresses. This means it has keys in the keypool or can generate new keys */\n+    virtual bool CanGetAddresses(bool internal = false) { return false; }\n+\n+    /** Upgrades the wallet to the specified version */\n+    virtual bool Upgrade(int prev_version, int new_version, std::string& error) { return false; }\n+\n+    virtual bool HavePrivateKeys() const { return false; }\n+\n+    //! The action to do when the DB needs rewrite\n+    virtual void RewriteDB() {}\n+\n+    virtual int64_t GetOldestKeyPoolTime() { return GetTime(); }\n+\n+    virtual size_t KeypoolCountExternalKeys() { return 0; }\n+    virtual unsigned int GetKeypoolSize() const { return 0; }\n+\n+    virtual int64_t GetTimeFirstKey() const { return 0; }\n+\n+    virtual const CKeyMetadata* GetMetadata(uint160 id) const { return nullptr; }\n+\n+    virtual std::unique_ptr<SigningProvider> GetSigningProvider(const CScript& script) const { return nullptr; }\n+\n+    /** Whether this ScriptPubKeyMan can provide a SigningProvider (via GetSigningProvider) that, combined with\n+      * sigdata, can produce a valid signature.\n+      */\n+    virtual bool CanProvide(const CScript& script, SignatureData& sigdata) { return false; }\n+\n+    virtual uint256 GetID() const { return uint256(); }\n+\n+    /** Prepends the wallet name in logging output to ease debugging in multi-wallet use cases */\n+    template<typename... Params>\n+    void WalletLogPrintf(std::string fmt, Params... parameters) const {\n+        LogPrintf((\"%s \" + fmt).c_str(), GetDisplayName(), parameters...);\n+    };\n+\n+    /** Watch-only address added */\n+    boost::signals2::signal<void (bool fHaveWatchOnly)> NotifyWatchonlyChanged;\n+\n+    /** Keypool has new keys */\n+    boost::signals2::signal<void ()> NotifyCanGetAddressesChanged;\n+};\n+\n+class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProvider\n+{\n+private:\n+    //! if fUseCrypto is true, mapKeys must be empty\n+    //! if fUseCrypto is false, vMasterKey must be empty\n+    std::atomic<bool> fUseCrypto{false};\n+\n+    bool SetCrypted();\n+\n+    //! keeps track of whether Unlock has run a thorough check before\n+    bool fDecryptionThoroughlyChecked = false;\n+\n+    //! Master encryption key for the wallet. Keys are encrypted with this.\n+    //! Wallet is unlocked if this is not null.\n+    CKeyingMaterial vMasterKey GUARDED_BY(cs_KeyStore);",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": null,
      "original_position": 246,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "fb0058ed68a18053959001a0191f3fbcfec50526",
      "in_reply_to_id": 323884483,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It makes sense to me to have `WalletStorage` only cover stuff that's global to the wallet, rather than unique to each  `ScriptPubKeyMan`. The end result is that this commit is now manageably small.\r\n\r\nHowever, at the PR level, shouldn't `CWallet`'s `IsCrypted()` be looping over all  `ScriptPubKeyMan`s, just like `SetCrypted()` does?\r\n\r\n_update: `IsCrypted()` doesn't loop, I was looking at `CWallet::EncryptWallet`_",
      "created_at": "2019-09-17T16:54:24Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r325278591",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325278591"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 244,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325289602",
      "pull_request_review_id": 289421916,
      "id": 325289602,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNTI4OTYwMg==",
      "diff_hunk": "@@ -283,10 +142,10 @@ class ReserveDestination\n protected:\n     //! The wallet to reserve from\n     CWallet* pwallet;\n+    //! The ScriptPubKeyMan to reserve from. Based on type when GetReservedDestination is called\n+    ScriptPubKeyMan* spk_man;",
      "path": "src/wallet/wallet.h",
      "position": null,
      "original_position": 182,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "059824a35f67be760a6050d5379c138d56fa788f",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Would be good to prefix with `m_`",
      "created_at": "2019-09-17T17:20:14Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r325289602",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325289602"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 146,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325301640",
      "pull_request_review_id": 289437431,
      "id": 325301640,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNTMwMTY0MA==",
      "diff_hunk": "@@ -0,0 +1,484 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+#define BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <wallet/crypter.h>\n+#include <wallet/ismine.h>\n+#include <wallet/walletdb.h>\n+#include <wallet/walletutil.h>\n+\n+#include <functional>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+enum class OutputType;\n+\n+//! Default for -keypool\n+static const unsigned int DEFAULT_KEYPOOL_SIZE = 1000;\n+\n+std::vector<CKeyID> GetAffectedKeys(const CScript& spk, const SigningProvider& provider);\n+\n+/** A key from a CWallet's keypool\n+ *\n+ * The wallet holds one (for pre HD-split wallets) or several keypools. These\n+ * are sets of keys that have not yet been used to provide addresses or receive\n+ * change.\n+ *\n+ * The Bitcoin Core wallet was originally a collection of unrelated private\n+ * keys with their associated addresses. If a non-HD wallet generated a\n+ * key/address, gave that address out and then restored a backup from before\n+ * that key's generation, then any funds sent to that address would be\n+ * lost definitively.\n+ *\n+ * The keypool was implemented to avoid this scenario (commit: 10384941). The\n+ * wallet would generate a set of keys (100 by default). When a new public key\n+ * was required, either to give out as an address or to use in a change output,\n+ * it would be drawn from the keypool. The keypool would then be topped up to\n+ * maintain 100 keys. This ensured that as long as the wallet hadn't used more\n+ * than 100 keys since the previous backup, all funds would be safe, since a\n+ * restored wallet would be able to scan for all owned addresses.\n+ *\n+ * A keypool also allowed encrypted wallets to give out addresses without\n+ * having to be decrypted to generate a new private key.\n+ *\n+ * With the introduction of HD wallets (commit: f1902510), the keypool\n+ * essentially became an address look-ahead pool. Restoring old backups can no\n+ * longer definitively lose funds as long as the addresses used were from the\n+ * wallet's HD seed (since all private keys can be rederived from the seed).\n+ * However, if many addresses were used since the backup, then the wallet may\n+ * not know how far ahead in the HD chain to look for its addresses. The\n+ * keypool is used to implement a 'gap limit'. The keypool maintains a set of\n+ * keys (by default 1000) ahead of the last used key and scans for the\n+ * addresses of those keys.  This avoids the risk of not seeing transactions\n+ * involving the wallet's addresses, or of re-using the same address.\n+ *\n+ * The HD-split wallet feature added a second keypool (commit: 02592f4c). There\n+ * is an external keypool (for addresses to hand out) and an internal keypool\n+ * (for change addresses).\n+ *\n+ * Keypool keys are stored in the wallet/keystore's keymap. The keypool data is\n+ * stored as sets of indexes in the wallet (setInternalKeyPool,\n+ * setExternalKeyPool and set_pre_split_keypool), and a map from the key to the\n+ * index (m_pool_key_to_index). The CKeyPool object is used to\n+ * serialize/deserialize the pool data to/from the database.\n+ */\n+class CKeyPool\n+{\n+public:\n+    //! The time at which the key was generated. Set in AddKeypoolPubKeyWithDB\n+    int64_t nTime;\n+    //! The public key\n+    CPubKey vchPubKey;\n+    //! Whether this keypool entry is in the internal keypool (for change outputs)\n+    bool fInternal;\n+    //! Whether this key was generated for a keypool before the wallet was upgraded to HD-split\n+    bool m_pre_split;\n+\n+    CKeyPool();\n+    CKeyPool(const CPubKey& vchPubKeyIn, bool internalIn);\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        int nVersion = s.GetVersion();\n+        if (!(s.GetType() & SER_GETHASH))\n+            READWRITE(nVersion);\n+        READWRITE(nTime);\n+        READWRITE(vchPubKey);\n+        if (ser_action.ForRead()) {\n+            try {\n+                READWRITE(fInternal);\n+            }\n+            catch (std::ios_base::failure&) {\n+                /* flag as external address if we can't read the internal boolean\n+                   (this will be the case for any wallet before the HD chain split version) */\n+                fInternal = false;\n+            }\n+            try {\n+                READWRITE(m_pre_split);\n+            }\n+            catch (std::ios_base::failure&) {\n+                /* flag as postsplit address if we can't read the m_pre_split boolean\n+                   (this will be the case for any wallet that upgrades to HD chain split)*/\n+                m_pre_split = false;\n+            }\n+        }\n+        else {\n+            READWRITE(fInternal);\n+            READWRITE(m_pre_split);\n+        }\n+    }\n+};\n+\n+typedef std::function<void(uint64_t)> FlagFunc;\n+typedef std::function<void(WalletBatch&, uint64_t)> FlagFuncWithDB;\n+typedef std::function<bool(uint64_t)> FlagSetFunc;\n+typedef std::function<bool(enum WalletFeature)> VersionFunc;\n+typedef std::function<std::string()> NameFunc;\n+typedef std::function<void(enum WalletFeature)> SetVersionFunc;\n+\n+/*\n+ * A class implementing ScriptPubKeyMan manages some (or all) scriptPubKeys used in a wallet.\n+ * It contains the scripts and keys related to the scriptPubKeys it manages.\n+ * A ScriptPubKeyMan will be able to give out scriptPubKeys to be used, as well as marking\n+ * when a scriptPubKey has been used. It also handles when and how to store a scriptPubKey\n+ * and it's related scripts and keys, including encryption.\n+ */\n+\n+class ScriptPubKeyMan\n+{\n+protected:\n+    FlagSetFunc IsWalletFlagSet; // Function pointer to function that determines if a wallet flag is set\n+    FlagFunc SetWalletFlag; // Function pointer to function to set wallet flags\n+    FlagFuncWithDB UnsetWalletFlagWithDB; // Function pointer to function to unset wallet flags\n+    VersionFunc CanSupportFeature; // Function pointer to function that indicates whether the feature is supported\n+    NameFunc GetDisplayName; // Function pointer to GetDisplayName to get the name of a wallet for WalletLogPrintf\n+    SetVersionFunc SetMinVersion; // Function pointer to SetMinVersion in the wallet\n+\n+    /** Internal database handle. */\n+    std::shared_ptr<WalletDatabase> m_database;\n+\n+public:\n+    ScriptPubKeyMan(FlagSetFunc is_set_func, FlagFunc set_flag_func, FlagFuncWithDB unset_flag_func, VersionFunc feature_sup_func, NameFunc wallet_name_func, SetVersionFunc set_version_func, std::shared_ptr<WalletDatabase> database)\n+        :   IsWalletFlagSet(is_set_func),\n+            SetWalletFlag(set_flag_func),\n+            UnsetWalletFlagWithDB(unset_flag_func),\n+            CanSupportFeature(feature_sup_func),\n+            GetDisplayName(wallet_name_func),\n+            SetMinVersion(set_version_func),\n+            m_database(database)\n+        {}\n+\n+    virtual ~ScriptPubKeyMan() {};\n+    virtual bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) { return false; }\n+    virtual isminetype IsMine(const CScript& script) const { return ISMINE_NO; }\n+\n+    virtual bool IsCrypted() const { return false; }\n+    virtual bool IsLocked() const { return false; }\n+    virtual bool Lock() { return false; }\n+\n+    virtual bool Unlock(const CKeyingMaterial& vMasterKeyIn, bool accept_no_keys = false) { return false; }\n+    virtual bool Encrypt(CKeyingMaterial& vMasterKeyIn, WalletBatch* batch) { return false; }\n+\n+    virtual bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool) { return false; }\n+    virtual void KeepDestination(int64_t index) {}\n+    virtual void ReturnDestination(int64_t index, bool internal, const CTxDestination& addr) {}\n+\n+    virtual bool TopUp(unsigned int size = 0) { return false; }\n+\n+    //! Mark unused addresses as being used\n+    virtual void MarkUnusedAddresses(const CScript& script) {}\n+\n+    //! Upgrade stored CKeyMetadata objects to store key origin info as KeyOriginInfo\n+    virtual void UpgradeKeyMetadata() {}\n+\n+    /** Sets up the key generation stuff, i.e. generates new HD seeds and sets them as active.\n+      * Returns false if already setup or setup fails, true if setup is successful\n+      * Set force=true to make it re-setup if already setup, used for upgrades\n+      */\n+    virtual bool SetupGeneration(bool force = false) { return false; }\n+\n+    /* Returns true if HD is enabled */\n+    virtual bool IsHDEnabled() const { return false; }\n+\n+    /* Returns true if the wallet can give out new addresses. This means it has keys in the keypool or can generate new keys */\n+    virtual bool CanGetAddresses(bool internal = false) { return false; }\n+\n+    /** Upgrades the wallet to the specified version */\n+    virtual bool Upgrade(int prev_version, int new_version, std::string& error) { return false; }\n+\n+    virtual bool HavePrivateKeys() const { return false; }\n+\n+    //! The action to do when the DB needs rewrite\n+    virtual void RewriteDB() {}\n+\n+    virtual int64_t GetOldestKeyPoolTime() { return GetTime(); }\n+\n+    virtual size_t KeypoolCountExternalKeys() { return 0; }\n+    virtual unsigned int GetKeypoolSize() const { return 0; }\n+\n+    virtual int64_t GetTimeFirstKey() const { return 0; }\n+\n+    virtual const CKeyMetadata* GetMetadata(uint160 id) const { return nullptr; }\n+\n+    virtual std::unique_ptr<SigningProvider> GetSigningProvider(const CScript& script) const { return nullptr; }\n+\n+    /** Whether this ScriptPubKeyMan can provide a SigningProvider (via GetSigningProvider) that, combined with\n+      * sigdata, can produce a valid signature.\n+      */\n+    virtual bool CanProvide(const CScript& script, SignatureData& sigdata) { return false; }\n+\n+    virtual uint256 GetID() const { return uint256(); }\n+\n+    /** Prepends the wallet name in logging output to ease debugging in multi-wallet use cases */\n+    template<typename... Params>\n+    void WalletLogPrintf(std::string fmt, Params... parameters) const {\n+        LogPrintf((\"%s \" + fmt).c_str(), GetDisplayName(), parameters...);\n+    };\n+\n+    /** Watch-only address added */\n+    boost::signals2::signal<void (bool fHaveWatchOnly)> NotifyWatchonlyChanged;\n+\n+    /** Keypool has new keys */\n+    boost::signals2::signal<void ()> NotifyCanGetAddressesChanged;\n+};\n+\n+class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProvider\n+{\n+private:\n+    //! if fUseCrypto is true, mapKeys must be empty\n+    //! if fUseCrypto is false, vMasterKey must be empty\n+    std::atomic<bool> fUseCrypto{false};\n+\n+    bool SetCrypted();\n+\n+    //! keeps track of whether Unlock has run a thorough check before\n+    bool fDecryptionThoroughlyChecked = false;\n+\n+    //! Master encryption key for the wallet. Keys are encrypted with this.\n+    //! Wallet is unlocked if this is not null.\n+    CKeyingMaterial vMasterKey GUARDED_BY(cs_KeyStore);",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": null,
      "original_position": 246,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "fb0058ed68a18053959001a0191f3fbcfec50526",
      "in_reply_to_id": 323884483,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> However, at the PR level, shouldn't `CWallet`'s `IsCrypted()` be looping over all `ScriptPubKeyMan`s, just like `SetCrypted()` does?\r\n\r\n`SetCrypted` doesn't loop.\r\n\r\nThe thought I had here was that it could be possible that a wallet is considered encrypted (by virtue of having an encryption key set) without any of the `ScriptPubKeyMan`s having any of them actually encrypting anything and thus be `IsCrypted() == false`.",
      "created_at": "2019-09-17T17:46:48Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r325301640",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325301640"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 244,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325303848",
      "pull_request_review_id": 289440373,
      "id": 325303848,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNTMwMzg0OA==",
      "diff_hunk": "@@ -298,7 +298,22 @@ std::unique_ptr<SigningProvider> LegacyScriptPubKeyMan::GetSigningProvider(const\n \n bool LegacyScriptPubKeyMan::CanProvide(const CScript& script, SignatureData& sigdata)\n {",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 503,
      "original_position": 3,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "803e3250f685d7ec556c1a4dd5c6241f68f447c7",
      "in_reply_to_id": 325192947,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Of course there is no pre-box equivalent, CWallet was just passed in as the SiginingProvider always!",
      "created_at": "2019-09-17T17:51:36Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r325303848",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325303848"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 503,
      "original_line": 503,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325304039",
      "pull_request_review_id": 289440621,
      "id": 325304039,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNTMwNDAzOQ==",
      "diff_hunk": "@@ -0,0 +1,148 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+#define BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <wallet/crypter.h>\n+#include <wallet/ismine.h>\n+#include <wallet/walletdb.h>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+enum class OutputType;\n+\n+/*\n+ * A class implementing ScriptPubKeyMan manages some (or all) scriptPubKeys used in a wallet.\n+ * It contains the scripts and keys related to the scriptPubKeys it manages.\n+ * A ScriptPubKeyMan will be able to give out scriptPubKeys to be used, as well as marking\n+ * when a scriptPubKey has been used. It also handles when and how to store a scriptPubKey\n+ * and it's related scripts and keys, including encryption.\n+ */\n+class ScriptPubKeyMan\n+{\n+public:\n+    virtual ~ScriptPubKeyMan() {};\n+    virtual bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) { return false; }\n+    virtual isminetype IsMine(const CScript& script) const { return ISMINE_NO; }",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": 166,
      "original_position": 30,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "1e572c14d88ff900a568e9a840ea8cd82809a0e4",
      "in_reply_to_id": 325233797,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No",
      "created_at": "2019-09-17T17:52:03Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r325304039",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325304039"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 166,
      "original_line": 166,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325304118",
      "pull_request_review_id": 289440718,
      "id": 325304118,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNTMwNDExOA==",
      "diff_hunk": "@@ -0,0 +1,148 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+#define BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <wallet/crypter.h>\n+#include <wallet/ismine.h>\n+#include <wallet/walletdb.h>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+enum class OutputType;\n+\n+/*\n+ * A class implementing ScriptPubKeyMan manages some (or all) scriptPubKeys used in a wallet.\n+ * It contains the scripts and keys related to the scriptPubKeys it manages.\n+ * A ScriptPubKeyMan will be able to give out scriptPubKeys to be used, as well as marking\n+ * when a scriptPubKey has been used. It also handles when and how to store a scriptPubKey\n+ * and it's related scripts and keys, including encryption.\n+ */\n+class ScriptPubKeyMan\n+{\n+public:\n+    virtual ~ScriptPubKeyMan() {};\n+    virtual bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) { return false; }\n+    virtual isminetype IsMine(const CScript& script) const { return ISMINE_NO; }\n+\n+    virtual bool IsCrypted() const { return false; }\n+    virtual bool IsLocked() const { return false; }\n+    virtual bool Lock() { return false; }\n+\n+    virtual bool Unlock(const CKeyingMaterial& vMasterKeyIn, bool accept_no_keys = false) { return false; }\n+    virtual bool Encrypt(CKeyingMaterial& vMasterKeyIn, WalletBatch* batch) { return false; }\n+\n+    virtual bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool) { return false; }\n+    virtual void KeepDestination(int64_t index) {}\n+    virtual void ReturnDestination(int64_t index, bool internal, const CTxDestination& addr) {}\n+\n+    virtual bool TopUp(unsigned int size = 0) { return false; }\n+\n+    //! Mark unused addresses as being used\n+    virtual void MarkUnusedAddresses(const CScript& script) {}\n+\n+    //! Upgrade stored CKeyMetadata objects to store key origin info as KeyOriginInfo\n+    virtual void UpgradeKeyMetadata() {}\n+\n+    /** Sets up the key generation stuff, i.e. generates new HD seeds and sets them as active.\n+      * Returns false if already setup or setup fails, true if setup is successful\n+      * Set force=true to make it re-setup if already setup, used for upgrades\n+      */\n+    virtual bool SetupGeneration(bool force = false) { return false; }\n+\n+    /* Returns true if HD is enabled */\n+    virtual bool IsHDEnabled() const { return false; }\n+\n+    /* Returns true if the wallet can give out new addresses. This means it has keys in the keypool or can generate new keys */\n+    virtual bool CanGetAddresses(bool internal = false) { return false; }\n+\n+    /** Upgrades the wallet to the specified version */\n+    virtual bool Upgrade(int prev_version, int new_version, std::string& error) { return false; }",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": null,
      "original_position": 64,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "1e572c14d88ff900a568e9a840ea8cd82809a0e4",
      "in_reply_to_id": 325235296,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No",
      "created_at": "2019-09-17T17:52:12Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r325304118",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325304118"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 197,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325304925",
      "pull_request_review_id": 289441745,
      "id": 325304925,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNTMwNDkyNQ==",
      "diff_hunk": "@@ -10,11 +10,25 @@\n #include <wallet/crypter.h>\n #include <wallet/ismine.h>\n #include <wallet/walletdb.h>\n+#include <wallet/walletutil.h>\n \n #include <boost/signals2/signal.hpp>\n \n enum class OutputType;\n \n+class WalletStorage",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": 24,
      "original_position": 10,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "957ac1c094ba7a9d76a78824a023651a0ca066db",
      "in_reply_to_id": 325245279,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "To avoid circular dependencies.\r\n\r\nI am not moving this commit. It belongs right there.\r\n\r\n***\r\n\r\nIt serves the exact same purpose as the commits it replaces does, to provide access to some functions that require reading and/or modifying some wallet storage things like the database handle, the wallet version number, and wallet flags. It's there to avoid having callbacks and binding functions.",
      "created_at": "2019-09-17T17:53:50Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r325304925",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325304925"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 24,
      "original_line": 24,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325305843",
      "pull_request_review_id": 289442827,
      "id": 325305843,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNTMwNTg0Mw==",
      "diff_hunk": "@@ -4947,3 +4947,30 @@ bool CWallet::AddCryptedKeyInner(const CPubKey &vchPubKey, const std::vector<uns\n     ImplicitlyLearnRelatedKeyScripts(vchPubKey);\n     return true;\n }\n+\n+LegacyScriptPubKeyMan* CWallet::GetLegacyScriptPubKeyMan()\n+{\n+    SetupLegacyScriptPubKeyMan();\n+    // All active ScriptPubKeyMans are the same LegacyScriptPubKeyMan\n+    return (LegacyScriptPubKeyMan*)m_internal_spk_managers[OutputType::LEGACY];\n+}\n+\n+void CWallet::SetupLegacyScriptPubKeyMan()\n+{\n+    if (m_internal_spk_managers.empty() && m_external_spk_managers.empty() && m_spk_managers.empty()) {\n+        auto spk_manager = std::unique_ptr<ScriptPubKeyMan>(new LegacyScriptPubKeyMan());\n+        for (const auto& type : OUTPUT_TYPES) {\n+            m_internal_spk_managers[type] = spk_manager.get();\n+            m_external_spk_managers[type] = spk_manager.get();\n+        }\n+        m_spk_managers[spk_manager->GetID()] = std::move(spk_manager);\n+    }\n+    // These all need to exist and be the same\n+    assert(m_internal_spk_managers.count(OutputType::LEGACY) > 0);\n+    ScriptPubKeyMan* spk_man = m_internal_spk_managers.at(OutputType::LEGACY);\n+    for (const auto& type : OUTPUT_TYPES) {\n+        assert(m_internal_spk_managers.at(type) == spk_man);\n+        assert(m_external_spk_managers.at(type) == spk_man);\n+    }\n+    assert(m_spk_managers.size() == 1);",
      "path": "src/wallet/wallet.cpp",
      "position": 1748,
      "original_position": 29,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "04aba6b8af0df2cb7f8dac8105f16746f4cb0aac",
      "in_reply_to_id": 325251003,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think that's necessary to point out.",
      "created_at": "2019-09-17T17:55:31Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r325305843",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325305843"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4118,
      "original_line": 4118,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325306132",
      "pull_request_review_id": 289443156,
      "id": 325306132,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNTMwNjEzMg==",
      "diff_hunk": "@@ -4948,6 +4948,58 @@ bool CWallet::AddCryptedKeyInner(const CPubKey &vchPubKey, const std::vector<uns\n     return true;\n }\n \n+std::set<ScriptPubKeyMan*> CWallet::GetActiveScriptPubKeyMans() const",
      "path": "src/wallet/wallet.cpp",
      "position": 1571,
      "original_position": 4,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "15a633b8dc65e376cefb4fae0866c171d699d6bf",
      "in_reply_to_id": 325253320,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`m_spk_managers` can have inactive `ScriptPubKeyMan`s.",
      "created_at": "2019-09-17T17:56:05Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r325306132",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325306132"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4020,
      "original_line": 4020,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325306523",
      "pull_request_review_id": 289443652,
      "id": 325306523,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNTMwNjUyMw==",
      "diff_hunk": "@@ -1375,6 +1375,16 @@ class CWallet final : public FillableSigningProvider, public WalletStorage, priv\n     /** Implement lookup of key origin information through wallet key metadata. */\n     bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const override;\n \n+    std::set<ScriptPubKeyMan*> GetActiveScriptPubKeyMans() const;",
      "path": "src/wallet/wallet.h",
      "position": 574,
      "original_position": 4,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "15a633b8dc65e376cefb4fae0866c171d699d6bf",
      "in_reply_to_id": 325254154,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Active means that we actively draw addresses from them, i.e. they are in `m_internal_spk_managers` and `m_external_spk_managers`.",
      "created_at": "2019-09-17T17:56:55Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r325306523",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325306523"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1102,
      "original_line": 1102,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325313603",
      "pull_request_review_id": 289452786,
      "id": 325313603,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNTMxMzYwMw==",
      "diff_hunk": "@@ -0,0 +1,148 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+#define BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <wallet/crypter.h>\n+#include <wallet/ismine.h>\n+#include <wallet/walletdb.h>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+enum class OutputType;\n+\n+/*\n+ * A class implementing ScriptPubKeyMan manages some (or all) scriptPubKeys used in a wallet.\n+ * It contains the scripts and keys related to the scriptPubKeys it manages.\n+ * A ScriptPubKeyMan will be able to give out scriptPubKeys to be used, as well as marking\n+ * when a scriptPubKey has been used. It also handles when and how to store a scriptPubKey\n+ * and it's related scripts and keys, including encryption.\n+ */\n+class ScriptPubKeyMan\n+{\n+public:\n+    virtual ~ScriptPubKeyMan() {};\n+    virtual bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) { return false; }\n+    virtual isminetype IsMine(const CScript& script) const { return ISMINE_NO; }\n+\n+    virtual bool IsCrypted() const { return false; }\n+    virtual bool IsLocked() const { return false; }\n+    virtual bool Lock() { return false; }\n+\n+    virtual bool Unlock(const CKeyingMaterial& vMasterKeyIn, bool accept_no_keys = false) { return false; }\n+    virtual bool Encrypt(CKeyingMaterial& vMasterKeyIn, WalletBatch* batch) { return false; }\n+\n+    virtual bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool) { return false; }\n+    virtual void KeepDestination(int64_t index) {}\n+    virtual void ReturnDestination(int64_t index, bool internal, const CTxDestination& addr) {}\n+\n+    virtual bool TopUp(unsigned int size = 0) { return false; }\n+\n+    //! Mark unused addresses as being used\n+    virtual void MarkUnusedAddresses(const CScript& script) {}\n+\n+    //! Upgrade stored CKeyMetadata objects to store key origin info as KeyOriginInfo\n+    virtual void UpgradeKeyMetadata() {}\n+\n+    /** Sets up the key generation stuff, i.e. generates new HD seeds and sets them as active.\n+      * Returns false if already setup or setup fails, true if setup is successful\n+      * Set force=true to make it re-setup if already setup, used for upgrades\n+      */\n+    virtual bool SetupGeneration(bool force = false) { return false; }\n+\n+    /* Returns true if HD is enabled */\n+    virtual bool IsHDEnabled() const { return false; }\n+\n+    /* Returns true if the wallet can give out new addresses. This means it has keys in the keypool or can generate new keys */\n+    virtual bool CanGetAddresses(bool internal = false) { return false; }\n+\n+    /** Upgrades the wallet to the specified version */\n+    virtual bool Upgrade(int prev_version, int new_version, std::string& error) { return false; }\n+\n+    virtual bool HavePrivateKeys() const { return false; }\n+\n+    //! The action to do when the DB needs rewrite\n+    virtual void RewriteDB() {}\n+\n+    virtual int64_t GetOldestKeyPoolTime() { return GetTime(); }\n+\n+    virtual size_t KeypoolCountExternalKeys() { return 0; }\n+    virtual unsigned int GetKeypoolSize() const { return 0; }\n+\n+    virtual int64_t GetTimeFirstKey() const { return 0; }\n+\n+    virtual const CKeyMetadata* GetMetadata(uint160 id) const { return nullptr; }\n+\n+    virtual std::unique_ptr<SigningProvider> GetSigningProvider(const CScript& script) const { return nullptr; }\n+\n+    /** Whether this ScriptPubKeyMan can provide a SigningProvider (via GetSigningProvider) that, combined with\n+      * sigdata, can produce a valid signature.\n+      */\n+    virtual bool CanProvide(const CScript& script, SignatureData& sigdata) { return false; }\n+\n+    virtual uint256 GetID() const { return uint256(); }\n+\n+    /** Watch-only address added */\n+    boost::signals2::signal<void (bool fHaveWatchOnly)> NotifyWatchonlyChanged;",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": 229,
      "original_position": 90,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "1e572c14d88ff900a568e9a840ea8cd82809a0e4",
      "in_reply_to_id": 325236865,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It makes everything else more complicated to do so.",
      "created_at": "2019-09-17T18:12:36Z",
      "updated_at": "2019-10-21T15:46:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r325313603",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325313603"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 229,
      "original_line": 229,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325315671",
      "pull_request_review_id": 289455552,
      "id": 325315671,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNTMxNTY3MQ==",
      "diff_hunk": "@@ -553,3 +553,24 @@ void LegacyScriptPubKeyMan::DeriveNewChildKey(WalletBatch &batch, CKeyMetadata&\n     if (!batch.WriteHDChain(hdChain))\n         throw std::runtime_error(std::string(__func__) + \": Writing HD chain model failed\");\n }\n+",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 967,
      "original_position": 4,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "0d701bd42d0d9db9da858a4e6ae346ae0b1dda90",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Implement LoadKeyPool in LegacyScriptPubKeyMan\" (0d701bd42d0d9db9da858a4e6ae346ae0b1dda90)\r\n\r\nEmpty `src/qt/stqG2SM` file in this commit should be dropped",
      "created_at": "2019-09-17T18:17:14Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r325315671",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325315671"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 967,
      "original_line": 967,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325316375",
      "pull_request_review_id": 289456491,
      "id": 325316375,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNTMxNjM3NQ==",
      "diff_hunk": "@@ -78,22 +78,30 @@ CTxDestination AddAndGetDestinationForScript(FillableSigningProvider& keystore,\n {\n     // Add script to keystore\n     keystore.AddCScript(script);\n+    ScriptHash sh = ScriptHash(script);",
      "path": "src/outputtype.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "592177c771ee120472b11036ccf6e3aad0bba8af",
      "in_reply_to_id": 322385026,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> It's still not clear to me what this is doing.\r\n\r\nNor is it to me. It makes the tests pass. That's. it.",
      "created_at": "2019-09-17T18:18:56Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r325316375",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325316375"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 81,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325317135",
      "pull_request_review_id": 289457456,
      "id": 325317135,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNTMxNzEzNQ==",
      "diff_hunk": "@@ -296,7 +296,22 @@ std::unique_ptr<SigningProvider> LegacyScriptPubKeyMan::GetSigningProvider(const\n \n bool LegacyScriptPubKeyMan::CanProvide(const CScript& script, SignatureData& sigdata)\n {\n-    return false;\n+    if (IsMine(script) != ISMINE_NO) {\n+        return true;\n+    } else if (HaveCScript(CScriptID(script))) {\n+        return true;\n+    } else {\n+        ProduceSignature(*this, DUMMY_SIGNATURE_CREATOR, script, sigdata);\n+        if (!sigdata.signatures.empty()) {\n+            // If we could make signatures, make sure we have the private key",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 12,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "6c7c36276e26539edc8b281129bb30f1cd4a4fb8",
      "in_reply_to_id": 322337866,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm not writing an essay. It is completely unnecessary to describe what DUMMY_SIGNATURE_CREATOR does here as you can just look at the `sign.cpp/h` where it is defined and read the comments and code there yourself. It's less than 10 lines.",
      "created_at": "2019-09-17T18:20:33Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r325317135",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325317135"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 482,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325321384",
      "pull_request_review_id": 289463176,
      "id": 325321384,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNTMyMTM4NA==",
      "diff_hunk": "@@ -283,10 +142,10 @@ class ReserveDestination\n protected:\n     //! The wallet to reserve from\n     CWallet* pwallet;\n+    //! The ScriptPubKeyMan to reserve from. Based on type when GetReservedDestination is called\n+    ScriptPubKeyMan* spk_man;",
      "path": "src/wallet/wallet.h",
      "position": null,
      "original_position": 182,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "059824a35f67be760a6050d5379c138d56fa788f",
      "in_reply_to_id": 325289602,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2019-09-17T18:30:27Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r325321384",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325321384"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 146,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325321463",
      "pull_request_review_id": 289463285,
      "id": 325321463,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNTMyMTQ2Mw==",
      "diff_hunk": "@@ -553,3 +553,24 @@ void LegacyScriptPubKeyMan::DeriveNewChildKey(WalletBatch &batch, CKeyMetadata&\n     if (!batch.WriteHDChain(hdChain))\n         throw std::runtime_error(std::string(__func__) + \": Writing HD chain model failed\");\n }\n+",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 967,
      "original_position": 4,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "0d701bd42d0d9db9da858a4e6ae346ae0b1dda90",
      "in_reply_to_id": 325315671,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "How'd that get there? Removed it.",
      "created_at": "2019-09-17T18:30:38Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r325321463",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325321463"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 967,
      "original_line": 967,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325517950",
      "pull_request_review_id": 289714609,
      "id": 325517950,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNTUxNzk1MA==",
      "diff_hunk": "@@ -298,7 +298,22 @@ std::unique_ptr<SigningProvider> LegacyScriptPubKeyMan::GetSigningProvider(const\n \n bool LegacyScriptPubKeyMan::CanProvide(const CScript& script, SignatureData& sigdata)\n {",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 503,
      "original_position": 3,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "803e3250f685d7ec556c1a4dd5c6241f68f447c7",
      "in_reply_to_id": 325192947,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This function has no tests, half a dozen different code paths and calls really confusing legacy code like IsMine. There's probably less than 5 people on the planet who understand it, and even fewer who understand the ways this can break for some weird use cases. The only excuse for not documenting it is if it's copied from a legacy function.  \r\n<img width=\"775\" alt=\"Schermafbeelding 2019-09-18 om 09 18 31\" src=\"https://user-images.githubusercontent.com/10217/65124848-4fc47200-d9f5-11e9-8772-b278589d4f46.png\">\r\n",
      "created_at": "2019-09-18T07:22:19Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r325517950",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325517950"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 503,
      "original_line": 503,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325779749",
      "pull_request_review_id": 290055223,
      "id": 325779749,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNTc3OTc0OQ==",
      "diff_hunk": "@@ -514,10 +517,6 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n     pwallet->WalletLogPrintf(\"Keys: %u plaintext, %u encrypted, %u w/ metadata, %u total. Unknown wallet records: %u\\n\",\n            wss.nKeys, wss.nCKeys, wss.nKeyMeta, wss.nKeys + wss.nCKeys, wss.m_unknown_records);\n \n-    // nTimeFirstKey is only reliable if all keys have metadata\n-    if ((wss.nKeys + wss.nCKeys + wss.nWatchKeys) != wss.nKeyMeta)\n-        pwallet->UpdateTimeFirstKey(1);",
      "path": "src/wallet/walletdb.cpp",
      "position": 90,
      "original_position": 94,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "95aca1f9be874910fba8744a084cca5882b28f51",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Did this call move somewhere? Or is it not important and just dropped?",
      "created_at": "2019-09-18T16:40:57Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r325779749",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325779749"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 519,
      "original_line": 519,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325781298",
      "pull_request_review_id": 290057124,
      "id": 325781298,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNTc4MTI5OA==",
      "diff_hunk": "@@ -298,7 +298,22 @@ std::unique_ptr<SigningProvider> LegacyScriptPubKeyMan::GetSigningProvider(const\n \n bool LegacyScriptPubKeyMan::CanProvide(const CScript& script, SignatureData& sigdata)\n {",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 503,
      "original_position": 3,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "803e3250f685d7ec556c1a4dd5c6241f68f447c7",
      "in_reply_to_id": 325192947,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I've added some comments.",
      "created_at": "2019-09-18T16:44:30Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r325781298",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325781298"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 503,
      "original_line": 503,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325784914",
      "pull_request_review_id": 290061616,
      "id": 325784914,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNTc4NDkxNA==",
      "diff_hunk": "@@ -514,10 +517,6 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n     pwallet->WalletLogPrintf(\"Keys: %u plaintext, %u encrypted, %u w/ metadata, %u total. Unknown wallet records: %u\\n\",\n            wss.nKeys, wss.nCKeys, wss.nKeyMeta, wss.nKeys + wss.nCKeys, wss.m_unknown_records);\n \n-    // nTimeFirstKey is only reliable if all keys have metadata\n-    if ((wss.nKeys + wss.nCKeys + wss.nWatchKeys) != wss.nKeyMeta)\n-        pwallet->UpdateTimeFirstKey(1);",
      "path": "src/wallet/walletdb.cpp",
      "position": 90,
      "original_position": 94,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "95aca1f9be874910fba8744a084cca5882b28f51",
      "in_reply_to_id": 325779749,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No.. but we should probably keep it, so I've added it back in.",
      "created_at": "2019-09-18T16:52:40Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r325784914",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325784914"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 519,
      "original_line": 519,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325794240",
      "pull_request_review_id": 290073828,
      "id": 325794240,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNTc5NDI0MA==",
      "diff_hunk": "@@ -5042,3 +5043,11 @@ void CWallet::SetupLegacyScriptPubKeyMan()\n     }\n     assert(m_spk_managers.size() == 1);\n }\n+\n+void CWallet::ConnectScriptPubKeyManNotifiers()\n+{\n+    for (const auto& spk_man_pair : m_spk_managers) {\n+        spk_man_pair.second->NotifyWatchonlyChanged.connect(NotifyWatchonlyChanged);\n+        spk_man_pair.second->NotifyCanGetAddressesChanged.connect(NotifyCanGetAddressesChanged);",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 17,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "65b9a1376d98003b32ebd599f733dcedbbb2f9e9",
      "in_reply_to_id": 325277192,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes. Changed",
      "created_at": "2019-09-18T17:14:23Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r325794240",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325794240"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4147,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325801604",
      "pull_request_review_id": 290083118,
      "id": 325801604,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNTgwMTYwNA==",
      "diff_hunk": "@@ -144,8 +144,10 @@ static bool SignStep(const SigningProvider& provider, const BaseSignatureCreator\n         ret.push_back(valtype()); // workaround CHECKMULTISIG bug\n         for (size_t i = 1; i < vSolutions.size() - 1; ++i) {\n             CPubKey pubkey = CPubKey(vSolutions[i]);\n-            if (ret.size() < required + 1 && CreateSig(creator, sigdata, provider, sig, pubkey, scriptPubKey, sigversion)) {\n-                ret.push_back(std::move(sig));\n+            if (CreateSig(creator, sigdata, provider, sig, pubkey, scriptPubKey, sigversion)) {\n+                if (ret.size() < required + 1) {",
      "path": "src/script/sign.cpp",
      "position": 10,
      "original_position": 7,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "ca02ac2532ce106d372d420dd2b94ad15e730971",
      "in_reply_to_id": 310624791,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think it makes sense to have a comment with such specific information about the wallet in the non-wallet signing code. There's already a comment there explaining why we try to sign for all keys.",
      "created_at": "2019-09-18T17:30:45Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r325801604",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325801604"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 151,
      "original_line": 151,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325813587",
      "pull_request_review_id": 290098282,
      "id": 325813587,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNTgxMzU4Nw==",
      "diff_hunk": "@@ -3346,20 +2914,17 @@ DBErrors CWallet::LoadWallet(bool& fFirstRunRet)\n     {\n         if (database->Rewrite(\"\\x04pool\"))\n         {\n-            setInternalKeyPool.clear();\n-            setExternalKeyPool.clear();\n-            m_pool_key_to_index.clear();\n-            // Note: can't top-up keypool here, because wallet is locked.\n-            // User will be prompted to unlock wallet the next operation\n-            // that requires a new key.\n+            for (const auto& spk_man_pair : m_spk_managers) {\n+                spk_man_pair.second->RewriteDB();\n+            }\n         }\n     }\n \n-    {\n-        LOCK(cs_KeyStore);\n-        // This wallet is in its first run if all of these are empty\n-        fFirstRunRet = mapKeys.empty() && mapCryptedKeys.empty() && mapWatchKeys.empty() && setWatchOnly.empty() && mapScripts.empty()\n-            && !IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) && !IsWalletFlagSet(WALLET_FLAG_BLANK_WALLET);\n+    // This wallet is in its first run if all of these are empty and this isn't blank or no privkeys\n+    fFirstRunRet = m_spk_managers.empty() && !IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) && !IsWalletFlagSet(WALLET_FLAG_BLANK_WALLET);",
      "path": "src/wallet/wallet.cpp",
      "position": 832,
      "original_position": 824,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "df689d59732074715e211d16800274d07a9f0faa",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I wasn't sure if the new `m_spk_managers.empty()` condition here is equivalent to the previous `mapKeys.empty() && mapCryptedKeys.empty() && mapWatchKeys.empty() && setWatchOnly.empty() && mapScripts.empty()` condition. I think it is equivalent because the `LoadWallet(*this)` call above will only call `GetLegacyScriptPubKeyMan()` internally if keys are found, and if it does not, `SetupLegacyScriptPubKeyMan()` will not have been called yet and  `m_spk_managers` will be empty. But correct me if I'm wrong.\r\n\r\nI guess it's a little confusing that `GetLegacyScriptPubKeyMan` right now will actually create a legacy keyman if one doesn't exist, and never return null, even though there are checks for it returning null throughout the code. Maybe there should be two different methods for clarity:\r\n\r\n```c++\r\nLegacyScriptPubKeyMan* GetLegacyScriptPubKeyMan();\r\nLegacyScriptPubKeyMan& GetOrCreateLegacyScriptPubKeyMan();\r\n```\r\n\r\nJust a suggestion, though, and correct me if I missed anything.",
      "created_at": "2019-09-18T17:56:30Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r325813587",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325813587"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2919,
      "original_line": 2919,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/326313799",
      "pull_request_review_id": 290750399,
      "id": 326313799,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNjMxMzc5OQ==",
      "diff_hunk": "@@ -4785,165 +4032,118 @@ bool CWallet::Lock()\n bool CWallet::Unlock(const CKeyingMaterial& vMasterKeyIn, bool accept_no_keys)\n {\n     {\n-        LOCK(cs_KeyStore);\n-        if (!SetCrypted())\n-            return false;\n-\n-        bool keyPass = mapCryptedKeys.empty(); // Always pass when there are no encrypted keys\n-        bool keyFail = false;\n-        CryptedKeyMap::const_iterator mi = mapCryptedKeys.begin();\n-        for (; mi != mapCryptedKeys.end(); ++mi)\n-        {\n-            const CPubKey &vchPubKey = (*mi).second.first;\n-            const std::vector<unsigned char> &vchCryptedSecret = (*mi).second.second;\n-            CKey key;\n-            if (!DecryptKey(vMasterKeyIn, vchCryptedSecret, vchPubKey, key))\n-            {\n-                keyFail = true;\n-                break;\n+        LOCK(cs_wallet);\n+        for (const auto& spk_man_pair : m_spk_managers) {\n+            if (!spk_man_pair.second->Unlock(vMasterKeyIn, accept_no_keys)) {\n+                return false;\n             }\n-            keyPass = true;\n-            if (fDecryptionThoroughlyChecked)",
      "path": "src/wallet/wallet.cpp",
      "position": 1553,
      "original_position": 1546,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "df689d59732074715e211d16800274d07a9f0faa",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "CWallet::fDecryptionThoroughlyChecked variable isn't actually used anymore, only assigned to. It should probably either be used or removed. Maybe it's not necessary anymore since keyman has the same variable.",
      "created_at": "2019-09-19T18:11:14Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r326313799",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/326313799"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4791,
      "original_line": 4791,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/326338427",
      "pull_request_review_id": 290783010,
      "id": 326338427,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNjMzODQyNw==",
      "diff_hunk": "@@ -919,10 +571,10 @@ bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n \n         // if we are using HD, replace the HD seed with a new one\n         if (IsHDEnabled()) {",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 441,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "df689d59732074715e211d16800274d07a9f0faa",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It'd make more sense to call spk_man_pair.second->IsHDEnabled on the individual keyman object than IsHDEnabled on the wallet object, which is the intersection of all IsHDEnabled statuses.",
      "created_at": "2019-09-19T19:08:49Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r326338427",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/326338427"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 573,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/326374849",
      "pull_request_review_id": 290831541,
      "id": 326374849,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNjM3NDg0OQ==",
      "diff_hunk": "@@ -3346,20 +2914,17 @@ DBErrors CWallet::LoadWallet(bool& fFirstRunRet)\n     {\n         if (database->Rewrite(\"\\x04pool\"))\n         {\n-            setInternalKeyPool.clear();\n-            setExternalKeyPool.clear();\n-            m_pool_key_to_index.clear();\n-            // Note: can't top-up keypool here, because wallet is locked.\n-            // User will be prompted to unlock wallet the next operation\n-            // that requires a new key.\n+            for (const auto& spk_man_pair : m_spk_managers) {\n+                spk_man_pair.second->RewriteDB();\n+            }\n         }\n     }\n \n-    {\n-        LOCK(cs_KeyStore);\n-        // This wallet is in its first run if all of these are empty\n-        fFirstRunRet = mapKeys.empty() && mapCryptedKeys.empty() && mapWatchKeys.empty() && setWatchOnly.empty() && mapScripts.empty()\n-            && !IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) && !IsWalletFlagSet(WALLET_FLAG_BLANK_WALLET);\n+    // This wallet is in its first run if all of these are empty and this isn't blank or no privkeys\n+    fFirstRunRet = m_spk_managers.empty() && !IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) && !IsWalletFlagSet(WALLET_FLAG_BLANK_WALLET);",
      "path": "src/wallet/wallet.cpp",
      "position": 832,
      "original_position": 824,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "df689d59732074715e211d16800274d07a9f0faa",
      "in_reply_to_id": 325813587,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, that is correct. That's pretty much the only reason `GetLegacyScriptPubKeyMan` also creates a `LegacyScriptPubKeyMan`.\r\n\r\nThe checks for null are for the future when we have more `ScriptPubKeyMan` classes.",
      "created_at": "2019-09-19T20:43:08Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r326374849",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/326374849"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2919,
      "original_line": 2919,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/326420749",
      "pull_request_review_id": 290891233,
      "id": 326420749,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNjQyMDc0OQ==",
      "diff_hunk": "@@ -3346,20 +2914,17 @@ DBErrors CWallet::LoadWallet(bool& fFirstRunRet)\n     {\n         if (database->Rewrite(\"\\x04pool\"))\n         {\n-            setInternalKeyPool.clear();\n-            setExternalKeyPool.clear();\n-            m_pool_key_to_index.clear();\n-            // Note: can't top-up keypool here, because wallet is locked.\n-            // User will be prompted to unlock wallet the next operation\n-            // that requires a new key.\n+            for (const auto& spk_man_pair : m_spk_managers) {\n+                spk_man_pair.second->RewriteDB();\n+            }\n         }\n     }\n \n-    {\n-        LOCK(cs_KeyStore);\n-        // This wallet is in its first run if all of these are empty\n-        fFirstRunRet = mapKeys.empty() && mapCryptedKeys.empty() && mapWatchKeys.empty() && setWatchOnly.empty() && mapScripts.empty()\n-            && !IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) && !IsWalletFlagSet(WALLET_FLAG_BLANK_WALLET);\n+    // This wallet is in its first run if all of these are empty and this isn't blank or no privkeys\n+    fFirstRunRet = m_spk_managers.empty() && !IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) && !IsWalletFlagSet(WALLET_FLAG_BLANK_WALLET);",
      "path": "src/wallet/wallet.cpp",
      "position": 832,
      "original_position": 824,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "df689d59732074715e211d16800274d07a9f0faa",
      "in_reply_to_id": 325813587,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I've added `GetOrCreateLegacyScriptPubKeyMan`",
      "created_at": "2019-09-19T23:22:26Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r326420749",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/326420749"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2919,
      "original_line": 2919,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/326420763",
      "pull_request_review_id": 290891250,
      "id": 326420763,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNjQyMDc2Mw==",
      "diff_hunk": "@@ -4785,165 +4032,118 @@ bool CWallet::Lock()\n bool CWallet::Unlock(const CKeyingMaterial& vMasterKeyIn, bool accept_no_keys)\n {\n     {\n-        LOCK(cs_KeyStore);\n-        if (!SetCrypted())\n-            return false;\n-\n-        bool keyPass = mapCryptedKeys.empty(); // Always pass when there are no encrypted keys\n-        bool keyFail = false;\n-        CryptedKeyMap::const_iterator mi = mapCryptedKeys.begin();\n-        for (; mi != mapCryptedKeys.end(); ++mi)\n-        {\n-            const CPubKey &vchPubKey = (*mi).second.first;\n-            const std::vector<unsigned char> &vchCryptedSecret = (*mi).second.second;\n-            CKey key;\n-            if (!DecryptKey(vMasterKeyIn, vchCryptedSecret, vchPubKey, key))\n-            {\n-                keyFail = true;\n-                break;\n+        LOCK(cs_wallet);\n+        for (const auto& spk_man_pair : m_spk_managers) {\n+            if (!spk_man_pair.second->Unlock(vMasterKeyIn, accept_no_keys)) {\n+                return false;\n             }\n-            keyPass = true;\n-            if (fDecryptionThoroughlyChecked)",
      "path": "src/wallet/wallet.cpp",
      "position": 1553,
      "original_position": 1546,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "df689d59732074715e211d16800274d07a9f0faa",
      "in_reply_to_id": 326313799,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Removed it",
      "created_at": "2019-09-19T23:22:31Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r326420763",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/326420763"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4791,
      "original_line": 4791,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/326420778",
      "pull_request_review_id": 290891270,
      "id": 326420778,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNjQyMDc3OA==",
      "diff_hunk": "@@ -919,10 +571,10 @@ bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n \n         // if we are using HD, replace the HD seed with a new one\n         if (IsHDEnabled()) {",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 441,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "df689d59732074715e211d16800274d07a9f0faa",
      "in_reply_to_id": 326338427,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2019-09-19T23:22:36Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r326420778",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/326420778"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 573,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/326691270",
      "pull_request_review_id": 291247895,
      "id": 326691270,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNjY5MTI3MA==",
      "diff_hunk": "@@ -0,0 +1,484 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+#define BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <wallet/crypter.h>\n+#include <wallet/ismine.h>\n+#include <wallet/walletdb.h>\n+#include <wallet/walletutil.h>\n+\n+#include <functional>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+enum class OutputType;\n+\n+//! Default for -keypool\n+static const unsigned int DEFAULT_KEYPOOL_SIZE = 1000;\n+\n+std::vector<CKeyID> GetAffectedKeys(const CScript& spk, const SigningProvider& provider);\n+\n+/** A key from a CWallet's keypool\n+ *\n+ * The wallet holds one (for pre HD-split wallets) or several keypools. These\n+ * are sets of keys that have not yet been used to provide addresses or receive\n+ * change.\n+ *\n+ * The Bitcoin Core wallet was originally a collection of unrelated private\n+ * keys with their associated addresses. If a non-HD wallet generated a\n+ * key/address, gave that address out and then restored a backup from before\n+ * that key's generation, then any funds sent to that address would be\n+ * lost definitively.\n+ *\n+ * The keypool was implemented to avoid this scenario (commit: 10384941). The\n+ * wallet would generate a set of keys (100 by default). When a new public key\n+ * was required, either to give out as an address or to use in a change output,\n+ * it would be drawn from the keypool. The keypool would then be topped up to\n+ * maintain 100 keys. This ensured that as long as the wallet hadn't used more\n+ * than 100 keys since the previous backup, all funds would be safe, since a\n+ * restored wallet would be able to scan for all owned addresses.\n+ *\n+ * A keypool also allowed encrypted wallets to give out addresses without\n+ * having to be decrypted to generate a new private key.\n+ *\n+ * With the introduction of HD wallets (commit: f1902510), the keypool\n+ * essentially became an address look-ahead pool. Restoring old backups can no\n+ * longer definitively lose funds as long as the addresses used were from the\n+ * wallet's HD seed (since all private keys can be rederived from the seed).\n+ * However, if many addresses were used since the backup, then the wallet may\n+ * not know how far ahead in the HD chain to look for its addresses. The\n+ * keypool is used to implement a 'gap limit'. The keypool maintains a set of\n+ * keys (by default 1000) ahead of the last used key and scans for the\n+ * addresses of those keys.  This avoids the risk of not seeing transactions\n+ * involving the wallet's addresses, or of re-using the same address.\n+ *\n+ * The HD-split wallet feature added a second keypool (commit: 02592f4c). There\n+ * is an external keypool (for addresses to hand out) and an internal keypool\n+ * (for change addresses).\n+ *\n+ * Keypool keys are stored in the wallet/keystore's keymap. The keypool data is\n+ * stored as sets of indexes in the wallet (setInternalKeyPool,\n+ * setExternalKeyPool and set_pre_split_keypool), and a map from the key to the\n+ * index (m_pool_key_to_index). The CKeyPool object is used to\n+ * serialize/deserialize the pool data to/from the database.\n+ */\n+class CKeyPool\n+{\n+public:\n+    //! The time at which the key was generated. Set in AddKeypoolPubKeyWithDB\n+    int64_t nTime;\n+    //! The public key\n+    CPubKey vchPubKey;\n+    //! Whether this keypool entry is in the internal keypool (for change outputs)\n+    bool fInternal;\n+    //! Whether this key was generated for a keypool before the wallet was upgraded to HD-split\n+    bool m_pre_split;\n+\n+    CKeyPool();\n+    CKeyPool(const CPubKey& vchPubKeyIn, bool internalIn);\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        int nVersion = s.GetVersion();\n+        if (!(s.GetType() & SER_GETHASH))\n+            READWRITE(nVersion);\n+        READWRITE(nTime);\n+        READWRITE(vchPubKey);\n+        if (ser_action.ForRead()) {\n+            try {\n+                READWRITE(fInternal);\n+            }\n+            catch (std::ios_base::failure&) {\n+                /* flag as external address if we can't read the internal boolean\n+                   (this will be the case for any wallet before the HD chain split version) */\n+                fInternal = false;\n+            }\n+            try {\n+                READWRITE(m_pre_split);\n+            }\n+            catch (std::ios_base::failure&) {\n+                /* flag as postsplit address if we can't read the m_pre_split boolean\n+                   (this will be the case for any wallet that upgrades to HD chain split)*/\n+                m_pre_split = false;\n+            }\n+        }\n+        else {\n+            READWRITE(fInternal);\n+            READWRITE(m_pre_split);\n+        }\n+    }\n+};\n+\n+typedef std::function<void(uint64_t)> FlagFunc;\n+typedef std::function<void(WalletBatch&, uint64_t)> FlagFuncWithDB;\n+typedef std::function<bool(uint64_t)> FlagSetFunc;\n+typedef std::function<bool(enum WalletFeature)> VersionFunc;\n+typedef std::function<std::string()> NameFunc;\n+typedef std::function<void(enum WalletFeature)> SetVersionFunc;\n+\n+/*\n+ * A class implementing ScriptPubKeyMan manages some (or all) scriptPubKeys used in a wallet.\n+ * It contains the scripts and keys related to the scriptPubKeys it manages.\n+ * A ScriptPubKeyMan will be able to give out scriptPubKeys to be used, as well as marking\n+ * when a scriptPubKey has been used. It also handles when and how to store a scriptPubKey\n+ * and it's related scripts and keys, including encryption.\n+ */\n+\n+class ScriptPubKeyMan\n+{\n+protected:\n+    FlagSetFunc IsWalletFlagSet; // Function pointer to function that determines if a wallet flag is set\n+    FlagFunc SetWalletFlag; // Function pointer to function to set wallet flags\n+    FlagFuncWithDB UnsetWalletFlagWithDB; // Function pointer to function to unset wallet flags\n+    VersionFunc CanSupportFeature; // Function pointer to function that indicates whether the feature is supported\n+    NameFunc GetDisplayName; // Function pointer to GetDisplayName to get the name of a wallet for WalletLogPrintf\n+    SetVersionFunc SetMinVersion; // Function pointer to SetMinVersion in the wallet\n+\n+    /** Internal database handle. */\n+    std::shared_ptr<WalletDatabase> m_database;\n+\n+public:\n+    ScriptPubKeyMan(FlagSetFunc is_set_func, FlagFunc set_flag_func, FlagFuncWithDB unset_flag_func, VersionFunc feature_sup_func, NameFunc wallet_name_func, SetVersionFunc set_version_func, std::shared_ptr<WalletDatabase> database)\n+        :   IsWalletFlagSet(is_set_func),\n+            SetWalletFlag(set_flag_func),\n+            UnsetWalletFlagWithDB(unset_flag_func),\n+            CanSupportFeature(feature_sup_func),\n+            GetDisplayName(wallet_name_func),\n+            SetMinVersion(set_version_func),\n+            m_database(database)\n+        {}\n+\n+    virtual ~ScriptPubKeyMan() {};\n+    virtual bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) { return false; }\n+    virtual isminetype IsMine(const CScript& script) const { return ISMINE_NO; }\n+\n+    virtual bool IsCrypted() const { return false; }\n+    virtual bool IsLocked() const { return false; }\n+    virtual bool Lock() { return false; }\n+\n+    virtual bool Unlock(const CKeyingMaterial& vMasterKeyIn, bool accept_no_keys = false) { return false; }\n+    virtual bool Encrypt(CKeyingMaterial& vMasterKeyIn, WalletBatch* batch) { return false; }\n+\n+    virtual bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool) { return false; }\n+    virtual void KeepDestination(int64_t index) {}\n+    virtual void ReturnDestination(int64_t index, bool internal, const CTxDestination& addr) {}\n+\n+    virtual bool TopUp(unsigned int size = 0) { return false; }\n+\n+    //! Mark unused addresses as being used\n+    virtual void MarkUnusedAddresses(const CScript& script) {}\n+\n+    //! Upgrade stored CKeyMetadata objects to store key origin info as KeyOriginInfo\n+    virtual void UpgradeKeyMetadata() {}\n+\n+    /** Sets up the key generation stuff, i.e. generates new HD seeds and sets them as active.\n+      * Returns false if already setup or setup fails, true if setup is successful\n+      * Set force=true to make it re-setup if already setup, used for upgrades\n+      */\n+    virtual bool SetupGeneration(bool force = false) { return false; }\n+\n+    /* Returns true if HD is enabled */\n+    virtual bool IsHDEnabled() const { return false; }\n+\n+    /* Returns true if the wallet can give out new addresses. This means it has keys in the keypool or can generate new keys */\n+    virtual bool CanGetAddresses(bool internal = false) { return false; }\n+\n+    /** Upgrades the wallet to the specified version */\n+    virtual bool Upgrade(int prev_version, int new_version, std::string& error) { return false; }\n+\n+    virtual bool HavePrivateKeys() const { return false; }\n+\n+    //! The action to do when the DB needs rewrite\n+    virtual void RewriteDB() {}\n+\n+    virtual int64_t GetOldestKeyPoolTime() { return GetTime(); }\n+\n+    virtual size_t KeypoolCountExternalKeys() { return 0; }\n+    virtual unsigned int GetKeypoolSize() const { return 0; }\n+\n+    virtual int64_t GetTimeFirstKey() const { return 0; }\n+\n+    virtual const CKeyMetadata* GetMetadata(uint160 id) const { return nullptr; }\n+\n+    virtual std::unique_ptr<SigningProvider> GetSigningProvider(const CScript& script) const { return nullptr; }\n+\n+    /** Whether this ScriptPubKeyMan can provide a SigningProvider (via GetSigningProvider) that, combined with\n+      * sigdata, can produce a valid signature.\n+      */\n+    virtual bool CanProvide(const CScript& script, SignatureData& sigdata) { return false; }\n+\n+    virtual uint256 GetID() const { return uint256(); }\n+\n+    /** Prepends the wallet name in logging output to ease debugging in multi-wallet use cases */\n+    template<typename... Params>\n+    void WalletLogPrintf(std::string fmt, Params... parameters) const {\n+        LogPrintf((\"%s \" + fmt).c_str(), GetDisplayName(), parameters...);\n+    };\n+\n+    /** Watch-only address added */\n+    boost::signals2::signal<void (bool fHaveWatchOnly)> NotifyWatchonlyChanged;\n+\n+    /** Keypool has new keys */\n+    boost::signals2::signal<void ()> NotifyCanGetAddressesChanged;\n+};\n+\n+class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProvider\n+{\n+private:\n+    //! if fUseCrypto is true, mapKeys must be empty\n+    //! if fUseCrypto is false, vMasterKey must be empty\n+    std::atomic<bool> fUseCrypto{false};\n+\n+    bool SetCrypted();\n+\n+    //! keeps track of whether Unlock has run a thorough check before\n+    bool fDecryptionThoroughlyChecked = false;\n+\n+    //! Master encryption key for the wallet. Keys are encrypted with this.\n+    //! Wallet is unlocked if this is not null.\n+    CKeyingMaterial vMasterKey GUARDED_BY(cs_KeyStore);",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": null,
      "original_position": 246,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "fb0058ed68a18053959001a0191f3fbcfec50526",
      "in_reply_to_id": 323884483,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The encryption stuff here is making my head spin. Wallet encryption was already confusing before, but now with CWallet and ScriptPubKeyMan both having duplicate `fUseCrypto`, `SetCrypted()`, `IsCrypted()`,  `vMasterKey`, `IsLocked()` states and code, it's hard to tell which combinations of state are expected, and which are bugs, and whether the code supposed to be keeping states in sync actually works.\r\n\r\nI have a few suggestions to try clarify things. These should also simplify the code.\r\n\r\n1. Drop the `CWallet::fUseCrypto` member and `CWallet::SetCrypted()` method. Change `CWallet::IsCrypted()` method to just loop over keyman objects and call IsCrypted on them. As far as I can tell the `CWallet::fUseCrypto` state is broken in the current PR. `CWallet::SetCrypted()` used to be called whenever any encrypted data was present, but now that now longer happens, and `CWallet::IsCrypted()` returns false if the wallet hasn't been explicitly encrypted or locked since startup, regardless of what encrypted keys or data are present.\r\n\r\n2. If the intent is to consider a wallet encrypted \"by virtue of having an encryption key set\", it'd be better to add a new method `bool HasEncryptionKey() { return !mapCryptedKeys.empty(); }` instead of overloading `IsCrypted()`. It might also make sense to rename the existing `IsCrypted()` function `HasEncryptedData()` in that case so the meaning is not confused.\r\n\r\n3. This last suggestion is less important, but I think it'd be better to lock and unlock the entire wallet, instead of parts of it. The keyman `vMasterKey` member and `IsLocked()`, `Locked()`, and `Unlocked()` implementations copied from wallet code could all be dropped. Keyman instances should have a `fDecryptionThoroughlyChecked` member and have `CheckDecryption()` methods, but otherwise would be simpler if they just called `IsLocked()` and `GetMasterKey()` from `WalletStorage` instead of implementing locking and unlocking themselves.",
      "created_at": "2019-09-20T15:46:57Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r326691270",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/326691270"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 244,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/326712772",
      "pull_request_review_id": 291276338,
      "id": 326712772,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNjcxMjc3Mg==",
      "diff_hunk": "@@ -0,0 +1,484 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+#define BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <wallet/crypter.h>\n+#include <wallet/ismine.h>\n+#include <wallet/walletdb.h>\n+#include <wallet/walletutil.h>\n+\n+#include <functional>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+enum class OutputType;\n+\n+//! Default for -keypool\n+static const unsigned int DEFAULT_KEYPOOL_SIZE = 1000;\n+\n+std::vector<CKeyID> GetAffectedKeys(const CScript& spk, const SigningProvider& provider);\n+\n+/** A key from a CWallet's keypool\n+ *\n+ * The wallet holds one (for pre HD-split wallets) or several keypools. These\n+ * are sets of keys that have not yet been used to provide addresses or receive\n+ * change.\n+ *\n+ * The Bitcoin Core wallet was originally a collection of unrelated private\n+ * keys with their associated addresses. If a non-HD wallet generated a\n+ * key/address, gave that address out and then restored a backup from before\n+ * that key's generation, then any funds sent to that address would be\n+ * lost definitively.\n+ *\n+ * The keypool was implemented to avoid this scenario (commit: 10384941). The\n+ * wallet would generate a set of keys (100 by default). When a new public key\n+ * was required, either to give out as an address or to use in a change output,\n+ * it would be drawn from the keypool. The keypool would then be topped up to\n+ * maintain 100 keys. This ensured that as long as the wallet hadn't used more\n+ * than 100 keys since the previous backup, all funds would be safe, since a\n+ * restored wallet would be able to scan for all owned addresses.\n+ *\n+ * A keypool also allowed encrypted wallets to give out addresses without\n+ * having to be decrypted to generate a new private key.\n+ *\n+ * With the introduction of HD wallets (commit: f1902510), the keypool\n+ * essentially became an address look-ahead pool. Restoring old backups can no\n+ * longer definitively lose funds as long as the addresses used were from the\n+ * wallet's HD seed (since all private keys can be rederived from the seed).\n+ * However, if many addresses were used since the backup, then the wallet may\n+ * not know how far ahead in the HD chain to look for its addresses. The\n+ * keypool is used to implement a 'gap limit'. The keypool maintains a set of\n+ * keys (by default 1000) ahead of the last used key and scans for the\n+ * addresses of those keys.  This avoids the risk of not seeing transactions\n+ * involving the wallet's addresses, or of re-using the same address.\n+ *\n+ * The HD-split wallet feature added a second keypool (commit: 02592f4c). There\n+ * is an external keypool (for addresses to hand out) and an internal keypool\n+ * (for change addresses).\n+ *\n+ * Keypool keys are stored in the wallet/keystore's keymap. The keypool data is\n+ * stored as sets of indexes in the wallet (setInternalKeyPool,\n+ * setExternalKeyPool and set_pre_split_keypool), and a map from the key to the\n+ * index (m_pool_key_to_index). The CKeyPool object is used to\n+ * serialize/deserialize the pool data to/from the database.\n+ */\n+class CKeyPool\n+{\n+public:\n+    //! The time at which the key was generated. Set in AddKeypoolPubKeyWithDB\n+    int64_t nTime;\n+    //! The public key\n+    CPubKey vchPubKey;\n+    //! Whether this keypool entry is in the internal keypool (for change outputs)\n+    bool fInternal;\n+    //! Whether this key was generated for a keypool before the wallet was upgraded to HD-split\n+    bool m_pre_split;\n+\n+    CKeyPool();\n+    CKeyPool(const CPubKey& vchPubKeyIn, bool internalIn);\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        int nVersion = s.GetVersion();\n+        if (!(s.GetType() & SER_GETHASH))\n+            READWRITE(nVersion);\n+        READWRITE(nTime);\n+        READWRITE(vchPubKey);\n+        if (ser_action.ForRead()) {\n+            try {\n+                READWRITE(fInternal);\n+            }\n+            catch (std::ios_base::failure&) {\n+                /* flag as external address if we can't read the internal boolean\n+                   (this will be the case for any wallet before the HD chain split version) */\n+                fInternal = false;\n+            }\n+            try {\n+                READWRITE(m_pre_split);\n+            }\n+            catch (std::ios_base::failure&) {\n+                /* flag as postsplit address if we can't read the m_pre_split boolean\n+                   (this will be the case for any wallet that upgrades to HD chain split)*/\n+                m_pre_split = false;\n+            }\n+        }\n+        else {\n+            READWRITE(fInternal);\n+            READWRITE(m_pre_split);\n+        }\n+    }\n+};\n+\n+typedef std::function<void(uint64_t)> FlagFunc;\n+typedef std::function<void(WalletBatch&, uint64_t)> FlagFuncWithDB;\n+typedef std::function<bool(uint64_t)> FlagSetFunc;\n+typedef std::function<bool(enum WalletFeature)> VersionFunc;\n+typedef std::function<std::string()> NameFunc;\n+typedef std::function<void(enum WalletFeature)> SetVersionFunc;\n+\n+/*\n+ * A class implementing ScriptPubKeyMan manages some (or all) scriptPubKeys used in a wallet.\n+ * It contains the scripts and keys related to the scriptPubKeys it manages.\n+ * A ScriptPubKeyMan will be able to give out scriptPubKeys to be used, as well as marking\n+ * when a scriptPubKey has been used. It also handles when and how to store a scriptPubKey\n+ * and it's related scripts and keys, including encryption.\n+ */\n+\n+class ScriptPubKeyMan\n+{\n+protected:\n+    FlagSetFunc IsWalletFlagSet; // Function pointer to function that determines if a wallet flag is set\n+    FlagFunc SetWalletFlag; // Function pointer to function to set wallet flags\n+    FlagFuncWithDB UnsetWalletFlagWithDB; // Function pointer to function to unset wallet flags\n+    VersionFunc CanSupportFeature; // Function pointer to function that indicates whether the feature is supported\n+    NameFunc GetDisplayName; // Function pointer to GetDisplayName to get the name of a wallet for WalletLogPrintf\n+    SetVersionFunc SetMinVersion; // Function pointer to SetMinVersion in the wallet\n+\n+    /** Internal database handle. */\n+    std::shared_ptr<WalletDatabase> m_database;\n+\n+public:\n+    ScriptPubKeyMan(FlagSetFunc is_set_func, FlagFunc set_flag_func, FlagFuncWithDB unset_flag_func, VersionFunc feature_sup_func, NameFunc wallet_name_func, SetVersionFunc set_version_func, std::shared_ptr<WalletDatabase> database)\n+        :   IsWalletFlagSet(is_set_func),\n+            SetWalletFlag(set_flag_func),\n+            UnsetWalletFlagWithDB(unset_flag_func),\n+            CanSupportFeature(feature_sup_func),\n+            GetDisplayName(wallet_name_func),\n+            SetMinVersion(set_version_func),\n+            m_database(database)\n+        {}\n+\n+    virtual ~ScriptPubKeyMan() {};\n+    virtual bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) { return false; }\n+    virtual isminetype IsMine(const CScript& script) const { return ISMINE_NO; }\n+\n+    virtual bool IsCrypted() const { return false; }\n+    virtual bool IsLocked() const { return false; }\n+    virtual bool Lock() { return false; }\n+\n+    virtual bool Unlock(const CKeyingMaterial& vMasterKeyIn, bool accept_no_keys = false) { return false; }\n+    virtual bool Encrypt(CKeyingMaterial& vMasterKeyIn, WalletBatch* batch) { return false; }\n+\n+    virtual bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool) { return false; }\n+    virtual void KeepDestination(int64_t index) {}\n+    virtual void ReturnDestination(int64_t index, bool internal, const CTxDestination& addr) {}\n+\n+    virtual bool TopUp(unsigned int size = 0) { return false; }\n+\n+    //! Mark unused addresses as being used\n+    virtual void MarkUnusedAddresses(const CScript& script) {}\n+\n+    //! Upgrade stored CKeyMetadata objects to store key origin info as KeyOriginInfo\n+    virtual void UpgradeKeyMetadata() {}\n+\n+    /** Sets up the key generation stuff, i.e. generates new HD seeds and sets them as active.\n+      * Returns false if already setup or setup fails, true if setup is successful\n+      * Set force=true to make it re-setup if already setup, used for upgrades\n+      */\n+    virtual bool SetupGeneration(bool force = false) { return false; }\n+\n+    /* Returns true if HD is enabled */\n+    virtual bool IsHDEnabled() const { return false; }\n+\n+    /* Returns true if the wallet can give out new addresses. This means it has keys in the keypool or can generate new keys */\n+    virtual bool CanGetAddresses(bool internal = false) { return false; }\n+\n+    /** Upgrades the wallet to the specified version */\n+    virtual bool Upgrade(int prev_version, int new_version, std::string& error) { return false; }\n+\n+    virtual bool HavePrivateKeys() const { return false; }\n+\n+    //! The action to do when the DB needs rewrite\n+    virtual void RewriteDB() {}\n+\n+    virtual int64_t GetOldestKeyPoolTime() { return GetTime(); }\n+\n+    virtual size_t KeypoolCountExternalKeys() { return 0; }\n+    virtual unsigned int GetKeypoolSize() const { return 0; }\n+\n+    virtual int64_t GetTimeFirstKey() const { return 0; }\n+\n+    virtual const CKeyMetadata* GetMetadata(uint160 id) const { return nullptr; }\n+\n+    virtual std::unique_ptr<SigningProvider> GetSigningProvider(const CScript& script) const { return nullptr; }\n+\n+    /** Whether this ScriptPubKeyMan can provide a SigningProvider (via GetSigningProvider) that, combined with\n+      * sigdata, can produce a valid signature.\n+      */\n+    virtual bool CanProvide(const CScript& script, SignatureData& sigdata) { return false; }\n+\n+    virtual uint256 GetID() const { return uint256(); }\n+\n+    /** Prepends the wallet name in logging output to ease debugging in multi-wallet use cases */\n+    template<typename... Params>\n+    void WalletLogPrintf(std::string fmt, Params... parameters) const {\n+        LogPrintf((\"%s \" + fmt).c_str(), GetDisplayName(), parameters...);\n+    };\n+\n+    /** Watch-only address added */\n+    boost::signals2::signal<void (bool fHaveWatchOnly)> NotifyWatchonlyChanged;\n+\n+    /** Keypool has new keys */\n+    boost::signals2::signal<void ()> NotifyCanGetAddressesChanged;\n+};\n+\n+class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProvider\n+{\n+private:\n+    //! if fUseCrypto is true, mapKeys must be empty\n+    //! if fUseCrypto is false, vMasterKey must be empty\n+    std::atomic<bool> fUseCrypto{false};\n+\n+    bool SetCrypted();\n+\n+    //! keeps track of whether Unlock has run a thorough check before\n+    bool fDecryptionThoroughlyChecked = false;\n+\n+    //! Master encryption key for the wallet. Keys are encrypted with this.\n+    //! Wallet is unlocked if this is not null.\n+    CKeyingMaterial vMasterKey GUARDED_BY(cs_KeyStore);",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": null,
      "original_position": 246,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "fb0058ed68a18053959001a0191f3fbcfec50526",
      "in_reply_to_id": 323884483,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'll take a look at reworking the encryption state stuff.",
      "created_at": "2019-09-20T16:42:14Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r326712772",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/326712772"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 244,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/326852547",
      "pull_request_review_id": 291455908,
      "id": 326852547,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNjg1MjU0Nw==",
      "diff_hunk": "@@ -26,9 +26,183 @@ bool LegacyScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestinat\n     return true;\n }\n \n+typedef std::vector<unsigned char> valtype;\n+\n+namespace {\n+\n+/**\n+ * This is an enum that tracks the execution context of a script, similar to\n+ * SigVersion in script/interpreter. It is separate however because we want to\n+ * distinguish between top-level scriptPubKey execution and P2SH redeemScript\n+ * execution (a distinction that has no impact on consensus rules).\n+ */\n+enum class IsMineSigVersion\n+{\n+    TOP = 0,        //!< scriptPubKey execution\n+    P2SH = 1,       //!< P2SH redeemScript\n+    WITNESS_V0 = 2, //!< P2WSH witness script execution\n+};\n+\n+/**\n+ * This is an internal representation of isminetype + invalidity.\n+ * Its order is significant, as we return the max of all explored\n+ * possibilities.\n+ */\n+enum class IsMineResult\n+{\n+    NO = 0,         //!< Not ours\n+    WATCH_ONLY = 1, //!< Included in watch-only balance\n+    SPENDABLE = 2,  //!< Included in all balances\n+    INVALID = 3,    //!< Not spendable by anyone (uncompressed pubkey in segwit, P2SH inside P2SH or witness, witness inside witness)\n+};\n+\n+bool PermitsUncompressed(IsMineSigVersion sigversion)\n+{\n+    return sigversion == IsMineSigVersion::TOP || sigversion == IsMineSigVersion::P2SH;\n+}\n+\n+bool HaveKeys(const std::vector<valtype>& pubkeys, const LegacyScriptPubKeyMan& keystore)\n+{\n+    for (const valtype& pubkey : pubkeys) {\n+        CKeyID keyID = CPubKey(pubkey).GetID();\n+        if (!keystore.HaveKey(keyID)) return false;\n+    }\n+    return true;\n+}\n+\n+IsMineResult IsMineInner(const LegacyScriptPubKeyMan& keystore, const CScript& scriptPubKey, IsMineSigVersion sigversion)\n+{\n+    IsMineResult ret = IsMineResult::NO;\n+\n+    std::vector<valtype> vSolutions;\n+    txnouttype whichType = Solver(scriptPubKey, vSolutions);\n+\n+    CKeyID keyID;\n+    switch (whichType)\n+    {\n+    case TX_NONSTANDARD:\n+    case TX_NULL_DATA:\n+    case TX_WITNESS_UNKNOWN:\n+        break;\n+    case TX_PUBKEY:\n+        keyID = CPubKey(vSolutions[0]).GetID();\n+        if (!PermitsUncompressed(sigversion) && vSolutions[0].size() != 33) {\n+            return IsMineResult::INVALID;\n+        }\n+        if (keystore.HaveKey(keyID)) {\n+            ret = std::max(ret, IsMineResult::SPENDABLE);\n+        }\n+        break;\n+    case TX_WITNESS_V0_KEYHASH:\n+    {\n+        if (sigversion == IsMineSigVersion::WITNESS_V0) {\n+            // P2WPKH inside P2WSH is invalid.\n+            return IsMineResult::INVALID;\n+        }\n+        if (sigversion == IsMineSigVersion::TOP && !keystore.HaveCScript(CScriptID(CScript() << OP_0 << vSolutions[0]))) {\n+            // We do not support bare witness outputs unless the P2SH version of it would be\n+            // acceptable as well. This protects against matching before segwit activates.\n+            // This also applies to the P2WSH case.\n+            break;\n+        }\n+        ret = std::max(ret, IsMineInner(keystore, GetScriptForDestination(PKHash(uint160(vSolutions[0]))), IsMineSigVersion::WITNESS_V0));\n+        break;\n+    }\n+    case TX_PUBKEYHASH:\n+    {\n+        keyID = CKeyID(uint160(vSolutions[0]));\n+        CPubKey pubkey;\n+        if (keystore.GetPubKey(keyID, pubkey)) {\n+            if (!PermitsUncompressed(sigversion) && !pubkey.IsCompressed()) {\n+                return IsMineResult::INVALID;\n+            } else {\n+                ret = std::max(ret, IsMineResult::WATCH_ONLY);\n+            }\n+        }\n+        if (keystore.HaveKey(keyID)) {\n+            ret = std::max(ret, IsMineResult::SPENDABLE);\n+        }\n+        break;\n+    }\n+    case TX_SCRIPTHASH:",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 128,
      "original_position": 102,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "8a2d51c741b896842e093fa35590ef36abb907c4",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 8a2d51c741b896842e093fa35590ef36abb907c4: `case TX_PUBKEYHASH` contains a bug fix. Maybe move that to a seperate commit so this commit is actually move-only.\r\n<img width=\"566\" alt=\"Schermafbeelding 2019-09-21 om 10 27 29\" src=\"https://user-images.githubusercontent.com/10217/65370562-746d5380-dc5a-11e9-9eb4-f979ba634ac3.png\">\r\n",
      "created_at": "2019-09-21T08:30:11Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r326852547",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/326852547"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 128,
      "original_line": 128,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/326853199",
      "pull_request_review_id": 291455908,
      "id": 326853199,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNjg1MzE5OQ==",
      "diff_hunk": "@@ -303,6 +303,16 @@ bool LegacyScriptPubKeyMan::CanProvide(const CScript& script, SignatureData& sig\n \n const CKeyMetadata* LegacyScriptPubKeyMan::GetMetadata(uint160 id) const\n {\n+    LOCK(cs_KeyStore);\n+    auto it = mapKeyMetadata.find(CKeyID(id));",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 528,
      "original_position": 5,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "3099b7c2dbfd31f4a1747f7e38629e44988d6ef7",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 3099b7c2dbfd31f4a1747f7e38629e44988d6ef7: for other reviewers, this is more or less lifted from `getaddressinfo` in `rpcwallet.cpp`.",
      "created_at": "2019-09-21T08:57:11Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r326853199",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/326853199"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 528,
      "original_line": 528,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/326855205",
      "pull_request_review_id": 291455908,
      "id": 326855205,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNjg1NTIwNQ==",
      "diff_hunk": "@@ -3711,18 +3711,10 @@ static int64_t GetOldestKeyTimeInPool(const std::set<int64_t>& setKeyPool, Walle\n int64_t CWallet::GetOldestKeyPoolTime()\n {\n     LOCK(cs_wallet);\n-\n-    WalletBatch batch(*database);\n-\n-    // load oldest key from keypool, get time and return\n-    int64_t oldestKey = GetOldestKeyTimeInPool(setExternalKeyPool, batch);\n-    if (IsHDEnabled() && CanSupportFeature(FEATURE_HD_SPLIT)) {\n-        oldestKey = std::max(GetOldestKeyTimeInPool(setInternalKeyPool, batch), oldestKey);\n-        if (!set_pre_split_keypool.empty()) {\n-            oldestKey = std::max(GetOldestKeyTimeInPool(set_pre_split_keypool, batch), oldestKey);\n-        }\n+    int64_t oldestKey = 0;\n+    for (const auto& spk_man_pair : m_spk_managers) {\n+        oldestKey = std::max(oldestKey, spk_man_pair.second->GetOldestKeyPoolTime());",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 16,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "d3dde67e4aba051bea38daae60ed80fd4db69d3b",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In d3dde67e4aba051bea38daae60ed80fd4db69d3b:  `GetOldestKeyPoolTime` was introduced in #10235. It calls `GetOldestKeyTimeInPool` for the internal and external keypools. IIUC this gets the timestamp from keypool entry at index 0. For legacy wallets those are the same, so `std::max` is fine. But if we add descriptor wallets, and allow importing them after wallet creation, then `std::max` would return the newest one. So maybe we should switch to `std::min` here and initialize `oldestKey` with `Time()`?  \r\n\r\nAlternatively we could drop `keypoololdest` in the RPC wallet for non-legacy spk_managers, and show it for each individual descriptor instead of the whole wallet.",
      "created_at": "2019-09-21T10:17:18Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r326855205",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/326855205"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3112,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/327202951",
      "pull_request_review_id": 291892426,
      "id": 327202951,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNzIwMjk1MQ==",
      "diff_hunk": "@@ -0,0 +1,484 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+#define BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <wallet/crypter.h>\n+#include <wallet/ismine.h>\n+#include <wallet/walletdb.h>\n+#include <wallet/walletutil.h>\n+\n+#include <functional>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+enum class OutputType;\n+\n+//! Default for -keypool\n+static const unsigned int DEFAULT_KEYPOOL_SIZE = 1000;\n+\n+std::vector<CKeyID> GetAffectedKeys(const CScript& spk, const SigningProvider& provider);\n+\n+/** A key from a CWallet's keypool\n+ *\n+ * The wallet holds one (for pre HD-split wallets) or several keypools. These\n+ * are sets of keys that have not yet been used to provide addresses or receive\n+ * change.\n+ *\n+ * The Bitcoin Core wallet was originally a collection of unrelated private\n+ * keys with their associated addresses. If a non-HD wallet generated a\n+ * key/address, gave that address out and then restored a backup from before\n+ * that key's generation, then any funds sent to that address would be\n+ * lost definitively.\n+ *\n+ * The keypool was implemented to avoid this scenario (commit: 10384941). The\n+ * wallet would generate a set of keys (100 by default). When a new public key\n+ * was required, either to give out as an address or to use in a change output,\n+ * it would be drawn from the keypool. The keypool would then be topped up to\n+ * maintain 100 keys. This ensured that as long as the wallet hadn't used more\n+ * than 100 keys since the previous backup, all funds would be safe, since a\n+ * restored wallet would be able to scan for all owned addresses.\n+ *\n+ * A keypool also allowed encrypted wallets to give out addresses without\n+ * having to be decrypted to generate a new private key.\n+ *\n+ * With the introduction of HD wallets (commit: f1902510), the keypool\n+ * essentially became an address look-ahead pool. Restoring old backups can no\n+ * longer definitively lose funds as long as the addresses used were from the\n+ * wallet's HD seed (since all private keys can be rederived from the seed).\n+ * However, if many addresses were used since the backup, then the wallet may\n+ * not know how far ahead in the HD chain to look for its addresses. The\n+ * keypool is used to implement a 'gap limit'. The keypool maintains a set of\n+ * keys (by default 1000) ahead of the last used key and scans for the\n+ * addresses of those keys.  This avoids the risk of not seeing transactions\n+ * involving the wallet's addresses, or of re-using the same address.\n+ *\n+ * The HD-split wallet feature added a second keypool (commit: 02592f4c). There\n+ * is an external keypool (for addresses to hand out) and an internal keypool\n+ * (for change addresses).\n+ *\n+ * Keypool keys are stored in the wallet/keystore's keymap. The keypool data is\n+ * stored as sets of indexes in the wallet (setInternalKeyPool,\n+ * setExternalKeyPool and set_pre_split_keypool), and a map from the key to the\n+ * index (m_pool_key_to_index). The CKeyPool object is used to\n+ * serialize/deserialize the pool data to/from the database.\n+ */\n+class CKeyPool\n+{\n+public:\n+    //! The time at which the key was generated. Set in AddKeypoolPubKeyWithDB\n+    int64_t nTime;\n+    //! The public key\n+    CPubKey vchPubKey;\n+    //! Whether this keypool entry is in the internal keypool (for change outputs)\n+    bool fInternal;\n+    //! Whether this key was generated for a keypool before the wallet was upgraded to HD-split\n+    bool m_pre_split;\n+\n+    CKeyPool();\n+    CKeyPool(const CPubKey& vchPubKeyIn, bool internalIn);\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        int nVersion = s.GetVersion();\n+        if (!(s.GetType() & SER_GETHASH))\n+            READWRITE(nVersion);\n+        READWRITE(nTime);\n+        READWRITE(vchPubKey);\n+        if (ser_action.ForRead()) {\n+            try {\n+                READWRITE(fInternal);\n+            }\n+            catch (std::ios_base::failure&) {\n+                /* flag as external address if we can't read the internal boolean\n+                   (this will be the case for any wallet before the HD chain split version) */\n+                fInternal = false;\n+            }\n+            try {\n+                READWRITE(m_pre_split);\n+            }\n+            catch (std::ios_base::failure&) {\n+                /* flag as postsplit address if we can't read the m_pre_split boolean\n+                   (this will be the case for any wallet that upgrades to HD chain split)*/\n+                m_pre_split = false;\n+            }\n+        }\n+        else {\n+            READWRITE(fInternal);\n+            READWRITE(m_pre_split);\n+        }\n+    }\n+};\n+\n+typedef std::function<void(uint64_t)> FlagFunc;\n+typedef std::function<void(WalletBatch&, uint64_t)> FlagFuncWithDB;\n+typedef std::function<bool(uint64_t)> FlagSetFunc;\n+typedef std::function<bool(enum WalletFeature)> VersionFunc;\n+typedef std::function<std::string()> NameFunc;\n+typedef std::function<void(enum WalletFeature)> SetVersionFunc;\n+\n+/*\n+ * A class implementing ScriptPubKeyMan manages some (or all) scriptPubKeys used in a wallet.\n+ * It contains the scripts and keys related to the scriptPubKeys it manages.\n+ * A ScriptPubKeyMan will be able to give out scriptPubKeys to be used, as well as marking\n+ * when a scriptPubKey has been used. It also handles when and how to store a scriptPubKey\n+ * and it's related scripts and keys, including encryption.\n+ */\n+\n+class ScriptPubKeyMan\n+{\n+protected:\n+    FlagSetFunc IsWalletFlagSet; // Function pointer to function that determines if a wallet flag is set\n+    FlagFunc SetWalletFlag; // Function pointer to function to set wallet flags\n+    FlagFuncWithDB UnsetWalletFlagWithDB; // Function pointer to function to unset wallet flags\n+    VersionFunc CanSupportFeature; // Function pointer to function that indicates whether the feature is supported\n+    NameFunc GetDisplayName; // Function pointer to GetDisplayName to get the name of a wallet for WalletLogPrintf\n+    SetVersionFunc SetMinVersion; // Function pointer to SetMinVersion in the wallet\n+\n+    /** Internal database handle. */\n+    std::shared_ptr<WalletDatabase> m_database;\n+\n+public:\n+    ScriptPubKeyMan(FlagSetFunc is_set_func, FlagFunc set_flag_func, FlagFuncWithDB unset_flag_func, VersionFunc feature_sup_func, NameFunc wallet_name_func, SetVersionFunc set_version_func, std::shared_ptr<WalletDatabase> database)\n+        :   IsWalletFlagSet(is_set_func),\n+            SetWalletFlag(set_flag_func),\n+            UnsetWalletFlagWithDB(unset_flag_func),\n+            CanSupportFeature(feature_sup_func),\n+            GetDisplayName(wallet_name_func),\n+            SetMinVersion(set_version_func),\n+            m_database(database)\n+        {}\n+\n+    virtual ~ScriptPubKeyMan() {};\n+    virtual bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) { return false; }\n+    virtual isminetype IsMine(const CScript& script) const { return ISMINE_NO; }\n+\n+    virtual bool IsCrypted() const { return false; }\n+    virtual bool IsLocked() const { return false; }\n+    virtual bool Lock() { return false; }\n+\n+    virtual bool Unlock(const CKeyingMaterial& vMasterKeyIn, bool accept_no_keys = false) { return false; }\n+    virtual bool Encrypt(CKeyingMaterial& vMasterKeyIn, WalletBatch* batch) { return false; }\n+\n+    virtual bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool) { return false; }\n+    virtual void KeepDestination(int64_t index) {}\n+    virtual void ReturnDestination(int64_t index, bool internal, const CTxDestination& addr) {}\n+\n+    virtual bool TopUp(unsigned int size = 0) { return false; }\n+\n+    //! Mark unused addresses as being used\n+    virtual void MarkUnusedAddresses(const CScript& script) {}\n+\n+    //! Upgrade stored CKeyMetadata objects to store key origin info as KeyOriginInfo\n+    virtual void UpgradeKeyMetadata() {}\n+\n+    /** Sets up the key generation stuff, i.e. generates new HD seeds and sets them as active.\n+      * Returns false if already setup or setup fails, true if setup is successful\n+      * Set force=true to make it re-setup if already setup, used for upgrades\n+      */\n+    virtual bool SetupGeneration(bool force = false) { return false; }\n+\n+    /* Returns true if HD is enabled */\n+    virtual bool IsHDEnabled() const { return false; }\n+\n+    /* Returns true if the wallet can give out new addresses. This means it has keys in the keypool or can generate new keys */\n+    virtual bool CanGetAddresses(bool internal = false) { return false; }\n+\n+    /** Upgrades the wallet to the specified version */\n+    virtual bool Upgrade(int prev_version, int new_version, std::string& error) { return false; }\n+\n+    virtual bool HavePrivateKeys() const { return false; }\n+\n+    //! The action to do when the DB needs rewrite\n+    virtual void RewriteDB() {}\n+\n+    virtual int64_t GetOldestKeyPoolTime() { return GetTime(); }\n+\n+    virtual size_t KeypoolCountExternalKeys() { return 0; }\n+    virtual unsigned int GetKeypoolSize() const { return 0; }\n+\n+    virtual int64_t GetTimeFirstKey() const { return 0; }\n+\n+    virtual const CKeyMetadata* GetMetadata(uint160 id) const { return nullptr; }\n+\n+    virtual std::unique_ptr<SigningProvider> GetSigningProvider(const CScript& script) const { return nullptr; }\n+\n+    /** Whether this ScriptPubKeyMan can provide a SigningProvider (via GetSigningProvider) that, combined with\n+      * sigdata, can produce a valid signature.\n+      */\n+    virtual bool CanProvide(const CScript& script, SignatureData& sigdata) { return false; }\n+\n+    virtual uint256 GetID() const { return uint256(); }\n+\n+    /** Prepends the wallet name in logging output to ease debugging in multi-wallet use cases */\n+    template<typename... Params>\n+    void WalletLogPrintf(std::string fmt, Params... parameters) const {\n+        LogPrintf((\"%s \" + fmt).c_str(), GetDisplayName(), parameters...);\n+    };\n+\n+    /** Watch-only address added */\n+    boost::signals2::signal<void (bool fHaveWatchOnly)> NotifyWatchonlyChanged;\n+\n+    /** Keypool has new keys */\n+    boost::signals2::signal<void ()> NotifyCanGetAddressesChanged;\n+};\n+\n+class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProvider\n+{\n+private:\n+    //! if fUseCrypto is true, mapKeys must be empty\n+    //! if fUseCrypto is false, vMasterKey must be empty\n+    std::atomic<bool> fUseCrypto{false};\n+\n+    bool SetCrypted();\n+\n+    //! keeps track of whether Unlock has run a thorough check before\n+    bool fDecryptionThoroughlyChecked = false;\n+\n+    //! Master encryption key for the wallet. Keys are encrypted with this.\n+    //! Wallet is unlocked if this is not null.\n+    CKeyingMaterial vMasterKey GUARDED_BY(cs_KeyStore);",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": null,
      "original_position": 246,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "fb0058ed68a18053959001a0191f3fbcfec50526",
      "in_reply_to_id": 323884483,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I've changed the encryption stuff to be mostly in line with @ryanofsky's suggestions.\r\n\r\n***\r\n\r\n> As far as I can tell the `CWallet::fUseCrypto` state is broken in the current PR. `CWallet::SetCrypted()` used to be called whenever any encrypted data was present, but now that now longer happens, and `CWallet::IsCrypted()` returns false if the wallet hasn't been explicitly encrypted or locked since startup, regardless of what encrypted keys or data are present.\r\n\r\nFWIW it wasn't broken. `SetCrypted` was changed to be called during wallet loading so `fUseCrypto` would be true and thus `IsCrypted()` returned true. Otherwise tests wouldn't pass.",
      "created_at": "2019-09-23T16:10:15Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r327202951",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/327202951"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 244,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/327238489",
      "pull_request_review_id": 291937625,
      "id": 327238489,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNzIzODQ4OQ==",
      "diff_hunk": "@@ -26,9 +26,183 @@ bool LegacyScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestinat\n     return true;\n }\n \n+typedef std::vector<unsigned char> valtype;\n+\n+namespace {\n+\n+/**\n+ * This is an enum that tracks the execution context of a script, similar to\n+ * SigVersion in script/interpreter. It is separate however because we want to\n+ * distinguish between top-level scriptPubKey execution and P2SH redeemScript\n+ * execution (a distinction that has no impact on consensus rules).\n+ */\n+enum class IsMineSigVersion\n+{\n+    TOP = 0,        //!< scriptPubKey execution\n+    P2SH = 1,       //!< P2SH redeemScript\n+    WITNESS_V0 = 2, //!< P2WSH witness script execution\n+};\n+\n+/**\n+ * This is an internal representation of isminetype + invalidity.\n+ * Its order is significant, as we return the max of all explored\n+ * possibilities.\n+ */\n+enum class IsMineResult\n+{\n+    NO = 0,         //!< Not ours\n+    WATCH_ONLY = 1, //!< Included in watch-only balance\n+    SPENDABLE = 2,  //!< Included in all balances\n+    INVALID = 3,    //!< Not spendable by anyone (uncompressed pubkey in segwit, P2SH inside P2SH or witness, witness inside witness)\n+};\n+\n+bool PermitsUncompressed(IsMineSigVersion sigversion)\n+{\n+    return sigversion == IsMineSigVersion::TOP || sigversion == IsMineSigVersion::P2SH;\n+}\n+\n+bool HaveKeys(const std::vector<valtype>& pubkeys, const LegacyScriptPubKeyMan& keystore)\n+{\n+    for (const valtype& pubkey : pubkeys) {\n+        CKeyID keyID = CPubKey(pubkey).GetID();\n+        if (!keystore.HaveKey(keyID)) return false;\n+    }\n+    return true;\n+}\n+\n+IsMineResult IsMineInner(const LegacyScriptPubKeyMan& keystore, const CScript& scriptPubKey, IsMineSigVersion sigversion)\n+{\n+    IsMineResult ret = IsMineResult::NO;\n+\n+    std::vector<valtype> vSolutions;\n+    txnouttype whichType = Solver(scriptPubKey, vSolutions);\n+\n+    CKeyID keyID;\n+    switch (whichType)\n+    {\n+    case TX_NONSTANDARD:\n+    case TX_NULL_DATA:\n+    case TX_WITNESS_UNKNOWN:\n+        break;\n+    case TX_PUBKEY:\n+        keyID = CPubKey(vSolutions[0]).GetID();\n+        if (!PermitsUncompressed(sigversion) && vSolutions[0].size() != 33) {\n+            return IsMineResult::INVALID;\n+        }\n+        if (keystore.HaveKey(keyID)) {\n+            ret = std::max(ret, IsMineResult::SPENDABLE);\n+        }\n+        break;\n+    case TX_WITNESS_V0_KEYHASH:\n+    {\n+        if (sigversion == IsMineSigVersion::WITNESS_V0) {\n+            // P2WPKH inside P2WSH is invalid.\n+            return IsMineResult::INVALID;\n+        }\n+        if (sigversion == IsMineSigVersion::TOP && !keystore.HaveCScript(CScriptID(CScript() << OP_0 << vSolutions[0]))) {\n+            // We do not support bare witness outputs unless the P2SH version of it would be\n+            // acceptable as well. This protects against matching before segwit activates.\n+            // This also applies to the P2WSH case.\n+            break;\n+        }\n+        ret = std::max(ret, IsMineInner(keystore, GetScriptForDestination(PKHash(uint160(vSolutions[0]))), IsMineSigVersion::WITNESS_V0));\n+        break;\n+    }\n+    case TX_PUBKEYHASH:\n+    {\n+        keyID = CKeyID(uint160(vSolutions[0]));\n+        CPubKey pubkey;\n+        if (keystore.GetPubKey(keyID, pubkey)) {\n+            if (!PermitsUncompressed(sigversion) && !pubkey.IsCompressed()) {\n+                return IsMineResult::INVALID;\n+            } else {\n+                ret = std::max(ret, IsMineResult::WATCH_ONLY);\n+            }\n+        }\n+        if (keystore.HaveKey(keyID)) {\n+            ret = std::max(ret, IsMineResult::SPENDABLE);\n+        }\n+        break;\n+    }\n+    case TX_SCRIPTHASH:",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 128,
      "original_position": 102,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "8a2d51c741b896842e093fa35590ef36abb907c4",
      "in_reply_to_id": 326852547,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Moved into its own commit",
      "created_at": "2019-09-23T17:30:00Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r327238489",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/327238489"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 128,
      "original_line": 128,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/327238644",
      "pull_request_review_id": 291937831,
      "id": 327238644,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNzIzODY0NA==",
      "diff_hunk": "@@ -3711,18 +3711,10 @@ static int64_t GetOldestKeyTimeInPool(const std::set<int64_t>& setKeyPool, Walle\n int64_t CWallet::GetOldestKeyPoolTime()\n {\n     LOCK(cs_wallet);\n-\n-    WalletBatch batch(*database);\n-\n-    // load oldest key from keypool, get time and return\n-    int64_t oldestKey = GetOldestKeyTimeInPool(setExternalKeyPool, batch);\n-    if (IsHDEnabled() && CanSupportFeature(FEATURE_HD_SPLIT)) {\n-        oldestKey = std::max(GetOldestKeyTimeInPool(setInternalKeyPool, batch), oldestKey);\n-        if (!set_pre_split_keypool.empty()) {\n-            oldestKey = std::max(GetOldestKeyTimeInPool(set_pre_split_keypool, batch), oldestKey);\n-        }\n+    int64_t oldestKey = 0;\n+    for (const auto& spk_man_pair : m_spk_managers) {\n+        oldestKey = std::max(oldestKey, spk_man_pair.second->GetOldestKeyPoolTime());",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 16,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "d3dde67e4aba051bea38daae60ed80fd4db69d3b",
      "in_reply_to_id": 326855205,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I've changed it to use `min`. Looking at the original implementation in master, it actually looks like it's broken as it uses `max`.",
      "created_at": "2019-09-23T17:30:22Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r327238644",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/327238644"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3112,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/327802999",
      "pull_request_review_id": 292667391,
      "id": 327802999,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNzgwMjk5OQ==",
      "diff_hunk": "@@ -942,8 +740,8 @@ class CWallet final : public FillableSigningProvider, private interfaces::Chain:\n         encrypted_batch = nullptr;",
      "path": "src/wallet/wallet.h",
      "position": null,
      "original_position": 343,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "3b059468570db2405979f5cedee5bb74f6fd7e87",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think there's any reason for CWallet::encrypted_batch to exist as a member variable anymore. It could just be a local in CWallet::EncryptWallet",
      "created_at": "2019-09-24T19:51:22Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r327802999",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/327802999"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 738,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/327807578",
      "pull_request_review_id": 292673294,
      "id": 327807578,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNzgwNzU3OA==",
      "diff_hunk": "@@ -515,8 +517,13 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n            wss.nKeys, wss.nCKeys, wss.nKeyMeta, wss.nKeys + wss.nCKeys, wss.m_unknown_records);\n \n     // nTimeFirstKey is only reliable if all keys have metadata\n-    if ((wss.nKeys + wss.nCKeys + wss.nWatchKeys) != wss.nKeyMeta)\n-        pwallet->UpdateTimeFirstKey(1);\n+    if ((wss.nKeys + wss.nCKeys + wss.nWatchKeys) != wss.nKeyMeta) {\n+        auto spk_man = pwallet->GetOrCreateLegacyScriptPubKeyMan();",
      "path": "src/wallet/walletdb.cpp",
      "position": 92,
      "original_position": 92,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "3b059468570db2405979f5cedee5bb74f6fd7e87",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Seems like this should use GetLegacyScriptPubKeyMan not GetOrCreateLegacyScriptPubKeyMan to make more sense and be in line with the previous code. Or if GetOrCreateLegacyScriptPubKeyMan is actually better here, probably should drop if (spk_man) condition which would never be false",
      "created_at": "2019-09-24T20:02:12Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r327807578",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/327807578"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 521,
      "original_line": 521,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/327810122",
      "pull_request_review_id": 292676653,
      "id": 327810122,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNzgxMDEyMg==",
      "diff_hunk": "@@ -942,8 +740,8 @@ class CWallet final : public FillableSigningProvider, private interfaces::Chain:\n         encrypted_batch = nullptr;",
      "path": "src/wallet/wallet.h",
      "position": null,
      "original_position": 343,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "3b059468570db2405979f5cedee5bb74f6fd7e87",
      "in_reply_to_id": 327802999,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2019-09-24T20:08:22Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r327810122",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/327810122"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 738,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/327810255",
      "pull_request_review_id": 292676804,
      "id": 327810255,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNzgxMDI1NQ==",
      "diff_hunk": "@@ -515,8 +517,13 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n            wss.nKeys, wss.nCKeys, wss.nKeyMeta, wss.nKeys + wss.nCKeys, wss.m_unknown_records);\n \n     // nTimeFirstKey is only reliable if all keys have metadata\n-    if ((wss.nKeys + wss.nCKeys + wss.nWatchKeys) != wss.nKeyMeta)\n-        pwallet->UpdateTimeFirstKey(1);\n+    if ((wss.nKeys + wss.nCKeys + wss.nWatchKeys) != wss.nKeyMeta) {\n+        auto spk_man = pwallet->GetOrCreateLegacyScriptPubKeyMan();",
      "path": "src/wallet/walletdb.cpp",
      "position": 92,
      "original_position": 92,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "3b059468570db2405979f5cedee5bb74f6fd7e87",
      "in_reply_to_id": 327807578,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Changed to GetLegacyScriptPubKeyMan.",
      "created_at": "2019-09-24T20:08:41Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r327810255",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/327810255"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 521,
      "original_line": 521,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/328235024",
      "pull_request_review_id": 293226326,
      "id": 328235024,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyODIzNTAyNA==",
      "diff_hunk": "@@ -283,10 +142,10 @@ class ReserveDestination\n protected:\n     //! The wallet to reserve from\n     CWallet* pwallet;\n+    //! The ScriptPubKeyMan to reserve from. Based on type when GetReservedDestination is called\n+    ScriptPubKeyMan* m_spk_man;",
      "path": "src/wallet/wallet.h",
      "position": null,
      "original_position": 182,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "47b342db0ddb1bc9bc595635e36bb2f16921a605",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It'd be good to initialize this to nullptr since it's not set in the constructor like pwallet is",
      "created_at": "2019-09-25T16:59:19Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r328235024",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/328235024"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 146,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/328303075",
      "pull_request_review_id": 293315156,
      "id": 328303075,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyODMwMzA3NQ==",
      "diff_hunk": "@@ -0,0 +1,479 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+#define BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <wallet/crypter.h>\n+#include <wallet/ismine.h>\n+#include <wallet/walletdb.h>\n+#include <wallet/walletutil.h>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+enum class OutputType;\n+\n+// Wallet storage things that ScriptPubKeyMans need in order to be able to store things to the wallet database\n+class WalletStorage\n+{\n+public:\n+    virtual ~WalletStorage() = default;\n+    virtual const std::string GetDisplayName() const = 0;\n+    virtual std::shared_ptr<WalletDatabase> GetDatabase() = 0;\n+    virtual bool IsWalletFlagSet(uint64_t) const = 0;\n+    virtual void SetWalletFlag(uint64_t) = 0;",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": 31,
      "original_position": 27,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "47b342db0ddb1bc9bc595635e36bb2f16921a605",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "SetWalletFlag method and override don't seem to be called anymore could be removed.",
      "created_at": "2019-09-25T19:35:44Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r328303075",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/328303075"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 31,
      "original_line": 31,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/328732616",
      "pull_request_review_id": 293880119,
      "id": 328732616,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyODczMjYxNg==",
      "diff_hunk": "@@ -726,34 +585,19 @@ class WalletRescanReserver; //forward declarations for ScanForWalletTransactions\n  * A CWallet is an extension of a keystore, which also maintains a set of transactions and balances,\n  * and provides the ability to create new transactions.\n  */\n-class CWallet final : public FillableSigningProvider, private interfaces::Chain::Notifications\n+class CWallet final : public WalletStorage, private interfaces::Chain::Notifications\n {\n private:\n-    CKeyingMaterial vMasterKey GUARDED_BY(cs_KeyStore);\n-\n-    //! if fUseCrypto is true, mapKeys must be empty\n-    //! if fUseCrypto is false, vMasterKey must be empty\n-    std::atomic<bool> fUseCrypto;\n-\n-    //! keeps track of whether Unlock has run a thorough check before\n-    bool fDecryptionThoroughlyChecked;\n+    CKeyingMaterial vMasterKey GUARDED_BY(cs_wallet);\n \n     using CryptedKeyMap = std::map<CKeyID, std::pair<CPubKey, std::vector<unsigned char>>>;\n     using WatchOnlySet = std::set<CScript>;\n     using WatchKeyMap = std::map<CKeyID, CPubKey>;\n \n-    bool SetCrypted();\n-\n     //! will encrypt previously unencrypted keys\n     bool EncryptKeys(CKeyingMaterial& vMasterKeyIn);",
      "path": "src/wallet/wallet.h",
      "position": null,
      "original_position": 215,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "47b342db0ddb1bc9bc595635e36bb2f16921a605",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Looks like this should be removed. (Calls and definition were removed but not this declaration.)",
      "created_at": "2019-09-26T17:20:22Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r328732616",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/328732616"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 598,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/328763555",
      "pull_request_review_id": 293920786,
      "id": 328763555,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyODc2MzU1NQ==",
      "diff_hunk": "@@ -4701,133 +4038,6 @@ bool CWallet::Unlock(const CKeyingMaterial& vMasterKeyIn, bool accept_no_keys)\n     return true;\n }\n \n-bool CWallet::HaveKey(const CKeyID &address) const\n-{\n-    LOCK(cs_KeyStore);\n-    if (!IsCrypted()) {\n-        return FillableSigningProvider::HaveKey(address);\n-    }\n-    return mapCryptedKeys.count(address) > 0;\n-}\n-\n-bool CWallet::GetKey(const CKeyID &address, CKey& keyOut) const\n-{\n-    LOCK(cs_KeyStore);\n-    if (!IsCrypted()) {\n-        return FillableSigningProvider::GetKey(address, keyOut);\n-    }\n-\n-    CryptedKeyMap::const_iterator mi = mapCryptedKeys.find(address);\n-    if (mi != mapCryptedKeys.end())\n-    {\n-        const CPubKey &vchPubKey = (*mi).second.first;\n-        const std::vector<unsigned char> &vchCryptedSecret = (*mi).second.second;\n-        return DecryptKey(vMasterKey, vchCryptedSecret, vchPubKey, keyOut);\n-    }\n-    return false;\n-}\n-\n-bool CWallet::GetWatchPubKey(const CKeyID &address, CPubKey &pubkey_out) const\n-{\n-    LOCK(cs_KeyStore);\n-    WatchKeyMap::const_iterator it = mapWatchKeys.find(address);\n-    if (it != mapWatchKeys.end()) {\n-        pubkey_out = it->second;\n-        return true;\n-    }\n-    return false;\n-}\n-\n-bool CWallet::GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const\n-{\n-    LOCK(cs_KeyStore);\n-    if (!IsCrypted()) {\n-        if (!FillableSigningProvider::GetPubKey(address, vchPubKeyOut)) {\n-            return GetWatchPubKey(address, vchPubKeyOut);\n-        }\n-        return true;\n-    }\n-\n-    CryptedKeyMap::const_iterator mi = mapCryptedKeys.find(address);\n-    if (mi != mapCryptedKeys.end())\n-    {\n-        vchPubKeyOut = (*mi).second.first;\n-        return true;\n-    }\n-    // Check for watch-only pubkeys\n-    return GetWatchPubKey(address, vchPubKeyOut);\n-}\n-\n-std::set<CKeyID> CWallet::GetKeys() const",
      "path": "src/wallet/wallet.cpp",
      "position": 1668,
      "original_position": 815,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "47b342db0ddb1bc9bc595635e36bb2f16921a605",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Remove unused functions and switch CWallet to use ScriptPubKeyMan\" (47b342db0ddb1bc9bc595635e36bb2f16921a605)\r\n\r\nThere's no replacement for this function and I think losing it might break `CWallet::GetKeyBirthTimes` for encrypted wallets. Regardless, this should probably become a keyman method instead of being removed so the SigningProvider interface returns consistent results.",
      "created_at": "2019-09-26T18:29:37Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r328763555",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/328763555"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4865,
      "original_line": 4865,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/328771626",
      "pull_request_review_id": 293931426,
      "id": 328771626,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyODc3MTYyNg==",
      "diff_hunk": "@@ -0,0 +1,479 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+#define BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <wallet/crypter.h>\n+#include <wallet/ismine.h>\n+#include <wallet/walletdb.h>\n+#include <wallet/walletutil.h>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+enum class OutputType;\n+\n+// Wallet storage things that ScriptPubKeyMans need in order to be able to store things to the wallet database\n+class WalletStorage\n+{\n+public:\n+    virtual ~WalletStorage() = default;\n+    virtual const std::string GetDisplayName() const = 0;\n+    virtual std::shared_ptr<WalletDatabase> GetDatabase() = 0;\n+    virtual bool IsWalletFlagSet(uint64_t) const = 0;\n+    virtual void SetWalletFlag(uint64_t) = 0;\n+    virtual void UnsetWalletFlagWithDB(WalletBatch&, uint64_t) = 0;\n+    virtual bool CanSupportFeature(enum WalletFeature) const = 0;\n+    virtual void SetMinVersion(enum WalletFeature, WalletBatch* = nullptr, bool = false) = 0;\n+    virtual const CKeyingMaterial& GetEncryptionKey() const = 0;\n+    virtual bool IsLocked() const = 0;\n+};\n+\n+//! Default for -keypool\n+static const unsigned int DEFAULT_KEYPOOL_SIZE = 1000;\n+\n+std::vector<CKeyID> GetAffectedKeys(const CScript& spk, const SigningProvider& provider);\n+\n+/** A key from a CWallet's keypool\n+ *\n+ * The wallet holds one (for pre HD-split wallets) or several keypools. These\n+ * are sets of keys that have not yet been used to provide addresses or receive\n+ * change.\n+ *\n+ * The Bitcoin Core wallet was originally a collection of unrelated private\n+ * keys with their associated addresses. If a non-HD wallet generated a\n+ * key/address, gave that address out and then restored a backup from before\n+ * that key's generation, then any funds sent to that address would be\n+ * lost definitively.\n+ *\n+ * The keypool was implemented to avoid this scenario (commit: 10384941). The\n+ * wallet would generate a set of keys (100 by default). When a new public key\n+ * was required, either to give out as an address or to use in a change output,\n+ * it would be drawn from the keypool. The keypool would then be topped up to\n+ * maintain 100 keys. This ensured that as long as the wallet hadn't used more\n+ * than 100 keys since the previous backup, all funds would be safe, since a\n+ * restored wallet would be able to scan for all owned addresses.\n+ *\n+ * A keypool also allowed encrypted wallets to give out addresses without\n+ * having to be decrypted to generate a new private key.\n+ *\n+ * With the introduction of HD wallets (commit: f1902510), the keypool\n+ * essentially became an address look-ahead pool. Restoring old backups can no\n+ * longer definitively lose funds as long as the addresses used were from the\n+ * wallet's HD seed (since all private keys can be rederived from the seed).\n+ * However, if many addresses were used since the backup, then the wallet may\n+ * not know how far ahead in the HD chain to look for its addresses. The\n+ * keypool is used to implement a 'gap limit'. The keypool maintains a set of\n+ * keys (by default 1000) ahead of the last used key and scans for the\n+ * addresses of those keys.  This avoids the risk of not seeing transactions\n+ * involving the wallet's addresses, or of re-using the same address.\n+ *\n+ * The HD-split wallet feature added a second keypool (commit: 02592f4c). There\n+ * is an external keypool (for addresses to hand out) and an internal keypool\n+ * (for change addresses).\n+ *\n+ * Keypool keys are stored in the wallet/keystore's keymap. The keypool data is\n+ * stored as sets of indexes in the wallet (setInternalKeyPool,\n+ * setExternalKeyPool and set_pre_split_keypool), and a map from the key to the\n+ * index (m_pool_key_to_index). The CKeyPool object is used to\n+ * serialize/deserialize the pool data to/from the database.\n+ */\n+class CKeyPool\n+{\n+public:\n+    //! The time at which the key was generated. Set in AddKeypoolPubKeyWithDB\n+    int64_t nTime;\n+    //! The public key\n+    CPubKey vchPubKey;\n+    //! Whether this keypool entry is in the internal keypool (for change outputs)\n+    bool fInternal;\n+    //! Whether this key was generated for a keypool before the wallet was upgraded to HD-split\n+    bool m_pre_split;\n+\n+    CKeyPool();\n+    CKeyPool(const CPubKey& vchPubKeyIn, bool internalIn);\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        int nVersion = s.GetVersion();\n+        if (!(s.GetType() & SER_GETHASH))\n+            READWRITE(nVersion);\n+        READWRITE(nTime);\n+        READWRITE(vchPubKey);\n+        if (ser_action.ForRead()) {\n+            try {\n+                READWRITE(fInternal);\n+            }\n+            catch (std::ios_base::failure&) {\n+                /* flag as external address if we can't read the internal boolean\n+                   (this will be the case for any wallet before the HD chain split version) */\n+                fInternal = false;\n+            }\n+            try {\n+                READWRITE(m_pre_split);\n+            }\n+            catch (std::ios_base::failure&) {\n+                /* flag as postsplit address if we can't read the m_pre_split boolean\n+                   (this will be the case for any wallet that upgrades to HD chain split)*/\n+                m_pre_split = false;\n+            }\n+        }\n+        else {\n+            READWRITE(fInternal);\n+            READWRITE(m_pre_split);\n+        }\n+    }\n+};\n+\n+/*\n+ * A class implementing ScriptPubKeyMan manages some (or all) scriptPubKeys used in a wallet.\n+ * It contains the scripts and keys related to the scriptPubKeys it manages.\n+ * A ScriptPubKeyMan will be able to give out scriptPubKeys to be used, as well as marking\n+ * when a scriptPubKey has been used. It also handles when and how to store a scriptPubKey\n+ * and it's related scripts and keys, including encryption.\n+ */\n+class ScriptPubKeyMan\n+{\n+private:\n+    WalletStorage& storage;\n+\n+protected:\n+    std::shared_ptr<WalletDatabase> m_database;\n+\n+public:\n+    ScriptPubKeyMan(WalletStorage& storage) : storage(storage), m_database(storage.GetDatabase()) {}\n+\n+    const std::string GetDisplayName() const { return storage.GetDisplayName(); }\n+    bool IsWalletFlagSet(uint64_t flag) const { return storage.IsWalletFlagSet(flag); }\n+    void SetWalletFlag(uint64_t flag) { return storage.SetWalletFlag(flag); }\n+    void UnsetWalletFlagWithDB(WalletBatch& batch, uint64_t flag) { return storage.UnsetWalletFlagWithDB(batch, flag); }\n+    bool CanSupportFeature(enum WalletFeature wf) const { return storage.CanSupportFeature(wf); }\n+    void SetMinVersion(enum WalletFeature wf) { return storage.SetMinVersion(wf); }\n+    const CKeyingMaterial& GetEncryptionKey() const { return storage.GetEncryptionKey(); }\n+    bool IsLocked() const { return storage.IsLocked(); }\n+\n+    virtual ~ScriptPubKeyMan() {};\n+    virtual bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) { return false; }\n+    virtual isminetype IsMine(const CScript& script) const { return ISMINE_NO; }\n+\n+    virtual bool HasEncryptedData() const { return false; }\n+\n+    virtual bool CheckDecryptionKey(const CKeyingMaterial& vMasterKeyIn, bool accept_no_keys = false) { return false; }\n+    virtual bool Encrypt(CKeyingMaterial& vMasterKeyIn, WalletBatch* batch) { return false; }",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": null,
      "original_position": 167,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "47b342db0ddb1bc9bc595635e36bb2f16921a605",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Master key argument should be a const reference, not mutable. Also these arguments could be named master_key, since there's no longer any vMasterKeyIn/vMasterKey conflict.",
      "created_at": "2019-09-26T18:48:32Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r328771626",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/328771626"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 167,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/328786049",
      "pull_request_review_id": 293950668,
      "id": 328786049,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyODc4NjA0OQ==",
      "diff_hunk": "@@ -0,0 +1,1445 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <key_io.h>\n+#include <outputtype.h>\n+#include <script/descriptor.h>\n+#include <util/bip32.h>\n+#include <util/strencodings.h>\n+#include <util/translation.h>\n+#include <wallet/scriptpubkeyman.h>\n+\n+bool LegacyScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n+{\n+    error.clear();\n+    TopUpKeyPool();\n+\n+    // Generate a new key that is added to wallet\n+    CPubKey new_key;\n+    if (!GetKeyFromPool(new_key)) {\n+        error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+        return false;\n+    }\n+    LearnRelatedScripts(new_key, type);\n+    dest = GetDestinationForKey(new_key, type);\n+    return true;\n+}\n+\n+typedef std::vector<unsigned char> valtype;\n+\n+namespace {\n+\n+/**\n+ * This is an enum that tracks the execution context of a script, similar to\n+ * SigVersion in script/interpreter. It is separate however because we want to\n+ * distinguish between top-level scriptPubKey execution and P2SH redeemScript\n+ * execution (a distinction that has no impact on consensus rules).\n+ */\n+enum class IsMineSigVersion\n+{\n+    TOP = 0,        //!< scriptPubKey execution\n+    P2SH = 1,       //!< P2SH redeemScript\n+    WITNESS_V0 = 2, //!< P2WSH witness script execution\n+};\n+\n+/**\n+ * This is an internal representation of isminetype + invalidity.\n+ * Its order is significant, as we return the max of all explored\n+ * possibilities.\n+ */\n+enum class IsMineResult\n+{\n+    NO = 0,         //!< Not ours\n+    WATCH_ONLY = 1, //!< Included in watch-only balance\n+    SPENDABLE = 2,  //!< Included in all balances\n+    INVALID = 3,    //!< Not spendable by anyone (uncompressed pubkey in segwit, P2SH inside P2SH or witness, witness inside witness)\n+};\n+\n+bool PermitsUncompressed(IsMineSigVersion sigversion)\n+{\n+    return sigversion == IsMineSigVersion::TOP || sigversion == IsMineSigVersion::P2SH;\n+}\n+\n+bool HaveKeys(const std::vector<valtype>& pubkeys, const LegacyScriptPubKeyMan& keystore)\n+{\n+    for (const valtype& pubkey : pubkeys) {\n+        CKeyID keyID = CPubKey(pubkey).GetID();\n+        if (!keystore.HaveKey(keyID)) return false;\n+    }\n+    return true;\n+}\n+\n+IsMineResult IsMineInner(const LegacyScriptPubKeyMan& keystore, const CScript& scriptPubKey, IsMineSigVersion sigversion)\n+{\n+    IsMineResult ret = IsMineResult::NO;\n+\n+    std::vector<valtype> vSolutions;\n+    txnouttype whichType = Solver(scriptPubKey, vSolutions);\n+\n+    CKeyID keyID;\n+    switch (whichType)\n+    {\n+    case TX_NONSTANDARD:\n+    case TX_NULL_DATA:\n+    case TX_WITNESS_UNKNOWN:\n+        break;\n+    case TX_PUBKEY:\n+        keyID = CPubKey(vSolutions[0]).GetID();\n+        if (!PermitsUncompressed(sigversion) && vSolutions[0].size() != 33) {\n+            return IsMineResult::INVALID;\n+        }\n+        if (keystore.HaveKey(keyID)) {\n+            ret = std::max(ret, IsMineResult::SPENDABLE);\n+        }\n+        break;\n+    case TX_WITNESS_V0_KEYHASH:\n+    {\n+        if (sigversion == IsMineSigVersion::WITNESS_V0) {\n+            // P2WPKH inside P2WSH is invalid.\n+            return IsMineResult::INVALID;\n+        }\n+        if (sigversion == IsMineSigVersion::TOP && !keystore.HaveCScript(CScriptID(CScript() << OP_0 << vSolutions[0]))) {\n+            // We do not support bare witness outputs unless the P2SH version of it would be\n+            // acceptable as well. This protects against matching before segwit activates.\n+            // This also applies to the P2WSH case.\n+            break;\n+        }\n+        ret = std::max(ret, IsMineInner(keystore, GetScriptForDestination(PKHash(uint160(vSolutions[0]))), IsMineSigVersion::WITNESS_V0));\n+        break;\n+    }\n+    case TX_PUBKEYHASH:\n+    {\n+        keyID = CKeyID(uint160(vSolutions[0]));\n+        CPubKey pubkey;\n+        if (keystore.GetPubKey(keyID, pubkey)) {\n+            if (!PermitsUncompressed(sigversion) && !pubkey.IsCompressed()) {\n+                return IsMineResult::INVALID;\n+            } else {\n+                ret = std::max(ret, IsMineResult::WATCH_ONLY);\n+            }\n+        }\n+        if (keystore.HaveKey(keyID)) {\n+            ret = std::max(ret, IsMineResult::SPENDABLE);\n+        }\n+        break;\n+    }\n+    case TX_SCRIPTHASH:\n+    {\n+        if (sigversion != IsMineSigVersion::TOP) {\n+            // P2SH inside P2WSH or P2SH is invalid.\n+            return IsMineResult::INVALID;\n+        }\n+        CScriptID scriptID = CScriptID(uint160(vSolutions[0]));\n+        CScript subscript;\n+        if (keystore.GetCScript(scriptID, subscript)) {\n+            ret = std::max(ret, IsMineInner(keystore, subscript, IsMineSigVersion::P2SH));\n+        }\n+        break;\n+    }\n+    case TX_WITNESS_V0_SCRIPTHASH:\n+    {\n+        if (sigversion == IsMineSigVersion::WITNESS_V0) {\n+            // P2WSH inside P2WSH is invalid.\n+            return IsMineResult::INVALID;\n+        }\n+        if (sigversion == IsMineSigVersion::TOP && !keystore.HaveCScript(CScriptID(CScript() << OP_0 << vSolutions[0]))) {\n+            break;\n+        }\n+        uint160 hash;\n+        CRIPEMD160().Write(&vSolutions[0][0], vSolutions[0].size()).Finalize(hash.begin());\n+        CScriptID scriptID = CScriptID(hash);\n+        CScript subscript;\n+        if (keystore.GetCScript(scriptID, subscript)) {\n+            ret = std::max(ret, IsMineInner(keystore, subscript, IsMineSigVersion::WITNESS_V0));\n+        }\n+        break;\n+    }\n+\n+    case TX_MULTISIG:\n+    {\n+        // Never treat bare multisig outputs as ours (they can still be made watchonly-though)\n+        if (sigversion == IsMineSigVersion::TOP) {\n+            break;\n+        }\n+\n+        // Only consider transactions \"mine\" if we own ALL the\n+        // keys involved. Multi-signature transactions that are\n+        // partially owned (somebody else has a key that can spend\n+        // them) enable spend-out-from-under-you attacks, especially\n+        // in shared-wallet situations.\n+        std::vector<valtype> keys(vSolutions.begin()+1, vSolutions.begin()+vSolutions.size()-1);\n+        if (!PermitsUncompressed(sigversion)) {\n+            for (size_t i = 0; i < keys.size(); i++) {\n+                if (keys[i].size() != 33) {\n+                    return IsMineResult::INVALID;\n+                }\n+            }\n+        }\n+        if (HaveKeys(keys, keystore)) {\n+            ret = std::max(ret, IsMineResult::SPENDABLE);\n+        }\n+        break;\n+    }\n+    }\n+\n+    if (ret == IsMineResult::NO && keystore.HaveWatchOnly(scriptPubKey)) {\n+        ret = std::max(ret, IsMineResult::WATCH_ONLY);\n+    }\n+    return ret;\n+}\n+\n+} // namespace\n+\n+isminetype LegacyScriptPubKeyMan::IsMine(const CScript& script) const\n+{\n+    switch (IsMineInner(*this, script, IsMineSigVersion::TOP)) {\n+    case IsMineResult::INVALID:\n+    case IsMineResult::NO:\n+        return ISMINE_NO;\n+    case IsMineResult::WATCH_ONLY:\n+        return ISMINE_WATCH_ONLY;\n+    case IsMineResult::SPENDABLE:\n+        return ISMINE_SPENDABLE;\n+    }\n+    assert(false);\n+}\n+\n+bool LegacyScriptPubKeyMan::HasEncryptedData() const\n+{\n+    LOCK(cs_KeyStore);\n+    return fUseCrypto || !mapCryptedKeys.empty();",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 211,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "47b342db0ddb1bc9bc595635e36bb2f16921a605",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The `fUseCrypto` variable seems completely pointless now that IsCrypted is locking `cs_KeyStore` and checking `mapCryptedKeys.empty()`. As far as I can tell it only barely made sense before as an optimization to avoid locking. \r\n\r\nWould suggest dropping `fUseCrypto` and dropping the `SetCrypted` method, just replacing `if(!SetCrypted()) return false` calls with `if (!mapKeys.empty()) return false`",
      "created_at": "2019-09-26T19:24:42Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r328786049",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/328786049"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 211,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/328791872",
      "pull_request_review_id": 293958504,
      "id": 328791872,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyODc5MTg3Mg==",
      "diff_hunk": "@@ -0,0 +1,1445 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <key_io.h>\n+#include <outputtype.h>\n+#include <script/descriptor.h>\n+#include <util/bip32.h>\n+#include <util/strencodings.h>\n+#include <util/translation.h>\n+#include <wallet/scriptpubkeyman.h>\n+\n+bool LegacyScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n+{\n+    error.clear();\n+    TopUpKeyPool();\n+\n+    // Generate a new key that is added to wallet\n+    CPubKey new_key;\n+    if (!GetKeyFromPool(new_key)) {\n+        error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+        return false;\n+    }\n+    LearnRelatedScripts(new_key, type);\n+    dest = GetDestinationForKey(new_key, type);\n+    return true;\n+}\n+\n+typedef std::vector<unsigned char> valtype;\n+\n+namespace {\n+\n+/**\n+ * This is an enum that tracks the execution context of a script, similar to\n+ * SigVersion in script/interpreter. It is separate however because we want to\n+ * distinguish between top-level scriptPubKey execution and P2SH redeemScript\n+ * execution (a distinction that has no impact on consensus rules).\n+ */\n+enum class IsMineSigVersion\n+{\n+    TOP = 0,        //!< scriptPubKey execution\n+    P2SH = 1,       //!< P2SH redeemScript\n+    WITNESS_V0 = 2, //!< P2WSH witness script execution\n+};\n+\n+/**\n+ * This is an internal representation of isminetype + invalidity.\n+ * Its order is significant, as we return the max of all explored\n+ * possibilities.\n+ */\n+enum class IsMineResult\n+{\n+    NO = 0,         //!< Not ours\n+    WATCH_ONLY = 1, //!< Included in watch-only balance\n+    SPENDABLE = 2,  //!< Included in all balances\n+    INVALID = 3,    //!< Not spendable by anyone (uncompressed pubkey in segwit, P2SH inside P2SH or witness, witness inside witness)\n+};\n+\n+bool PermitsUncompressed(IsMineSigVersion sigversion)\n+{\n+    return sigversion == IsMineSigVersion::TOP || sigversion == IsMineSigVersion::P2SH;\n+}\n+\n+bool HaveKeys(const std::vector<valtype>& pubkeys, const LegacyScriptPubKeyMan& keystore)\n+{\n+    for (const valtype& pubkey : pubkeys) {\n+        CKeyID keyID = CPubKey(pubkey).GetID();\n+        if (!keystore.HaveKey(keyID)) return false;\n+    }\n+    return true;\n+}\n+\n+IsMineResult IsMineInner(const LegacyScriptPubKeyMan& keystore, const CScript& scriptPubKey, IsMineSigVersion sigversion)\n+{\n+    IsMineResult ret = IsMineResult::NO;\n+\n+    std::vector<valtype> vSolutions;\n+    txnouttype whichType = Solver(scriptPubKey, vSolutions);\n+\n+    CKeyID keyID;\n+    switch (whichType)\n+    {\n+    case TX_NONSTANDARD:\n+    case TX_NULL_DATA:\n+    case TX_WITNESS_UNKNOWN:\n+        break;\n+    case TX_PUBKEY:\n+        keyID = CPubKey(vSolutions[0]).GetID();\n+        if (!PermitsUncompressed(sigversion) && vSolutions[0].size() != 33) {\n+            return IsMineResult::INVALID;\n+        }\n+        if (keystore.HaveKey(keyID)) {\n+            ret = std::max(ret, IsMineResult::SPENDABLE);\n+        }\n+        break;\n+    case TX_WITNESS_V0_KEYHASH:\n+    {\n+        if (sigversion == IsMineSigVersion::WITNESS_V0) {\n+            // P2WPKH inside P2WSH is invalid.\n+            return IsMineResult::INVALID;\n+        }\n+        if (sigversion == IsMineSigVersion::TOP && !keystore.HaveCScript(CScriptID(CScript() << OP_0 << vSolutions[0]))) {\n+            // We do not support bare witness outputs unless the P2SH version of it would be\n+            // acceptable as well. This protects against matching before segwit activates.\n+            // This also applies to the P2WSH case.\n+            break;\n+        }\n+        ret = std::max(ret, IsMineInner(keystore, GetScriptForDestination(PKHash(uint160(vSolutions[0]))), IsMineSigVersion::WITNESS_V0));\n+        break;\n+    }\n+    case TX_PUBKEYHASH:\n+    {\n+        keyID = CKeyID(uint160(vSolutions[0]));\n+        CPubKey pubkey;\n+        if (keystore.GetPubKey(keyID, pubkey)) {\n+            if (!PermitsUncompressed(sigversion) && !pubkey.IsCompressed()) {\n+                return IsMineResult::INVALID;\n+            } else {\n+                ret = std::max(ret, IsMineResult::WATCH_ONLY);\n+            }\n+        }\n+        if (keystore.HaveKey(keyID)) {\n+            ret = std::max(ret, IsMineResult::SPENDABLE);\n+        }\n+        break;\n+    }\n+    case TX_SCRIPTHASH:\n+    {\n+        if (sigversion != IsMineSigVersion::TOP) {\n+            // P2SH inside P2WSH or P2SH is invalid.\n+            return IsMineResult::INVALID;\n+        }\n+        CScriptID scriptID = CScriptID(uint160(vSolutions[0]));\n+        CScript subscript;\n+        if (keystore.GetCScript(scriptID, subscript)) {\n+            ret = std::max(ret, IsMineInner(keystore, subscript, IsMineSigVersion::P2SH));\n+        }\n+        break;\n+    }\n+    case TX_WITNESS_V0_SCRIPTHASH:\n+    {\n+        if (sigversion == IsMineSigVersion::WITNESS_V0) {\n+            // P2WSH inside P2WSH is invalid.\n+            return IsMineResult::INVALID;\n+        }\n+        if (sigversion == IsMineSigVersion::TOP && !keystore.HaveCScript(CScriptID(CScript() << OP_0 << vSolutions[0]))) {\n+            break;\n+        }\n+        uint160 hash;\n+        CRIPEMD160().Write(&vSolutions[0][0], vSolutions[0].size()).Finalize(hash.begin());\n+        CScriptID scriptID = CScriptID(hash);\n+        CScript subscript;\n+        if (keystore.GetCScript(scriptID, subscript)) {\n+            ret = std::max(ret, IsMineInner(keystore, subscript, IsMineSigVersion::WITNESS_V0));\n+        }\n+        break;\n+    }\n+\n+    case TX_MULTISIG:\n+    {\n+        // Never treat bare multisig outputs as ours (they can still be made watchonly-though)\n+        if (sigversion == IsMineSigVersion::TOP) {\n+            break;\n+        }\n+\n+        // Only consider transactions \"mine\" if we own ALL the\n+        // keys involved. Multi-signature transactions that are\n+        // partially owned (somebody else has a key that can spend\n+        // them) enable spend-out-from-under-you attacks, especially\n+        // in shared-wallet situations.\n+        std::vector<valtype> keys(vSolutions.begin()+1, vSolutions.begin()+vSolutions.size()-1);\n+        if (!PermitsUncompressed(sigversion)) {\n+            for (size_t i = 0; i < keys.size(); i++) {\n+                if (keys[i].size() != 33) {\n+                    return IsMineResult::INVALID;\n+                }\n+            }\n+        }\n+        if (HaveKeys(keys, keystore)) {\n+            ret = std::max(ret, IsMineResult::SPENDABLE);\n+        }\n+        break;\n+    }\n+    }\n+\n+    if (ret == IsMineResult::NO && keystore.HaveWatchOnly(scriptPubKey)) {\n+        ret = std::max(ret, IsMineResult::WATCH_ONLY);\n+    }\n+    return ret;\n+}\n+\n+} // namespace\n+\n+isminetype LegacyScriptPubKeyMan::IsMine(const CScript& script) const\n+{\n+    switch (IsMineInner(*this, script, IsMineSigVersion::TOP)) {\n+    case IsMineResult::INVALID:\n+    case IsMineResult::NO:\n+        return ISMINE_NO;\n+    case IsMineResult::WATCH_ONLY:\n+        return ISMINE_WATCH_ONLY;\n+    case IsMineResult::SPENDABLE:\n+        return ISMINE_SPENDABLE;\n+    }\n+    assert(false);\n+}\n+\n+bool LegacyScriptPubKeyMan::HasEncryptedData() const\n+{\n+    LOCK(cs_KeyStore);\n+    return fUseCrypto || !mapCryptedKeys.empty();",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 211,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "47b342db0ddb1bc9bc595635e36bb2f16921a605",
      "in_reply_to_id": 328786049,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`fUseCrypto` is needed for wallet loading in order to load the initial encrypted key. In that situation, `mapCryptedKeys` will be empty because no keys have been loaded into memory.",
      "created_at": "2019-09-26T19:39:59Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r328791872",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/328791872"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 211,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/328795311",
      "pull_request_review_id": 293963024,
      "id": 328795311,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyODc5NTMxMQ==",
      "diff_hunk": "@@ -0,0 +1,479 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+#define BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <wallet/crypter.h>\n+#include <wallet/ismine.h>\n+#include <wallet/walletdb.h>\n+#include <wallet/walletutil.h>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+enum class OutputType;\n+\n+// Wallet storage things that ScriptPubKeyMans need in order to be able to store things to the wallet database\n+class WalletStorage\n+{\n+public:\n+    virtual ~WalletStorage() = default;\n+    virtual const std::string GetDisplayName() const = 0;\n+    virtual std::shared_ptr<WalletDatabase> GetDatabase() = 0;\n+    virtual bool IsWalletFlagSet(uint64_t) const = 0;\n+    virtual void SetWalletFlag(uint64_t) = 0;",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": 31,
      "original_position": 27,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "47b342db0ddb1bc9bc595635e36bb2f16921a605",
      "in_reply_to_id": 328303075,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It's used in descriptor wallets (next PR).",
      "created_at": "2019-09-26T19:48:52Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r328795311",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/328795311"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 31,
      "original_line": 31,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/328803423",
      "pull_request_review_id": 293973749,
      "id": 328803423,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyODgwMzQyMw==",
      "diff_hunk": "@@ -283,10 +142,10 @@ class ReserveDestination\n protected:\n     //! The wallet to reserve from\n     CWallet* pwallet;\n+    //! The ScriptPubKeyMan to reserve from. Based on type when GetReservedDestination is called\n+    ScriptPubKeyMan* m_spk_man;",
      "path": "src/wallet/wallet.h",
      "position": null,
      "original_position": 182,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "47b342db0ddb1bc9bc595635e36bb2f16921a605",
      "in_reply_to_id": 328235024,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2019-09-26T20:08:48Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r328803423",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/328803423"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 146,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/328803470",
      "pull_request_review_id": 293973819,
      "id": 328803470,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyODgwMzQ3MA==",
      "diff_hunk": "@@ -726,34 +585,19 @@ class WalletRescanReserver; //forward declarations for ScanForWalletTransactions\n  * A CWallet is an extension of a keystore, which also maintains a set of transactions and balances,\n  * and provides the ability to create new transactions.\n  */\n-class CWallet final : public FillableSigningProvider, private interfaces::Chain::Notifications\n+class CWallet final : public WalletStorage, private interfaces::Chain::Notifications\n {\n private:\n-    CKeyingMaterial vMasterKey GUARDED_BY(cs_KeyStore);\n-\n-    //! if fUseCrypto is true, mapKeys must be empty\n-    //! if fUseCrypto is false, vMasterKey must be empty\n-    std::atomic<bool> fUseCrypto;\n-\n-    //! keeps track of whether Unlock has run a thorough check before\n-    bool fDecryptionThoroughlyChecked;\n+    CKeyingMaterial vMasterKey GUARDED_BY(cs_wallet);\n \n     using CryptedKeyMap = std::map<CKeyID, std::pair<CPubKey, std::vector<unsigned char>>>;\n     using WatchOnlySet = std::set<CScript>;\n     using WatchKeyMap = std::map<CKeyID, CPubKey>;\n \n-    bool SetCrypted();\n-\n     //! will encrypt previously unencrypted keys\n     bool EncryptKeys(CKeyingMaterial& vMasterKeyIn);",
      "path": "src/wallet/wallet.h",
      "position": null,
      "original_position": 215,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "47b342db0ddb1bc9bc595635e36bb2f16921a605",
      "in_reply_to_id": 328732616,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2019-09-26T20:08:54Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r328803470",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/328803470"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 598,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/328803605",
      "pull_request_review_id": 293973989,
      "id": 328803605,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyODgwMzYwNQ==",
      "diff_hunk": "@@ -4701,133 +4038,6 @@ bool CWallet::Unlock(const CKeyingMaterial& vMasterKeyIn, bool accept_no_keys)\n     return true;\n }\n \n-bool CWallet::HaveKey(const CKeyID &address) const\n-{\n-    LOCK(cs_KeyStore);\n-    if (!IsCrypted()) {\n-        return FillableSigningProvider::HaveKey(address);\n-    }\n-    return mapCryptedKeys.count(address) > 0;\n-}\n-\n-bool CWallet::GetKey(const CKeyID &address, CKey& keyOut) const\n-{\n-    LOCK(cs_KeyStore);\n-    if (!IsCrypted()) {\n-        return FillableSigningProvider::GetKey(address, keyOut);\n-    }\n-\n-    CryptedKeyMap::const_iterator mi = mapCryptedKeys.find(address);\n-    if (mi != mapCryptedKeys.end())\n-    {\n-        const CPubKey &vchPubKey = (*mi).second.first;\n-        const std::vector<unsigned char> &vchCryptedSecret = (*mi).second.second;\n-        return DecryptKey(vMasterKey, vchCryptedSecret, vchPubKey, keyOut);\n-    }\n-    return false;\n-}\n-\n-bool CWallet::GetWatchPubKey(const CKeyID &address, CPubKey &pubkey_out) const\n-{\n-    LOCK(cs_KeyStore);\n-    WatchKeyMap::const_iterator it = mapWatchKeys.find(address);\n-    if (it != mapWatchKeys.end()) {\n-        pubkey_out = it->second;\n-        return true;\n-    }\n-    return false;\n-}\n-\n-bool CWallet::GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const\n-{\n-    LOCK(cs_KeyStore);\n-    if (!IsCrypted()) {\n-        if (!FillableSigningProvider::GetPubKey(address, vchPubKeyOut)) {\n-            return GetWatchPubKey(address, vchPubKeyOut);\n-        }\n-        return true;\n-    }\n-\n-    CryptedKeyMap::const_iterator mi = mapCryptedKeys.find(address);\n-    if (mi != mapCryptedKeys.end())\n-    {\n-        vchPubKeyOut = (*mi).second.first;\n-        return true;\n-    }\n-    // Check for watch-only pubkeys\n-    return GetWatchPubKey(address, vchPubKeyOut);\n-}\n-\n-std::set<CKeyID> CWallet::GetKeys() const",
      "path": "src/wallet/wallet.cpp",
      "position": 1668,
      "original_position": 815,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "47b342db0ddb1bc9bc595635e36bb2f16921a605",
      "in_reply_to_id": 328763555,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added `LegacyScriptPubKeyMan::GetKeys`",
      "created_at": "2019-09-26T20:09:12Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r328803605",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/328803605"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4865,
      "original_line": 4865,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/328803649",
      "pull_request_review_id": 293974040,
      "id": 328803649,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyODgwMzY0OQ==",
      "diff_hunk": "@@ -0,0 +1,479 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+#define BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <wallet/crypter.h>\n+#include <wallet/ismine.h>\n+#include <wallet/walletdb.h>\n+#include <wallet/walletutil.h>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+enum class OutputType;\n+\n+// Wallet storage things that ScriptPubKeyMans need in order to be able to store things to the wallet database\n+class WalletStorage\n+{\n+public:\n+    virtual ~WalletStorage() = default;\n+    virtual const std::string GetDisplayName() const = 0;\n+    virtual std::shared_ptr<WalletDatabase> GetDatabase() = 0;\n+    virtual bool IsWalletFlagSet(uint64_t) const = 0;\n+    virtual void SetWalletFlag(uint64_t) = 0;\n+    virtual void UnsetWalletFlagWithDB(WalletBatch&, uint64_t) = 0;\n+    virtual bool CanSupportFeature(enum WalletFeature) const = 0;\n+    virtual void SetMinVersion(enum WalletFeature, WalletBatch* = nullptr, bool = false) = 0;\n+    virtual const CKeyingMaterial& GetEncryptionKey() const = 0;\n+    virtual bool IsLocked() const = 0;\n+};\n+\n+//! Default for -keypool\n+static const unsigned int DEFAULT_KEYPOOL_SIZE = 1000;\n+\n+std::vector<CKeyID> GetAffectedKeys(const CScript& spk, const SigningProvider& provider);\n+\n+/** A key from a CWallet's keypool\n+ *\n+ * The wallet holds one (for pre HD-split wallets) or several keypools. These\n+ * are sets of keys that have not yet been used to provide addresses or receive\n+ * change.\n+ *\n+ * The Bitcoin Core wallet was originally a collection of unrelated private\n+ * keys with their associated addresses. If a non-HD wallet generated a\n+ * key/address, gave that address out and then restored a backup from before\n+ * that key's generation, then any funds sent to that address would be\n+ * lost definitively.\n+ *\n+ * The keypool was implemented to avoid this scenario (commit: 10384941). The\n+ * wallet would generate a set of keys (100 by default). When a new public key\n+ * was required, either to give out as an address or to use in a change output,\n+ * it would be drawn from the keypool. The keypool would then be topped up to\n+ * maintain 100 keys. This ensured that as long as the wallet hadn't used more\n+ * than 100 keys since the previous backup, all funds would be safe, since a\n+ * restored wallet would be able to scan for all owned addresses.\n+ *\n+ * A keypool also allowed encrypted wallets to give out addresses without\n+ * having to be decrypted to generate a new private key.\n+ *\n+ * With the introduction of HD wallets (commit: f1902510), the keypool\n+ * essentially became an address look-ahead pool. Restoring old backups can no\n+ * longer definitively lose funds as long as the addresses used were from the\n+ * wallet's HD seed (since all private keys can be rederived from the seed).\n+ * However, if many addresses were used since the backup, then the wallet may\n+ * not know how far ahead in the HD chain to look for its addresses. The\n+ * keypool is used to implement a 'gap limit'. The keypool maintains a set of\n+ * keys (by default 1000) ahead of the last used key and scans for the\n+ * addresses of those keys.  This avoids the risk of not seeing transactions\n+ * involving the wallet's addresses, or of re-using the same address.\n+ *\n+ * The HD-split wallet feature added a second keypool (commit: 02592f4c). There\n+ * is an external keypool (for addresses to hand out) and an internal keypool\n+ * (for change addresses).\n+ *\n+ * Keypool keys are stored in the wallet/keystore's keymap. The keypool data is\n+ * stored as sets of indexes in the wallet (setInternalKeyPool,\n+ * setExternalKeyPool and set_pre_split_keypool), and a map from the key to the\n+ * index (m_pool_key_to_index). The CKeyPool object is used to\n+ * serialize/deserialize the pool data to/from the database.\n+ */\n+class CKeyPool\n+{\n+public:\n+    //! The time at which the key was generated. Set in AddKeypoolPubKeyWithDB\n+    int64_t nTime;\n+    //! The public key\n+    CPubKey vchPubKey;\n+    //! Whether this keypool entry is in the internal keypool (for change outputs)\n+    bool fInternal;\n+    //! Whether this key was generated for a keypool before the wallet was upgraded to HD-split\n+    bool m_pre_split;\n+\n+    CKeyPool();\n+    CKeyPool(const CPubKey& vchPubKeyIn, bool internalIn);\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        int nVersion = s.GetVersion();\n+        if (!(s.GetType() & SER_GETHASH))\n+            READWRITE(nVersion);\n+        READWRITE(nTime);\n+        READWRITE(vchPubKey);\n+        if (ser_action.ForRead()) {\n+            try {\n+                READWRITE(fInternal);\n+            }\n+            catch (std::ios_base::failure&) {\n+                /* flag as external address if we can't read the internal boolean\n+                   (this will be the case for any wallet before the HD chain split version) */\n+                fInternal = false;\n+            }\n+            try {\n+                READWRITE(m_pre_split);\n+            }\n+            catch (std::ios_base::failure&) {\n+                /* flag as postsplit address if we can't read the m_pre_split boolean\n+                   (this will be the case for any wallet that upgrades to HD chain split)*/\n+                m_pre_split = false;\n+            }\n+        }\n+        else {\n+            READWRITE(fInternal);\n+            READWRITE(m_pre_split);\n+        }\n+    }\n+};\n+\n+/*\n+ * A class implementing ScriptPubKeyMan manages some (or all) scriptPubKeys used in a wallet.\n+ * It contains the scripts and keys related to the scriptPubKeys it manages.\n+ * A ScriptPubKeyMan will be able to give out scriptPubKeys to be used, as well as marking\n+ * when a scriptPubKey has been used. It also handles when and how to store a scriptPubKey\n+ * and it's related scripts and keys, including encryption.\n+ */\n+class ScriptPubKeyMan\n+{\n+private:\n+    WalletStorage& storage;\n+\n+protected:\n+    std::shared_ptr<WalletDatabase> m_database;\n+\n+public:\n+    ScriptPubKeyMan(WalletStorage& storage) : storage(storage), m_database(storage.GetDatabase()) {}\n+\n+    const std::string GetDisplayName() const { return storage.GetDisplayName(); }\n+    bool IsWalletFlagSet(uint64_t flag) const { return storage.IsWalletFlagSet(flag); }\n+    void SetWalletFlag(uint64_t flag) { return storage.SetWalletFlag(flag); }\n+    void UnsetWalletFlagWithDB(WalletBatch& batch, uint64_t flag) { return storage.UnsetWalletFlagWithDB(batch, flag); }\n+    bool CanSupportFeature(enum WalletFeature wf) const { return storage.CanSupportFeature(wf); }\n+    void SetMinVersion(enum WalletFeature wf) { return storage.SetMinVersion(wf); }\n+    const CKeyingMaterial& GetEncryptionKey() const { return storage.GetEncryptionKey(); }\n+    bool IsLocked() const { return storage.IsLocked(); }\n+\n+    virtual ~ScriptPubKeyMan() {};\n+    virtual bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) { return false; }\n+    virtual isminetype IsMine(const CScript& script) const { return ISMINE_NO; }\n+\n+    virtual bool HasEncryptedData() const { return false; }\n+\n+    virtual bool CheckDecryptionKey(const CKeyingMaterial& vMasterKeyIn, bool accept_no_keys = false) { return false; }\n+    virtual bool Encrypt(CKeyingMaterial& vMasterKeyIn, WalletBatch* batch) { return false; }",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": null,
      "original_position": 167,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "47b342db0ddb1bc9bc595635e36bb2f16921a605",
      "in_reply_to_id": 328771626,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2019-09-26T20:09:16Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r328803649",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/328803649"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 167,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/329175077",
      "pull_request_review_id": 294462176,
      "id": 329175077,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyOTE3NTA3Nw==",
      "diff_hunk": "@@ -0,0 +1,1445 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <key_io.h>\n+#include <outputtype.h>\n+#include <script/descriptor.h>\n+#include <util/bip32.h>\n+#include <util/strencodings.h>\n+#include <util/translation.h>\n+#include <wallet/scriptpubkeyman.h>\n+\n+bool LegacyScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n+{\n+    error.clear();\n+    TopUpKeyPool();\n+\n+    // Generate a new key that is added to wallet\n+    CPubKey new_key;\n+    if (!GetKeyFromPool(new_key)) {\n+        error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+        return false;\n+    }\n+    LearnRelatedScripts(new_key, type);\n+    dest = GetDestinationForKey(new_key, type);\n+    return true;\n+}\n+\n+typedef std::vector<unsigned char> valtype;\n+\n+namespace {\n+\n+/**\n+ * This is an enum that tracks the execution context of a script, similar to\n+ * SigVersion in script/interpreter. It is separate however because we want to\n+ * distinguish between top-level scriptPubKey execution and P2SH redeemScript\n+ * execution (a distinction that has no impact on consensus rules).\n+ */\n+enum class IsMineSigVersion\n+{\n+    TOP = 0,        //!< scriptPubKey execution\n+    P2SH = 1,       //!< P2SH redeemScript\n+    WITNESS_V0 = 2, //!< P2WSH witness script execution\n+};\n+\n+/**\n+ * This is an internal representation of isminetype + invalidity.\n+ * Its order is significant, as we return the max of all explored\n+ * possibilities.\n+ */\n+enum class IsMineResult\n+{\n+    NO = 0,         //!< Not ours\n+    WATCH_ONLY = 1, //!< Included in watch-only balance\n+    SPENDABLE = 2,  //!< Included in all balances\n+    INVALID = 3,    //!< Not spendable by anyone (uncompressed pubkey in segwit, P2SH inside P2SH or witness, witness inside witness)\n+};\n+\n+bool PermitsUncompressed(IsMineSigVersion sigversion)\n+{\n+    return sigversion == IsMineSigVersion::TOP || sigversion == IsMineSigVersion::P2SH;\n+}\n+\n+bool HaveKeys(const std::vector<valtype>& pubkeys, const LegacyScriptPubKeyMan& keystore)\n+{\n+    for (const valtype& pubkey : pubkeys) {\n+        CKeyID keyID = CPubKey(pubkey).GetID();\n+        if (!keystore.HaveKey(keyID)) return false;\n+    }\n+    return true;\n+}\n+\n+IsMineResult IsMineInner(const LegacyScriptPubKeyMan& keystore, const CScript& scriptPubKey, IsMineSigVersion sigversion)\n+{\n+    IsMineResult ret = IsMineResult::NO;\n+\n+    std::vector<valtype> vSolutions;\n+    txnouttype whichType = Solver(scriptPubKey, vSolutions);\n+\n+    CKeyID keyID;\n+    switch (whichType)\n+    {\n+    case TX_NONSTANDARD:\n+    case TX_NULL_DATA:\n+    case TX_WITNESS_UNKNOWN:\n+        break;\n+    case TX_PUBKEY:\n+        keyID = CPubKey(vSolutions[0]).GetID();\n+        if (!PermitsUncompressed(sigversion) && vSolutions[0].size() != 33) {\n+            return IsMineResult::INVALID;\n+        }\n+        if (keystore.HaveKey(keyID)) {\n+            ret = std::max(ret, IsMineResult::SPENDABLE);\n+        }\n+        break;\n+    case TX_WITNESS_V0_KEYHASH:\n+    {\n+        if (sigversion == IsMineSigVersion::WITNESS_V0) {\n+            // P2WPKH inside P2WSH is invalid.\n+            return IsMineResult::INVALID;\n+        }\n+        if (sigversion == IsMineSigVersion::TOP && !keystore.HaveCScript(CScriptID(CScript() << OP_0 << vSolutions[0]))) {\n+            // We do not support bare witness outputs unless the P2SH version of it would be\n+            // acceptable as well. This protects against matching before segwit activates.\n+            // This also applies to the P2WSH case.\n+            break;\n+        }\n+        ret = std::max(ret, IsMineInner(keystore, GetScriptForDestination(PKHash(uint160(vSolutions[0]))), IsMineSigVersion::WITNESS_V0));\n+        break;\n+    }\n+    case TX_PUBKEYHASH:\n+    {\n+        keyID = CKeyID(uint160(vSolutions[0]));\n+        CPubKey pubkey;\n+        if (keystore.GetPubKey(keyID, pubkey)) {\n+            if (!PermitsUncompressed(sigversion) && !pubkey.IsCompressed()) {\n+                return IsMineResult::INVALID;\n+            } else {\n+                ret = std::max(ret, IsMineResult::WATCH_ONLY);\n+            }\n+        }\n+        if (keystore.HaveKey(keyID)) {\n+            ret = std::max(ret, IsMineResult::SPENDABLE);\n+        }\n+        break;\n+    }\n+    case TX_SCRIPTHASH:\n+    {\n+        if (sigversion != IsMineSigVersion::TOP) {\n+            // P2SH inside P2WSH or P2SH is invalid.\n+            return IsMineResult::INVALID;\n+        }\n+        CScriptID scriptID = CScriptID(uint160(vSolutions[0]));\n+        CScript subscript;\n+        if (keystore.GetCScript(scriptID, subscript)) {\n+            ret = std::max(ret, IsMineInner(keystore, subscript, IsMineSigVersion::P2SH));\n+        }\n+        break;\n+    }\n+    case TX_WITNESS_V0_SCRIPTHASH:\n+    {\n+        if (sigversion == IsMineSigVersion::WITNESS_V0) {\n+            // P2WSH inside P2WSH is invalid.\n+            return IsMineResult::INVALID;\n+        }\n+        if (sigversion == IsMineSigVersion::TOP && !keystore.HaveCScript(CScriptID(CScript() << OP_0 << vSolutions[0]))) {\n+            break;\n+        }\n+        uint160 hash;\n+        CRIPEMD160().Write(&vSolutions[0][0], vSolutions[0].size()).Finalize(hash.begin());\n+        CScriptID scriptID = CScriptID(hash);\n+        CScript subscript;\n+        if (keystore.GetCScript(scriptID, subscript)) {\n+            ret = std::max(ret, IsMineInner(keystore, subscript, IsMineSigVersion::WITNESS_V0));\n+        }\n+        break;\n+    }\n+\n+    case TX_MULTISIG:\n+    {\n+        // Never treat bare multisig outputs as ours (they can still be made watchonly-though)\n+        if (sigversion == IsMineSigVersion::TOP) {\n+            break;\n+        }\n+\n+        // Only consider transactions \"mine\" if we own ALL the\n+        // keys involved. Multi-signature transactions that are\n+        // partially owned (somebody else has a key that can spend\n+        // them) enable spend-out-from-under-you attacks, especially\n+        // in shared-wallet situations.\n+        std::vector<valtype> keys(vSolutions.begin()+1, vSolutions.begin()+vSolutions.size()-1);\n+        if (!PermitsUncompressed(sigversion)) {\n+            for (size_t i = 0; i < keys.size(); i++) {\n+                if (keys[i].size() != 33) {\n+                    return IsMineResult::INVALID;\n+                }\n+            }\n+        }\n+        if (HaveKeys(keys, keystore)) {\n+            ret = std::max(ret, IsMineResult::SPENDABLE);\n+        }\n+        break;\n+    }\n+    }\n+\n+    if (ret == IsMineResult::NO && keystore.HaveWatchOnly(scriptPubKey)) {\n+        ret = std::max(ret, IsMineResult::WATCH_ONLY);\n+    }\n+    return ret;\n+}\n+\n+} // namespace\n+\n+isminetype LegacyScriptPubKeyMan::IsMine(const CScript& script) const\n+{\n+    switch (IsMineInner(*this, script, IsMineSigVersion::TOP)) {\n+    case IsMineResult::INVALID:\n+    case IsMineResult::NO:\n+        return ISMINE_NO;\n+    case IsMineResult::WATCH_ONLY:\n+        return ISMINE_WATCH_ONLY;\n+    case IsMineResult::SPENDABLE:\n+        return ISMINE_SPENDABLE;\n+    }\n+    assert(false);\n+}\n+\n+bool LegacyScriptPubKeyMan::HasEncryptedData() const\n+{\n+    LOCK(cs_KeyStore);\n+    return fUseCrypto || !mapCryptedKeys.empty();",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 211,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "47b342db0ddb1bc9bc595635e36bb2f16921a605",
      "in_reply_to_id": 328786049,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/16341#discussion_r328791872\r\n\r\n> `fUseCrypto` is needed for wallet loading in order to load the initial encrypted key. In that situation, `mapCryptedKeys` will be empty because no keys have been loaded into memory.\r\n\r\nI think since you removed the `SetCrypted` call at the beginning of  `CWallet::Lock`, the `fUseCrypto` variable no longer contains any useful information (it's just a stale sometimes out-of-date cache of `!mapCryptedKeys.empty()`), and that's why HasEncryptedData now has to take a lock and return `fUseCrypto || !mapCryptedKeys.empty()` instead of just the previous `fUseCrypto`.\r\n\r\nIf you got rid of the `fUseCrypto` variable and the `SetCrypted()` method as described https://github.com/bitcoin/bitcoin/pull/16341#discussion_r328786049, I think it would be equivalent to the current code and more comprehensible.",
      "created_at": "2019-09-27T17:26:00Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r329175077",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/329175077"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 211,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/329186223",
      "pull_request_review_id": 294477028,
      "id": 329186223,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyOTE4NjIyMw==",
      "diff_hunk": "@@ -0,0 +1,1445 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <key_io.h>\n+#include <outputtype.h>\n+#include <script/descriptor.h>\n+#include <util/bip32.h>\n+#include <util/strencodings.h>\n+#include <util/translation.h>\n+#include <wallet/scriptpubkeyman.h>\n+\n+bool LegacyScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n+{\n+    error.clear();\n+    TopUpKeyPool();\n+\n+    // Generate a new key that is added to wallet\n+    CPubKey new_key;\n+    if (!GetKeyFromPool(new_key)) {\n+        error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+        return false;\n+    }\n+    LearnRelatedScripts(new_key, type);\n+    dest = GetDestinationForKey(new_key, type);\n+    return true;\n+}\n+\n+typedef std::vector<unsigned char> valtype;\n+\n+namespace {\n+\n+/**\n+ * This is an enum that tracks the execution context of a script, similar to\n+ * SigVersion in script/interpreter. It is separate however because we want to\n+ * distinguish between top-level scriptPubKey execution and P2SH redeemScript\n+ * execution (a distinction that has no impact on consensus rules).\n+ */\n+enum class IsMineSigVersion\n+{\n+    TOP = 0,        //!< scriptPubKey execution\n+    P2SH = 1,       //!< P2SH redeemScript\n+    WITNESS_V0 = 2, //!< P2WSH witness script execution\n+};\n+\n+/**\n+ * This is an internal representation of isminetype + invalidity.\n+ * Its order is significant, as we return the max of all explored\n+ * possibilities.\n+ */\n+enum class IsMineResult\n+{\n+    NO = 0,         //!< Not ours\n+    WATCH_ONLY = 1, //!< Included in watch-only balance\n+    SPENDABLE = 2,  //!< Included in all balances\n+    INVALID = 3,    //!< Not spendable by anyone (uncompressed pubkey in segwit, P2SH inside P2SH or witness, witness inside witness)\n+};\n+\n+bool PermitsUncompressed(IsMineSigVersion sigversion)\n+{\n+    return sigversion == IsMineSigVersion::TOP || sigversion == IsMineSigVersion::P2SH;\n+}\n+\n+bool HaveKeys(const std::vector<valtype>& pubkeys, const LegacyScriptPubKeyMan& keystore)\n+{\n+    for (const valtype& pubkey : pubkeys) {\n+        CKeyID keyID = CPubKey(pubkey).GetID();\n+        if (!keystore.HaveKey(keyID)) return false;\n+    }\n+    return true;\n+}\n+\n+IsMineResult IsMineInner(const LegacyScriptPubKeyMan& keystore, const CScript& scriptPubKey, IsMineSigVersion sigversion)\n+{\n+    IsMineResult ret = IsMineResult::NO;\n+\n+    std::vector<valtype> vSolutions;\n+    txnouttype whichType = Solver(scriptPubKey, vSolutions);\n+\n+    CKeyID keyID;\n+    switch (whichType)\n+    {\n+    case TX_NONSTANDARD:\n+    case TX_NULL_DATA:\n+    case TX_WITNESS_UNKNOWN:\n+        break;\n+    case TX_PUBKEY:\n+        keyID = CPubKey(vSolutions[0]).GetID();\n+        if (!PermitsUncompressed(sigversion) && vSolutions[0].size() != 33) {\n+            return IsMineResult::INVALID;\n+        }\n+        if (keystore.HaveKey(keyID)) {\n+            ret = std::max(ret, IsMineResult::SPENDABLE);\n+        }\n+        break;\n+    case TX_WITNESS_V0_KEYHASH:\n+    {\n+        if (sigversion == IsMineSigVersion::WITNESS_V0) {\n+            // P2WPKH inside P2WSH is invalid.\n+            return IsMineResult::INVALID;\n+        }\n+        if (sigversion == IsMineSigVersion::TOP && !keystore.HaveCScript(CScriptID(CScript() << OP_0 << vSolutions[0]))) {\n+            // We do not support bare witness outputs unless the P2SH version of it would be\n+            // acceptable as well. This protects against matching before segwit activates.\n+            // This also applies to the P2WSH case.\n+            break;\n+        }\n+        ret = std::max(ret, IsMineInner(keystore, GetScriptForDestination(PKHash(uint160(vSolutions[0]))), IsMineSigVersion::WITNESS_V0));\n+        break;\n+    }\n+    case TX_PUBKEYHASH:\n+    {\n+        keyID = CKeyID(uint160(vSolutions[0]));\n+        CPubKey pubkey;\n+        if (keystore.GetPubKey(keyID, pubkey)) {\n+            if (!PermitsUncompressed(sigversion) && !pubkey.IsCompressed()) {\n+                return IsMineResult::INVALID;\n+            } else {\n+                ret = std::max(ret, IsMineResult::WATCH_ONLY);\n+            }\n+        }\n+        if (keystore.HaveKey(keyID)) {\n+            ret = std::max(ret, IsMineResult::SPENDABLE);\n+        }\n+        break;\n+    }\n+    case TX_SCRIPTHASH:\n+    {\n+        if (sigversion != IsMineSigVersion::TOP) {\n+            // P2SH inside P2WSH or P2SH is invalid.\n+            return IsMineResult::INVALID;\n+        }\n+        CScriptID scriptID = CScriptID(uint160(vSolutions[0]));\n+        CScript subscript;\n+        if (keystore.GetCScript(scriptID, subscript)) {\n+            ret = std::max(ret, IsMineInner(keystore, subscript, IsMineSigVersion::P2SH));\n+        }\n+        break;\n+    }\n+    case TX_WITNESS_V0_SCRIPTHASH:\n+    {\n+        if (sigversion == IsMineSigVersion::WITNESS_V0) {\n+            // P2WSH inside P2WSH is invalid.\n+            return IsMineResult::INVALID;\n+        }\n+        if (sigversion == IsMineSigVersion::TOP && !keystore.HaveCScript(CScriptID(CScript() << OP_0 << vSolutions[0]))) {\n+            break;\n+        }\n+        uint160 hash;\n+        CRIPEMD160().Write(&vSolutions[0][0], vSolutions[0].size()).Finalize(hash.begin());\n+        CScriptID scriptID = CScriptID(hash);\n+        CScript subscript;\n+        if (keystore.GetCScript(scriptID, subscript)) {\n+            ret = std::max(ret, IsMineInner(keystore, subscript, IsMineSigVersion::WITNESS_V0));\n+        }\n+        break;\n+    }\n+\n+    case TX_MULTISIG:\n+    {\n+        // Never treat bare multisig outputs as ours (they can still be made watchonly-though)\n+        if (sigversion == IsMineSigVersion::TOP) {\n+            break;\n+        }\n+\n+        // Only consider transactions \"mine\" if we own ALL the\n+        // keys involved. Multi-signature transactions that are\n+        // partially owned (somebody else has a key that can spend\n+        // them) enable spend-out-from-under-you attacks, especially\n+        // in shared-wallet situations.\n+        std::vector<valtype> keys(vSolutions.begin()+1, vSolutions.begin()+vSolutions.size()-1);\n+        if (!PermitsUncompressed(sigversion)) {\n+            for (size_t i = 0; i < keys.size(); i++) {\n+                if (keys[i].size() != 33) {\n+                    return IsMineResult::INVALID;\n+                }\n+            }\n+        }\n+        if (HaveKeys(keys, keystore)) {\n+            ret = std::max(ret, IsMineResult::SPENDABLE);\n+        }\n+        break;\n+    }\n+    }\n+\n+    if (ret == IsMineResult::NO && keystore.HaveWatchOnly(scriptPubKey)) {\n+        ret = std::max(ret, IsMineResult::WATCH_ONLY);\n+    }\n+    return ret;\n+}\n+\n+} // namespace\n+\n+isminetype LegacyScriptPubKeyMan::IsMine(const CScript& script) const\n+{\n+    switch (IsMineInner(*this, script, IsMineSigVersion::TOP)) {\n+    case IsMineResult::INVALID:\n+    case IsMineResult::NO:\n+        return ISMINE_NO;\n+    case IsMineResult::WATCH_ONLY:\n+        return ISMINE_WATCH_ONLY;\n+    case IsMineResult::SPENDABLE:\n+        return ISMINE_SPENDABLE;\n+    }\n+    assert(false);\n+}\n+\n+bool LegacyScriptPubKeyMan::HasEncryptedData() const\n+{\n+    LOCK(cs_KeyStore);\n+    return fUseCrypto || !mapCryptedKeys.empty();",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 211,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "47b342db0ddb1bc9bc595635e36bb2f16921a605",
      "in_reply_to_id": 328786049,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It doesn't feel like that is safe. A blank wallet would have `mapKeys` empty so would that be considered encrypted?",
      "created_at": "2019-09-27T17:55:24Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r329186223",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/329186223"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 211,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/329189701",
      "pull_request_review_id": 294481729,
      "id": 329189701,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyOTE4OTcwMQ==",
      "diff_hunk": "@@ -0,0 +1,1445 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <key_io.h>\n+#include <outputtype.h>\n+#include <script/descriptor.h>\n+#include <util/bip32.h>\n+#include <util/strencodings.h>\n+#include <util/translation.h>\n+#include <wallet/scriptpubkeyman.h>\n+\n+bool LegacyScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n+{\n+    error.clear();\n+    TopUpKeyPool();\n+\n+    // Generate a new key that is added to wallet\n+    CPubKey new_key;\n+    if (!GetKeyFromPool(new_key)) {\n+        error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+        return false;\n+    }\n+    LearnRelatedScripts(new_key, type);\n+    dest = GetDestinationForKey(new_key, type);\n+    return true;\n+}\n+\n+typedef std::vector<unsigned char> valtype;\n+\n+namespace {\n+\n+/**\n+ * This is an enum that tracks the execution context of a script, similar to\n+ * SigVersion in script/interpreter. It is separate however because we want to\n+ * distinguish between top-level scriptPubKey execution and P2SH redeemScript\n+ * execution (a distinction that has no impact on consensus rules).\n+ */\n+enum class IsMineSigVersion\n+{\n+    TOP = 0,        //!< scriptPubKey execution\n+    P2SH = 1,       //!< P2SH redeemScript\n+    WITNESS_V0 = 2, //!< P2WSH witness script execution\n+};\n+\n+/**\n+ * This is an internal representation of isminetype + invalidity.\n+ * Its order is significant, as we return the max of all explored\n+ * possibilities.\n+ */\n+enum class IsMineResult\n+{\n+    NO = 0,         //!< Not ours\n+    WATCH_ONLY = 1, //!< Included in watch-only balance\n+    SPENDABLE = 2,  //!< Included in all balances\n+    INVALID = 3,    //!< Not spendable by anyone (uncompressed pubkey in segwit, P2SH inside P2SH or witness, witness inside witness)\n+};\n+\n+bool PermitsUncompressed(IsMineSigVersion sigversion)\n+{\n+    return sigversion == IsMineSigVersion::TOP || sigversion == IsMineSigVersion::P2SH;\n+}\n+\n+bool HaveKeys(const std::vector<valtype>& pubkeys, const LegacyScriptPubKeyMan& keystore)\n+{\n+    for (const valtype& pubkey : pubkeys) {\n+        CKeyID keyID = CPubKey(pubkey).GetID();\n+        if (!keystore.HaveKey(keyID)) return false;\n+    }\n+    return true;\n+}\n+\n+IsMineResult IsMineInner(const LegacyScriptPubKeyMan& keystore, const CScript& scriptPubKey, IsMineSigVersion sigversion)\n+{\n+    IsMineResult ret = IsMineResult::NO;\n+\n+    std::vector<valtype> vSolutions;\n+    txnouttype whichType = Solver(scriptPubKey, vSolutions);\n+\n+    CKeyID keyID;\n+    switch (whichType)\n+    {\n+    case TX_NONSTANDARD:\n+    case TX_NULL_DATA:\n+    case TX_WITNESS_UNKNOWN:\n+        break;\n+    case TX_PUBKEY:\n+        keyID = CPubKey(vSolutions[0]).GetID();\n+        if (!PermitsUncompressed(sigversion) && vSolutions[0].size() != 33) {\n+            return IsMineResult::INVALID;\n+        }\n+        if (keystore.HaveKey(keyID)) {\n+            ret = std::max(ret, IsMineResult::SPENDABLE);\n+        }\n+        break;\n+    case TX_WITNESS_V0_KEYHASH:\n+    {\n+        if (sigversion == IsMineSigVersion::WITNESS_V0) {\n+            // P2WPKH inside P2WSH is invalid.\n+            return IsMineResult::INVALID;\n+        }\n+        if (sigversion == IsMineSigVersion::TOP && !keystore.HaveCScript(CScriptID(CScript() << OP_0 << vSolutions[0]))) {\n+            // We do not support bare witness outputs unless the P2SH version of it would be\n+            // acceptable as well. This protects against matching before segwit activates.\n+            // This also applies to the P2WSH case.\n+            break;\n+        }\n+        ret = std::max(ret, IsMineInner(keystore, GetScriptForDestination(PKHash(uint160(vSolutions[0]))), IsMineSigVersion::WITNESS_V0));\n+        break;\n+    }\n+    case TX_PUBKEYHASH:\n+    {\n+        keyID = CKeyID(uint160(vSolutions[0]));\n+        CPubKey pubkey;\n+        if (keystore.GetPubKey(keyID, pubkey)) {\n+            if (!PermitsUncompressed(sigversion) && !pubkey.IsCompressed()) {\n+                return IsMineResult::INVALID;\n+            } else {\n+                ret = std::max(ret, IsMineResult::WATCH_ONLY);\n+            }\n+        }\n+        if (keystore.HaveKey(keyID)) {\n+            ret = std::max(ret, IsMineResult::SPENDABLE);\n+        }\n+        break;\n+    }\n+    case TX_SCRIPTHASH:\n+    {\n+        if (sigversion != IsMineSigVersion::TOP) {\n+            // P2SH inside P2WSH or P2SH is invalid.\n+            return IsMineResult::INVALID;\n+        }\n+        CScriptID scriptID = CScriptID(uint160(vSolutions[0]));\n+        CScript subscript;\n+        if (keystore.GetCScript(scriptID, subscript)) {\n+            ret = std::max(ret, IsMineInner(keystore, subscript, IsMineSigVersion::P2SH));\n+        }\n+        break;\n+    }\n+    case TX_WITNESS_V0_SCRIPTHASH:\n+    {\n+        if (sigversion == IsMineSigVersion::WITNESS_V0) {\n+            // P2WSH inside P2WSH is invalid.\n+            return IsMineResult::INVALID;\n+        }\n+        if (sigversion == IsMineSigVersion::TOP && !keystore.HaveCScript(CScriptID(CScript() << OP_0 << vSolutions[0]))) {\n+            break;\n+        }\n+        uint160 hash;\n+        CRIPEMD160().Write(&vSolutions[0][0], vSolutions[0].size()).Finalize(hash.begin());\n+        CScriptID scriptID = CScriptID(hash);\n+        CScript subscript;\n+        if (keystore.GetCScript(scriptID, subscript)) {\n+            ret = std::max(ret, IsMineInner(keystore, subscript, IsMineSigVersion::WITNESS_V0));\n+        }\n+        break;\n+    }\n+\n+    case TX_MULTISIG:\n+    {\n+        // Never treat bare multisig outputs as ours (they can still be made watchonly-though)\n+        if (sigversion == IsMineSigVersion::TOP) {\n+            break;\n+        }\n+\n+        // Only consider transactions \"mine\" if we own ALL the\n+        // keys involved. Multi-signature transactions that are\n+        // partially owned (somebody else has a key that can spend\n+        // them) enable spend-out-from-under-you attacks, especially\n+        // in shared-wallet situations.\n+        std::vector<valtype> keys(vSolutions.begin()+1, vSolutions.begin()+vSolutions.size()-1);\n+        if (!PermitsUncompressed(sigversion)) {\n+            for (size_t i = 0; i < keys.size(); i++) {\n+                if (keys[i].size() != 33) {\n+                    return IsMineResult::INVALID;\n+                }\n+            }\n+        }\n+        if (HaveKeys(keys, keystore)) {\n+            ret = std::max(ret, IsMineResult::SPENDABLE);\n+        }\n+        break;\n+    }\n+    }\n+\n+    if (ret == IsMineResult::NO && keystore.HaveWatchOnly(scriptPubKey)) {\n+        ret = std::max(ret, IsMineResult::WATCH_ONLY);\n+    }\n+    return ret;\n+}\n+\n+} // namespace\n+\n+isminetype LegacyScriptPubKeyMan::IsMine(const CScript& script) const\n+{\n+    switch (IsMineInner(*this, script, IsMineSigVersion::TOP)) {\n+    case IsMineResult::INVALID:\n+    case IsMineResult::NO:\n+        return ISMINE_NO;\n+    case IsMineResult::WATCH_ONLY:\n+        return ISMINE_WATCH_ONLY;\n+    case IsMineResult::SPENDABLE:\n+        return ISMINE_SPENDABLE;\n+    }\n+    assert(false);\n+}\n+\n+bool LegacyScriptPubKeyMan::HasEncryptedData() const\n+{\n+    LOCK(cs_KeyStore);\n+    return fUseCrypto || !mapCryptedKeys.empty();",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 211,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "47b342db0ddb1bc9bc595635e36bb2f16921a605",
      "in_reply_to_id": 328786049,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> It doesn't feel like that is safe. A blank wallet would have `mapKeys` empty so would that be considered encrypted?\r\n\r\nNo, but I'm not suggesting that. `HasEncryptedData()` could return `!mapCryptedKeys.empty()` and `fUseCrypto` and `SetCrypted` could both be deleted. The two `if(!SetCrypted()) return false` lines would just be replaced by `if (!mapKeys.empty()) return false`",
      "created_at": "2019-09-27T18:04:28Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r329189701",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/329189701"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 211,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/329217901",
      "pull_request_review_id": 294519095,
      "id": 329217901,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyOTIxNzkwMQ==",
      "diff_hunk": "@@ -0,0 +1,1445 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <key_io.h>\n+#include <outputtype.h>\n+#include <script/descriptor.h>\n+#include <util/bip32.h>\n+#include <util/strencodings.h>\n+#include <util/translation.h>\n+#include <wallet/scriptpubkeyman.h>\n+\n+bool LegacyScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n+{\n+    error.clear();\n+    TopUpKeyPool();\n+\n+    // Generate a new key that is added to wallet\n+    CPubKey new_key;\n+    if (!GetKeyFromPool(new_key)) {\n+        error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+        return false;\n+    }\n+    LearnRelatedScripts(new_key, type);\n+    dest = GetDestinationForKey(new_key, type);\n+    return true;\n+}\n+\n+typedef std::vector<unsigned char> valtype;\n+\n+namespace {\n+\n+/**\n+ * This is an enum that tracks the execution context of a script, similar to\n+ * SigVersion in script/interpreter. It is separate however because we want to\n+ * distinguish between top-level scriptPubKey execution and P2SH redeemScript\n+ * execution (a distinction that has no impact on consensus rules).\n+ */\n+enum class IsMineSigVersion\n+{\n+    TOP = 0,        //!< scriptPubKey execution\n+    P2SH = 1,       //!< P2SH redeemScript\n+    WITNESS_V0 = 2, //!< P2WSH witness script execution\n+};\n+\n+/**\n+ * This is an internal representation of isminetype + invalidity.\n+ * Its order is significant, as we return the max of all explored\n+ * possibilities.\n+ */\n+enum class IsMineResult\n+{\n+    NO = 0,         //!< Not ours\n+    WATCH_ONLY = 1, //!< Included in watch-only balance\n+    SPENDABLE = 2,  //!< Included in all balances\n+    INVALID = 3,    //!< Not spendable by anyone (uncompressed pubkey in segwit, P2SH inside P2SH or witness, witness inside witness)\n+};\n+\n+bool PermitsUncompressed(IsMineSigVersion sigversion)\n+{\n+    return sigversion == IsMineSigVersion::TOP || sigversion == IsMineSigVersion::P2SH;\n+}\n+\n+bool HaveKeys(const std::vector<valtype>& pubkeys, const LegacyScriptPubKeyMan& keystore)\n+{\n+    for (const valtype& pubkey : pubkeys) {\n+        CKeyID keyID = CPubKey(pubkey).GetID();\n+        if (!keystore.HaveKey(keyID)) return false;\n+    }\n+    return true;\n+}\n+\n+IsMineResult IsMineInner(const LegacyScriptPubKeyMan& keystore, const CScript& scriptPubKey, IsMineSigVersion sigversion)\n+{\n+    IsMineResult ret = IsMineResult::NO;\n+\n+    std::vector<valtype> vSolutions;\n+    txnouttype whichType = Solver(scriptPubKey, vSolutions);\n+\n+    CKeyID keyID;\n+    switch (whichType)\n+    {\n+    case TX_NONSTANDARD:\n+    case TX_NULL_DATA:\n+    case TX_WITNESS_UNKNOWN:\n+        break;\n+    case TX_PUBKEY:\n+        keyID = CPubKey(vSolutions[0]).GetID();\n+        if (!PermitsUncompressed(sigversion) && vSolutions[0].size() != 33) {\n+            return IsMineResult::INVALID;\n+        }\n+        if (keystore.HaveKey(keyID)) {\n+            ret = std::max(ret, IsMineResult::SPENDABLE);\n+        }\n+        break;\n+    case TX_WITNESS_V0_KEYHASH:\n+    {\n+        if (sigversion == IsMineSigVersion::WITNESS_V0) {\n+            // P2WPKH inside P2WSH is invalid.\n+            return IsMineResult::INVALID;\n+        }\n+        if (sigversion == IsMineSigVersion::TOP && !keystore.HaveCScript(CScriptID(CScript() << OP_0 << vSolutions[0]))) {\n+            // We do not support bare witness outputs unless the P2SH version of it would be\n+            // acceptable as well. This protects against matching before segwit activates.\n+            // This also applies to the P2WSH case.\n+            break;\n+        }\n+        ret = std::max(ret, IsMineInner(keystore, GetScriptForDestination(PKHash(uint160(vSolutions[0]))), IsMineSigVersion::WITNESS_V0));\n+        break;\n+    }\n+    case TX_PUBKEYHASH:\n+    {\n+        keyID = CKeyID(uint160(vSolutions[0]));\n+        CPubKey pubkey;\n+        if (keystore.GetPubKey(keyID, pubkey)) {\n+            if (!PermitsUncompressed(sigversion) && !pubkey.IsCompressed()) {\n+                return IsMineResult::INVALID;\n+            } else {\n+                ret = std::max(ret, IsMineResult::WATCH_ONLY);\n+            }\n+        }\n+        if (keystore.HaveKey(keyID)) {\n+            ret = std::max(ret, IsMineResult::SPENDABLE);\n+        }\n+        break;\n+    }\n+    case TX_SCRIPTHASH:\n+    {\n+        if (sigversion != IsMineSigVersion::TOP) {\n+            // P2SH inside P2WSH or P2SH is invalid.\n+            return IsMineResult::INVALID;\n+        }\n+        CScriptID scriptID = CScriptID(uint160(vSolutions[0]));\n+        CScript subscript;\n+        if (keystore.GetCScript(scriptID, subscript)) {\n+            ret = std::max(ret, IsMineInner(keystore, subscript, IsMineSigVersion::P2SH));\n+        }\n+        break;\n+    }\n+    case TX_WITNESS_V0_SCRIPTHASH:\n+    {\n+        if (sigversion == IsMineSigVersion::WITNESS_V0) {\n+            // P2WSH inside P2WSH is invalid.\n+            return IsMineResult::INVALID;\n+        }\n+        if (sigversion == IsMineSigVersion::TOP && !keystore.HaveCScript(CScriptID(CScript() << OP_0 << vSolutions[0]))) {\n+            break;\n+        }\n+        uint160 hash;\n+        CRIPEMD160().Write(&vSolutions[0][0], vSolutions[0].size()).Finalize(hash.begin());\n+        CScriptID scriptID = CScriptID(hash);\n+        CScript subscript;\n+        if (keystore.GetCScript(scriptID, subscript)) {\n+            ret = std::max(ret, IsMineInner(keystore, subscript, IsMineSigVersion::WITNESS_V0));\n+        }\n+        break;\n+    }\n+\n+    case TX_MULTISIG:\n+    {\n+        // Never treat bare multisig outputs as ours (they can still be made watchonly-though)\n+        if (sigversion == IsMineSigVersion::TOP) {\n+            break;\n+        }\n+\n+        // Only consider transactions \"mine\" if we own ALL the\n+        // keys involved. Multi-signature transactions that are\n+        // partially owned (somebody else has a key that can spend\n+        // them) enable spend-out-from-under-you attacks, especially\n+        // in shared-wallet situations.\n+        std::vector<valtype> keys(vSolutions.begin()+1, vSolutions.begin()+vSolutions.size()-1);\n+        if (!PermitsUncompressed(sigversion)) {\n+            for (size_t i = 0; i < keys.size(); i++) {\n+                if (keys[i].size() != 33) {\n+                    return IsMineResult::INVALID;\n+                }\n+            }\n+        }\n+        if (HaveKeys(keys, keystore)) {\n+            ret = std::max(ret, IsMineResult::SPENDABLE);\n+        }\n+        break;\n+    }\n+    }\n+\n+    if (ret == IsMineResult::NO && keystore.HaveWatchOnly(scriptPubKey)) {\n+        ret = std::max(ret, IsMineResult::WATCH_ONLY);\n+    }\n+    return ret;\n+}\n+\n+} // namespace\n+\n+isminetype LegacyScriptPubKeyMan::IsMine(const CScript& script) const\n+{\n+    switch (IsMineInner(*this, script, IsMineSigVersion::TOP)) {\n+    case IsMineResult::INVALID:\n+    case IsMineResult::NO:\n+        return ISMINE_NO;\n+    case IsMineResult::WATCH_ONLY:\n+        return ISMINE_WATCH_ONLY;\n+    case IsMineResult::SPENDABLE:\n+        return ISMINE_SPENDABLE;\n+    }\n+    assert(false);\n+}\n+\n+bool LegacyScriptPubKeyMan::HasEncryptedData() const\n+{\n+    LOCK(cs_KeyStore);\n+    return fUseCrypto || !mapCryptedKeys.empty();",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 211,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "47b342db0ddb1bc9bc595635e36bb2f16921a605",
      "in_reply_to_id": 328786049,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> No, but I'm not suggesting that. `HasEncryptedData()` could return `!mapCryptedKeys.empty()` and `fUseCrypto` and `SetCrypted` could both be deleted. The two `if(!SetCrypted()) return false` lines would just be replaced by `if (!mapKeys.empty()) return false`\r\n\r\nThis does not work since `mapKeys` is not empty utnil after a wallet is encrypted, but the places the `SetCrypted` are used are `AddCryptedKey` which is used during `Encrypt`.",
      "created_at": "2019-09-27T19:22:17Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r329217901",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/329217901"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 211,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/329226289",
      "pull_request_review_id": 294530492,
      "id": 329226289,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyOTIyNjI4OQ==",
      "diff_hunk": "@@ -0,0 +1,1445 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <key_io.h>\n+#include <outputtype.h>\n+#include <script/descriptor.h>\n+#include <util/bip32.h>\n+#include <util/strencodings.h>\n+#include <util/translation.h>\n+#include <wallet/scriptpubkeyman.h>\n+\n+bool LegacyScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n+{\n+    error.clear();\n+    TopUpKeyPool();\n+\n+    // Generate a new key that is added to wallet\n+    CPubKey new_key;\n+    if (!GetKeyFromPool(new_key)) {\n+        error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+        return false;\n+    }\n+    LearnRelatedScripts(new_key, type);\n+    dest = GetDestinationForKey(new_key, type);\n+    return true;\n+}\n+\n+typedef std::vector<unsigned char> valtype;\n+\n+namespace {\n+\n+/**\n+ * This is an enum that tracks the execution context of a script, similar to\n+ * SigVersion in script/interpreter. It is separate however because we want to\n+ * distinguish between top-level scriptPubKey execution and P2SH redeemScript\n+ * execution (a distinction that has no impact on consensus rules).\n+ */\n+enum class IsMineSigVersion\n+{\n+    TOP = 0,        //!< scriptPubKey execution\n+    P2SH = 1,       //!< P2SH redeemScript\n+    WITNESS_V0 = 2, //!< P2WSH witness script execution\n+};\n+\n+/**\n+ * This is an internal representation of isminetype + invalidity.\n+ * Its order is significant, as we return the max of all explored\n+ * possibilities.\n+ */\n+enum class IsMineResult\n+{\n+    NO = 0,         //!< Not ours\n+    WATCH_ONLY = 1, //!< Included in watch-only balance\n+    SPENDABLE = 2,  //!< Included in all balances\n+    INVALID = 3,    //!< Not spendable by anyone (uncompressed pubkey in segwit, P2SH inside P2SH or witness, witness inside witness)\n+};\n+\n+bool PermitsUncompressed(IsMineSigVersion sigversion)\n+{\n+    return sigversion == IsMineSigVersion::TOP || sigversion == IsMineSigVersion::P2SH;\n+}\n+\n+bool HaveKeys(const std::vector<valtype>& pubkeys, const LegacyScriptPubKeyMan& keystore)\n+{\n+    for (const valtype& pubkey : pubkeys) {\n+        CKeyID keyID = CPubKey(pubkey).GetID();\n+        if (!keystore.HaveKey(keyID)) return false;\n+    }\n+    return true;\n+}\n+\n+IsMineResult IsMineInner(const LegacyScriptPubKeyMan& keystore, const CScript& scriptPubKey, IsMineSigVersion sigversion)\n+{\n+    IsMineResult ret = IsMineResult::NO;\n+\n+    std::vector<valtype> vSolutions;\n+    txnouttype whichType = Solver(scriptPubKey, vSolutions);\n+\n+    CKeyID keyID;\n+    switch (whichType)\n+    {\n+    case TX_NONSTANDARD:\n+    case TX_NULL_DATA:\n+    case TX_WITNESS_UNKNOWN:\n+        break;\n+    case TX_PUBKEY:\n+        keyID = CPubKey(vSolutions[0]).GetID();\n+        if (!PermitsUncompressed(sigversion) && vSolutions[0].size() != 33) {\n+            return IsMineResult::INVALID;\n+        }\n+        if (keystore.HaveKey(keyID)) {\n+            ret = std::max(ret, IsMineResult::SPENDABLE);\n+        }\n+        break;\n+    case TX_WITNESS_V0_KEYHASH:\n+    {\n+        if (sigversion == IsMineSigVersion::WITNESS_V0) {\n+            // P2WPKH inside P2WSH is invalid.\n+            return IsMineResult::INVALID;\n+        }\n+        if (sigversion == IsMineSigVersion::TOP && !keystore.HaveCScript(CScriptID(CScript() << OP_0 << vSolutions[0]))) {\n+            // We do not support bare witness outputs unless the P2SH version of it would be\n+            // acceptable as well. This protects against matching before segwit activates.\n+            // This also applies to the P2WSH case.\n+            break;\n+        }\n+        ret = std::max(ret, IsMineInner(keystore, GetScriptForDestination(PKHash(uint160(vSolutions[0]))), IsMineSigVersion::WITNESS_V0));\n+        break;\n+    }\n+    case TX_PUBKEYHASH:\n+    {\n+        keyID = CKeyID(uint160(vSolutions[0]));\n+        CPubKey pubkey;\n+        if (keystore.GetPubKey(keyID, pubkey)) {\n+            if (!PermitsUncompressed(sigversion) && !pubkey.IsCompressed()) {\n+                return IsMineResult::INVALID;\n+            } else {\n+                ret = std::max(ret, IsMineResult::WATCH_ONLY);\n+            }\n+        }\n+        if (keystore.HaveKey(keyID)) {\n+            ret = std::max(ret, IsMineResult::SPENDABLE);\n+        }\n+        break;\n+    }\n+    case TX_SCRIPTHASH:\n+    {\n+        if (sigversion != IsMineSigVersion::TOP) {\n+            // P2SH inside P2WSH or P2SH is invalid.\n+            return IsMineResult::INVALID;\n+        }\n+        CScriptID scriptID = CScriptID(uint160(vSolutions[0]));\n+        CScript subscript;\n+        if (keystore.GetCScript(scriptID, subscript)) {\n+            ret = std::max(ret, IsMineInner(keystore, subscript, IsMineSigVersion::P2SH));\n+        }\n+        break;\n+    }\n+    case TX_WITNESS_V0_SCRIPTHASH:\n+    {\n+        if (sigversion == IsMineSigVersion::WITNESS_V0) {\n+            // P2WSH inside P2WSH is invalid.\n+            return IsMineResult::INVALID;\n+        }\n+        if (sigversion == IsMineSigVersion::TOP && !keystore.HaveCScript(CScriptID(CScript() << OP_0 << vSolutions[0]))) {\n+            break;\n+        }\n+        uint160 hash;\n+        CRIPEMD160().Write(&vSolutions[0][0], vSolutions[0].size()).Finalize(hash.begin());\n+        CScriptID scriptID = CScriptID(hash);\n+        CScript subscript;\n+        if (keystore.GetCScript(scriptID, subscript)) {\n+            ret = std::max(ret, IsMineInner(keystore, subscript, IsMineSigVersion::WITNESS_V0));\n+        }\n+        break;\n+    }\n+\n+    case TX_MULTISIG:\n+    {\n+        // Never treat bare multisig outputs as ours (they can still be made watchonly-though)\n+        if (sigversion == IsMineSigVersion::TOP) {\n+            break;\n+        }\n+\n+        // Only consider transactions \"mine\" if we own ALL the\n+        // keys involved. Multi-signature transactions that are\n+        // partially owned (somebody else has a key that can spend\n+        // them) enable spend-out-from-under-you attacks, especially\n+        // in shared-wallet situations.\n+        std::vector<valtype> keys(vSolutions.begin()+1, vSolutions.begin()+vSolutions.size()-1);\n+        if (!PermitsUncompressed(sigversion)) {\n+            for (size_t i = 0; i < keys.size(); i++) {\n+                if (keys[i].size() != 33) {\n+                    return IsMineResult::INVALID;\n+                }\n+            }\n+        }\n+        if (HaveKeys(keys, keystore)) {\n+            ret = std::max(ret, IsMineResult::SPENDABLE);\n+        }\n+        break;\n+    }\n+    }\n+\n+    if (ret == IsMineResult::NO && keystore.HaveWatchOnly(scriptPubKey)) {\n+        ret = std::max(ret, IsMineResult::WATCH_ONLY);\n+    }\n+    return ret;\n+}\n+\n+} // namespace\n+\n+isminetype LegacyScriptPubKeyMan::IsMine(const CScript& script) const\n+{\n+    switch (IsMineInner(*this, script, IsMineSigVersion::TOP)) {\n+    case IsMineResult::INVALID:\n+    case IsMineResult::NO:\n+        return ISMINE_NO;\n+    case IsMineResult::WATCH_ONLY:\n+        return ISMINE_WATCH_ONLY;\n+    case IsMineResult::SPENDABLE:\n+        return ISMINE_SPENDABLE;\n+    }\n+    assert(false);\n+}\n+\n+bool LegacyScriptPubKeyMan::HasEncryptedData() const\n+{\n+    LOCK(cs_KeyStore);\n+    return fUseCrypto || !mapCryptedKeys.empty();",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 211,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "47b342db0ddb1bc9bc595635e36bb2f16921a605",
      "in_reply_to_id": 328786049,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> This does not work since `mapKeys` is not empty utnil after a wallet is encrypted, but the places the `SetCrypted` are used are `AddCryptedKey` which is used during `Encrypt`.\r\n\r\nWow, that's confusing. It makes the meaning of the fUseCrypto member very difficult to describe. How about just clearing mapKeys at the beginning instead of the end of the encrypt function?\r\n\r\n```diff\r\n-    fUseCrypto = true;\r\n-    for (const KeyMap::value_type& mKey : mapKeys)\r\n+    KeyMap keys_to_encrypt;\r\n+    keys_to_encrypt.swap(mapKeys); // Clear mapKeys so AddCryptedKeyInner will succeed.\r\n+    for (const KeyMap::value_type& mKey : keys_to_encrypt)\r\n```",
      "created_at": "2019-09-27T19:48:34Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r329226289",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/329226289"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 211,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/329237540",
      "pull_request_review_id": 294545828,
      "id": 329237540,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyOTIzNzU0MA==",
      "diff_hunk": "@@ -0,0 +1,1445 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <key_io.h>\n+#include <outputtype.h>\n+#include <script/descriptor.h>\n+#include <util/bip32.h>\n+#include <util/strencodings.h>\n+#include <util/translation.h>\n+#include <wallet/scriptpubkeyman.h>\n+\n+bool LegacyScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n+{\n+    error.clear();\n+    TopUpKeyPool();\n+\n+    // Generate a new key that is added to wallet\n+    CPubKey new_key;\n+    if (!GetKeyFromPool(new_key)) {\n+        error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+        return false;\n+    }\n+    LearnRelatedScripts(new_key, type);\n+    dest = GetDestinationForKey(new_key, type);\n+    return true;\n+}\n+\n+typedef std::vector<unsigned char> valtype;\n+\n+namespace {\n+\n+/**\n+ * This is an enum that tracks the execution context of a script, similar to\n+ * SigVersion in script/interpreter. It is separate however because we want to\n+ * distinguish between top-level scriptPubKey execution and P2SH redeemScript\n+ * execution (a distinction that has no impact on consensus rules).\n+ */\n+enum class IsMineSigVersion\n+{\n+    TOP = 0,        //!< scriptPubKey execution\n+    P2SH = 1,       //!< P2SH redeemScript\n+    WITNESS_V0 = 2, //!< P2WSH witness script execution\n+};\n+\n+/**\n+ * This is an internal representation of isminetype + invalidity.\n+ * Its order is significant, as we return the max of all explored\n+ * possibilities.\n+ */\n+enum class IsMineResult\n+{\n+    NO = 0,         //!< Not ours\n+    WATCH_ONLY = 1, //!< Included in watch-only balance\n+    SPENDABLE = 2,  //!< Included in all balances\n+    INVALID = 3,    //!< Not spendable by anyone (uncompressed pubkey in segwit, P2SH inside P2SH or witness, witness inside witness)\n+};\n+\n+bool PermitsUncompressed(IsMineSigVersion sigversion)\n+{\n+    return sigversion == IsMineSigVersion::TOP || sigversion == IsMineSigVersion::P2SH;\n+}\n+\n+bool HaveKeys(const std::vector<valtype>& pubkeys, const LegacyScriptPubKeyMan& keystore)\n+{\n+    for (const valtype& pubkey : pubkeys) {\n+        CKeyID keyID = CPubKey(pubkey).GetID();\n+        if (!keystore.HaveKey(keyID)) return false;\n+    }\n+    return true;\n+}\n+\n+IsMineResult IsMineInner(const LegacyScriptPubKeyMan& keystore, const CScript& scriptPubKey, IsMineSigVersion sigversion)\n+{\n+    IsMineResult ret = IsMineResult::NO;\n+\n+    std::vector<valtype> vSolutions;\n+    txnouttype whichType = Solver(scriptPubKey, vSolutions);\n+\n+    CKeyID keyID;\n+    switch (whichType)\n+    {\n+    case TX_NONSTANDARD:\n+    case TX_NULL_DATA:\n+    case TX_WITNESS_UNKNOWN:\n+        break;\n+    case TX_PUBKEY:\n+        keyID = CPubKey(vSolutions[0]).GetID();\n+        if (!PermitsUncompressed(sigversion) && vSolutions[0].size() != 33) {\n+            return IsMineResult::INVALID;\n+        }\n+        if (keystore.HaveKey(keyID)) {\n+            ret = std::max(ret, IsMineResult::SPENDABLE);\n+        }\n+        break;\n+    case TX_WITNESS_V0_KEYHASH:\n+    {\n+        if (sigversion == IsMineSigVersion::WITNESS_V0) {\n+            // P2WPKH inside P2WSH is invalid.\n+            return IsMineResult::INVALID;\n+        }\n+        if (sigversion == IsMineSigVersion::TOP && !keystore.HaveCScript(CScriptID(CScript() << OP_0 << vSolutions[0]))) {\n+            // We do not support bare witness outputs unless the P2SH version of it would be\n+            // acceptable as well. This protects against matching before segwit activates.\n+            // This also applies to the P2WSH case.\n+            break;\n+        }\n+        ret = std::max(ret, IsMineInner(keystore, GetScriptForDestination(PKHash(uint160(vSolutions[0]))), IsMineSigVersion::WITNESS_V0));\n+        break;\n+    }\n+    case TX_PUBKEYHASH:\n+    {\n+        keyID = CKeyID(uint160(vSolutions[0]));\n+        CPubKey pubkey;\n+        if (keystore.GetPubKey(keyID, pubkey)) {\n+            if (!PermitsUncompressed(sigversion) && !pubkey.IsCompressed()) {\n+                return IsMineResult::INVALID;\n+            } else {\n+                ret = std::max(ret, IsMineResult::WATCH_ONLY);\n+            }\n+        }\n+        if (keystore.HaveKey(keyID)) {\n+            ret = std::max(ret, IsMineResult::SPENDABLE);\n+        }\n+        break;\n+    }\n+    case TX_SCRIPTHASH:\n+    {\n+        if (sigversion != IsMineSigVersion::TOP) {\n+            // P2SH inside P2WSH or P2SH is invalid.\n+            return IsMineResult::INVALID;\n+        }\n+        CScriptID scriptID = CScriptID(uint160(vSolutions[0]));\n+        CScript subscript;\n+        if (keystore.GetCScript(scriptID, subscript)) {\n+            ret = std::max(ret, IsMineInner(keystore, subscript, IsMineSigVersion::P2SH));\n+        }\n+        break;\n+    }\n+    case TX_WITNESS_V0_SCRIPTHASH:\n+    {\n+        if (sigversion == IsMineSigVersion::WITNESS_V0) {\n+            // P2WSH inside P2WSH is invalid.\n+            return IsMineResult::INVALID;\n+        }\n+        if (sigversion == IsMineSigVersion::TOP && !keystore.HaveCScript(CScriptID(CScript() << OP_0 << vSolutions[0]))) {\n+            break;\n+        }\n+        uint160 hash;\n+        CRIPEMD160().Write(&vSolutions[0][0], vSolutions[0].size()).Finalize(hash.begin());\n+        CScriptID scriptID = CScriptID(hash);\n+        CScript subscript;\n+        if (keystore.GetCScript(scriptID, subscript)) {\n+            ret = std::max(ret, IsMineInner(keystore, subscript, IsMineSigVersion::WITNESS_V0));\n+        }\n+        break;\n+    }\n+\n+    case TX_MULTISIG:\n+    {\n+        // Never treat bare multisig outputs as ours (they can still be made watchonly-though)\n+        if (sigversion == IsMineSigVersion::TOP) {\n+            break;\n+        }\n+\n+        // Only consider transactions \"mine\" if we own ALL the\n+        // keys involved. Multi-signature transactions that are\n+        // partially owned (somebody else has a key that can spend\n+        // them) enable spend-out-from-under-you attacks, especially\n+        // in shared-wallet situations.\n+        std::vector<valtype> keys(vSolutions.begin()+1, vSolutions.begin()+vSolutions.size()-1);\n+        if (!PermitsUncompressed(sigversion)) {\n+            for (size_t i = 0; i < keys.size(); i++) {\n+                if (keys[i].size() != 33) {\n+                    return IsMineResult::INVALID;\n+                }\n+            }\n+        }\n+        if (HaveKeys(keys, keystore)) {\n+            ret = std::max(ret, IsMineResult::SPENDABLE);\n+        }\n+        break;\n+    }\n+    }\n+\n+    if (ret == IsMineResult::NO && keystore.HaveWatchOnly(scriptPubKey)) {\n+        ret = std::max(ret, IsMineResult::WATCH_ONLY);\n+    }\n+    return ret;\n+}\n+\n+} // namespace\n+\n+isminetype LegacyScriptPubKeyMan::IsMine(const CScript& script) const\n+{\n+    switch (IsMineInner(*this, script, IsMineSigVersion::TOP)) {\n+    case IsMineResult::INVALID:\n+    case IsMineResult::NO:\n+        return ISMINE_NO;\n+    case IsMineResult::WATCH_ONLY:\n+        return ISMINE_WATCH_ONLY;\n+    case IsMineResult::SPENDABLE:\n+        return ISMINE_SPENDABLE;\n+    }\n+    assert(false);\n+}\n+\n+bool LegacyScriptPubKeyMan::HasEncryptedData() const\n+{\n+    LOCK(cs_KeyStore);\n+    return fUseCrypto || !mapCryptedKeys.empty();",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 211,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "47b342db0ddb1bc9bc595635e36bb2f16921a605",
      "in_reply_to_id": 328786049,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This breaks blank encrypted wallets (necessary for born encrypted wallets).",
      "created_at": "2019-09-27T20:23:49Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r329237540",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/329237540"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 211,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/329254277",
      "pull_request_review_id": 294568060,
      "id": 329254277,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyOTI1NDI3Nw==",
      "diff_hunk": "@@ -0,0 +1,1445 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <key_io.h>\n+#include <outputtype.h>\n+#include <script/descriptor.h>\n+#include <util/bip32.h>\n+#include <util/strencodings.h>\n+#include <util/translation.h>\n+#include <wallet/scriptpubkeyman.h>\n+\n+bool LegacyScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n+{\n+    error.clear();\n+    TopUpKeyPool();\n+\n+    // Generate a new key that is added to wallet\n+    CPubKey new_key;\n+    if (!GetKeyFromPool(new_key)) {\n+        error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+        return false;\n+    }\n+    LearnRelatedScripts(new_key, type);\n+    dest = GetDestinationForKey(new_key, type);\n+    return true;\n+}\n+\n+typedef std::vector<unsigned char> valtype;\n+\n+namespace {\n+\n+/**\n+ * This is an enum that tracks the execution context of a script, similar to\n+ * SigVersion in script/interpreter. It is separate however because we want to\n+ * distinguish between top-level scriptPubKey execution and P2SH redeemScript\n+ * execution (a distinction that has no impact on consensus rules).\n+ */\n+enum class IsMineSigVersion\n+{\n+    TOP = 0,        //!< scriptPubKey execution\n+    P2SH = 1,       //!< P2SH redeemScript\n+    WITNESS_V0 = 2, //!< P2WSH witness script execution\n+};\n+\n+/**\n+ * This is an internal representation of isminetype + invalidity.\n+ * Its order is significant, as we return the max of all explored\n+ * possibilities.\n+ */\n+enum class IsMineResult\n+{\n+    NO = 0,         //!< Not ours\n+    WATCH_ONLY = 1, //!< Included in watch-only balance\n+    SPENDABLE = 2,  //!< Included in all balances\n+    INVALID = 3,    //!< Not spendable by anyone (uncompressed pubkey in segwit, P2SH inside P2SH or witness, witness inside witness)\n+};\n+\n+bool PermitsUncompressed(IsMineSigVersion sigversion)\n+{\n+    return sigversion == IsMineSigVersion::TOP || sigversion == IsMineSigVersion::P2SH;\n+}\n+\n+bool HaveKeys(const std::vector<valtype>& pubkeys, const LegacyScriptPubKeyMan& keystore)\n+{\n+    for (const valtype& pubkey : pubkeys) {\n+        CKeyID keyID = CPubKey(pubkey).GetID();\n+        if (!keystore.HaveKey(keyID)) return false;\n+    }\n+    return true;\n+}\n+\n+IsMineResult IsMineInner(const LegacyScriptPubKeyMan& keystore, const CScript& scriptPubKey, IsMineSigVersion sigversion)\n+{\n+    IsMineResult ret = IsMineResult::NO;\n+\n+    std::vector<valtype> vSolutions;\n+    txnouttype whichType = Solver(scriptPubKey, vSolutions);\n+\n+    CKeyID keyID;\n+    switch (whichType)\n+    {\n+    case TX_NONSTANDARD:\n+    case TX_NULL_DATA:\n+    case TX_WITNESS_UNKNOWN:\n+        break;\n+    case TX_PUBKEY:\n+        keyID = CPubKey(vSolutions[0]).GetID();\n+        if (!PermitsUncompressed(sigversion) && vSolutions[0].size() != 33) {\n+            return IsMineResult::INVALID;\n+        }\n+        if (keystore.HaveKey(keyID)) {\n+            ret = std::max(ret, IsMineResult::SPENDABLE);\n+        }\n+        break;\n+    case TX_WITNESS_V0_KEYHASH:\n+    {\n+        if (sigversion == IsMineSigVersion::WITNESS_V0) {\n+            // P2WPKH inside P2WSH is invalid.\n+            return IsMineResult::INVALID;\n+        }\n+        if (sigversion == IsMineSigVersion::TOP && !keystore.HaveCScript(CScriptID(CScript() << OP_0 << vSolutions[0]))) {\n+            // We do not support bare witness outputs unless the P2SH version of it would be\n+            // acceptable as well. This protects against matching before segwit activates.\n+            // This also applies to the P2WSH case.\n+            break;\n+        }\n+        ret = std::max(ret, IsMineInner(keystore, GetScriptForDestination(PKHash(uint160(vSolutions[0]))), IsMineSigVersion::WITNESS_V0));\n+        break;\n+    }\n+    case TX_PUBKEYHASH:\n+    {\n+        keyID = CKeyID(uint160(vSolutions[0]));\n+        CPubKey pubkey;\n+        if (keystore.GetPubKey(keyID, pubkey)) {\n+            if (!PermitsUncompressed(sigversion) && !pubkey.IsCompressed()) {\n+                return IsMineResult::INVALID;\n+            } else {\n+                ret = std::max(ret, IsMineResult::WATCH_ONLY);\n+            }\n+        }\n+        if (keystore.HaveKey(keyID)) {\n+            ret = std::max(ret, IsMineResult::SPENDABLE);\n+        }\n+        break;\n+    }\n+    case TX_SCRIPTHASH:\n+    {\n+        if (sigversion != IsMineSigVersion::TOP) {\n+            // P2SH inside P2WSH or P2SH is invalid.\n+            return IsMineResult::INVALID;\n+        }\n+        CScriptID scriptID = CScriptID(uint160(vSolutions[0]));\n+        CScript subscript;\n+        if (keystore.GetCScript(scriptID, subscript)) {\n+            ret = std::max(ret, IsMineInner(keystore, subscript, IsMineSigVersion::P2SH));\n+        }\n+        break;\n+    }\n+    case TX_WITNESS_V0_SCRIPTHASH:\n+    {\n+        if (sigversion == IsMineSigVersion::WITNESS_V0) {\n+            // P2WSH inside P2WSH is invalid.\n+            return IsMineResult::INVALID;\n+        }\n+        if (sigversion == IsMineSigVersion::TOP && !keystore.HaveCScript(CScriptID(CScript() << OP_0 << vSolutions[0]))) {\n+            break;\n+        }\n+        uint160 hash;\n+        CRIPEMD160().Write(&vSolutions[0][0], vSolutions[0].size()).Finalize(hash.begin());\n+        CScriptID scriptID = CScriptID(hash);\n+        CScript subscript;\n+        if (keystore.GetCScript(scriptID, subscript)) {\n+            ret = std::max(ret, IsMineInner(keystore, subscript, IsMineSigVersion::WITNESS_V0));\n+        }\n+        break;\n+    }\n+\n+    case TX_MULTISIG:\n+    {\n+        // Never treat bare multisig outputs as ours (they can still be made watchonly-though)\n+        if (sigversion == IsMineSigVersion::TOP) {\n+            break;\n+        }\n+\n+        // Only consider transactions \"mine\" if we own ALL the\n+        // keys involved. Multi-signature transactions that are\n+        // partially owned (somebody else has a key that can spend\n+        // them) enable spend-out-from-under-you attacks, especially\n+        // in shared-wallet situations.\n+        std::vector<valtype> keys(vSolutions.begin()+1, vSolutions.begin()+vSolutions.size()-1);\n+        if (!PermitsUncompressed(sigversion)) {\n+            for (size_t i = 0; i < keys.size(); i++) {\n+                if (keys[i].size() != 33) {\n+                    return IsMineResult::INVALID;\n+                }\n+            }\n+        }\n+        if (HaveKeys(keys, keystore)) {\n+            ret = std::max(ret, IsMineResult::SPENDABLE);\n+        }\n+        break;\n+    }\n+    }\n+\n+    if (ret == IsMineResult::NO && keystore.HaveWatchOnly(scriptPubKey)) {\n+        ret = std::max(ret, IsMineResult::WATCH_ONLY);\n+    }\n+    return ret;\n+}\n+\n+} // namespace\n+\n+isminetype LegacyScriptPubKeyMan::IsMine(const CScript& script) const\n+{\n+    switch (IsMineInner(*this, script, IsMineSigVersion::TOP)) {\n+    case IsMineResult::INVALID:\n+    case IsMineResult::NO:\n+        return ISMINE_NO;\n+    case IsMineResult::WATCH_ONLY:\n+        return ISMINE_WATCH_ONLY;\n+    case IsMineResult::SPENDABLE:\n+        return ISMINE_SPENDABLE;\n+    }\n+    assert(false);\n+}\n+\n+bool LegacyScriptPubKeyMan::HasEncryptedData() const\n+{\n+    LOCK(cs_KeyStore);\n+    return fUseCrypto || !mapCryptedKeys.empty();",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 211,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "47b342db0ddb1bc9bc595635e36bb2f16921a605",
      "in_reply_to_id": 328786049,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I was able to remove `fUseCrypto` and instead used a check for whether there were any encryption keys present (required adding `HasEncrytionKeys` to `WalletStorage`).",
      "created_at": "2019-09-27T21:16:29Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r329254277",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/329254277"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 211,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/330647648",
      "pull_request_review_id": 296366288,
      "id": 330647648,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMDY0NzY0OA==",
      "diff_hunk": "@@ -0,0 +1,477 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+#define BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <wallet/crypter.h>\n+#include <wallet/ismine.h>\n+#include <wallet/walletdb.h>\n+#include <wallet/walletutil.h>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+enum class OutputType;\n+\n+// Wallet storage things that ScriptPubKeyMans need in order to be able to store things to the wallet database\n+class WalletStorage\n+{\n+public:\n+    virtual ~WalletStorage() = default;\n+    virtual const std::string GetDisplayName() const = 0;\n+    virtual std::shared_ptr<WalletDatabase> GetDatabase() = 0;\n+    virtual bool IsWalletFlagSet(uint64_t) const = 0;\n+    virtual void SetWalletFlag(uint64_t) = 0;\n+    virtual void UnsetWalletFlagWithDB(WalletBatch&, uint64_t) = 0;\n+    virtual bool CanSupportFeature(enum WalletFeature) const = 0;\n+    virtual void SetMinVersion(enum WalletFeature, WalletBatch* = nullptr, bool = false) = 0;\n+    virtual const CKeyingMaterial& GetEncryptionKey() const = 0;\n+    virtual bool HasEncryptionKeys() const = 0;\n+    virtual bool IsLocked() const = 0;\n+};\n+\n+//! Default for -keypool\n+static const unsigned int DEFAULT_KEYPOOL_SIZE = 1000;\n+\n+std::vector<CKeyID> GetAffectedKeys(const CScript& spk, const SigningProvider& provider);\n+\n+/** A key from a CWallet's keypool\n+ *\n+ * The wallet holds one (for pre HD-split wallets) or several keypools. These\n+ * are sets of keys that have not yet been used to provide addresses or receive\n+ * change.\n+ *\n+ * The Bitcoin Core wallet was originally a collection of unrelated private\n+ * keys with their associated addresses. If a non-HD wallet generated a\n+ * key/address, gave that address out and then restored a backup from before\n+ * that key's generation, then any funds sent to that address would be\n+ * lost definitively.\n+ *\n+ * The keypool was implemented to avoid this scenario (commit: 10384941). The\n+ * wallet would generate a set of keys (100 by default). When a new public key\n+ * was required, either to give out as an address or to use in a change output,\n+ * it would be drawn from the keypool. The keypool would then be topped up to\n+ * maintain 100 keys. This ensured that as long as the wallet hadn't used more\n+ * than 100 keys since the previous backup, all funds would be safe, since a\n+ * restored wallet would be able to scan for all owned addresses.\n+ *\n+ * A keypool also allowed encrypted wallets to give out addresses without\n+ * having to be decrypted to generate a new private key.\n+ *\n+ * With the introduction of HD wallets (commit: f1902510), the keypool\n+ * essentially became an address look-ahead pool. Restoring old backups can no\n+ * longer definitively lose funds as long as the addresses used were from the\n+ * wallet's HD seed (since all private keys can be rederived from the seed).\n+ * However, if many addresses were used since the backup, then the wallet may\n+ * not know how far ahead in the HD chain to look for its addresses. The\n+ * keypool is used to implement a 'gap limit'. The keypool maintains a set of\n+ * keys (by default 1000) ahead of the last used key and scans for the\n+ * addresses of those keys.  This avoids the risk of not seeing transactions\n+ * involving the wallet's addresses, or of re-using the same address.\n+ *\n+ * The HD-split wallet feature added a second keypool (commit: 02592f4c). There\n+ * is an external keypool (for addresses to hand out) and an internal keypool\n+ * (for change addresses).\n+ *\n+ * Keypool keys are stored in the wallet/keystore's keymap. The keypool data is\n+ * stored as sets of indexes in the wallet (setInternalKeyPool,\n+ * setExternalKeyPool and set_pre_split_keypool), and a map from the key to the\n+ * index (m_pool_key_to_index). The CKeyPool object is used to\n+ * serialize/deserialize the pool data to/from the database.\n+ */\n+class CKeyPool\n+{\n+public:\n+    //! The time at which the key was generated. Set in AddKeypoolPubKeyWithDB\n+    int64_t nTime;\n+    //! The public key\n+    CPubKey vchPubKey;\n+    //! Whether this keypool entry is in the internal keypool (for change outputs)\n+    bool fInternal;\n+    //! Whether this key was generated for a keypool before the wallet was upgraded to HD-split\n+    bool m_pre_split;\n+\n+    CKeyPool();\n+    CKeyPool(const CPubKey& vchPubKeyIn, bool internalIn);\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        int nVersion = s.GetVersion();\n+        if (!(s.GetType() & SER_GETHASH))\n+            READWRITE(nVersion);\n+        READWRITE(nTime);\n+        READWRITE(vchPubKey);\n+        if (ser_action.ForRead()) {\n+            try {\n+                READWRITE(fInternal);\n+            }\n+            catch (std::ios_base::failure&) {\n+                /* flag as external address if we can't read the internal boolean\n+                   (this will be the case for any wallet before the HD chain split version) */\n+                fInternal = false;\n+            }\n+            try {\n+                READWRITE(m_pre_split);\n+            }\n+            catch (std::ios_base::failure&) {\n+                /* flag as postsplit address if we can't read the m_pre_split boolean\n+                   (this will be the case for any wallet that upgrades to HD chain split)*/\n+                m_pre_split = false;\n+            }\n+        }\n+        else {\n+            READWRITE(fInternal);\n+            READWRITE(m_pre_split);\n+        }\n+    }\n+};\n+\n+/*\n+ * A class implementing ScriptPubKeyMan manages some (or all) scriptPubKeys used in a wallet.\n+ * It contains the scripts and keys related to the scriptPubKeys it manages.\n+ * A ScriptPubKeyMan will be able to give out scriptPubKeys to be used, as well as marking\n+ * when a scriptPubKey has been used. It also handles when and how to store a scriptPubKey\n+ * and it's related scripts and keys, including encryption.\n+ */\n+class ScriptPubKeyMan\n+{\n+private:\n+    WalletStorage& storage;\n+\n+protected:\n+    std::shared_ptr<WalletDatabase> m_database;\n+\n+public:\n+    ScriptPubKeyMan(WalletStorage& storage) : storage(storage), m_database(storage.GetDatabase()) {}\n+\n+    const std::string GetDisplayName() const { return storage.GetDisplayName(); }\n+    bool IsWalletFlagSet(uint64_t flag) const { return storage.IsWalletFlagSet(flag); }\n+    void SetWalletFlag(uint64_t flag) { return storage.SetWalletFlag(flag); }\n+    void UnsetWalletFlagWithDB(WalletBatch& batch, uint64_t flag) { return storage.UnsetWalletFlagWithDB(batch, flag); }\n+    bool CanSupportFeature(enum WalletFeature wf) const { return storage.CanSupportFeature(wf); }\n+    void SetMinVersion(enum WalletFeature wf) { return storage.SetMinVersion(wf); }\n+    const CKeyingMaterial& GetEncryptionKey() const { return storage.GetEncryptionKey(); }\n+    bool HasEncryptionKeys() const { return storage.HasEncryptionKeys(); }\n+    bool IsLocked() const { return storage.IsLocked(); }\n+\n+    virtual ~ScriptPubKeyMan() {};\n+    virtual bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) { return false; }\n+    virtual isminetype IsMine(const CScript& script) const { return ISMINE_NO; }\n+\n+    virtual bool HasEncryptedData() const { return false; }\n+\n+    virtual bool CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys = false) { return false; }\n+    virtual bool Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch) { return false; }\n+\n+    virtual bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool) { return false; }\n+    virtual void KeepDestination(int64_t index) {}\n+    virtual void ReturnDestination(int64_t index, bool internal, const CTxDestination& addr) {}\n+\n+    virtual bool TopUp(unsigned int size = 0) { return false; }\n+\n+    //! Mark unused addresses as being used\n+    virtual void MarkUnusedAddresses(const CScript& script) {}\n+\n+    //! Upgrade stored CKeyMetadata objects to store key origin info as KeyOriginInfo\n+    virtual void UpgradeKeyMetadata() {}\n+\n+    /** Sets up the key generation stuff, i.e. generates new HD seeds and sets them as active.\n+      * Returns false if already setup or setup fails, true if setup is successful\n+      * Set force=true to make it re-setup if already setup, used for upgrades\n+      */\n+    virtual bool SetupGeneration(bool force = false) { return false; }\n+\n+    /* Returns true if HD is enabled */\n+    virtual bool IsHDEnabled() const { return false; }\n+\n+    /* Returns true if the wallet can give out new addresses. This means it has keys in the keypool or can generate new keys */\n+    virtual bool CanGetAddresses(bool internal = false) { return false; }\n+\n+    /** Upgrades the wallet to the specified version */\n+    virtual bool Upgrade(int prev_version, int new_version, std::string& error) { return false; }\n+\n+    virtual bool HavePrivateKeys() const { return false; }\n+\n+    //! The action to do when the DB needs rewrite\n+    virtual void RewriteDB() {}\n+\n+    virtual int64_t GetOldestKeyPoolTime() { return GetTime(); }\n+\n+    virtual size_t KeypoolCountExternalKeys() { return 0; }\n+    virtual unsigned int GetKeypoolSize() const { return 0; }",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": null,
      "original_position": 206,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "4abd055ce1a595800ec88552a1f8aac47acb8cf4",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Might be good to standardize on `GetKeyPoolSize` pr `GetKeypoolSize` (both are used after this change)",
      "created_at": "2019-10-02T16:26:10Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r330647648",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/330647648"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 206,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/330669214",
      "pull_request_review_id": 296393285,
      "id": 330669214,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMDY2OTIxNA==",
      "diff_hunk": "@@ -86,19 +86,48 @@ void LegacyScriptPubKeyMan::RewriteDB()\n {\n }\n \n+static int64_t GetOldestKeyTimeInPool(const std::set<int64_t>& setKeyPool, WalletBatch& batch) {\n+    if (setKeyPool.empty()) {\n+        return GetTime();\n+    }\n+\n+    CKeyPool keypool;\n+    int64_t nIndex = *(setKeyPool.begin());\n+    if (!batch.ReadPool(nIndex, keypool)) {\n+        throw std::runtime_error(std::string(__func__) + \": read oldest key in keypool failed\");\n+    }\n+    assert(keypool.vchPubKey.IsValid());\n+    return keypool.nTime;\n+}\n+\n int64_t LegacyScriptPubKeyMan::GetOldestKeyPoolTime()\n {\n-    return GetTime();\n+    LOCK(cs_KeyStore);\n+\n+    WalletBatch batch(*m_database);\n+\n+    // load oldest key from keypool, get time and return\n+    int64_t oldestKey = GetOldestKeyTimeInPool(setExternalKeyPool, batch);\n+    if (IsHDEnabled() && CanSupportFeature(FEATURE_HD_SPLIT)) {\n+        oldestKey = std::max(GetOldestKeyTimeInPool(setInternalKeyPool, batch), oldestKey);\n+        if (!set_pre_split_keypool.empty()) {\n+            oldestKey = std::max(GetOldestKeyTimeInPool(set_pre_split_keypool, batch), oldestKey);\n+        }\n+    }\n+\n+    return oldestKey;\n }\n \n size_t LegacyScriptPubKeyMan::KeypoolCountExternalKeys()\n {\n-    return 0;\n+    LOCK(cs_KeyStore);\n+    return setExternalKeyPool.size() + set_pre_split_keypool.size();\n }\n \n unsigned int LegacyScriptPubKeyMan::GetKeypoolSize() const\n {\n-    return 0;\n+    LOCK(cs_KeyStore);\n+    return setInternalKeyPool.size() + setExternalKeyPool.size() + set_pre_split_keypool.size();",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 488,
      "original_position": 48,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "26c1ebe6a7bea812860636f9d7316fc71b8d90dc",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Implement GetOldestKeyPoolTime, KeypoolCountExternalKeys, and GetKeypoolSize in LegacyScriptPubKeyMan\" (26c1ebe6a7bea812860636f9d7316fc71b8d90dc)\r\n\r\nIs it a bugfix to include set_pre_split_keypool size in this return value? Wallet method doesn't do this, so behavior seems to change in later commit 937cf1e2265ace44147475dc9da8a5ec0b1dda47\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/f4a0d27e85754d60804ffa36e415b67c263180b9/src/wallet/wallet.h#L1251-L1255",
      "created_at": "2019-10-02T17:12:40Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r330669214",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/330669214"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 488,
      "original_line": 488,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/330679044",
      "pull_request_review_id": 296405765,
      "id": 330679044,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMDY3OTA0NA==",
      "diff_hunk": "@@ -4543,8 +3827,12 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n \n         // No need to read and scan block if block was created before\n         // our wallet birthday (as adjusted for block time variability)\n-        if (walletInstance->nTimeFirstKey) {\n-            if (Optional<int> first_block = locked_chain->findFirstBlockWithTimeAndHeight(walletInstance->nTimeFirstKey - TIMESTAMP_WINDOW, rescan_height, nullptr)) {\n+        int64_t time_first_key = std::numeric_limits<int64_t>::max();\n+        for (auto spk_man : walletInstance->GetActiveScriptPubKeyMans()) {\n+            std::min(time_first_key, spk_man->GetTimeFirstKey());",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 1431,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "4abd055ce1a595800ec88552a1f8aac47acb8cf4",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"[ci skip] Use GetTimeFirstKey instead of nTimeFirstKey\" (4b7effe37f5efeddb54523b95e58d464bc317e7f)\r\n\r\nIs this a bug? It seems like this should say\r\n\r\n```\r\ntime_first_key = std::min(time_first_key, spk_man->GetTimeFirstKey());\r\n```\r\n\r\nIf this is a bug, I'm a little surprised there isn't any test coverage for this.",
      "created_at": "2019-10-02T17:33:44Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r330679044",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/330679044"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3832,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/330782874",
      "pull_request_review_id": 296541176,
      "id": 330782874,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMDc4Mjg3NA==",
      "diff_hunk": "@@ -86,19 +86,48 @@ void LegacyScriptPubKeyMan::RewriteDB()\n {\n }\n \n+static int64_t GetOldestKeyTimeInPool(const std::set<int64_t>& setKeyPool, WalletBatch& batch) {\n+    if (setKeyPool.empty()) {\n+        return GetTime();\n+    }\n+\n+    CKeyPool keypool;\n+    int64_t nIndex = *(setKeyPool.begin());\n+    if (!batch.ReadPool(nIndex, keypool)) {\n+        throw std::runtime_error(std::string(__func__) + \": read oldest key in keypool failed\");\n+    }\n+    assert(keypool.vchPubKey.IsValid());\n+    return keypool.nTime;\n+}\n+\n int64_t LegacyScriptPubKeyMan::GetOldestKeyPoolTime()\n {\n-    return GetTime();\n+    LOCK(cs_KeyStore);\n+\n+    WalletBatch batch(*m_database);\n+\n+    // load oldest key from keypool, get time and return\n+    int64_t oldestKey = GetOldestKeyTimeInPool(setExternalKeyPool, batch);\n+    if (IsHDEnabled() && CanSupportFeature(FEATURE_HD_SPLIT)) {\n+        oldestKey = std::max(GetOldestKeyTimeInPool(setInternalKeyPool, batch), oldestKey);\n+        if (!set_pre_split_keypool.empty()) {\n+            oldestKey = std::max(GetOldestKeyTimeInPool(set_pre_split_keypool, batch), oldestKey);\n+        }\n+    }\n+\n+    return oldestKey;\n }\n \n size_t LegacyScriptPubKeyMan::KeypoolCountExternalKeys()\n {\n-    return 0;\n+    LOCK(cs_KeyStore);\n+    return setExternalKeyPool.size() + set_pre_split_keypool.size();\n }\n \n unsigned int LegacyScriptPubKeyMan::GetKeypoolSize() const\n {\n-    return 0;\n+    LOCK(cs_KeyStore);\n+    return setInternalKeyPool.size() + setExternalKeyPool.size() + set_pre_split_keypool.size();",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 488,
      "original_position": 48,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "26c1ebe6a7bea812860636f9d7316fc71b8d90dc",
      "in_reply_to_id": 330669214,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, that is a bug fix.",
      "created_at": "2019-10-02T21:36:14Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r330782874",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/330782874"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 488,
      "original_line": 488,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/330802916",
      "pull_request_review_id": 296566362,
      "id": 330802916,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMDgwMjkxNg==",
      "diff_hunk": "@@ -0,0 +1,477 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+#define BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <wallet/crypter.h>\n+#include <wallet/ismine.h>\n+#include <wallet/walletdb.h>\n+#include <wallet/walletutil.h>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+enum class OutputType;\n+\n+// Wallet storage things that ScriptPubKeyMans need in order to be able to store things to the wallet database\n+class WalletStorage\n+{\n+public:\n+    virtual ~WalletStorage() = default;\n+    virtual const std::string GetDisplayName() const = 0;\n+    virtual std::shared_ptr<WalletDatabase> GetDatabase() = 0;\n+    virtual bool IsWalletFlagSet(uint64_t) const = 0;\n+    virtual void SetWalletFlag(uint64_t) = 0;\n+    virtual void UnsetWalletFlagWithDB(WalletBatch&, uint64_t) = 0;\n+    virtual bool CanSupportFeature(enum WalletFeature) const = 0;\n+    virtual void SetMinVersion(enum WalletFeature, WalletBatch* = nullptr, bool = false) = 0;\n+    virtual const CKeyingMaterial& GetEncryptionKey() const = 0;\n+    virtual bool HasEncryptionKeys() const = 0;\n+    virtual bool IsLocked() const = 0;\n+};\n+\n+//! Default for -keypool\n+static const unsigned int DEFAULT_KEYPOOL_SIZE = 1000;\n+\n+std::vector<CKeyID> GetAffectedKeys(const CScript& spk, const SigningProvider& provider);\n+\n+/** A key from a CWallet's keypool\n+ *\n+ * The wallet holds one (for pre HD-split wallets) or several keypools. These\n+ * are sets of keys that have not yet been used to provide addresses or receive\n+ * change.\n+ *\n+ * The Bitcoin Core wallet was originally a collection of unrelated private\n+ * keys with their associated addresses. If a non-HD wallet generated a\n+ * key/address, gave that address out and then restored a backup from before\n+ * that key's generation, then any funds sent to that address would be\n+ * lost definitively.\n+ *\n+ * The keypool was implemented to avoid this scenario (commit: 10384941). The\n+ * wallet would generate a set of keys (100 by default). When a new public key\n+ * was required, either to give out as an address or to use in a change output,\n+ * it would be drawn from the keypool. The keypool would then be topped up to\n+ * maintain 100 keys. This ensured that as long as the wallet hadn't used more\n+ * than 100 keys since the previous backup, all funds would be safe, since a\n+ * restored wallet would be able to scan for all owned addresses.\n+ *\n+ * A keypool also allowed encrypted wallets to give out addresses without\n+ * having to be decrypted to generate a new private key.\n+ *\n+ * With the introduction of HD wallets (commit: f1902510), the keypool\n+ * essentially became an address look-ahead pool. Restoring old backups can no\n+ * longer definitively lose funds as long as the addresses used were from the\n+ * wallet's HD seed (since all private keys can be rederived from the seed).\n+ * However, if many addresses were used since the backup, then the wallet may\n+ * not know how far ahead in the HD chain to look for its addresses. The\n+ * keypool is used to implement a 'gap limit'. The keypool maintains a set of\n+ * keys (by default 1000) ahead of the last used key and scans for the\n+ * addresses of those keys.  This avoids the risk of not seeing transactions\n+ * involving the wallet's addresses, or of re-using the same address.\n+ *\n+ * The HD-split wallet feature added a second keypool (commit: 02592f4c). There\n+ * is an external keypool (for addresses to hand out) and an internal keypool\n+ * (for change addresses).\n+ *\n+ * Keypool keys are stored in the wallet/keystore's keymap. The keypool data is\n+ * stored as sets of indexes in the wallet (setInternalKeyPool,\n+ * setExternalKeyPool and set_pre_split_keypool), and a map from the key to the\n+ * index (m_pool_key_to_index). The CKeyPool object is used to\n+ * serialize/deserialize the pool data to/from the database.\n+ */\n+class CKeyPool\n+{\n+public:\n+    //! The time at which the key was generated. Set in AddKeypoolPubKeyWithDB\n+    int64_t nTime;\n+    //! The public key\n+    CPubKey vchPubKey;\n+    //! Whether this keypool entry is in the internal keypool (for change outputs)\n+    bool fInternal;\n+    //! Whether this key was generated for a keypool before the wallet was upgraded to HD-split\n+    bool m_pre_split;\n+\n+    CKeyPool();\n+    CKeyPool(const CPubKey& vchPubKeyIn, bool internalIn);\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        int nVersion = s.GetVersion();\n+        if (!(s.GetType() & SER_GETHASH))\n+            READWRITE(nVersion);\n+        READWRITE(nTime);\n+        READWRITE(vchPubKey);\n+        if (ser_action.ForRead()) {\n+            try {\n+                READWRITE(fInternal);\n+            }\n+            catch (std::ios_base::failure&) {\n+                /* flag as external address if we can't read the internal boolean\n+                   (this will be the case for any wallet before the HD chain split version) */\n+                fInternal = false;\n+            }\n+            try {\n+                READWRITE(m_pre_split);\n+            }\n+            catch (std::ios_base::failure&) {\n+                /* flag as postsplit address if we can't read the m_pre_split boolean\n+                   (this will be the case for any wallet that upgrades to HD chain split)*/\n+                m_pre_split = false;\n+            }\n+        }\n+        else {\n+            READWRITE(fInternal);\n+            READWRITE(m_pre_split);\n+        }\n+    }\n+};\n+\n+/*\n+ * A class implementing ScriptPubKeyMan manages some (or all) scriptPubKeys used in a wallet.\n+ * It contains the scripts and keys related to the scriptPubKeys it manages.\n+ * A ScriptPubKeyMan will be able to give out scriptPubKeys to be used, as well as marking\n+ * when a scriptPubKey has been used. It also handles when and how to store a scriptPubKey\n+ * and it's related scripts and keys, including encryption.\n+ */\n+class ScriptPubKeyMan\n+{\n+private:\n+    WalletStorage& storage;\n+\n+protected:\n+    std::shared_ptr<WalletDatabase> m_database;\n+\n+public:\n+    ScriptPubKeyMan(WalletStorage& storage) : storage(storage), m_database(storage.GetDatabase()) {}\n+\n+    const std::string GetDisplayName() const { return storage.GetDisplayName(); }\n+    bool IsWalletFlagSet(uint64_t flag) const { return storage.IsWalletFlagSet(flag); }\n+    void SetWalletFlag(uint64_t flag) { return storage.SetWalletFlag(flag); }\n+    void UnsetWalletFlagWithDB(WalletBatch& batch, uint64_t flag) { return storage.UnsetWalletFlagWithDB(batch, flag); }\n+    bool CanSupportFeature(enum WalletFeature wf) const { return storage.CanSupportFeature(wf); }\n+    void SetMinVersion(enum WalletFeature wf) { return storage.SetMinVersion(wf); }\n+    const CKeyingMaterial& GetEncryptionKey() const { return storage.GetEncryptionKey(); }\n+    bool HasEncryptionKeys() const { return storage.HasEncryptionKeys(); }\n+    bool IsLocked() const { return storage.IsLocked(); }\n+\n+    virtual ~ScriptPubKeyMan() {};\n+    virtual bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) { return false; }\n+    virtual isminetype IsMine(const CScript& script) const { return ISMINE_NO; }\n+\n+    virtual bool HasEncryptedData() const { return false; }\n+\n+    virtual bool CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys = false) { return false; }\n+    virtual bool Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch) { return false; }\n+\n+    virtual bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool) { return false; }\n+    virtual void KeepDestination(int64_t index) {}\n+    virtual void ReturnDestination(int64_t index, bool internal, const CTxDestination& addr) {}\n+\n+    virtual bool TopUp(unsigned int size = 0) { return false; }\n+\n+    //! Mark unused addresses as being used\n+    virtual void MarkUnusedAddresses(const CScript& script) {}\n+\n+    //! Upgrade stored CKeyMetadata objects to store key origin info as KeyOriginInfo\n+    virtual void UpgradeKeyMetadata() {}\n+\n+    /** Sets up the key generation stuff, i.e. generates new HD seeds and sets them as active.\n+      * Returns false if already setup or setup fails, true if setup is successful\n+      * Set force=true to make it re-setup if already setup, used for upgrades\n+      */\n+    virtual bool SetupGeneration(bool force = false) { return false; }\n+\n+    /* Returns true if HD is enabled */\n+    virtual bool IsHDEnabled() const { return false; }\n+\n+    /* Returns true if the wallet can give out new addresses. This means it has keys in the keypool or can generate new keys */\n+    virtual bool CanGetAddresses(bool internal = false) { return false; }\n+\n+    /** Upgrades the wallet to the specified version */\n+    virtual bool Upgrade(int prev_version, int new_version, std::string& error) { return false; }\n+\n+    virtual bool HavePrivateKeys() const { return false; }\n+\n+    //! The action to do when the DB needs rewrite\n+    virtual void RewriteDB() {}\n+\n+    virtual int64_t GetOldestKeyPoolTime() { return GetTime(); }\n+\n+    virtual size_t KeypoolCountExternalKeys() { return 0; }\n+    virtual unsigned int GetKeypoolSize() const { return 0; }",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": null,
      "original_position": 206,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "4abd055ce1a595800ec88552a1f8aac47acb8cf4",
      "in_reply_to_id": 330647648,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Standardized on `GetKeyPoolSize` as that was already being used.",
      "created_at": "2019-10-02T22:44:15Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r330802916",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/330802916"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 206,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/330803035",
      "pull_request_review_id": 296566512,
      "id": 330803035,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMDgwMzAzNQ==",
      "diff_hunk": "@@ -4543,8 +3827,12 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n \n         // No need to read and scan block if block was created before\n         // our wallet birthday (as adjusted for block time variability)\n-        if (walletInstance->nTimeFirstKey) {\n-            if (Optional<int> first_block = locked_chain->findFirstBlockWithTimeAndHeight(walletInstance->nTimeFirstKey - TIMESTAMP_WINDOW, rescan_height, nullptr)) {\n+        int64_t time_first_key = std::numeric_limits<int64_t>::max();\n+        for (auto spk_man : walletInstance->GetActiveScriptPubKeyMans()) {\n+            std::min(time_first_key, spk_man->GetTimeFirstKey());",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 1431,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "4abd055ce1a595800ec88552a1f8aac47acb8cf4",
      "in_reply_to_id": 330679044,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Seems like a bug, fixed. Changing it has no effect on any tests...",
      "created_at": "2019-10-02T22:44:43Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r330803035",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/330803035"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3832,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/331166476",
      "pull_request_review_id": 297038629,
      "id": 331166476,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMTE2NjQ3Ng==",
      "diff_hunk": "@@ -4719,62 +3990,32 @@ std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outpu\n     return groups;\n }\n \n-bool CWallet::GetKeyOrigin(const CKeyID& keyID, KeyOriginInfo& info) const\n+bool CWallet::IsCrypted() const\n {\n-    CKeyMetadata meta;\n-    {\n-        LOCK(cs_wallet);\n-        auto it = mapKeyMetadata.find(keyID);\n-        if (it != mapKeyMetadata.end()) {\n-            meta = it->second;\n+    for (const auto& entry : m_spk_managers) {",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 1475,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "0b66a22b854e39e109ac5a42a058e1f8ee51ba38",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think it'd make sense to add `if (HasEncryptionKeys()) return true;` before this loop so `IsCrypted` meaning is unchanged and it'll reliably return true if wallet encryption is present, regardless of what keyman instances are created and how they function internally.",
      "created_at": "2019-10-03T17:42:40Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r331166476",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/331166476"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4000,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/331172037",
      "pull_request_review_id": 297038629,
      "id": 331172037,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMTE3MjAzNw==",
      "diff_hunk": "@@ -0,0 +1,1448 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <key_io.h>\n+#include <outputtype.h>\n+#include <script/descriptor.h>\n+#include <util/bip32.h>\n+#include <util/strencodings.h>\n+#include <util/translation.h>\n+#include <wallet/scriptpubkeyman.h>\n+\n+bool LegacyScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n+{\n+    error.clear();\n+    TopUpKeyPool();\n+\n+    // Generate a new key that is added to wallet\n+    CPubKey new_key;\n+    if (!GetKeyFromPool(new_key)) {\n+        error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+        return false;\n+    }\n+    LearnRelatedScripts(new_key, type);\n+    dest = GetDestinationForKey(new_key, type);\n+    return true;\n+}\n+\n+typedef std::vector<unsigned char> valtype;\n+\n+namespace {\n+\n+/**\n+ * This is an enum that tracks the execution context of a script, similar to\n+ * SigVersion in script/interpreter. It is separate however because we want to\n+ * distinguish between top-level scriptPubKey execution and P2SH redeemScript\n+ * execution (a distinction that has no impact on consensus rules).\n+ */\n+enum class IsMineSigVersion\n+{\n+    TOP = 0,        //!< scriptPubKey execution\n+    P2SH = 1,       //!< P2SH redeemScript\n+    WITNESS_V0 = 2, //!< P2WSH witness script execution\n+};\n+\n+/**\n+ * This is an internal representation of isminetype + invalidity.\n+ * Its order is significant, as we return the max of all explored\n+ * possibilities.\n+ */\n+enum class IsMineResult\n+{\n+    NO = 0,         //!< Not ours\n+    WATCH_ONLY = 1, //!< Included in watch-only balance\n+    SPENDABLE = 2,  //!< Included in all balances\n+    INVALID = 3,    //!< Not spendable by anyone (uncompressed pubkey in segwit, P2SH inside P2SH or witness, witness inside witness)\n+};\n+\n+bool PermitsUncompressed(IsMineSigVersion sigversion)\n+{\n+    return sigversion == IsMineSigVersion::TOP || sigversion == IsMineSigVersion::P2SH;\n+}\n+\n+bool HaveKeys(const std::vector<valtype>& pubkeys, const LegacyScriptPubKeyMan& keystore)\n+{\n+    for (const valtype& pubkey : pubkeys) {\n+        CKeyID keyID = CPubKey(pubkey).GetID();\n+        if (!keystore.HaveKey(keyID)) return false;\n+    }\n+    return true;\n+}\n+\n+IsMineResult IsMineInner(const LegacyScriptPubKeyMan& keystore, const CScript& scriptPubKey, IsMineSigVersion sigversion)\n+{\n+    IsMineResult ret = IsMineResult::NO;\n+\n+    std::vector<valtype> vSolutions;\n+    txnouttype whichType = Solver(scriptPubKey, vSolutions);\n+\n+    CKeyID keyID;\n+    switch (whichType)\n+    {\n+    case TX_NONSTANDARD:\n+    case TX_NULL_DATA:\n+    case TX_WITNESS_UNKNOWN:\n+        break;\n+    case TX_PUBKEY:\n+        keyID = CPubKey(vSolutions[0]).GetID();\n+        if (!PermitsUncompressed(sigversion) && vSolutions[0].size() != 33) {\n+            return IsMineResult::INVALID;\n+        }\n+        if (keystore.HaveKey(keyID)) {\n+            ret = std::max(ret, IsMineResult::SPENDABLE);\n+        }\n+        break;\n+    case TX_WITNESS_V0_KEYHASH:\n+    {\n+        if (sigversion == IsMineSigVersion::WITNESS_V0) {\n+            // P2WPKH inside P2WSH is invalid.\n+            return IsMineResult::INVALID;\n+        }\n+        if (sigversion == IsMineSigVersion::TOP && !keystore.HaveCScript(CScriptID(CScript() << OP_0 << vSolutions[0]))) {\n+            // We do not support bare witness outputs unless the P2SH version of it would be\n+            // acceptable as well. This protects against matching before segwit activates.\n+            // This also applies to the P2WSH case.\n+            break;\n+        }\n+        ret = std::max(ret, IsMineInner(keystore, GetScriptForDestination(PKHash(uint160(vSolutions[0]))), IsMineSigVersion::WITNESS_V0));\n+        break;\n+    }\n+    case TX_PUBKEYHASH:\n+    {\n+        keyID = CKeyID(uint160(vSolutions[0]));\n+        CPubKey pubkey;\n+        if (keystore.GetPubKey(keyID, pubkey)) {\n+            if (!PermitsUncompressed(sigversion) && !pubkey.IsCompressed()) {\n+                return IsMineResult::INVALID;\n+            } else {\n+                ret = std::max(ret, IsMineResult::WATCH_ONLY);\n+            }\n+        }\n+        if (keystore.HaveKey(keyID)) {\n+            ret = std::max(ret, IsMineResult::SPENDABLE);\n+        }\n+        break;\n+    }\n+    case TX_SCRIPTHASH:\n+    {\n+        if (sigversion != IsMineSigVersion::TOP) {\n+            // P2SH inside P2WSH or P2SH is invalid.\n+            return IsMineResult::INVALID;\n+        }\n+        CScriptID scriptID = CScriptID(uint160(vSolutions[0]));\n+        CScript subscript;\n+        if (keystore.GetCScript(scriptID, subscript)) {\n+            ret = std::max(ret, IsMineInner(keystore, subscript, IsMineSigVersion::P2SH));\n+        }\n+        break;\n+    }\n+    case TX_WITNESS_V0_SCRIPTHASH:\n+    {\n+        if (sigversion == IsMineSigVersion::WITNESS_V0) {\n+            // P2WSH inside P2WSH is invalid.\n+            return IsMineResult::INVALID;\n+        }\n+        if (sigversion == IsMineSigVersion::TOP && !keystore.HaveCScript(CScriptID(CScript() << OP_0 << vSolutions[0]))) {\n+            break;\n+        }\n+        uint160 hash;\n+        CRIPEMD160().Write(&vSolutions[0][0], vSolutions[0].size()).Finalize(hash.begin());\n+        CScriptID scriptID = CScriptID(hash);\n+        CScript subscript;\n+        if (keystore.GetCScript(scriptID, subscript)) {\n+            ret = std::max(ret, IsMineInner(keystore, subscript, IsMineSigVersion::WITNESS_V0));\n+        }\n+        break;\n+    }\n+\n+    case TX_MULTISIG:\n+    {\n+        // Never treat bare multisig outputs as ours (they can still be made watchonly-though)\n+        if (sigversion == IsMineSigVersion::TOP) {\n+            break;\n+        }\n+\n+        // Only consider transactions \"mine\" if we own ALL the\n+        // keys involved. Multi-signature transactions that are\n+        // partially owned (somebody else has a key that can spend\n+        // them) enable spend-out-from-under-you attacks, especially\n+        // in shared-wallet situations.\n+        std::vector<valtype> keys(vSolutions.begin()+1, vSolutions.begin()+vSolutions.size()-1);\n+        if (!PermitsUncompressed(sigversion)) {\n+            for (size_t i = 0; i < keys.size(); i++) {\n+                if (keys[i].size() != 33) {\n+                    return IsMineResult::INVALID;\n+                }\n+            }\n+        }\n+        if (HaveKeys(keys, keystore)) {\n+            ret = std::max(ret, IsMineResult::SPENDABLE);\n+        }\n+        break;\n+    }\n+    }\n+\n+    if (ret == IsMineResult::NO && keystore.HaveWatchOnly(scriptPubKey)) {\n+        ret = std::max(ret, IsMineResult::WATCH_ONLY);\n+    }\n+    return ret;\n+}\n+\n+} // namespace\n+\n+isminetype LegacyScriptPubKeyMan::IsMine(const CScript& script) const\n+{\n+    switch (IsMineInner(*this, script, IsMineSigVersion::TOP)) {\n+    case IsMineResult::INVALID:\n+    case IsMineResult::NO:\n+        return ISMINE_NO;\n+    case IsMineResult::WATCH_ONLY:\n+        return ISMINE_WATCH_ONLY;\n+    case IsMineResult::SPENDABLE:\n+        return ISMINE_SPENDABLE;\n+    }\n+    assert(false);\n+}\n+\n+bool LegacyScriptPubKeyMan::HasEncryptedData() const\n+{\n+    LOCK(cs_KeyStore);\n+    return HasEncryptionKeys() || !mapCryptedKeys.empty();",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 211,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "0b66a22b854e39e109ac5a42a058e1f8ee51ba38",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Not asking for this change here since it could be a pain to backport, but in the future I think it'd be nicer if `HasEncryptedData` simply returned `!mapCryptedKeys.empty()` and `HasEncryptionKeys` simply returned `!mapMasterKeys.empty()` so the two functions would be independent and not call each other.\r\n\r\nAt call sites, I think it would be an improvement to write:\r\n\r\n```c++\r\nif (!m_storage.HasEncryptionKeys() && !HasEncryptedData())\r\n```\r\n\r\ninstead of\r\n\r\n```c++\r\nif (!HasEncryptedData())\r\n```\r\n\r\nbecause otherwise it's not clear that the presence of wallet encryption keys is a controlling factor (this is confusing in `AddKeyPubKeyInner` when you'd expect to be checking for the presense of keys to encypt new data with, not the presence of already encrypted data)",
      "created_at": "2019-10-03T17:54:28Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r331172037",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/331172037"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 212,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/331177535",
      "pull_request_review_id": 297038629,
      "id": 331177535,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMTE3NzUzNQ==",
      "diff_hunk": "@@ -0,0 +1,477 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+#define BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <wallet/crypter.h>\n+#include <wallet/ismine.h>\n+#include <wallet/walletdb.h>\n+#include <wallet/walletutil.h>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+enum class OutputType;\n+\n+// Wallet storage things that ScriptPubKeyMans need in order to be able to store things to the wallet database\n+class WalletStorage\n+{\n+public:\n+    virtual ~WalletStorage() = default;\n+    virtual const std::string GetDisplayName() const = 0;\n+    virtual std::shared_ptr<WalletDatabase> GetDatabase() = 0;\n+    virtual bool IsWalletFlagSet(uint64_t) const = 0;\n+    virtual void SetWalletFlag(uint64_t) = 0;\n+    virtual void UnsetWalletFlagWithDB(WalletBatch&, uint64_t) = 0;\n+    virtual bool CanSupportFeature(enum WalletFeature) const = 0;\n+    virtual void SetMinVersion(enum WalletFeature, WalletBatch* = nullptr, bool = false) = 0;\n+    virtual const CKeyingMaterial& GetEncryptionKey() const = 0;\n+    virtual bool HasEncryptionKeys() const = 0;\n+    virtual bool IsLocked() const = 0;\n+};\n+\n+//! Default for -keypool\n+static const unsigned int DEFAULT_KEYPOOL_SIZE = 1000;\n+\n+std::vector<CKeyID> GetAffectedKeys(const CScript& spk, const SigningProvider& provider);\n+\n+/** A key from a CWallet's keypool\n+ *\n+ * The wallet holds one (for pre HD-split wallets) or several keypools. These\n+ * are sets of keys that have not yet been used to provide addresses or receive\n+ * change.\n+ *\n+ * The Bitcoin Core wallet was originally a collection of unrelated private\n+ * keys with their associated addresses. If a non-HD wallet generated a\n+ * key/address, gave that address out and then restored a backup from before\n+ * that key's generation, then any funds sent to that address would be\n+ * lost definitively.\n+ *\n+ * The keypool was implemented to avoid this scenario (commit: 10384941). The\n+ * wallet would generate a set of keys (100 by default). When a new public key\n+ * was required, either to give out as an address or to use in a change output,\n+ * it would be drawn from the keypool. The keypool would then be topped up to\n+ * maintain 100 keys. This ensured that as long as the wallet hadn't used more\n+ * than 100 keys since the previous backup, all funds would be safe, since a\n+ * restored wallet would be able to scan for all owned addresses.\n+ *\n+ * A keypool also allowed encrypted wallets to give out addresses without\n+ * having to be decrypted to generate a new private key.\n+ *\n+ * With the introduction of HD wallets (commit: f1902510), the keypool\n+ * essentially became an address look-ahead pool. Restoring old backups can no\n+ * longer definitively lose funds as long as the addresses used were from the\n+ * wallet's HD seed (since all private keys can be rederived from the seed).\n+ * However, if many addresses were used since the backup, then the wallet may\n+ * not know how far ahead in the HD chain to look for its addresses. The\n+ * keypool is used to implement a 'gap limit'. The keypool maintains a set of\n+ * keys (by default 1000) ahead of the last used key and scans for the\n+ * addresses of those keys.  This avoids the risk of not seeing transactions\n+ * involving the wallet's addresses, or of re-using the same address.\n+ *\n+ * The HD-split wallet feature added a second keypool (commit: 02592f4c). There\n+ * is an external keypool (for addresses to hand out) and an internal keypool\n+ * (for change addresses).\n+ *\n+ * Keypool keys are stored in the wallet/keystore's keymap. The keypool data is\n+ * stored as sets of indexes in the wallet (setInternalKeyPool,\n+ * setExternalKeyPool and set_pre_split_keypool), and a map from the key to the\n+ * index (m_pool_key_to_index). The CKeyPool object is used to\n+ * serialize/deserialize the pool data to/from the database.\n+ */\n+class CKeyPool\n+{\n+public:\n+    //! The time at which the key was generated. Set in AddKeypoolPubKeyWithDB\n+    int64_t nTime;\n+    //! The public key\n+    CPubKey vchPubKey;\n+    //! Whether this keypool entry is in the internal keypool (for change outputs)\n+    bool fInternal;\n+    //! Whether this key was generated for a keypool before the wallet was upgraded to HD-split\n+    bool m_pre_split;\n+\n+    CKeyPool();\n+    CKeyPool(const CPubKey& vchPubKeyIn, bool internalIn);\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        int nVersion = s.GetVersion();\n+        if (!(s.GetType() & SER_GETHASH))\n+            READWRITE(nVersion);\n+        READWRITE(nTime);\n+        READWRITE(vchPubKey);\n+        if (ser_action.ForRead()) {\n+            try {\n+                READWRITE(fInternal);\n+            }\n+            catch (std::ios_base::failure&) {\n+                /* flag as external address if we can't read the internal boolean\n+                   (this will be the case for any wallet before the HD chain split version) */\n+                fInternal = false;\n+            }\n+            try {\n+                READWRITE(m_pre_split);\n+            }\n+            catch (std::ios_base::failure&) {\n+                /* flag as postsplit address if we can't read the m_pre_split boolean\n+                   (this will be the case for any wallet that upgrades to HD chain split)*/\n+                m_pre_split = false;\n+            }\n+        }\n+        else {\n+            READWRITE(fInternal);\n+            READWRITE(m_pre_split);\n+        }\n+    }\n+};\n+\n+/*\n+ * A class implementing ScriptPubKeyMan manages some (or all) scriptPubKeys used in a wallet.\n+ * It contains the scripts and keys related to the scriptPubKeys it manages.\n+ * A ScriptPubKeyMan will be able to give out scriptPubKeys to be used, as well as marking\n+ * when a scriptPubKey has been used. It also handles when and how to store a scriptPubKey\n+ * and it's related scripts and keys, including encryption.\n+ */\n+class ScriptPubKeyMan\n+{\n+private:\n+    WalletStorage& storage;",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": null,
      "original_position": 144,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "0b66a22b854e39e109ac5a42a058e1f8ee51ba38",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Should this be called `m_storage` instead of `storage`?  Also any particular reason this is private and not protected so keyman implementations could access the interface directly without having to go through an extra hop?",
      "created_at": "2019-10-03T18:06:04Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r331177535",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/331177535"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 144,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/331180197",
      "pull_request_review_id": 297038629,
      "id": 331180197,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMTE4MDE5Nw==",
      "diff_hunk": "@@ -0,0 +1,477 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+#define BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <wallet/crypter.h>\n+#include <wallet/ismine.h>\n+#include <wallet/walletdb.h>\n+#include <wallet/walletutil.h>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+enum class OutputType;\n+\n+// Wallet storage things that ScriptPubKeyMans need in order to be able to store things to the wallet database\n+class WalletStorage\n+{\n+public:\n+    virtual ~WalletStorage() = default;\n+    virtual const std::string GetDisplayName() const = 0;\n+    virtual std::shared_ptr<WalletDatabase> GetDatabase() = 0;\n+    virtual bool IsWalletFlagSet(uint64_t) const = 0;\n+    virtual void SetWalletFlag(uint64_t) = 0;\n+    virtual void UnsetWalletFlagWithDB(WalletBatch&, uint64_t) = 0;\n+    virtual bool CanSupportFeature(enum WalletFeature) const = 0;\n+    virtual void SetMinVersion(enum WalletFeature, WalletBatch* = nullptr, bool = false) = 0;\n+    virtual const CKeyingMaterial& GetEncryptionKey() const = 0;\n+    virtual bool HasEncryptionKeys() const = 0;\n+    virtual bool IsLocked() const = 0;\n+};\n+\n+//! Default for -keypool\n+static const unsigned int DEFAULT_KEYPOOL_SIZE = 1000;\n+\n+std::vector<CKeyID> GetAffectedKeys(const CScript& spk, const SigningProvider& provider);\n+\n+/** A key from a CWallet's keypool\n+ *\n+ * The wallet holds one (for pre HD-split wallets) or several keypools. These\n+ * are sets of keys that have not yet been used to provide addresses or receive\n+ * change.\n+ *\n+ * The Bitcoin Core wallet was originally a collection of unrelated private\n+ * keys with their associated addresses. If a non-HD wallet generated a\n+ * key/address, gave that address out and then restored a backup from before\n+ * that key's generation, then any funds sent to that address would be\n+ * lost definitively.\n+ *\n+ * The keypool was implemented to avoid this scenario (commit: 10384941). The\n+ * wallet would generate a set of keys (100 by default). When a new public key\n+ * was required, either to give out as an address or to use in a change output,\n+ * it would be drawn from the keypool. The keypool would then be topped up to\n+ * maintain 100 keys. This ensured that as long as the wallet hadn't used more\n+ * than 100 keys since the previous backup, all funds would be safe, since a\n+ * restored wallet would be able to scan for all owned addresses.\n+ *\n+ * A keypool also allowed encrypted wallets to give out addresses without\n+ * having to be decrypted to generate a new private key.\n+ *\n+ * With the introduction of HD wallets (commit: f1902510), the keypool\n+ * essentially became an address look-ahead pool. Restoring old backups can no\n+ * longer definitively lose funds as long as the addresses used were from the\n+ * wallet's HD seed (since all private keys can be rederived from the seed).\n+ * However, if many addresses were used since the backup, then the wallet may\n+ * not know how far ahead in the HD chain to look for its addresses. The\n+ * keypool is used to implement a 'gap limit'. The keypool maintains a set of\n+ * keys (by default 1000) ahead of the last used key and scans for the\n+ * addresses of those keys.  This avoids the risk of not seeing transactions\n+ * involving the wallet's addresses, or of re-using the same address.\n+ *\n+ * The HD-split wallet feature added a second keypool (commit: 02592f4c). There\n+ * is an external keypool (for addresses to hand out) and an internal keypool\n+ * (for change addresses).\n+ *\n+ * Keypool keys are stored in the wallet/keystore's keymap. The keypool data is\n+ * stored as sets of indexes in the wallet (setInternalKeyPool,\n+ * setExternalKeyPool and set_pre_split_keypool), and a map from the key to the\n+ * index (m_pool_key_to_index). The CKeyPool object is used to\n+ * serialize/deserialize the pool data to/from the database.\n+ */\n+class CKeyPool\n+{\n+public:\n+    //! The time at which the key was generated. Set in AddKeypoolPubKeyWithDB\n+    int64_t nTime;\n+    //! The public key\n+    CPubKey vchPubKey;\n+    //! Whether this keypool entry is in the internal keypool (for change outputs)\n+    bool fInternal;\n+    //! Whether this key was generated for a keypool before the wallet was upgraded to HD-split\n+    bool m_pre_split;\n+\n+    CKeyPool();\n+    CKeyPool(const CPubKey& vchPubKeyIn, bool internalIn);\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        int nVersion = s.GetVersion();\n+        if (!(s.GetType() & SER_GETHASH))\n+            READWRITE(nVersion);\n+        READWRITE(nTime);\n+        READWRITE(vchPubKey);\n+        if (ser_action.ForRead()) {\n+            try {\n+                READWRITE(fInternal);\n+            }\n+            catch (std::ios_base::failure&) {\n+                /* flag as external address if we can't read the internal boolean\n+                   (this will be the case for any wallet before the HD chain split version) */\n+                fInternal = false;\n+            }\n+            try {\n+                READWRITE(m_pre_split);\n+            }\n+            catch (std::ios_base::failure&) {\n+                /* flag as postsplit address if we can't read the m_pre_split boolean\n+                   (this will be the case for any wallet that upgrades to HD chain split)*/\n+                m_pre_split = false;\n+            }\n+        }\n+        else {\n+            READWRITE(fInternal);\n+            READWRITE(m_pre_split);\n+        }\n+    }\n+};\n+\n+/*\n+ * A class implementing ScriptPubKeyMan manages some (or all) scriptPubKeys used in a wallet.\n+ * It contains the scripts and keys related to the scriptPubKeys it manages.\n+ * A ScriptPubKeyMan will be able to give out scriptPubKeys to be used, as well as marking\n+ * when a scriptPubKey has been used. It also handles when and how to store a scriptPubKey\n+ * and it's related scripts and keys, including encryption.\n+ */\n+class ScriptPubKeyMan\n+{\n+private:\n+    WalletStorage& storage;\n+\n+protected:\n+    std::shared_ptr<WalletDatabase> m_database;\n+\n+public:\n+    ScriptPubKeyMan(WalletStorage& storage) : storage(storage), m_database(storage.GetDatabase()) {}\n+\n+    const std::string GetDisplayName() const { return storage.GetDisplayName(); }\n+    bool IsWalletFlagSet(uint64_t flag) const { return storage.IsWalletFlagSet(flag); }\n+    void SetWalletFlag(uint64_t flag) { return storage.SetWalletFlag(flag); }\n+    void UnsetWalletFlagWithDB(WalletBatch& batch, uint64_t flag) { return storage.UnsetWalletFlagWithDB(batch, flag); }\n+    bool CanSupportFeature(enum WalletFeature wf) const { return storage.CanSupportFeature(wf); }\n+    void SetMinVersion(enum WalletFeature wf) { return storage.SetMinVersion(wf); }\n+    const CKeyingMaterial& GetEncryptionKey() const { return storage.GetEncryptionKey(); }\n+    bool HasEncryptionKeys() const { return storage.HasEncryptionKeys(); }\n+    bool IsLocked() const { return storage.IsLocked(); }",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": null,
      "original_position": 160,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "0b66a22b854e39e109ac5a42a058e1f8ee51ba38",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Not asking for this change here since it could be a pain to backport, but in the future I think it'd be nicer to drop these wrapper functions and for keyman implementations to explicitly call storage methods, so the split between what data is managed by the top level wallet class and what data is managed by individual keyman implementations is clearer.",
      "created_at": "2019-10-03T18:12:07Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r331180197",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/331180197"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": 152,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 160,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/331185255",
      "pull_request_review_id": 297062952,
      "id": 331185255,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMTE4NTI1NQ==",
      "diff_hunk": "@@ -0,0 +1,1448 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <key_io.h>\n+#include <outputtype.h>\n+#include <script/descriptor.h>\n+#include <util/bip32.h>\n+#include <util/strencodings.h>\n+#include <util/translation.h>\n+#include <wallet/scriptpubkeyman.h>\n+\n+bool LegacyScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n+{\n+    error.clear();\n+    TopUpKeyPool();\n+\n+    // Generate a new key that is added to wallet\n+    CPubKey new_key;\n+    if (!GetKeyFromPool(new_key)) {\n+        error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+        return false;\n+    }\n+    LearnRelatedScripts(new_key, type);\n+    dest = GetDestinationForKey(new_key, type);\n+    return true;\n+}\n+\n+typedef std::vector<unsigned char> valtype;\n+\n+namespace {\n+\n+/**\n+ * This is an enum that tracks the execution context of a script, similar to\n+ * SigVersion in script/interpreter. It is separate however because we want to\n+ * distinguish between top-level scriptPubKey execution and P2SH redeemScript\n+ * execution (a distinction that has no impact on consensus rules).\n+ */\n+enum class IsMineSigVersion\n+{\n+    TOP = 0,        //!< scriptPubKey execution\n+    P2SH = 1,       //!< P2SH redeemScript\n+    WITNESS_V0 = 2, //!< P2WSH witness script execution\n+};\n+\n+/**\n+ * This is an internal representation of isminetype + invalidity.\n+ * Its order is significant, as we return the max of all explored\n+ * possibilities.\n+ */\n+enum class IsMineResult\n+{\n+    NO = 0,         //!< Not ours\n+    WATCH_ONLY = 1, //!< Included in watch-only balance\n+    SPENDABLE = 2,  //!< Included in all balances\n+    INVALID = 3,    //!< Not spendable by anyone (uncompressed pubkey in segwit, P2SH inside P2SH or witness, witness inside witness)\n+};\n+\n+bool PermitsUncompressed(IsMineSigVersion sigversion)\n+{\n+    return sigversion == IsMineSigVersion::TOP || sigversion == IsMineSigVersion::P2SH;\n+}\n+\n+bool HaveKeys(const std::vector<valtype>& pubkeys, const LegacyScriptPubKeyMan& keystore)\n+{\n+    for (const valtype& pubkey : pubkeys) {\n+        CKeyID keyID = CPubKey(pubkey).GetID();\n+        if (!keystore.HaveKey(keyID)) return false;\n+    }\n+    return true;\n+}\n+\n+IsMineResult IsMineInner(const LegacyScriptPubKeyMan& keystore, const CScript& scriptPubKey, IsMineSigVersion sigversion)\n+{\n+    IsMineResult ret = IsMineResult::NO;\n+\n+    std::vector<valtype> vSolutions;\n+    txnouttype whichType = Solver(scriptPubKey, vSolutions);\n+\n+    CKeyID keyID;\n+    switch (whichType)\n+    {\n+    case TX_NONSTANDARD:\n+    case TX_NULL_DATA:\n+    case TX_WITNESS_UNKNOWN:\n+        break;\n+    case TX_PUBKEY:\n+        keyID = CPubKey(vSolutions[0]).GetID();\n+        if (!PermitsUncompressed(sigversion) && vSolutions[0].size() != 33) {\n+            return IsMineResult::INVALID;\n+        }\n+        if (keystore.HaveKey(keyID)) {\n+            ret = std::max(ret, IsMineResult::SPENDABLE);\n+        }\n+        break;\n+    case TX_WITNESS_V0_KEYHASH:\n+    {\n+        if (sigversion == IsMineSigVersion::WITNESS_V0) {\n+            // P2WPKH inside P2WSH is invalid.\n+            return IsMineResult::INVALID;\n+        }\n+        if (sigversion == IsMineSigVersion::TOP && !keystore.HaveCScript(CScriptID(CScript() << OP_0 << vSolutions[0]))) {\n+            // We do not support bare witness outputs unless the P2SH version of it would be\n+            // acceptable as well. This protects against matching before segwit activates.\n+            // This also applies to the P2WSH case.\n+            break;\n+        }\n+        ret = std::max(ret, IsMineInner(keystore, GetScriptForDestination(PKHash(uint160(vSolutions[0]))), IsMineSigVersion::WITNESS_V0));\n+        break;\n+    }\n+    case TX_PUBKEYHASH:\n+    {\n+        keyID = CKeyID(uint160(vSolutions[0]));\n+        CPubKey pubkey;\n+        if (keystore.GetPubKey(keyID, pubkey)) {\n+            if (!PermitsUncompressed(sigversion) && !pubkey.IsCompressed()) {\n+                return IsMineResult::INVALID;\n+            } else {\n+                ret = std::max(ret, IsMineResult::WATCH_ONLY);\n+            }\n+        }\n+        if (keystore.HaveKey(keyID)) {\n+            ret = std::max(ret, IsMineResult::SPENDABLE);\n+        }\n+        break;\n+    }\n+    case TX_SCRIPTHASH:\n+    {\n+        if (sigversion != IsMineSigVersion::TOP) {\n+            // P2SH inside P2WSH or P2SH is invalid.\n+            return IsMineResult::INVALID;\n+        }\n+        CScriptID scriptID = CScriptID(uint160(vSolutions[0]));\n+        CScript subscript;\n+        if (keystore.GetCScript(scriptID, subscript)) {\n+            ret = std::max(ret, IsMineInner(keystore, subscript, IsMineSigVersion::P2SH));\n+        }\n+        break;\n+    }\n+    case TX_WITNESS_V0_SCRIPTHASH:\n+    {\n+        if (sigversion == IsMineSigVersion::WITNESS_V0) {\n+            // P2WSH inside P2WSH is invalid.\n+            return IsMineResult::INVALID;\n+        }\n+        if (sigversion == IsMineSigVersion::TOP && !keystore.HaveCScript(CScriptID(CScript() << OP_0 << vSolutions[0]))) {\n+            break;\n+        }\n+        uint160 hash;\n+        CRIPEMD160().Write(&vSolutions[0][0], vSolutions[0].size()).Finalize(hash.begin());\n+        CScriptID scriptID = CScriptID(hash);\n+        CScript subscript;\n+        if (keystore.GetCScript(scriptID, subscript)) {\n+            ret = std::max(ret, IsMineInner(keystore, subscript, IsMineSigVersion::WITNESS_V0));\n+        }\n+        break;\n+    }\n+\n+    case TX_MULTISIG:\n+    {\n+        // Never treat bare multisig outputs as ours (they can still be made watchonly-though)\n+        if (sigversion == IsMineSigVersion::TOP) {\n+            break;\n+        }\n+\n+        // Only consider transactions \"mine\" if we own ALL the\n+        // keys involved. Multi-signature transactions that are\n+        // partially owned (somebody else has a key that can spend\n+        // them) enable spend-out-from-under-you attacks, especially\n+        // in shared-wallet situations.\n+        std::vector<valtype> keys(vSolutions.begin()+1, vSolutions.begin()+vSolutions.size()-1);\n+        if (!PermitsUncompressed(sigversion)) {\n+            for (size_t i = 0; i < keys.size(); i++) {\n+                if (keys[i].size() != 33) {\n+                    return IsMineResult::INVALID;\n+                }\n+            }\n+        }\n+        if (HaveKeys(keys, keystore)) {\n+            ret = std::max(ret, IsMineResult::SPENDABLE);\n+        }\n+        break;\n+    }\n+    }\n+\n+    if (ret == IsMineResult::NO && keystore.HaveWatchOnly(scriptPubKey)) {\n+        ret = std::max(ret, IsMineResult::WATCH_ONLY);\n+    }\n+    return ret;\n+}\n+\n+} // namespace\n+\n+isminetype LegacyScriptPubKeyMan::IsMine(const CScript& script) const\n+{\n+    switch (IsMineInner(*this, script, IsMineSigVersion::TOP)) {\n+    case IsMineResult::INVALID:\n+    case IsMineResult::NO:\n+        return ISMINE_NO;\n+    case IsMineResult::WATCH_ONLY:\n+        return ISMINE_WATCH_ONLY;\n+    case IsMineResult::SPENDABLE:\n+        return ISMINE_SPENDABLE;\n+    }\n+    assert(false);\n+}\n+\n+bool LegacyScriptPubKeyMan::HasEncryptedData() const\n+{\n+    LOCK(cs_KeyStore);\n+    return HasEncryptionKeys() || !mapCryptedKeys.empty();\n+}\n+\n+bool LegacyScriptPubKeyMan::CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys)\n+{\n+    {\n+        LOCK(cs_KeyStore);\n+        if (!mapKeys.empty())\n+            return false;\n+\n+        bool keyPass = mapCryptedKeys.empty(); // Always pass when there are no encrypted keys\n+        bool keyFail = false;\n+        CryptedKeyMap::const_iterator mi = mapCryptedKeys.begin();\n+        for (; mi != mapCryptedKeys.end(); ++mi)\n+        {\n+            const CPubKey &vchPubKey = (*mi).second.first;\n+            const std::vector<unsigned char> &vchCryptedSecret = (*mi).second.second;\n+            CKey key;\n+            if (!DecryptKey(master_key, vchCryptedSecret, vchPubKey, key))\n+            {\n+                keyFail = true;\n+                break;\n+            }\n+            keyPass = true;\n+            if (fDecryptionThoroughlyChecked)\n+                break;\n+        }\n+        if (keyPass && keyFail)\n+        {\n+            LogPrintf(\"The wallet is probably corrupted: Some keys decrypt but not all.\\n\");\n+            throw std::runtime_error(\"Error unlocking wallet: some keys decrypt but not all. Your wallet file may be corrupt.\");\n+        }\n+        if (keyFail || (!keyPass && !accept_no_keys))\n+            return false;\n+        fDecryptionThoroughlyChecked = true;\n+    }\n+    return true;\n+}\n+\n+bool LegacyScriptPubKeyMan::Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch)\n+{\n+    LOCK(cs_KeyStore);\n+    encrypted_batch = batch;\n+    if (!mapCryptedKeys.empty()) {\n+        encrypted_batch = nullptr;\n+        return false;\n+    }\n+\n+    KeyMap keys_to_encrypt;\n+    keys_to_encrypt.swap(mapKeys); // Clear mapKeys so AddCryptedKeyInner will succeed.\n+    for (const KeyMap::value_type& mKey : keys_to_encrypt)\n+    {\n+        const CKey &key = mKey.second;\n+        CPubKey vchPubKey = key.GetPubKey();\n+        CKeyingMaterial vchSecret(key.begin(), key.end());\n+        std::vector<unsigned char> vchCryptedSecret;\n+        if (!EncryptSecret(master_key, vchSecret, vchPubKey.GetHash(), vchCryptedSecret)) {\n+            encrypted_batch = nullptr;\n+            return false;\n+        }\n+        if (!AddCryptedKey(vchPubKey, vchCryptedSecret)) {\n+            encrypted_batch = nullptr;\n+            return false;\n+        }\n+    }\n+    mapKeys.clear();",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 276,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "0b66a22b854e39e109ac5a42a058e1f8ee51ba38",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Should drop this clear. The map is already cleared above, so having this extra clear separated by a long loop seems confusing and maybe dangerous if the code is changed again in the future",
      "created_at": "2019-10-03T18:23:12Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r331185255",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/331185255"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 276,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/331189178",
      "pull_request_review_id": 297067887,
      "id": 331189178,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMTE4OTE3OA==",
      "diff_hunk": "@@ -0,0 +1,477 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+#define BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <wallet/crypter.h>\n+#include <wallet/ismine.h>\n+#include <wallet/walletdb.h>\n+#include <wallet/walletutil.h>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+enum class OutputType;\n+\n+// Wallet storage things that ScriptPubKeyMans need in order to be able to store things to the wallet database\n+class WalletStorage\n+{\n+public:\n+    virtual ~WalletStorage() = default;\n+    virtual const std::string GetDisplayName() const = 0;\n+    virtual std::shared_ptr<WalletDatabase> GetDatabase() = 0;\n+    virtual bool IsWalletFlagSet(uint64_t) const = 0;\n+    virtual void SetWalletFlag(uint64_t) = 0;\n+    virtual void UnsetWalletFlagWithDB(WalletBatch&, uint64_t) = 0;\n+    virtual bool CanSupportFeature(enum WalletFeature) const = 0;\n+    virtual void SetMinVersion(enum WalletFeature, WalletBatch* = nullptr, bool = false) = 0;\n+    virtual const CKeyingMaterial& GetEncryptionKey() const = 0;\n+    virtual bool HasEncryptionKeys() const = 0;\n+    virtual bool IsLocked() const = 0;\n+};\n+\n+//! Default for -keypool\n+static const unsigned int DEFAULT_KEYPOOL_SIZE = 1000;\n+\n+std::vector<CKeyID> GetAffectedKeys(const CScript& spk, const SigningProvider& provider);\n+\n+/** A key from a CWallet's keypool\n+ *\n+ * The wallet holds one (for pre HD-split wallets) or several keypools. These\n+ * are sets of keys that have not yet been used to provide addresses or receive\n+ * change.\n+ *\n+ * The Bitcoin Core wallet was originally a collection of unrelated private\n+ * keys with their associated addresses. If a non-HD wallet generated a\n+ * key/address, gave that address out and then restored a backup from before\n+ * that key's generation, then any funds sent to that address would be\n+ * lost definitively.\n+ *\n+ * The keypool was implemented to avoid this scenario (commit: 10384941). The\n+ * wallet would generate a set of keys (100 by default). When a new public key\n+ * was required, either to give out as an address or to use in a change output,\n+ * it would be drawn from the keypool. The keypool would then be topped up to\n+ * maintain 100 keys. This ensured that as long as the wallet hadn't used more\n+ * than 100 keys since the previous backup, all funds would be safe, since a\n+ * restored wallet would be able to scan for all owned addresses.\n+ *\n+ * A keypool also allowed encrypted wallets to give out addresses without\n+ * having to be decrypted to generate a new private key.\n+ *\n+ * With the introduction of HD wallets (commit: f1902510), the keypool\n+ * essentially became an address look-ahead pool. Restoring old backups can no\n+ * longer definitively lose funds as long as the addresses used were from the\n+ * wallet's HD seed (since all private keys can be rederived from the seed).\n+ * However, if many addresses were used since the backup, then the wallet may\n+ * not know how far ahead in the HD chain to look for its addresses. The\n+ * keypool is used to implement a 'gap limit'. The keypool maintains a set of\n+ * keys (by default 1000) ahead of the last used key and scans for the\n+ * addresses of those keys.  This avoids the risk of not seeing transactions\n+ * involving the wallet's addresses, or of re-using the same address.\n+ *\n+ * The HD-split wallet feature added a second keypool (commit: 02592f4c). There\n+ * is an external keypool (for addresses to hand out) and an internal keypool\n+ * (for change addresses).\n+ *\n+ * Keypool keys are stored in the wallet/keystore's keymap. The keypool data is\n+ * stored as sets of indexes in the wallet (setInternalKeyPool,\n+ * setExternalKeyPool and set_pre_split_keypool), and a map from the key to the\n+ * index (m_pool_key_to_index). The CKeyPool object is used to\n+ * serialize/deserialize the pool data to/from the database.\n+ */\n+class CKeyPool\n+{\n+public:\n+    //! The time at which the key was generated. Set in AddKeypoolPubKeyWithDB\n+    int64_t nTime;\n+    //! The public key\n+    CPubKey vchPubKey;\n+    //! Whether this keypool entry is in the internal keypool (for change outputs)\n+    bool fInternal;\n+    //! Whether this key was generated for a keypool before the wallet was upgraded to HD-split\n+    bool m_pre_split;\n+\n+    CKeyPool();\n+    CKeyPool(const CPubKey& vchPubKeyIn, bool internalIn);\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        int nVersion = s.GetVersion();\n+        if (!(s.GetType() & SER_GETHASH))\n+            READWRITE(nVersion);\n+        READWRITE(nTime);\n+        READWRITE(vchPubKey);\n+        if (ser_action.ForRead()) {\n+            try {\n+                READWRITE(fInternal);\n+            }\n+            catch (std::ios_base::failure&) {\n+                /* flag as external address if we can't read the internal boolean\n+                   (this will be the case for any wallet before the HD chain split version) */\n+                fInternal = false;\n+            }\n+            try {\n+                READWRITE(m_pre_split);\n+            }\n+            catch (std::ios_base::failure&) {\n+                /* flag as postsplit address if we can't read the m_pre_split boolean\n+                   (this will be the case for any wallet that upgrades to HD chain split)*/\n+                m_pre_split = false;\n+            }\n+        }\n+        else {\n+            READWRITE(fInternal);\n+            READWRITE(m_pre_split);\n+        }\n+    }\n+};\n+\n+/*\n+ * A class implementing ScriptPubKeyMan manages some (or all) scriptPubKeys used in a wallet.\n+ * It contains the scripts and keys related to the scriptPubKeys it manages.\n+ * A ScriptPubKeyMan will be able to give out scriptPubKeys to be used, as well as marking\n+ * when a scriptPubKey has been used. It also handles when and how to store a scriptPubKey\n+ * and it's related scripts and keys, including encryption.\n+ */\n+class ScriptPubKeyMan\n+{\n+private:\n+    WalletStorage& storage;\n+\n+protected:\n+    std::shared_ptr<WalletDatabase> m_database;\n+\n+public:\n+    ScriptPubKeyMan(WalletStorage& storage) : storage(storage), m_database(storage.GetDatabase()) {}\n+\n+    const std::string GetDisplayName() const { return storage.GetDisplayName(); }\n+    bool IsWalletFlagSet(uint64_t flag) const { return storage.IsWalletFlagSet(flag); }\n+    void SetWalletFlag(uint64_t flag) { return storage.SetWalletFlag(flag); }\n+    void UnsetWalletFlagWithDB(WalletBatch& batch, uint64_t flag) { return storage.UnsetWalletFlagWithDB(batch, flag); }\n+    bool CanSupportFeature(enum WalletFeature wf) const { return storage.CanSupportFeature(wf); }\n+    void SetMinVersion(enum WalletFeature wf) { return storage.SetMinVersion(wf); }\n+    const CKeyingMaterial& GetEncryptionKey() const { return storage.GetEncryptionKey(); }\n+    bool HasEncryptionKeys() const { return storage.HasEncryptionKeys(); }\n+    bool IsLocked() const { return storage.IsLocked(); }",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": null,
      "original_position": 160,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "0b66a22b854e39e109ac5a42a058e1f8ee51ba38",
      "in_reply_to_id": 331180197,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Sure. I used the wrappers so that moved code wouldn't need to change.",
      "created_at": "2019-10-03T18:31:54Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r331189178",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/331189178"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": 152,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 160,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/331200677",
      "pull_request_review_id": 297082772,
      "id": 331200677,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMTIwMDY3Nw==",
      "diff_hunk": "@@ -0,0 +1,1448 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <key_io.h>\n+#include <outputtype.h>\n+#include <script/descriptor.h>\n+#include <util/bip32.h>\n+#include <util/strencodings.h>\n+#include <util/translation.h>\n+#include <wallet/scriptpubkeyman.h>\n+\n+bool LegacyScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n+{\n+    error.clear();\n+    TopUpKeyPool();\n+\n+    // Generate a new key that is added to wallet\n+    CPubKey new_key;\n+    if (!GetKeyFromPool(new_key)) {\n+        error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+        return false;\n+    }\n+    LearnRelatedScripts(new_key, type);\n+    dest = GetDestinationForKey(new_key, type);\n+    return true;\n+}\n+\n+typedef std::vector<unsigned char> valtype;\n+\n+namespace {\n+\n+/**\n+ * This is an enum that tracks the execution context of a script, similar to\n+ * SigVersion in script/interpreter. It is separate however because we want to\n+ * distinguish between top-level scriptPubKey execution and P2SH redeemScript\n+ * execution (a distinction that has no impact on consensus rules).\n+ */\n+enum class IsMineSigVersion\n+{\n+    TOP = 0,        //!< scriptPubKey execution\n+    P2SH = 1,       //!< P2SH redeemScript\n+    WITNESS_V0 = 2, //!< P2WSH witness script execution\n+};\n+\n+/**\n+ * This is an internal representation of isminetype + invalidity.\n+ * Its order is significant, as we return the max of all explored\n+ * possibilities.\n+ */\n+enum class IsMineResult\n+{\n+    NO = 0,         //!< Not ours\n+    WATCH_ONLY = 1, //!< Included in watch-only balance\n+    SPENDABLE = 2,  //!< Included in all balances\n+    INVALID = 3,    //!< Not spendable by anyone (uncompressed pubkey in segwit, P2SH inside P2SH or witness, witness inside witness)\n+};\n+\n+bool PermitsUncompressed(IsMineSigVersion sigversion)\n+{\n+    return sigversion == IsMineSigVersion::TOP || sigversion == IsMineSigVersion::P2SH;\n+}\n+\n+bool HaveKeys(const std::vector<valtype>& pubkeys, const LegacyScriptPubKeyMan& keystore)\n+{\n+    for (const valtype& pubkey : pubkeys) {\n+        CKeyID keyID = CPubKey(pubkey).GetID();\n+        if (!keystore.HaveKey(keyID)) return false;\n+    }\n+    return true;\n+}\n+\n+IsMineResult IsMineInner(const LegacyScriptPubKeyMan& keystore, const CScript& scriptPubKey, IsMineSigVersion sigversion)\n+{\n+    IsMineResult ret = IsMineResult::NO;\n+\n+    std::vector<valtype> vSolutions;\n+    txnouttype whichType = Solver(scriptPubKey, vSolutions);\n+\n+    CKeyID keyID;\n+    switch (whichType)\n+    {\n+    case TX_NONSTANDARD:\n+    case TX_NULL_DATA:\n+    case TX_WITNESS_UNKNOWN:\n+        break;\n+    case TX_PUBKEY:\n+        keyID = CPubKey(vSolutions[0]).GetID();\n+        if (!PermitsUncompressed(sigversion) && vSolutions[0].size() != 33) {\n+            return IsMineResult::INVALID;\n+        }\n+        if (keystore.HaveKey(keyID)) {\n+            ret = std::max(ret, IsMineResult::SPENDABLE);\n+        }\n+        break;\n+    case TX_WITNESS_V0_KEYHASH:\n+    {\n+        if (sigversion == IsMineSigVersion::WITNESS_V0) {\n+            // P2WPKH inside P2WSH is invalid.\n+            return IsMineResult::INVALID;\n+        }\n+        if (sigversion == IsMineSigVersion::TOP && !keystore.HaveCScript(CScriptID(CScript() << OP_0 << vSolutions[0]))) {\n+            // We do not support bare witness outputs unless the P2SH version of it would be\n+            // acceptable as well. This protects against matching before segwit activates.\n+            // This also applies to the P2WSH case.\n+            break;\n+        }\n+        ret = std::max(ret, IsMineInner(keystore, GetScriptForDestination(PKHash(uint160(vSolutions[0]))), IsMineSigVersion::WITNESS_V0));\n+        break;\n+    }\n+    case TX_PUBKEYHASH:\n+    {\n+        keyID = CKeyID(uint160(vSolutions[0]));\n+        CPubKey pubkey;\n+        if (keystore.GetPubKey(keyID, pubkey)) {\n+            if (!PermitsUncompressed(sigversion) && !pubkey.IsCompressed()) {\n+                return IsMineResult::INVALID;\n+            } else {\n+                ret = std::max(ret, IsMineResult::WATCH_ONLY);\n+            }\n+        }\n+        if (keystore.HaveKey(keyID)) {\n+            ret = std::max(ret, IsMineResult::SPENDABLE);\n+        }\n+        break;\n+    }\n+    case TX_SCRIPTHASH:\n+    {\n+        if (sigversion != IsMineSigVersion::TOP) {\n+            // P2SH inside P2WSH or P2SH is invalid.\n+            return IsMineResult::INVALID;\n+        }\n+        CScriptID scriptID = CScriptID(uint160(vSolutions[0]));\n+        CScript subscript;\n+        if (keystore.GetCScript(scriptID, subscript)) {\n+            ret = std::max(ret, IsMineInner(keystore, subscript, IsMineSigVersion::P2SH));\n+        }\n+        break;\n+    }\n+    case TX_WITNESS_V0_SCRIPTHASH:\n+    {\n+        if (sigversion == IsMineSigVersion::WITNESS_V0) {\n+            // P2WSH inside P2WSH is invalid.\n+            return IsMineResult::INVALID;\n+        }\n+        if (sigversion == IsMineSigVersion::TOP && !keystore.HaveCScript(CScriptID(CScript() << OP_0 << vSolutions[0]))) {\n+            break;\n+        }\n+        uint160 hash;\n+        CRIPEMD160().Write(&vSolutions[0][0], vSolutions[0].size()).Finalize(hash.begin());\n+        CScriptID scriptID = CScriptID(hash);\n+        CScript subscript;\n+        if (keystore.GetCScript(scriptID, subscript)) {\n+            ret = std::max(ret, IsMineInner(keystore, subscript, IsMineSigVersion::WITNESS_V0));\n+        }\n+        break;\n+    }\n+\n+    case TX_MULTISIG:\n+    {\n+        // Never treat bare multisig outputs as ours (they can still be made watchonly-though)\n+        if (sigversion == IsMineSigVersion::TOP) {\n+            break;\n+        }\n+\n+        // Only consider transactions \"mine\" if we own ALL the\n+        // keys involved. Multi-signature transactions that are\n+        // partially owned (somebody else has a key that can spend\n+        // them) enable spend-out-from-under-you attacks, especially\n+        // in shared-wallet situations.\n+        std::vector<valtype> keys(vSolutions.begin()+1, vSolutions.begin()+vSolutions.size()-1);\n+        if (!PermitsUncompressed(sigversion)) {\n+            for (size_t i = 0; i < keys.size(); i++) {\n+                if (keys[i].size() != 33) {\n+                    return IsMineResult::INVALID;\n+                }\n+            }\n+        }\n+        if (HaveKeys(keys, keystore)) {\n+            ret = std::max(ret, IsMineResult::SPENDABLE);\n+        }\n+        break;\n+    }\n+    }\n+\n+    if (ret == IsMineResult::NO && keystore.HaveWatchOnly(scriptPubKey)) {\n+        ret = std::max(ret, IsMineResult::WATCH_ONLY);\n+    }\n+    return ret;\n+}\n+\n+} // namespace\n+\n+isminetype LegacyScriptPubKeyMan::IsMine(const CScript& script) const\n+{\n+    switch (IsMineInner(*this, script, IsMineSigVersion::TOP)) {\n+    case IsMineResult::INVALID:\n+    case IsMineResult::NO:\n+        return ISMINE_NO;\n+    case IsMineResult::WATCH_ONLY:\n+        return ISMINE_WATCH_ONLY;\n+    case IsMineResult::SPENDABLE:\n+        return ISMINE_SPENDABLE;\n+    }\n+    assert(false);\n+}\n+\n+bool LegacyScriptPubKeyMan::HasEncryptedData() const\n+{\n+    LOCK(cs_KeyStore);\n+    return HasEncryptionKeys() || !mapCryptedKeys.empty();\n+}\n+\n+bool LegacyScriptPubKeyMan::CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys)\n+{\n+    {\n+        LOCK(cs_KeyStore);\n+        if (!mapKeys.empty())\n+            return false;\n+\n+        bool keyPass = mapCryptedKeys.empty(); // Always pass when there are no encrypted keys\n+        bool keyFail = false;\n+        CryptedKeyMap::const_iterator mi = mapCryptedKeys.begin();\n+        for (; mi != mapCryptedKeys.end(); ++mi)\n+        {\n+            const CPubKey &vchPubKey = (*mi).second.first;\n+            const std::vector<unsigned char> &vchCryptedSecret = (*mi).second.second;\n+            CKey key;\n+            if (!DecryptKey(master_key, vchCryptedSecret, vchPubKey, key))\n+            {\n+                keyFail = true;\n+                break;\n+            }\n+            keyPass = true;\n+            if (fDecryptionThoroughlyChecked)\n+                break;\n+        }\n+        if (keyPass && keyFail)\n+        {\n+            LogPrintf(\"The wallet is probably corrupted: Some keys decrypt but not all.\\n\");\n+            throw std::runtime_error(\"Error unlocking wallet: some keys decrypt but not all. Your wallet file may be corrupt.\");\n+        }\n+        if (keyFail || (!keyPass && !accept_no_keys))\n+            return false;\n+        fDecryptionThoroughlyChecked = true;\n+    }\n+    return true;\n+}\n+\n+bool LegacyScriptPubKeyMan::Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch)\n+{\n+    LOCK(cs_KeyStore);\n+    encrypted_batch = batch;\n+    if (!mapCryptedKeys.empty()) {\n+        encrypted_batch = nullptr;\n+        return false;\n+    }\n+\n+    KeyMap keys_to_encrypt;\n+    keys_to_encrypt.swap(mapKeys); // Clear mapKeys so AddCryptedKeyInner will succeed.\n+    for (const KeyMap::value_type& mKey : keys_to_encrypt)\n+    {\n+        const CKey &key = mKey.second;\n+        CPubKey vchPubKey = key.GetPubKey();\n+        CKeyingMaterial vchSecret(key.begin(), key.end());\n+        std::vector<unsigned char> vchCryptedSecret;\n+        if (!EncryptSecret(master_key, vchSecret, vchPubKey.GetHash(), vchCryptedSecret)) {\n+            encrypted_batch = nullptr;\n+            return false;\n+        }\n+        if (!AddCryptedKey(vchPubKey, vchCryptedSecret)) {\n+            encrypted_batch = nullptr;\n+            return false;\n+        }\n+    }\n+    mapKeys.clear();\n+    encrypted_batch = nullptr;\n+    return true;\n+}\n+\n+bool LegacyScriptPubKeyMan::GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool)\n+{\n+    if (!CanGetAddresses(internal)) {\n+        return false;\n+    }\n+\n+    {\n+        LOCK(cs_KeyStore);\n+        if (!ReserveKeyFromKeyPool(index, keypool, internal) && !IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 289,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "0b66a22b854e39e109ac5a42a058e1f8ee51ba38",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why is `&& !IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)` added here? This seems broken because why would you want to return true from GetReserved if reserving a key failed? But it also seems like it should not be able to make any difference because the CanGetAddresses call above would return false if private keys were disabled.\r\n\r\nI'd suggest either dropping this condition or adding an explanatory comment. Tests do seem to pass if this is dropped.\r\n\r\nAlso, I'm not sure if the CanGetAddresses check added above is more than just a sanity check, but if it is actually an expected condition, it'd be useful to have a comment saying when it's expected to trigger. It seems like a fine check, but it's not clear what the motivation was for adding it. Tests do seem to pass without it.",
      "created_at": "2019-10-03T18:58:00Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r331200677",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/331200677"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 288,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/331202436",
      "pull_request_review_id": 297085024,
      "id": 331202436,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMTIwMjQzNg==",
      "diff_hunk": "@@ -4719,62 +3990,32 @@ std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outpu\n     return groups;\n }\n \n-bool CWallet::GetKeyOrigin(const CKeyID& keyID, KeyOriginInfo& info) const\n+bool CWallet::IsCrypted() const\n {\n-    CKeyMetadata meta;\n-    {\n-        LOCK(cs_wallet);\n-        auto it = mapKeyMetadata.find(keyID);\n-        if (it != mapKeyMetadata.end()) {\n-            meta = it->second;\n+    for (const auto& entry : m_spk_managers) {",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 1475,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "0b66a22b854e39e109ac5a42a058e1f8ee51ba38",
      "in_reply_to_id": 331166476,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2019-10-03T19:02:12Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r331202436",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/331202436"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4000,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/331202538",
      "pull_request_review_id": 297085145,
      "id": 331202538,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMTIwMjUzOA==",
      "diff_hunk": "@@ -0,0 +1,477 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+#define BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <wallet/crypter.h>\n+#include <wallet/ismine.h>\n+#include <wallet/walletdb.h>\n+#include <wallet/walletutil.h>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+enum class OutputType;\n+\n+// Wallet storage things that ScriptPubKeyMans need in order to be able to store things to the wallet database\n+class WalletStorage\n+{\n+public:\n+    virtual ~WalletStorage() = default;\n+    virtual const std::string GetDisplayName() const = 0;\n+    virtual std::shared_ptr<WalletDatabase> GetDatabase() = 0;\n+    virtual bool IsWalletFlagSet(uint64_t) const = 0;\n+    virtual void SetWalletFlag(uint64_t) = 0;\n+    virtual void UnsetWalletFlagWithDB(WalletBatch&, uint64_t) = 0;\n+    virtual bool CanSupportFeature(enum WalletFeature) const = 0;\n+    virtual void SetMinVersion(enum WalletFeature, WalletBatch* = nullptr, bool = false) = 0;\n+    virtual const CKeyingMaterial& GetEncryptionKey() const = 0;\n+    virtual bool HasEncryptionKeys() const = 0;\n+    virtual bool IsLocked() const = 0;\n+};\n+\n+//! Default for -keypool\n+static const unsigned int DEFAULT_KEYPOOL_SIZE = 1000;\n+\n+std::vector<CKeyID> GetAffectedKeys(const CScript& spk, const SigningProvider& provider);\n+\n+/** A key from a CWallet's keypool\n+ *\n+ * The wallet holds one (for pre HD-split wallets) or several keypools. These\n+ * are sets of keys that have not yet been used to provide addresses or receive\n+ * change.\n+ *\n+ * The Bitcoin Core wallet was originally a collection of unrelated private\n+ * keys with their associated addresses. If a non-HD wallet generated a\n+ * key/address, gave that address out and then restored a backup from before\n+ * that key's generation, then any funds sent to that address would be\n+ * lost definitively.\n+ *\n+ * The keypool was implemented to avoid this scenario (commit: 10384941). The\n+ * wallet would generate a set of keys (100 by default). When a new public key\n+ * was required, either to give out as an address or to use in a change output,\n+ * it would be drawn from the keypool. The keypool would then be topped up to\n+ * maintain 100 keys. This ensured that as long as the wallet hadn't used more\n+ * than 100 keys since the previous backup, all funds would be safe, since a\n+ * restored wallet would be able to scan for all owned addresses.\n+ *\n+ * A keypool also allowed encrypted wallets to give out addresses without\n+ * having to be decrypted to generate a new private key.\n+ *\n+ * With the introduction of HD wallets (commit: f1902510), the keypool\n+ * essentially became an address look-ahead pool. Restoring old backups can no\n+ * longer definitively lose funds as long as the addresses used were from the\n+ * wallet's HD seed (since all private keys can be rederived from the seed).\n+ * However, if many addresses were used since the backup, then the wallet may\n+ * not know how far ahead in the HD chain to look for its addresses. The\n+ * keypool is used to implement a 'gap limit'. The keypool maintains a set of\n+ * keys (by default 1000) ahead of the last used key and scans for the\n+ * addresses of those keys.  This avoids the risk of not seeing transactions\n+ * involving the wallet's addresses, or of re-using the same address.\n+ *\n+ * The HD-split wallet feature added a second keypool (commit: 02592f4c). There\n+ * is an external keypool (for addresses to hand out) and an internal keypool\n+ * (for change addresses).\n+ *\n+ * Keypool keys are stored in the wallet/keystore's keymap. The keypool data is\n+ * stored as sets of indexes in the wallet (setInternalKeyPool,\n+ * setExternalKeyPool and set_pre_split_keypool), and a map from the key to the\n+ * index (m_pool_key_to_index). The CKeyPool object is used to\n+ * serialize/deserialize the pool data to/from the database.\n+ */\n+class CKeyPool\n+{\n+public:\n+    //! The time at which the key was generated. Set in AddKeypoolPubKeyWithDB\n+    int64_t nTime;\n+    //! The public key\n+    CPubKey vchPubKey;\n+    //! Whether this keypool entry is in the internal keypool (for change outputs)\n+    bool fInternal;\n+    //! Whether this key was generated for a keypool before the wallet was upgraded to HD-split\n+    bool m_pre_split;\n+\n+    CKeyPool();\n+    CKeyPool(const CPubKey& vchPubKeyIn, bool internalIn);\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        int nVersion = s.GetVersion();\n+        if (!(s.GetType() & SER_GETHASH))\n+            READWRITE(nVersion);\n+        READWRITE(nTime);\n+        READWRITE(vchPubKey);\n+        if (ser_action.ForRead()) {\n+            try {\n+                READWRITE(fInternal);\n+            }\n+            catch (std::ios_base::failure&) {\n+                /* flag as external address if we can't read the internal boolean\n+                   (this will be the case for any wallet before the HD chain split version) */\n+                fInternal = false;\n+            }\n+            try {\n+                READWRITE(m_pre_split);\n+            }\n+            catch (std::ios_base::failure&) {\n+                /* flag as postsplit address if we can't read the m_pre_split boolean\n+                   (this will be the case for any wallet that upgrades to HD chain split)*/\n+                m_pre_split = false;\n+            }\n+        }\n+        else {\n+            READWRITE(fInternal);\n+            READWRITE(m_pre_split);\n+        }\n+    }\n+};\n+\n+/*\n+ * A class implementing ScriptPubKeyMan manages some (or all) scriptPubKeys used in a wallet.\n+ * It contains the scripts and keys related to the scriptPubKeys it manages.\n+ * A ScriptPubKeyMan will be able to give out scriptPubKeys to be used, as well as marking\n+ * when a scriptPubKey has been used. It also handles when and how to store a scriptPubKey\n+ * and it's related scripts and keys, including encryption.\n+ */\n+class ScriptPubKeyMan\n+{\n+private:\n+    WalletStorage& storage;",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": null,
      "original_position": 144,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "0b66a22b854e39e109ac5a42a058e1f8ee51ba38",
      "in_reply_to_id": 331177535,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Changed to `m_storage` and made protected.",
      "created_at": "2019-10-03T19:02:26Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r331202538",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/331202538"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 144,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/331202617",
      "pull_request_review_id": 297085256,
      "id": 331202617,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMTIwMjYxNw==",
      "diff_hunk": "@@ -0,0 +1,1448 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <key_io.h>\n+#include <outputtype.h>\n+#include <script/descriptor.h>\n+#include <util/bip32.h>\n+#include <util/strencodings.h>\n+#include <util/translation.h>\n+#include <wallet/scriptpubkeyman.h>\n+\n+bool LegacyScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n+{\n+    error.clear();\n+    TopUpKeyPool();\n+\n+    // Generate a new key that is added to wallet\n+    CPubKey new_key;\n+    if (!GetKeyFromPool(new_key)) {\n+        error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+        return false;\n+    }\n+    LearnRelatedScripts(new_key, type);\n+    dest = GetDestinationForKey(new_key, type);\n+    return true;\n+}\n+\n+typedef std::vector<unsigned char> valtype;\n+\n+namespace {\n+\n+/**\n+ * This is an enum that tracks the execution context of a script, similar to\n+ * SigVersion in script/interpreter. It is separate however because we want to\n+ * distinguish between top-level scriptPubKey execution and P2SH redeemScript\n+ * execution (a distinction that has no impact on consensus rules).\n+ */\n+enum class IsMineSigVersion\n+{\n+    TOP = 0,        //!< scriptPubKey execution\n+    P2SH = 1,       //!< P2SH redeemScript\n+    WITNESS_V0 = 2, //!< P2WSH witness script execution\n+};\n+\n+/**\n+ * This is an internal representation of isminetype + invalidity.\n+ * Its order is significant, as we return the max of all explored\n+ * possibilities.\n+ */\n+enum class IsMineResult\n+{\n+    NO = 0,         //!< Not ours\n+    WATCH_ONLY = 1, //!< Included in watch-only balance\n+    SPENDABLE = 2,  //!< Included in all balances\n+    INVALID = 3,    //!< Not spendable by anyone (uncompressed pubkey in segwit, P2SH inside P2SH or witness, witness inside witness)\n+};\n+\n+bool PermitsUncompressed(IsMineSigVersion sigversion)\n+{\n+    return sigversion == IsMineSigVersion::TOP || sigversion == IsMineSigVersion::P2SH;\n+}\n+\n+bool HaveKeys(const std::vector<valtype>& pubkeys, const LegacyScriptPubKeyMan& keystore)\n+{\n+    for (const valtype& pubkey : pubkeys) {\n+        CKeyID keyID = CPubKey(pubkey).GetID();\n+        if (!keystore.HaveKey(keyID)) return false;\n+    }\n+    return true;\n+}\n+\n+IsMineResult IsMineInner(const LegacyScriptPubKeyMan& keystore, const CScript& scriptPubKey, IsMineSigVersion sigversion)\n+{\n+    IsMineResult ret = IsMineResult::NO;\n+\n+    std::vector<valtype> vSolutions;\n+    txnouttype whichType = Solver(scriptPubKey, vSolutions);\n+\n+    CKeyID keyID;\n+    switch (whichType)\n+    {\n+    case TX_NONSTANDARD:\n+    case TX_NULL_DATA:\n+    case TX_WITNESS_UNKNOWN:\n+        break;\n+    case TX_PUBKEY:\n+        keyID = CPubKey(vSolutions[0]).GetID();\n+        if (!PermitsUncompressed(sigversion) && vSolutions[0].size() != 33) {\n+            return IsMineResult::INVALID;\n+        }\n+        if (keystore.HaveKey(keyID)) {\n+            ret = std::max(ret, IsMineResult::SPENDABLE);\n+        }\n+        break;\n+    case TX_WITNESS_V0_KEYHASH:\n+    {\n+        if (sigversion == IsMineSigVersion::WITNESS_V0) {\n+            // P2WPKH inside P2WSH is invalid.\n+            return IsMineResult::INVALID;\n+        }\n+        if (sigversion == IsMineSigVersion::TOP && !keystore.HaveCScript(CScriptID(CScript() << OP_0 << vSolutions[0]))) {\n+            // We do not support bare witness outputs unless the P2SH version of it would be\n+            // acceptable as well. This protects against matching before segwit activates.\n+            // This also applies to the P2WSH case.\n+            break;\n+        }\n+        ret = std::max(ret, IsMineInner(keystore, GetScriptForDestination(PKHash(uint160(vSolutions[0]))), IsMineSigVersion::WITNESS_V0));\n+        break;\n+    }\n+    case TX_PUBKEYHASH:\n+    {\n+        keyID = CKeyID(uint160(vSolutions[0]));\n+        CPubKey pubkey;\n+        if (keystore.GetPubKey(keyID, pubkey)) {\n+            if (!PermitsUncompressed(sigversion) && !pubkey.IsCompressed()) {\n+                return IsMineResult::INVALID;\n+            } else {\n+                ret = std::max(ret, IsMineResult::WATCH_ONLY);\n+            }\n+        }\n+        if (keystore.HaveKey(keyID)) {\n+            ret = std::max(ret, IsMineResult::SPENDABLE);\n+        }\n+        break;\n+    }\n+    case TX_SCRIPTHASH:\n+    {\n+        if (sigversion != IsMineSigVersion::TOP) {\n+            // P2SH inside P2WSH or P2SH is invalid.\n+            return IsMineResult::INVALID;\n+        }\n+        CScriptID scriptID = CScriptID(uint160(vSolutions[0]));\n+        CScript subscript;\n+        if (keystore.GetCScript(scriptID, subscript)) {\n+            ret = std::max(ret, IsMineInner(keystore, subscript, IsMineSigVersion::P2SH));\n+        }\n+        break;\n+    }\n+    case TX_WITNESS_V0_SCRIPTHASH:\n+    {\n+        if (sigversion == IsMineSigVersion::WITNESS_V0) {\n+            // P2WSH inside P2WSH is invalid.\n+            return IsMineResult::INVALID;\n+        }\n+        if (sigversion == IsMineSigVersion::TOP && !keystore.HaveCScript(CScriptID(CScript() << OP_0 << vSolutions[0]))) {\n+            break;\n+        }\n+        uint160 hash;\n+        CRIPEMD160().Write(&vSolutions[0][0], vSolutions[0].size()).Finalize(hash.begin());\n+        CScriptID scriptID = CScriptID(hash);\n+        CScript subscript;\n+        if (keystore.GetCScript(scriptID, subscript)) {\n+            ret = std::max(ret, IsMineInner(keystore, subscript, IsMineSigVersion::WITNESS_V0));\n+        }\n+        break;\n+    }\n+\n+    case TX_MULTISIG:\n+    {\n+        // Never treat bare multisig outputs as ours (they can still be made watchonly-though)\n+        if (sigversion == IsMineSigVersion::TOP) {\n+            break;\n+        }\n+\n+        // Only consider transactions \"mine\" if we own ALL the\n+        // keys involved. Multi-signature transactions that are\n+        // partially owned (somebody else has a key that can spend\n+        // them) enable spend-out-from-under-you attacks, especially\n+        // in shared-wallet situations.\n+        std::vector<valtype> keys(vSolutions.begin()+1, vSolutions.begin()+vSolutions.size()-1);\n+        if (!PermitsUncompressed(sigversion)) {\n+            for (size_t i = 0; i < keys.size(); i++) {\n+                if (keys[i].size() != 33) {\n+                    return IsMineResult::INVALID;\n+                }\n+            }\n+        }\n+        if (HaveKeys(keys, keystore)) {\n+            ret = std::max(ret, IsMineResult::SPENDABLE);\n+        }\n+        break;\n+    }\n+    }\n+\n+    if (ret == IsMineResult::NO && keystore.HaveWatchOnly(scriptPubKey)) {\n+        ret = std::max(ret, IsMineResult::WATCH_ONLY);\n+    }\n+    return ret;\n+}\n+\n+} // namespace\n+\n+isminetype LegacyScriptPubKeyMan::IsMine(const CScript& script) const\n+{\n+    switch (IsMineInner(*this, script, IsMineSigVersion::TOP)) {\n+    case IsMineResult::INVALID:\n+    case IsMineResult::NO:\n+        return ISMINE_NO;\n+    case IsMineResult::WATCH_ONLY:\n+        return ISMINE_WATCH_ONLY;\n+    case IsMineResult::SPENDABLE:\n+        return ISMINE_SPENDABLE;\n+    }\n+    assert(false);\n+}\n+\n+bool LegacyScriptPubKeyMan::HasEncryptedData() const\n+{\n+    LOCK(cs_KeyStore);\n+    return HasEncryptionKeys() || !mapCryptedKeys.empty();\n+}\n+\n+bool LegacyScriptPubKeyMan::CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys)\n+{\n+    {\n+        LOCK(cs_KeyStore);\n+        if (!mapKeys.empty())\n+            return false;\n+\n+        bool keyPass = mapCryptedKeys.empty(); // Always pass when there are no encrypted keys\n+        bool keyFail = false;\n+        CryptedKeyMap::const_iterator mi = mapCryptedKeys.begin();\n+        for (; mi != mapCryptedKeys.end(); ++mi)\n+        {\n+            const CPubKey &vchPubKey = (*mi).second.first;\n+            const std::vector<unsigned char> &vchCryptedSecret = (*mi).second.second;\n+            CKey key;\n+            if (!DecryptKey(master_key, vchCryptedSecret, vchPubKey, key))\n+            {\n+                keyFail = true;\n+                break;\n+            }\n+            keyPass = true;\n+            if (fDecryptionThoroughlyChecked)\n+                break;\n+        }\n+        if (keyPass && keyFail)\n+        {\n+            LogPrintf(\"The wallet is probably corrupted: Some keys decrypt but not all.\\n\");\n+            throw std::runtime_error(\"Error unlocking wallet: some keys decrypt but not all. Your wallet file may be corrupt.\");\n+        }\n+        if (keyFail || (!keyPass && !accept_no_keys))\n+            return false;\n+        fDecryptionThoroughlyChecked = true;\n+    }\n+    return true;\n+}\n+\n+bool LegacyScriptPubKeyMan::Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch)\n+{\n+    LOCK(cs_KeyStore);\n+    encrypted_batch = batch;\n+    if (!mapCryptedKeys.empty()) {\n+        encrypted_batch = nullptr;\n+        return false;\n+    }\n+\n+    KeyMap keys_to_encrypt;\n+    keys_to_encrypt.swap(mapKeys); // Clear mapKeys so AddCryptedKeyInner will succeed.\n+    for (const KeyMap::value_type& mKey : keys_to_encrypt)\n+    {\n+        const CKey &key = mKey.second;\n+        CPubKey vchPubKey = key.GetPubKey();\n+        CKeyingMaterial vchSecret(key.begin(), key.end());\n+        std::vector<unsigned char> vchCryptedSecret;\n+        if (!EncryptSecret(master_key, vchSecret, vchPubKey.GetHash(), vchCryptedSecret)) {\n+            encrypted_batch = nullptr;\n+            return false;\n+        }\n+        if (!AddCryptedKey(vchPubKey, vchCryptedSecret)) {\n+            encrypted_batch = nullptr;\n+            return false;\n+        }\n+    }\n+    mapKeys.clear();",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 276,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "0b66a22b854e39e109ac5a42a058e1f8ee51ba38",
      "in_reply_to_id": 331185255,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2019-10-03T19:02:34Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r331202617",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/331202617"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 276,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/331221791",
      "pull_request_review_id": 297110410,
      "id": 331221791,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMTIyMTc5MQ==",
      "diff_hunk": "@@ -3919,69 +3262,41 @@ std::set<CTxDestination> CWallet::GetLabelAddresses(const std::string& label) co\n \n bool ReserveDestination::GetReservedDestination(const OutputType type, CTxDestination& dest, bool internal)\n {\n-    if (!pwallet->CanGetAddresses(internal)) {\n+    m_spk_man = pwallet->GetScriptPubKeyMan(type, internal);\n+    if (!m_spk_man) {\n         return false;\n     }\n \n+    m_spk_man->TopUp();",
      "path": "src/wallet/wallet.cpp",
      "position": 1216,
      "original_position": 1220,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "c14ad7a89811cb1efe6ed82dff22890dc654ac44",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This TopUp seems newly added rather than moved, and the return value isn't checked. Tests also seem to pass without it. I also noticed TopUp calls were removed in `GetNewChangeDestination` and `CreateWalletFromFile`, and I don't know why.\r\n\r\nThese changes seem ok, but I guess the things I'd like to know would be:\r\n\r\n1. If something in particular motivated these changes, or if they just seemed like a good ideas.\r\n2. In general, if there's some kind of reasoning about where the keypool should be topped up. For example, I'd expect either keyman objects to be responible for topping up internally, or for the wallet to be responsible, but not for calls to happen both places. If there is intent behind this, maybe the Topup method could have a comment saying when it's supposed to be called.\r\n\r\nCould also consider reverting top up changes that aren't necessary here. I think I'll be done with my neverending review of this PR soon, but little changes like this I don't understand do not make the end seem closer!  :smiley:",
      "created_at": "2019-10-03T19:50:37Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r331221791",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/331221791"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3254,
      "original_line": 3254,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/331229987",
      "pull_request_review_id": 297121509,
      "id": 331229987,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMTIyOTk4Nw==",
      "diff_hunk": "@@ -3919,69 +3262,41 @@ std::set<CTxDestination> CWallet::GetLabelAddresses(const std::string& label) co\n \n bool ReserveDestination::GetReservedDestination(const OutputType type, CTxDestination& dest, bool internal)\n {\n-    if (!pwallet->CanGetAddresses(internal)) {\n+    m_spk_man = pwallet->GetScriptPubKeyMan(type, internal);\n+    if (!m_spk_man) {\n         return false;\n     }\n \n+    m_spk_man->TopUp();",
      "path": "src/wallet/wallet.cpp",
      "position": 1216,
      "original_position": 1220,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "c14ad7a89811cb1efe6ed82dff22890dc654ac44",
      "in_reply_to_id": 331221791,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This particular `TopUp` was moved from `GetNewChangeDestination` into `GetReservedDestination` because `GetNewChangeDestination` does not determine which `ScriptPubKeyMan` to use, but `GetReservedDestination` does.\r\n\r\nWhere in `CreateWalletFromFile` were `TopUp`s removed? It's likely that those were rolled into `SetupGeneration`.",
      "created_at": "2019-10-03T20:10:54Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r331229987",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/331229987"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3254,
      "original_line": 3254,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/331238394",
      "pull_request_review_id": 297132405,
      "id": 331238394,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMTIzODM5NA==",
      "diff_hunk": "@@ -0,0 +1,1448 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <key_io.h>\n+#include <outputtype.h>\n+#include <script/descriptor.h>\n+#include <util/bip32.h>\n+#include <util/strencodings.h>\n+#include <util/translation.h>\n+#include <wallet/scriptpubkeyman.h>\n+\n+bool LegacyScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n+{\n+    error.clear();\n+    TopUpKeyPool();\n+\n+    // Generate a new key that is added to wallet\n+    CPubKey new_key;\n+    if (!GetKeyFromPool(new_key)) {\n+        error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+        return false;\n+    }\n+    LearnRelatedScripts(new_key, type);\n+    dest = GetDestinationForKey(new_key, type);\n+    return true;\n+}\n+\n+typedef std::vector<unsigned char> valtype;\n+\n+namespace {\n+\n+/**\n+ * This is an enum that tracks the execution context of a script, similar to\n+ * SigVersion in script/interpreter. It is separate however because we want to\n+ * distinguish between top-level scriptPubKey execution and P2SH redeemScript\n+ * execution (a distinction that has no impact on consensus rules).\n+ */\n+enum class IsMineSigVersion\n+{\n+    TOP = 0,        //!< scriptPubKey execution\n+    P2SH = 1,       //!< P2SH redeemScript\n+    WITNESS_V0 = 2, //!< P2WSH witness script execution\n+};\n+\n+/**\n+ * This is an internal representation of isminetype + invalidity.\n+ * Its order is significant, as we return the max of all explored\n+ * possibilities.\n+ */\n+enum class IsMineResult\n+{\n+    NO = 0,         //!< Not ours\n+    WATCH_ONLY = 1, //!< Included in watch-only balance\n+    SPENDABLE = 2,  //!< Included in all balances\n+    INVALID = 3,    //!< Not spendable by anyone (uncompressed pubkey in segwit, P2SH inside P2SH or witness, witness inside witness)\n+};\n+\n+bool PermitsUncompressed(IsMineSigVersion sigversion)\n+{\n+    return sigversion == IsMineSigVersion::TOP || sigversion == IsMineSigVersion::P2SH;\n+}\n+\n+bool HaveKeys(const std::vector<valtype>& pubkeys, const LegacyScriptPubKeyMan& keystore)\n+{\n+    for (const valtype& pubkey : pubkeys) {\n+        CKeyID keyID = CPubKey(pubkey).GetID();\n+        if (!keystore.HaveKey(keyID)) return false;\n+    }\n+    return true;\n+}\n+\n+IsMineResult IsMineInner(const LegacyScriptPubKeyMan& keystore, const CScript& scriptPubKey, IsMineSigVersion sigversion)\n+{\n+    IsMineResult ret = IsMineResult::NO;\n+\n+    std::vector<valtype> vSolutions;\n+    txnouttype whichType = Solver(scriptPubKey, vSolutions);\n+\n+    CKeyID keyID;\n+    switch (whichType)\n+    {\n+    case TX_NONSTANDARD:\n+    case TX_NULL_DATA:\n+    case TX_WITNESS_UNKNOWN:\n+        break;\n+    case TX_PUBKEY:\n+        keyID = CPubKey(vSolutions[0]).GetID();\n+        if (!PermitsUncompressed(sigversion) && vSolutions[0].size() != 33) {\n+            return IsMineResult::INVALID;\n+        }\n+        if (keystore.HaveKey(keyID)) {\n+            ret = std::max(ret, IsMineResult::SPENDABLE);\n+        }\n+        break;\n+    case TX_WITNESS_V0_KEYHASH:\n+    {\n+        if (sigversion == IsMineSigVersion::WITNESS_V0) {\n+            // P2WPKH inside P2WSH is invalid.\n+            return IsMineResult::INVALID;\n+        }\n+        if (sigversion == IsMineSigVersion::TOP && !keystore.HaveCScript(CScriptID(CScript() << OP_0 << vSolutions[0]))) {\n+            // We do not support bare witness outputs unless the P2SH version of it would be\n+            // acceptable as well. This protects against matching before segwit activates.\n+            // This also applies to the P2WSH case.\n+            break;\n+        }\n+        ret = std::max(ret, IsMineInner(keystore, GetScriptForDestination(PKHash(uint160(vSolutions[0]))), IsMineSigVersion::WITNESS_V0));\n+        break;\n+    }\n+    case TX_PUBKEYHASH:\n+    {\n+        keyID = CKeyID(uint160(vSolutions[0]));\n+        CPubKey pubkey;\n+        if (keystore.GetPubKey(keyID, pubkey)) {\n+            if (!PermitsUncompressed(sigversion) && !pubkey.IsCompressed()) {\n+                return IsMineResult::INVALID;\n+            } else {\n+                ret = std::max(ret, IsMineResult::WATCH_ONLY);\n+            }\n+        }\n+        if (keystore.HaveKey(keyID)) {\n+            ret = std::max(ret, IsMineResult::SPENDABLE);\n+        }\n+        break;\n+    }\n+    case TX_SCRIPTHASH:\n+    {\n+        if (sigversion != IsMineSigVersion::TOP) {\n+            // P2SH inside P2WSH or P2SH is invalid.\n+            return IsMineResult::INVALID;\n+        }\n+        CScriptID scriptID = CScriptID(uint160(vSolutions[0]));\n+        CScript subscript;\n+        if (keystore.GetCScript(scriptID, subscript)) {\n+            ret = std::max(ret, IsMineInner(keystore, subscript, IsMineSigVersion::P2SH));\n+        }\n+        break;\n+    }\n+    case TX_WITNESS_V0_SCRIPTHASH:\n+    {\n+        if (sigversion == IsMineSigVersion::WITNESS_V0) {\n+            // P2WSH inside P2WSH is invalid.\n+            return IsMineResult::INVALID;\n+        }\n+        if (sigversion == IsMineSigVersion::TOP && !keystore.HaveCScript(CScriptID(CScript() << OP_0 << vSolutions[0]))) {\n+            break;\n+        }\n+        uint160 hash;\n+        CRIPEMD160().Write(&vSolutions[0][0], vSolutions[0].size()).Finalize(hash.begin());\n+        CScriptID scriptID = CScriptID(hash);\n+        CScript subscript;\n+        if (keystore.GetCScript(scriptID, subscript)) {\n+            ret = std::max(ret, IsMineInner(keystore, subscript, IsMineSigVersion::WITNESS_V0));\n+        }\n+        break;\n+    }\n+\n+    case TX_MULTISIG:\n+    {\n+        // Never treat bare multisig outputs as ours (they can still be made watchonly-though)\n+        if (sigversion == IsMineSigVersion::TOP) {\n+            break;\n+        }\n+\n+        // Only consider transactions \"mine\" if we own ALL the\n+        // keys involved. Multi-signature transactions that are\n+        // partially owned (somebody else has a key that can spend\n+        // them) enable spend-out-from-under-you attacks, especially\n+        // in shared-wallet situations.\n+        std::vector<valtype> keys(vSolutions.begin()+1, vSolutions.begin()+vSolutions.size()-1);\n+        if (!PermitsUncompressed(sigversion)) {\n+            for (size_t i = 0; i < keys.size(); i++) {\n+                if (keys[i].size() != 33) {\n+                    return IsMineResult::INVALID;\n+                }\n+            }\n+        }\n+        if (HaveKeys(keys, keystore)) {\n+            ret = std::max(ret, IsMineResult::SPENDABLE);\n+        }\n+        break;\n+    }\n+    }\n+\n+    if (ret == IsMineResult::NO && keystore.HaveWatchOnly(scriptPubKey)) {\n+        ret = std::max(ret, IsMineResult::WATCH_ONLY);\n+    }\n+    return ret;\n+}\n+\n+} // namespace\n+\n+isminetype LegacyScriptPubKeyMan::IsMine(const CScript& script) const\n+{\n+    switch (IsMineInner(*this, script, IsMineSigVersion::TOP)) {\n+    case IsMineResult::INVALID:\n+    case IsMineResult::NO:\n+        return ISMINE_NO;\n+    case IsMineResult::WATCH_ONLY:\n+        return ISMINE_WATCH_ONLY;\n+    case IsMineResult::SPENDABLE:\n+        return ISMINE_SPENDABLE;\n+    }\n+    assert(false);\n+}\n+\n+bool LegacyScriptPubKeyMan::HasEncryptedData() const\n+{\n+    LOCK(cs_KeyStore);\n+    return HasEncryptionKeys() || !mapCryptedKeys.empty();\n+}\n+\n+bool LegacyScriptPubKeyMan::CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys)\n+{\n+    {\n+        LOCK(cs_KeyStore);\n+        if (!mapKeys.empty())\n+            return false;\n+\n+        bool keyPass = mapCryptedKeys.empty(); // Always pass when there are no encrypted keys\n+        bool keyFail = false;\n+        CryptedKeyMap::const_iterator mi = mapCryptedKeys.begin();\n+        for (; mi != mapCryptedKeys.end(); ++mi)\n+        {\n+            const CPubKey &vchPubKey = (*mi).second.first;\n+            const std::vector<unsigned char> &vchCryptedSecret = (*mi).second.second;\n+            CKey key;\n+            if (!DecryptKey(master_key, vchCryptedSecret, vchPubKey, key))\n+            {\n+                keyFail = true;\n+                break;\n+            }\n+            keyPass = true;\n+            if (fDecryptionThoroughlyChecked)\n+                break;\n+        }\n+        if (keyPass && keyFail)\n+        {\n+            LogPrintf(\"The wallet is probably corrupted: Some keys decrypt but not all.\\n\");\n+            throw std::runtime_error(\"Error unlocking wallet: some keys decrypt but not all. Your wallet file may be corrupt.\");\n+        }\n+        if (keyFail || (!keyPass && !accept_no_keys))\n+            return false;\n+        fDecryptionThoroughlyChecked = true;\n+    }\n+    return true;\n+}\n+\n+bool LegacyScriptPubKeyMan::Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch)\n+{\n+    LOCK(cs_KeyStore);\n+    encrypted_batch = batch;\n+    if (!mapCryptedKeys.empty()) {\n+        encrypted_batch = nullptr;\n+        return false;\n+    }\n+\n+    KeyMap keys_to_encrypt;\n+    keys_to_encrypt.swap(mapKeys); // Clear mapKeys so AddCryptedKeyInner will succeed.\n+    for (const KeyMap::value_type& mKey : keys_to_encrypt)\n+    {\n+        const CKey &key = mKey.second;\n+        CPubKey vchPubKey = key.GetPubKey();\n+        CKeyingMaterial vchSecret(key.begin(), key.end());\n+        std::vector<unsigned char> vchCryptedSecret;\n+        if (!EncryptSecret(master_key, vchSecret, vchPubKey.GetHash(), vchCryptedSecret)) {\n+            encrypted_batch = nullptr;\n+            return false;\n+        }\n+        if (!AddCryptedKey(vchPubKey, vchCryptedSecret)) {\n+            encrypted_batch = nullptr;\n+            return false;\n+        }\n+    }\n+    mapKeys.clear();\n+    encrypted_batch = nullptr;\n+    return true;\n+}\n+\n+bool LegacyScriptPubKeyMan::GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool)\n+{\n+    if (!CanGetAddresses(internal)) {\n+        return false;\n+    }\n+\n+    {\n+        LOCK(cs_KeyStore);\n+        if (!ReserveKeyFromKeyPool(index, keypool, internal) && !IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 289,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "0b66a22b854e39e109ac5a42a058e1f8ee51ba38",
      "in_reply_to_id": 331200677,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Removed. I don't remember why they were added, could have been due to some previous change that was since changed so they are no longer needed.\r\n\r\nI believe the CanGetAddresses check is for sanity.",
      "created_at": "2019-10-03T20:30:40Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r331238394",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/331238394"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 288,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/331238553",
      "pull_request_review_id": 297132607,
      "id": 331238553,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMTIzODU1Mw==",
      "diff_hunk": "@@ -3919,69 +3262,41 @@ std::set<CTxDestination> CWallet::GetLabelAddresses(const std::string& label) co\n \n bool ReserveDestination::GetReservedDestination(const OutputType type, CTxDestination& dest, bool internal)\n {\n-    if (!pwallet->CanGetAddresses(internal)) {\n+    m_spk_man = pwallet->GetScriptPubKeyMan(type, internal);\n+    if (!m_spk_man) {\n         return false;\n     }\n \n+    m_spk_man->TopUp();",
      "path": "src/wallet/wallet.cpp",
      "position": 1216,
      "original_position": 1220,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "c14ad7a89811cb1efe6ed82dff22890dc654ac44",
      "in_reply_to_id": 331221791,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ok, thanks for the explanation. The changes here do make sense since they're just moves. I didn't realize the GetNewChangeDestination and GetReservedDestination changes were related, or that SetupGeneration calls TopUp (indirectly through LegacyScriptPubKeyMan::NewKeyPool).\r\n\r\n",
      "created_at": "2019-10-03T20:31:00Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r331238553",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/331238553"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3254,
      "original_line": 3254,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/331653700",
      "pull_request_review_id": 297675584,
      "id": 331653700,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMTY1MzcwMA==",
      "diff_hunk": "@@ -0,0 +1,1447 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <key_io.h>\n+#include <outputtype.h>\n+#include <script/descriptor.h>\n+#include <util/bip32.h>\n+#include <util/strencodings.h>\n+#include <util/translation.h>\n+#include <wallet/scriptpubkeyman.h>\n+\n+bool LegacyScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n+{\n+    error.clear();\n+    TopUpKeyPool();\n+\n+    // Generate a new key that is added to wallet\n+    CPubKey new_key;\n+    if (!GetKeyFromPool(new_key)) {\n+        error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+        return false;\n+    }\n+    LearnRelatedScripts(new_key, type);\n+    dest = GetDestinationForKey(new_key, type);\n+    return true;\n+}\n+\n+typedef std::vector<unsigned char> valtype;\n+\n+namespace {\n+\n+/**\n+ * This is an enum that tracks the execution context of a script, similar to\n+ * SigVersion in script/interpreter. It is separate however because we want to\n+ * distinguish between top-level scriptPubKey execution and P2SH redeemScript\n+ * execution (a distinction that has no impact on consensus rules).\n+ */\n+enum class IsMineSigVersion\n+{\n+    TOP = 0,        //!< scriptPubKey execution\n+    P2SH = 1,       //!< P2SH redeemScript\n+    WITNESS_V0 = 2, //!< P2WSH witness script execution\n+};\n+\n+/**\n+ * This is an internal representation of isminetype + invalidity.\n+ * Its order is significant, as we return the max of all explored\n+ * possibilities.\n+ */\n+enum class IsMineResult\n+{\n+    NO = 0,         //!< Not ours\n+    WATCH_ONLY = 1, //!< Included in watch-only balance\n+    SPENDABLE = 2,  //!< Included in all balances\n+    INVALID = 3,    //!< Not spendable by anyone (uncompressed pubkey in segwit, P2SH inside P2SH or witness, witness inside witness)\n+};\n+\n+bool PermitsUncompressed(IsMineSigVersion sigversion)\n+{\n+    return sigversion == IsMineSigVersion::TOP || sigversion == IsMineSigVersion::P2SH;\n+}\n+\n+bool HaveKeys(const std::vector<valtype>& pubkeys, const LegacyScriptPubKeyMan& keystore)\n+{\n+    for (const valtype& pubkey : pubkeys) {\n+        CKeyID keyID = CPubKey(pubkey).GetID();\n+        if (!keystore.HaveKey(keyID)) return false;\n+    }\n+    return true;\n+}\n+\n+IsMineResult IsMineInner(const LegacyScriptPubKeyMan& keystore, const CScript& scriptPubKey, IsMineSigVersion sigversion)\n+{\n+    IsMineResult ret = IsMineResult::NO;\n+\n+    std::vector<valtype> vSolutions;\n+    txnouttype whichType = Solver(scriptPubKey, vSolutions);\n+\n+    CKeyID keyID;\n+    switch (whichType)\n+    {\n+    case TX_NONSTANDARD:\n+    case TX_NULL_DATA:\n+    case TX_WITNESS_UNKNOWN:\n+        break;\n+    case TX_PUBKEY:\n+        keyID = CPubKey(vSolutions[0]).GetID();\n+        if (!PermitsUncompressed(sigversion) && vSolutions[0].size() != 33) {\n+            return IsMineResult::INVALID;\n+        }\n+        if (keystore.HaveKey(keyID)) {\n+            ret = std::max(ret, IsMineResult::SPENDABLE);\n+        }\n+        break;\n+    case TX_WITNESS_V0_KEYHASH:\n+    {\n+        if (sigversion == IsMineSigVersion::WITNESS_V0) {\n+            // P2WPKH inside P2WSH is invalid.\n+            return IsMineResult::INVALID;\n+        }\n+        if (sigversion == IsMineSigVersion::TOP && !keystore.HaveCScript(CScriptID(CScript() << OP_0 << vSolutions[0]))) {\n+            // We do not support bare witness outputs unless the P2SH version of it would be\n+            // acceptable as well. This protects against matching before segwit activates.\n+            // This also applies to the P2WSH case.\n+            break;\n+        }\n+        ret = std::max(ret, IsMineInner(keystore, GetScriptForDestination(PKHash(uint160(vSolutions[0]))), IsMineSigVersion::WITNESS_V0));\n+        break;\n+    }\n+    case TX_PUBKEYHASH:\n+    {\n+        keyID = CKeyID(uint160(vSolutions[0]));\n+        CPubKey pubkey;\n+        if (keystore.GetPubKey(keyID, pubkey)) {\n+            if (!PermitsUncompressed(sigversion) && !pubkey.IsCompressed()) {\n+                return IsMineResult::INVALID;\n+            } else {\n+                ret = std::max(ret, IsMineResult::WATCH_ONLY);\n+            }\n+        }\n+        if (keystore.HaveKey(keyID)) {\n+            ret = std::max(ret, IsMineResult::SPENDABLE);\n+        }\n+        break;\n+    }\n+    case TX_SCRIPTHASH:\n+    {\n+        if (sigversion != IsMineSigVersion::TOP) {\n+            // P2SH inside P2WSH or P2SH is invalid.\n+            return IsMineResult::INVALID;\n+        }\n+        CScriptID scriptID = CScriptID(uint160(vSolutions[0]));\n+        CScript subscript;\n+        if (keystore.GetCScript(scriptID, subscript)) {\n+            ret = std::max(ret, IsMineInner(keystore, subscript, IsMineSigVersion::P2SH));\n+        }\n+        break;\n+    }\n+    case TX_WITNESS_V0_SCRIPTHASH:\n+    {\n+        if (sigversion == IsMineSigVersion::WITNESS_V0) {\n+            // P2WSH inside P2WSH is invalid.\n+            return IsMineResult::INVALID;\n+        }\n+        if (sigversion == IsMineSigVersion::TOP && !keystore.HaveCScript(CScriptID(CScript() << OP_0 << vSolutions[0]))) {\n+            break;\n+        }\n+        uint160 hash;\n+        CRIPEMD160().Write(&vSolutions[0][0], vSolutions[0].size()).Finalize(hash.begin());\n+        CScriptID scriptID = CScriptID(hash);\n+        CScript subscript;\n+        if (keystore.GetCScript(scriptID, subscript)) {\n+            ret = std::max(ret, IsMineInner(keystore, subscript, IsMineSigVersion::WITNESS_V0));\n+        }\n+        break;\n+    }\n+\n+    case TX_MULTISIG:\n+    {\n+        // Never treat bare multisig outputs as ours (they can still be made watchonly-though)\n+        if (sigversion == IsMineSigVersion::TOP) {\n+            break;\n+        }\n+\n+        // Only consider transactions \"mine\" if we own ALL the\n+        // keys involved. Multi-signature transactions that are\n+        // partially owned (somebody else has a key that can spend\n+        // them) enable spend-out-from-under-you attacks, especially\n+        // in shared-wallet situations.\n+        std::vector<valtype> keys(vSolutions.begin()+1, vSolutions.begin()+vSolutions.size()-1);\n+        if (!PermitsUncompressed(sigversion)) {\n+            for (size_t i = 0; i < keys.size(); i++) {\n+                if (keys[i].size() != 33) {\n+                    return IsMineResult::INVALID;\n+                }\n+            }\n+        }\n+        if (HaveKeys(keys, keystore)) {\n+            ret = std::max(ret, IsMineResult::SPENDABLE);\n+        }\n+        break;\n+    }\n+    }\n+\n+    if (ret == IsMineResult::NO && keystore.HaveWatchOnly(scriptPubKey)) {\n+        ret = std::max(ret, IsMineResult::WATCH_ONLY);\n+    }\n+    return ret;\n+}\n+\n+} // namespace\n+\n+isminetype LegacyScriptPubKeyMan::IsMine(const CScript& script) const\n+{\n+    switch (IsMineInner(*this, script, IsMineSigVersion::TOP)) {\n+    case IsMineResult::INVALID:\n+    case IsMineResult::NO:\n+        return ISMINE_NO;\n+    case IsMineResult::WATCH_ONLY:\n+        return ISMINE_WATCH_ONLY;\n+    case IsMineResult::SPENDABLE:\n+        return ISMINE_SPENDABLE;\n+    }\n+    assert(false);\n+}\n+\n+bool LegacyScriptPubKeyMan::HasEncryptedData() const\n+{\n+    LOCK(cs_KeyStore);\n+    return HasEncryptionKeys() || !mapCryptedKeys.empty();\n+}\n+\n+bool LegacyScriptPubKeyMan::CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys)\n+{\n+    {\n+        LOCK(cs_KeyStore);\n+        if (!mapKeys.empty())\n+            return false;\n+\n+        bool keyPass = mapCryptedKeys.empty(); // Always pass when there are no encrypted keys\n+        bool keyFail = false;\n+        CryptedKeyMap::const_iterator mi = mapCryptedKeys.begin();\n+        for (; mi != mapCryptedKeys.end(); ++mi)\n+        {\n+            const CPubKey &vchPubKey = (*mi).second.first;\n+            const std::vector<unsigned char> &vchCryptedSecret = (*mi).second.second;\n+            CKey key;\n+            if (!DecryptKey(master_key, vchCryptedSecret, vchPubKey, key))\n+            {\n+                keyFail = true;\n+                break;\n+            }\n+            keyPass = true;\n+            if (fDecryptionThoroughlyChecked)\n+                break;\n+        }\n+        if (keyPass && keyFail)\n+        {\n+            LogPrintf(\"The wallet is probably corrupted: Some keys decrypt but not all.\\n\");\n+            throw std::runtime_error(\"Error unlocking wallet: some keys decrypt but not all. Your wallet file may be corrupt.\");\n+        }\n+        if (keyFail || (!keyPass && !accept_no_keys))\n+            return false;\n+        fDecryptionThoroughlyChecked = true;\n+    }\n+    return true;\n+}\n+\n+bool LegacyScriptPubKeyMan::Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch)\n+{\n+    LOCK(cs_KeyStore);\n+    encrypted_batch = batch;\n+    if (!mapCryptedKeys.empty()) {\n+        encrypted_batch = nullptr;\n+        return false;\n+    }\n+\n+    KeyMap keys_to_encrypt;\n+    keys_to_encrypt.swap(mapKeys); // Clear mapKeys so AddCryptedKeyInner will succeed.\n+    for (const KeyMap::value_type& mKey : keys_to_encrypt)\n+    {\n+        const CKey &key = mKey.second;\n+        CPubKey vchPubKey = key.GetPubKey();\n+        CKeyingMaterial vchSecret(key.begin(), key.end());\n+        std::vector<unsigned char> vchCryptedSecret;\n+        if (!EncryptSecret(master_key, vchSecret, vchPubKey.GetHash(), vchCryptedSecret)) {\n+            encrypted_batch = nullptr;\n+            return false;\n+        }\n+        if (!AddCryptedKey(vchPubKey, vchCryptedSecret)) {\n+            encrypted_batch = nullptr;\n+            return false;\n+        }\n+    }\n+    encrypted_batch = nullptr;\n+    return true;\n+}\n+\n+bool LegacyScriptPubKeyMan::GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool)\n+{\n+    if (!CanGetAddresses(internal)) {\n+        return false;\n+    }\n+\n+    {\n+        LOCK(cs_KeyStore);\n+        if (!ReserveKeyFromKeyPool(index, keypool, internal)) {\n+            return false;\n+        }\n+        LearnRelatedScripts(keypool.vchPubKey, type);\n+        address = GetDestinationForKey(keypool.vchPubKey, type);\n+    }\n+    return true;\n+}\n+\n+void LegacyScriptPubKeyMan::KeepDestination(int64_t index)\n+{\n+    KeepKey(index);\n+}\n+\n+void LegacyScriptPubKeyMan::ReturnDestination(int64_t index, bool internal, const CTxDestination& addr)\n+{\n+    ReturnKey(index, internal, m_reserved_key_to_index[index]);\n+    m_reserved_key_to_index.erase(index);\n+}\n+\n+bool LegacyScriptPubKeyMan::TopUp(unsigned int size)\n+{\n+    return TopUpKeyPool(size);\n+}\n+\n+void LegacyScriptPubKeyMan::MarkUnusedAddresses(const CScript& script)\n+{\n+    LOCK(cs_KeyStore);\n+    // extract addresses and check if they match with an unused keypool key\n+    for (const auto& keyid : GetAffectedKeys(script, *this)) {\n+        std::map<CKeyID, int64_t>::const_iterator mi = m_pool_key_to_index.find(keyid);\n+        if (mi != m_pool_key_to_index.end()) {\n+            WalletLogPrintf(\"%s: Detected a used keypool key, mark all keypool key up to this key as used\\n\", __func__);\n+            MarkReserveKeysAsUsed(mi->second);\n+\n+            if (!TopUpKeyPool()) {\n+                WalletLogPrintf(\"%s: Topping up keypool failed (locked wallet)\\n\", __func__);\n+            }\n+        }\n+    }\n+}\n+\n+void LegacyScriptPubKeyMan::UpgradeKeyMetadata()\n+{\n+    LOCK(cs_KeyStore);\n+    if (IsLocked() || IsWalletFlagSet(WALLET_FLAG_KEY_ORIGIN_METADATA)) {\n+        return;\n+    }\n+\n+    std::unique_ptr<WalletBatch> batch = MakeUnique<WalletBatch>(*m_database);\n+    for (auto& meta_pair : mapKeyMetadata) {\n+        CKeyMetadata& meta = meta_pair.second;\n+        if (!meta.hd_seed_id.IsNull() && !meta.has_key_origin && meta.hdKeypath != \"s\") { // If the hdKeypath is \"s\", that's the seed and it doesn't have a key origin\n+            CKey key;\n+            GetKey(meta.hd_seed_id, key);\n+            CExtKey masterKey;\n+            masterKey.SetSeed(key.begin(), key.size());\n+            // Add to map\n+            CKeyID master_id = masterKey.key.GetPubKey().GetID();\n+            std::copy(master_id.begin(), master_id.begin() + 4, meta.key_origin.fingerprint);\n+            if (!ParseHDKeypath(meta.hdKeypath, meta.key_origin.path)) {\n+                throw std::runtime_error(\"Invalid stored hdKeypath\");\n+            }\n+            meta.has_key_origin = true;\n+            if (meta.nVersion < CKeyMetadata::VERSION_WITH_KEY_ORIGIN) {\n+                meta.nVersion = CKeyMetadata::VERSION_WITH_KEY_ORIGIN;\n+            }\n+\n+            // Write meta to wallet\n+            CPubKey pubkey;\n+            if (GetPubKey(meta_pair.first, pubkey)) {\n+                batch->WriteKeyMetadata(meta, pubkey, true);\n+            }\n+        }\n+    }\n+    batch.reset();\n+}\n+\n+bool LegacyScriptPubKeyMan::SetupGeneration(bool force)\n+{\n+    if ((CanGenerateKeys() && !force) || IsLocked()) {\n+        return false;\n+    }\n+\n+    SetHDSeed(GenerateNewSeed());\n+    if (!NewKeyPool()) {\n+        return false;\n+    }\n+    return true;\n+}\n+\n+bool LegacyScriptPubKeyMan::IsHDEnabled() const\n+{\n+    return !hdChain.seed_id.IsNull();\n+}\n+\n+bool LegacyScriptPubKeyMan::CanGetAddresses(bool internal)\n+{\n+    LOCK(cs_KeyStore);\n+    // Check if the keypool has keys\n+    bool keypool_has_keys;\n+    if (internal && CanSupportFeature(FEATURE_HD_SPLIT)) {\n+        keypool_has_keys = setInternalKeyPool.size() > 0;\n+    } else {\n+        keypool_has_keys = KeypoolCountExternalKeys() > 0;\n+    }\n+    // If the keypool doesn't have keys, check if we can generate them\n+    if (!keypool_has_keys) {\n+        return CanGenerateKeys();\n+    }\n+    return keypool_has_keys;\n+}\n+\n+bool LegacyScriptPubKeyMan::Upgrade(int prev_version, int new_version, std::string& error)\n+{\n+    LOCK(cs_KeyStore);\n+    error = \"\";\n+    bool hd_upgrade = false;\n+    bool split_upgrade = false;\n+    if (CanSupportFeature(FEATURE_HD) && !IsHDEnabled()) {\n+        WalletLogPrintf(\"Upgrading wallet to HD\\n\");\n+        SetMinVersion(FEATURE_HD);\n+\n+        // generate a new master key\n+        SetHDSeed(GenerateNewSeed());\n+        hd_upgrade = true;\n+    }\n+    // Upgrade to HD chain split if necessary\n+    if (CanSupportFeature(FEATURE_HD_SPLIT) && hdChain.nVersion < 2 /* VERSION_HD_CHAIN_SPLIT */) {\n+        WalletLogPrintf(\"Upgrading wallet to use HD chain split\\n\");\n+        SetMinVersion(FEATURE_PRE_SPLIT_KEYPOOL);\n+        split_upgrade = FEATURE_HD_SPLIT > prev_version;\n+    }\n+    // Mark all keys currently in the keypool as pre-split\n+    if (split_upgrade) {\n+        MarkPreSplitKeys();\n+    }\n+    // Regenerate the keypool if upgraded to HD\n+    if (hd_upgrade) {\n+        if (!TopUpKeyPool()) {\n+            error = _(\"Unable to generate keys\").translated;\n+            return false;\n+        }\n+    }\n+    return true;\n+}\n+\n+bool LegacyScriptPubKeyMan::HavePrivateKeys() const\n+{\n+    LOCK(cs_KeyStore);\n+    return !mapKeys.empty() || !mapCryptedKeys.empty();\n+}\n+\n+void LegacyScriptPubKeyMan::RewriteDB()\n+{\n+    LOCK(cs_KeyStore);\n+    setInternalKeyPool.clear();\n+    setExternalKeyPool.clear();\n+    m_pool_key_to_index.clear();\n+    // Note: can't top-up keypool here, because wallet is locked.\n+    // User will be prompted to unlock wallet the next operation\n+    // that requires a new key.\n+}\n+\n+static int64_t GetOldestKeyTimeInPool(const std::set<int64_t>& setKeyPool, WalletBatch& batch) {\n+    if (setKeyPool.empty()) {\n+        return GetTime();\n+    }\n+\n+    CKeyPool keypool;\n+    int64_t nIndex = *(setKeyPool.begin());\n+    if (!batch.ReadPool(nIndex, keypool)) {\n+        throw std::runtime_error(std::string(__func__) + \": read oldest key in keypool failed\");\n+    }\n+    assert(keypool.vchPubKey.IsValid());\n+    return keypool.nTime;\n+}\n+\n+int64_t LegacyScriptPubKeyMan::GetOldestKeyPoolTime()\n+{\n+    LOCK(cs_KeyStore);\n+\n+    WalletBatch batch(*m_database);\n+\n+    // load oldest key from keypool, get time and return\n+    int64_t oldestKey = GetOldestKeyTimeInPool(setExternalKeyPool, batch);\n+    if (IsHDEnabled() && CanSupportFeature(FEATURE_HD_SPLIT)) {\n+        oldestKey = std::max(GetOldestKeyTimeInPool(setInternalKeyPool, batch), oldestKey);\n+        if (!set_pre_split_keypool.empty()) {\n+            oldestKey = std::max(GetOldestKeyTimeInPool(set_pre_split_keypool, batch), oldestKey);\n+        }\n+    }\n+\n+    return oldestKey;\n+}\n+\n+size_t LegacyScriptPubKeyMan::KeypoolCountExternalKeys()\n+{\n+    LOCK(cs_KeyStore);\n+    return setExternalKeyPool.size() + set_pre_split_keypool.size();\n+}\n+\n+unsigned int LegacyScriptPubKeyMan::GetKeyPoolSize() const\n+{\n+    LOCK(cs_KeyStore);\n+    return setInternalKeyPool.size() + setExternalKeyPool.size() + set_pre_split_keypool.size();\n+}\n+\n+int64_t LegacyScriptPubKeyMan::GetTimeFirstKey() const\n+{\n+    LOCK(cs_KeyStore);\n+    return nTimeFirstKey;\n+}\n+\n+std::unique_ptr<SigningProvider> LegacyScriptPubKeyMan::GetSigningProvider(const CScript& script) const\n+{\n+    return MakeUnique<LegacySigningProvider>(*this);\n+}\n+\n+bool LegacyScriptPubKeyMan::CanProvide(const CScript& script, SignatureData& sigdata)\n+{\n+    if (IsMine(script) != ISMINE_NO) {\n+        // If it IsMine, we can always provide in some way\n+        return true;\n+    } else if (HaveCScript(CScriptID(script))) {\n+        // We can still provide some stuff if we have the script, but IsMine failed because we don't have keys\n+        return true;\n+    } else {\n+        // If, given the stuff in sigdata, we could make a valid sigature, then we can provide for this script\n+        ProduceSignature(*this, DUMMY_SIGNATURE_CREATOR, script, sigdata);\n+        if (!sigdata.signatures.empty()) {\n+            // If we could make signatures, make sure we have a private key to actually make a signature\n+            bool has_privkeys = false;\n+            for (const auto& key_sig_pair : sigdata.signatures) {\n+                has_privkeys |= HaveKey(key_sig_pair.first);\n+            }\n+            return has_privkeys;\n+        }\n+        return false;\n+    }\n+}\n+\n+const CKeyMetadata* LegacyScriptPubKeyMan::GetMetadata(uint160 id) const\n+{\n+    LOCK(cs_KeyStore);\n+    auto it = mapKeyMetadata.find(CKeyID(id));\n+    if (it != mapKeyMetadata.end()) {\n+        return &it->second;\n+    } else {\n+        auto it2 = m_script_metadata.find(CScriptID(id));\n+        if (it2 != m_script_metadata.end()) {\n+            return &it2->second;\n+        }\n+    }\n+    return nullptr;\n+}\n+\n+uint256 LegacyScriptPubKeyMan::GetID() const\n+{\n+    return uint256S(\"0000000000000000000000000000000000000000000000000000000000000001\");\n+}\n+\n+/**\n+ * Update wallet first key creation time. This should be called whenever keys\n+ * are added to the wallet, with the oldest key creation time.\n+ */\n+void LegacyScriptPubKeyMan::UpdateTimeFirstKey(int64_t nCreateTime)\n+{\n+    AssertLockHeld(cs_KeyStore);\n+    if (nCreateTime <= 1) {\n+        // Cannot determine birthday information, so set the wallet birthday to\n+        // the beginning of time.\n+        nTimeFirstKey = 1;\n+    } else if (!nTimeFirstKey || nCreateTime < nTimeFirstKey) {\n+        nTimeFirstKey = nCreateTime;\n+    }\n+}\n+\n+bool LegacyScriptPubKeyMan::LoadKey(const CKey& key, const CPubKey &pubkey)\n+{\n+    return AddKeyPubKeyInner(key, pubkey);\n+}\n+\n+bool LegacyScriptPubKeyMan::AddKeyPubKey(const CKey& secret, const CPubKey &pubkey)\n+{\n+    WalletBatch batch(*m_database);\n+    return LegacyScriptPubKeyMan::AddKeyPubKeyWithDB(batch, secret, pubkey);\n+}\n+\n+bool LegacyScriptPubKeyMan::AddKeyPubKeyWithDB(WalletBatch& batch, const CKey& secret, const CPubKey& pubkey)\n+{\n+    AssertLockHeld(cs_KeyStore);\n+\n+    // Make sure we aren't adding private keys to private key disabled wallets\n+    assert(!IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n+\n+    // FillableSigningProvider has no concept of wallet databases, but calls AddCryptedKey\n+    // which is overridden below.  To avoid flushes, the database handle is\n+    // tunneled through to it.\n+    bool needsDB = !encrypted_batch;\n+    if (needsDB) {\n+        encrypted_batch = &batch;\n+    }\n+    if (!AddKeyPubKeyInner(secret, pubkey)) {\n+        if (needsDB) encrypted_batch = nullptr;\n+        return false;\n+    }\n+    if (needsDB) encrypted_batch = nullptr;\n+\n+    // check if we need to remove from watch-only\n+    CScript script;\n+    script = GetScriptForDestination(PKHash(pubkey));\n+    if (HaveWatchOnly(script)) {\n+        RemoveWatchOnly(script);\n+    }\n+    script = GetScriptForRawPubKey(pubkey);\n+    if (HaveWatchOnly(script)) {\n+        RemoveWatchOnly(script);\n+    }\n+\n+    if (!HasEncryptedData()) {\n+        return batch.WriteKey(pubkey,\n+                                                 secret.GetPrivKey(),\n+                                                 mapKeyMetadata[pubkey.GetID()]);\n+    }\n+    UnsetWalletFlagWithDB(batch, WALLET_FLAG_BLANK_WALLET);\n+    return true;\n+}\n+\n+bool LegacyScriptPubKeyMan::LoadCScript(const CScript& redeemScript)\n+{\n+    /* A sanity check was added in pull #3843 to avoid adding redeemScripts\n+     * that never can be redeemed. However, old wallets may still contain\n+     * these. Do not add them to the wallet and warn. */\n+    if (redeemScript.size() > MAX_SCRIPT_ELEMENT_SIZE)\n+    {\n+        std::string strAddr = EncodeDestination(ScriptHash(redeemScript));\n+        WalletLogPrintf(\"%s: Warning: This wallet contains a redeemScript of size %i which exceeds maximum size %i thus can never be redeemed. Do not use address %s.\\n\", __func__, redeemScript.size(), MAX_SCRIPT_ELEMENT_SIZE, strAddr);\n+        return true;\n+    }\n+\n+    return FillableSigningProvider::AddCScript(redeemScript);\n+}\n+\n+void LegacyScriptPubKeyMan::LoadKeyMetadata(const CKeyID& keyID, const CKeyMetadata& meta)\n+{\n+    LOCK(cs_KeyStore);\n+    UpdateTimeFirstKey(meta.nCreateTime);\n+    mapKeyMetadata[keyID] = meta;\n+}\n+\n+void LegacyScriptPubKeyMan::LoadScriptMetadata(const CScriptID& script_id, const CKeyMetadata& meta)\n+{\n+    LOCK(cs_KeyStore);\n+    UpdateTimeFirstKey(meta.nCreateTime);\n+    m_script_metadata[script_id] = meta;\n+}\n+\n+bool LegacyScriptPubKeyMan::AddKeyPubKeyInner(const CKey& key, const CPubKey &pubkey)\n+{\n+    LOCK(cs_KeyStore);\n+    if (!HasEncryptedData()) {\n+        return FillableSigningProvider::AddKeyPubKey(key, pubkey);\n+    }\n+\n+    if (IsLocked()) {\n+        return false;\n+    }\n+\n+    std::vector<unsigned char> vchCryptedSecret;\n+    CKeyingMaterial vchSecret(key.begin(), key.end());\n+    if (!EncryptSecret(GetEncryptionKey(), vchSecret, pubkey.GetHash(), vchCryptedSecret)) {\n+        return false;\n+    }\n+\n+    if (!AddCryptedKey(pubkey, vchCryptedSecret)) {\n+        return false;\n+    }\n+    return true;\n+}\n+\n+bool LegacyScriptPubKeyMan::LoadCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret)\n+{\n+    return AddCryptedKeyInner(vchPubKey, vchCryptedSecret);\n+}\n+\n+bool LegacyScriptPubKeyMan::AddCryptedKeyInner(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret)\n+{\n+    LOCK(cs_KeyStore);\n+    if (!mapKeys.empty()) {\n+        return false;\n+    }\n+\n+    mapCryptedKeys[vchPubKey.GetID()] = std::make_pair(vchPubKey, vchCryptedSecret);\n+    ImplicitlyLearnRelatedKeyScripts(vchPubKey);\n+    return true;\n+}\n+\n+bool LegacyScriptPubKeyMan::AddCryptedKey(const CPubKey &vchPubKey,\n+                            const std::vector<unsigned char> &vchCryptedSecret)\n+{\n+    if (!AddCryptedKeyInner(vchPubKey, vchCryptedSecret))\n+        return false;\n+    {\n+        LOCK(cs_KeyStore);\n+        if (encrypted_batch)\n+            return encrypted_batch->WriteCryptedKey(vchPubKey,\n+                                                        vchCryptedSecret,\n+                                                        mapKeyMetadata[vchPubKey.GetID()]);\n+        else\n+            return WalletBatch(*m_database).WriteCryptedKey(vchPubKey,\n+                                                            vchCryptedSecret,\n+                                                            mapKeyMetadata[vchPubKey.GetID()]);\n+    }\n+}\n+\n+bool LegacyScriptPubKeyMan::HaveWatchOnly(const CScript &dest) const\n+{\n+    LOCK(cs_KeyStore);\n+    return setWatchOnly.count(dest) > 0;\n+}\n+\n+bool LegacyScriptPubKeyMan::HaveWatchOnly() const\n+{\n+    LOCK(cs_KeyStore);\n+    return (!setWatchOnly.empty());\n+}\n+\n+static bool ExtractPubKey(const CScript &dest, CPubKey& pubKeyOut)\n+{\n+    std::vector<std::vector<unsigned char>> solutions;\n+    return Solver(dest, solutions) == TX_PUBKEY &&\n+        (pubKeyOut = CPubKey(solutions[0])).IsFullyValid();\n+}\n+\n+bool LegacyScriptPubKeyMan::RemoveWatchOnly(const CScript &dest)\n+{\n+    {\n+        LOCK(cs_KeyStore);\n+        setWatchOnly.erase(dest);\n+        CPubKey pubKey;\n+        if (ExtractPubKey(dest, pubKey)) {\n+            mapWatchKeys.erase(pubKey.GetID());\n+        }\n+        // Related CScripts are not removed; having superfluous scripts around is\n+        // harmless (see comment in ImplicitlyLearnRelatedKeyScripts).\n+    }\n+\n+    if (!HaveWatchOnly())\n+        NotifyWatchonlyChanged(false);\n+    if (!WalletBatch(*m_database).EraseWatchOnly(dest))\n+        return false;\n+\n+    return true;\n+}\n+\n+bool LegacyScriptPubKeyMan::LoadWatchOnly(const CScript &dest)\n+{\n+    return AddWatchOnlyInMem(dest);\n+}\n+\n+bool LegacyScriptPubKeyMan::AddWatchOnlyInMem(const CScript &dest)\n+{\n+    LOCK(cs_KeyStore);\n+    setWatchOnly.insert(dest);\n+    CPubKey pubKey;\n+    if (ExtractPubKey(dest, pubKey)) {\n+        mapWatchKeys[pubKey.GetID()] = pubKey;\n+        ImplicitlyLearnRelatedKeyScripts(pubKey);\n+    }\n+    return true;\n+}\n+\n+bool LegacyScriptPubKeyMan::AddWatchOnlyWithDB(WalletBatch &batch, const CScript& dest)\n+{\n+    if (!AddWatchOnlyInMem(dest))\n+        return false;\n+    const CKeyMetadata& meta = m_script_metadata[CScriptID(dest)];\n+    UpdateTimeFirstKey(meta.nCreateTime);\n+    NotifyWatchonlyChanged(true);\n+    if (batch.WriteWatchOnly(dest, meta)) {\n+        UnsetWalletFlagWithDB(batch, WALLET_FLAG_BLANK_WALLET);\n+        return true;\n+    }\n+    return false;\n+}\n+\n+bool LegacyScriptPubKeyMan::AddWatchOnlyWithDB(WalletBatch &batch, const CScript& dest, int64_t create_time)\n+{\n+    m_script_metadata[CScriptID(dest)].nCreateTime = create_time;\n+    return AddWatchOnlyWithDB(batch, dest);\n+}\n+\n+bool LegacyScriptPubKeyMan::AddWatchOnly(const CScript& dest)\n+{\n+    WalletBatch batch(*m_database);\n+    return AddWatchOnlyWithDB(batch, dest);\n+}\n+\n+bool LegacyScriptPubKeyMan::AddWatchOnly(const CScript& dest, int64_t nCreateTime)\n+{\n+    m_script_metadata[CScriptID(dest)].nCreateTime = nCreateTime;\n+    return AddWatchOnly(dest);\n+}\n+\n+void LegacyScriptPubKeyMan::SetHDChain(const CHDChain& chain, bool memonly)\n+{\n+    LOCK(cs_KeyStore);\n+    if (!memonly && !WalletBatch(*m_database).WriteHDChain(chain))\n+        throw std::runtime_error(std::string(__func__) + \": writing chain failed\");\n+\n+    hdChain = chain;\n+}\n+\n+bool LegacyScriptPubKeyMan::HaveKey(const CKeyID &address) const\n+{\n+    LOCK(cs_KeyStore);\n+    if (!HasEncryptedData()) {\n+        return FillableSigningProvider::HaveKey(address);\n+    }\n+    return mapCryptedKeys.count(address) > 0;\n+}\n+\n+bool LegacyScriptPubKeyMan::GetKey(const CKeyID &address, CKey& keyOut) const\n+{\n+    LOCK(cs_KeyStore);\n+    if (!HasEncryptedData()) {\n+        return FillableSigningProvider::GetKey(address, keyOut);\n+    }\n+\n+    CryptedKeyMap::const_iterator mi = mapCryptedKeys.find(address);\n+    if (mi != mapCryptedKeys.end())\n+    {\n+        const CPubKey &vchPubKey = (*mi).second.first;\n+        const std::vector<unsigned char> &vchCryptedSecret = (*mi).second.second;\n+        return DecryptKey(GetEncryptionKey(), vchCryptedSecret, vchPubKey, keyOut);\n+    }\n+    return false;\n+}\n+\n+bool LegacyScriptPubKeyMan::GetKeyOrigin(const CKeyID& keyID, KeyOriginInfo& info) const\n+{\n+    CKeyMetadata meta;\n+    {\n+        LOCK(cs_KeyStore);\n+        auto it = mapKeyMetadata.find(keyID);\n+        if (it != mapKeyMetadata.end()) {\n+            meta = it->second;\n+        }\n+    }\n+    if (meta.has_key_origin) {\n+        std::copy(meta.key_origin.fingerprint, meta.key_origin.fingerprint + 4, info.fingerprint);\n+        info.path = meta.key_origin.path;\n+    } else { // Single pubkeys get the master fingerprint of themselves\n+        std::copy(keyID.begin(), keyID.begin() + 4, info.fingerprint);\n+    }\n+    return true;\n+}\n+\n+bool LegacyScriptPubKeyMan::GetWatchPubKey(const CKeyID &address, CPubKey &pubkey_out) const\n+{\n+    LOCK(cs_KeyStore);\n+    WatchKeyMap::const_iterator it = mapWatchKeys.find(address);\n+    if (it != mapWatchKeys.end()) {\n+        pubkey_out = it->second;\n+        return true;\n+    }\n+    return false;\n+}\n+\n+bool LegacyScriptPubKeyMan::GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const\n+{\n+    LOCK(cs_KeyStore);\n+    if (!HasEncryptedData()) {\n+        if (!FillableSigningProvider::GetPubKey(address, vchPubKeyOut)) {\n+            return GetWatchPubKey(address, vchPubKeyOut);\n+        }\n+        return true;\n+    }\n+\n+    CryptedKeyMap::const_iterator mi = mapCryptedKeys.find(address);\n+    if (mi != mapCryptedKeys.end())\n+    {\n+        vchPubKeyOut = (*mi).second.first;\n+        return true;\n+    }\n+    // Check for watch-only pubkeys\n+    return GetWatchPubKey(address, vchPubKeyOut);\n+}\n+\n+CPubKey LegacyScriptPubKeyMan::GenerateNewKey(WalletBatch &batch, bool internal)\n+{\n+    assert(!IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n+    assert(!IsWalletFlagSet(WALLET_FLAG_BLANK_WALLET));\n+    AssertLockHeld(cs_KeyStore);\n+    bool fCompressed = CanSupportFeature(FEATURE_COMPRPUBKEY); // default to compressed public keys if we want 0.6.0 wallets\n+\n+    CKey secret;\n+\n+    // Create new metadata\n+    int64_t nCreationTime = GetTime();\n+    CKeyMetadata metadata(nCreationTime);\n+\n+    // use HD key derivation if HD was enabled during wallet creation and a seed is present\n+    if (IsHDEnabled()) {\n+        DeriveNewChildKey(batch, metadata, secret, (CanSupportFeature(FEATURE_HD_SPLIT) ? internal : false));\n+    } else {\n+        secret.MakeNewKey(fCompressed);\n+    }\n+\n+    // Compressed public keys were introduced in version 0.6.0\n+    if (fCompressed) {\n+        SetMinVersion(FEATURE_COMPRPUBKEY);\n+    }\n+\n+    CPubKey pubkey = secret.GetPubKey();\n+    assert(secret.VerifyPubKey(pubkey));\n+\n+    mapKeyMetadata[pubkey.GetID()] = metadata;\n+    UpdateTimeFirstKey(nCreationTime);\n+\n+    if (!AddKeyPubKeyWithDB(batch, secret, pubkey)) {\n+        throw std::runtime_error(std::string(__func__) + \": AddKey failed\");\n+    }\n+    return pubkey;\n+}\n+\n+const uint32_t BIP32_HARDENED_KEY_LIMIT = 0x80000000;\n+\n+void LegacyScriptPubKeyMan::DeriveNewChildKey(WalletBatch &batch, CKeyMetadata& metadata, CKey& secret, bool internal)\n+{\n+    // for now we use a fixed keypath scheme of m/0'/0'/k\n+    CKey seed;                     //seed (256bit)\n+    CExtKey masterKey;             //hd master key\n+    CExtKey accountKey;            //key at m/0'\n+    CExtKey chainChildKey;         //key at m/0'/0' (external) or m/0'/1' (internal)\n+    CExtKey childKey;              //key at m/0'/0'/<n>'\n+\n+    // try to get the seed\n+    if (!GetKey(hdChain.seed_id, seed))\n+        throw std::runtime_error(std::string(__func__) + \": seed not found\");\n+\n+    masterKey.SetSeed(seed.begin(), seed.size());\n+\n+    // derive m/0'\n+    // use hardened derivation (child keys >= 0x80000000 are hardened after bip32)\n+    masterKey.Derive(accountKey, BIP32_HARDENED_KEY_LIMIT);\n+\n+    // derive m/0'/0' (external chain) OR m/0'/1' (internal chain)\n+    assert(internal ? CanSupportFeature(FEATURE_HD_SPLIT) : true);\n+    accountKey.Derive(chainChildKey, BIP32_HARDENED_KEY_LIMIT+(internal ? 1 : 0));\n+\n+    // derive child key at next index, skip keys already known to the wallet\n+    do {\n+        // always derive hardened keys\n+        // childIndex | BIP32_HARDENED_KEY_LIMIT = derive childIndex in hardened child-index-range\n+        // example: 1 | BIP32_HARDENED_KEY_LIMIT == 0x80000001 == 2147483649\n+        if (internal) {\n+            chainChildKey.Derive(childKey, hdChain.nInternalChainCounter | BIP32_HARDENED_KEY_LIMIT);\n+            metadata.hdKeypath = \"m/0'/1'/\" + std::to_string(hdChain.nInternalChainCounter) + \"'\";\n+            metadata.key_origin.path.push_back(0 | BIP32_HARDENED_KEY_LIMIT);\n+            metadata.key_origin.path.push_back(1 | BIP32_HARDENED_KEY_LIMIT);\n+            metadata.key_origin.path.push_back(hdChain.nInternalChainCounter | BIP32_HARDENED_KEY_LIMIT);\n+            hdChain.nInternalChainCounter++;\n+        }\n+        else {\n+            chainChildKey.Derive(childKey, hdChain.nExternalChainCounter | BIP32_HARDENED_KEY_LIMIT);\n+            metadata.hdKeypath = \"m/0'/0'/\" + std::to_string(hdChain.nExternalChainCounter) + \"'\";\n+            metadata.key_origin.path.push_back(0 | BIP32_HARDENED_KEY_LIMIT);\n+            metadata.key_origin.path.push_back(0 | BIP32_HARDENED_KEY_LIMIT);\n+            metadata.key_origin.path.push_back(hdChain.nExternalChainCounter | BIP32_HARDENED_KEY_LIMIT);\n+            hdChain.nExternalChainCounter++;\n+        }\n+    } while (HaveKey(childKey.key.GetPubKey().GetID()));\n+    secret = childKey.key;\n+    metadata.hd_seed_id = hdChain.seed_id;\n+    CKeyID master_id = masterKey.key.GetPubKey().GetID();\n+    std::copy(master_id.begin(), master_id.begin() + 4, metadata.key_origin.fingerprint);\n+    metadata.has_key_origin = true;\n+    // update the chain model in the database\n+    if (!batch.WriteHDChain(hdChain))\n+        throw std::runtime_error(std::string(__func__) + \": Writing HD chain model failed\");\n+}\n+\n+void LegacyScriptPubKeyMan::LoadKeyPool(int64_t nIndex, const CKeyPool &keypool)\n+{\n+    LOCK(cs_KeyStore);\n+    if (keypool.m_pre_split) {\n+        set_pre_split_keypool.insert(nIndex);\n+    } else if (keypool.fInternal) {\n+        setInternalKeyPool.insert(nIndex);\n+    } else {\n+        setExternalKeyPool.insert(nIndex);\n+    }\n+    m_max_keypool_index = std::max(m_max_keypool_index, nIndex);\n+    m_pool_key_to_index[keypool.vchPubKey.GetID()] = nIndex;\n+\n+    // If no metadata exists yet, create a default with the pool key's\n+    // creation time. Note that this may be overwritten by actually\n+    // stored metadata for that key later, which is fine.\n+    CKeyID keyid = keypool.vchPubKey.GetID();\n+    if (mapKeyMetadata.count(keyid) == 0)\n+        mapKeyMetadata[keyid] = CKeyMetadata(keypool.nTime);\n+}\n+\n+bool LegacyScriptPubKeyMan::CanGenerateKeys()\n+{\n+    // A wallet can generate keys if it has an HD seed (IsHDEnabled) or it is a non-HD wallet (pre FEATURE_HD)\n+    LOCK(cs_KeyStore);\n+    return IsHDEnabled() || !CanSupportFeature(FEATURE_HD);\n+}\n+\n+CPubKey LegacyScriptPubKeyMan::GenerateNewSeed()\n+{\n+    assert(!IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n+    CKey key;\n+    key.MakeNewKey(true);\n+    return DeriveNewSeed(key);\n+}\n+\n+CPubKey LegacyScriptPubKeyMan::DeriveNewSeed(const CKey& key)\n+{\n+    int64_t nCreationTime = GetTime();\n+    CKeyMetadata metadata(nCreationTime);\n+\n+    // calculate the seed\n+    CPubKey seed = key.GetPubKey();\n+    assert(key.VerifyPubKey(seed));\n+\n+    // set the hd keypath to \"s\" -> Seed, refers the seed to itself\n+    metadata.hdKeypath     = \"s\";\n+    metadata.has_key_origin = false;\n+    metadata.hd_seed_id = seed.GetID();\n+\n+    {\n+        LOCK(cs_KeyStore);\n+\n+        // mem store the metadata\n+        mapKeyMetadata[seed.GetID()] = metadata;\n+\n+        // write the key&metadata to the database\n+        if (!AddKeyPubKey(key, seed))\n+            throw std::runtime_error(std::string(__func__) + \": AddKeyPubKey failed\");\n+    }\n+\n+    return seed;\n+}\n+\n+void LegacyScriptPubKeyMan::SetHDSeed(const CPubKey& seed)\n+{\n+    LOCK(cs_KeyStore);\n+    // store the keyid (hash160) together with\n+    // the child index counter in the database\n+    // as a hdchain object\n+    CHDChain newHdChain;\n+    newHdChain.nVersion = CanSupportFeature(FEATURE_HD_SPLIT) ? CHDChain::VERSION_HD_CHAIN_SPLIT : CHDChain::VERSION_HD_BASE;\n+    newHdChain.seed_id = seed.GetID();\n+    SetHDChain(newHdChain, false);\n+    NotifyCanGetAddressesChanged();\n+    WalletBatch batch(*m_database);\n+    UnsetWalletFlagWithDB(batch, WALLET_FLAG_BLANK_WALLET);\n+}\n+\n+/**\n+ * Mark old keypool keys as used,\n+ * and generate all new keys\n+ */\n+bool LegacyScriptPubKeyMan::NewKeyPool()\n+{\n+    if (IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+        return false;\n+    }\n+    {\n+        LOCK(cs_KeyStore);\n+        WalletBatch batch(*m_database);\n+\n+        for (const int64_t nIndex : setInternalKeyPool) {\n+            batch.ErasePool(nIndex);\n+        }\n+        setInternalKeyPool.clear();\n+\n+        for (const int64_t nIndex : setExternalKeyPool) {\n+            batch.ErasePool(nIndex);\n+        }\n+        setExternalKeyPool.clear();\n+\n+        for (const int64_t nIndex : set_pre_split_keypool) {\n+            batch.ErasePool(nIndex);\n+        }\n+        set_pre_split_keypool.clear();\n+\n+        m_pool_key_to_index.clear();\n+\n+        if (!TopUpKeyPool()) {\n+            return false;\n+        }\n+        WalletLogPrintf(\"CWallet::NewKeyPool rewrote keypool\\n\");\n+    }\n+    return true;\n+}\n+\n+bool LegacyScriptPubKeyMan::TopUpKeyPool(unsigned int kpSize)\n+{\n+    if (!CanGenerateKeys()) {\n+        return false;\n+    }\n+    {\n+        LOCK(cs_KeyStore);\n+\n+        if (IsLocked()) return false;\n+\n+        // Top up key pool\n+        unsigned int nTargetSize;\n+        if (kpSize > 0)\n+            nTargetSize = kpSize;\n+        else\n+            nTargetSize = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 0);\n+\n+        // count amount of available keys (internal, external)\n+        // make sure the keypool of external and internal keys fits the user selected target (-keypool)\n+        int64_t missingExternal = std::max(std::max((int64_t) nTargetSize, (int64_t) 1) - (int64_t)setExternalKeyPool.size(), (int64_t) 0);\n+        int64_t missingInternal = std::max(std::max((int64_t) nTargetSize, (int64_t) 1) - (int64_t)setInternalKeyPool.size(), (int64_t) 0);\n+\n+        if (!IsHDEnabled() || !CanSupportFeature(FEATURE_HD_SPLIT))\n+        {\n+            // don't create extra internal keys\n+            missingInternal = 0;\n+        }\n+        bool internal = false;\n+        WalletBatch batch(*m_database);\n+        for (int64_t i = missingInternal + missingExternal; i--;)\n+        {\n+            if (i < missingInternal) {\n+                internal = true;\n+            }\n+\n+            CPubKey pubkey(GenerateNewKey(batch, internal));\n+            AddKeypoolPubkeyWithDB(pubkey, internal, batch);\n+        }\n+        if (missingInternal + missingExternal > 0) {\n+            WalletLogPrintf(\"keypool added %d keys (%d internal), size=%u (%u internal)\\n\", missingInternal + missingExternal, missingInternal, setInternalKeyPool.size() + setExternalKeyPool.size() + set_pre_split_keypool.size(), setInternalKeyPool.size());\n+        }\n+    }\n+    NotifyCanGetAddressesChanged();\n+    return true;\n+}\n+\n+void LegacyScriptPubKeyMan::AddKeypoolPubkeyWithDB(const CPubKey& pubkey, const bool internal, WalletBatch& batch)\n+{\n+    LOCK(cs_KeyStore);\n+    assert(m_max_keypool_index < std::numeric_limits<int64_t>::max()); // How in the hell did you use so many keys?\n+    int64_t index = ++m_max_keypool_index;\n+    if (!batch.WritePool(index, CKeyPool(pubkey, internal))) {\n+        throw std::runtime_error(std::string(__func__) + \": writing imported pubkey failed\");\n+    }\n+    if (internal) {\n+        setInternalKeyPool.insert(index);\n+    } else {\n+        setExternalKeyPool.insert(index);\n+    }\n+    m_pool_key_to_index[pubkey.GetID()] = index;\n+}\n+\n+void LegacyScriptPubKeyMan::KeepKey(int64_t nIndex)\n+{\n+    // Remove from key pool\n+    WalletBatch batch(*m_database);\n+    batch.ErasePool(nIndex);\n+    WalletLogPrintf(\"keypool keep %d\\n\", nIndex);\n+}\n+\n+void LegacyScriptPubKeyMan::ReturnKey(int64_t nIndex, bool fInternal, const CKeyID& pubkey_id)\n+{\n+    // Return to key pool\n+    {\n+        LOCK(cs_KeyStore);\n+        if (fInternal) {\n+            setInternalKeyPool.insert(nIndex);\n+        } else if (!set_pre_split_keypool.empty()) {\n+            set_pre_split_keypool.insert(nIndex);\n+        } else {\n+            setExternalKeyPool.insert(nIndex);\n+        }\n+        m_pool_key_to_index[pubkey_id] = nIndex;\n+        NotifyCanGetAddressesChanged();\n+    }\n+    WalletLogPrintf(\"keypool return %d\\n\", nIndex);\n+}\n+\n+bool LegacyScriptPubKeyMan::GetKeyFromPool(CPubKey& result, bool internal)\n+{\n+    if (!CanGetAddresses(internal)) {\n+        return false;\n+    }\n+\n+    CKeyPool keypool;\n+    {\n+        LOCK(cs_KeyStore);\n+        int64_t nIndex;\n+        if (!ReserveKeyFromKeyPool(nIndex, keypool, internal)) {",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 1187,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "ce944a2f30b21f9950fd5f5b69a860eb180d2eb9",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In the original line that this was copied from there was a `&& !DISABLE_PRIVATE_KEYS` check, I believe to avoid the `GenerateNewKey` call below. I think this got accidentally deleted in a [recent update](https://github.com/bitcoin/bitcoin/compare/c14ad7a89811cb1efe6ed82dff22890dc654ac44..ce944a2f30b21f9950fd5f5b69a860eb180d2eb9) and would be good to restore:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/7b701fef58f627956d597817a1f9422edd890cdc/src/wallet/wallet.cpp#L3694",
      "created_at": "2019-10-04T19:29:38Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r331653700",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/331653700"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1187,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/331661838",
      "pull_request_review_id": 297686203,
      "id": 331661838,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMTY2MTgzOA==",
      "diff_hunk": "@@ -0,0 +1,1447 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <key_io.h>\n+#include <outputtype.h>\n+#include <script/descriptor.h>\n+#include <util/bip32.h>\n+#include <util/strencodings.h>\n+#include <util/translation.h>\n+#include <wallet/scriptpubkeyman.h>\n+\n+bool LegacyScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n+{\n+    error.clear();\n+    TopUpKeyPool();\n+\n+    // Generate a new key that is added to wallet\n+    CPubKey new_key;\n+    if (!GetKeyFromPool(new_key)) {\n+        error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+        return false;\n+    }\n+    LearnRelatedScripts(new_key, type);\n+    dest = GetDestinationForKey(new_key, type);\n+    return true;\n+}\n+\n+typedef std::vector<unsigned char> valtype;\n+\n+namespace {\n+\n+/**\n+ * This is an enum that tracks the execution context of a script, similar to\n+ * SigVersion in script/interpreter. It is separate however because we want to\n+ * distinguish between top-level scriptPubKey execution and P2SH redeemScript\n+ * execution (a distinction that has no impact on consensus rules).\n+ */\n+enum class IsMineSigVersion\n+{\n+    TOP = 0,        //!< scriptPubKey execution\n+    P2SH = 1,       //!< P2SH redeemScript\n+    WITNESS_V0 = 2, //!< P2WSH witness script execution\n+};\n+\n+/**\n+ * This is an internal representation of isminetype + invalidity.\n+ * Its order is significant, as we return the max of all explored\n+ * possibilities.\n+ */\n+enum class IsMineResult\n+{\n+    NO = 0,         //!< Not ours\n+    WATCH_ONLY = 1, //!< Included in watch-only balance\n+    SPENDABLE = 2,  //!< Included in all balances\n+    INVALID = 3,    //!< Not spendable by anyone (uncompressed pubkey in segwit, P2SH inside P2SH or witness, witness inside witness)\n+};\n+\n+bool PermitsUncompressed(IsMineSigVersion sigversion)\n+{\n+    return sigversion == IsMineSigVersion::TOP || sigversion == IsMineSigVersion::P2SH;\n+}\n+\n+bool HaveKeys(const std::vector<valtype>& pubkeys, const LegacyScriptPubKeyMan& keystore)\n+{\n+    for (const valtype& pubkey : pubkeys) {\n+        CKeyID keyID = CPubKey(pubkey).GetID();\n+        if (!keystore.HaveKey(keyID)) return false;\n+    }\n+    return true;\n+}\n+\n+IsMineResult IsMineInner(const LegacyScriptPubKeyMan& keystore, const CScript& scriptPubKey, IsMineSigVersion sigversion)\n+{\n+    IsMineResult ret = IsMineResult::NO;\n+\n+    std::vector<valtype> vSolutions;\n+    txnouttype whichType = Solver(scriptPubKey, vSolutions);\n+\n+    CKeyID keyID;\n+    switch (whichType)\n+    {\n+    case TX_NONSTANDARD:\n+    case TX_NULL_DATA:\n+    case TX_WITNESS_UNKNOWN:\n+        break;\n+    case TX_PUBKEY:\n+        keyID = CPubKey(vSolutions[0]).GetID();\n+        if (!PermitsUncompressed(sigversion) && vSolutions[0].size() != 33) {\n+            return IsMineResult::INVALID;\n+        }\n+        if (keystore.HaveKey(keyID)) {\n+            ret = std::max(ret, IsMineResult::SPENDABLE);\n+        }\n+        break;\n+    case TX_WITNESS_V0_KEYHASH:\n+    {\n+        if (sigversion == IsMineSigVersion::WITNESS_V0) {\n+            // P2WPKH inside P2WSH is invalid.\n+            return IsMineResult::INVALID;\n+        }\n+        if (sigversion == IsMineSigVersion::TOP && !keystore.HaveCScript(CScriptID(CScript() << OP_0 << vSolutions[0]))) {\n+            // We do not support bare witness outputs unless the P2SH version of it would be\n+            // acceptable as well. This protects against matching before segwit activates.\n+            // This also applies to the P2WSH case.\n+            break;\n+        }\n+        ret = std::max(ret, IsMineInner(keystore, GetScriptForDestination(PKHash(uint160(vSolutions[0]))), IsMineSigVersion::WITNESS_V0));\n+        break;\n+    }\n+    case TX_PUBKEYHASH:\n+    {\n+        keyID = CKeyID(uint160(vSolutions[0]));\n+        CPubKey pubkey;\n+        if (keystore.GetPubKey(keyID, pubkey)) {\n+            if (!PermitsUncompressed(sigversion) && !pubkey.IsCompressed()) {\n+                return IsMineResult::INVALID;\n+            } else {\n+                ret = std::max(ret, IsMineResult::WATCH_ONLY);\n+            }\n+        }\n+        if (keystore.HaveKey(keyID)) {\n+            ret = std::max(ret, IsMineResult::SPENDABLE);\n+        }\n+        break;\n+    }\n+    case TX_SCRIPTHASH:\n+    {\n+        if (sigversion != IsMineSigVersion::TOP) {\n+            // P2SH inside P2WSH or P2SH is invalid.\n+            return IsMineResult::INVALID;\n+        }\n+        CScriptID scriptID = CScriptID(uint160(vSolutions[0]));\n+        CScript subscript;\n+        if (keystore.GetCScript(scriptID, subscript)) {\n+            ret = std::max(ret, IsMineInner(keystore, subscript, IsMineSigVersion::P2SH));\n+        }\n+        break;\n+    }\n+    case TX_WITNESS_V0_SCRIPTHASH:\n+    {\n+        if (sigversion == IsMineSigVersion::WITNESS_V0) {\n+            // P2WSH inside P2WSH is invalid.\n+            return IsMineResult::INVALID;\n+        }\n+        if (sigversion == IsMineSigVersion::TOP && !keystore.HaveCScript(CScriptID(CScript() << OP_0 << vSolutions[0]))) {\n+            break;\n+        }\n+        uint160 hash;\n+        CRIPEMD160().Write(&vSolutions[0][0], vSolutions[0].size()).Finalize(hash.begin());\n+        CScriptID scriptID = CScriptID(hash);\n+        CScript subscript;\n+        if (keystore.GetCScript(scriptID, subscript)) {\n+            ret = std::max(ret, IsMineInner(keystore, subscript, IsMineSigVersion::WITNESS_V0));\n+        }\n+        break;\n+    }\n+\n+    case TX_MULTISIG:\n+    {\n+        // Never treat bare multisig outputs as ours (they can still be made watchonly-though)\n+        if (sigversion == IsMineSigVersion::TOP) {\n+            break;\n+        }\n+\n+        // Only consider transactions \"mine\" if we own ALL the\n+        // keys involved. Multi-signature transactions that are\n+        // partially owned (somebody else has a key that can spend\n+        // them) enable spend-out-from-under-you attacks, especially\n+        // in shared-wallet situations.\n+        std::vector<valtype> keys(vSolutions.begin()+1, vSolutions.begin()+vSolutions.size()-1);\n+        if (!PermitsUncompressed(sigversion)) {\n+            for (size_t i = 0; i < keys.size(); i++) {\n+                if (keys[i].size() != 33) {\n+                    return IsMineResult::INVALID;\n+                }\n+            }\n+        }\n+        if (HaveKeys(keys, keystore)) {\n+            ret = std::max(ret, IsMineResult::SPENDABLE);\n+        }\n+        break;\n+    }\n+    }\n+\n+    if (ret == IsMineResult::NO && keystore.HaveWatchOnly(scriptPubKey)) {\n+        ret = std::max(ret, IsMineResult::WATCH_ONLY);\n+    }\n+    return ret;\n+}\n+\n+} // namespace\n+\n+isminetype LegacyScriptPubKeyMan::IsMine(const CScript& script) const\n+{\n+    switch (IsMineInner(*this, script, IsMineSigVersion::TOP)) {\n+    case IsMineResult::INVALID:\n+    case IsMineResult::NO:\n+        return ISMINE_NO;\n+    case IsMineResult::WATCH_ONLY:\n+        return ISMINE_WATCH_ONLY;\n+    case IsMineResult::SPENDABLE:\n+        return ISMINE_SPENDABLE;\n+    }\n+    assert(false);\n+}\n+\n+bool LegacyScriptPubKeyMan::HasEncryptedData() const\n+{\n+    LOCK(cs_KeyStore);\n+    return HasEncryptionKeys() || !mapCryptedKeys.empty();\n+}\n+\n+bool LegacyScriptPubKeyMan::CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys)\n+{\n+    {\n+        LOCK(cs_KeyStore);\n+        if (!mapKeys.empty())\n+            return false;\n+\n+        bool keyPass = mapCryptedKeys.empty(); // Always pass when there are no encrypted keys\n+        bool keyFail = false;\n+        CryptedKeyMap::const_iterator mi = mapCryptedKeys.begin();\n+        for (; mi != mapCryptedKeys.end(); ++mi)\n+        {\n+            const CPubKey &vchPubKey = (*mi).second.first;\n+            const std::vector<unsigned char> &vchCryptedSecret = (*mi).second.second;\n+            CKey key;\n+            if (!DecryptKey(master_key, vchCryptedSecret, vchPubKey, key))\n+            {\n+                keyFail = true;\n+                break;\n+            }\n+            keyPass = true;\n+            if (fDecryptionThoroughlyChecked)\n+                break;\n+        }\n+        if (keyPass && keyFail)\n+        {\n+            LogPrintf(\"The wallet is probably corrupted: Some keys decrypt but not all.\\n\");\n+            throw std::runtime_error(\"Error unlocking wallet: some keys decrypt but not all. Your wallet file may be corrupt.\");\n+        }\n+        if (keyFail || (!keyPass && !accept_no_keys))\n+            return false;\n+        fDecryptionThoroughlyChecked = true;\n+    }\n+    return true;\n+}\n+\n+bool LegacyScriptPubKeyMan::Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch)\n+{\n+    LOCK(cs_KeyStore);\n+    encrypted_batch = batch;\n+    if (!mapCryptedKeys.empty()) {\n+        encrypted_batch = nullptr;\n+        return false;\n+    }\n+\n+    KeyMap keys_to_encrypt;\n+    keys_to_encrypt.swap(mapKeys); // Clear mapKeys so AddCryptedKeyInner will succeed.\n+    for (const KeyMap::value_type& mKey : keys_to_encrypt)\n+    {\n+        const CKey &key = mKey.second;\n+        CPubKey vchPubKey = key.GetPubKey();\n+        CKeyingMaterial vchSecret(key.begin(), key.end());\n+        std::vector<unsigned char> vchCryptedSecret;\n+        if (!EncryptSecret(master_key, vchSecret, vchPubKey.GetHash(), vchCryptedSecret)) {\n+            encrypted_batch = nullptr;\n+            return false;\n+        }\n+        if (!AddCryptedKey(vchPubKey, vchCryptedSecret)) {\n+            encrypted_batch = nullptr;\n+            return false;\n+        }\n+    }\n+    encrypted_batch = nullptr;\n+    return true;\n+}\n+\n+bool LegacyScriptPubKeyMan::GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool)\n+{\n+    if (!CanGetAddresses(internal)) {\n+        return false;\n+    }\n+\n+    {\n+        LOCK(cs_KeyStore);\n+        if (!ReserveKeyFromKeyPool(index, keypool, internal)) {\n+            return false;\n+        }\n+        LearnRelatedScripts(keypool.vchPubKey, type);\n+        address = GetDestinationForKey(keypool.vchPubKey, type);\n+    }\n+    return true;\n+}\n+\n+void LegacyScriptPubKeyMan::KeepDestination(int64_t index)\n+{\n+    KeepKey(index);\n+}\n+\n+void LegacyScriptPubKeyMan::ReturnDestination(int64_t index, bool internal, const CTxDestination& addr)\n+{\n+    ReturnKey(index, internal, m_reserved_key_to_index[index]);\n+    m_reserved_key_to_index.erase(index);\n+}\n+\n+bool LegacyScriptPubKeyMan::TopUp(unsigned int size)\n+{\n+    return TopUpKeyPool(size);\n+}\n+\n+void LegacyScriptPubKeyMan::MarkUnusedAddresses(const CScript& script)\n+{\n+    LOCK(cs_KeyStore);\n+    // extract addresses and check if they match with an unused keypool key\n+    for (const auto& keyid : GetAffectedKeys(script, *this)) {\n+        std::map<CKeyID, int64_t>::const_iterator mi = m_pool_key_to_index.find(keyid);\n+        if (mi != m_pool_key_to_index.end()) {\n+            WalletLogPrintf(\"%s: Detected a used keypool key, mark all keypool key up to this key as used\\n\", __func__);\n+            MarkReserveKeysAsUsed(mi->second);\n+\n+            if (!TopUpKeyPool()) {\n+                WalletLogPrintf(\"%s: Topping up keypool failed (locked wallet)\\n\", __func__);\n+            }\n+        }\n+    }\n+}\n+\n+void LegacyScriptPubKeyMan::UpgradeKeyMetadata()\n+{\n+    LOCK(cs_KeyStore);\n+    if (IsLocked() || IsWalletFlagSet(WALLET_FLAG_KEY_ORIGIN_METADATA)) {\n+        return;\n+    }\n+\n+    std::unique_ptr<WalletBatch> batch = MakeUnique<WalletBatch>(*m_database);\n+    for (auto& meta_pair : mapKeyMetadata) {\n+        CKeyMetadata& meta = meta_pair.second;\n+        if (!meta.hd_seed_id.IsNull() && !meta.has_key_origin && meta.hdKeypath != \"s\") { // If the hdKeypath is \"s\", that's the seed and it doesn't have a key origin\n+            CKey key;\n+            GetKey(meta.hd_seed_id, key);\n+            CExtKey masterKey;\n+            masterKey.SetSeed(key.begin(), key.size());\n+            // Add to map\n+            CKeyID master_id = masterKey.key.GetPubKey().GetID();\n+            std::copy(master_id.begin(), master_id.begin() + 4, meta.key_origin.fingerprint);\n+            if (!ParseHDKeypath(meta.hdKeypath, meta.key_origin.path)) {\n+                throw std::runtime_error(\"Invalid stored hdKeypath\");\n+            }\n+            meta.has_key_origin = true;\n+            if (meta.nVersion < CKeyMetadata::VERSION_WITH_KEY_ORIGIN) {\n+                meta.nVersion = CKeyMetadata::VERSION_WITH_KEY_ORIGIN;\n+            }\n+\n+            // Write meta to wallet\n+            CPubKey pubkey;\n+            if (GetPubKey(meta_pair.first, pubkey)) {\n+                batch->WriteKeyMetadata(meta, pubkey, true);\n+            }\n+        }\n+    }\n+    batch.reset();\n+}\n+\n+bool LegacyScriptPubKeyMan::SetupGeneration(bool force)\n+{\n+    if ((CanGenerateKeys() && !force) || IsLocked()) {\n+        return false;\n+    }\n+\n+    SetHDSeed(GenerateNewSeed());\n+    if (!NewKeyPool()) {\n+        return false;\n+    }\n+    return true;\n+}\n+\n+bool LegacyScriptPubKeyMan::IsHDEnabled() const\n+{\n+    return !hdChain.seed_id.IsNull();\n+}\n+\n+bool LegacyScriptPubKeyMan::CanGetAddresses(bool internal)\n+{\n+    LOCK(cs_KeyStore);\n+    // Check if the keypool has keys\n+    bool keypool_has_keys;\n+    if (internal && CanSupportFeature(FEATURE_HD_SPLIT)) {\n+        keypool_has_keys = setInternalKeyPool.size() > 0;\n+    } else {\n+        keypool_has_keys = KeypoolCountExternalKeys() > 0;\n+    }\n+    // If the keypool doesn't have keys, check if we can generate them\n+    if (!keypool_has_keys) {\n+        return CanGenerateKeys();\n+    }\n+    return keypool_has_keys;\n+}\n+\n+bool LegacyScriptPubKeyMan::Upgrade(int prev_version, int new_version, std::string& error)\n+{\n+    LOCK(cs_KeyStore);\n+    error = \"\";\n+    bool hd_upgrade = false;\n+    bool split_upgrade = false;\n+    if (CanSupportFeature(FEATURE_HD) && !IsHDEnabled()) {\n+        WalletLogPrintf(\"Upgrading wallet to HD\\n\");\n+        SetMinVersion(FEATURE_HD);\n+\n+        // generate a new master key\n+        SetHDSeed(GenerateNewSeed());\n+        hd_upgrade = true;\n+    }\n+    // Upgrade to HD chain split if necessary\n+    if (CanSupportFeature(FEATURE_HD_SPLIT) && hdChain.nVersion < 2 /* VERSION_HD_CHAIN_SPLIT */) {\n+        WalletLogPrintf(\"Upgrading wallet to use HD chain split\\n\");\n+        SetMinVersion(FEATURE_PRE_SPLIT_KEYPOOL);\n+        split_upgrade = FEATURE_HD_SPLIT > prev_version;\n+    }\n+    // Mark all keys currently in the keypool as pre-split\n+    if (split_upgrade) {\n+        MarkPreSplitKeys();\n+    }\n+    // Regenerate the keypool if upgraded to HD\n+    if (hd_upgrade) {\n+        if (!TopUpKeyPool()) {\n+            error = _(\"Unable to generate keys\").translated;\n+            return false;\n+        }\n+    }\n+    return true;\n+}\n+\n+bool LegacyScriptPubKeyMan::HavePrivateKeys() const\n+{\n+    LOCK(cs_KeyStore);\n+    return !mapKeys.empty() || !mapCryptedKeys.empty();\n+}\n+\n+void LegacyScriptPubKeyMan::RewriteDB()\n+{\n+    LOCK(cs_KeyStore);\n+    setInternalKeyPool.clear();\n+    setExternalKeyPool.clear();\n+    m_pool_key_to_index.clear();\n+    // Note: can't top-up keypool here, because wallet is locked.\n+    // User will be prompted to unlock wallet the next operation\n+    // that requires a new key.\n+}\n+\n+static int64_t GetOldestKeyTimeInPool(const std::set<int64_t>& setKeyPool, WalletBatch& batch) {\n+    if (setKeyPool.empty()) {\n+        return GetTime();\n+    }\n+\n+    CKeyPool keypool;\n+    int64_t nIndex = *(setKeyPool.begin());\n+    if (!batch.ReadPool(nIndex, keypool)) {\n+        throw std::runtime_error(std::string(__func__) + \": read oldest key in keypool failed\");\n+    }\n+    assert(keypool.vchPubKey.IsValid());\n+    return keypool.nTime;\n+}\n+\n+int64_t LegacyScriptPubKeyMan::GetOldestKeyPoolTime()\n+{\n+    LOCK(cs_KeyStore);\n+\n+    WalletBatch batch(*m_database);\n+\n+    // load oldest key from keypool, get time and return\n+    int64_t oldestKey = GetOldestKeyTimeInPool(setExternalKeyPool, batch);\n+    if (IsHDEnabled() && CanSupportFeature(FEATURE_HD_SPLIT)) {\n+        oldestKey = std::max(GetOldestKeyTimeInPool(setInternalKeyPool, batch), oldestKey);\n+        if (!set_pre_split_keypool.empty()) {\n+            oldestKey = std::max(GetOldestKeyTimeInPool(set_pre_split_keypool, batch), oldestKey);\n+        }\n+    }\n+\n+    return oldestKey;\n+}\n+\n+size_t LegacyScriptPubKeyMan::KeypoolCountExternalKeys()\n+{\n+    LOCK(cs_KeyStore);\n+    return setExternalKeyPool.size() + set_pre_split_keypool.size();\n+}\n+\n+unsigned int LegacyScriptPubKeyMan::GetKeyPoolSize() const\n+{\n+    LOCK(cs_KeyStore);\n+    return setInternalKeyPool.size() + setExternalKeyPool.size() + set_pre_split_keypool.size();\n+}\n+\n+int64_t LegacyScriptPubKeyMan::GetTimeFirstKey() const\n+{\n+    LOCK(cs_KeyStore);\n+    return nTimeFirstKey;\n+}\n+\n+std::unique_ptr<SigningProvider> LegacyScriptPubKeyMan::GetSigningProvider(const CScript& script) const\n+{\n+    return MakeUnique<LegacySigningProvider>(*this);\n+}\n+\n+bool LegacyScriptPubKeyMan::CanProvide(const CScript& script, SignatureData& sigdata)\n+{\n+    if (IsMine(script) != ISMINE_NO) {\n+        // If it IsMine, we can always provide in some way\n+        return true;\n+    } else if (HaveCScript(CScriptID(script))) {\n+        // We can still provide some stuff if we have the script, but IsMine failed because we don't have keys\n+        return true;\n+    } else {\n+        // If, given the stuff in sigdata, we could make a valid sigature, then we can provide for this script\n+        ProduceSignature(*this, DUMMY_SIGNATURE_CREATOR, script, sigdata);\n+        if (!sigdata.signatures.empty()) {\n+            // If we could make signatures, make sure we have a private key to actually make a signature\n+            bool has_privkeys = false;\n+            for (const auto& key_sig_pair : sigdata.signatures) {\n+                has_privkeys |= HaveKey(key_sig_pair.first);\n+            }\n+            return has_privkeys;\n+        }\n+        return false;\n+    }\n+}\n+\n+const CKeyMetadata* LegacyScriptPubKeyMan::GetMetadata(uint160 id) const\n+{\n+    LOCK(cs_KeyStore);\n+    auto it = mapKeyMetadata.find(CKeyID(id));\n+    if (it != mapKeyMetadata.end()) {\n+        return &it->second;\n+    } else {\n+        auto it2 = m_script_metadata.find(CScriptID(id));\n+        if (it2 != m_script_metadata.end()) {\n+            return &it2->second;\n+        }\n+    }\n+    return nullptr;\n+}\n+\n+uint256 LegacyScriptPubKeyMan::GetID() const\n+{\n+    return uint256S(\"0000000000000000000000000000000000000000000000000000000000000001\");\n+}\n+\n+/**\n+ * Update wallet first key creation time. This should be called whenever keys\n+ * are added to the wallet, with the oldest key creation time.\n+ */\n+void LegacyScriptPubKeyMan::UpdateTimeFirstKey(int64_t nCreateTime)\n+{\n+    AssertLockHeld(cs_KeyStore);\n+    if (nCreateTime <= 1) {\n+        // Cannot determine birthday information, so set the wallet birthday to\n+        // the beginning of time.\n+        nTimeFirstKey = 1;\n+    } else if (!nTimeFirstKey || nCreateTime < nTimeFirstKey) {\n+        nTimeFirstKey = nCreateTime;\n+    }\n+}\n+\n+bool LegacyScriptPubKeyMan::LoadKey(const CKey& key, const CPubKey &pubkey)\n+{\n+    return AddKeyPubKeyInner(key, pubkey);\n+}\n+\n+bool LegacyScriptPubKeyMan::AddKeyPubKey(const CKey& secret, const CPubKey &pubkey)\n+{\n+    WalletBatch batch(*m_database);\n+    return LegacyScriptPubKeyMan::AddKeyPubKeyWithDB(batch, secret, pubkey);\n+}\n+\n+bool LegacyScriptPubKeyMan::AddKeyPubKeyWithDB(WalletBatch& batch, const CKey& secret, const CPubKey& pubkey)\n+{\n+    AssertLockHeld(cs_KeyStore);\n+\n+    // Make sure we aren't adding private keys to private key disabled wallets\n+    assert(!IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n+\n+    // FillableSigningProvider has no concept of wallet databases, but calls AddCryptedKey\n+    // which is overridden below.  To avoid flushes, the database handle is\n+    // tunneled through to it.\n+    bool needsDB = !encrypted_batch;\n+    if (needsDB) {\n+        encrypted_batch = &batch;\n+    }\n+    if (!AddKeyPubKeyInner(secret, pubkey)) {\n+        if (needsDB) encrypted_batch = nullptr;\n+        return false;\n+    }\n+    if (needsDB) encrypted_batch = nullptr;\n+\n+    // check if we need to remove from watch-only\n+    CScript script;\n+    script = GetScriptForDestination(PKHash(pubkey));\n+    if (HaveWatchOnly(script)) {\n+        RemoveWatchOnly(script);\n+    }\n+    script = GetScriptForRawPubKey(pubkey);\n+    if (HaveWatchOnly(script)) {\n+        RemoveWatchOnly(script);\n+    }\n+\n+    if (!HasEncryptedData()) {\n+        return batch.WriteKey(pubkey,\n+                                                 secret.GetPrivKey(),\n+                                                 mapKeyMetadata[pubkey.GetID()]);\n+    }\n+    UnsetWalletFlagWithDB(batch, WALLET_FLAG_BLANK_WALLET);\n+    return true;\n+}\n+\n+bool LegacyScriptPubKeyMan::LoadCScript(const CScript& redeemScript)\n+{\n+    /* A sanity check was added in pull #3843 to avoid adding redeemScripts\n+     * that never can be redeemed. However, old wallets may still contain\n+     * these. Do not add them to the wallet and warn. */\n+    if (redeemScript.size() > MAX_SCRIPT_ELEMENT_SIZE)\n+    {\n+        std::string strAddr = EncodeDestination(ScriptHash(redeemScript));\n+        WalletLogPrintf(\"%s: Warning: This wallet contains a redeemScript of size %i which exceeds maximum size %i thus can never be redeemed. Do not use address %s.\\n\", __func__, redeemScript.size(), MAX_SCRIPT_ELEMENT_SIZE, strAddr);\n+        return true;\n+    }\n+\n+    return FillableSigningProvider::AddCScript(redeemScript);\n+}\n+\n+void LegacyScriptPubKeyMan::LoadKeyMetadata(const CKeyID& keyID, const CKeyMetadata& meta)\n+{\n+    LOCK(cs_KeyStore);\n+    UpdateTimeFirstKey(meta.nCreateTime);\n+    mapKeyMetadata[keyID] = meta;\n+}\n+\n+void LegacyScriptPubKeyMan::LoadScriptMetadata(const CScriptID& script_id, const CKeyMetadata& meta)\n+{\n+    LOCK(cs_KeyStore);\n+    UpdateTimeFirstKey(meta.nCreateTime);\n+    m_script_metadata[script_id] = meta;\n+}\n+\n+bool LegacyScriptPubKeyMan::AddKeyPubKeyInner(const CKey& key, const CPubKey &pubkey)\n+{\n+    LOCK(cs_KeyStore);\n+    if (!HasEncryptedData()) {\n+        return FillableSigningProvider::AddKeyPubKey(key, pubkey);\n+    }\n+\n+    if (IsLocked()) {\n+        return false;\n+    }\n+\n+    std::vector<unsigned char> vchCryptedSecret;\n+    CKeyingMaterial vchSecret(key.begin(), key.end());\n+    if (!EncryptSecret(GetEncryptionKey(), vchSecret, pubkey.GetHash(), vchCryptedSecret)) {\n+        return false;\n+    }\n+\n+    if (!AddCryptedKey(pubkey, vchCryptedSecret)) {\n+        return false;\n+    }\n+    return true;\n+}\n+\n+bool LegacyScriptPubKeyMan::LoadCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret)\n+{\n+    return AddCryptedKeyInner(vchPubKey, vchCryptedSecret);\n+}\n+\n+bool LegacyScriptPubKeyMan::AddCryptedKeyInner(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret)\n+{\n+    LOCK(cs_KeyStore);\n+    if (!mapKeys.empty()) {\n+        return false;\n+    }\n+\n+    mapCryptedKeys[vchPubKey.GetID()] = std::make_pair(vchPubKey, vchCryptedSecret);\n+    ImplicitlyLearnRelatedKeyScripts(vchPubKey);\n+    return true;\n+}\n+\n+bool LegacyScriptPubKeyMan::AddCryptedKey(const CPubKey &vchPubKey,\n+                            const std::vector<unsigned char> &vchCryptedSecret)\n+{\n+    if (!AddCryptedKeyInner(vchPubKey, vchCryptedSecret))\n+        return false;\n+    {\n+        LOCK(cs_KeyStore);\n+        if (encrypted_batch)\n+            return encrypted_batch->WriteCryptedKey(vchPubKey,\n+                                                        vchCryptedSecret,\n+                                                        mapKeyMetadata[vchPubKey.GetID()]);\n+        else\n+            return WalletBatch(*m_database).WriteCryptedKey(vchPubKey,\n+                                                            vchCryptedSecret,\n+                                                            mapKeyMetadata[vchPubKey.GetID()]);\n+    }\n+}\n+\n+bool LegacyScriptPubKeyMan::HaveWatchOnly(const CScript &dest) const\n+{\n+    LOCK(cs_KeyStore);\n+    return setWatchOnly.count(dest) > 0;\n+}\n+\n+bool LegacyScriptPubKeyMan::HaveWatchOnly() const\n+{\n+    LOCK(cs_KeyStore);\n+    return (!setWatchOnly.empty());\n+}\n+\n+static bool ExtractPubKey(const CScript &dest, CPubKey& pubKeyOut)\n+{\n+    std::vector<std::vector<unsigned char>> solutions;\n+    return Solver(dest, solutions) == TX_PUBKEY &&\n+        (pubKeyOut = CPubKey(solutions[0])).IsFullyValid();\n+}\n+\n+bool LegacyScriptPubKeyMan::RemoveWatchOnly(const CScript &dest)\n+{\n+    {\n+        LOCK(cs_KeyStore);\n+        setWatchOnly.erase(dest);\n+        CPubKey pubKey;\n+        if (ExtractPubKey(dest, pubKey)) {\n+            mapWatchKeys.erase(pubKey.GetID());\n+        }\n+        // Related CScripts are not removed; having superfluous scripts around is\n+        // harmless (see comment in ImplicitlyLearnRelatedKeyScripts).\n+    }\n+\n+    if (!HaveWatchOnly())\n+        NotifyWatchonlyChanged(false);\n+    if (!WalletBatch(*m_database).EraseWatchOnly(dest))\n+        return false;\n+\n+    return true;\n+}\n+\n+bool LegacyScriptPubKeyMan::LoadWatchOnly(const CScript &dest)\n+{\n+    return AddWatchOnlyInMem(dest);\n+}\n+\n+bool LegacyScriptPubKeyMan::AddWatchOnlyInMem(const CScript &dest)\n+{\n+    LOCK(cs_KeyStore);\n+    setWatchOnly.insert(dest);\n+    CPubKey pubKey;\n+    if (ExtractPubKey(dest, pubKey)) {\n+        mapWatchKeys[pubKey.GetID()] = pubKey;\n+        ImplicitlyLearnRelatedKeyScripts(pubKey);\n+    }\n+    return true;\n+}\n+\n+bool LegacyScriptPubKeyMan::AddWatchOnlyWithDB(WalletBatch &batch, const CScript& dest)\n+{\n+    if (!AddWatchOnlyInMem(dest))\n+        return false;\n+    const CKeyMetadata& meta = m_script_metadata[CScriptID(dest)];\n+    UpdateTimeFirstKey(meta.nCreateTime);\n+    NotifyWatchonlyChanged(true);\n+    if (batch.WriteWatchOnly(dest, meta)) {\n+        UnsetWalletFlagWithDB(batch, WALLET_FLAG_BLANK_WALLET);\n+        return true;\n+    }\n+    return false;\n+}\n+\n+bool LegacyScriptPubKeyMan::AddWatchOnlyWithDB(WalletBatch &batch, const CScript& dest, int64_t create_time)\n+{\n+    m_script_metadata[CScriptID(dest)].nCreateTime = create_time;\n+    return AddWatchOnlyWithDB(batch, dest);\n+}\n+\n+bool LegacyScriptPubKeyMan::AddWatchOnly(const CScript& dest)\n+{\n+    WalletBatch batch(*m_database);\n+    return AddWatchOnlyWithDB(batch, dest);\n+}\n+\n+bool LegacyScriptPubKeyMan::AddWatchOnly(const CScript& dest, int64_t nCreateTime)\n+{\n+    m_script_metadata[CScriptID(dest)].nCreateTime = nCreateTime;\n+    return AddWatchOnly(dest);\n+}\n+\n+void LegacyScriptPubKeyMan::SetHDChain(const CHDChain& chain, bool memonly)\n+{\n+    LOCK(cs_KeyStore);\n+    if (!memonly && !WalletBatch(*m_database).WriteHDChain(chain))\n+        throw std::runtime_error(std::string(__func__) + \": writing chain failed\");\n+\n+    hdChain = chain;\n+}\n+\n+bool LegacyScriptPubKeyMan::HaveKey(const CKeyID &address) const\n+{\n+    LOCK(cs_KeyStore);\n+    if (!HasEncryptedData()) {\n+        return FillableSigningProvider::HaveKey(address);\n+    }\n+    return mapCryptedKeys.count(address) > 0;\n+}\n+\n+bool LegacyScriptPubKeyMan::GetKey(const CKeyID &address, CKey& keyOut) const\n+{\n+    LOCK(cs_KeyStore);\n+    if (!HasEncryptedData()) {\n+        return FillableSigningProvider::GetKey(address, keyOut);\n+    }\n+\n+    CryptedKeyMap::const_iterator mi = mapCryptedKeys.find(address);\n+    if (mi != mapCryptedKeys.end())\n+    {\n+        const CPubKey &vchPubKey = (*mi).second.first;\n+        const std::vector<unsigned char> &vchCryptedSecret = (*mi).second.second;\n+        return DecryptKey(GetEncryptionKey(), vchCryptedSecret, vchPubKey, keyOut);\n+    }\n+    return false;\n+}\n+\n+bool LegacyScriptPubKeyMan::GetKeyOrigin(const CKeyID& keyID, KeyOriginInfo& info) const\n+{\n+    CKeyMetadata meta;\n+    {\n+        LOCK(cs_KeyStore);\n+        auto it = mapKeyMetadata.find(keyID);\n+        if (it != mapKeyMetadata.end()) {\n+            meta = it->second;\n+        }\n+    }\n+    if (meta.has_key_origin) {\n+        std::copy(meta.key_origin.fingerprint, meta.key_origin.fingerprint + 4, info.fingerprint);\n+        info.path = meta.key_origin.path;\n+    } else { // Single pubkeys get the master fingerprint of themselves\n+        std::copy(keyID.begin(), keyID.begin() + 4, info.fingerprint);\n+    }\n+    return true;\n+}\n+\n+bool LegacyScriptPubKeyMan::GetWatchPubKey(const CKeyID &address, CPubKey &pubkey_out) const\n+{\n+    LOCK(cs_KeyStore);\n+    WatchKeyMap::const_iterator it = mapWatchKeys.find(address);\n+    if (it != mapWatchKeys.end()) {\n+        pubkey_out = it->second;\n+        return true;\n+    }\n+    return false;\n+}\n+\n+bool LegacyScriptPubKeyMan::GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const\n+{\n+    LOCK(cs_KeyStore);\n+    if (!HasEncryptedData()) {\n+        if (!FillableSigningProvider::GetPubKey(address, vchPubKeyOut)) {\n+            return GetWatchPubKey(address, vchPubKeyOut);\n+        }\n+        return true;\n+    }\n+\n+    CryptedKeyMap::const_iterator mi = mapCryptedKeys.find(address);\n+    if (mi != mapCryptedKeys.end())\n+    {\n+        vchPubKeyOut = (*mi).second.first;\n+        return true;\n+    }\n+    // Check for watch-only pubkeys\n+    return GetWatchPubKey(address, vchPubKeyOut);\n+}\n+\n+CPubKey LegacyScriptPubKeyMan::GenerateNewKey(WalletBatch &batch, bool internal)\n+{\n+    assert(!IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n+    assert(!IsWalletFlagSet(WALLET_FLAG_BLANK_WALLET));\n+    AssertLockHeld(cs_KeyStore);\n+    bool fCompressed = CanSupportFeature(FEATURE_COMPRPUBKEY); // default to compressed public keys if we want 0.6.0 wallets\n+\n+    CKey secret;\n+\n+    // Create new metadata\n+    int64_t nCreationTime = GetTime();\n+    CKeyMetadata metadata(nCreationTime);\n+\n+    // use HD key derivation if HD was enabled during wallet creation and a seed is present\n+    if (IsHDEnabled()) {\n+        DeriveNewChildKey(batch, metadata, secret, (CanSupportFeature(FEATURE_HD_SPLIT) ? internal : false));\n+    } else {\n+        secret.MakeNewKey(fCompressed);\n+    }\n+\n+    // Compressed public keys were introduced in version 0.6.0\n+    if (fCompressed) {\n+        SetMinVersion(FEATURE_COMPRPUBKEY);\n+    }\n+\n+    CPubKey pubkey = secret.GetPubKey();\n+    assert(secret.VerifyPubKey(pubkey));\n+\n+    mapKeyMetadata[pubkey.GetID()] = metadata;\n+    UpdateTimeFirstKey(nCreationTime);\n+\n+    if (!AddKeyPubKeyWithDB(batch, secret, pubkey)) {\n+        throw std::runtime_error(std::string(__func__) + \": AddKey failed\");\n+    }\n+    return pubkey;\n+}\n+\n+const uint32_t BIP32_HARDENED_KEY_LIMIT = 0x80000000;\n+\n+void LegacyScriptPubKeyMan::DeriveNewChildKey(WalletBatch &batch, CKeyMetadata& metadata, CKey& secret, bool internal)\n+{\n+    // for now we use a fixed keypath scheme of m/0'/0'/k\n+    CKey seed;                     //seed (256bit)\n+    CExtKey masterKey;             //hd master key\n+    CExtKey accountKey;            //key at m/0'\n+    CExtKey chainChildKey;         //key at m/0'/0' (external) or m/0'/1' (internal)\n+    CExtKey childKey;              //key at m/0'/0'/<n>'\n+\n+    // try to get the seed\n+    if (!GetKey(hdChain.seed_id, seed))\n+        throw std::runtime_error(std::string(__func__) + \": seed not found\");\n+\n+    masterKey.SetSeed(seed.begin(), seed.size());\n+\n+    // derive m/0'\n+    // use hardened derivation (child keys >= 0x80000000 are hardened after bip32)\n+    masterKey.Derive(accountKey, BIP32_HARDENED_KEY_LIMIT);\n+\n+    // derive m/0'/0' (external chain) OR m/0'/1' (internal chain)\n+    assert(internal ? CanSupportFeature(FEATURE_HD_SPLIT) : true);\n+    accountKey.Derive(chainChildKey, BIP32_HARDENED_KEY_LIMIT+(internal ? 1 : 0));\n+\n+    // derive child key at next index, skip keys already known to the wallet\n+    do {\n+        // always derive hardened keys\n+        // childIndex | BIP32_HARDENED_KEY_LIMIT = derive childIndex in hardened child-index-range\n+        // example: 1 | BIP32_HARDENED_KEY_LIMIT == 0x80000001 == 2147483649\n+        if (internal) {\n+            chainChildKey.Derive(childKey, hdChain.nInternalChainCounter | BIP32_HARDENED_KEY_LIMIT);\n+            metadata.hdKeypath = \"m/0'/1'/\" + std::to_string(hdChain.nInternalChainCounter) + \"'\";\n+            metadata.key_origin.path.push_back(0 | BIP32_HARDENED_KEY_LIMIT);\n+            metadata.key_origin.path.push_back(1 | BIP32_HARDENED_KEY_LIMIT);\n+            metadata.key_origin.path.push_back(hdChain.nInternalChainCounter | BIP32_HARDENED_KEY_LIMIT);\n+            hdChain.nInternalChainCounter++;\n+        }\n+        else {\n+            chainChildKey.Derive(childKey, hdChain.nExternalChainCounter | BIP32_HARDENED_KEY_LIMIT);\n+            metadata.hdKeypath = \"m/0'/0'/\" + std::to_string(hdChain.nExternalChainCounter) + \"'\";\n+            metadata.key_origin.path.push_back(0 | BIP32_HARDENED_KEY_LIMIT);\n+            metadata.key_origin.path.push_back(0 | BIP32_HARDENED_KEY_LIMIT);\n+            metadata.key_origin.path.push_back(hdChain.nExternalChainCounter | BIP32_HARDENED_KEY_LIMIT);\n+            hdChain.nExternalChainCounter++;\n+        }\n+    } while (HaveKey(childKey.key.GetPubKey().GetID()));\n+    secret = childKey.key;\n+    metadata.hd_seed_id = hdChain.seed_id;\n+    CKeyID master_id = masterKey.key.GetPubKey().GetID();\n+    std::copy(master_id.begin(), master_id.begin() + 4, metadata.key_origin.fingerprint);\n+    metadata.has_key_origin = true;\n+    // update the chain model in the database\n+    if (!batch.WriteHDChain(hdChain))\n+        throw std::runtime_error(std::string(__func__) + \": Writing HD chain model failed\");\n+}\n+\n+void LegacyScriptPubKeyMan::LoadKeyPool(int64_t nIndex, const CKeyPool &keypool)\n+{\n+    LOCK(cs_KeyStore);\n+    if (keypool.m_pre_split) {\n+        set_pre_split_keypool.insert(nIndex);\n+    } else if (keypool.fInternal) {\n+        setInternalKeyPool.insert(nIndex);\n+    } else {\n+        setExternalKeyPool.insert(nIndex);\n+    }\n+    m_max_keypool_index = std::max(m_max_keypool_index, nIndex);\n+    m_pool_key_to_index[keypool.vchPubKey.GetID()] = nIndex;\n+\n+    // If no metadata exists yet, create a default with the pool key's\n+    // creation time. Note that this may be overwritten by actually\n+    // stored metadata for that key later, which is fine.\n+    CKeyID keyid = keypool.vchPubKey.GetID();\n+    if (mapKeyMetadata.count(keyid) == 0)\n+        mapKeyMetadata[keyid] = CKeyMetadata(keypool.nTime);\n+}\n+\n+bool LegacyScriptPubKeyMan::CanGenerateKeys()\n+{\n+    // A wallet can generate keys if it has an HD seed (IsHDEnabled) or it is a non-HD wallet (pre FEATURE_HD)\n+    LOCK(cs_KeyStore);\n+    return IsHDEnabled() || !CanSupportFeature(FEATURE_HD);\n+}\n+\n+CPubKey LegacyScriptPubKeyMan::GenerateNewSeed()\n+{\n+    assert(!IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n+    CKey key;\n+    key.MakeNewKey(true);\n+    return DeriveNewSeed(key);\n+}\n+\n+CPubKey LegacyScriptPubKeyMan::DeriveNewSeed(const CKey& key)\n+{\n+    int64_t nCreationTime = GetTime();\n+    CKeyMetadata metadata(nCreationTime);\n+\n+    // calculate the seed\n+    CPubKey seed = key.GetPubKey();\n+    assert(key.VerifyPubKey(seed));\n+\n+    // set the hd keypath to \"s\" -> Seed, refers the seed to itself\n+    metadata.hdKeypath     = \"s\";\n+    metadata.has_key_origin = false;\n+    metadata.hd_seed_id = seed.GetID();\n+\n+    {\n+        LOCK(cs_KeyStore);\n+\n+        // mem store the metadata\n+        mapKeyMetadata[seed.GetID()] = metadata;\n+\n+        // write the key&metadata to the database\n+        if (!AddKeyPubKey(key, seed))\n+            throw std::runtime_error(std::string(__func__) + \": AddKeyPubKey failed\");\n+    }\n+\n+    return seed;\n+}\n+\n+void LegacyScriptPubKeyMan::SetHDSeed(const CPubKey& seed)\n+{\n+    LOCK(cs_KeyStore);\n+    // store the keyid (hash160) together with\n+    // the child index counter in the database\n+    // as a hdchain object\n+    CHDChain newHdChain;\n+    newHdChain.nVersion = CanSupportFeature(FEATURE_HD_SPLIT) ? CHDChain::VERSION_HD_CHAIN_SPLIT : CHDChain::VERSION_HD_BASE;\n+    newHdChain.seed_id = seed.GetID();\n+    SetHDChain(newHdChain, false);\n+    NotifyCanGetAddressesChanged();\n+    WalletBatch batch(*m_database);\n+    UnsetWalletFlagWithDB(batch, WALLET_FLAG_BLANK_WALLET);\n+}\n+\n+/**\n+ * Mark old keypool keys as used,\n+ * and generate all new keys\n+ */\n+bool LegacyScriptPubKeyMan::NewKeyPool()\n+{\n+    if (IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+        return false;\n+    }\n+    {\n+        LOCK(cs_KeyStore);\n+        WalletBatch batch(*m_database);\n+\n+        for (const int64_t nIndex : setInternalKeyPool) {\n+            batch.ErasePool(nIndex);\n+        }\n+        setInternalKeyPool.clear();\n+\n+        for (const int64_t nIndex : setExternalKeyPool) {\n+            batch.ErasePool(nIndex);\n+        }\n+        setExternalKeyPool.clear();\n+\n+        for (const int64_t nIndex : set_pre_split_keypool) {\n+            batch.ErasePool(nIndex);\n+        }\n+        set_pre_split_keypool.clear();\n+\n+        m_pool_key_to_index.clear();\n+\n+        if (!TopUpKeyPool()) {\n+            return false;\n+        }\n+        WalletLogPrintf(\"CWallet::NewKeyPool rewrote keypool\\n\");\n+    }\n+    return true;\n+}\n+\n+bool LegacyScriptPubKeyMan::TopUpKeyPool(unsigned int kpSize)\n+{\n+    if (!CanGenerateKeys()) {\n+        return false;\n+    }\n+    {\n+        LOCK(cs_KeyStore);\n+\n+        if (IsLocked()) return false;\n+\n+        // Top up key pool\n+        unsigned int nTargetSize;\n+        if (kpSize > 0)\n+            nTargetSize = kpSize;\n+        else\n+            nTargetSize = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 0);\n+\n+        // count amount of available keys (internal, external)\n+        // make sure the keypool of external and internal keys fits the user selected target (-keypool)\n+        int64_t missingExternal = std::max(std::max((int64_t) nTargetSize, (int64_t) 1) - (int64_t)setExternalKeyPool.size(), (int64_t) 0);\n+        int64_t missingInternal = std::max(std::max((int64_t) nTargetSize, (int64_t) 1) - (int64_t)setInternalKeyPool.size(), (int64_t) 0);\n+\n+        if (!IsHDEnabled() || !CanSupportFeature(FEATURE_HD_SPLIT))\n+        {\n+            // don't create extra internal keys\n+            missingInternal = 0;\n+        }\n+        bool internal = false;\n+        WalletBatch batch(*m_database);\n+        for (int64_t i = missingInternal + missingExternal; i--;)\n+        {\n+            if (i < missingInternal) {\n+                internal = true;\n+            }\n+\n+            CPubKey pubkey(GenerateNewKey(batch, internal));\n+            AddKeypoolPubkeyWithDB(pubkey, internal, batch);\n+        }\n+        if (missingInternal + missingExternal > 0) {\n+            WalletLogPrintf(\"keypool added %d keys (%d internal), size=%u (%u internal)\\n\", missingInternal + missingExternal, missingInternal, setInternalKeyPool.size() + setExternalKeyPool.size() + set_pre_split_keypool.size(), setInternalKeyPool.size());\n+        }\n+    }\n+    NotifyCanGetAddressesChanged();\n+    return true;\n+}\n+\n+void LegacyScriptPubKeyMan::AddKeypoolPubkeyWithDB(const CPubKey& pubkey, const bool internal, WalletBatch& batch)\n+{\n+    LOCK(cs_KeyStore);\n+    assert(m_max_keypool_index < std::numeric_limits<int64_t>::max()); // How in the hell did you use so many keys?\n+    int64_t index = ++m_max_keypool_index;\n+    if (!batch.WritePool(index, CKeyPool(pubkey, internal))) {\n+        throw std::runtime_error(std::string(__func__) + \": writing imported pubkey failed\");\n+    }\n+    if (internal) {\n+        setInternalKeyPool.insert(index);\n+    } else {\n+        setExternalKeyPool.insert(index);\n+    }\n+    m_pool_key_to_index[pubkey.GetID()] = index;\n+}\n+\n+void LegacyScriptPubKeyMan::KeepKey(int64_t nIndex)\n+{\n+    // Remove from key pool\n+    WalletBatch batch(*m_database);\n+    batch.ErasePool(nIndex);\n+    WalletLogPrintf(\"keypool keep %d\\n\", nIndex);\n+}\n+\n+void LegacyScriptPubKeyMan::ReturnKey(int64_t nIndex, bool fInternal, const CKeyID& pubkey_id)\n+{\n+    // Return to key pool\n+    {\n+        LOCK(cs_KeyStore);\n+        if (fInternal) {\n+            setInternalKeyPool.insert(nIndex);\n+        } else if (!set_pre_split_keypool.empty()) {\n+            set_pre_split_keypool.insert(nIndex);\n+        } else {\n+            setExternalKeyPool.insert(nIndex);\n+        }\n+        m_pool_key_to_index[pubkey_id] = nIndex;\n+        NotifyCanGetAddressesChanged();\n+    }\n+    WalletLogPrintf(\"keypool return %d\\n\", nIndex);\n+}\n+\n+bool LegacyScriptPubKeyMan::GetKeyFromPool(CPubKey& result, bool internal)\n+{\n+    if (!CanGetAddresses(internal)) {\n+        return false;\n+    }\n+\n+    CKeyPool keypool;\n+    {\n+        LOCK(cs_KeyStore);\n+        int64_t nIndex;\n+        if (!ReserveKeyFromKeyPool(nIndex, keypool, internal)) {",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 1187,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "ce944a2f30b21f9950fd5f5b69a860eb180d2eb9",
      "in_reply_to_id": 331653700,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2019-10-04T19:53:30Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r331661838",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/331661838"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1187,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/331781942",
      "pull_request_review_id": 297830914,
      "id": 331781942,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMTc4MTk0Mg==",
      "diff_hunk": "@@ -726,34 +585,16 @@ class WalletRescanReserver; //forward declarations for ScanForWalletTransactions\n  * A CWallet is an extension of a keystore, which also maintains a set of transactions and balances,\n  * and provides the ability to create new transactions.\n  */\n-class CWallet final : public FillableSigningProvider, private interfaces::Chain::Notifications\n+class CWallet final : public WalletStorage, private interfaces::Chain::Notifications\n {\n private:\n-    CKeyingMaterial vMasterKey GUARDED_BY(cs_KeyStore);\n-\n-    //! if fUseCrypto is true, mapKeys must be empty\n-    //! if fUseCrypto is false, vMasterKey must be empty\n-    std::atomic<bool> fUseCrypto;\n-\n-    //! keeps track of whether Unlock has run a thorough check before\n-    bool fDecryptionThoroughlyChecked;\n+    CKeyingMaterial vMasterKey GUARDED_BY(cs_wallet);\n \n     using CryptedKeyMap = std::map<CKeyID, std::pair<CPubKey, std::vector<unsigned char>>>;\n     using WatchOnlySet = std::set<CScript>;\n     using WatchKeyMap = std::map<CKeyID, CPubKey>;",
      "path": "src/wallet/wallet.h",
      "position": null,
      "original_position": 210,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "2d8785dd618b85dd8714d70a47e066be9b6e1969",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Should remove CryptedKeyMap, WatchOnlySet, and WatchKeyMap definitions from wallet.h since they are now unused and duplicated in scriptpubkeyman.h",
      "created_at": "2019-10-06T10:42:50Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r331781942",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/331781942"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": 593,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 595,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/331782858",
      "pull_request_review_id": 297831701,
      "id": 331782858,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMTc4Mjg1OA==",
      "diff_hunk": "@@ -3738,35 +3103,13 @@ bool CWallet::GetNewChangeDestination(const OutputType type, CTxDestination& des\n     return true;\n }\n \n-static int64_t GetOldestKeyTimeInPool(const std::set<int64_t>& setKeyPool, WalletBatch& batch) {\n-    if (setKeyPool.empty()) {\n-        return GetTime();\n-    }\n-\n-    CKeyPool keypool;\n-    int64_t nIndex = *(setKeyPool.begin());\n-    if (!batch.ReadPool(nIndex, keypool)) {\n-        throw std::runtime_error(std::string(__func__) + \": read oldest key in keypool failed\");\n-    }\n-    assert(keypool.vchPubKey.IsValid());\n-    return keypool.nTime;\n-}\n-\n int64_t CWallet::GetOldestKeyPoolTime()\n {\n     LOCK(cs_wallet);\n-\n-    WalletBatch batch(*database);\n-\n-    // load oldest key from keypool, get time and return\n-    int64_t oldestKey = GetOldestKeyTimeInPool(setExternalKeyPool, batch);\n-    if (IsHDEnabled() && CanSupportFeature(FEATURE_HD_SPLIT)) {\n-        oldestKey = std::max(GetOldestKeyTimeInPool(setInternalKeyPool, batch), oldestKey);\n-        if (!set_pre_split_keypool.empty()) {\n-            oldestKey = std::max(GetOldestKeyTimeInPool(set_pre_split_keypool, batch), oldestKey);\n-        }\n+    int64_t oldestKey = GetTime();",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 1202,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "2d8785dd618b85dd8714d70a47e066be9b6e1969",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Can this be changed to start with max int rather than the current time, similar to the other oldest key loop:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/2d8785dd618b85dd8714d70a47e066be9b6e1969/src/wallet/wallet.cpp#L3830-L3833\r\n\r\nIt seems nicer as an API if GetOldestKeyPoolTime would return a fixed value you could check against, rather than an ever changing current time.",
      "created_at": "2019-10-06T11:01:06Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r331782858",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/331782858"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3109,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/331795189",
      "pull_request_review_id": 297844724,
      "id": 331795189,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMTc5NTE4OQ==",
      "diff_hunk": "@@ -726,34 +585,16 @@ class WalletRescanReserver; //forward declarations for ScanForWalletTransactions\n  * A CWallet is an extension of a keystore, which also maintains a set of transactions and balances,\n  * and provides the ability to create new transactions.\n  */\n-class CWallet final : public FillableSigningProvider, private interfaces::Chain::Notifications\n+class CWallet final : public WalletStorage, private interfaces::Chain::Notifications\n {\n private:\n-    CKeyingMaterial vMasterKey GUARDED_BY(cs_KeyStore);\n-\n-    //! if fUseCrypto is true, mapKeys must be empty\n-    //! if fUseCrypto is false, vMasterKey must be empty\n-    std::atomic<bool> fUseCrypto;\n-\n-    //! keeps track of whether Unlock has run a thorough check before\n-    bool fDecryptionThoroughlyChecked;\n+    CKeyingMaterial vMasterKey GUARDED_BY(cs_wallet);\n \n     using CryptedKeyMap = std::map<CKeyID, std::pair<CPubKey, std::vector<unsigned char>>>;\n     using WatchOnlySet = std::set<CScript>;\n     using WatchKeyMap = std::map<CKeyID, CPubKey>;",
      "path": "src/wallet/wallet.h",
      "position": null,
      "original_position": 210,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "2d8785dd618b85dd8714d70a47e066be9b6e1969",
      "in_reply_to_id": 331781942,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2019-10-06T15:25:37Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r331795189",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/331795189"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": 593,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 595,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/331795192",
      "pull_request_review_id": 297844728,
      "id": 331795192,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMTc5NTE5Mg==",
      "diff_hunk": "@@ -3738,35 +3103,13 @@ bool CWallet::GetNewChangeDestination(const OutputType type, CTxDestination& des\n     return true;\n }\n \n-static int64_t GetOldestKeyTimeInPool(const std::set<int64_t>& setKeyPool, WalletBatch& batch) {\n-    if (setKeyPool.empty()) {\n-        return GetTime();\n-    }\n-\n-    CKeyPool keypool;\n-    int64_t nIndex = *(setKeyPool.begin());\n-    if (!batch.ReadPool(nIndex, keypool)) {\n-        throw std::runtime_error(std::string(__func__) + \": read oldest key in keypool failed\");\n-    }\n-    assert(keypool.vchPubKey.IsValid());\n-    return keypool.nTime;\n-}\n-\n int64_t CWallet::GetOldestKeyPoolTime()\n {\n     LOCK(cs_wallet);\n-\n-    WalletBatch batch(*database);\n-\n-    // load oldest key from keypool, get time and return\n-    int64_t oldestKey = GetOldestKeyTimeInPool(setExternalKeyPool, batch);\n-    if (IsHDEnabled() && CanSupportFeature(FEATURE_HD_SPLIT)) {\n-        oldestKey = std::max(GetOldestKeyTimeInPool(setInternalKeyPool, batch), oldestKey);\n-        if (!set_pre_split_keypool.empty()) {\n-            oldestKey = std::max(GetOldestKeyTimeInPool(set_pre_split_keypool, batch), oldestKey);\n-        }\n+    int64_t oldestKey = GetTime();",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 1202,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "2d8785dd618b85dd8714d70a47e066be9b6e1969",
      "in_reply_to_id": 331782858,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2019-10-06T15:25:42Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r331795192",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/331795192"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3109,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/333067248",
      "pull_request_review_id": 299482114,
      "id": 333067248,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMzA2NzI0OA==",
      "diff_hunk": "@@ -0,0 +1,475 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+#define BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <wallet/crypter.h>\n+#include <wallet/ismine.h>\n+#include <wallet/walletdb.h>\n+#include <wallet/walletutil.h>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+enum class OutputType;\n+\n+// Wallet storage things that ScriptPubKeyMans need in order to be able to store things to the wallet database\n+class WalletStorage\n+{\n+public:\n+    virtual ~WalletStorage() = default;\n+    virtual const std::string GetDisplayName() const = 0;\n+    virtual std::shared_ptr<WalletDatabase> GetDatabase() = 0;\n+    virtual bool IsWalletFlagSet(uint64_t) const = 0;\n+    virtual void SetWalletFlag(uint64_t) = 0;\n+    virtual void UnsetWalletFlagWithDB(WalletBatch&, uint64_t) = 0;\n+    virtual bool CanSupportFeature(enum WalletFeature) const = 0;\n+    virtual void SetMinVersion(enum WalletFeature, WalletBatch* = nullptr, bool = false) = 0;\n+    virtual const CKeyingMaterial& GetEncryptionKey() const = 0;\n+    virtual bool HasEncryptionKeys() const = 0;\n+    virtual bool IsLocked() const = 0;\n+};\n+\n+//! Default for -keypool\n+static const unsigned int DEFAULT_KEYPOOL_SIZE = 1000;\n+\n+std::vector<CKeyID> GetAffectedKeys(const CScript& spk, const SigningProvider& provider);\n+\n+/** A key from a CWallet's keypool\n+ *\n+ * The wallet holds one (for pre HD-split wallets) or several keypools. These\n+ * are sets of keys that have not yet been used to provide addresses or receive\n+ * change.\n+ *\n+ * The Bitcoin Core wallet was originally a collection of unrelated private\n+ * keys with their associated addresses. If a non-HD wallet generated a\n+ * key/address, gave that address out and then restored a backup from before\n+ * that key's generation, then any funds sent to that address would be\n+ * lost definitively.\n+ *\n+ * The keypool was implemented to avoid this scenario (commit: 10384941). The\n+ * wallet would generate a set of keys (100 by default). When a new public key\n+ * was required, either to give out as an address or to use in a change output,\n+ * it would be drawn from the keypool. The keypool would then be topped up to\n+ * maintain 100 keys. This ensured that as long as the wallet hadn't used more\n+ * than 100 keys since the previous backup, all funds would be safe, since a\n+ * restored wallet would be able to scan for all owned addresses.\n+ *\n+ * A keypool also allowed encrypted wallets to give out addresses without\n+ * having to be decrypted to generate a new private key.\n+ *\n+ * With the introduction of HD wallets (commit: f1902510), the keypool\n+ * essentially became an address look-ahead pool. Restoring old backups can no\n+ * longer definitively lose funds as long as the addresses used were from the\n+ * wallet's HD seed (since all private keys can be rederived from the seed).\n+ * However, if many addresses were used since the backup, then the wallet may\n+ * not know how far ahead in the HD chain to look for its addresses. The\n+ * keypool is used to implement a 'gap limit'. The keypool maintains a set of\n+ * keys (by default 1000) ahead of the last used key and scans for the\n+ * addresses of those keys.  This avoids the risk of not seeing transactions\n+ * involving the wallet's addresses, or of re-using the same address.\n+ *\n+ * The HD-split wallet feature added a second keypool (commit: 02592f4c). There\n+ * is an external keypool (for addresses to hand out) and an internal keypool\n+ * (for change addresses).\n+ *\n+ * Keypool keys are stored in the wallet/keystore's keymap. The keypool data is\n+ * stored as sets of indexes in the wallet (setInternalKeyPool,\n+ * setExternalKeyPool and set_pre_split_keypool), and a map from the key to the\n+ * index (m_pool_key_to_index). The CKeyPool object is used to\n+ * serialize/deserialize the pool data to/from the database.\n+ */\n+class CKeyPool\n+{\n+public:\n+    //! The time at which the key was generated. Set in AddKeypoolPubKeyWithDB\n+    int64_t nTime;\n+    //! The public key\n+    CPubKey vchPubKey;\n+    //! Whether this keypool entry is in the internal keypool (for change outputs)\n+    bool fInternal;\n+    //! Whether this key was generated for a keypool before the wallet was upgraded to HD-split\n+    bool m_pre_split;\n+\n+    CKeyPool();\n+    CKeyPool(const CPubKey& vchPubKeyIn, bool internalIn);\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        int nVersion = s.GetVersion();\n+        if (!(s.GetType() & SER_GETHASH))\n+            READWRITE(nVersion);\n+        READWRITE(nTime);\n+        READWRITE(vchPubKey);\n+        if (ser_action.ForRead()) {\n+            try {\n+                READWRITE(fInternal);\n+            }\n+            catch (std::ios_base::failure&) {\n+                /* flag as external address if we can't read the internal boolean\n+                   (this will be the case for any wallet before the HD chain split version) */\n+                fInternal = false;\n+            }\n+            try {\n+                READWRITE(m_pre_split);\n+            }\n+            catch (std::ios_base::failure&) {\n+                /* flag as postsplit address if we can't read the m_pre_split boolean\n+                   (this will be the case for any wallet that upgrades to HD chain split)*/\n+                m_pre_split = false;\n+            }\n+        }\n+        else {\n+            READWRITE(fInternal);\n+            READWRITE(m_pre_split);\n+        }\n+    }\n+};\n+\n+/*\n+ * A class implementing ScriptPubKeyMan manages some (or all) scriptPubKeys used in a wallet.\n+ * It contains the scripts and keys related to the scriptPubKeys it manages.\n+ * A ScriptPubKeyMan will be able to give out scriptPubKeys to be used, as well as marking\n+ * when a scriptPubKey has been used. It also handles when and how to store a scriptPubKey\n+ * and it's related scripts and keys, including encryption.\n+ */\n+class ScriptPubKeyMan\n+{\n+protected:\n+    WalletStorage& m_storage;\n+    std::shared_ptr<WalletDatabase> m_database;\n+\n+public:\n+    ScriptPubKeyMan(WalletStorage& storage) : m_storage(storage), m_database(storage.GetDatabase()) {}\n+\n+    const std::string GetDisplayName() const { return m_storage.GetDisplayName(); }\n+    bool IsWalletFlagSet(uint64_t flag) const { return m_storage.IsWalletFlagSet(flag); }\n+    void SetWalletFlag(uint64_t flag) { return m_storage.SetWalletFlag(flag); }\n+    void UnsetWalletFlagWithDB(WalletBatch& batch, uint64_t flag) { return m_storage.UnsetWalletFlagWithDB(batch, flag); }\n+    bool CanSupportFeature(enum WalletFeature wf) const { return m_storage.CanSupportFeature(wf); }\n+    void SetMinVersion(enum WalletFeature wf) { return m_storage.SetMinVersion(wf); }\n+    const CKeyingMaterial& GetEncryptionKey() const { return m_storage.GetEncryptionKey(); }\n+    bool HasEncryptionKeys() const { return m_storage.HasEncryptionKeys(); }\n+    bool IsLocked() const { return m_storage.IsLocked(); }\n+\n+    virtual ~ScriptPubKeyMan() {};\n+    virtual bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) { return false; }\n+    virtual isminetype IsMine(const CScript& script) const { return ISMINE_NO; }\n+\n+    virtual bool HasEncryptedData() const { return false; }\n+\n+    virtual bool CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys = false) { return false; }\n+    virtual bool Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch) { return false; }\n+\n+    virtual bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool) { return false; }\n+    virtual void KeepDestination(int64_t index) {}\n+    virtual void ReturnDestination(int64_t index, bool internal, const CTxDestination& addr) {}\n+\n+    virtual bool TopUp(unsigned int size = 0) { return false; }\n+\n+    //! Mark unused addresses as being used\n+    virtual void MarkUnusedAddresses(const CScript& script) {}\n+\n+    //! Upgrade stored CKeyMetadata objects to store key origin info as KeyOriginInfo\n+    virtual void UpgradeKeyMetadata() {}\n+\n+    /** Sets up the key generation stuff, i.e. generates new HD seeds and sets them as active.\n+      * Returns false if already setup or setup fails, true if setup is successful\n+      * Set force=true to make it re-setup if already setup, used for upgrades\n+      */\n+    virtual bool SetupGeneration(bool force = false) { return false; }\n+\n+    /* Returns true if HD is enabled */\n+    virtual bool IsHDEnabled() const { return false; }\n+\n+    /* Returns true if the wallet can give out new addresses. This means it has keys in the keypool or can generate new keys */\n+    virtual bool CanGetAddresses(bool internal = false) { return false; }\n+\n+    /** Upgrades the wallet to the specified version */\n+    virtual bool Upgrade(int prev_version, int new_version, std::string& error) { return false; }\n+\n+    virtual bool HavePrivateKeys() const { return false; }\n+\n+    //! The action to do when the DB needs rewrite\n+    virtual void RewriteDB() {}\n+\n+    virtual int64_t GetOldestKeyPoolTime() { return GetTime(); }\n+\n+    virtual size_t KeypoolCountExternalKeys() { return 0; }\n+    virtual unsigned int GetKeyPoolSize() const { return 0; }\n+\n+    virtual int64_t GetTimeFirstKey() const { return 0; }\n+\n+    virtual const CKeyMetadata* GetMetadata(uint160 id) const { return nullptr; }\n+\n+    virtual std::unique_ptr<SigningProvider> GetSigningProvider(const CScript& script) const { return nullptr; }\n+\n+    /** Whether this ScriptPubKeyMan can provide a SigningProvider (via GetSigningProvider) that, combined with\n+      * sigdata, can produce a valid signature.\n+      */\n+    virtual bool CanProvide(const CScript& script, SignatureData& sigdata) { return false; }\n+\n+    virtual uint256 GetID() const { return uint256(); }\n+\n+    /** Prepends the wallet name in logging output to ease debugging in multi-wallet use cases */\n+    template<typename... Params>\n+    void WalletLogPrintf(std::string fmt, Params... parameters) const {\n+        LogPrintf((\"%s \" + fmt).c_str(), GetDisplayName(), parameters...);\n+    };\n+\n+    /** Watch-only address added */\n+    boost::signals2::signal<void (bool fHaveWatchOnly)> NotifyWatchonlyChanged;\n+\n+    /** Keypool has new keys */\n+    boost::signals2::signal<void ()> NotifyCanGetAddressesChanged;\n+};\n+\n+class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProvider\n+{\n+private:\n+    //! keeps track of whether Unlock has run a thorough check before\n+    bool fDecryptionThoroughlyChecked = false;\n+\n+    using WatchOnlySet = std::set<CScript>;\n+    using WatchKeyMap = std::map<CKeyID, CPubKey>;\n+\n+    WalletBatch *encrypted_batch GUARDED_BY(cs_KeyStore) = nullptr;\n+\n+    using CryptedKeyMap = std::map<CKeyID, std::pair<CPubKey, std::vector<unsigned char>>>;\n+\n+    CryptedKeyMap mapCryptedKeys GUARDED_BY(cs_KeyStore);\n+    WatchOnlySet setWatchOnly GUARDED_BY(cs_KeyStore);\n+    WatchKeyMap mapWatchKeys GUARDED_BY(cs_KeyStore);\n+\n+    int64_t nTimeFirstKey GUARDED_BY(cs_KeyStore) = 0;\n+\n+    bool AddKeyPubKeyInner(const CKey& key, const CPubKey &pubkey);\n+    bool AddCryptedKeyInner(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n+\n+    /**\n+     * Private version of AddWatchOnly method which does not accept a\n+     * timestamp, and which will reset the wallet's nTimeFirstKey value to 1 if\n+     * the watch key did not previously have a timestamp associated with it.\n+     * Because this is an inherited virtual method, it is accessible despite\n+     * being marked private, but it is marked private anyway to encourage use\n+     * of the other AddWatchOnly which accepts a timestamp and sets\n+     * nTimeFirstKey more intelligently for more efficient rescans.\n+     */\n+    bool AddWatchOnly(const CScript& dest) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+    bool AddWatchOnlyWithDB(WalletBatch &batch, const CScript& dest) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+    bool AddWatchOnlyInMem(const CScript &dest);\n+    //! Adds a watch-only address to the store, and saves it to disk.\n+    bool AddWatchOnlyWithDB(WalletBatch &batch, const CScript& dest, int64_t create_time) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+\n+    //! Adds a key to the store, and saves it to disk.\n+    bool AddKeyPubKeyWithDB(WalletBatch &batch,const CKey& key, const CPubKey &pubkey) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+\n+    void AddKeypoolPubkeyWithDB(const CPubKey& pubkey, const bool internal, WalletBatch& batch);\n+\n+    //! Adds a script to the store and saves it to disk\n+    bool AddCScriptWithDB(WalletBatch& batch, const CScript& script);\n+\n+    /** Add a KeyOriginInfo to the wallet */\n+    bool AddKeyOriginWithDB(WalletBatch& batch, const CPubKey& pubkey, const KeyOriginInfo& info);\n+\n+    /* the HD chain data model (external chain counters) */\n+    CHDChain hdChain;\n+\n+    /* HD derive new child key (on internal or external chain) */\n+    void DeriveNewChildKey(WalletBatch& batch, CKeyMetadata& metadata, CKey& secret, bool internal = false) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+\n+    std::set<int64_t> setInternalKeyPool GUARDED_BY(cs_KeyStore);\n+    std::set<int64_t> setExternalKeyPool GUARDED_BY(cs_KeyStore);\n+    std::set<int64_t> set_pre_split_keypool GUARDED_BY(cs_KeyStore);\n+    int64_t m_max_keypool_index GUARDED_BY(cs_KeyStore) = 0;\n+    std::map<CKeyID, int64_t> m_pool_key_to_index;\n+    // Tracks keypool indexes to CKeyIDs of keys that have been taken out of the keypool but may be returned to it\n+    std::map<int64_t, CKeyID> m_reserved_key_to_index;\n+\n+    //! Fetches a key from the keypool\n+    bool GetKeyFromPool(CPubKey &key, bool internal = false);\n+\n+    /**\n+     * Reserves a key from the keypool and sets nIndex to its index\n+     *\n+     * @param[out] nIndex the index of the key in keypool\n+     * @param[out] keypool the keypool the key was drawn from, which could be the\n+     *     the pre-split pool if present, or the internal or external pool\n+     * @param fRequestedInternal true if the caller would like the key drawn\n+     *     from the internal keypool, false if external is preferred\n+     *\n+     * @return true if succeeded, false if failed due to empty keypool\n+     * @throws std::runtime_error if keypool read failed, key was invalid,\n+     *     was not found in the wallet, or was misclassified in the internal\n+     *     or external keypool\n+     */\n+    bool ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool fRequestedInternal);\n+\n+    void KeepKey(int64_t nIndex);\n+    void ReturnKey(int64_t nIndex, bool fInternal, const CKeyID& pubkey_id);\n+\n+public:\n+    using ScriptPubKeyMan::ScriptPubKeyMan;\n+\n+    bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) override EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": null,
      "original_position": 319,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "0fb52e481f411fdf67257965a9144522b4bac87c",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The `EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore)` annotation appears to be a mistake. `Wallet::GetNewDestination` calls this method without acquiring cs_KeyStore:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/0fb52e481f411fdf67257965a9144522b4bac87c/src/wallet/wallet.cpp#L3082\r\n\r\nThe only reason there's no compile error is that the call is happening through the overridden declaration above which is missing EXCLUSIVE_LOCKS_REQUIRED:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/0fb52e481f411fdf67257965a9144522b4bac87c/src/wallet/scriptpubkeyman.h#L161\r\n\r\nProbably what should happen here is that `EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore)` should be dropped and `cs_KeyStore` get locked internally instead.",
      "created_at": "2019-10-09T15:03:22Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r333067248",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/333067248"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 319,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/333071878",
      "pull_request_review_id": 299488276,
      "id": 333071878,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMzA3MTg3OA==",
      "diff_hunk": "@@ -0,0 +1,475 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+#define BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <wallet/crypter.h>\n+#include <wallet/ismine.h>\n+#include <wallet/walletdb.h>\n+#include <wallet/walletutil.h>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+enum class OutputType;\n+\n+// Wallet storage things that ScriptPubKeyMans need in order to be able to store things to the wallet database\n+class WalletStorage\n+{\n+public:\n+    virtual ~WalletStorage() = default;\n+    virtual const std::string GetDisplayName() const = 0;\n+    virtual std::shared_ptr<WalletDatabase> GetDatabase() = 0;\n+    virtual bool IsWalletFlagSet(uint64_t) const = 0;\n+    virtual void SetWalletFlag(uint64_t) = 0;\n+    virtual void UnsetWalletFlagWithDB(WalletBatch&, uint64_t) = 0;\n+    virtual bool CanSupportFeature(enum WalletFeature) const = 0;\n+    virtual void SetMinVersion(enum WalletFeature, WalletBatch* = nullptr, bool = false) = 0;\n+    virtual const CKeyingMaterial& GetEncryptionKey() const = 0;\n+    virtual bool HasEncryptionKeys() const = 0;\n+    virtual bool IsLocked() const = 0;\n+};\n+\n+//! Default for -keypool\n+static const unsigned int DEFAULT_KEYPOOL_SIZE = 1000;\n+\n+std::vector<CKeyID> GetAffectedKeys(const CScript& spk, const SigningProvider& provider);\n+\n+/** A key from a CWallet's keypool\n+ *\n+ * The wallet holds one (for pre HD-split wallets) or several keypools. These\n+ * are sets of keys that have not yet been used to provide addresses or receive\n+ * change.\n+ *\n+ * The Bitcoin Core wallet was originally a collection of unrelated private\n+ * keys with their associated addresses. If a non-HD wallet generated a\n+ * key/address, gave that address out and then restored a backup from before\n+ * that key's generation, then any funds sent to that address would be\n+ * lost definitively.\n+ *\n+ * The keypool was implemented to avoid this scenario (commit: 10384941). The\n+ * wallet would generate a set of keys (100 by default). When a new public key\n+ * was required, either to give out as an address or to use in a change output,\n+ * it would be drawn from the keypool. The keypool would then be topped up to\n+ * maintain 100 keys. This ensured that as long as the wallet hadn't used more\n+ * than 100 keys since the previous backup, all funds would be safe, since a\n+ * restored wallet would be able to scan for all owned addresses.\n+ *\n+ * A keypool also allowed encrypted wallets to give out addresses without\n+ * having to be decrypted to generate a new private key.\n+ *\n+ * With the introduction of HD wallets (commit: f1902510), the keypool\n+ * essentially became an address look-ahead pool. Restoring old backups can no\n+ * longer definitively lose funds as long as the addresses used were from the\n+ * wallet's HD seed (since all private keys can be rederived from the seed).\n+ * However, if many addresses were used since the backup, then the wallet may\n+ * not know how far ahead in the HD chain to look for its addresses. The\n+ * keypool is used to implement a 'gap limit'. The keypool maintains a set of\n+ * keys (by default 1000) ahead of the last used key and scans for the\n+ * addresses of those keys.  This avoids the risk of not seeing transactions\n+ * involving the wallet's addresses, or of re-using the same address.\n+ *\n+ * The HD-split wallet feature added a second keypool (commit: 02592f4c). There\n+ * is an external keypool (for addresses to hand out) and an internal keypool\n+ * (for change addresses).\n+ *\n+ * Keypool keys are stored in the wallet/keystore's keymap. The keypool data is\n+ * stored as sets of indexes in the wallet (setInternalKeyPool,\n+ * setExternalKeyPool and set_pre_split_keypool), and a map from the key to the\n+ * index (m_pool_key_to_index). The CKeyPool object is used to\n+ * serialize/deserialize the pool data to/from the database.\n+ */\n+class CKeyPool\n+{\n+public:\n+    //! The time at which the key was generated. Set in AddKeypoolPubKeyWithDB\n+    int64_t nTime;\n+    //! The public key\n+    CPubKey vchPubKey;\n+    //! Whether this keypool entry is in the internal keypool (for change outputs)\n+    bool fInternal;\n+    //! Whether this key was generated for a keypool before the wallet was upgraded to HD-split\n+    bool m_pre_split;\n+\n+    CKeyPool();\n+    CKeyPool(const CPubKey& vchPubKeyIn, bool internalIn);\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        int nVersion = s.GetVersion();\n+        if (!(s.GetType() & SER_GETHASH))\n+            READWRITE(nVersion);\n+        READWRITE(nTime);\n+        READWRITE(vchPubKey);\n+        if (ser_action.ForRead()) {\n+            try {\n+                READWRITE(fInternal);\n+            }\n+            catch (std::ios_base::failure&) {\n+                /* flag as external address if we can't read the internal boolean\n+                   (this will be the case for any wallet before the HD chain split version) */\n+                fInternal = false;\n+            }\n+            try {\n+                READWRITE(m_pre_split);\n+            }\n+            catch (std::ios_base::failure&) {\n+                /* flag as postsplit address if we can't read the m_pre_split boolean\n+                   (this will be the case for any wallet that upgrades to HD chain split)*/\n+                m_pre_split = false;\n+            }\n+        }\n+        else {\n+            READWRITE(fInternal);\n+            READWRITE(m_pre_split);\n+        }\n+    }\n+};\n+\n+/*\n+ * A class implementing ScriptPubKeyMan manages some (or all) scriptPubKeys used in a wallet.\n+ * It contains the scripts and keys related to the scriptPubKeys it manages.\n+ * A ScriptPubKeyMan will be able to give out scriptPubKeys to be used, as well as marking\n+ * when a scriptPubKey has been used. It also handles when and how to store a scriptPubKey\n+ * and it's related scripts and keys, including encryption.\n+ */\n+class ScriptPubKeyMan\n+{\n+protected:\n+    WalletStorage& m_storage;\n+    std::shared_ptr<WalletDatabase> m_database;\n+\n+public:\n+    ScriptPubKeyMan(WalletStorage& storage) : m_storage(storage), m_database(storage.GetDatabase()) {}\n+\n+    const std::string GetDisplayName() const { return m_storage.GetDisplayName(); }\n+    bool IsWalletFlagSet(uint64_t flag) const { return m_storage.IsWalletFlagSet(flag); }\n+    void SetWalletFlag(uint64_t flag) { return m_storage.SetWalletFlag(flag); }\n+    void UnsetWalletFlagWithDB(WalletBatch& batch, uint64_t flag) { return m_storage.UnsetWalletFlagWithDB(batch, flag); }\n+    bool CanSupportFeature(enum WalletFeature wf) const { return m_storage.CanSupportFeature(wf); }\n+    void SetMinVersion(enum WalletFeature wf) { return m_storage.SetMinVersion(wf); }\n+    const CKeyingMaterial& GetEncryptionKey() const { return m_storage.GetEncryptionKey(); }\n+    bool HasEncryptionKeys() const { return m_storage.HasEncryptionKeys(); }\n+    bool IsLocked() const { return m_storage.IsLocked(); }\n+\n+    virtual ~ScriptPubKeyMan() {};\n+    virtual bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) { return false; }\n+    virtual isminetype IsMine(const CScript& script) const { return ISMINE_NO; }\n+\n+    virtual bool HasEncryptedData() const { return false; }\n+\n+    virtual bool CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys = false) { return false; }\n+    virtual bool Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch) { return false; }\n+\n+    virtual bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool) { return false; }\n+    virtual void KeepDestination(int64_t index) {}\n+    virtual void ReturnDestination(int64_t index, bool internal, const CTxDestination& addr) {}\n+\n+    virtual bool TopUp(unsigned int size = 0) { return false; }\n+\n+    //! Mark unused addresses as being used\n+    virtual void MarkUnusedAddresses(const CScript& script) {}\n+\n+    //! Upgrade stored CKeyMetadata objects to store key origin info as KeyOriginInfo\n+    virtual void UpgradeKeyMetadata() {}\n+\n+    /** Sets up the key generation stuff, i.e. generates new HD seeds and sets them as active.\n+      * Returns false if already setup or setup fails, true if setup is successful\n+      * Set force=true to make it re-setup if already setup, used for upgrades\n+      */\n+    virtual bool SetupGeneration(bool force = false) { return false; }\n+\n+    /* Returns true if HD is enabled */\n+    virtual bool IsHDEnabled() const { return false; }\n+\n+    /* Returns true if the wallet can give out new addresses. This means it has keys in the keypool or can generate new keys */\n+    virtual bool CanGetAddresses(bool internal = false) { return false; }\n+\n+    /** Upgrades the wallet to the specified version */\n+    virtual bool Upgrade(int prev_version, int new_version, std::string& error) { return false; }\n+\n+    virtual bool HavePrivateKeys() const { return false; }\n+\n+    //! The action to do when the DB needs rewrite\n+    virtual void RewriteDB() {}\n+\n+    virtual int64_t GetOldestKeyPoolTime() { return GetTime(); }\n+\n+    virtual size_t KeypoolCountExternalKeys() { return 0; }\n+    virtual unsigned int GetKeyPoolSize() const { return 0; }\n+\n+    virtual int64_t GetTimeFirstKey() const { return 0; }\n+\n+    virtual const CKeyMetadata* GetMetadata(uint160 id) const { return nullptr; }\n+\n+    virtual std::unique_ptr<SigningProvider> GetSigningProvider(const CScript& script) const { return nullptr; }\n+\n+    /** Whether this ScriptPubKeyMan can provide a SigningProvider (via GetSigningProvider) that, combined with\n+      * sigdata, can produce a valid signature.\n+      */\n+    virtual bool CanProvide(const CScript& script, SignatureData& sigdata) { return false; }\n+\n+    virtual uint256 GetID() const { return uint256(); }\n+\n+    /** Prepends the wallet name in logging output to ease debugging in multi-wallet use cases */\n+    template<typename... Params>\n+    void WalletLogPrintf(std::string fmt, Params... parameters) const {\n+        LogPrintf((\"%s \" + fmt).c_str(), GetDisplayName(), parameters...);\n+    };\n+\n+    /** Watch-only address added */\n+    boost::signals2::signal<void (bool fHaveWatchOnly)> NotifyWatchonlyChanged;\n+\n+    /** Keypool has new keys */\n+    boost::signals2::signal<void ()> NotifyCanGetAddressesChanged;\n+};\n+\n+class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProvider\n+{\n+private:\n+    //! keeps track of whether Unlock has run a thorough check before\n+    bool fDecryptionThoroughlyChecked = false;\n+\n+    using WatchOnlySet = std::set<CScript>;\n+    using WatchKeyMap = std::map<CKeyID, CPubKey>;\n+\n+    WalletBatch *encrypted_batch GUARDED_BY(cs_KeyStore) = nullptr;\n+\n+    using CryptedKeyMap = std::map<CKeyID, std::pair<CPubKey, std::vector<unsigned char>>>;\n+\n+    CryptedKeyMap mapCryptedKeys GUARDED_BY(cs_KeyStore);\n+    WatchOnlySet setWatchOnly GUARDED_BY(cs_KeyStore);\n+    WatchKeyMap mapWatchKeys GUARDED_BY(cs_KeyStore);\n+\n+    int64_t nTimeFirstKey GUARDED_BY(cs_KeyStore) = 0;\n+\n+    bool AddKeyPubKeyInner(const CKey& key, const CPubKey &pubkey);\n+    bool AddCryptedKeyInner(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n+\n+    /**\n+     * Private version of AddWatchOnly method which does not accept a\n+     * timestamp, and which will reset the wallet's nTimeFirstKey value to 1 if\n+     * the watch key did not previously have a timestamp associated with it.\n+     * Because this is an inherited virtual method, it is accessible despite\n+     * being marked private, but it is marked private anyway to encourage use\n+     * of the other AddWatchOnly which accepts a timestamp and sets\n+     * nTimeFirstKey more intelligently for more efficient rescans.\n+     */\n+    bool AddWatchOnly(const CScript& dest) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+    bool AddWatchOnlyWithDB(WalletBatch &batch, const CScript& dest) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+    bool AddWatchOnlyInMem(const CScript &dest);\n+    //! Adds a watch-only address to the store, and saves it to disk.\n+    bool AddWatchOnlyWithDB(WalletBatch &batch, const CScript& dest, int64_t create_time) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+\n+    //! Adds a key to the store, and saves it to disk.\n+    bool AddKeyPubKeyWithDB(WalletBatch &batch,const CKey& key, const CPubKey &pubkey) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+\n+    void AddKeypoolPubkeyWithDB(const CPubKey& pubkey, const bool internal, WalletBatch& batch);\n+\n+    //! Adds a script to the store and saves it to disk\n+    bool AddCScriptWithDB(WalletBatch& batch, const CScript& script);\n+\n+    /** Add a KeyOriginInfo to the wallet */\n+    bool AddKeyOriginWithDB(WalletBatch& batch, const CPubKey& pubkey, const KeyOriginInfo& info);\n+\n+    /* the HD chain data model (external chain counters) */\n+    CHDChain hdChain;\n+\n+    /* HD derive new child key (on internal or external chain) */\n+    void DeriveNewChildKey(WalletBatch& batch, CKeyMetadata& metadata, CKey& secret, bool internal = false) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+\n+    std::set<int64_t> setInternalKeyPool GUARDED_BY(cs_KeyStore);\n+    std::set<int64_t> setExternalKeyPool GUARDED_BY(cs_KeyStore);\n+    std::set<int64_t> set_pre_split_keypool GUARDED_BY(cs_KeyStore);\n+    int64_t m_max_keypool_index GUARDED_BY(cs_KeyStore) = 0;\n+    std::map<CKeyID, int64_t> m_pool_key_to_index;\n+    // Tracks keypool indexes to CKeyIDs of keys that have been taken out of the keypool but may be returned to it\n+    std::map<int64_t, CKeyID> m_reserved_key_to_index;\n+\n+    //! Fetches a key from the keypool\n+    bool GetKeyFromPool(CPubKey &key, bool internal = false);\n+\n+    /**\n+     * Reserves a key from the keypool and sets nIndex to its index\n+     *\n+     * @param[out] nIndex the index of the key in keypool\n+     * @param[out] keypool the keypool the key was drawn from, which could be the\n+     *     the pre-split pool if present, or the internal or external pool\n+     * @param fRequestedInternal true if the caller would like the key drawn\n+     *     from the internal keypool, false if external is preferred\n+     *\n+     * @return true if succeeded, false if failed due to empty keypool\n+     * @throws std::runtime_error if keypool read failed, key was invalid,\n+     *     was not found in the wallet, or was misclassified in the internal\n+     *     or external keypool\n+     */\n+    bool ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool fRequestedInternal);\n+\n+    void KeepKey(int64_t nIndex);\n+    void ReturnKey(int64_t nIndex, bool fInternal, const CKeyID& pubkey_id);\n+\n+public:\n+    using ScriptPubKeyMan::ScriptPubKeyMan;\n+\n+    bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) override EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+    isminetype IsMine(const CScript& script) const override;\n+\n+    bool HasEncryptedData() const override;\n+\n+    bool CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys = false) override;\n+    bool Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch) override;\n+\n+    bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool) override;\n+    void KeepDestination(int64_t index) override;\n+    void ReturnDestination(int64_t index, bool internal, const CTxDestination& addr) override;\n+\n+    bool TopUp(unsigned int size = 0) override;\n+\n+    void MarkUnusedAddresses(const CScript& script) override;\n+\n+    void UpgradeKeyMetadata() override;\n+\n+    bool IsHDEnabled() const override;\n+\n+    bool SetupGeneration(bool force = false) override;\n+\n+    bool Upgrade(int prev_version, int new_version, std::string& error) override;\n+\n+    bool HavePrivateKeys() const override;\n+\n+    void RewriteDB() override;\n+\n+    int64_t GetOldestKeyPoolTime() override;\n+    size_t KeypoolCountExternalKeys() override;\n+    unsigned int GetKeyPoolSize() const override;\n+\n+    int64_t GetTimeFirstKey() const override;\n+\n+    const CKeyMetadata* GetMetadata(uint160 id) const override;\n+\n+    bool CanGetAddresses(bool internal = false) override;\n+\n+    std::unique_ptr<SigningProvider> GetSigningProvider(const CScript& script) const override;\n+\n+    bool CanProvide(const CScript& script, SignatureData& sigdata) override;\n+\n+    uint256 GetID() const override;\n+\n+    // Map from Key ID to key metadata.\n+    std::map<CKeyID, CKeyMetadata> mapKeyMetadata GUARDED_BY(cs_KeyStore);\n+\n+    // Map from Script ID to key metadata (for watch-only keys).\n+    std::map<CScriptID, CKeyMetadata> m_script_metadata GUARDED_BY(cs_KeyStore);\n+\n+    //! Adds a key to the store, and saves it to disk.\n+    bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey) override EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": null,
      "original_position": 370,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "0fb52e481f411fdf67257965a9144522b4bac87c",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The EXCLUSIVE_LOCKS_REQUIRED annotation here is a little dodgy because the parent virtual method doesn't have the same annotation, so it will be bypassed if this is called through the parent class.\r\n\r\nTo address this, it might be a good idea to add EXCLUSIVE_LOCKS_REQUIRED to the parent declaration in SigningProvider, or to add an AssertLockHeld in `LegacyScriptPubKeyMan::AddKeyPubKey` for more enforcement, or to remove the annotation and just lock cs_KeyStore internally in AddKeyPubKey.\r\n\r\nIt might be a good idea to AssertLockHeld(cs_KeyStore) in LegacyScriptPubKeyMan::AddKeyPubKey, because the EXCLUSIVE_LOCKS_REQUIRED annotation won't be enforced if AddKeyPubKey is called through the overriden virtual method. Other options would be to EXCLUSIVE_LOCKS_REQUIRED",
      "created_at": "2019-10-09T15:11:35Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r333071878",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/333071878"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 370,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/333088178",
      "pull_request_review_id": 299509663,
      "id": 333088178,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMzA4ODE3OA==",
      "diff_hunk": "@@ -3919,69 +3262,41 @@ std::set<CTxDestination> CWallet::GetLabelAddresses(const std::string& label) co\n \n bool ReserveDestination::GetReservedDestination(const OutputType type, CTxDestination& dest, bool internal)\n {\n-    if (!pwallet->CanGetAddresses(internal)) {\n+    m_spk_man = pwallet->GetScriptPubKeyMan(type, internal);\n+    if (!m_spk_man) {\n         return false;\n     }\n \n+    m_spk_man->TopUp();\n+\n     if (nIndex == -1)\n     {\n         CKeyPool keypool;\n-        if (!pwallet->ReserveKeyFromKeyPool(nIndex, keypool, internal)) {\n+        if (!m_spk_man->GetReservedDestination(type, internal, dest, nIndex, keypool)) {\n             return false;\n         }\n-        vchPubKey = keypool.vchPubKey;\n         fInternal = keypool.fInternal;\n     }\n-    assert(vchPubKey.IsValid());\n-    pwallet->LearnRelatedScripts(vchPubKey, type);\n-    address = GetDestinationForKey(vchPubKey, type);",
      "path": "src/wallet/wallet.cpp",
      "position": 1231,
      "original_position": 1234,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "0fb52e481f411fdf67257965a9144522b4bac87c",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Seems like a bug to no longer set ReserveDestination::address here, since it might be needed later to call ReturnDestination:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/0fb52e481f411fdf67257965a9144522b4bac87c/src/wallet/wallet.cpp#L3294\r\n\r\nShould there be a `this->address = dest` line after the GetReservedDestination call above?",
      "created_at": "2019-10-09T15:40:26Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r333088178",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/333088178"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3923,
      "original_line": 3923,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/333106660",
      "pull_request_review_id": 299533716,
      "id": 333106660,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMzEwNjY2MA==",
      "diff_hunk": "@@ -3919,69 +3262,41 @@ std::set<CTxDestination> CWallet::GetLabelAddresses(const std::string& label) co\n \n bool ReserveDestination::GetReservedDestination(const OutputType type, CTxDestination& dest, bool internal)\n {\n-    if (!pwallet->CanGetAddresses(internal)) {\n+    m_spk_man = pwallet->GetScriptPubKeyMan(type, internal);\n+    if (!m_spk_man) {\n         return false;\n     }\n \n+    m_spk_man->TopUp();\n+\n     if (nIndex == -1)\n     {\n         CKeyPool keypool;\n-        if (!pwallet->ReserveKeyFromKeyPool(nIndex, keypool, internal)) {\n+        if (!m_spk_man->GetReservedDestination(type, internal, dest, nIndex, keypool)) {\n             return false;\n         }\n-        vchPubKey = keypool.vchPubKey;\n         fInternal = keypool.fInternal;\n     }\n-    assert(vchPubKey.IsValid());\n-    pwallet->LearnRelatedScripts(vchPubKey, type);\n-    address = GetDestinationForKey(vchPubKey, type);",
      "path": "src/wallet/wallet.cpp",
      "position": 1231,
      "original_position": 1234,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "0fb52e481f411fdf67257965a9144522b4bac87c",
      "in_reply_to_id": 333088178,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think the `address` property is unused, so we could just drop it: https://github.com/Sjors/bitcoin/commit/aa5ea3768a2858d7776d798edf63b421849b9714",
      "created_at": "2019-10-09T16:16:27Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r333106660",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/333106660"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3923,
      "original_line": 3923,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/333135820",
      "pull_request_review_id": 299571723,
      "id": 333135820,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMzEzNTgyMA==",
      "diff_hunk": "@@ -3919,69 +3262,41 @@ std::set<CTxDestination> CWallet::GetLabelAddresses(const std::string& label) co\n \n bool ReserveDestination::GetReservedDestination(const OutputType type, CTxDestination& dest, bool internal)\n {\n-    if (!pwallet->CanGetAddresses(internal)) {\n+    m_spk_man = pwallet->GetScriptPubKeyMan(type, internal);\n+    if (!m_spk_man) {\n         return false;\n     }\n \n+    m_spk_man->TopUp();\n+\n     if (nIndex == -1)\n     {\n         CKeyPool keypool;\n-        if (!pwallet->ReserveKeyFromKeyPool(nIndex, keypool, internal)) {\n+        if (!m_spk_man->GetReservedDestination(type, internal, dest, nIndex, keypool)) {\n             return false;\n         }\n-        vchPubKey = keypool.vchPubKey;\n         fInternal = keypool.fInternal;\n     }\n-    assert(vchPubKey.IsValid());\n-    pwallet->LearnRelatedScripts(vchPubKey, type);\n-    address = GetDestinationForKey(vchPubKey, type);",
      "path": "src/wallet/wallet.cpp",
      "position": 1231,
      "original_position": 1234,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "0fb52e481f411fdf67257965a9144522b4bac87c",
      "in_reply_to_id": 333088178,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "While it may be unused, it may also be useful in the future with other ScriptPubKeyMans. I think it also makes more sense for ReserveDestination to explicitly have the destination stored as that was part of why that was added. I've added `address = dest` back in.",
      "created_at": "2019-10-09T17:22:13Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r333135820",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/333135820"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3923,
      "original_line": 3923,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/333135893",
      "pull_request_review_id": 299571809,
      "id": 333135893,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMzEzNTg5Mw==",
      "diff_hunk": "@@ -0,0 +1,475 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+#define BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <wallet/crypter.h>\n+#include <wallet/ismine.h>\n+#include <wallet/walletdb.h>\n+#include <wallet/walletutil.h>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+enum class OutputType;\n+\n+// Wallet storage things that ScriptPubKeyMans need in order to be able to store things to the wallet database\n+class WalletStorage\n+{\n+public:\n+    virtual ~WalletStorage() = default;\n+    virtual const std::string GetDisplayName() const = 0;\n+    virtual std::shared_ptr<WalletDatabase> GetDatabase() = 0;\n+    virtual bool IsWalletFlagSet(uint64_t) const = 0;\n+    virtual void SetWalletFlag(uint64_t) = 0;\n+    virtual void UnsetWalletFlagWithDB(WalletBatch&, uint64_t) = 0;\n+    virtual bool CanSupportFeature(enum WalletFeature) const = 0;\n+    virtual void SetMinVersion(enum WalletFeature, WalletBatch* = nullptr, bool = false) = 0;\n+    virtual const CKeyingMaterial& GetEncryptionKey() const = 0;\n+    virtual bool HasEncryptionKeys() const = 0;\n+    virtual bool IsLocked() const = 0;\n+};\n+\n+//! Default for -keypool\n+static const unsigned int DEFAULT_KEYPOOL_SIZE = 1000;\n+\n+std::vector<CKeyID> GetAffectedKeys(const CScript& spk, const SigningProvider& provider);\n+\n+/** A key from a CWallet's keypool\n+ *\n+ * The wallet holds one (for pre HD-split wallets) or several keypools. These\n+ * are sets of keys that have not yet been used to provide addresses or receive\n+ * change.\n+ *\n+ * The Bitcoin Core wallet was originally a collection of unrelated private\n+ * keys with their associated addresses. If a non-HD wallet generated a\n+ * key/address, gave that address out and then restored a backup from before\n+ * that key's generation, then any funds sent to that address would be\n+ * lost definitively.\n+ *\n+ * The keypool was implemented to avoid this scenario (commit: 10384941). The\n+ * wallet would generate a set of keys (100 by default). When a new public key\n+ * was required, either to give out as an address or to use in a change output,\n+ * it would be drawn from the keypool. The keypool would then be topped up to\n+ * maintain 100 keys. This ensured that as long as the wallet hadn't used more\n+ * than 100 keys since the previous backup, all funds would be safe, since a\n+ * restored wallet would be able to scan for all owned addresses.\n+ *\n+ * A keypool also allowed encrypted wallets to give out addresses without\n+ * having to be decrypted to generate a new private key.\n+ *\n+ * With the introduction of HD wallets (commit: f1902510), the keypool\n+ * essentially became an address look-ahead pool. Restoring old backups can no\n+ * longer definitively lose funds as long as the addresses used were from the\n+ * wallet's HD seed (since all private keys can be rederived from the seed).\n+ * However, if many addresses were used since the backup, then the wallet may\n+ * not know how far ahead in the HD chain to look for its addresses. The\n+ * keypool is used to implement a 'gap limit'. The keypool maintains a set of\n+ * keys (by default 1000) ahead of the last used key and scans for the\n+ * addresses of those keys.  This avoids the risk of not seeing transactions\n+ * involving the wallet's addresses, or of re-using the same address.\n+ *\n+ * The HD-split wallet feature added a second keypool (commit: 02592f4c). There\n+ * is an external keypool (for addresses to hand out) and an internal keypool\n+ * (for change addresses).\n+ *\n+ * Keypool keys are stored in the wallet/keystore's keymap. The keypool data is\n+ * stored as sets of indexes in the wallet (setInternalKeyPool,\n+ * setExternalKeyPool and set_pre_split_keypool), and a map from the key to the\n+ * index (m_pool_key_to_index). The CKeyPool object is used to\n+ * serialize/deserialize the pool data to/from the database.\n+ */\n+class CKeyPool\n+{\n+public:\n+    //! The time at which the key was generated. Set in AddKeypoolPubKeyWithDB\n+    int64_t nTime;\n+    //! The public key\n+    CPubKey vchPubKey;\n+    //! Whether this keypool entry is in the internal keypool (for change outputs)\n+    bool fInternal;\n+    //! Whether this key was generated for a keypool before the wallet was upgraded to HD-split\n+    bool m_pre_split;\n+\n+    CKeyPool();\n+    CKeyPool(const CPubKey& vchPubKeyIn, bool internalIn);\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        int nVersion = s.GetVersion();\n+        if (!(s.GetType() & SER_GETHASH))\n+            READWRITE(nVersion);\n+        READWRITE(nTime);\n+        READWRITE(vchPubKey);\n+        if (ser_action.ForRead()) {\n+            try {\n+                READWRITE(fInternal);\n+            }\n+            catch (std::ios_base::failure&) {\n+                /* flag as external address if we can't read the internal boolean\n+                   (this will be the case for any wallet before the HD chain split version) */\n+                fInternal = false;\n+            }\n+            try {\n+                READWRITE(m_pre_split);\n+            }\n+            catch (std::ios_base::failure&) {\n+                /* flag as postsplit address if we can't read the m_pre_split boolean\n+                   (this will be the case for any wallet that upgrades to HD chain split)*/\n+                m_pre_split = false;\n+            }\n+        }\n+        else {\n+            READWRITE(fInternal);\n+            READWRITE(m_pre_split);\n+        }\n+    }\n+};\n+\n+/*\n+ * A class implementing ScriptPubKeyMan manages some (or all) scriptPubKeys used in a wallet.\n+ * It contains the scripts and keys related to the scriptPubKeys it manages.\n+ * A ScriptPubKeyMan will be able to give out scriptPubKeys to be used, as well as marking\n+ * when a scriptPubKey has been used. It also handles when and how to store a scriptPubKey\n+ * and it's related scripts and keys, including encryption.\n+ */\n+class ScriptPubKeyMan\n+{\n+protected:\n+    WalletStorage& m_storage;\n+    std::shared_ptr<WalletDatabase> m_database;\n+\n+public:\n+    ScriptPubKeyMan(WalletStorage& storage) : m_storage(storage), m_database(storage.GetDatabase()) {}\n+\n+    const std::string GetDisplayName() const { return m_storage.GetDisplayName(); }\n+    bool IsWalletFlagSet(uint64_t flag) const { return m_storage.IsWalletFlagSet(flag); }\n+    void SetWalletFlag(uint64_t flag) { return m_storage.SetWalletFlag(flag); }\n+    void UnsetWalletFlagWithDB(WalletBatch& batch, uint64_t flag) { return m_storage.UnsetWalletFlagWithDB(batch, flag); }\n+    bool CanSupportFeature(enum WalletFeature wf) const { return m_storage.CanSupportFeature(wf); }\n+    void SetMinVersion(enum WalletFeature wf) { return m_storage.SetMinVersion(wf); }\n+    const CKeyingMaterial& GetEncryptionKey() const { return m_storage.GetEncryptionKey(); }\n+    bool HasEncryptionKeys() const { return m_storage.HasEncryptionKeys(); }\n+    bool IsLocked() const { return m_storage.IsLocked(); }\n+\n+    virtual ~ScriptPubKeyMan() {};\n+    virtual bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) { return false; }\n+    virtual isminetype IsMine(const CScript& script) const { return ISMINE_NO; }\n+\n+    virtual bool HasEncryptedData() const { return false; }\n+\n+    virtual bool CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys = false) { return false; }\n+    virtual bool Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch) { return false; }\n+\n+    virtual bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool) { return false; }\n+    virtual void KeepDestination(int64_t index) {}\n+    virtual void ReturnDestination(int64_t index, bool internal, const CTxDestination& addr) {}\n+\n+    virtual bool TopUp(unsigned int size = 0) { return false; }\n+\n+    //! Mark unused addresses as being used\n+    virtual void MarkUnusedAddresses(const CScript& script) {}\n+\n+    //! Upgrade stored CKeyMetadata objects to store key origin info as KeyOriginInfo\n+    virtual void UpgradeKeyMetadata() {}\n+\n+    /** Sets up the key generation stuff, i.e. generates new HD seeds and sets them as active.\n+      * Returns false if already setup or setup fails, true if setup is successful\n+      * Set force=true to make it re-setup if already setup, used for upgrades\n+      */\n+    virtual bool SetupGeneration(bool force = false) { return false; }\n+\n+    /* Returns true if HD is enabled */\n+    virtual bool IsHDEnabled() const { return false; }\n+\n+    /* Returns true if the wallet can give out new addresses. This means it has keys in the keypool or can generate new keys */\n+    virtual bool CanGetAddresses(bool internal = false) { return false; }\n+\n+    /** Upgrades the wallet to the specified version */\n+    virtual bool Upgrade(int prev_version, int new_version, std::string& error) { return false; }\n+\n+    virtual bool HavePrivateKeys() const { return false; }\n+\n+    //! The action to do when the DB needs rewrite\n+    virtual void RewriteDB() {}\n+\n+    virtual int64_t GetOldestKeyPoolTime() { return GetTime(); }\n+\n+    virtual size_t KeypoolCountExternalKeys() { return 0; }\n+    virtual unsigned int GetKeyPoolSize() const { return 0; }\n+\n+    virtual int64_t GetTimeFirstKey() const { return 0; }\n+\n+    virtual const CKeyMetadata* GetMetadata(uint160 id) const { return nullptr; }\n+\n+    virtual std::unique_ptr<SigningProvider> GetSigningProvider(const CScript& script) const { return nullptr; }\n+\n+    /** Whether this ScriptPubKeyMan can provide a SigningProvider (via GetSigningProvider) that, combined with\n+      * sigdata, can produce a valid signature.\n+      */\n+    virtual bool CanProvide(const CScript& script, SignatureData& sigdata) { return false; }\n+\n+    virtual uint256 GetID() const { return uint256(); }\n+\n+    /** Prepends the wallet name in logging output to ease debugging in multi-wallet use cases */\n+    template<typename... Params>\n+    void WalletLogPrintf(std::string fmt, Params... parameters) const {\n+        LogPrintf((\"%s \" + fmt).c_str(), GetDisplayName(), parameters...);\n+    };\n+\n+    /** Watch-only address added */\n+    boost::signals2::signal<void (bool fHaveWatchOnly)> NotifyWatchonlyChanged;\n+\n+    /** Keypool has new keys */\n+    boost::signals2::signal<void ()> NotifyCanGetAddressesChanged;\n+};\n+\n+class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProvider\n+{\n+private:\n+    //! keeps track of whether Unlock has run a thorough check before\n+    bool fDecryptionThoroughlyChecked = false;\n+\n+    using WatchOnlySet = std::set<CScript>;\n+    using WatchKeyMap = std::map<CKeyID, CPubKey>;\n+\n+    WalletBatch *encrypted_batch GUARDED_BY(cs_KeyStore) = nullptr;\n+\n+    using CryptedKeyMap = std::map<CKeyID, std::pair<CPubKey, std::vector<unsigned char>>>;\n+\n+    CryptedKeyMap mapCryptedKeys GUARDED_BY(cs_KeyStore);\n+    WatchOnlySet setWatchOnly GUARDED_BY(cs_KeyStore);\n+    WatchKeyMap mapWatchKeys GUARDED_BY(cs_KeyStore);\n+\n+    int64_t nTimeFirstKey GUARDED_BY(cs_KeyStore) = 0;\n+\n+    bool AddKeyPubKeyInner(const CKey& key, const CPubKey &pubkey);\n+    bool AddCryptedKeyInner(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n+\n+    /**\n+     * Private version of AddWatchOnly method which does not accept a\n+     * timestamp, and which will reset the wallet's nTimeFirstKey value to 1 if\n+     * the watch key did not previously have a timestamp associated with it.\n+     * Because this is an inherited virtual method, it is accessible despite\n+     * being marked private, but it is marked private anyway to encourage use\n+     * of the other AddWatchOnly which accepts a timestamp and sets\n+     * nTimeFirstKey more intelligently for more efficient rescans.\n+     */\n+    bool AddWatchOnly(const CScript& dest) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+    bool AddWatchOnlyWithDB(WalletBatch &batch, const CScript& dest) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+    bool AddWatchOnlyInMem(const CScript &dest);\n+    //! Adds a watch-only address to the store, and saves it to disk.\n+    bool AddWatchOnlyWithDB(WalletBatch &batch, const CScript& dest, int64_t create_time) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+\n+    //! Adds a key to the store, and saves it to disk.\n+    bool AddKeyPubKeyWithDB(WalletBatch &batch,const CKey& key, const CPubKey &pubkey) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+\n+    void AddKeypoolPubkeyWithDB(const CPubKey& pubkey, const bool internal, WalletBatch& batch);\n+\n+    //! Adds a script to the store and saves it to disk\n+    bool AddCScriptWithDB(WalletBatch& batch, const CScript& script);\n+\n+    /** Add a KeyOriginInfo to the wallet */\n+    bool AddKeyOriginWithDB(WalletBatch& batch, const CPubKey& pubkey, const KeyOriginInfo& info);\n+\n+    /* the HD chain data model (external chain counters) */\n+    CHDChain hdChain;\n+\n+    /* HD derive new child key (on internal or external chain) */\n+    void DeriveNewChildKey(WalletBatch& batch, CKeyMetadata& metadata, CKey& secret, bool internal = false) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+\n+    std::set<int64_t> setInternalKeyPool GUARDED_BY(cs_KeyStore);\n+    std::set<int64_t> setExternalKeyPool GUARDED_BY(cs_KeyStore);\n+    std::set<int64_t> set_pre_split_keypool GUARDED_BY(cs_KeyStore);\n+    int64_t m_max_keypool_index GUARDED_BY(cs_KeyStore) = 0;\n+    std::map<CKeyID, int64_t> m_pool_key_to_index;\n+    // Tracks keypool indexes to CKeyIDs of keys that have been taken out of the keypool but may be returned to it\n+    std::map<int64_t, CKeyID> m_reserved_key_to_index;\n+\n+    //! Fetches a key from the keypool\n+    bool GetKeyFromPool(CPubKey &key, bool internal = false);\n+\n+    /**\n+     * Reserves a key from the keypool and sets nIndex to its index\n+     *\n+     * @param[out] nIndex the index of the key in keypool\n+     * @param[out] keypool the keypool the key was drawn from, which could be the\n+     *     the pre-split pool if present, or the internal or external pool\n+     * @param fRequestedInternal true if the caller would like the key drawn\n+     *     from the internal keypool, false if external is preferred\n+     *\n+     * @return true if succeeded, false if failed due to empty keypool\n+     * @throws std::runtime_error if keypool read failed, key was invalid,\n+     *     was not found in the wallet, or was misclassified in the internal\n+     *     or external keypool\n+     */\n+    bool ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool fRequestedInternal);\n+\n+    void KeepKey(int64_t nIndex);\n+    void ReturnKey(int64_t nIndex, bool fInternal, const CKeyID& pubkey_id);\n+\n+public:\n+    using ScriptPubKeyMan::ScriptPubKeyMan;\n+\n+    bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) override EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+    isminetype IsMine(const CScript& script) const override;\n+\n+    bool HasEncryptedData() const override;\n+\n+    bool CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys = false) override;\n+    bool Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch) override;\n+\n+    bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool) override;\n+    void KeepDestination(int64_t index) override;\n+    void ReturnDestination(int64_t index, bool internal, const CTxDestination& addr) override;\n+\n+    bool TopUp(unsigned int size = 0) override;\n+\n+    void MarkUnusedAddresses(const CScript& script) override;\n+\n+    void UpgradeKeyMetadata() override;\n+\n+    bool IsHDEnabled() const override;\n+\n+    bool SetupGeneration(bool force = false) override;\n+\n+    bool Upgrade(int prev_version, int new_version, std::string& error) override;\n+\n+    bool HavePrivateKeys() const override;\n+\n+    void RewriteDB() override;\n+\n+    int64_t GetOldestKeyPoolTime() override;\n+    size_t KeypoolCountExternalKeys() override;\n+    unsigned int GetKeyPoolSize() const override;\n+\n+    int64_t GetTimeFirstKey() const override;\n+\n+    const CKeyMetadata* GetMetadata(uint160 id) const override;\n+\n+    bool CanGetAddresses(bool internal = false) override;\n+\n+    std::unique_ptr<SigningProvider> GetSigningProvider(const CScript& script) const override;\n+\n+    bool CanProvide(const CScript& script, SignatureData& sigdata) override;\n+\n+    uint256 GetID() const override;\n+\n+    // Map from Key ID to key metadata.\n+    std::map<CKeyID, CKeyMetadata> mapKeyMetadata GUARDED_BY(cs_KeyStore);\n+\n+    // Map from Script ID to key metadata (for watch-only keys).\n+    std::map<CScriptID, CKeyMetadata> m_script_metadata GUARDED_BY(cs_KeyStore);\n+\n+    //! Adds a key to the store, and saves it to disk.\n+    bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey) override EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": null,
      "original_position": 370,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "0fb52e481f411fdf67257965a9144522b4bac87c",
      "in_reply_to_id": 333071878,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Changed to lock internally.",
      "created_at": "2019-10-09T17:22:22Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r333135893",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/333135893"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 370,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/333135945",
      "pull_request_review_id": 299571884,
      "id": 333135945,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMzEzNTk0NQ==",
      "diff_hunk": "@@ -0,0 +1,475 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+#define BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <wallet/crypter.h>\n+#include <wallet/ismine.h>\n+#include <wallet/walletdb.h>\n+#include <wallet/walletutil.h>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+enum class OutputType;\n+\n+// Wallet storage things that ScriptPubKeyMans need in order to be able to store things to the wallet database\n+class WalletStorage\n+{\n+public:\n+    virtual ~WalletStorage() = default;\n+    virtual const std::string GetDisplayName() const = 0;\n+    virtual std::shared_ptr<WalletDatabase> GetDatabase() = 0;\n+    virtual bool IsWalletFlagSet(uint64_t) const = 0;\n+    virtual void SetWalletFlag(uint64_t) = 0;\n+    virtual void UnsetWalletFlagWithDB(WalletBatch&, uint64_t) = 0;\n+    virtual bool CanSupportFeature(enum WalletFeature) const = 0;\n+    virtual void SetMinVersion(enum WalletFeature, WalletBatch* = nullptr, bool = false) = 0;\n+    virtual const CKeyingMaterial& GetEncryptionKey() const = 0;\n+    virtual bool HasEncryptionKeys() const = 0;\n+    virtual bool IsLocked() const = 0;\n+};\n+\n+//! Default for -keypool\n+static const unsigned int DEFAULT_KEYPOOL_SIZE = 1000;\n+\n+std::vector<CKeyID> GetAffectedKeys(const CScript& spk, const SigningProvider& provider);\n+\n+/** A key from a CWallet's keypool\n+ *\n+ * The wallet holds one (for pre HD-split wallets) or several keypools. These\n+ * are sets of keys that have not yet been used to provide addresses or receive\n+ * change.\n+ *\n+ * The Bitcoin Core wallet was originally a collection of unrelated private\n+ * keys with their associated addresses. If a non-HD wallet generated a\n+ * key/address, gave that address out and then restored a backup from before\n+ * that key's generation, then any funds sent to that address would be\n+ * lost definitively.\n+ *\n+ * The keypool was implemented to avoid this scenario (commit: 10384941). The\n+ * wallet would generate a set of keys (100 by default). When a new public key\n+ * was required, either to give out as an address or to use in a change output,\n+ * it would be drawn from the keypool. The keypool would then be topped up to\n+ * maintain 100 keys. This ensured that as long as the wallet hadn't used more\n+ * than 100 keys since the previous backup, all funds would be safe, since a\n+ * restored wallet would be able to scan for all owned addresses.\n+ *\n+ * A keypool also allowed encrypted wallets to give out addresses without\n+ * having to be decrypted to generate a new private key.\n+ *\n+ * With the introduction of HD wallets (commit: f1902510), the keypool\n+ * essentially became an address look-ahead pool. Restoring old backups can no\n+ * longer definitively lose funds as long as the addresses used were from the\n+ * wallet's HD seed (since all private keys can be rederived from the seed).\n+ * However, if many addresses were used since the backup, then the wallet may\n+ * not know how far ahead in the HD chain to look for its addresses. The\n+ * keypool is used to implement a 'gap limit'. The keypool maintains a set of\n+ * keys (by default 1000) ahead of the last used key and scans for the\n+ * addresses of those keys.  This avoids the risk of not seeing transactions\n+ * involving the wallet's addresses, or of re-using the same address.\n+ *\n+ * The HD-split wallet feature added a second keypool (commit: 02592f4c). There\n+ * is an external keypool (for addresses to hand out) and an internal keypool\n+ * (for change addresses).\n+ *\n+ * Keypool keys are stored in the wallet/keystore's keymap. The keypool data is\n+ * stored as sets of indexes in the wallet (setInternalKeyPool,\n+ * setExternalKeyPool and set_pre_split_keypool), and a map from the key to the\n+ * index (m_pool_key_to_index). The CKeyPool object is used to\n+ * serialize/deserialize the pool data to/from the database.\n+ */\n+class CKeyPool\n+{\n+public:\n+    //! The time at which the key was generated. Set in AddKeypoolPubKeyWithDB\n+    int64_t nTime;\n+    //! The public key\n+    CPubKey vchPubKey;\n+    //! Whether this keypool entry is in the internal keypool (for change outputs)\n+    bool fInternal;\n+    //! Whether this key was generated for a keypool before the wallet was upgraded to HD-split\n+    bool m_pre_split;\n+\n+    CKeyPool();\n+    CKeyPool(const CPubKey& vchPubKeyIn, bool internalIn);\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        int nVersion = s.GetVersion();\n+        if (!(s.GetType() & SER_GETHASH))\n+            READWRITE(nVersion);\n+        READWRITE(nTime);\n+        READWRITE(vchPubKey);\n+        if (ser_action.ForRead()) {\n+            try {\n+                READWRITE(fInternal);\n+            }\n+            catch (std::ios_base::failure&) {\n+                /* flag as external address if we can't read the internal boolean\n+                   (this will be the case for any wallet before the HD chain split version) */\n+                fInternal = false;\n+            }\n+            try {\n+                READWRITE(m_pre_split);\n+            }\n+            catch (std::ios_base::failure&) {\n+                /* flag as postsplit address if we can't read the m_pre_split boolean\n+                   (this will be the case for any wallet that upgrades to HD chain split)*/\n+                m_pre_split = false;\n+            }\n+        }\n+        else {\n+            READWRITE(fInternal);\n+            READWRITE(m_pre_split);\n+        }\n+    }\n+};\n+\n+/*\n+ * A class implementing ScriptPubKeyMan manages some (or all) scriptPubKeys used in a wallet.\n+ * It contains the scripts and keys related to the scriptPubKeys it manages.\n+ * A ScriptPubKeyMan will be able to give out scriptPubKeys to be used, as well as marking\n+ * when a scriptPubKey has been used. It also handles when and how to store a scriptPubKey\n+ * and it's related scripts and keys, including encryption.\n+ */\n+class ScriptPubKeyMan\n+{\n+protected:\n+    WalletStorage& m_storage;\n+    std::shared_ptr<WalletDatabase> m_database;\n+\n+public:\n+    ScriptPubKeyMan(WalletStorage& storage) : m_storage(storage), m_database(storage.GetDatabase()) {}\n+\n+    const std::string GetDisplayName() const { return m_storage.GetDisplayName(); }\n+    bool IsWalletFlagSet(uint64_t flag) const { return m_storage.IsWalletFlagSet(flag); }\n+    void SetWalletFlag(uint64_t flag) { return m_storage.SetWalletFlag(flag); }\n+    void UnsetWalletFlagWithDB(WalletBatch& batch, uint64_t flag) { return m_storage.UnsetWalletFlagWithDB(batch, flag); }\n+    bool CanSupportFeature(enum WalletFeature wf) const { return m_storage.CanSupportFeature(wf); }\n+    void SetMinVersion(enum WalletFeature wf) { return m_storage.SetMinVersion(wf); }\n+    const CKeyingMaterial& GetEncryptionKey() const { return m_storage.GetEncryptionKey(); }\n+    bool HasEncryptionKeys() const { return m_storage.HasEncryptionKeys(); }\n+    bool IsLocked() const { return m_storage.IsLocked(); }\n+\n+    virtual ~ScriptPubKeyMan() {};\n+    virtual bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) { return false; }\n+    virtual isminetype IsMine(const CScript& script) const { return ISMINE_NO; }\n+\n+    virtual bool HasEncryptedData() const { return false; }\n+\n+    virtual bool CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys = false) { return false; }\n+    virtual bool Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch) { return false; }\n+\n+    virtual bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool) { return false; }\n+    virtual void KeepDestination(int64_t index) {}\n+    virtual void ReturnDestination(int64_t index, bool internal, const CTxDestination& addr) {}\n+\n+    virtual bool TopUp(unsigned int size = 0) { return false; }\n+\n+    //! Mark unused addresses as being used\n+    virtual void MarkUnusedAddresses(const CScript& script) {}\n+\n+    //! Upgrade stored CKeyMetadata objects to store key origin info as KeyOriginInfo\n+    virtual void UpgradeKeyMetadata() {}\n+\n+    /** Sets up the key generation stuff, i.e. generates new HD seeds and sets them as active.\n+      * Returns false if already setup or setup fails, true if setup is successful\n+      * Set force=true to make it re-setup if already setup, used for upgrades\n+      */\n+    virtual bool SetupGeneration(bool force = false) { return false; }\n+\n+    /* Returns true if HD is enabled */\n+    virtual bool IsHDEnabled() const { return false; }\n+\n+    /* Returns true if the wallet can give out new addresses. This means it has keys in the keypool or can generate new keys */\n+    virtual bool CanGetAddresses(bool internal = false) { return false; }\n+\n+    /** Upgrades the wallet to the specified version */\n+    virtual bool Upgrade(int prev_version, int new_version, std::string& error) { return false; }\n+\n+    virtual bool HavePrivateKeys() const { return false; }\n+\n+    //! The action to do when the DB needs rewrite\n+    virtual void RewriteDB() {}\n+\n+    virtual int64_t GetOldestKeyPoolTime() { return GetTime(); }\n+\n+    virtual size_t KeypoolCountExternalKeys() { return 0; }\n+    virtual unsigned int GetKeyPoolSize() const { return 0; }\n+\n+    virtual int64_t GetTimeFirstKey() const { return 0; }\n+\n+    virtual const CKeyMetadata* GetMetadata(uint160 id) const { return nullptr; }\n+\n+    virtual std::unique_ptr<SigningProvider> GetSigningProvider(const CScript& script) const { return nullptr; }\n+\n+    /** Whether this ScriptPubKeyMan can provide a SigningProvider (via GetSigningProvider) that, combined with\n+      * sigdata, can produce a valid signature.\n+      */\n+    virtual bool CanProvide(const CScript& script, SignatureData& sigdata) { return false; }\n+\n+    virtual uint256 GetID() const { return uint256(); }\n+\n+    /** Prepends the wallet name in logging output to ease debugging in multi-wallet use cases */\n+    template<typename... Params>\n+    void WalletLogPrintf(std::string fmt, Params... parameters) const {\n+        LogPrintf((\"%s \" + fmt).c_str(), GetDisplayName(), parameters...);\n+    };\n+\n+    /** Watch-only address added */\n+    boost::signals2::signal<void (bool fHaveWatchOnly)> NotifyWatchonlyChanged;\n+\n+    /** Keypool has new keys */\n+    boost::signals2::signal<void ()> NotifyCanGetAddressesChanged;\n+};\n+\n+class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProvider\n+{\n+private:\n+    //! keeps track of whether Unlock has run a thorough check before\n+    bool fDecryptionThoroughlyChecked = false;\n+\n+    using WatchOnlySet = std::set<CScript>;\n+    using WatchKeyMap = std::map<CKeyID, CPubKey>;\n+\n+    WalletBatch *encrypted_batch GUARDED_BY(cs_KeyStore) = nullptr;\n+\n+    using CryptedKeyMap = std::map<CKeyID, std::pair<CPubKey, std::vector<unsigned char>>>;\n+\n+    CryptedKeyMap mapCryptedKeys GUARDED_BY(cs_KeyStore);\n+    WatchOnlySet setWatchOnly GUARDED_BY(cs_KeyStore);\n+    WatchKeyMap mapWatchKeys GUARDED_BY(cs_KeyStore);\n+\n+    int64_t nTimeFirstKey GUARDED_BY(cs_KeyStore) = 0;\n+\n+    bool AddKeyPubKeyInner(const CKey& key, const CPubKey &pubkey);\n+    bool AddCryptedKeyInner(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n+\n+    /**\n+     * Private version of AddWatchOnly method which does not accept a\n+     * timestamp, and which will reset the wallet's nTimeFirstKey value to 1 if\n+     * the watch key did not previously have a timestamp associated with it.\n+     * Because this is an inherited virtual method, it is accessible despite\n+     * being marked private, but it is marked private anyway to encourage use\n+     * of the other AddWatchOnly which accepts a timestamp and sets\n+     * nTimeFirstKey more intelligently for more efficient rescans.\n+     */\n+    bool AddWatchOnly(const CScript& dest) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+    bool AddWatchOnlyWithDB(WalletBatch &batch, const CScript& dest) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+    bool AddWatchOnlyInMem(const CScript &dest);\n+    //! Adds a watch-only address to the store, and saves it to disk.\n+    bool AddWatchOnlyWithDB(WalletBatch &batch, const CScript& dest, int64_t create_time) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+\n+    //! Adds a key to the store, and saves it to disk.\n+    bool AddKeyPubKeyWithDB(WalletBatch &batch,const CKey& key, const CPubKey &pubkey) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+\n+    void AddKeypoolPubkeyWithDB(const CPubKey& pubkey, const bool internal, WalletBatch& batch);\n+\n+    //! Adds a script to the store and saves it to disk\n+    bool AddCScriptWithDB(WalletBatch& batch, const CScript& script);\n+\n+    /** Add a KeyOriginInfo to the wallet */\n+    bool AddKeyOriginWithDB(WalletBatch& batch, const CPubKey& pubkey, const KeyOriginInfo& info);\n+\n+    /* the HD chain data model (external chain counters) */\n+    CHDChain hdChain;\n+\n+    /* HD derive new child key (on internal or external chain) */\n+    void DeriveNewChildKey(WalletBatch& batch, CKeyMetadata& metadata, CKey& secret, bool internal = false) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+\n+    std::set<int64_t> setInternalKeyPool GUARDED_BY(cs_KeyStore);\n+    std::set<int64_t> setExternalKeyPool GUARDED_BY(cs_KeyStore);\n+    std::set<int64_t> set_pre_split_keypool GUARDED_BY(cs_KeyStore);\n+    int64_t m_max_keypool_index GUARDED_BY(cs_KeyStore) = 0;\n+    std::map<CKeyID, int64_t> m_pool_key_to_index;\n+    // Tracks keypool indexes to CKeyIDs of keys that have been taken out of the keypool but may be returned to it\n+    std::map<int64_t, CKeyID> m_reserved_key_to_index;\n+\n+    //! Fetches a key from the keypool\n+    bool GetKeyFromPool(CPubKey &key, bool internal = false);\n+\n+    /**\n+     * Reserves a key from the keypool and sets nIndex to its index\n+     *\n+     * @param[out] nIndex the index of the key in keypool\n+     * @param[out] keypool the keypool the key was drawn from, which could be the\n+     *     the pre-split pool if present, or the internal or external pool\n+     * @param fRequestedInternal true if the caller would like the key drawn\n+     *     from the internal keypool, false if external is preferred\n+     *\n+     * @return true if succeeded, false if failed due to empty keypool\n+     * @throws std::runtime_error if keypool read failed, key was invalid,\n+     *     was not found in the wallet, or was misclassified in the internal\n+     *     or external keypool\n+     */\n+    bool ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool fRequestedInternal);\n+\n+    void KeepKey(int64_t nIndex);\n+    void ReturnKey(int64_t nIndex, bool fInternal, const CKeyID& pubkey_id);\n+\n+public:\n+    using ScriptPubKeyMan::ScriptPubKeyMan;\n+\n+    bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) override EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": null,
      "original_position": 319,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "0fb52e481f411fdf67257965a9144522b4bac87c",
      "in_reply_to_id": 333067248,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Changed to lock internally.",
      "created_at": "2019-10-09T17:22:29Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r333135945",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/333135945"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 319,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/334162874",
      "pull_request_review_id": 300911895,
      "id": 334162874,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNDE2Mjg3NA==",
      "diff_hunk": "@@ -78,22 +78,30 @@ CTxDestination AddAndGetDestinationForScript(FillableSigningProvider& keystore,\n {\n     // Add script to keystore\n     keystore.AddCScript(script);\n+    ScriptHash sh = ScriptHash(script);",
      "path": "src/outputtype.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "39bd4db227d8c771502184389db97f9d7e7ac3c0",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "micro-nit: `ScriptHash sh(script);`",
      "created_at": "2019-10-11T20:30:15Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r334162874",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/334162874"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 81,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/334164302",
      "pull_request_review_id": 300911895,
      "id": 334164302,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNDE2NDMwMg==",
      "diff_hunk": "@@ -0,0 +1,471 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+#define BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <wallet/crypter.h>\n+#include <wallet/ismine.h>\n+#include <wallet/walletdb.h>\n+#include <wallet/walletutil.h>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+enum class OutputType;\n+\n+// Wallet storage things that ScriptPubKeyMans need in order to be able to store things to the wallet database\n+class WalletStorage\n+{\n+public:\n+    virtual ~WalletStorage() = default;\n+    virtual const std::string GetDisplayName() const = 0;\n+    virtual std::shared_ptr<WalletDatabase> GetDatabase() = 0;\n+    virtual bool IsWalletFlagSet(uint64_t) const = 0;\n+    virtual void SetWalletFlag(uint64_t) = 0;\n+    virtual void UnsetWalletFlagWithDB(WalletBatch&, uint64_t) = 0;\n+    virtual bool CanSupportFeature(enum WalletFeature) const = 0;\n+    virtual void SetMinVersion(enum WalletFeature, WalletBatch* = nullptr, bool = false) = 0;\n+    virtual const CKeyingMaterial& GetEncryptionKey() const = 0;\n+    virtual bool HasEncryptionKeys() const = 0;\n+    virtual bool IsLocked() const = 0;\n+};\n+\n+//! Default for -keypool\n+static const unsigned int DEFAULT_KEYPOOL_SIZE = 1000;\n+\n+std::vector<CKeyID> GetAffectedKeys(const CScript& spk, const SigningProvider& provider);\n+\n+/** A key from a CWallet's keypool\n+ *\n+ * The wallet holds one (for pre HD-split wallets) or several keypools. These\n+ * are sets of keys that have not yet been used to provide addresses or receive\n+ * change.\n+ *\n+ * The Bitcoin Core wallet was originally a collection of unrelated private\n+ * keys with their associated addresses. If a non-HD wallet generated a\n+ * key/address, gave that address out and then restored a backup from before\n+ * that key's generation, then any funds sent to that address would be\n+ * lost definitively.\n+ *\n+ * The keypool was implemented to avoid this scenario (commit: 10384941). The\n+ * wallet would generate a set of keys (100 by default). When a new public key\n+ * was required, either to give out as an address or to use in a change output,\n+ * it would be drawn from the keypool. The keypool would then be topped up to\n+ * maintain 100 keys. This ensured that as long as the wallet hadn't used more\n+ * than 100 keys since the previous backup, all funds would be safe, since a\n+ * restored wallet would be able to scan for all owned addresses.\n+ *\n+ * A keypool also allowed encrypted wallets to give out addresses without\n+ * having to be decrypted to generate a new private key.\n+ *\n+ * With the introduction of HD wallets (commit: f1902510), the keypool\n+ * essentially became an address look-ahead pool. Restoring old backups can no\n+ * longer definitively lose funds as long as the addresses used were from the\n+ * wallet's HD seed (since all private keys can be rederived from the seed).\n+ * However, if many addresses were used since the backup, then the wallet may\n+ * not know how far ahead in the HD chain to look for its addresses. The\n+ * keypool is used to implement a 'gap limit'. The keypool maintains a set of\n+ * keys (by default 1000) ahead of the last used key and scans for the\n+ * addresses of those keys.  This avoids the risk of not seeing transactions\n+ * involving the wallet's addresses, or of re-using the same address.\n+ *\n+ * The HD-split wallet feature added a second keypool (commit: 02592f4c). There\n+ * is an external keypool (for addresses to hand out) and an internal keypool\n+ * (for change addresses).\n+ *\n+ * Keypool keys are stored in the wallet/keystore's keymap. The keypool data is\n+ * stored as sets of indexes in the wallet (setInternalKeyPool,\n+ * setExternalKeyPool and set_pre_split_keypool), and a map from the key to the\n+ * index (m_pool_key_to_index). The CKeyPool object is used to\n+ * serialize/deserialize the pool data to/from the database.\n+ */\n+class CKeyPool\n+{\n+public:\n+    //! The time at which the key was generated. Set in AddKeypoolPubKeyWithDB\n+    int64_t nTime;\n+    //! The public key\n+    CPubKey vchPubKey;\n+    //! Whether this keypool entry is in the internal keypool (for change outputs)\n+    bool fInternal;\n+    //! Whether this key was generated for a keypool before the wallet was upgraded to HD-split\n+    bool m_pre_split;\n+\n+    CKeyPool();\n+    CKeyPool(const CPubKey& vchPubKeyIn, bool internalIn);\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        int nVersion = s.GetVersion();\n+        if (!(s.GetType() & SER_GETHASH))\n+            READWRITE(nVersion);\n+        READWRITE(nTime);\n+        READWRITE(vchPubKey);\n+        if (ser_action.ForRead()) {\n+            try {\n+                READWRITE(fInternal);\n+            }\n+            catch (std::ios_base::failure&) {\n+                /* flag as external address if we can't read the internal boolean\n+                   (this will be the case for any wallet before the HD chain split version) */\n+                fInternal = false;\n+            }\n+            try {\n+                READWRITE(m_pre_split);\n+            }\n+            catch (std::ios_base::failure&) {\n+                /* flag as postsplit address if we can't read the m_pre_split boolean\n+                   (this will be the case for any wallet that upgrades to HD chain split)*/\n+                m_pre_split = false;\n+            }\n+        }\n+        else {\n+            READWRITE(fInternal);\n+            READWRITE(m_pre_split);\n+        }\n+    }\n+};\n+\n+/*\n+ * A class implementing ScriptPubKeyMan manages some (or all) scriptPubKeys used in a wallet.\n+ * It contains the scripts and keys related to the scriptPubKeys it manages.\n+ * A ScriptPubKeyMan will be able to give out scriptPubKeys to be used, as well as marking\n+ * when a scriptPubKey has been used. It also handles when and how to store a scriptPubKey\n+ * and it's related scripts and keys, including encryption.\n+ */\n+class ScriptPubKeyMan\n+{\n+protected:\n+    WalletStorage& m_storage;\n+    std::shared_ptr<WalletDatabase> m_database;\n+\n+public:\n+    ScriptPubKeyMan(WalletStorage& storage) : m_storage(storage), m_database(storage.GetDatabase()) {}\n+\n+    const std::string GetDisplayName() const { return m_storage.GetDisplayName(); }\n+    bool IsWalletFlagSet(uint64_t flag) const { return m_storage.IsWalletFlagSet(flag); }\n+    void SetWalletFlag(uint64_t flag) { return m_storage.SetWalletFlag(flag); }\n+    void UnsetWalletFlagWithDB(WalletBatch& batch, uint64_t flag) { return m_storage.UnsetWalletFlagWithDB(batch, flag); }\n+    bool CanSupportFeature(enum WalletFeature wf) const { return m_storage.CanSupportFeature(wf); }\n+    void SetMinVersion(enum WalletFeature wf) { return m_storage.SetMinVersion(wf); }\n+    const CKeyingMaterial& GetEncryptionKey() const { return m_storage.GetEncryptionKey(); }\n+    bool HasEncryptionKeys() const { return m_storage.HasEncryptionKeys(); }\n+    bool IsLocked() const { return m_storage.IsLocked(); }\n+\n+    virtual ~ScriptPubKeyMan() {};\n+    virtual bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) { return false; }\n+    virtual isminetype IsMine(const CScript& script) const { return ISMINE_NO; }\n+\n+    virtual bool CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys = false) { return false; }",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": 169,
      "original_position": 164,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "39bd4db227d8c771502184389db97f9d7e7ac3c0",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: Check for what about the decryption check?",
      "created_at": "2019-10-11T20:34:47Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r334164302",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/334164302"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 169,
      "original_line": 169,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/334171008",
      "pull_request_review_id": 300911895,
      "id": 334171008,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNDE3MTAwOA==",
      "diff_hunk": "@@ -4719,62 +3991,27 @@ std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outpu\n     return groups;\n }\n \n-bool CWallet::GetKeyOrigin(const CKeyID& keyID, KeyOriginInfo& info) const\n-{\n-    CKeyMetadata meta;\n-    {\n-        LOCK(cs_wallet);\n-        auto it = mapKeyMetadata.find(keyID);\n-        if (it != mapKeyMetadata.end()) {\n-            meta = it->second;\n-        }\n-    }\n-    if (meta.has_key_origin) {\n-        std::copy(meta.key_origin.fingerprint, meta.key_origin.fingerprint + 4, info.fingerprint);\n-        info.path = meta.key_origin.path;\n-    } else { // Single pubkeys get the master fingerprint of themselves\n-        std::copy(keyID.begin(), keyID.begin() + 4, info.fingerprint);\n-    }\n-    return true;\n-}\n-\n-bool CWallet::AddKeyOriginWithDB(WalletBatch& batch, const CPubKey& pubkey, const KeyOriginInfo& info)\n+bool CWallet::IsCrypted() const",
      "path": "src/wallet/wallet.cpp",
      "position": 1483,
      "original_position": 1487,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "39bd4db227d8c771502184389db97f9d7e7ac3c0",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "future cleanup: Redundant with `HasEncryptionKeys`",
      "created_at": "2019-10-11T20:55:43Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r334171008",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/334171008"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3977,
      "original_line": 3977,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/334171593",
      "pull_request_review_id": 300911895,
      "id": 334171593,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNDE3MTU5Mw==",
      "diff_hunk": "@@ -0,0 +1,471 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+#define BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <wallet/crypter.h>\n+#include <wallet/ismine.h>\n+#include <wallet/walletdb.h>\n+#include <wallet/walletutil.h>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+enum class OutputType;\n+\n+// Wallet storage things that ScriptPubKeyMans need in order to be able to store things to the wallet database",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": null,
      "original_position": 19,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "39bd4db227d8c771502184389db97f9d7e7ac3c0",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "CWallet also needs this apparently?",
      "created_at": "2019-10-11T20:57:37Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r334171593",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/334171593"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 19,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/334171753",
      "pull_request_review_id": 300911895,
      "id": 334171753,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNDE3MTc1Mw==",
      "diff_hunk": "@@ -726,34 +585,12 @@ class WalletRescanReserver; //forward declarations for ScanForWalletTransactions\n  * A CWallet is an extension of a keystore, which also maintains a set of transactions and balances,",
      "path": "src/wallet/wallet.h",
      "position": null,
      "original_position": 191,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "39bd4db227d8c771502184389db97f9d7e7ac3c0",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "non-blocking nit: No longer an extension of a keystore, which isn't found anywhere anymore",
      "created_at": "2019-10-11T20:58:11Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r334171753",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/334171753"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 585,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/334172583",
      "pull_request_review_id": 300911895,
      "id": 334172583,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNDE3MjU4Mw==",
      "diff_hunk": "@@ -0,0 +1,471 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+#define BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <wallet/crypter.h>\n+#include <wallet/ismine.h>\n+#include <wallet/walletdb.h>\n+#include <wallet/walletutil.h>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+enum class OutputType;\n+\n+// Wallet storage things that ScriptPubKeyMans need in order to be able to store things to the wallet database",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": null,
      "original_position": 19,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "39bd4db227d8c771502184389db97f9d7e7ac3c0",
      "in_reply_to_id": 334171593,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Can this explanation be made more concrete? Why are these things set here versus elsewhere in ScriptPubKeyMans/CWallet?\r\n\r\n\"storage\" vs \"database\", why does the database in ScriptPubKeyMan and referenced inside m_storage as well?",
      "created_at": "2019-10-11T21:00:57Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r334172583",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/334172583"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 19,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/334180949",
      "pull_request_review_id": 300936468,
      "id": 334180949,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNDE4MDk0OQ==",
      "diff_hunk": "@@ -0,0 +1,471 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+#define BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <wallet/crypter.h>\n+#include <wallet/ismine.h>\n+#include <wallet/walletdb.h>\n+#include <wallet/walletutil.h>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+enum class OutputType;\n+\n+// Wallet storage things that ScriptPubKeyMans need in order to be able to store things to the wallet database",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": null,
      "original_position": 19,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "39bd4db227d8c771502184389db97f9d7e7ac3c0",
      "in_reply_to_id": 334171593,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/16341#discussion_r334172583\r\n\r\n> \"storage\" vs \"database\", why does the database in ScriptPubKeyMan and referenced inside m_storage as well?\r\n\r\nThere isn't a good reason for this. I marked the change adding `m_database` as one of the \"Unclear if this change is necessary or useful\" changes in my branch: d18e2cd8642a6b4e73be0482ef19f76698f1ef62",
      "created_at": "2019-10-11T21:30:06Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r334180949",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/334180949"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 19,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/334181291",
      "pull_request_review_id": 300936945,
      "id": 334181291,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNDE4MTI5MQ==",
      "diff_hunk": "@@ -0,0 +1,471 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+#define BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <wallet/crypter.h>\n+#include <wallet/ismine.h>\n+#include <wallet/walletdb.h>\n+#include <wallet/walletutil.h>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+enum class OutputType;\n+\n+// Wallet storage things that ScriptPubKeyMans need in order to be able to store things to the wallet database",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": null,
      "original_position": 19,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "39bd4db227d8c771502184389db97f9d7e7ac3c0",
      "in_reply_to_id": 334171593,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The underlying relations were explained to me offline. Incoming expanded comment hopefully.",
      "created_at": "2019-10-11T21:31:29Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r334181291",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/334181291"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 19,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/334185253",
      "pull_request_review_id": 300942272,
      "id": 334185253,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNDE4NTI1Mw==",
      "diff_hunk": "@@ -78,22 +78,30 @@ CTxDestination AddAndGetDestinationForScript(FillableSigningProvider& keystore,\n {\n     // Add script to keystore\n     keystore.AddCScript(script);\n+    ScriptHash sh = ScriptHash(script);",
      "path": "src/outputtype.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "39bd4db227d8c771502184389db97f9d7e7ac3c0",
      "in_reply_to_id": 334162874,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2019-10-11T21:47:39Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r334185253",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/334185253"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 81,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/334185287",
      "pull_request_review_id": 300942314,
      "id": 334185287,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNDE4NTI4Nw==",
      "diff_hunk": "@@ -0,0 +1,471 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+#define BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <wallet/crypter.h>\n+#include <wallet/ismine.h>\n+#include <wallet/walletdb.h>\n+#include <wallet/walletutil.h>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+enum class OutputType;\n+\n+// Wallet storage things that ScriptPubKeyMans need in order to be able to store things to the wallet database\n+class WalletStorage\n+{\n+public:\n+    virtual ~WalletStorage() = default;\n+    virtual const std::string GetDisplayName() const = 0;\n+    virtual std::shared_ptr<WalletDatabase> GetDatabase() = 0;\n+    virtual bool IsWalletFlagSet(uint64_t) const = 0;\n+    virtual void SetWalletFlag(uint64_t) = 0;\n+    virtual void UnsetWalletFlagWithDB(WalletBatch&, uint64_t) = 0;\n+    virtual bool CanSupportFeature(enum WalletFeature) const = 0;\n+    virtual void SetMinVersion(enum WalletFeature, WalletBatch* = nullptr, bool = false) = 0;\n+    virtual const CKeyingMaterial& GetEncryptionKey() const = 0;\n+    virtual bool HasEncryptionKeys() const = 0;\n+    virtual bool IsLocked() const = 0;\n+};\n+\n+//! Default for -keypool\n+static const unsigned int DEFAULT_KEYPOOL_SIZE = 1000;\n+\n+std::vector<CKeyID> GetAffectedKeys(const CScript& spk, const SigningProvider& provider);\n+\n+/** A key from a CWallet's keypool\n+ *\n+ * The wallet holds one (for pre HD-split wallets) or several keypools. These\n+ * are sets of keys that have not yet been used to provide addresses or receive\n+ * change.\n+ *\n+ * The Bitcoin Core wallet was originally a collection of unrelated private\n+ * keys with their associated addresses. If a non-HD wallet generated a\n+ * key/address, gave that address out and then restored a backup from before\n+ * that key's generation, then any funds sent to that address would be\n+ * lost definitively.\n+ *\n+ * The keypool was implemented to avoid this scenario (commit: 10384941). The\n+ * wallet would generate a set of keys (100 by default). When a new public key\n+ * was required, either to give out as an address or to use in a change output,\n+ * it would be drawn from the keypool. The keypool would then be topped up to\n+ * maintain 100 keys. This ensured that as long as the wallet hadn't used more\n+ * than 100 keys since the previous backup, all funds would be safe, since a\n+ * restored wallet would be able to scan for all owned addresses.\n+ *\n+ * A keypool also allowed encrypted wallets to give out addresses without\n+ * having to be decrypted to generate a new private key.\n+ *\n+ * With the introduction of HD wallets (commit: f1902510), the keypool\n+ * essentially became an address look-ahead pool. Restoring old backups can no\n+ * longer definitively lose funds as long as the addresses used were from the\n+ * wallet's HD seed (since all private keys can be rederived from the seed).\n+ * However, if many addresses were used since the backup, then the wallet may\n+ * not know how far ahead in the HD chain to look for its addresses. The\n+ * keypool is used to implement a 'gap limit'. The keypool maintains a set of\n+ * keys (by default 1000) ahead of the last used key and scans for the\n+ * addresses of those keys.  This avoids the risk of not seeing transactions\n+ * involving the wallet's addresses, or of re-using the same address.\n+ *\n+ * The HD-split wallet feature added a second keypool (commit: 02592f4c). There\n+ * is an external keypool (for addresses to hand out) and an internal keypool\n+ * (for change addresses).\n+ *\n+ * Keypool keys are stored in the wallet/keystore's keymap. The keypool data is\n+ * stored as sets of indexes in the wallet (setInternalKeyPool,\n+ * setExternalKeyPool and set_pre_split_keypool), and a map from the key to the\n+ * index (m_pool_key_to_index). The CKeyPool object is used to\n+ * serialize/deserialize the pool data to/from the database.\n+ */\n+class CKeyPool\n+{\n+public:\n+    //! The time at which the key was generated. Set in AddKeypoolPubKeyWithDB\n+    int64_t nTime;\n+    //! The public key\n+    CPubKey vchPubKey;\n+    //! Whether this keypool entry is in the internal keypool (for change outputs)\n+    bool fInternal;\n+    //! Whether this key was generated for a keypool before the wallet was upgraded to HD-split\n+    bool m_pre_split;\n+\n+    CKeyPool();\n+    CKeyPool(const CPubKey& vchPubKeyIn, bool internalIn);\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        int nVersion = s.GetVersion();\n+        if (!(s.GetType() & SER_GETHASH))\n+            READWRITE(nVersion);\n+        READWRITE(nTime);\n+        READWRITE(vchPubKey);\n+        if (ser_action.ForRead()) {\n+            try {\n+                READWRITE(fInternal);\n+            }\n+            catch (std::ios_base::failure&) {\n+                /* flag as external address if we can't read the internal boolean\n+                   (this will be the case for any wallet before the HD chain split version) */\n+                fInternal = false;\n+            }\n+            try {\n+                READWRITE(m_pre_split);\n+            }\n+            catch (std::ios_base::failure&) {\n+                /* flag as postsplit address if we can't read the m_pre_split boolean\n+                   (this will be the case for any wallet that upgrades to HD chain split)*/\n+                m_pre_split = false;\n+            }\n+        }\n+        else {\n+            READWRITE(fInternal);\n+            READWRITE(m_pre_split);\n+        }\n+    }\n+};\n+\n+/*\n+ * A class implementing ScriptPubKeyMan manages some (or all) scriptPubKeys used in a wallet.\n+ * It contains the scripts and keys related to the scriptPubKeys it manages.\n+ * A ScriptPubKeyMan will be able to give out scriptPubKeys to be used, as well as marking\n+ * when a scriptPubKey has been used. It also handles when and how to store a scriptPubKey\n+ * and it's related scripts and keys, including encryption.\n+ */\n+class ScriptPubKeyMan\n+{\n+protected:\n+    WalletStorage& m_storage;\n+    std::shared_ptr<WalletDatabase> m_database;\n+\n+public:\n+    ScriptPubKeyMan(WalletStorage& storage) : m_storage(storage), m_database(storage.GetDatabase()) {}\n+\n+    const std::string GetDisplayName() const { return m_storage.GetDisplayName(); }\n+    bool IsWalletFlagSet(uint64_t flag) const { return m_storage.IsWalletFlagSet(flag); }\n+    void SetWalletFlag(uint64_t flag) { return m_storage.SetWalletFlag(flag); }\n+    void UnsetWalletFlagWithDB(WalletBatch& batch, uint64_t flag) { return m_storage.UnsetWalletFlagWithDB(batch, flag); }\n+    bool CanSupportFeature(enum WalletFeature wf) const { return m_storage.CanSupportFeature(wf); }\n+    void SetMinVersion(enum WalletFeature wf) { return m_storage.SetMinVersion(wf); }\n+    const CKeyingMaterial& GetEncryptionKey() const { return m_storage.GetEncryptionKey(); }\n+    bool HasEncryptionKeys() const { return m_storage.HasEncryptionKeys(); }\n+    bool IsLocked() const { return m_storage.IsLocked(); }\n+\n+    virtual ~ScriptPubKeyMan() {};\n+    virtual bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) { return false; }\n+    virtual isminetype IsMine(const CScript& script) const { return ISMINE_NO; }\n+\n+    virtual bool CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys = false) { return false; }",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": 169,
      "original_position": 164,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "39bd4db227d8c771502184389db97f9d7e7ac3c0",
      "in_reply_to_id": 334164302,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added a comment",
      "created_at": "2019-10-11T21:47:46Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r334185287",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/334185287"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 169,
      "original_line": 169,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/334185580",
      "pull_request_review_id": 300942690,
      "id": 334185580,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNDE4NTU4MA==",
      "diff_hunk": "@@ -0,0 +1,471 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+#define BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <wallet/crypter.h>\n+#include <wallet/ismine.h>\n+#include <wallet/walletdb.h>\n+#include <wallet/walletutil.h>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+enum class OutputType;\n+\n+// Wallet storage things that ScriptPubKeyMans need in order to be able to store things to the wallet database",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": null,
      "original_position": 19,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "39bd4db227d8c771502184389db97f9d7e7ac3c0",
      "in_reply_to_id": 334171593,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Expanded the comment.",
      "created_at": "2019-10-11T21:49:00Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r334185580",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/334185580"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 19,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/334185612",
      "pull_request_review_id": 300942737,
      "id": 334185612,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNDE4NTYxMg==",
      "diff_hunk": "@@ -726,34 +585,12 @@ class WalletRescanReserver; //forward declarations for ScanForWalletTransactions\n  * A CWallet is an extension of a keystore, which also maintains a set of transactions and balances,",
      "path": "src/wallet/wallet.h",
      "position": null,
      "original_position": 191,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "39bd4db227d8c771502184389db97f9d7e7ac3c0",
      "in_reply_to_id": 334171753,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Shortened.",
      "created_at": "2019-10-11T21:49:07Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r334185612",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/334185612"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 585,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/334235346",
      "pull_request_review_id": 301003088,
      "id": 334235346,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNDIzNTM0Ng==",
      "diff_hunk": "@@ -0,0 +1,476 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+#define BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <wallet/crypter.h>\n+#include <wallet/ismine.h>\n+#include <wallet/walletdb.h>\n+#include <wallet/walletutil.h>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+enum class OutputType;\n+\n+// Wallet storage things that ScriptPubKeyMans need in order to be able to store things to the wallet database.",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": 19,
      "original_position": 19,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "e418a29df300fc2d33ac333b00579f577d2bdf5c",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "\"Wallet storage for things\"",
      "created_at": "2019-10-12T12:22:57Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r334235346",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/334235346"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 19,
      "original_line": 19,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/334244909",
      "pull_request_review_id": 301012998,
      "id": 334244909,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNDI0NDkwOQ==",
      "diff_hunk": "@@ -0,0 +1,476 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+#define BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <wallet/crypter.h>\n+#include <wallet/ismine.h>\n+#include <wallet/walletdb.h>\n+#include <wallet/walletutil.h>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+enum class OutputType;\n+\n+// Wallet storage things that ScriptPubKeyMans need in order to be able to store things to the wallet database.",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": 19,
      "original_position": 19,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "e418a29df300fc2d33ac333b00579f577d2bdf5c",
      "in_reply_to_id": 334235346,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think it is correct as is. It's things for wallet storage that ScriptPubKeyMans need.",
      "created_at": "2019-10-12T16:38:35Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r334244909",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/334244909"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 19,
      "original_line": 19,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335308063",
      "pull_request_review_id": 302359468,
      "id": 335308063,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNTMwODA2Mw==",
      "diff_hunk": "@@ -4949,3 +4949,35 @@ bool CWallet::AddCryptedKeyInner(const CPubKey &vchPubKey, const std::vector<uns\n     ImplicitlyLearnRelatedKeyScripts(vchPubKey);\n     return true;\n }\n+\n+LegacyScriptPubKeyMan* CWallet::GetLegacyScriptPubKeyMan() const\n+{\n+    // All active ScriptPubKeyMans are the same LegacyScriptPubKeyMan",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "e3efac92393d6c366c0a6be7561eb2a3c54855e0",
      "in_reply_to_id": null,
      "user": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This comment isn't the clearest, its only right now that this is true. But I guess you're changing this soon in the other PR anyway.",
      "created_at": "2019-10-16T07:08:35Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r335308063",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335308063"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4955,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335308590",
      "pull_request_review_id": 302359468,
      "id": 335308590,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNTMwODU5MA==",
      "diff_hunk": "@@ -0,0 +1,141 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+#define BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <wallet/crypter.h>\n+#include <wallet/ismine.h>\n+#include <wallet/walletdb.h>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+enum class OutputType;\n+\n+/*\n+ * A class implementing ScriptPubKeyMan manages some (or all) scriptPubKeys used in a wallet.\n+ * It contains the scripts and keys related to the scriptPubKeys it manages.\n+ * A ScriptPubKeyMan will be able to give out scriptPubKeys to be used, as well as marking\n+ * when a scriptPubKey has been used. It also handles when and how to store a scriptPubKey\n+ * and it's related scripts and keys, including encryption.",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": null,
      "original_position": 23,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "a9f852f494b1c6f72333aa15770b3e119080e578",
      "in_reply_to_id": null,
      "user": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: `its`",
      "created_at": "2019-10-16T07:10:26Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r335308590",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335308590"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 23,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335309406",
      "pull_request_review_id": 302359468,
      "id": 335309406,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNTMwOTQwNg==",
      "diff_hunk": "@@ -24,7 +46,23 @@ enum class OutputType;\n  */\n class ScriptPubKeyMan\n {\n+protected:\n+    WalletStorage& m_storage;\n+    std::shared_ptr<WalletDatabase> m_database;\n+\n public:\n+    ScriptPubKeyMan(WalletStorage& storage) : m_storage(storage), m_database(storage.GetDatabase()) {}\n+\n+    const std::string GetDisplayName() const { return m_storage.GetDisplayName(); }",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": 151,
      "original_position": 45,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "d89011ffca9144ddd28e53177d5e722fadaf2164",
      "in_reply_to_id": null,
      "user": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "All of these are properties of the wallet itself as you describe in the comment above. Why make them accessible from each scriptpubkeymanager? (d89011ffca9144ddd28e53177d5e722fadaf2164 Add WalletStorage class and have CWallet inherit it)",
      "created_at": "2019-10-16T07:12:48Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r335309406",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335309406"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 151,
      "original_line": 151,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335327981",
      "pull_request_review_id": 302359468,
      "id": 335327981,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNTMyNzk4MQ==",
      "diff_hunk": "@@ -430,3 +430,97 @@ bool LegacyScriptPubKeyMan::GetPubKey(const CKeyID &address, CPubKey& vchPubKeyO\n     // Check for watch-only pubkeys\n     return GetWatchPubKey(address, vchPubKeyOut);\n }\n+\n+CPubKey LegacyScriptPubKeyMan::GenerateNewKey(WalletBatch &batch, bool internal)\n+{\n+    assert(!IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n+    assert(!IsWalletFlagSet(WALLET_FLAG_BLANK_WALLET));\n+    AssertLockHeld(cs_KeyStore);\n+    bool fCompressed = CanSupportFeature(FEATURE_COMPRPUBKEY); // default to compressed public keys if we want 0.6.0 wallets\n+\n+    CKey secret;\n+\n+    // Create new metadata\n+    int64_t nCreationTime = GetTime();\n+    CKeyMetadata metadata(nCreationTime);\n+\n+    // use HD key derivation if HD was enabled during wallet creation and a seed is present\n+    if (IsHDEnabled()) {\n+        DeriveNewChildKey(batch, metadata, secret, (CanSupportFeature(FEATURE_HD_SPLIT) ? internal : false));\n+    } else {\n+        secret.MakeNewKey(fCompressed);\n+    }\n+\n+    // Compressed public keys were introduced in version 0.6.0\n+    if (fCompressed) {\n+        SetMinVersion(FEATURE_COMPRPUBKEY);\n+    }\n+\n+    CPubKey pubkey = secret.GetPubKey();\n+    assert(secret.VerifyPubKey(pubkey));\n+\n+    mapKeyMetadata[pubkey.GetID()] = metadata;\n+    UpdateTimeFirstKey(nCreationTime);\n+\n+    if (!AddKeyPubKeyWithDB(batch, secret, pubkey)) {\n+        throw std::runtime_error(std::string(__func__) + \": AddKey failed\");\n+    }\n+    return pubkey;\n+}\n+\n+const uint32_t BIP32_HARDENED_KEY_LIMIT = 0x80000000;",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 911,
      "original_position": 42,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "ff90cccd99705a1d1f163fa99f7b3b314ad42695",
      "in_reply_to_id": null,
      "user": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This constant is used elsewhere in the code too (e.g. BIP32PubkeyProvider), it would be good to factor it out everywhere (not important for this PR though)",
      "created_at": "2019-10-16T08:00:36Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r335327981",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335327981"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 911,
      "original_line": 911,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335388112",
      "pull_request_review_id": 302359468,
      "id": 335388112,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNTM4ODExMg==",
      "diff_hunk": "@@ -594,3 +594,54 @@ bool LegacyScriptPubKeyMan::CanGenerateKeys()\n     LOCK(cs_KeyStore);\n     return IsHDEnabled() || !CanSupportFeature(FEATURE_HD);\n }\n+\n+CPubKey LegacyScriptPubKeyMan::GenerateNewSeed()\n+{\n+    assert(!IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n+    CKey key;\n+    key.MakeNewKey(true);\n+    return DeriveNewSeed(key);\n+}\n+\n+CPubKey LegacyScriptPubKeyMan::DeriveNewSeed(const CKey& key)",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 1004,
      "original_position": 13,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "d9e9ae8fffc51accaa7c8ac59bf2732d81f8cde4",
      "in_reply_to_id": null,
      "user": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't really understand why this is a function in LegacyScriptPubKeyMan. IMO these should be moved out into standalone functions and just SetHDSeed should be part of the LegacyScriptPubKeyMan. Or just combine these functions with SetHDSeed so it derives+sets at the same time.",
      "created_at": "2019-10-16T10:07:52Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r335388112",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335388112"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1004,
      "original_line": 1004,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335395116",
      "pull_request_review_id": 302359468,
      "id": 335395116,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNTM5NTExNg==",
      "diff_hunk": "@@ -885,3 +899,39 @@ void LegacyScriptPubKeyMan::LearnAllRelatedScripts(const CPubKey& key)\n     // OutputType::P2SH_SEGWIT always adds all necessary scripts for all types.\n     LearnRelatedScripts(key, OutputType::P2SH_SEGWIT);\n }\n+\n+void LegacyScriptPubKeyMan::MarkReserveKeysAsUsed(int64_t keypool_id)\n+{\n+    AssertLockHeld(cs_KeyStore);\n+    bool internal = setInternalKeyPool.count(keypool_id);\n+    if (!internal) assert(setExternalKeyPool.count(keypool_id) || set_pre_split_keypool.count(keypool_id));\n+    std::set<int64_t> *setKeyPool = internal ? &setInternalKeyPool : (set_pre_split_keypool.empty() ? &setExternalKeyPool : &set_pre_split_keypool);",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 1264,
      "original_position": 38,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "23ea5cfafd01f202573d6915c4b901caf8fa160d",
      "in_reply_to_id": null,
      "user": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This could be simplified for readability ",
      "created_at": "2019-10-16T10:24:54Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r335395116",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335395116"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": 1262,
      "original_start_line": 906,
      "start_side": "RIGHT",
      "line": 1264,
      "original_line": 1264,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335397238",
      "pull_request_review_id": 302359468,
      "id": 335397238,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNTM5NzIzOA==",
      "diff_hunk": "@@ -885,3 +899,39 @@ void LegacyScriptPubKeyMan::LearnAllRelatedScripts(const CPubKey& key)\n     // OutputType::P2SH_SEGWIT always adds all necessary scripts for all types.\n     LearnRelatedScripts(key, OutputType::P2SH_SEGWIT);\n }\n+\n+void LegacyScriptPubKeyMan::MarkReserveKeysAsUsed(int64_t keypool_id)\n+{\n+    AssertLockHeld(cs_KeyStore);\n+    bool internal = setInternalKeyPool.count(keypool_id);\n+    if (!internal) assert(setExternalKeyPool.count(keypool_id) || set_pre_split_keypool.count(keypool_id));\n+    std::set<int64_t> *setKeyPool = internal ? &setInternalKeyPool : (set_pre_split_keypool.empty() ? &setExternalKeyPool : &set_pre_split_keypool);\n+    auto it = setKeyPool->begin();\n+\n+    WalletBatch batch(*m_database);\n+    while (it != std::end(*setKeyPool)) {\n+        const int64_t& index = *(it);\n+        if (index > keypool_id) break; // set*KeyPool is ordered\n+\n+        CKeyPool keypool;\n+        if (batch.ReadPool(index, keypool)) { //TODO: This should be unnecessary",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 1273,
      "original_position": 47,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "23ea5cfafd01f202573d6915c4b901caf8fa160d",
      "in_reply_to_id": null,
      "user": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why is this TODO here? ",
      "created_at": "2019-10-16T10:30:03Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r335397238",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335397238"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1273,
      "original_line": 1273,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335401162",
      "pull_request_review_id": 302359468,
      "id": 335401162,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNTQwMTE2Mg==",
      "diff_hunk": "@@ -3,11 +3,24 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <key_io.h>\n+#include <outputtype.h>\n #include <wallet/scriptpubkeyman.h>\n \n bool LegacyScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 13,
      "original_position": 7,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "e99778c18ceb0809e4a68ea5688e6c26aba14294",
      "in_reply_to_id": null,
      "user": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The commit title is wrong, Address ->  Destination",
      "created_at": "2019-10-16T10:40:08Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r335401162",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335401162"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 13,
      "original_line": 13,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335417034",
      "pull_request_review_id": 302359468,
      "id": 335417034,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNTQxNzAzNA==",
      "diff_hunk": "@@ -1648,18 +1648,16 @@ bool CWallet::CanGenerateKeys()\n bool CWallet::CanGetAddresses(bool internal)\n {\n     LOCK(cs_wallet);\n-    // Check if the keypool has keys\n-    bool keypool_has_keys;\n-    if (internal && CanSupportFeature(FEATURE_HD_SPLIT)) {\n-        keypool_has_keys = setInternalKeyPool.size() > 0;\n-    } else {\n-        keypool_has_keys = KeypoolCountExternalKeys() > 0;\n-    }\n-    // If the keypool doesn't have keys, check if we can generate them\n-    if (!keypool_has_keys) {\n-        return CanGenerateKeys();\n+    if (m_spk_managers.empty()) return false;\n+    bool result = false;\n+    for (OutputType t : OUTPUT_TYPES) {\n+        auto spk_man = GetScriptPubKeyMan(t, internal);\n+        if (spk_man && spk_man->CanGetAddresses(internal)) {\n+            result = true;",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 19,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "7bfed77bbe6b09aded26a053b5e7651cc1b86bcd",
      "in_reply_to_id": null,
      "user": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "why not just return true and get rid of `result`",
      "created_at": "2019-10-16T11:23:30Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r335417034",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335417034"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1656,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335795086",
      "pull_request_review_id": 302359468,
      "id": 335795086,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNTc5NTA4Ng==",
      "diff_hunk": "@@ -122,7 +164,36 @@ bool LegacyScriptPubKeyMan::CanGetAddresses(bool internal)\n \n bool LegacyScriptPubKeyMan::Upgrade(int prev_version, int new_version, std::string& error)",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 64,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "c2bdabae3e98b3a7e1b2795f66a202fc5c0b60cc",
      "in_reply_to_id": null,
      "user": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "new_version isn't used? What situation did you have in mind for this? I haven't checked to see if this changes in descriptor wallets yet so I won't be surprised if its here for the future, but it seems weird not to check it before upgrading to HD (new_version = prev_version should be a noop)",
      "created_at": "2019-10-17T03:23:40Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r335795086",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335795086"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 165,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335804231",
      "pull_request_review_id": 302996222,
      "id": 335804231,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNTgwNDIzMQ==",
      "diff_hunk": "@@ -594,3 +594,54 @@ bool LegacyScriptPubKeyMan::CanGenerateKeys()\n     LOCK(cs_KeyStore);\n     return IsHDEnabled() || !CanSupportFeature(FEATURE_HD);\n }\n+\n+CPubKey LegacyScriptPubKeyMan::GenerateNewSeed()\n+{\n+    assert(!IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n+    CKey key;\n+    key.MakeNewKey(true);\n+    return DeriveNewSeed(key);\n+}\n+\n+CPubKey LegacyScriptPubKeyMan::DeriveNewSeed(const CKey& key)",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 1004,
      "original_position": 13,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "d9e9ae8fffc51accaa7c8ac59bf2732d81f8cde4",
      "in_reply_to_id": 335388112,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "They were originally together but later split apart to allow for the `sethdseed` RPC. I suppose it should be `DeriveAndSetHDSeed` which calls `SetHDSeed`. But since this is moved from how it is currently, I will leave it as is.",
      "created_at": "2019-10-17T04:21:50Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r335804231",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335804231"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1004,
      "original_line": 1004,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335804296",
      "pull_request_review_id": 302996314,
      "id": 335804296,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNTgwNDI5Ng==",
      "diff_hunk": "@@ -885,3 +899,39 @@ void LegacyScriptPubKeyMan::LearnAllRelatedScripts(const CPubKey& key)\n     // OutputType::P2SH_SEGWIT always adds all necessary scripts for all types.\n     LearnRelatedScripts(key, OutputType::P2SH_SEGWIT);\n }\n+\n+void LegacyScriptPubKeyMan::MarkReserveKeysAsUsed(int64_t keypool_id)\n+{\n+    AssertLockHeld(cs_KeyStore);\n+    bool internal = setInternalKeyPool.count(keypool_id);\n+    if (!internal) assert(setExternalKeyPool.count(keypool_id) || set_pre_split_keypool.count(keypool_id));\n+    std::set<int64_t> *setKeyPool = internal ? &setInternalKeyPool : (set_pre_split_keypool.empty() ? &setExternalKeyPool : &set_pre_split_keypool);",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 1264,
      "original_position": 38,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "23ea5cfafd01f202573d6915c4b901caf8fa160d",
      "in_reply_to_id": 335395116,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe for a followup? Would prefer to leave this as a move",
      "created_at": "2019-10-17T04:22:22Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r335804296",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335804296"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": 1262,
      "original_start_line": 906,
      "start_side": "RIGHT",
      "line": 1264,
      "original_line": 1264,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335804337",
      "pull_request_review_id": 302996361,
      "id": 335804337,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNTgwNDMzNw==",
      "diff_hunk": "@@ -885,3 +899,39 @@ void LegacyScriptPubKeyMan::LearnAllRelatedScripts(const CPubKey& key)\n     // OutputType::P2SH_SEGWIT always adds all necessary scripts for all types.\n     LearnRelatedScripts(key, OutputType::P2SH_SEGWIT);\n }\n+\n+void LegacyScriptPubKeyMan::MarkReserveKeysAsUsed(int64_t keypool_id)\n+{\n+    AssertLockHeld(cs_KeyStore);\n+    bool internal = setInternalKeyPool.count(keypool_id);\n+    if (!internal) assert(setExternalKeyPool.count(keypool_id) || set_pre_split_keypool.count(keypool_id));\n+    std::set<int64_t> *setKeyPool = internal ? &setInternalKeyPool : (set_pre_split_keypool.empty() ? &setExternalKeyPool : &set_pre_split_keypool);\n+    auto it = setKeyPool->begin();\n+\n+    WalletBatch batch(*m_database);\n+    while (it != std::end(*setKeyPool)) {\n+        const int64_t& index = *(it);\n+        if (index > keypool_id) break; // set*KeyPool is ordered\n+\n+        CKeyPool keypool;\n+        if (batch.ReadPool(index, keypool)) { //TODO: This should be unnecessary",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 1273,
      "original_position": 47,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "23ea5cfafd01f202573d6915c4b901caf8fa160d",
      "in_reply_to_id": 335397238,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It was moved from the original implementation.",
      "created_at": "2019-10-17T04:22:38Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r335804337",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335804337"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1273,
      "original_line": 1273,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335804729",
      "pull_request_review_id": 302996863,
      "id": 335804729,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNTgwNDcyOQ==",
      "diff_hunk": "@@ -122,7 +164,36 @@ bool LegacyScriptPubKeyMan::CanGetAddresses(bool internal)\n \n bool LegacyScriptPubKeyMan::Upgrade(int prev_version, int new_version, std::string& error)",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 64,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "c2bdabae3e98b3a7e1b2795f66a202fc5c0b60cc",
      "in_reply_to_id": 335795086,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "IIRC I had that there originally for upgrading a legacy wallet to a descriptor wallet. But since we are no longer doing that, it can be removed. I believe it was going to be used in combination with #15761 (or rather #15761 was split from an earlier implementation).",
      "created_at": "2019-10-17T04:25:20Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r335804729",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335804729"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 165,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335805424",
      "pull_request_review_id": 302997762,
      "id": 335805424,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNTgwNTQyNA==",
      "diff_hunk": "@@ -430,3 +430,97 @@ bool LegacyScriptPubKeyMan::GetPubKey(const CKeyID &address, CPubKey& vchPubKeyO\n     // Check for watch-only pubkeys\n     return GetWatchPubKey(address, vchPubKeyOut);\n }\n+\n+CPubKey LegacyScriptPubKeyMan::GenerateNewKey(WalletBatch &batch, bool internal)\n+{\n+    assert(!IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n+    assert(!IsWalletFlagSet(WALLET_FLAG_BLANK_WALLET));\n+    AssertLockHeld(cs_KeyStore);\n+    bool fCompressed = CanSupportFeature(FEATURE_COMPRPUBKEY); // default to compressed public keys if we want 0.6.0 wallets\n+\n+    CKey secret;\n+\n+    // Create new metadata\n+    int64_t nCreationTime = GetTime();\n+    CKeyMetadata metadata(nCreationTime);\n+\n+    // use HD key derivation if HD was enabled during wallet creation and a seed is present\n+    if (IsHDEnabled()) {\n+        DeriveNewChildKey(batch, metadata, secret, (CanSupportFeature(FEATURE_HD_SPLIT) ? internal : false));\n+    } else {\n+        secret.MakeNewKey(fCompressed);\n+    }\n+\n+    // Compressed public keys were introduced in version 0.6.0\n+    if (fCompressed) {\n+        SetMinVersion(FEATURE_COMPRPUBKEY);\n+    }\n+\n+    CPubKey pubkey = secret.GetPubKey();\n+    assert(secret.VerifyPubKey(pubkey));\n+\n+    mapKeyMetadata[pubkey.GetID()] = metadata;\n+    UpdateTimeFirstKey(nCreationTime);\n+\n+    if (!AddKeyPubKeyWithDB(batch, secret, pubkey)) {\n+        throw std::runtime_error(std::string(__func__) + \": AddKey failed\");\n+    }\n+    return pubkey;\n+}\n+\n+const uint32_t BIP32_HARDENED_KEY_LIMIT = 0x80000000;",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": 911,
      "original_position": 42,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "ff90cccd99705a1d1f163fa99f7b3b314ad42695",
      "in_reply_to_id": 335327981,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, should be cleaned up in a follow up.",
      "created_at": "2019-10-17T04:30:09Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r335805424",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335805424"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 911,
      "original_line": 911,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335807599",
      "pull_request_review_id": 303000547,
      "id": 335807599,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNTgwNzU5OQ==",
      "diff_hunk": "@@ -4949,3 +4949,35 @@ bool CWallet::AddCryptedKeyInner(const CPubKey &vchPubKey, const std::vector<uns\n     ImplicitlyLearnRelatedKeyScripts(vchPubKey);\n     return true;\n }\n+\n+LegacyScriptPubKeyMan* CWallet::GetLegacyScriptPubKeyMan() const\n+{\n+    // All active ScriptPubKeyMans are the same LegacyScriptPubKeyMan",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 7,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "e3efac92393d6c366c0a6be7561eb2a3c54855e0",
      "in_reply_to_id": 335308063,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I've updated the comment to be a bit clearer. I don't think it will be changed with descriptor wallets.",
      "created_at": "2019-10-17T04:43:58Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r335807599",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335807599"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4955,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335807615",
      "pull_request_review_id": 303000568,
      "id": 335807615,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNTgwNzYxNQ==",
      "diff_hunk": "@@ -0,0 +1,141 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+#define BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <wallet/crypter.h>\n+#include <wallet/ismine.h>\n+#include <wallet/walletdb.h>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+enum class OutputType;\n+\n+/*\n+ * A class implementing ScriptPubKeyMan manages some (or all) scriptPubKeys used in a wallet.\n+ * It contains the scripts and keys related to the scriptPubKeys it manages.\n+ * A ScriptPubKeyMan will be able to give out scriptPubKeys to be used, as well as marking\n+ * when a scriptPubKey has been used. It also handles when and how to store a scriptPubKey\n+ * and it's related scripts and keys, including encryption.",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": null,
      "original_position": 23,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "a9f852f494b1c6f72333aa15770b3e119080e578",
      "in_reply_to_id": 335308590,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed.",
      "created_at": "2019-10-17T04:44:03Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r335807615",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335807615"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 23,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335807733",
      "pull_request_review_id": 303000726,
      "id": 335807733,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNTgwNzczMw==",
      "diff_hunk": "@@ -1648,18 +1648,16 @@ bool CWallet::CanGenerateKeys()\n bool CWallet::CanGetAddresses(bool internal)\n {\n     LOCK(cs_wallet);\n-    // Check if the keypool has keys\n-    bool keypool_has_keys;\n-    if (internal && CanSupportFeature(FEATURE_HD_SPLIT)) {\n-        keypool_has_keys = setInternalKeyPool.size() > 0;\n-    } else {\n-        keypool_has_keys = KeypoolCountExternalKeys() > 0;\n-    }\n-    // If the keypool doesn't have keys, check if we can generate them\n-    if (!keypool_has_keys) {\n-        return CanGenerateKeys();\n+    if (m_spk_managers.empty()) return false;\n+    bool result = false;\n+    for (OutputType t : OUTPUT_TYPES) {\n+        auto spk_man = GetScriptPubKeyMan(t, internal);\n+        if (spk_man && spk_man->CanGetAddresses(internal)) {\n+            result = true;",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 19,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "7bfed77bbe6b09aded26a053b5e7651cc1b86bcd",
      "in_reply_to_id": 335417034,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done. Got rid of `result`.",
      "created_at": "2019-10-17T04:44:53Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r335807733",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335807733"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1656,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335808058",
      "pull_request_review_id": 303001037,
      "id": 335808058,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNTgwODA1OA==",
      "diff_hunk": "@@ -122,7 +164,36 @@ bool LegacyScriptPubKeyMan::CanGetAddresses(bool internal)\n \n bool LegacyScriptPubKeyMan::Upgrade(int prev_version, int new_version, std::string& error)",
      "path": "src/wallet/scriptpubkeyman.cpp",
      "position": null,
      "original_position": 64,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "c2bdabae3e98b3a7e1b2795f66a202fc5c0b60cc",
      "in_reply_to_id": 335795086,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Removed `new_version`.\r\n\r\nFor anyone who is wondering why this is works and/or is safe, the new version is set as the wallet maximum version so all of the `CanSupportFeature` calls will fail if the specified new version is too low.",
      "created_at": "2019-10-17T04:46:38Z",
      "updated_at": "2019-10-21T15:46:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r335808058",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335808058"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 165,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338954347",
      "pull_request_review_id": 307071793,
      "id": 338954347,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODk1NDM0Nw==",
      "diff_hunk": "@@ -24,7 +46,23 @@ enum class OutputType;\n  */\n class ScriptPubKeyMan\n {\n+protected:\n+    WalletStorage& m_storage;\n+    std::shared_ptr<WalletDatabase> m_database;\n+\n public:\n+    ScriptPubKeyMan(WalletStorage& storage) : m_storage(storage), m_database(storage.GetDatabase()) {}\n+\n+    const std::string GetDisplayName() const { return m_storage.GetDisplayName(); }",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": 151,
      "original_position": 45,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "d89011ffca9144ddd28e53177d5e722fadaf2164",
      "in_reply_to_id": 335309406,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@meshcollider several of these (`protected`) methods are used by each scriptpubkeymanager. E.g. `IsWalletFlagSet()` is checked in `LegacyScriptPubKeyMan::UpgradeKeyMetadata()`. `UnsetWalletFlagWithDB()` is used to mark a wallet as no longer blank when a key is added. `GetDisplayName()` and `SetWalletFlag` are unused, but I'm fine with keeping them for completeness.",
      "created_at": "2019-10-25T09:02:57Z",
      "updated_at": "2019-10-25T09:02:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r338954347",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338954347"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 151,
      "original_line": 151,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/339038093",
      "pull_request_review_id": 307184349,
      "id": 339038093,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzOTAzODA5Mw==",
      "diff_hunk": "@@ -24,7 +46,23 @@ enum class OutputType;\n  */\n class ScriptPubKeyMan\n {\n+protected:\n+    WalletStorage& m_storage;\n+    std::shared_ptr<WalletDatabase> m_database;\n+\n public:\n+    ScriptPubKeyMan(WalletStorage& storage) : m_storage(storage), m_database(storage.GetDatabase()) {}\n+\n+    const std::string GetDisplayName() const { return m_storage.GetDisplayName(); }",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": 151,
      "original_position": 45,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "d89011ffca9144ddd28e53177d5e722fadaf2164",
      "in_reply_to_id": 335309406,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/16341#discussion_r338954347\r\n\r\n> @meshcollider several of these (`protected`) methods are used by each scriptpubkeymanager. E.g. `IsWalletFlagSet()` is checked in `LegacyScriptPubKeyMan::UpgradeKeyMetadata()`. `UnsetWalletFlagWithDB()` is used to mark a wallet as no longer blank when a key is added. `GetDisplayName()` and `SetWalletFlag` are unused, but I'm fine with keeping them for completeness.\r\n\r\nI think it would be best to eliminate **all** these methods because they obscure the difference between wallet and key manager objects and between storage and key management functionality. They also make call sites less clear about what the calls are intended to do.\r\n\r\nIn my [`pr/keyman` branch](https://github.com/ryanofsky/bitcoin/commits/pr/keyman) I've marked the change adding these methods (2d08c308a3d9936c389c86786e666c0b71c81052) as one of the questionable \"Unclear if this change is necessary or useful\" changes and put it at the end of the branch so it could be easily dropped or reverted.",
      "created_at": "2019-10-25T12:57:06Z",
      "updated_at": "2019-10-25T12:57:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r339038093",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/339038093"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 151,
      "original_line": 151,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/339070546",
      "pull_request_review_id": 307228219,
      "id": 339070546,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzOTA3MDU0Ng==",
      "diff_hunk": "@@ -24,7 +46,23 @@ enum class OutputType;\n  */\n class ScriptPubKeyMan\n {\n+protected:\n+    WalletStorage& m_storage;\n+    std::shared_ptr<WalletDatabase> m_database;\n+\n public:\n+    ScriptPubKeyMan(WalletStorage& storage) : m_storage(storage), m_database(storage.GetDatabase()) {}\n+\n+    const std::string GetDisplayName() const { return m_storage.GetDisplayName(); }",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": 151,
      "original_position": 45,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "d89011ffca9144ddd28e53177d5e722fadaf2164",
      "in_reply_to_id": 335309406,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't have strong feelings on whether the left or right side of 2d08c30 is more clear. Explicit references to `m_storage` might discourage relying on it more; is the long term goal to get rid of `m_storage` usage in `ScriptPubKeyMan`s?",
      "created_at": "2019-10-25T14:06:43Z",
      "updated_at": "2019-10-25T14:06:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r339070546",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/339070546"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 151,
      "original_line": 151,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/339091287",
      "pull_request_review_id": 307256314,
      "id": 339091287,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzOTA5MTI4Nw==",
      "diff_hunk": "@@ -24,7 +46,23 @@ enum class OutputType;\n  */\n class ScriptPubKeyMan\n {\n+protected:\n+    WalletStorage& m_storage;\n+    std::shared_ptr<WalletDatabase> m_database;\n+\n public:\n+    ScriptPubKeyMan(WalletStorage& storage) : m_storage(storage), m_database(storage.GetDatabase()) {}\n+\n+    const std::string GetDisplayName() const { return m_storage.GetDisplayName(); }",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": 151,
      "original_position": 45,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "d89011ffca9144ddd28e53177d5e722fadaf2164",
      "in_reply_to_id": 335309406,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> is the long term goal to get rid of `m_storage` usage in `ScriptPubKeyMan`s?\r\n\r\nThis would be a surprise to me. As far as I know, key managers will continue to need a way to read and store data in the wallet database, and `WalletStorage` provides a limited and controlled interface for doing that. \r\n\r\nEven if the wallet storage interface is going to be eliminated or cut back at some point, having wrapper functions that imply a key manager is storing its own data now when it isn't muddles the code and adds pointless hops in the meantime.\r\n\r\nI don't think this is an important issue at all. Just surprised if getting rid of the indirection here wouldn't be the obvious choice.",
      "created_at": "2019-10-25T14:48:07Z",
      "updated_at": "2019-10-25T14:48:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r339091287",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/339091287"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 151,
      "original_line": 151,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/339122743",
      "pull_request_review_id": 307298664,
      "id": 339122743,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzOTEyMjc0Mw==",
      "diff_hunk": "@@ -24,7 +46,23 @@ enum class OutputType;\n  */\n class ScriptPubKeyMan\n {\n+protected:\n+    WalletStorage& m_storage;\n+    std::shared_ptr<WalletDatabase> m_database;\n+\n public:\n+    ScriptPubKeyMan(WalletStorage& storage) : m_storage(storage), m_database(storage.GetDatabase()) {}\n+\n+    const std::string GetDisplayName() const { return m_storage.GetDisplayName(); }",
      "path": "src/wallet/scriptpubkeyman.h",
      "position": 151,
      "original_position": 45,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "d89011ffca9144ddd28e53177d5e722fadaf2164",
      "in_reply_to_id": 335309406,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "They can be removed in a follow up PR. The intention of wrapping up each function was to make the moves less painful and more clear that they were moves.",
      "created_at": "2019-10-25T15:53:06Z",
      "updated_at": "2019-10-25T15:53:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r339122743",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/339122743"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 151,
      "original_line": 151,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/377810942",
      "pull_request_review_id": 356883460,
      "id": 377810942,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgxMDk0Mg==",
      "diff_hunk": "@@ -78,22 +78,30 @@ CTxDestination AddAndGetDestinationForScript(FillableSigningProvider& keystore,\n {\n     // Add script to keystore\n     keystore.AddCScript(script);\n+    ScriptHash sh = ScriptHash(script);",
      "path": "src/outputtype.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "592177c771ee120472b11036ccf6e3aad0bba8af",
      "in_reply_to_id": 322385026,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Now we know :-) #18067",
      "created_at": "2020-02-11T18:16:51Z",
      "updated_at": "2020-02-11T18:16:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r377810942",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/377810942"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 81,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/377821931",
      "pull_request_review_id": 356897096,
      "id": 377821931,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgyMTkzMQ==",
      "diff_hunk": "@@ -78,22 +78,30 @@ CTxDestination AddAndGetDestinationForScript(FillableSigningProvider& keystore,\n {\n     // Add script to keystore\n     keystore.AddCScript(script);\n+    ScriptHash sh = ScriptHash(script);",
      "path": "src/outputtype.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "592177c771ee120472b11036ccf6e3aad0bba8af",
      "in_reply_to_id": 322385026,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "re: https://github.com/bitcoin/bitcoin/pull/16341#discussion_r377810942\r\n\r\nWow, missed this thread. Reviewers: \"I don't know what this this doing.\" Author: \"Me either, but it makes tests pass.\" Reviewers: \"ACK\" \"ACK\"\r\n\r\nYou guys! :heart:",
      "created_at": "2020-02-11T18:37:13Z",
      "updated_at": "2020-02-11T18:37:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r377821931",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/377821931"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 81,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/377846419",
      "pull_request_review_id": 356927551,
      "id": 377846419,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg0NjQxOQ==",
      "diff_hunk": "@@ -78,22 +78,30 @@ CTxDestination AddAndGetDestinationForScript(FillableSigningProvider& keystore,\n {\n     // Add script to keystore\n     keystore.AddCScript(script);\n+    ScriptHash sh = ScriptHash(script);",
      "path": "src/outputtype.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "c37be157851666e35f42bd7520af51fb1dd06877",
      "original_commit_id": "592177c771ee120472b11036ccf6e3aad0bba8af",
      "in_reply_to_id": 322385026,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "There was a bit more back and forth, but yeah... :-(",
      "created_at": "2020-02-11T19:21:39Z",
      "updated_at": "2020-02-11T19:21:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r377846419",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/377846419"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 81,
      "side": "RIGHT"
    }
  ]
}