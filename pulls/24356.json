{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356",
    "id": 854443053,
    "node_id": "PR_kwDOABII584y7cQt",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/24356",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/24356.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/24356.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24356",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24356/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/6e68ccbefea6509c61fc4405a391a517c6057bb0",
    "number": 24356,
    "state": "closed",
    "locked": false,
    "maintainer_can_modify": false,
    "title": "refactor: replace CConnman::SocketEvents() with mockable Sock::WaitMany()",
    "user": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "_This is a piece of #21878, chopped off to ease review._\r\n\r\n`Sock::Wait()` waits for IO events on one socket. Introduce a similar `virtual` method `WaitMany()` that waits simultaneously for IO events on more than one socket.\r\n\r\nUse `WaitMany()` instead of `CConnman::SocketEvents()` (and ditch the latter). Given that the former is a `virtual` method, it can be mocked by unit and fuzz tests. This will help to make bigger parts of `CConnman` testable (unit and fuzz).",
    "labels": [
      {
        "id": 135961,
        "node_id": "MDU6TGFiZWwxMzU5NjE=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
        "name": "Refactoring",
        "color": "E6F6D6",
        "default": false
      },
      {
        "id": 98298007,
        "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
        "name": "P2P",
        "color": "006b75",
        "default": false
      },
      {
        "id": 241832923,
        "node_id": "MDU6TGFiZWwyNDE4MzI5MjM=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Utils/log/libs",
        "name": "Utils/log/libs",
        "description": "",
        "color": "5319e7",
        "default": false
      }
    ],
    "created_at": "2022-02-16T14:03:43Z",
    "updated_at": "2022-06-17T09:05:52Z",
    "closed_at": "2022-06-16T18:05:34Z",
    "mergeable_state": "unknown",
    "merged_at": "2022-06-16T18:05:34Z",
    "merge_commit_sha": "0ea92cad5274f3939f09d6890da31a21b8481282",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "vasild:WaitMany",
      "ref": "WaitMany",
      "sha": "6e68ccbefea6509c61fc4405a391a517c6057bb0",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 120608826,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMjA2MDg4MjY=",
        "name": "bitcoin",
        "full_name": "vasild/bitcoin",
        "owner": {
          "login": "vasild",
          "id": 266751,
          "node_id": "MDQ6VXNlcjI2Njc1MQ==",
          "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/vasild",
          "html_url": "https://github.com/vasild",
          "followers_url": "https://api.github.com/users/vasild/followers",
          "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
          "organizations_url": "https://api.github.com/users/vasild/orgs",
          "repos_url": "https://api.github.com/users/vasild/repos",
          "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/vasild/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/vasild/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/vasild/bitcoin",
        "archive_url": "https://api.github.com/repos/vasild/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/vasild/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/vasild/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/vasild/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/vasild/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/vasild/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/vasild/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/vasild/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/vasild/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/vasild/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/vasild/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/vasild/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/vasild/bitcoin/events",
        "forks_url": "https://api.github.com/repos/vasild/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/vasild/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/vasild/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/vasild/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/vasild/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/vasild/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/vasild/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/vasild/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/vasild/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/vasild/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/vasild/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/vasild/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/vasild/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/vasild/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/vasild/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/vasild/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:vasild/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/vasild/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/vasild/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/vasild/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/vasild/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/vasild/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/vasild/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/vasild/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/vasild/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/vasild/bitcoin/hooks",
        "svn_url": "https://github.com/vasild/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 1,
        "stargazers_count": 3,
        "watchers_count": 3,
        "size": 211824,
        "default_branch": "master",
        "open_issues_count": 2,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T10:22:48Z",
        "created_at": "2018-02-07T11:52:47Z",
        "updated_at": "2023-01-31T16:56:52Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "e3c08eb620a2f317fc09fdf20969fa26f02afb91",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69819,
        "watchers_count": 69819,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-07T05:35:10Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-07T04:47:18Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 199,
    "deletions": 224,
    "changed_files": 8,
    "commits": 3,
    "review_comments": 35,
    "comments": 11
  },
  "events": [
    {
      "event": "labeled",
      "id": 6083371290,
      "node_id": "LE_lADOABII585D8_-szwAAAAFqmOEa",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6083371290",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-16T14:47:40Z",
      "label": {
        "name": "P2P",
        "color": "006b75"
      }
    },
    {
      "event": "labeled",
      "id": 6083371296,
      "node_id": "LE_lADOABII585D8_-szwAAAAFqmOEg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6083371296",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-16T14:47:40Z",
      "label": {
        "name": "Refactoring",
        "color": "E6F6D6"
      }
    },
    {
      "event": "labeled",
      "id": 6083371298,
      "node_id": "LE_lADOABII585D8_-szwAAAAFqmOEi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6083371298",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-16T14:47:40Z",
      "label": {
        "name": "Utils/log/libs",
        "color": "5319e7"
      }
    },
    {
      "event": "commented",
      "id": 1042683448,
      "node_id": "IC_kwDOABII584-JhY4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1042683448",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-17T08:18:43Z",
      "updated_at": "2022-06-15T11:46:36Z",
      "author_association": "MEMBER",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#21878](https://github.com/bitcoin/bitcoin/pull/21878) (Make all networking code mockable by vasild)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24356#issuecomment-1042683448",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24356"
    },
    {
      "event": "reviewed",
      "id": 888069918,
      "node_id": "PRR_kwDOABII58407t8e",
      "url": null,
      "actor": null,
      "commit_id": "af45eeea037770229b7358b93d4cb8e256d7de19",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Approach ACK, first pass tested almost-ACK af45eeea037770229b7358b93d4cb8e256d7de19. Read the code, each commit debug builds cleanly / unit tests green, ran signet bitcoind on this branch rebased to master.  As well as improving testability, this seems like a nice clean-up too. Reviewers may find `man select` helpful.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24356#pullrequestreview-888069918",
      "submitted_at": "2022-02-20T19:58:02Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6216539876,
      "node_id": "HRFPE_lADOABII585D8_-szwAAAAFyiN7k",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6216539876",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-10T10:17:33Z"
    },
    {
      "event": "commented",
      "id": 1063891023,
      "node_id": "IC_kwDOABII584_abBP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1063891023",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-03-10T10:17:49Z",
      "updated_at": "2022-03-10T10:17:49Z",
      "author_association": "MEMBER",
      "body": "`af45eeea03...c9420b3cce`: address suggestions",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24356#issuecomment-1063891023",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24356"
    },
    {
      "event": "reviewed",
      "id": 905640969,
      "node_id": "PRR_kwDOABII5841-vwJ",
      "url": null,
      "actor": null,
      "commit_id": "c9420b3ccea8cd5b2f5d77aabe58bcf34da28517",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK c9420b3ccea8cd5b2f5d77aabe58bcf34da28517 per re-review of `git diff af45eee c9420b3` following my previous https://github.com/bitcoin/bitcoin/pull/24356#pullrequestreview-888069918, rebased to master at 05957a8, debug build with Debian clang version 15, unit tests",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24356#pullrequestreview-905640969",
      "submitted_at": "2022-03-10T10:40:47Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356"
    },
    {
      "event": "labeled",
      "id": 6497427389,
      "node_id": "LE_lADOABII585D8_-szwAAAAGDRt-9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6497427389",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-04-26T10:07:16Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6508209797,
      "node_id": "HRFPE_lADOABII585D8_-szwAAAAGD62aF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6508209797",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-04-27T15:54:19Z"
    },
    {
      "event": "commented",
      "id": 1111171482,
      "node_id": "IC_kwDOABII585COyGa",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1111171482",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-04-27T15:55:02Z",
      "updated_at": "2022-04-27T15:55:02Z",
      "author_association": "MEMBER",
      "body": "`c9420b3cce...ca8dcfabb7`: rebase due to conflicts\r\n\r\nInvalidates ACK from @jonatack \r\n",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24356#issuecomment-1111171482",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24356"
    },
    {
      "event": "mentioned",
      "id": 6508216015,
      "node_id": "MEE_lADOABII585D8_-szwAAAAGD637P",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6508216015",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-04-27T15:55:02Z"
    },
    {
      "event": "subscribed",
      "id": 6508216022,
      "node_id": "SE_lADOABII585D8_-szwAAAAGD637W",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6508216022",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-04-27T15:55:02Z"
    },
    {
      "event": "unlabeled",
      "id": 6509130643,
      "node_id": "UNLE_lADOABII585D8_-szwAAAAGD-XOT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6509130643",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-04-27T17:59:02Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 956134590,
      "node_id": "PRR_kwDOABII5844_XS-",
      "url": null,
      "actor": null,
      "commit_id": "ca8dcfabb795e94ee085ba5e6cf9ab1edb1d3a06",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "re-ACK ca8dcfabb795e94ee085ba5e6cf9ab1edb1d3a06 per `git range-diff 132d5f8 c9420b3 ca8dcfa`, rebase-only for added thread safety annotations and assertions ",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24356#pullrequestreview-956134590",
      "submitted_at": "2022-04-28T09:47:33Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356"
    },
    {
      "event": "labeled",
      "id": 6615973887,
      "node_id": "LE_lADOABII585D8_-szwAAAAGKV7__",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6615973887",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-16T13:05:41Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6642476973,
      "node_id": "HRFPE_lADOABII585D8_-szwAAAAGL7Cet",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6642476973",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-19T13:21:33Z"
    },
    {
      "event": "commented",
      "id": 1131682426,
      "node_id": "IC_kwDOABII585DdBp6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1131682426",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-19T13:22:19Z",
      "updated_at": "2022-05-19T13:22:19Z",
      "author_association": "MEMBER",
      "body": "`ca8dcfabb7...6747729cb8`: rebase due to conflicts and rename `WaitData` to `EventsPerSock`\r\n\r\nInvalidates ACK from @jonatack",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24356#issuecomment-1131682426",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24356"
    },
    {
      "event": "mentioned",
      "id": 6642482982,
      "node_id": "MEE_lADOABII585D8_-szwAAAAGL7D8m",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6642482982",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-19T13:22:20Z"
    },
    {
      "event": "subscribed",
      "id": 6642482993,
      "node_id": "SE_lADOABII585D8_-szwAAAAGL7D8x",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6642482993",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-19T13:22:20Z"
    },
    {
      "event": "unlabeled",
      "id": 6643087376,
      "node_id": "UNLE_lADOABII585D8_-szwAAAAGL9XgQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6643087376",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-19T14:31:18Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1133132072,
      "node_id": "IC_kwDOABII585Dijko",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1133132072",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-20T17:09:21Z",
      "updated_at": "2022-05-20T17:09:21Z",
      "author_association": "MEMBER",
      "body": "re-ACK 6747729cb850914d925f9c4a7a809fff547da746",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24356#issuecomment-1133132072",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24356"
    },
    {
      "event": "added_to_project",
      "id": 6718332510,
      "node_id": "ATPE_lADOABII585D8_-szwAAAAGQcZ5e",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6718332510",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-01T12:06:34Z",
      "project_card": {
        "id": 82665655,
        "url": "https://api.github.com/projects/columns/cards/82665655",
        "project_id": 481835,
        "project_url": "https://api.github.com/projects/481835",
        "column_name": "Blockers"
      }
    },
    {
      "event": "commented",
      "id": 1149690393,
      "node_id": "IC_kwDOABII585EhuIZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1149690393",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-08T09:36:18Z",
      "updated_at": "2022-06-08T09:36:18Z",
      "author_association": "MEMBER",
      "body": "Anyone else like to have a look here?",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24356#issuecomment-1149690393",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24356"
    },
    {
      "event": "commented",
      "id": 1149747278,
      "node_id": "IC_kwDOABII585Eh8BO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1149747278",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-08T10:34:55Z",
      "updated_at": "2022-06-08T10:34:55Z",
      "author_association": "MEMBER",
      "body": "Yes, I'll have a look.",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24356#issuecomment-1149747278",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24356"
    },
    {
      "event": "reviewed",
      "id": 999505218,
      "node_id": "PRR_kwDOABII5847kz1C",
      "url": null,
      "actor": null,
      "commit_id": "6747729cb850914d925f9c4a7a809fff547da746",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24356#pullrequestreview-999505218",
      "submitted_at": "2022-06-08T10:38:12Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356"
    },
    {
      "event": "reviewed",
      "id": 999509465,
      "node_id": "PRR_kwDOABII5847k03Z",
      "url": null,
      "actor": null,
      "commit_id": "6747729cb850914d925f9c4a7a809fff547da746",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24356#pullrequestreview-999509465",
      "submitted_at": "2022-06-08T10:41:46Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356"
    },
    {
      "event": "reviewed",
      "id": 999516397,
      "node_id": "PRR_kwDOABII5847k2jt",
      "url": null,
      "actor": null,
      "commit_id": "6747729cb850914d925f9c4a7a809fff547da746",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24356#pullrequestreview-999516397",
      "submitted_at": "2022-06-08T10:47:39Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356"
    },
    {
      "event": "reviewed",
      "id": 999524506,
      "node_id": "PRR_kwDOABII5847k4ia",
      "url": null,
      "actor": null,
      "commit_id": "6747729cb850914d925f9c4a7a809fff547da746",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24356#pullrequestreview-999524506",
      "submitted_at": "2022-06-08T10:54:33Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356"
    },
    {
      "event": "reviewed",
      "id": 999610584,
      "node_id": "PRR_kwDOABII5847lNjY",
      "url": null,
      "actor": null,
      "commit_id": "6747729cb850914d925f9c4a7a809fff547da746",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24356#pullrequestreview-999610584",
      "submitted_at": "2022-06-08T12:06:23Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGNjNzQ0NTk3NjgwNjNhOTIzZmI2MjIwYTRmNDIwZWFmMjExYWVlN2I",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cc74459768063a923fb6220a4f420eaf211aee7b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/cc74459768063a923fb6220a4f420eaf211aee7b",
      "tree": {
        "sha": "d0d044422b29af67de3f064963024210f66c89d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d0d044422b29af67de3f064963024210f66c89d5"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree d0d044422b29af67de3f064963024210f66c89d5\nparent e18fd4763e77d1e19208effa9f1a08c5b29fea8e\nauthor Vasil Dimov <vd@FreeBSD.org> 1620122804 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1654774467 +0200\n\nnet: also wait for exceptional events in Sock::Wait()\n\nThis mimics closely `CConnman::SocketEvents()` and the underlying\n`poll(2)`.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmKh2sMACgkQVN8G9ktV\ny79r/CAAqJki7MthUtRylcw4+2SckBrxqNIFBimjfF7qN945D2F1SjCSpTHNdxeM\nvJ/zA98A4n+/ENULIj2RLVCuKi+D5L2R41lGxtO9PuMMlLywNHfBgrf9jCh+HIFu\nXYIk1Rv7xwsgPQ6OPH7EQQhRVkS7GDberNW0lhak6sdY7phWHjqXz3LV5aCFL8Ss\nMnL7mkHgoWuQAFofXsqaOjLvOQ8YQ8Fwn/M1Ru3TxWgCIRsO9+0L8Wf7lpepu991\nTE2M7iSplKJg55SrUUHJsoOImh5TyXKApTLpC4MnuDUHDnV6J0Hg3qB8h0TZ7Ab3\nrFLPdlvgrReMrz/mEwIPuQgtfzmTve9RP+TeG1ytPEPSGPH9W6oZ3e0IcFX6yMzZ\nN7/PDqayKXhElrUxuswPI+L3dS+lHEAyGNCaQ9OJgqd1tewfn+7EpIlYvueFQ6r8\np/7UbwWdhveGnea3AEx4E63Rsmyv8InePmJCwjQEZJhwxk6YPPGv8XbmFYDx8pan\nD7Hlw9rETy13ouQeyqfLwzmNdaFcnITbtuzlfer3HCHzVGzCACU+TqPk0rVsOsmP\nS2FrG5Slxi+fhE3aSdTWz46fOYOJ782fN3YM6H3GipZeZvtpJzJPWBgiMdR0R861\neRsj167V0+Hdh2CmbeMMlnbNj1ZXz4gf56BKIcVe8RXtvVfsTcKnpe9FCzP0gjlo\nqBBDdzYmlwf7fluG+or06us5PUxtzuj5CwhyjYDC+YGjBZVLNPcjpz+ZOaVI/f57\nqkwshIzgTms3pd3G3ws2HcE2p3fyGukLZ+d3qxypRtBu0a9kXUJUComBI+cWOBA6\nIhcgOYCkyDvGpiu9t+QywA5vE/0tcBjkouNip2vEfvgnJ1FfM60Ft46QhdngHJA/\nGX4fRD6YOBTjn/lUmCqsFlN83aQpFwdXnfpM1SE/Bv5dVmgAGl566GW3ueiojGoH\nxdvFvttivKvSBYPxZ7x8zxCYogIMAvPzcEpwxcqbJDTGN+/km9AOWSipMv/kKZyD\nX7LQdTBnMofPoG7ohAN+OJPR1tDlFGhhYmq0SEyUwVmVz1s5beU+a9o5Af2U7lmh\nCglb2WAfIxUYjeOvsKZtWjyCCHa/7gh0IwtK+MOqs0re+5NpepZxBaJJ+5W1IdzQ\nAltaWtGTitFXbiSFkSWOVb9LAxHTFUO7qUqKFlWB8bM/Htj+AKtBiZZUikZq92FR\nBFIvpA/qU1/2inMR7wHv7n9nvq9sYMSUzeQY/5+o9E7dYf1ZIyR2NH6ea01G8KVj\napBJnVGcXj4CjF5HGKT+VWF0i4cQCqCyINiY0asR0tM5lLc7UL2YFbg5MoY9r8wt\n9+vMNZmsef+eKaJaZ6xRon73RqVSbw==\n=cJJl\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e18fd4763e77d1e19208effa9f1a08c5b29fea8e",
          "sha": "e18fd4763e77d1e19208effa9f1a08c5b29fea8e",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/e18fd4763e77d1e19208effa9f1a08c5b29fea8e"
        }
      ],
      "message": "net: also wait for exceptional events in Sock::Wait()\n\nThis mimics closely `CConnman::SocketEvents()` and the underlying\n`poll(2)`.",
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2022-06-09T11:34:27Z"
      },
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-05-04T10:06:44Z"
      },
      "sha": "cc74459768063a923fb6220a4f420eaf211aee7b"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGFlMjYzNDYwYmFiOWU2YWExMTJkYzk5NzkwYzhlZjA2YTU2ZWM4Mzg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ae263460bab9e6aa112dc99790c8ef06a56ec838",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ae263460bab9e6aa112dc99790c8ef06a56ec838",
      "tree": {
        "sha": "5b8135a48a7ce36b9c5cef68d2b26989577315fd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5b8135a48a7ce36b9c5cef68d2b26989577315fd"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 5b8135a48a7ce36b9c5cef68d2b26989577315fd\nparent cc74459768063a923fb6220a4f420eaf211aee7b\nauthor Vasil Dimov <vd@FreeBSD.org> 1620138297 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1654777218 +0200\n\nnet: introduce Sock::WaitMany()\n\nIt allows waiting concurrently on more than one socket. Being a\n`virtual` `Sock` method it can be overriden by tests.\n\nWill be used to replace `CConnman::SocketEvents()`.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmKh5YIACgkQVN8G9ktV\ny7+vlB/8DSooISZtXgluRWe8sHuHLGz9kdpdbNCMx4WaRDry/WGSeoLoWWpuc+n2\niTFfOOQoguxRzFgcP17EremAvX0hCrsoiRBEWFDxGsZfuy3VmRaKudkXrm7aLgI6\nO00kxVJmB0+0AIttYMNWWpOT4oO39l2zknDBMspHS9zy+s4ZAFTTnq9i4X9HN9Bj\n7kwW44de1JjsyExQkUmldQttQzwufh9minbq9RBDDLOXZiRnSUcBS6iE3K72w10/\nPd/nugMfH3leQCVdlWgPt1lfrKk5O1DhCpDEBcj3BE/Iu9Zv65lL3lTjAwWIL9LM\nV8l80J8qyruhsf50w/Vk+5SZP7C5GvBphisGdK6Rpcinig9JiPiYFZEmmuVXMwZf\noWh3oTk6FirTbdqrsCsyijSEoh8YB+smTvYH0v0VFcMT/SaQZ98b3jAKKsRN3n70\nXH/WDQSkXMJKkRIkXZ/ltD+5ScV7fnM5ga0DoLuzq3oyNYN5yl5qY0CSsdqUr4CZ\n0n63b7r4bjonw/or11uIQG8FsZFguJZN1OOWDYS0IcWLNv6R88hWbERa1em/2wDV\nFE85SZFPKY+92zORE2swbk5r7qOPWPyk5NY3uqS2tzNcx5D0sh3NI9rvMLjkRkhp\nThdZpNmVgy8ior4VdKr+zc1Fimpjkxu+X/MrYHxaDWZ5Eq7+n5/X8Hho209ug+JE\nWrPqg6W8lliF7Y/F11IGvKnBw2xtq2Y3IuZUENwlmESkNXdkqhkXnZFUj9BaQknc\nvqL3br3UpZkismSEyd/P2zEAa9b6L35fwhYx+LEOx++QeNklhBQCGJhq/QYtjcFP\ndntCqbVWLVsUzTENhF3eLAZuVHDvcPC4vMc3R8qVdz8BRcJmIRM5q95hT9qOG5ty\ns7Sp1deQj2pNm22whnXsAQmUrJagy8BqA9FCrnElalEIytwjchYz4pVJRz/UD6rm\nFjkYH9BQXVHmfa2hoH7qiLLut9fZvew0L8UbE0vgZYNOKJyh2JuutWLuF1+gyodD\ne8EihQhCJlUHG//Ie5B9xVt7fenLX+YTJ8jrroL3gLaC2mSulZtYK/z18UTeVZDX\nM+H870pauAgBLJtCTW6xOdo2Nk4MpAJWfNOU1qT8jxU5O1Ilu43MjPbeV/MDcmFD\no6fXY+5jV8WH06yyrqKtq07BdA4Wq73uagefgQ5Qvs/IzLEtLvr7vO+9dB4bUSEB\nvYqN9tSsQkem1Bw9MNyPf8FyrpeLPAaHq+2yAFfwBff2dhfNNCwG8CS3/ny8pK1q\nntSpxIZO7z7v3m/Zs9EoSXOznbV4ickuabitKjdVINFRHk9+v10Mt7hOEl4jA0ZY\nWpyyKUeONJlaxOVjD4moySe0hyfF6g==\n=e41x\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cc74459768063a923fb6220a4f420eaf211aee7b",
          "sha": "cc74459768063a923fb6220a4f420eaf211aee7b",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/cc74459768063a923fb6220a4f420eaf211aee7b"
        }
      ],
      "message": "net: introduce Sock::WaitMany()\n\nIt allows waiting concurrently on more than one socket. Being a\n`virtual` `Sock` method it can be overriden by tests.\n\nWill be used to replace `CConnman::SocketEvents()`.",
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2022-06-09T12:20:18Z"
      },
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-05-04T14:24:57Z"
      },
      "sha": "ae263460bab9e6aa112dc99790c8ef06a56ec838"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6777502674,
      "node_id": "HRFPE_lADOABII585D8_-szwAAAAGT-HvS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6777502674",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-09T12:25:11Z"
    },
    {
      "event": "commented",
      "id": 1151056183,
      "node_id": "IC_kwDOABII585Em7k3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1151056183",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-09T12:25:51Z",
      "updated_at": "2022-06-09T12:26:26Z",
      "author_association": "MEMBER",
      "body": "`6747729cb8...358dab76aa`: address some suggestions\r\n\r\nInvalidates ACK from @jonatack \r\n",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24356#issuecomment-1151056183",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24356"
    },
    {
      "event": "mentioned",
      "id": 6777511363,
      "node_id": "MEE_lADOABII585D8_-szwAAAAGT-J3D",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6777511363",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-09T12:26:27Z"
    },
    {
      "event": "subscribed",
      "id": 6777511371,
      "node_id": "SE_lADOABII585D8_-szwAAAAGT-J3L",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6777511371",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-09T12:26:27Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDZlNjhjY2JlZmVhNjUwOWM2MWZjNDQwNWEzOTFhNTE3YzYwNTdiYjA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6e68ccbefea6509c61fc4405a391a517c6057bb0",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/6e68ccbefea6509c61fc4405a391a517c6057bb0",
      "tree": {
        "sha": "3f7b5edd0777446c4693e0b886911a60fd2e31ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3f7b5edd0777446c4693e0b886911a60fd2e31ab"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 3f7b5edd0777446c4693e0b886911a60fd2e31ab\nparent ae263460bab9e6aa112dc99790c8ef06a56ec838\nauthor Vasil Dimov <vd@FreeBSD.org> 1620146239 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1654784424 +0200\n\nnet: use Sock::WaitMany() instead of CConnman::SocketEvents()\n\nRename `GenerateSelectSet()` to `GenerateWaitSockets()` and adapt it to\ngenerate a wait data suitable for `Sock::WaitMany()`. Then call it from\n`CConnman::SocketHandler()` and feed the generated data to\n`Sock::WaitMany()`.\n\nThis way `CConnman::SocketHandler()` can be unit tested because\n`Sock::WaitMany()` is mockable, so the usage of real sockets can be\navoided.\n\nResolves https://github.com/bitcoin/bitcoin/issues/21744\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmKiAakACgkQVN8G9ktV\ny7968B//Zrq1aJIF75o3u9q5cHvwpGfyNnAWHfzYxS0P1uYKgnOy8iDWVHTs5Rcl\nhNnn4SXaMQ3uNciyw+uDmqMMNIHmx53m8gWvUhL9XC40pOO+NWLTg9LxE710Nkwt\nyqahbP9CnA4fIV658+cEHxqeshsuOnVWtoDTX4a8b/2X+4QxhyqyerqfBmQOJdA0\n9kQd3+LOguqgyiwWPVhIQUgmywIi0ysONOdI7YJOqz0CWDqXek8dausM4pHqExi4\n1LlKrx/WnokMGrCzT23Amiqlk249MhDxxGE2KMHUkx1V9Z3Tbvz7AVzQ4X+uptjw\nN+F89dT1S7MdaIdD1T8qie4uOAgUD+CiXkFqLqP4QzVy+XeWyuQ2JaoPvzeiflcb\nF0J6ywNkF39MfcxcQTTYQHDFyUW4tDLL388DnttRL/DFhQTcM7qdAGSt5JtGLxut\nX0hox187YuBme2bhshKqctPMX+8/Uf88qfvLwfKbD5znfrxiMBbHNP+1OUjQPs2R\nviMwI1rl4YJ4YQwfeomXXLqvtypVl3CzQZGVPEwU5P4ECuWJZ1fP6JVj86ztNxnJ\np0x85dK+QqUpixHIJy/Ghnc9xjOtHmchH7mqy0d2DRNpJoekPrdZ/15KUZ0n7md5\n9MFGZ5EcAasn2vLRYFkPPVZP3G/AX1gX+/UVRhqs3Orra2XEfdVukmEhpzGxN0Qp\nczD8GeVT1DjnD6W9y9VWqNrgpa1JAinbbDNsZ+kxxQB5YTlP2Zwwr2bCuEPxXGcc\nIxYoYMwUi+tEecYFlzOgXEmPd1nWWc09kuNO5D2apZQRMsRh4QoRu/lky3SV1WXw\nmEQxZAhQD5zSuoZSPYsA8rxZIwOc1y1Zrt0wJNfYsLYlqCacsBCDzPo8ot11Zeja\n1KrC1B7tldCybWzJP7hggjF2G+NTsYpWzuXYgb2pBTxtg8ZSBbtyif2s9UHJX5KP\nTv5+ZwS00N+tiDzxg3x18lrgVTlNkHCHDY1zO/orNPSGgo+OJ4JkjjlojwoiXKii\nrTQNLp5q+MI4a+Y1K6oZiM5LI+aidwOmSKqzMDfWjEmOv8LPvP6sZDz/W095w5Ja\nqf4W24+RGrJpM0eWnhhKpbKFpUv7bNyaDTkI1ovPqdDdYnW2czhAVPXmhsoR1oPe\nsJUvTqrYMZ7/PE7p2dA3C72Zp7V5aHx11tYYEICc3KwKnWIacN9rDKepTtSDLK+T\ntiZbRTAt71R8m9BzfB41nbkiW9KB2eKBgihkNza69onULIOJgRJb8/LkLxxDIpLN\nIX6sId2uKJWDDorUxsk7HKwbQpLxkI/xZ870qLsM8k4diEo02tADtgCpI3VOwx7y\nanzma2MYA6XiAEGILtlUbJ/ynxxq+Q==\n=j03n\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ae263460bab9e6aa112dc99790c8ef06a56ec838",
          "sha": "ae263460bab9e6aa112dc99790c8ef06a56ec838",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ae263460bab9e6aa112dc99790c8ef06a56ec838"
        }
      ],
      "message": "net: use Sock::WaitMany() instead of CConnman::SocketEvents()\n\nRename `GenerateSelectSet()` to `GenerateWaitSockets()` and adapt it to\ngenerate a wait data suitable for `Sock::WaitMany()`. Then call it from\n`CConnman::SocketHandler()` and feed the generated data to\n`Sock::WaitMany()`.\n\nThis way `CConnman::SocketHandler()` can be unit tested because\n`Sock::WaitMany()` is mockable, so the usage of real sockets can be\navoided.\n\nResolves https://github.com/bitcoin/bitcoin/issues/21744",
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2022-06-09T14:20:24Z"
      },
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-05-04T16:37:19Z"
      },
      "sha": "6e68ccbefea6509c61fc4405a391a517c6057bb0"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6778486896,
      "node_id": "HRFPE_lADOABII585D8_-szwAAAAGUB4Bw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6778486896",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-09T14:25:50Z"
    },
    {
      "event": "commented",
      "id": 1151190421,
      "node_id": "IC_kwDOABII585EncWV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1151190421",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-09T14:27:13Z",
      "updated_at": "2022-06-09T14:27:13Z",
      "author_association": "MEMBER",
      "body": "`358dab76aa...6e68ccbefe`: use `Span` for `CConnman::GenerateWaitSockets()` argument.\r\n\r\nPreviously invalidated ACK from @jonatack.\r\n",
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24356#issuecomment-1151190421",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24356"
    },
    {
      "event": "mentioned",
      "id": 6778499091,
      "node_id": "MEE_lADOABII585D8_-szwAAAAGUB7AT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6778499091",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-09T14:27:13Z"
    },
    {
      "event": "subscribed",
      "id": 6778499105,
      "node_id": "SE_lADOABII585D8_-szwAAAAGUB7Ah",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6778499105",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-09T14:27:13Z"
    },
    {
      "event": "commented",
      "id": 1151350599,
      "node_id": "IC_kwDOABII585EoDdH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1151350599",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-09T16:30:30Z",
      "updated_at": "2022-06-09T16:30:30Z",
      "author_association": "MEMBER",
      "body": "There's a fuzz addressSAN issue, but it seems unrelated and there is the same one on the last push on master https://cirrus-ci.com/task/4544256453902336.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24356#issuecomment-1151350599",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24356"
    },
    {
      "event": "reviewed",
      "id": 1001698493,
      "node_id": "PRR_kwDOABII5847tLS9",
      "url": null,
      "actor": null,
      "commit_id": "6e68ccbefea6509c61fc4405a391a517c6057bb0",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "re-ACK 6e68ccbefea6509c61fc4405a391a517c6057bb0 per `git range-diff e18fd47 6747729 6e68ccb`, and verified rebase to master and debug build",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24356#pullrequestreview-1001698493",
      "submitted_at": "2022-06-09T17:02:15Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356"
    },
    {
      "event": "commented",
      "id": 1151386405,
      "node_id": "IC_kwDOABII585EoMMl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1151386405",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-09T17:09:01Z",
      "updated_at": "2022-06-09T17:09:01Z",
      "author_association": "MEMBER",
      "body": "Code review ACK 6e68ccbefea6509c61fc4405a391a517c6057bb0",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24356#issuecomment-1151386405",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/24356"
    },
    {
      "event": "merged",
      "id": 6823086889,
      "node_id": "ME_lADOABII585D8_-szwAAAAGWsAsp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6823086889",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "0ea92cad5274f3939f09d6890da31a21b8481282",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ea92cad5274f3939f09d6890da31a21b8481282",
      "created_at": "2022-06-16T18:05:34Z"
    },
    {
      "event": "closed",
      "id": 6823086921,
      "node_id": "CE_lADOABII585D8_-szwAAAAGWsAtJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6823086921",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-16T18:05:34Z"
    },
    {
      "event": "removed_from_project",
      "id": 6823118031,
      "node_id": "RFPE_lADOABII585D8_-szwAAAAGWsITP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6823118031",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-16T18:11:15Z",
      "project_card": {
        "id": 82665655,
        "url": "https://api.github.com/projects/columns/cards/82665655",
        "project_id": 481835,
        "project_url": "https://api.github.com/projects/481835",
        "column_name": "Blockers"
      }
    },
    {
      "event": "referenced",
      "id": 6825412359,
      "node_id": "REFE_lADOABII585D8_-szwAAAAGW04cH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6825412359",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "10043f624cd393986b2594ab825de84d9e1db956",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/10043f624cd393986b2594ab825de84d9e1db956",
      "created_at": "2022-06-17T01:47:04Z"
    },
    {
      "event": "head_ref_deleted",
      "id": 6827412152,
      "node_id": "HRDE_lADOABII585D8_-szwAAAAGW8gq4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6827412152",
      "actor": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-17T09:05:52Z"
    },
    {
      "event": "referenced",
      "id": 9096405281,
      "node_id": "REFE_lADOABII585D8_-szwAAAAIeMCEh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9096405281",
      "actor": {
        "login": "Empact",
        "id": 5470,
        "node_id": "MDQ6VXNlcjU0NzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Empact",
        "html_url": "https://github.com/Empact",
        "followers_url": "https://api.github.com/users/Empact/followers",
        "following_url": "https://api.github.com/users/Empact/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Empact/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Empact/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
        "organizations_url": "https://api.github.com/users/Empact/orgs",
        "repos_url": "https://api.github.com/users/Empact/repos",
        "events_url": "https://api.github.com/users/Empact/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Empact/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "b095ac573b89d6898168bb9fda2abf7622ddec09",
      "commit_url": "https://api.github.com/repos/Empact/bitcoin/commits/b095ac573b89d6898168bb9fda2abf7622ddec09",
      "created_at": "2023-04-25T20:37:15Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/810664739",
      "pull_request_review_id": 888069918,
      "id": 810664739,
      "node_id": "PRRC_kwDOABII584wUcMj",
      "diff_hunk": "@@ -120,26 +121,84 @@ class Sock\n     /**\n      * If passed to `Wait()`, then it will wait for readiness to read from the socket.\n      */\n-    static constexpr Event RECV = 0b01;\n+    static constexpr Event RECV = 0b001;\n \n     /**\n      * If passed to `Wait()`, then it will wait for readiness to send to the socket.\n      */\n-    static constexpr Event SEND = 0b10;\n+    static constexpr Event SEND = 0b010;\n+\n+    /**\n+     * Ignored if passed to `Wait()`, but could be set in the occurred events if an\n+     * exceptional condition has occurred on the socket or if it has been disconnected.\n+     */\n+    static constexpr Event ERR = 0b100;\n \n     /**\n      * Wait for readiness for input (recv) or output (send).\n      * @param[in] timeout Wait this much for at least one of the requested events to occur.\n      * @param[in] requested Wait for those events, bitwise-or of `RECV` and `SEND`.\n      * @param[out] occurred If not nullptr and `true` is returned, then upon return this\n-     * indicates which of the requested events occurred. A timeout is indicated by return\n-     * value of `true` and `occurred` being set to 0.\n+     * indicates which of the requested events occurred (`ERR` will be added, even if\n+     * not requested, if an exceptional event occurs on the socket).\n+     * A timeout is indicated by return value of `true` and `occurred` being set to 0.",
      "path": "src/util/sock.h",
      "position": 38,
      "original_position": 36,
      "commit_id": "6e68ccbefea6509c61fc4405a391a517c6057bb0",
      "original_commit_id": "af45eeea037770229b7358b93d4cb8e256d7de19",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "c1349291159b97de03160dfe4cbd9be7053b9dba maybe, if I understand correctly:\r\n```diff\r\n      * Wait for readiness for input (recv) or output (send).\r\n      * @param[in] timeout Wait this much for at least one of the requested events to occur.\r\n      * @param[in] requested Wait for those events, bitwise-or of `RECV` and `SEND`.\r\n-     * @param[out] occurred If not nullptr and `true` is returned, then upon return this\r\n+     * @param[out] occurred If not nullptr and the function returns `true`, then this\r\n      * indicates which of the requested events occurred (`ERR` will be added, even if\r\n      * not requested, if an exceptional event occurs on the socket).\r\n-     * A timeout is indicated by return value of `true` and `occurred` being set to 0.\r\n-     * @return true on success and false otherwise\r\n+     * @return true on success (or timeout, if `occurred` of 0 is returned), false otherwise\r\n      */\r\n```\r\n",
      "created_at": "2022-02-20T18:20:17Z",
      "updated_at": "2022-02-20T19:58:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24356#discussion_r810664739",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/810664739"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 154,
      "original_line": 154,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/810670150",
      "pull_request_review_id": 888069918,
      "id": 810670150,
      "node_id": "PRRC_kwDOABII584wUdhG",
      "diff_hunk": "@@ -120,26 +121,84 @@ class Sock\n     /**\n      * If passed to `Wait()`, then it will wait for readiness to read from the socket.\n      */\n-    static constexpr Event RECV = 0b01;\n+    static constexpr Event RECV = 0b001;\n \n     /**\n      * If passed to `Wait()`, then it will wait for readiness to send to the socket.\n      */\n-    static constexpr Event SEND = 0b10;\n+    static constexpr Event SEND = 0b010;\n+\n+    /**\n+     * Ignored if passed to `Wait()`, but could be set in the occurred events if an\n+     * exceptional condition has occurred on the socket or if it has been disconnected.\n+     */\n+    static constexpr Event ERR = 0b100;\n \n     /**\n      * Wait for readiness for input (recv) or output (send).\n      * @param[in] timeout Wait this much for at least one of the requested events to occur.\n      * @param[in] requested Wait for those events, bitwise-or of `RECV` and `SEND`.\n      * @param[out] occurred If not nullptr and `true` is returned, then upon return this\n-     * indicates which of the requested events occurred. A timeout is indicated by return\n-     * value of `true` and `occurred` being set to 0.\n+     * indicates which of the requested events occurred (`ERR` will be added, even if\n+     * not requested, if an exceptional event occurs on the socket).\n+     * A timeout is indicated by return value of `true` and `occurred` being set to 0.\n      * @return true on success and false otherwise\n      */\n     [[nodiscard]] virtual bool Wait(std::chrono::milliseconds timeout,\n                                     Event requested,\n                                     Event* occurred = nullptr) const;\n \n+    /**\n+     * Auxiliary requested/occurred events to wait for in `WaitMany()`.\n+     */\n+    struct Events {\n+        explicit Events(Event req) : requested{req}, occurred{0} {}\n+        Event requested;\n+        Event occurred;\n+    };\n+\n+    struct Hash {\n+        size_t operator()(const std::shared_ptr<const Sock>& s) const\n+        {\n+            return s ? s->m_socket : std::numeric_limits<SOCKET>::max();\n+        }\n+    };\n+\n+    struct Equal {\n+        bool operator()(const std::shared_ptr<const Sock>& lhs,\n+                        const std::shared_ptr<const Sock>& rhs) const\n+        {\n+            if (lhs && rhs) {\n+                return lhs->m_socket == rhs->m_socket;\n+            }\n+            if (!lhs && !rhs) {\n+                return true;\n+            }\n+            return false;\n+        }\n+    };\n+\n+    /**\n+     * On which socket to wait for what events in `WaitMany()`.\n+     * The `shared_ptr` is copied into the map to ensure that the `Sock` object\n+     * is not destroyed and the underlying socket closed. If this happens\n+     * shortly before or after we call `poll(2)` and a new socket gets created\n+     * under the same file descriptor number then the report from `WaitMany()`\n+     * will be bogus.\n+     */\n+    using WaitData = std::unordered_map<std::shared_ptr<const Sock>, Events, Hash, Equal>;\n+\n+    /**\n+     * Same as `Wait()`, but wait on many sockets within the same timeout.\n+     * @param[in] timeout Wait this much for at least one of the requested events to occur.\n+     * @param[in,out] what Wait for the requested events on these sockets and set `occurred`\n+     * to the events that actually occur.\n+     * A timeout is indicated by return value of `true` and all `what[].occurred`\n+     * being set to 0.\n+     * @return true on success and false otherwise\n+     */",
      "path": "src/util/sock.h",
      "position": 92,
      "original_position": 91,
      "commit_id": "6e68ccbefea6509c61fc4405a391a517c6057bb0",
      "original_commit_id": "af45eeea037770229b7358b93d4cb8e256d7de19",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "fc4bfdf maybe, if I understand correctly:\r\n\r\n```diff\r\n-     * to the events that actually occur.\r\n-     * A timeout is indicated by return value of `true` and all `what[].occurred`\r\n-     * being set to 0.\r\n-     * @return true on success and false otherwise\r\n+     * for the events that actually occurred.\r\n+     * @return true on success (or timeout, if all `what[].occurred` are returned as 0), false otherwise\r\n      */\r\n```\r\n",
      "created_at": "2022-02-20T19:05:45Z",
      "updated_at": "2022-02-20T19:58:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24356#discussion_r810670150",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/810670150"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 208,
      "original_line": 208,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/810670249",
      "pull_request_review_id": 888069918,
      "id": 810670249,
      "node_id": "PRRC_kwDOABII584wUdip",
      "diff_hunk": "@@ -120,26 +121,84 @@ class Sock\n     /**\n      * If passed to `Wait()`, then it will wait for readiness to read from the socket.\n      */\n-    static constexpr Event RECV = 0b01;\n+    static constexpr Event RECV = 0b001;\n \n     /**\n      * If passed to `Wait()`, then it will wait for readiness to send to the socket.\n      */\n-    static constexpr Event SEND = 0b10;\n+    static constexpr Event SEND = 0b010;\n+\n+    /**\n+     * Ignored if passed to `Wait()`, but could be set in the occurred events if an\n+     * exceptional condition has occurred on the socket or if it has been disconnected.\n+     */\n+    static constexpr Event ERR = 0b100;\n \n     /**\n      * Wait for readiness for input (recv) or output (send).\n      * @param[in] timeout Wait this much for at least one of the requested events to occur.\n      * @param[in] requested Wait for those events, bitwise-or of `RECV` and `SEND`.\n      * @param[out] occurred If not nullptr and `true` is returned, then upon return this\n-     * indicates which of the requested events occurred. A timeout is indicated by return\n-     * value of `true` and `occurred` being set to 0.\n+     * indicates which of the requested events occurred (`ERR` will be added, even if\n+     * not requested, if an exceptional event occurs on the socket).\n+     * A timeout is indicated by return value of `true` and `occurred` being set to 0.\n      * @return true on success and false otherwise\n      */\n     [[nodiscard]] virtual bool Wait(std::chrono::milliseconds timeout,\n                                     Event requested,\n                                     Event* occurred = nullptr) const;\n \n+    /**\n+     * Auxiliary requested/occurred events to wait for in `WaitMany()`.\n+     */\n+    struct Events {\n+        explicit Events(Event req) : requested{req}, occurred{0} {}\n+        Event requested;\n+        Event occurred;\n+    };\n+\n+    struct Hash {\n+        size_t operator()(const std::shared_ptr<const Sock>& s) const\n+        {\n+            return s ? s->m_socket : std::numeric_limits<SOCKET>::max();\n+        }\n+    };\n+\n+    struct Equal {\n+        bool operator()(const std::shared_ptr<const Sock>& lhs,\n+                        const std::shared_ptr<const Sock>& rhs) const\n+        {\n+            if (lhs && rhs) {\n+                return lhs->m_socket == rhs->m_socket;\n+            }\n+            if (!lhs && !rhs) {\n+                return true;\n+            }\n+            return false;\n+        }\n+    };\n+\n+    /**\n+     * On which socket to wait for what events in `WaitMany()`.\n+     * The `shared_ptr` is copied into the map to ensure that the `Sock` object\n+     * is not destroyed and the underlying socket closed. If this happens\n+     * shortly before or after we call `poll(2)` and a new socket gets created\n+     * under the same file descriptor number then the report from `WaitMany()`\n+     * will be bogus.\n+     */\n+    using WaitData = std::unordered_map<std::shared_ptr<const Sock>, Events, Hash, Equal>;\n+\n+    /**\n+     * Same as `Wait()`, but wait on many sockets within the same timeout.\n+     * @param[in] timeout Wait this much for at least one of the requested events to occur.",
      "path": "src/util/sock.h",
      "position": null,
      "original_position": 85,
      "commit_id": "6e68ccbefea6509c61fc4405a391a517c6057bb0",
      "original_commit_id": "af45eeea037770229b7358b93d4cb8e256d7de19",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "fc4bfdf s/much/long|amount of time/",
      "created_at": "2022-02-20T19:06:36Z",
      "updated_at": "2022-02-20T19:58:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24356#discussion_r810670249",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/810670249"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 193,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/810670587",
      "pull_request_review_id": 888069918,
      "id": 810670587,
      "node_id": "PRRC_kwDOABII584wUdn7",
      "diff_hunk": "@@ -120,26 +121,84 @@ class Sock\n     /**\n      * If passed to `Wait()`, then it will wait for readiness to read from the socket.\n      */\n-    static constexpr Event RECV = 0b01;\n+    static constexpr Event RECV = 0b001;\n \n     /**\n      * If passed to `Wait()`, then it will wait for readiness to send to the socket.\n      */\n-    static constexpr Event SEND = 0b10;\n+    static constexpr Event SEND = 0b010;\n+\n+    /**\n+     * Ignored if passed to `Wait()`, but could be set in the occurred events if an\n+     * exceptional condition has occurred on the socket or if it has been disconnected.\n+     */\n+    static constexpr Event ERR = 0b100;\n \n     /**\n      * Wait for readiness for input (recv) or output (send).\n      * @param[in] timeout Wait this much for at least one of the requested events to occur.\n      * @param[in] requested Wait for those events, bitwise-or of `RECV` and `SEND`.\n      * @param[out] occurred If not nullptr and `true` is returned, then upon return this\n-     * indicates which of the requested events occurred. A timeout is indicated by return\n-     * value of `true` and `occurred` being set to 0.\n+     * indicates which of the requested events occurred (`ERR` will be added, even if\n+     * not requested, if an exceptional event occurs on the socket).\n+     * A timeout is indicated by return value of `true` and `occurred` being set to 0.\n      * @return true on success and false otherwise\n      */\n     [[nodiscard]] virtual bool Wait(std::chrono::milliseconds timeout,\n                                     Event requested,\n                                     Event* occurred = nullptr) const;\n \n+    /**\n+     * Auxiliary requested/occurred events to wait for in `WaitMany()`.\n+     */\n+    struct Events {\n+        explicit Events(Event req) : requested{req}, occurred{0} {}\n+        Event requested;\n+        Event occurred;\n+    };\n+\n+    struct Hash {\n+        size_t operator()(const std::shared_ptr<const Sock>& s) const\n+        {\n+            return s ? s->m_socket : std::numeric_limits<SOCKET>::max();\n+        }\n+    };\n+\n+    struct Equal {\n+        bool operator()(const std::shared_ptr<const Sock>& lhs,\n+                        const std::shared_ptr<const Sock>& rhs) const\n+        {\n+            if (lhs && rhs) {\n+                return lhs->m_socket == rhs->m_socket;\n+            }\n+            if (!lhs && !rhs) {\n+                return true;\n+            }\n+            return false;\n+        }\n+    };\n+\n+    /**\n+     * On which socket to wait for what events in `WaitMany()`.\n+     * The `shared_ptr` is copied into the map to ensure that the `Sock` object\n+     * is not destroyed and the underlying socket closed. If this happens",
      "path": "src/util/sock.h",
      "position": null,
      "original_position": 76,
      "commit_id": "6e68ccbefea6509c61fc4405a391a517c6057bb0",
      "original_commit_id": "af45eeea037770229b7358b93d4cb8e256d7de19",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "fc4bfdf the writing here seems ambiguous to me as to whether \"not\" applies only to \"destroyed\" or also to \"the underlying socket closed\"",
      "created_at": "2022-02-20T19:09:10Z",
      "updated_at": "2022-02-20T19:58:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24356#discussion_r810670587",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/810670587"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 184,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/810674255",
      "pull_request_review_id": 888069918,
      "id": 810674255,
      "node_id": "PRRC_kwDOABII584wUehP",
      "diff_hunk": "@@ -1025,22 +1006,16 @@ class CConnman\n \n     /**\n      * Do the read/write for connected sockets that are ready for IO.\n-     * @param[in] nodes Nodes to process. The socket of each node is checked against\n-     * `recv_set`, `send_set` and `error_set`.\n-     * @param[in] recv_set Sockets that are ready for read.\n-     * @param[in] send_set Sockets that are ready for send.\n-     * @param[in] error_set Sockets that have an exceptional condition (error).\n+     * @param[in] nodes Nodes to process. The socket of each node is checked against `what`.\n+     * @param[in] what Sockets that are ready for IO.\n      */\n-    void SocketHandlerConnected(const std::vector<CNode*>& nodes,\n-                                const std::set<SOCKET>& recv_set,\n-                                const std::set<SOCKET>& send_set,\n-                                const std::set<SOCKET>& error_set);\n+    void SocketHandlerConnected(const std::vector<CNode*>& nodes, Sock::WaitData& what);\n \n     /**\n      * Accept incoming connections, one from each read-ready listening socket.\n-     * @param[in] recv_set Sockets that are ready for read.\n+     * @param[in] what Sockets that are ready for IO.\n      */\n-    void SocketHandlerListening(const std::set<SOCKET>& recv_set);\n+    void SocketHandlerListening(Sock::WaitData& what);",
      "path": "src/net.h",
      "position": null,
      "original_position": 55,
      "commit_id": "6e68ccbefea6509c61fc4405a391a517c6057bb0",
      "original_commit_id": "af45eeea037770229b7358b93d4cb8e256d7de19",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "af45eee `what` is an in-param\r\n```suggestion\r\n    void SocketHandlerListening(const Sock::WaitData& what);\r\n```",
      "created_at": "2022-02-20T19:40:04Z",
      "updated_at": "2022-02-20T19:58:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24356#discussion_r810674255",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/810674255"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1018,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/810674375",
      "pull_request_review_id": 888069918,
      "id": 810674375,
      "node_id": "PRRC_kwDOABII584wUejH",
      "diff_hunk": "@@ -1659,13 +1537,14 @@ void CConnman::SocketHandlerConnected(const std::vector<CNode*>& nodes,\n     }\n }\n \n-void CConnman::SocketHandlerListening(const std::set<SOCKET>& recv_set)\n+void CConnman::SocketHandlerListening(Sock::WaitData& what)",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 226,
      "commit_id": "6e68ccbefea6509c61fc4405a391a517c6057bb0",
      "original_commit_id": "af45eeea037770229b7358b93d4cb8e256d7de19",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "af45eee `what` is an in-param\r\n```suggestion\r\nvoid CConnman::SocketHandlerListening(const Sock::WaitData& what);\r\n```",
      "created_at": "2022-02-20T19:40:39Z",
      "updated_at": "2022-02-20T19:58:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24356#discussion_r810674375",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/810674375"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1540,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/810674678",
      "pull_request_review_id": 888069918,
      "id": 810674678,
      "node_id": "PRRC_kwDOABII584wUen2",
      "diff_hunk": "@@ -1025,22 +1006,16 @@ class CConnman\n \n     /**\n      * Do the read/write for connected sockets that are ready for IO.\n-     * @param[in] nodes Nodes to process. The socket of each node is checked against\n-     * `recv_set`, `send_set` and `error_set`.\n-     * @param[in] recv_set Sockets that are ready for read.\n-     * @param[in] send_set Sockets that are ready for send.\n-     * @param[in] error_set Sockets that have an exceptional condition (error).\n+     * @param[in] nodes Nodes to process. The socket of each node is checked against `what`.\n+     * @param[in] what Sockets that are ready for IO.\n      */\n-    void SocketHandlerConnected(const std::vector<CNode*>& nodes,\n-                                const std::set<SOCKET>& recv_set,\n-                                const std::set<SOCKET>& send_set,\n-                                const std::set<SOCKET>& error_set);\n+    void SocketHandlerConnected(const std::vector<CNode*>& nodes, Sock::WaitData& what);",
      "path": "src/net.h",
      "position": null,
      "original_position": 47,
      "commit_id": "6e68ccbefea6509c61fc4405a391a517c6057bb0",
      "original_commit_id": "af45eeea037770229b7358b93d4cb8e256d7de19",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "af45eee `what` is an in-param\r\n```suggestion\r\n    void SocketHandlerConnected(const std::vector<CNode*>& nodes, const Sock::WaitData& what);\r\n```",
      "created_at": "2022-02-20T19:43:23Z",
      "updated_at": "2022-02-20T19:58:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24356#discussion_r810674678",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/810674678"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1012,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/810674714",
      "pull_request_review_id": 888069918,
      "id": 810674714,
      "node_id": "PRRC_kwDOABII584wUeoa",
      "diff_hunk": "@@ -1407,170 +1406,46 @@ bool CConnman::GenerateSelectSet(const std::vector<CNode*>& nodes,\n             continue;\n         }\n \n-        error_set.insert(pnode->m_sock->Get());\n+        Sock::Event requested{0};\n         if (select_send) {\n-            send_set.insert(pnode->m_sock->Get());\n-            continue;\n-        }\n-        if (select_recv) {\n-            recv_set.insert(pnode->m_sock->Get());\n-        }\n-    }\n-\n-    return !recv_set.empty() || !send_set.empty() || !error_set.empty();\n-}\n-\n-#ifdef USE_POLL\n-void CConnman::SocketEvents(const std::vector<CNode*>& nodes,\n-                            std::set<SOCKET>& recv_set,\n-                            std::set<SOCKET>& send_set,\n-                            std::set<SOCKET>& error_set)\n-{\n-    std::set<SOCKET> recv_select_set, send_select_set, error_select_set;\n-    if (!GenerateSelectSet(nodes, recv_select_set, send_select_set, error_select_set)) {\n-        interruptNet.sleep_for(std::chrono::milliseconds(SELECT_TIMEOUT_MILLISECONDS));\n-        return;\n-    }\n-\n-    std::unordered_map<SOCKET, struct pollfd> pollfds;\n-    for (SOCKET socket_id : recv_select_set) {\n-        pollfds[socket_id].fd = socket_id;\n-        pollfds[socket_id].events |= POLLIN;\n-    }\n-\n-    for (SOCKET socket_id : send_select_set) {\n-        pollfds[socket_id].fd = socket_id;\n-        pollfds[socket_id].events |= POLLOUT;\n-    }\n-\n-    for (SOCKET socket_id : error_select_set) {\n-        pollfds[socket_id].fd = socket_id;\n-        // These flags are ignored, but we set them for clarity\n-        pollfds[socket_id].events |= POLLERR|POLLHUP;\n-    }\n-\n-    std::vector<struct pollfd> vpollfds;\n-    vpollfds.reserve(pollfds.size());\n-    for (auto it : pollfds) {\n-        vpollfds.push_back(std::move(it.second));\n-    }\n-\n-    if (poll(vpollfds.data(), vpollfds.size(), SELECT_TIMEOUT_MILLISECONDS) < 0) return;\n-\n-    if (interruptNet) return;\n-\n-    for (struct pollfd pollfd_entry : vpollfds) {\n-        if (pollfd_entry.revents & POLLIN)            recv_set.insert(pollfd_entry.fd);\n-        if (pollfd_entry.revents & POLLOUT)           send_set.insert(pollfd_entry.fd);\n-        if (pollfd_entry.revents & (POLLERR|POLLHUP)) error_set.insert(pollfd_entry.fd);\n-    }\n-}\n-#else\n-void CConnman::SocketEvents(const std::vector<CNode*>& nodes,\n-                            std::set<SOCKET>& recv_set,\n-                            std::set<SOCKET>& send_set,\n-                            std::set<SOCKET>& error_set)\n-{\n-    std::set<SOCKET> recv_select_set, send_select_set, error_select_set;\n-    if (!GenerateSelectSet(nodes, recv_select_set, send_select_set, error_select_set)) {\n-        interruptNet.sleep_for(std::chrono::milliseconds(SELECT_TIMEOUT_MILLISECONDS));\n-        return;\n-    }\n-\n-    //\n-    // Find which sockets have data to receive\n-    //\n-    struct timeval timeout;\n-    timeout.tv_sec  = 0;\n-    timeout.tv_usec = SELECT_TIMEOUT_MILLISECONDS * 1000; // frequency to poll pnode->vSend\n-\n-    fd_set fdsetRecv;\n-    fd_set fdsetSend;\n-    fd_set fdsetError;\n-    FD_ZERO(&fdsetRecv);\n-    FD_ZERO(&fdsetSend);\n-    FD_ZERO(&fdsetError);\n-    SOCKET hSocketMax = 0;\n-\n-    for (SOCKET hSocket : recv_select_set) {\n-        FD_SET(hSocket, &fdsetRecv);\n-        hSocketMax = std::max(hSocketMax, hSocket);\n-    }\n-\n-    for (SOCKET hSocket : send_select_set) {\n-        FD_SET(hSocket, &fdsetSend);\n-        hSocketMax = std::max(hSocketMax, hSocket);\n-    }\n-\n-    for (SOCKET hSocket : error_select_set) {\n-        FD_SET(hSocket, &fdsetError);\n-        hSocketMax = std::max(hSocketMax, hSocket);\n-    }\n-\n-    int nSelect = select(hSocketMax + 1, &fdsetRecv, &fdsetSend, &fdsetError, &timeout);\n-\n-    if (interruptNet)\n-        return;\n-\n-    if (nSelect == SOCKET_ERROR)\n-    {\n-        int nErr = WSAGetLastError();\n-        LogPrintf(\"socket select error %s\\n\", NetworkErrorString(nErr));\n-        for (unsigned int i = 0; i <= hSocketMax; i++)\n-            FD_SET(i, &fdsetRecv);\n-        FD_ZERO(&fdsetSend);\n-        FD_ZERO(&fdsetError);\n-        if (!interruptNet.sleep_for(std::chrono::milliseconds(SELECT_TIMEOUT_MILLISECONDS)))\n-            return;\n-    }\n-\n-    for (SOCKET hSocket : recv_select_set) {\n-        if (FD_ISSET(hSocket, &fdsetRecv)) {\n-            recv_set.insert(hSocket);\n+            requested = Sock::SEND;\n+        } else if (select_recv) {\n+            requested = Sock::RECV;\n         }\n-    }\n \n-    for (SOCKET hSocket : send_select_set) {\n-        if (FD_ISSET(hSocket, &fdsetSend)) {\n-            send_set.insert(hSocket);\n-        }\n+        what.emplace(pnode->m_sock, Sock::Events{requested});\n     }\n \n-    for (SOCKET hSocket : error_select_set) {\n-        if (FD_ISSET(hSocket, &fdsetError)) {\n-            error_set.insert(hSocket);\n-        }\n-    }\n+    return what;\n }\n-#endif\n \n void CConnman::SocketHandler()\n {\n-    std::set<SOCKET> recv_set;\n-    std::set<SOCKET> send_set;\n-    std::set<SOCKET> error_set;\n+    Sock::WaitData what;\n \n     {\n         const NodesSnapshot snap{*this, /*shuffle=*/false};\n \n+        const auto timeout = std::chrono::milliseconds(SELECT_TIMEOUT_MILLISECONDS);\n+\n         // Check for the readiness of the already connected sockets and the\n         // listening sockets in one call (\"readiness\" as in poll(2) or\n         // select(2)). If none are ready, wait for a short while and return\n         // empty sets.\n-        SocketEvents(snap.Nodes(), recv_set, send_set, error_set);\n+        what = GenerateWaitSockets(snap.Nodes());\n+        if (what.empty() || !what.begin()->first->WaitMany(timeout, what)) {\n+            interruptNet.sleep_for(timeout);\n+        }\n \n         // Service (send/receive) each of the already connected nodes.\n-        SocketHandlerConnected(snap.Nodes(), recv_set, send_set, error_set);\n+        SocketHandlerConnected(snap.Nodes(), what);\n     }\n \n     // Accept new connections from listening sockets.\n-    SocketHandlerListening(recv_set);\n+    SocketHandlerListening(what);\n }\n \n-void CConnman::SocketHandlerConnected(const std::vector<CNode*>& nodes,\n-                                      const std::set<SOCKET>& recv_set,\n-                                      const std::set<SOCKET>& send_set,\n-                                      const std::set<SOCKET>& error_set)\n+void CConnman::SocketHandlerConnected(const std::vector<CNode*>& nodes, Sock::WaitData& what)",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 201,
      "commit_id": "6e68ccbefea6509c61fc4405a391a517c6057bb0",
      "original_commit_id": "af45eeea037770229b7358b93d4cb8e256d7de19",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "af45eee `what` is an in-param\r\n```suggestion\r\nvoid CConnman::SocketHandlerConnected(const std::vector<CNode*>& nodes, const Sock::WaitData& what)\r\n```",
      "created_at": "2022-02-20T19:43:53Z",
      "updated_at": "2022-02-20T19:58:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24356#discussion_r810674714",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/810674714"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1448,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/823562424",
      "pull_request_review_id": 905612560,
      "id": 823562424,
      "node_id": "PRRC_kwDOABII584xFpC4",
      "diff_hunk": "@@ -120,26 +121,84 @@ class Sock\n     /**\n      * If passed to `Wait()`, then it will wait for readiness to read from the socket.\n      */\n-    static constexpr Event RECV = 0b01;\n+    static constexpr Event RECV = 0b001;\n \n     /**\n      * If passed to `Wait()`, then it will wait for readiness to send to the socket.\n      */\n-    static constexpr Event SEND = 0b10;\n+    static constexpr Event SEND = 0b010;\n+\n+    /**\n+     * Ignored if passed to `Wait()`, but could be set in the occurred events if an\n+     * exceptional condition has occurred on the socket or if it has been disconnected.\n+     */\n+    static constexpr Event ERR = 0b100;\n \n     /**\n      * Wait for readiness for input (recv) or output (send).\n      * @param[in] timeout Wait this much for at least one of the requested events to occur.\n      * @param[in] requested Wait for those events, bitwise-or of `RECV` and `SEND`.\n      * @param[out] occurred If not nullptr and `true` is returned, then upon return this\n-     * indicates which of the requested events occurred. A timeout is indicated by return\n-     * value of `true` and `occurred` being set to 0.\n+     * indicates which of the requested events occurred (`ERR` will be added, even if\n+     * not requested, if an exceptional event occurs on the socket).\n+     * A timeout is indicated by return value of `true` and `occurred` being set to 0.",
      "path": "src/util/sock.h",
      "position": 38,
      "original_position": 36,
      "commit_id": "6e68ccbefea6509c61fc4405a391a517c6057bb0",
      "original_commit_id": "af45eeea037770229b7358b93d4cb8e256d7de19",
      "in_reply_to_id": 810664739,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2022-03-10T10:17:59Z",
      "updated_at": "2022-03-10T10:17:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24356#discussion_r823562424",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/823562424"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 154,
      "original_line": 154,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/823562583",
      "pull_request_review_id": 905612763,
      "id": 823562583,
      "node_id": "PRRC_kwDOABII584xFpFX",
      "diff_hunk": "@@ -120,26 +121,84 @@ class Sock\n     /**\n      * If passed to `Wait()`, then it will wait for readiness to read from the socket.\n      */\n-    static constexpr Event RECV = 0b01;\n+    static constexpr Event RECV = 0b001;\n \n     /**\n      * If passed to `Wait()`, then it will wait for readiness to send to the socket.\n      */\n-    static constexpr Event SEND = 0b10;\n+    static constexpr Event SEND = 0b010;\n+\n+    /**\n+     * Ignored if passed to `Wait()`, but could be set in the occurred events if an\n+     * exceptional condition has occurred on the socket or if it has been disconnected.\n+     */\n+    static constexpr Event ERR = 0b100;\n \n     /**\n      * Wait for readiness for input (recv) or output (send).\n      * @param[in] timeout Wait this much for at least one of the requested events to occur.\n      * @param[in] requested Wait for those events, bitwise-or of `RECV` and `SEND`.\n      * @param[out] occurred If not nullptr and `true` is returned, then upon return this\n-     * indicates which of the requested events occurred. A timeout is indicated by return\n-     * value of `true` and `occurred` being set to 0.\n+     * indicates which of the requested events occurred (`ERR` will be added, even if\n+     * not requested, if an exceptional event occurs on the socket).\n+     * A timeout is indicated by return value of `true` and `occurred` being set to 0.\n      * @return true on success and false otherwise\n      */\n     [[nodiscard]] virtual bool Wait(std::chrono::milliseconds timeout,\n                                     Event requested,\n                                     Event* occurred = nullptr) const;\n \n+    /**\n+     * Auxiliary requested/occurred events to wait for in `WaitMany()`.\n+     */\n+    struct Events {\n+        explicit Events(Event req) : requested{req}, occurred{0} {}\n+        Event requested;\n+        Event occurred;\n+    };\n+\n+    struct Hash {\n+        size_t operator()(const std::shared_ptr<const Sock>& s) const\n+        {\n+            return s ? s->m_socket : std::numeric_limits<SOCKET>::max();\n+        }\n+    };\n+\n+    struct Equal {\n+        bool operator()(const std::shared_ptr<const Sock>& lhs,\n+                        const std::shared_ptr<const Sock>& rhs) const\n+        {\n+            if (lhs && rhs) {\n+                return lhs->m_socket == rhs->m_socket;\n+            }\n+            if (!lhs && !rhs) {\n+                return true;\n+            }\n+            return false;\n+        }\n+    };\n+\n+    /**\n+     * On which socket to wait for what events in `WaitMany()`.\n+     * The `shared_ptr` is copied into the map to ensure that the `Sock` object\n+     * is not destroyed and the underlying socket closed. If this happens\n+     * shortly before or after we call `poll(2)` and a new socket gets created\n+     * under the same file descriptor number then the report from `WaitMany()`\n+     * will be bogus.\n+     */\n+    using WaitData = std::unordered_map<std::shared_ptr<const Sock>, Events, Hash, Equal>;\n+\n+    /**\n+     * Same as `Wait()`, but wait on many sockets within the same timeout.\n+     * @param[in] timeout Wait this much for at least one of the requested events to occur.\n+     * @param[in,out] what Wait for the requested events on these sockets and set `occurred`\n+     * to the events that actually occur.\n+     * A timeout is indicated by return value of `true` and all `what[].occurred`\n+     * being set to 0.\n+     * @return true on success and false otherwise\n+     */",
      "path": "src/util/sock.h",
      "position": 92,
      "original_position": 91,
      "commit_id": "6e68ccbefea6509c61fc4405a391a517c6057bb0",
      "original_commit_id": "af45eeea037770229b7358b93d4cb8e256d7de19",
      "in_reply_to_id": 810670150,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2022-03-10T10:18:09Z",
      "updated_at": "2022-03-10T10:18:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24356#discussion_r823562583",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/823562583"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 208,
      "original_line": 208,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/823562731",
      "pull_request_review_id": 905612953,
      "id": 823562731,
      "node_id": "PRRC_kwDOABII584xFpHr",
      "diff_hunk": "@@ -120,26 +121,84 @@ class Sock\n     /**\n      * If passed to `Wait()`, then it will wait for readiness to read from the socket.\n      */\n-    static constexpr Event RECV = 0b01;\n+    static constexpr Event RECV = 0b001;\n \n     /**\n      * If passed to `Wait()`, then it will wait for readiness to send to the socket.\n      */\n-    static constexpr Event SEND = 0b10;\n+    static constexpr Event SEND = 0b010;\n+\n+    /**\n+     * Ignored if passed to `Wait()`, but could be set in the occurred events if an\n+     * exceptional condition has occurred on the socket or if it has been disconnected.\n+     */\n+    static constexpr Event ERR = 0b100;\n \n     /**\n      * Wait for readiness for input (recv) or output (send).\n      * @param[in] timeout Wait this much for at least one of the requested events to occur.\n      * @param[in] requested Wait for those events, bitwise-or of `RECV` and `SEND`.\n      * @param[out] occurred If not nullptr and `true` is returned, then upon return this\n-     * indicates which of the requested events occurred. A timeout is indicated by return\n-     * value of `true` and `occurred` being set to 0.\n+     * indicates which of the requested events occurred (`ERR` will be added, even if\n+     * not requested, if an exceptional event occurs on the socket).\n+     * A timeout is indicated by return value of `true` and `occurred` being set to 0.\n      * @return true on success and false otherwise\n      */\n     [[nodiscard]] virtual bool Wait(std::chrono::milliseconds timeout,\n                                     Event requested,\n                                     Event* occurred = nullptr) const;\n \n+    /**\n+     * Auxiliary requested/occurred events to wait for in `WaitMany()`.\n+     */\n+    struct Events {\n+        explicit Events(Event req) : requested{req}, occurred{0} {}\n+        Event requested;\n+        Event occurred;\n+    };\n+\n+    struct Hash {\n+        size_t operator()(const std::shared_ptr<const Sock>& s) const\n+        {\n+            return s ? s->m_socket : std::numeric_limits<SOCKET>::max();\n+        }\n+    };\n+\n+    struct Equal {\n+        bool operator()(const std::shared_ptr<const Sock>& lhs,\n+                        const std::shared_ptr<const Sock>& rhs) const\n+        {\n+            if (lhs && rhs) {\n+                return lhs->m_socket == rhs->m_socket;\n+            }\n+            if (!lhs && !rhs) {\n+                return true;\n+            }\n+            return false;\n+        }\n+    };\n+\n+    /**\n+     * On which socket to wait for what events in `WaitMany()`.\n+     * The `shared_ptr` is copied into the map to ensure that the `Sock` object\n+     * is not destroyed and the underlying socket closed. If this happens\n+     * shortly before or after we call `poll(2)` and a new socket gets created\n+     * under the same file descriptor number then the report from `WaitMany()`\n+     * will be bogus.\n+     */\n+    using WaitData = std::unordered_map<std::shared_ptr<const Sock>, Events, Hash, Equal>;\n+\n+    /**\n+     * Same as `Wait()`, but wait on many sockets within the same timeout.\n+     * @param[in] timeout Wait this much for at least one of the requested events to occur.",
      "path": "src/util/sock.h",
      "position": null,
      "original_position": 85,
      "commit_id": "6e68ccbefea6509c61fc4405a391a517c6057bb0",
      "original_commit_id": "af45eeea037770229b7358b93d4cb8e256d7de19",
      "in_reply_to_id": 810670249,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2022-03-10T10:18:17Z",
      "updated_at": "2022-03-10T10:18:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24356#discussion_r823562731",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/823562731"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 193,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/823562898",
      "pull_request_review_id": 905613183,
      "id": 823562898,
      "node_id": "PRRC_kwDOABII584xFpKS",
      "diff_hunk": "@@ -120,26 +121,84 @@ class Sock\n     /**\n      * If passed to `Wait()`, then it will wait for readiness to read from the socket.\n      */\n-    static constexpr Event RECV = 0b01;\n+    static constexpr Event RECV = 0b001;\n \n     /**\n      * If passed to `Wait()`, then it will wait for readiness to send to the socket.\n      */\n-    static constexpr Event SEND = 0b10;\n+    static constexpr Event SEND = 0b010;\n+\n+    /**\n+     * Ignored if passed to `Wait()`, but could be set in the occurred events if an\n+     * exceptional condition has occurred on the socket or if it has been disconnected.\n+     */\n+    static constexpr Event ERR = 0b100;\n \n     /**\n      * Wait for readiness for input (recv) or output (send).\n      * @param[in] timeout Wait this much for at least one of the requested events to occur.\n      * @param[in] requested Wait for those events, bitwise-or of `RECV` and `SEND`.\n      * @param[out] occurred If not nullptr and `true` is returned, then upon return this\n-     * indicates which of the requested events occurred. A timeout is indicated by return\n-     * value of `true` and `occurred` being set to 0.\n+     * indicates which of the requested events occurred (`ERR` will be added, even if\n+     * not requested, if an exceptional event occurs on the socket).\n+     * A timeout is indicated by return value of `true` and `occurred` being set to 0.\n      * @return true on success and false otherwise\n      */\n     [[nodiscard]] virtual bool Wait(std::chrono::milliseconds timeout,\n                                     Event requested,\n                                     Event* occurred = nullptr) const;\n \n+    /**\n+     * Auxiliary requested/occurred events to wait for in `WaitMany()`.\n+     */\n+    struct Events {\n+        explicit Events(Event req) : requested{req}, occurred{0} {}\n+        Event requested;\n+        Event occurred;\n+    };\n+\n+    struct Hash {\n+        size_t operator()(const std::shared_ptr<const Sock>& s) const\n+        {\n+            return s ? s->m_socket : std::numeric_limits<SOCKET>::max();\n+        }\n+    };\n+\n+    struct Equal {\n+        bool operator()(const std::shared_ptr<const Sock>& lhs,\n+                        const std::shared_ptr<const Sock>& rhs) const\n+        {\n+            if (lhs && rhs) {\n+                return lhs->m_socket == rhs->m_socket;\n+            }\n+            if (!lhs && !rhs) {\n+                return true;\n+            }\n+            return false;\n+        }\n+    };\n+\n+    /**\n+     * On which socket to wait for what events in `WaitMany()`.\n+     * The `shared_ptr` is copied into the map to ensure that the `Sock` object\n+     * is not destroyed and the underlying socket closed. If this happens",
      "path": "src/util/sock.h",
      "position": null,
      "original_position": 76,
      "commit_id": "6e68ccbefea6509c61fc4405a391a517c6057bb0",
      "original_commit_id": "af45eeea037770229b7358b93d4cb8e256d7de19",
      "in_reply_to_id": 810670587,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Reworded.",
      "created_at": "2022-03-10T10:18:29Z",
      "updated_at": "2022-03-10T10:18:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24356#discussion_r823562898",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/823562898"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 184,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/823562992",
      "pull_request_review_id": 905613319,
      "id": 823562992,
      "node_id": "PRRC_kwDOABII584xFpLw",
      "diff_hunk": "@@ -1025,22 +1006,16 @@ class CConnman\n \n     /**\n      * Do the read/write for connected sockets that are ready for IO.\n-     * @param[in] nodes Nodes to process. The socket of each node is checked against\n-     * `recv_set`, `send_set` and `error_set`.\n-     * @param[in] recv_set Sockets that are ready for read.\n-     * @param[in] send_set Sockets that are ready for send.\n-     * @param[in] error_set Sockets that have an exceptional condition (error).\n+     * @param[in] nodes Nodes to process. The socket of each node is checked against `what`.\n+     * @param[in] what Sockets that are ready for IO.\n      */\n-    void SocketHandlerConnected(const std::vector<CNode*>& nodes,\n-                                const std::set<SOCKET>& recv_set,\n-                                const std::set<SOCKET>& send_set,\n-                                const std::set<SOCKET>& error_set);\n+    void SocketHandlerConnected(const std::vector<CNode*>& nodes, Sock::WaitData& what);\n \n     /**\n      * Accept incoming connections, one from each read-ready listening socket.\n-     * @param[in] recv_set Sockets that are ready for read.\n+     * @param[in] what Sockets that are ready for IO.\n      */\n-    void SocketHandlerListening(const std::set<SOCKET>& recv_set);\n+    void SocketHandlerListening(Sock::WaitData& what);",
      "path": "src/net.h",
      "position": null,
      "original_position": 55,
      "commit_id": "6e68ccbefea6509c61fc4405a391a517c6057bb0",
      "original_commit_id": "af45eeea037770229b7358b93d4cb8e256d7de19",
      "in_reply_to_id": 810674255,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2022-03-10T10:18:36Z",
      "updated_at": "2022-03-10T10:18:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24356#discussion_r823562992",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/823562992"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1018,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/823563225",
      "pull_request_review_id": 905613662,
      "id": 823563225,
      "node_id": "PRRC_kwDOABII584xFpPZ",
      "diff_hunk": "@@ -1659,13 +1537,14 @@ void CConnman::SocketHandlerConnected(const std::vector<CNode*>& nodes,\n     }\n }\n \n-void CConnman::SocketHandlerListening(const std::set<SOCKET>& recv_set)\n+void CConnman::SocketHandlerListening(Sock::WaitData& what)",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 226,
      "commit_id": "6e68ccbefea6509c61fc4405a391a517c6057bb0",
      "original_commit_id": "af45eeea037770229b7358b93d4cb8e256d7de19",
      "in_reply_to_id": 810674375,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2022-03-10T10:18:52Z",
      "updated_at": "2022-03-10T10:18:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24356#discussion_r823563225",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/823563225"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1540,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/823563382",
      "pull_request_review_id": 905613872,
      "id": 823563382,
      "node_id": "PRRC_kwDOABII584xFpR2",
      "diff_hunk": "@@ -1407,170 +1406,46 @@ bool CConnman::GenerateSelectSet(const std::vector<CNode*>& nodes,\n             continue;\n         }\n \n-        error_set.insert(pnode->m_sock->Get());\n+        Sock::Event requested{0};\n         if (select_send) {\n-            send_set.insert(pnode->m_sock->Get());\n-            continue;\n-        }\n-        if (select_recv) {\n-            recv_set.insert(pnode->m_sock->Get());\n-        }\n-    }\n-\n-    return !recv_set.empty() || !send_set.empty() || !error_set.empty();\n-}\n-\n-#ifdef USE_POLL\n-void CConnman::SocketEvents(const std::vector<CNode*>& nodes,\n-                            std::set<SOCKET>& recv_set,\n-                            std::set<SOCKET>& send_set,\n-                            std::set<SOCKET>& error_set)\n-{\n-    std::set<SOCKET> recv_select_set, send_select_set, error_select_set;\n-    if (!GenerateSelectSet(nodes, recv_select_set, send_select_set, error_select_set)) {\n-        interruptNet.sleep_for(std::chrono::milliseconds(SELECT_TIMEOUT_MILLISECONDS));\n-        return;\n-    }\n-\n-    std::unordered_map<SOCKET, struct pollfd> pollfds;\n-    for (SOCKET socket_id : recv_select_set) {\n-        pollfds[socket_id].fd = socket_id;\n-        pollfds[socket_id].events |= POLLIN;\n-    }\n-\n-    for (SOCKET socket_id : send_select_set) {\n-        pollfds[socket_id].fd = socket_id;\n-        pollfds[socket_id].events |= POLLOUT;\n-    }\n-\n-    for (SOCKET socket_id : error_select_set) {\n-        pollfds[socket_id].fd = socket_id;\n-        // These flags are ignored, but we set them for clarity\n-        pollfds[socket_id].events |= POLLERR|POLLHUP;\n-    }\n-\n-    std::vector<struct pollfd> vpollfds;\n-    vpollfds.reserve(pollfds.size());\n-    for (auto it : pollfds) {\n-        vpollfds.push_back(std::move(it.second));\n-    }\n-\n-    if (poll(vpollfds.data(), vpollfds.size(), SELECT_TIMEOUT_MILLISECONDS) < 0) return;\n-\n-    if (interruptNet) return;\n-\n-    for (struct pollfd pollfd_entry : vpollfds) {\n-        if (pollfd_entry.revents & POLLIN)            recv_set.insert(pollfd_entry.fd);\n-        if (pollfd_entry.revents & POLLOUT)           send_set.insert(pollfd_entry.fd);\n-        if (pollfd_entry.revents & (POLLERR|POLLHUP)) error_set.insert(pollfd_entry.fd);\n-    }\n-}\n-#else\n-void CConnman::SocketEvents(const std::vector<CNode*>& nodes,\n-                            std::set<SOCKET>& recv_set,\n-                            std::set<SOCKET>& send_set,\n-                            std::set<SOCKET>& error_set)\n-{\n-    std::set<SOCKET> recv_select_set, send_select_set, error_select_set;\n-    if (!GenerateSelectSet(nodes, recv_select_set, send_select_set, error_select_set)) {\n-        interruptNet.sleep_for(std::chrono::milliseconds(SELECT_TIMEOUT_MILLISECONDS));\n-        return;\n-    }\n-\n-    //\n-    // Find which sockets have data to receive\n-    //\n-    struct timeval timeout;\n-    timeout.tv_sec  = 0;\n-    timeout.tv_usec = SELECT_TIMEOUT_MILLISECONDS * 1000; // frequency to poll pnode->vSend\n-\n-    fd_set fdsetRecv;\n-    fd_set fdsetSend;\n-    fd_set fdsetError;\n-    FD_ZERO(&fdsetRecv);\n-    FD_ZERO(&fdsetSend);\n-    FD_ZERO(&fdsetError);\n-    SOCKET hSocketMax = 0;\n-\n-    for (SOCKET hSocket : recv_select_set) {\n-        FD_SET(hSocket, &fdsetRecv);\n-        hSocketMax = std::max(hSocketMax, hSocket);\n-    }\n-\n-    for (SOCKET hSocket : send_select_set) {\n-        FD_SET(hSocket, &fdsetSend);\n-        hSocketMax = std::max(hSocketMax, hSocket);\n-    }\n-\n-    for (SOCKET hSocket : error_select_set) {\n-        FD_SET(hSocket, &fdsetError);\n-        hSocketMax = std::max(hSocketMax, hSocket);\n-    }\n-\n-    int nSelect = select(hSocketMax + 1, &fdsetRecv, &fdsetSend, &fdsetError, &timeout);\n-\n-    if (interruptNet)\n-        return;\n-\n-    if (nSelect == SOCKET_ERROR)\n-    {\n-        int nErr = WSAGetLastError();\n-        LogPrintf(\"socket select error %s\\n\", NetworkErrorString(nErr));\n-        for (unsigned int i = 0; i <= hSocketMax; i++)\n-            FD_SET(i, &fdsetRecv);\n-        FD_ZERO(&fdsetSend);\n-        FD_ZERO(&fdsetError);\n-        if (!interruptNet.sleep_for(std::chrono::milliseconds(SELECT_TIMEOUT_MILLISECONDS)))\n-            return;\n-    }\n-\n-    for (SOCKET hSocket : recv_select_set) {\n-        if (FD_ISSET(hSocket, &fdsetRecv)) {\n-            recv_set.insert(hSocket);\n+            requested = Sock::SEND;\n+        } else if (select_recv) {\n+            requested = Sock::RECV;\n         }\n-    }\n \n-    for (SOCKET hSocket : send_select_set) {\n-        if (FD_ISSET(hSocket, &fdsetSend)) {\n-            send_set.insert(hSocket);\n-        }\n+        what.emplace(pnode->m_sock, Sock::Events{requested});\n     }\n \n-    for (SOCKET hSocket : error_select_set) {\n-        if (FD_ISSET(hSocket, &fdsetError)) {\n-            error_set.insert(hSocket);\n-        }\n-    }\n+    return what;\n }\n-#endif\n \n void CConnman::SocketHandler()\n {\n-    std::set<SOCKET> recv_set;\n-    std::set<SOCKET> send_set;\n-    std::set<SOCKET> error_set;\n+    Sock::WaitData what;\n \n     {\n         const NodesSnapshot snap{*this, /*shuffle=*/false};\n \n+        const auto timeout = std::chrono::milliseconds(SELECT_TIMEOUT_MILLISECONDS);\n+\n         // Check for the readiness of the already connected sockets and the\n         // listening sockets in one call (\"readiness\" as in poll(2) or\n         // select(2)). If none are ready, wait for a short while and return\n         // empty sets.\n-        SocketEvents(snap.Nodes(), recv_set, send_set, error_set);\n+        what = GenerateWaitSockets(snap.Nodes());\n+        if (what.empty() || !what.begin()->first->WaitMany(timeout, what)) {\n+            interruptNet.sleep_for(timeout);\n+        }\n \n         // Service (send/receive) each of the already connected nodes.\n-        SocketHandlerConnected(snap.Nodes(), recv_set, send_set, error_set);\n+        SocketHandlerConnected(snap.Nodes(), what);\n     }\n \n     // Accept new connections from listening sockets.\n-    SocketHandlerListening(recv_set);\n+    SocketHandlerListening(what);\n }\n \n-void CConnman::SocketHandlerConnected(const std::vector<CNode*>& nodes,\n-                                      const std::set<SOCKET>& recv_set,\n-                                      const std::set<SOCKET>& send_set,\n-                                      const std::set<SOCKET>& error_set)\n+void CConnman::SocketHandlerConnected(const std::vector<CNode*>& nodes, Sock::WaitData& what)",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 201,
      "commit_id": "6e68ccbefea6509c61fc4405a391a517c6057bb0",
      "original_commit_id": "af45eeea037770229b7358b93d4cb8e256d7de19",
      "in_reply_to_id": 810674714,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2022-03-10T10:19:02Z",
      "updated_at": "2022-03-10T10:19:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24356#discussion_r823563382",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/823563382"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1448,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/823563526",
      "pull_request_review_id": 905614116,
      "id": 823563526,
      "node_id": "PRRC_kwDOABII584xFpUG",
      "diff_hunk": "@@ -1025,22 +1006,16 @@ class CConnman\n \n     /**\n      * Do the read/write for connected sockets that are ready for IO.\n-     * @param[in] nodes Nodes to process. The socket of each node is checked against\n-     * `recv_set`, `send_set` and `error_set`.\n-     * @param[in] recv_set Sockets that are ready for read.\n-     * @param[in] send_set Sockets that are ready for send.\n-     * @param[in] error_set Sockets that have an exceptional condition (error).\n+     * @param[in] nodes Nodes to process. The socket of each node is checked against `what`.\n+     * @param[in] what Sockets that are ready for IO.\n      */\n-    void SocketHandlerConnected(const std::vector<CNode*>& nodes,\n-                                const std::set<SOCKET>& recv_set,\n-                                const std::set<SOCKET>& send_set,\n-                                const std::set<SOCKET>& error_set);\n+    void SocketHandlerConnected(const std::vector<CNode*>& nodes, Sock::WaitData& what);",
      "path": "src/net.h",
      "position": null,
      "original_position": 47,
      "commit_id": "6e68ccbefea6509c61fc4405a391a517c6057bb0",
      "original_commit_id": "af45eeea037770229b7358b93d4cb8e256d7de19",
      "in_reply_to_id": 810674678,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2022-03-10T10:19:13Z",
      "updated_at": "2022-03-10T10:19:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24356#discussion_r823563526",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/823563526"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1012,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/860680159",
      "pull_request_review_id": 956134590,
      "id": 860680159,
      "node_id": "PRRC_kwDOABII584zTO_f",
      "diff_hunk": "@@ -1013,23 +994,17 @@ class CConnman\n \n     /**\n      * Do the read/write for connected sockets that are ready for IO.\n-     * @param[in] nodes Nodes to process. The socket of each node is checked against\n-     * `recv_set`, `send_set` and `error_set`.\n-     * @param[in] recv_set Sockets that are ready for read.\n-     * @param[in] send_set Sockets that are ready for send.\n-     * @param[in] error_set Sockets that have an exceptional condition (error).\n+     * @param[in] nodes Nodes to process. The socket of each node is checked against `what`.\n+     * @param[in] what Sockets that are ready for IO.\n      */\n-    void SocketHandlerConnected(const std::vector<CNode*>& nodes,\n-                                const std::set<SOCKET>& recv_set,\n-                                const std::set<SOCKET>& send_set,\n-                                const std::set<SOCKET>& error_set)\n+    void SocketHandlerConnected(const std::vector<CNode*>& nodes, const Sock::WaitData& what)\n         EXCLUSIVE_LOCKS_REQUIRED(!m_total_bytes_sent_mutex);\n \n     /**\n      * Accept incoming connections, one from each read-ready listening socket.\n-     * @param[in] recv_set Sockets that are ready for read.\n+     * @param[in] what Sockets that are ready for IO.",
      "path": "src/net.h",
      "position": null,
      "original_position": 53,
      "commit_id": "6e68ccbefea6509c61fc4405a391a517c6057bb0",
      "original_commit_id": "ca8dcfabb795e94ee085ba5e6cf9ab1edb1d3a06",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If you agree, maybe change the names of the `what` method params to ones that are more descriptive and unique (e.g. `socket_data`, `wait_sockets`, `wait_data`, `sockets_ready_for_io`, etc.) and for the `what` localvars, either the same or i.e. `s` where unimportant.",
      "created_at": "2022-04-28T09:29:10Z",
      "updated_at": "2022-04-28T09:47:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24356#discussion_r860680159",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/860680159"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1005,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/877052961",
      "pull_request_review_id": 978569277,
      "id": 877052961,
      "node_id": "PRRC_kwDOABII5840RsQh",
      "diff_hunk": "@@ -1013,23 +994,17 @@ class CConnman\n \n     /**\n      * Do the read/write for connected sockets that are ready for IO.\n-     * @param[in] nodes Nodes to process. The socket of each node is checked against\n-     * `recv_set`, `send_set` and `error_set`.\n-     * @param[in] recv_set Sockets that are ready for read.\n-     * @param[in] send_set Sockets that are ready for send.\n-     * @param[in] error_set Sockets that have an exceptional condition (error).\n+     * @param[in] nodes Nodes to process. The socket of each node is checked against `what`.\n+     * @param[in] what Sockets that are ready for IO.\n      */\n-    void SocketHandlerConnected(const std::vector<CNode*>& nodes,\n-                                const std::set<SOCKET>& recv_set,\n-                                const std::set<SOCKET>& send_set,\n-                                const std::set<SOCKET>& error_set)\n+    void SocketHandlerConnected(const std::vector<CNode*>& nodes, const Sock::WaitData& what)\n         EXCLUSIVE_LOCKS_REQUIRED(!m_total_bytes_sent_mutex);\n \n     /**\n      * Accept incoming connections, one from each read-ready listening socket.\n-     * @param[in] recv_set Sockets that are ready for read.\n+     * @param[in] what Sockets that are ready for IO.",
      "path": "src/net.h",
      "position": null,
      "original_position": 53,
      "commit_id": "6e68ccbefea6509c61fc4405a391a517c6057bb0",
      "original_commit_id": "ca8dcfabb795e94ee085ba5e6cf9ab1edb1d3a06",
      "in_reply_to_id": 860680159,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Renamed to `EventsPerSock`. That map contains, per socket, the requested and the occurred events (just like `poll(2)`). And the variables then become the blatant `events_per_sock` ;-)",
      "created_at": "2022-05-19T13:25:31Z",
      "updated_at": "2022-05-19T13:25:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24356#discussion_r877052961",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/877052961"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1005,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/878369474",
      "pull_request_review_id": 980447414,
      "id": 878369474,
      "node_id": "PRRC_kwDOABII5840WtrC",
      "diff_hunk": "@@ -1013,23 +994,17 @@ class CConnman\n \n     /**\n      * Do the read/write for connected sockets that are ready for IO.\n-     * @param[in] nodes Nodes to process. The socket of each node is checked against\n-     * `recv_set`, `send_set` and `error_set`.\n-     * @param[in] recv_set Sockets that are ready for read.\n-     * @param[in] send_set Sockets that are ready for send.\n-     * @param[in] error_set Sockets that have an exceptional condition (error).\n+     * @param[in] nodes Nodes to process. The socket of each node is checked against `what`.\n+     * @param[in] what Sockets that are ready for IO.\n      */\n-    void SocketHandlerConnected(const std::vector<CNode*>& nodes,\n-                                const std::set<SOCKET>& recv_set,\n-                                const std::set<SOCKET>& send_set,\n-                                const std::set<SOCKET>& error_set)\n+    void SocketHandlerConnected(const std::vector<CNode*>& nodes, const Sock::WaitData& what)\n         EXCLUSIVE_LOCKS_REQUIRED(!m_total_bytes_sent_mutex);\n \n     /**\n      * Accept incoming connections, one from each read-ready listening socket.\n-     * @param[in] recv_set Sockets that are ready for read.\n+     * @param[in] what Sockets that are ready for IO.",
      "path": "src/net.h",
      "position": null,
      "original_position": 53,
      "commit_id": "6e68ccbefea6509c61fc4405a391a517c6057bb0",
      "original_commit_id": "ca8dcfabb795e94ee085ba5e6cf9ab1edb1d3a06",
      "in_reply_to_id": 860680159,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, that seems better. In the last commit, I sort of hesitated in the two places where you do `@param[in] events_per_sock Sockets that are ready for IO.` ... thinking it should be something like \"Events for each socket that is ready for IO.\"",
      "created_at": "2022-05-20T17:12:24Z",
      "updated_at": "2022-05-20T17:12:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24356#discussion_r878369474",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/878369474"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1005,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/892200046",
      "pull_request_review_id": 999505218,
      "id": 892200046,
      "node_id": "PRRC_kwDOABII5841LeRu",
      "diff_hunk": "@@ -150,7 +150,7 @@ bool Session::Accept(Connection& conn)\n                 throw std::runtime_error(\"wait on socket failed\");\n             }\n \n-            if ((occurred & Sock::RECV) == 0) {\n+            if (occurred == 0) {\n                 // Timeout, no incoming connections within MAX_WAIT_FOR_IO.",
      "path": "src/i2p.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "6e68ccbefea6509c61fc4405a391a517c6057bb0",
      "original_commit_id": "6747729cb850914d925f9c4a7a809fff547da746",
      "in_reply_to_id": null,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe update this to \"no incoming connections or errors\" to match the code change.",
      "created_at": "2022-06-08T10:38:12Z",
      "updated_at": "2022-06-08T10:38:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24356#discussion_r892200046",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/892200046"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 154,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/892202995",
      "pull_request_review_id": 999509465,
      "id": 892202995,
      "node_id": "PRRC_kwDOABII5841Le_z",
      "diff_hunk": "@@ -980,28 +980,9 @@ class CConnman\n     /**\n      * Generate a collection of sockets to check for IO readiness.\n      * @param[in] nodes Select from these nodes' sockets.\n-     * @param[out] recv_set Sockets to check for read readiness.\n-     * @param[out] send_set Sockets to check for write readiness.\n-     * @param[out] error_set Sockets to check for errors.\n-     * @return true if at least one socket is to be checked (the returned set is not empty)\n+     * @return sockets to check for readiness\n      */\n-    bool GenerateSelectSet(const std::vector<CNode*>& nodes,\n-                           std::set<SOCKET>& recv_set,\n-                           std::set<SOCKET>& send_set,\n-                           std::set<SOCKET>& error_set);\n-\n-    /**\n-     * Check which sockets are ready for IO.\n-     * @param[in] nodes Select from these nodes' sockets.\n-     * @param[out] recv_set Sockets which are ready for read.\n-     * @param[out] send_set Sockets which are ready for write.\n-     * @param[out] error_set Sockets which have errors.\n-     * This calls `GenerateSelectSet()` to gather a list of sockets to check.\n-     */\n-    void SocketEvents(const std::vector<CNode*>& nodes,\n-                      std::set<SOCKET>& recv_set,\n-                      std::set<SOCKET>& send_set,\n-                      std::set<SOCKET>& error_set);\n+    Sock::EventsPerSock GenerateWaitSockets(const std::vector<CNode*>& nodes);",
      "path": "src/net.h",
      "position": null,
      "original_position": 27,
      "commit_id": "6e68ccbefea6509c61fc4405a391a517c6057bb0",
      "original_commit_id": "6747729cb850914d925f9c4a7a809fff547da746",
      "in_reply_to_id": null,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Instead of `const std::vector<CNode*>&` could use a `std::span<const CNode*>` which is more general?\r\n\r\nEdit: although this is symmetrical with `CConnman::GenerateWaitSockets`.",
      "created_at": "2022-06-08T10:41:46Z",
      "updated_at": "2022-06-08T11:53:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24356#discussion_r892202995",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/892202995"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 985,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/892208089",
      "pull_request_review_id": 999516397,
      "id": 892208089,
      "node_id": "PRRC_kwDOABII5841LgPZ",
      "diff_hunk": "@@ -130,26 +131,84 @@ class Sock\n     /**\n      * If passed to `Wait()`, then it will wait for readiness to read from the socket.\n      */\n-    static constexpr Event RECV = 0b01;\n+    static constexpr Event RECV = 0b001;\n \n     /**\n      * If passed to `Wait()`, then it will wait for readiness to send to the socket.\n      */\n-    static constexpr Event SEND = 0b10;\n+    static constexpr Event SEND = 0b010;\n+\n+    /**\n+     * Ignored if passed to `Wait()`, but could be set in the occurred events if an\n+     * exceptional condition has occurred on the socket or if it has been disconnected.\n+     */\n+    static constexpr Event ERR = 0b100;\n \n     /**\n      * Wait for readiness for input (recv) or output (send).\n      * @param[in] timeout Wait this much for at least one of the requested events to occur.\n      * @param[in] requested Wait for those events, bitwise-or of `RECV` and `SEND`.\n-     * @param[out] occurred If not nullptr and `true` is returned, then upon return this\n-     * indicates which of the requested events occurred. A timeout is indicated by return\n-     * value of `true` and `occurred` being set to 0.\n-     * @return true on success and false otherwise\n+     * @param[out] occurred If not nullptr and the function returns `true`, then this\n+     * indicates which of the requested events occurred (`ERR` will be added, even if\n+     * not requested, if an exceptional event occurs on the socket).\n+     * A timeout is indicated by return value of `true` and `occurred` being set to 0.\n+     * @return true on success (or timeout, if `occurred` of 0 is returned), false otherwise\n      */\n     [[nodiscard]] virtual bool Wait(std::chrono::milliseconds timeout,\n                                     Event requested,\n                                     Event* occurred = nullptr) const;\n \n+    /**\n+     * Auxiliary requested/occurred events to wait for in `WaitMany()`.\n+     */\n+    struct Events {\n+        explicit Events(Event req) : requested{req}, occurred{0} {}\n+        Event requested;\n+        Event occurred;\n+    };\n+\n+    struct Hash {\n+        size_t operator()(const std::shared_ptr<const Sock>& s) const\n+        {\n+            return s ? s->m_socket : std::numeric_limits<SOCKET>::max();\n+        }\n+    };\n+\n+    struct Equal {\n+        bool operator()(const std::shared_ptr<const Sock>& lhs,\n+                        const std::shared_ptr<const Sock>& rhs) const\n+        {\n+            if (lhs && rhs) {\n+                return lhs->m_socket == rhs->m_socket;\n+            }\n+            if (!lhs && !rhs) {\n+                return true;\n+            }\n+            return false;\n+        }\n+    };\n+\n+    /**\n+     * On which socket to wait for what events in `WaitMany()`.\n+     * The `shared_ptr` is copied into the map to ensure that the `Sock` object\n+     * is not destroyed (its destructor would close the underlying socket).\n+     * If this happens shortly before or after we call `poll(2)` and a new\n+     * socket gets created under the same file descriptor number then the report\n+     * from `WaitMany()` will be bogus.\n+     */\n+    using EventsPerSock = std::unordered_map<std::shared_ptr<const Sock>, Events, Hash, Equal>;\n+\n+    /**\n+     * Same as `Wait()`, but wait on many sockets within the same timeout.\n+     * @param[in] timeout Wait this long for at least one of the requested events to occur.\n+     * @param[in,out] events_per_sock Wait for the requested events on these sockets and set\n+     * `occurred` for the events that actually occurred.\n+     * @return true on success (or timeout, if all `what[].occurred` are returned as 0),\n+     * false otherwise\n+     */\n+    [[nodiscard]] virtual bool WaitMany(std::chrono::milliseconds timeout,",
      "path": "src/util/sock.h",
      "position": 93,
      "original_position": 93,
      "commit_id": "6e68ccbefea6509c61fc4405a391a517c6057bb0",
      "original_commit_id": "6747729cb850914d925f9c4a7a809fff547da746",
      "in_reply_to_id": null,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe return `std::optional<EventsPerSock>` instead of using output parameter.\r\n\r\nEdit: never mind, it's good like this, as it's an in+out parameter.",
      "created_at": "2022-06-08T10:47:39Z",
      "updated_at": "2022-06-08T10:59:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24356#discussion_r892208089",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/892208089"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 209,
      "original_line": 209,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/892213739",
      "pull_request_review_id": 999524506,
      "id": 892213739,
      "node_id": "PRRC_kwDOABII5841Lhnr",
      "diff_hunk": "@@ -130,26 +131,84 @@ class Sock\n     /**\n      * If passed to `Wait()`, then it will wait for readiness to read from the socket.\n      */\n-    static constexpr Event RECV = 0b01;\n+    static constexpr Event RECV = 0b001;\n \n     /**\n      * If passed to `Wait()`, then it will wait for readiness to send to the socket.\n      */\n-    static constexpr Event SEND = 0b10;\n+    static constexpr Event SEND = 0b010;\n+\n+    /**\n+     * Ignored if passed to `Wait()`, but could be set in the occurred events if an\n+     * exceptional condition has occurred on the socket or if it has been disconnected.\n+     */\n+    static constexpr Event ERR = 0b100;\n \n     /**\n      * Wait for readiness for input (recv) or output (send).\n      * @param[in] timeout Wait this much for at least one of the requested events to occur.\n      * @param[in] requested Wait for those events, bitwise-or of `RECV` and `SEND`.\n-     * @param[out] occurred If not nullptr and `true` is returned, then upon return this\n-     * indicates which of the requested events occurred. A timeout is indicated by return\n-     * value of `true` and `occurred` being set to 0.\n-     * @return true on success and false otherwise\n+     * @param[out] occurred If not nullptr and the function returns `true`, then this\n+     * indicates which of the requested events occurred (`ERR` will be added, even if\n+     * not requested, if an exceptional event occurs on the socket).\n+     * A timeout is indicated by return value of `true` and `occurred` being set to 0.\n+     * @return true on success (or timeout, if `occurred` of 0 is returned), false otherwise\n      */\n     [[nodiscard]] virtual bool Wait(std::chrono::milliseconds timeout,\n                                     Event requested,\n                                     Event* occurred = nullptr) const;\n \n+    /**\n+     * Auxiliary requested/occurred events to wait for in `WaitMany()`.\n+     */\n+    struct Events {\n+        explicit Events(Event req) : requested{req}, occurred{0} {}\n+        Event requested;\n+        Event occurred;\n+    };\n+\n+    struct Hash {\n+        size_t operator()(const std::shared_ptr<const Sock>& s) const",
      "path": "src/util/sock.h",
      "position": 55,
      "original_position": 55,
      "commit_id": "6e68ccbefea6509c61fc4405a391a517c6057bb0",
      "original_commit_id": "6747729cb850914d925f9c4a7a809fff547da746",
      "in_reply_to_id": null,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "As this code is templated in the header anyway, could we do something more general than hardcoding `std::shared_ptr<const Sock>` here? I mean, it would work the same for any kind of \"pointer to Sock\", whether shared, unique, or raw. Same for `Equal` below.\r\n\r\nEdit: OK, so looking further, `Hash` and `Equal` are implementation details internal to the `EventsPerSock` structure. Another option would be to name them less generally.",
      "created_at": "2022-06-08T10:54:33Z",
      "updated_at": "2022-06-08T11:02:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24356#discussion_r892213739",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/892213739"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 171,
      "original_line": 171,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/892275813",
      "pull_request_review_id": 999610584,
      "id": 892275813,
      "node_id": "PRRC_kwDOABII5841Lwxl",
      "diff_hunk": "@@ -1428,172 +1427,49 @@ bool CConnman::GenerateSelectSet(const std::vector<CNode*>& nodes,\n             continue;\n         }\n \n-        error_set.insert(pnode->m_sock->Get());\n+        Sock::Event requested{0};\n         if (select_send) {\n-            send_set.insert(pnode->m_sock->Get());\n-            continue;\n-        }\n-        if (select_recv) {\n-            recv_set.insert(pnode->m_sock->Get());\n-        }\n-    }\n-\n-    return !recv_set.empty() || !send_set.empty() || !error_set.empty();\n-}\n-\n-#ifdef USE_POLL\n-void CConnman::SocketEvents(const std::vector<CNode*>& nodes,\n-                            std::set<SOCKET>& recv_set,\n-                            std::set<SOCKET>& send_set,\n-                            std::set<SOCKET>& error_set)\n-{\n-    std::set<SOCKET> recv_select_set, send_select_set, error_select_set;\n-    if (!GenerateSelectSet(nodes, recv_select_set, send_select_set, error_select_set)) {\n-        interruptNet.sleep_for(std::chrono::milliseconds(SELECT_TIMEOUT_MILLISECONDS));\n-        return;\n-    }\n-\n-    std::unordered_map<SOCKET, struct pollfd> pollfds;\n-    for (SOCKET socket_id : recv_select_set) {\n-        pollfds[socket_id].fd = socket_id;\n-        pollfds[socket_id].events |= POLLIN;\n-    }\n-\n-    for (SOCKET socket_id : send_select_set) {\n-        pollfds[socket_id].fd = socket_id;\n-        pollfds[socket_id].events |= POLLOUT;\n-    }\n-\n-    for (SOCKET socket_id : error_select_set) {\n-        pollfds[socket_id].fd = socket_id;\n-        // These flags are ignored, but we set them for clarity\n-        pollfds[socket_id].events |= POLLERR|POLLHUP;\n-    }\n-\n-    std::vector<struct pollfd> vpollfds;\n-    vpollfds.reserve(pollfds.size());\n-    for (auto it : pollfds) {\n-        vpollfds.push_back(std::move(it.second));\n-    }\n-\n-    if (poll(vpollfds.data(), vpollfds.size(), SELECT_TIMEOUT_MILLISECONDS) < 0) return;\n-\n-    if (interruptNet) return;\n-\n-    for (struct pollfd pollfd_entry : vpollfds) {\n-        if (pollfd_entry.revents & POLLIN)            recv_set.insert(pollfd_entry.fd);\n-        if (pollfd_entry.revents & POLLOUT)           send_set.insert(pollfd_entry.fd);\n-        if (pollfd_entry.revents & (POLLERR|POLLHUP)) error_set.insert(pollfd_entry.fd);\n-    }\n-}\n-#else\n-void CConnman::SocketEvents(const std::vector<CNode*>& nodes,\n-                            std::set<SOCKET>& recv_set,\n-                            std::set<SOCKET>& send_set,\n-                            std::set<SOCKET>& error_set)\n-{\n-    std::set<SOCKET> recv_select_set, send_select_set, error_select_set;\n-    if (!GenerateSelectSet(nodes, recv_select_set, send_select_set, error_select_set)) {\n-        interruptNet.sleep_for(std::chrono::milliseconds(SELECT_TIMEOUT_MILLISECONDS));\n-        return;\n-    }\n-\n-    //\n-    // Find which sockets have data to receive\n-    //\n-    struct timeval timeout;\n-    timeout.tv_sec  = 0;\n-    timeout.tv_usec = SELECT_TIMEOUT_MILLISECONDS * 1000; // frequency to poll pnode->vSend\n-\n-    fd_set fdsetRecv;\n-    fd_set fdsetSend;\n-    fd_set fdsetError;\n-    FD_ZERO(&fdsetRecv);\n-    FD_ZERO(&fdsetSend);\n-    FD_ZERO(&fdsetError);\n-    SOCKET hSocketMax = 0;\n-\n-    for (SOCKET hSocket : recv_select_set) {\n-        FD_SET(hSocket, &fdsetRecv);\n-        hSocketMax = std::max(hSocketMax, hSocket);\n-    }\n-\n-    for (SOCKET hSocket : send_select_set) {\n-        FD_SET(hSocket, &fdsetSend);\n-        hSocketMax = std::max(hSocketMax, hSocket);\n-    }\n-\n-    for (SOCKET hSocket : error_select_set) {\n-        FD_SET(hSocket, &fdsetError);\n-        hSocketMax = std::max(hSocketMax, hSocket);\n-    }\n-\n-    int nSelect = select(hSocketMax + 1, &fdsetRecv, &fdsetSend, &fdsetError, &timeout);\n-\n-    if (interruptNet)\n-        return;\n-\n-    if (nSelect == SOCKET_ERROR)\n-    {\n-        int nErr = WSAGetLastError();\n-        LogPrintf(\"socket select error %s\\n\", NetworkErrorString(nErr));\n-        for (unsigned int i = 0; i <= hSocketMax; i++)\n-            FD_SET(i, &fdsetRecv);\n-        FD_ZERO(&fdsetSend);\n-        FD_ZERO(&fdsetError);\n-        if (!interruptNet.sleep_for(std::chrono::milliseconds(SELECT_TIMEOUT_MILLISECONDS)))\n-            return;\n-    }\n-\n-    for (SOCKET hSocket : recv_select_set) {\n-        if (FD_ISSET(hSocket, &fdsetRecv)) {\n-            recv_set.insert(hSocket);\n+            requested = Sock::SEND;\n+        } else if (select_recv) {\n+            requested = Sock::RECV;\n         }\n-    }\n \n-    for (SOCKET hSocket : send_select_set) {\n-        if (FD_ISSET(hSocket, &fdsetSend)) {\n-            send_set.insert(hSocket);\n-        }\n+        events_per_sock.emplace(pnode->m_sock, Sock::Events{requested});\n     }\n \n-    for (SOCKET hSocket : error_select_set) {\n-        if (FD_ISSET(hSocket, &fdsetError)) {\n-            error_set.insert(hSocket);\n-        }\n-    }\n+    return events_per_sock;\n }\n-#endif\n \n void CConnman::SocketHandler()\n {\n     AssertLockNotHeld(m_total_bytes_sent_mutex);\n \n-    std::set<SOCKET> recv_set;\n-    std::set<SOCKET> send_set;\n-    std::set<SOCKET> error_set;\n+    Sock::EventsPerSock events_per_sock;\n \n     {\n         const NodesSnapshot snap{*this, /*shuffle=*/false};\n \n+        const auto timeout = std::chrono::milliseconds(SELECT_TIMEOUT_MILLISECONDS);\n+\n         // Check for the readiness of the already connected sockets and the\n         // listening sockets in one call (\"readiness\" as in poll(2) or\n         // select(2)). If none are ready, wait for a short while and return\n         // empty sets.\n-        SocketEvents(snap.Nodes(), recv_set, send_set, error_set);\n+        events_per_sock = GenerateWaitSockets(snap.Nodes());\n+        if (events_per_sock.empty() || !events_per_sock.begin()->first->WaitMany(timeout, events_per_sock)) {",
      "path": "src/net.cpp",
      "position": 185,
      "original_position": 185,
      "commit_id": "6e68ccbefea6509c61fc4405a391a517c6057bb0",
      "original_commit_id": "6747729cb850914d925f9c4a7a809fff547da746",
      "in_reply_to_id": null,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This looks slightly circuitous to me. Is there a reason to have `Sock::WaitMany` be an instance method instead of a static one? It acts on multiple sockets at once, not one socket, after all, does it matter which one you call it on?",
      "created_at": "2022-06-08T12:06:23Z",
      "updated_at": "2022-06-08T12:06:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24356#discussion_r892275813",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/892275813"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1459,
      "original_line": 1459,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/893411698",
      "pull_request_review_id": 1001198007,
      "id": 893411698,
      "node_id": "PRRC_kwDOABII5841QGFy",
      "diff_hunk": "@@ -980,28 +980,9 @@ class CConnman\n     /**\n      * Generate a collection of sockets to check for IO readiness.\n      * @param[in] nodes Select from these nodes' sockets.\n-     * @param[out] recv_set Sockets to check for read readiness.\n-     * @param[out] send_set Sockets to check for write readiness.\n-     * @param[out] error_set Sockets to check for errors.\n-     * @return true if at least one socket is to be checked (the returned set is not empty)\n+     * @return sockets to check for readiness\n      */\n-    bool GenerateSelectSet(const std::vector<CNode*>& nodes,\n-                           std::set<SOCKET>& recv_set,\n-                           std::set<SOCKET>& send_set,\n-                           std::set<SOCKET>& error_set);\n-\n-    /**\n-     * Check which sockets are ready for IO.\n-     * @param[in] nodes Select from these nodes' sockets.\n-     * @param[out] recv_set Sockets which are ready for read.\n-     * @param[out] send_set Sockets which are ready for write.\n-     * @param[out] error_set Sockets which have errors.\n-     * This calls `GenerateSelectSet()` to gather a list of sockets to check.\n-     */\n-    void SocketEvents(const std::vector<CNode*>& nodes,\n-                      std::set<SOCKET>& recv_set,\n-                      std::set<SOCKET>& send_set,\n-                      std::set<SOCKET>& error_set);\n+    Sock::EventsPerSock GenerateWaitSockets(const std::vector<CNode*>& nodes);",
      "path": "src/net.h",
      "position": null,
      "original_position": 27,
      "commit_id": "6e68ccbefea6509c61fc4405a391a517c6057bb0",
      "original_commit_id": "6747729cb850914d925f9c4a7a809fff547da746",
      "in_reply_to_id": 892202995,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Leaving it as is - I tried to make it `Span`, but it can't be to `const CNode*` because the method does `LOCK(pnode->cs_vSend);` for each `CNode` element. `Span<CNode*>` argument results in the error: `No viable conversion from 'const std::vector<CNode *>' to 'Span<CNode *>'`.\r\n\r\nIt is symmetrical with `CConnman::SocketHandlerConnected()`.",
      "created_at": "2022-06-09T11:55:42Z",
      "updated_at": "2022-06-09T11:57:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24356#discussion_r893411698",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/893411698"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 985,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/893437716",
      "pull_request_review_id": 1001234789,
      "id": 893437716,
      "node_id": "PRRC_kwDOABII5841QMcU",
      "diff_hunk": "@@ -130,26 +131,84 @@ class Sock\n     /**\n      * If passed to `Wait()`, then it will wait for readiness to read from the socket.\n      */\n-    static constexpr Event RECV = 0b01;\n+    static constexpr Event RECV = 0b001;\n \n     /**\n      * If passed to `Wait()`, then it will wait for readiness to send to the socket.\n      */\n-    static constexpr Event SEND = 0b10;\n+    static constexpr Event SEND = 0b010;\n+\n+    /**\n+     * Ignored if passed to `Wait()`, but could be set in the occurred events if an\n+     * exceptional condition has occurred on the socket or if it has been disconnected.\n+     */\n+    static constexpr Event ERR = 0b100;\n \n     /**\n      * Wait for readiness for input (recv) or output (send).\n      * @param[in] timeout Wait this much for at least one of the requested events to occur.\n      * @param[in] requested Wait for those events, bitwise-or of `RECV` and `SEND`.\n-     * @param[out] occurred If not nullptr and `true` is returned, then upon return this\n-     * indicates which of the requested events occurred. A timeout is indicated by return\n-     * value of `true` and `occurred` being set to 0.\n-     * @return true on success and false otherwise\n+     * @param[out] occurred If not nullptr and the function returns `true`, then this\n+     * indicates which of the requested events occurred (`ERR` will be added, even if\n+     * not requested, if an exceptional event occurs on the socket).\n+     * A timeout is indicated by return value of `true` and `occurred` being set to 0.\n+     * @return true on success (or timeout, if `occurred` of 0 is returned), false otherwise\n      */\n     [[nodiscard]] virtual bool Wait(std::chrono::milliseconds timeout,\n                                     Event requested,\n                                     Event* occurred = nullptr) const;\n \n+    /**\n+     * Auxiliary requested/occurred events to wait for in `WaitMany()`.\n+     */\n+    struct Events {\n+        explicit Events(Event req) : requested{req}, occurred{0} {}\n+        Event requested;\n+        Event occurred;\n+    };\n+\n+    struct Hash {\n+        size_t operator()(const std::shared_ptr<const Sock>& s) const",
      "path": "src/util/sock.h",
      "position": 55,
      "original_position": 55,
      "commit_id": "6e68ccbefea6509c61fc4405a391a517c6057bb0",
      "original_commit_id": "6747729cb850914d925f9c4a7a809fff547da746",
      "in_reply_to_id": 892213739,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah, it has to take `shared_ptr` because it is used for `std::unordered_map` with keys that are `shared_ptr`. Renamed to `HashSharedPtrSock` and `EqualSharedPtrSock`, better now?",
      "created_at": "2022-06-09T12:25:14Z",
      "updated_at": "2022-06-09T12:25:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24356#discussion_r893437716",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/893437716"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 171,
      "original_line": 171,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/893439163",
      "pull_request_review_id": 1001236844,
      "id": 893439163,
      "node_id": "PRRC_kwDOABII5841QMy7",
      "diff_hunk": "@@ -150,7 +150,7 @@ bool Session::Accept(Connection& conn)\n                 throw std::runtime_error(\"wait on socket failed\");\n             }\n \n-            if ((occurred & Sock::RECV) == 0) {\n+            if (occurred == 0) {\n                 // Timeout, no incoming connections within MAX_WAIT_FOR_IO.",
      "path": "src/i2p.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "6e68ccbefea6509c61fc4405a391a517c6057bb0",
      "original_commit_id": "6747729cb850914d925f9c4a7a809fff547da746",
      "in_reply_to_id": 892200046,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2022-06-09T12:26:47Z",
      "updated_at": "2022-06-09T12:26:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24356#discussion_r893439163",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/893439163"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 154,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/893459067",
      "pull_request_review_id": 1001265039,
      "id": 893459067,
      "node_id": "PRRC_kwDOABII5841QRp7",
      "diff_hunk": "@@ -1428,172 +1427,49 @@ bool CConnman::GenerateSelectSet(const std::vector<CNode*>& nodes,\n             continue;\n         }\n \n-        error_set.insert(pnode->m_sock->Get());\n+        Sock::Event requested{0};\n         if (select_send) {\n-            send_set.insert(pnode->m_sock->Get());\n-            continue;\n-        }\n-        if (select_recv) {\n-            recv_set.insert(pnode->m_sock->Get());\n-        }\n-    }\n-\n-    return !recv_set.empty() || !send_set.empty() || !error_set.empty();\n-}\n-\n-#ifdef USE_POLL\n-void CConnman::SocketEvents(const std::vector<CNode*>& nodes,\n-                            std::set<SOCKET>& recv_set,\n-                            std::set<SOCKET>& send_set,\n-                            std::set<SOCKET>& error_set)\n-{\n-    std::set<SOCKET> recv_select_set, send_select_set, error_select_set;\n-    if (!GenerateSelectSet(nodes, recv_select_set, send_select_set, error_select_set)) {\n-        interruptNet.sleep_for(std::chrono::milliseconds(SELECT_TIMEOUT_MILLISECONDS));\n-        return;\n-    }\n-\n-    std::unordered_map<SOCKET, struct pollfd> pollfds;\n-    for (SOCKET socket_id : recv_select_set) {\n-        pollfds[socket_id].fd = socket_id;\n-        pollfds[socket_id].events |= POLLIN;\n-    }\n-\n-    for (SOCKET socket_id : send_select_set) {\n-        pollfds[socket_id].fd = socket_id;\n-        pollfds[socket_id].events |= POLLOUT;\n-    }\n-\n-    for (SOCKET socket_id : error_select_set) {\n-        pollfds[socket_id].fd = socket_id;\n-        // These flags are ignored, but we set them for clarity\n-        pollfds[socket_id].events |= POLLERR|POLLHUP;\n-    }\n-\n-    std::vector<struct pollfd> vpollfds;\n-    vpollfds.reserve(pollfds.size());\n-    for (auto it : pollfds) {\n-        vpollfds.push_back(std::move(it.second));\n-    }\n-\n-    if (poll(vpollfds.data(), vpollfds.size(), SELECT_TIMEOUT_MILLISECONDS) < 0) return;\n-\n-    if (interruptNet) return;\n-\n-    for (struct pollfd pollfd_entry : vpollfds) {\n-        if (pollfd_entry.revents & POLLIN)            recv_set.insert(pollfd_entry.fd);\n-        if (pollfd_entry.revents & POLLOUT)           send_set.insert(pollfd_entry.fd);\n-        if (pollfd_entry.revents & (POLLERR|POLLHUP)) error_set.insert(pollfd_entry.fd);\n-    }\n-}\n-#else\n-void CConnman::SocketEvents(const std::vector<CNode*>& nodes,\n-                            std::set<SOCKET>& recv_set,\n-                            std::set<SOCKET>& send_set,\n-                            std::set<SOCKET>& error_set)\n-{\n-    std::set<SOCKET> recv_select_set, send_select_set, error_select_set;\n-    if (!GenerateSelectSet(nodes, recv_select_set, send_select_set, error_select_set)) {\n-        interruptNet.sleep_for(std::chrono::milliseconds(SELECT_TIMEOUT_MILLISECONDS));\n-        return;\n-    }\n-\n-    //\n-    // Find which sockets have data to receive\n-    //\n-    struct timeval timeout;\n-    timeout.tv_sec  = 0;\n-    timeout.tv_usec = SELECT_TIMEOUT_MILLISECONDS * 1000; // frequency to poll pnode->vSend\n-\n-    fd_set fdsetRecv;\n-    fd_set fdsetSend;\n-    fd_set fdsetError;\n-    FD_ZERO(&fdsetRecv);\n-    FD_ZERO(&fdsetSend);\n-    FD_ZERO(&fdsetError);\n-    SOCKET hSocketMax = 0;\n-\n-    for (SOCKET hSocket : recv_select_set) {\n-        FD_SET(hSocket, &fdsetRecv);\n-        hSocketMax = std::max(hSocketMax, hSocket);\n-    }\n-\n-    for (SOCKET hSocket : send_select_set) {\n-        FD_SET(hSocket, &fdsetSend);\n-        hSocketMax = std::max(hSocketMax, hSocket);\n-    }\n-\n-    for (SOCKET hSocket : error_select_set) {\n-        FD_SET(hSocket, &fdsetError);\n-        hSocketMax = std::max(hSocketMax, hSocket);\n-    }\n-\n-    int nSelect = select(hSocketMax + 1, &fdsetRecv, &fdsetSend, &fdsetError, &timeout);\n-\n-    if (interruptNet)\n-        return;\n-\n-    if (nSelect == SOCKET_ERROR)\n-    {\n-        int nErr = WSAGetLastError();\n-        LogPrintf(\"socket select error %s\\n\", NetworkErrorString(nErr));\n-        for (unsigned int i = 0; i <= hSocketMax; i++)\n-            FD_SET(i, &fdsetRecv);\n-        FD_ZERO(&fdsetSend);\n-        FD_ZERO(&fdsetError);\n-        if (!interruptNet.sleep_for(std::chrono::milliseconds(SELECT_TIMEOUT_MILLISECONDS)))\n-            return;\n-    }\n-\n-    for (SOCKET hSocket : recv_select_set) {\n-        if (FD_ISSET(hSocket, &fdsetRecv)) {\n-            recv_set.insert(hSocket);\n+            requested = Sock::SEND;\n+        } else if (select_recv) {\n+            requested = Sock::RECV;\n         }\n-    }\n \n-    for (SOCKET hSocket : send_select_set) {\n-        if (FD_ISSET(hSocket, &fdsetSend)) {\n-            send_set.insert(hSocket);\n-        }\n+        events_per_sock.emplace(pnode->m_sock, Sock::Events{requested});\n     }\n \n-    for (SOCKET hSocket : error_select_set) {\n-        if (FD_ISSET(hSocket, &fdsetError)) {\n-            error_set.insert(hSocket);\n-        }\n-    }\n+    return events_per_sock;\n }\n-#endif\n \n void CConnman::SocketHandler()\n {\n     AssertLockNotHeld(m_total_bytes_sent_mutex);\n \n-    std::set<SOCKET> recv_set;\n-    std::set<SOCKET> send_set;\n-    std::set<SOCKET> error_set;\n+    Sock::EventsPerSock events_per_sock;\n \n     {\n         const NodesSnapshot snap{*this, /*shuffle=*/false};\n \n+        const auto timeout = std::chrono::milliseconds(SELECT_TIMEOUT_MILLISECONDS);\n+\n         // Check for the readiness of the already connected sockets and the\n         // listening sockets in one call (\"readiness\" as in poll(2) or\n         // select(2)). If none are ready, wait for a short while and return\n         // empty sets.\n-        SocketEvents(snap.Nodes(), recv_set, send_set, error_set);\n+        events_per_sock = GenerateWaitSockets(snap.Nodes());\n+        if (events_per_sock.empty() || !events_per_sock.begin()->first->WaitMany(timeout, events_per_sock)) {",
      "path": "src/net.cpp",
      "position": 185,
      "original_position": 185,
      "commit_id": "6e68ccbefea6509c61fc4405a391a517c6057bb0",
      "original_commit_id": "6747729cb850914d925f9c4a7a809fff547da746",
      "in_reply_to_id": 892275813,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> This looks slightly circuitous to me.\r\n\r\nIt is!\r\n\r\n> Is there a reason to have Sock::WaitMany be an instance method instead of a static one?\r\n\r\nYes. It is easier to override/mock it this way in tests.\r\n\r\n> It acts on multiple sockets at once, not one socket, after all, does it matter which one you call it on?\r\n\r\nNo it does not matter. Indeed it does not access any of the member variables and acts only on the sockets that are passed as arguments. As such it is more natural for it to be a standalone function or a `static` method of the `Sock` class.\r\n\r\nI chose to have it as `virtual` method of the `Sock` class because this way it is easier for tests to provide a mocked alternative of it - just by providing a mocked `Sock` class, e.g. `FuzzedSock`.\r\n\r\nIf `WaitMany()` is a standalone function it would have to be done in a similar way like `CreateSock()` and `g_dns_lookup()` - global variables that point to \"real\" functions but are re-pointed to mocked functions in tests. So, each test that wants to mock those would have to override `WaitMany()` in addition to `CreateSock()`. Should I try to do it like that?",
      "created_at": "2022-06-09T12:47:01Z",
      "updated_at": "2022-06-09T12:47:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24356#discussion_r893459067",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/893459067"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1459,
      "original_line": 1459,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/893462978",
      "pull_request_review_id": 1001270697,
      "id": 893462978,
      "node_id": "PRRC_kwDOABII5841QSnC",
      "diff_hunk": "@@ -980,28 +980,9 @@ class CConnman\n     /**\n      * Generate a collection of sockets to check for IO readiness.\n      * @param[in] nodes Select from these nodes' sockets.\n-     * @param[out] recv_set Sockets to check for read readiness.\n-     * @param[out] send_set Sockets to check for write readiness.\n-     * @param[out] error_set Sockets to check for errors.\n-     * @return true if at least one socket is to be checked (the returned set is not empty)\n+     * @return sockets to check for readiness\n      */\n-    bool GenerateSelectSet(const std::vector<CNode*>& nodes,\n-                           std::set<SOCKET>& recv_set,\n-                           std::set<SOCKET>& send_set,\n-                           std::set<SOCKET>& error_set);\n-\n-    /**\n-     * Check which sockets are ready for IO.\n-     * @param[in] nodes Select from these nodes' sockets.\n-     * @param[out] recv_set Sockets which are ready for read.\n-     * @param[out] send_set Sockets which are ready for write.\n-     * @param[out] error_set Sockets which have errors.\n-     * This calls `GenerateSelectSet()` to gather a list of sockets to check.\n-     */\n-    void SocketEvents(const std::vector<CNode*>& nodes,\n-                      std::set<SOCKET>& recv_set,\n-                      std::set<SOCKET>& send_set,\n-                      std::set<SOCKET>& error_set);\n+    Sock::EventsPerSock GenerateWaitSockets(const std::vector<CNode*>& nodes);",
      "path": "src/net.h",
      "position": null,
      "original_position": 27,
      "commit_id": "6e68ccbefea6509c61fc4405a391a517c6057bb0",
      "original_commit_id": "6747729cb850914d925f9c4a7a809fff547da746",
      "in_reply_to_id": 892202995,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fairly sure that it needs to be `std::span<const CNode*>` to be convertable from `const std::vector<CNode *>`  Otherwise it's a span of modifiable CNode pointers?",
      "created_at": "2022-06-09T12:50:55Z",
      "updated_at": "2022-06-09T12:51:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24356#discussion_r893462978",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/893462978"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 985,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/893464846",
      "pull_request_review_id": 1001273394,
      "id": 893464846,
      "node_id": "PRRC_kwDOABII5841QTEO",
      "diff_hunk": "@@ -130,26 +131,84 @@ class Sock\n     /**\n      * If passed to `Wait()`, then it will wait for readiness to read from the socket.\n      */\n-    static constexpr Event RECV = 0b01;\n+    static constexpr Event RECV = 0b001;\n \n     /**\n      * If passed to `Wait()`, then it will wait for readiness to send to the socket.\n      */\n-    static constexpr Event SEND = 0b10;\n+    static constexpr Event SEND = 0b010;\n+\n+    /**\n+     * Ignored if passed to `Wait()`, but could be set in the occurred events if an\n+     * exceptional condition has occurred on the socket or if it has been disconnected.\n+     */\n+    static constexpr Event ERR = 0b100;\n \n     /**\n      * Wait for readiness for input (recv) or output (send).\n      * @param[in] timeout Wait this much for at least one of the requested events to occur.\n      * @param[in] requested Wait for those events, bitwise-or of `RECV` and `SEND`.\n-     * @param[out] occurred If not nullptr and `true` is returned, then upon return this\n-     * indicates which of the requested events occurred. A timeout is indicated by return\n-     * value of `true` and `occurred` being set to 0.\n-     * @return true on success and false otherwise\n+     * @param[out] occurred If not nullptr and the function returns `true`, then this\n+     * indicates which of the requested events occurred (`ERR` will be added, even if\n+     * not requested, if an exceptional event occurs on the socket).\n+     * A timeout is indicated by return value of `true` and `occurred` being set to 0.\n+     * @return true on success (or timeout, if `occurred` of 0 is returned), false otherwise\n      */\n     [[nodiscard]] virtual bool Wait(std::chrono::milliseconds timeout,\n                                     Event requested,\n                                     Event* occurred = nullptr) const;\n \n+    /**\n+     * Auxiliary requested/occurred events to wait for in `WaitMany()`.\n+     */\n+    struct Events {\n+        explicit Events(Event req) : requested{req}, occurred{0} {}\n+        Event requested;\n+        Event occurred;\n+    };\n+\n+    struct Hash {\n+        size_t operator()(const std::shared_ptr<const Sock>& s) const",
      "path": "src/util/sock.h",
      "position": 55,
      "original_position": 55,
      "commit_id": "6e68ccbefea6509c61fc4405a391a517c6057bb0",
      "original_commit_id": "6747729cb850914d925f9c4a7a809fff547da746",
      "in_reply_to_id": 892213739,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, LGTM.",
      "created_at": "2022-06-09T12:52:43Z",
      "updated_at": "2022-06-09T12:52:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24356#discussion_r893464846",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/893464846"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 171,
      "original_line": 171,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/893465961",
      "pull_request_review_id": 1001274962,
      "id": 893465961,
      "node_id": "PRRC_kwDOABII5841QTVp",
      "diff_hunk": "@@ -1428,172 +1427,49 @@ bool CConnman::GenerateSelectSet(const std::vector<CNode*>& nodes,\n             continue;\n         }\n \n-        error_set.insert(pnode->m_sock->Get());\n+        Sock::Event requested{0};\n         if (select_send) {\n-            send_set.insert(pnode->m_sock->Get());\n-            continue;\n-        }\n-        if (select_recv) {\n-            recv_set.insert(pnode->m_sock->Get());\n-        }\n-    }\n-\n-    return !recv_set.empty() || !send_set.empty() || !error_set.empty();\n-}\n-\n-#ifdef USE_POLL\n-void CConnman::SocketEvents(const std::vector<CNode*>& nodes,\n-                            std::set<SOCKET>& recv_set,\n-                            std::set<SOCKET>& send_set,\n-                            std::set<SOCKET>& error_set)\n-{\n-    std::set<SOCKET> recv_select_set, send_select_set, error_select_set;\n-    if (!GenerateSelectSet(nodes, recv_select_set, send_select_set, error_select_set)) {\n-        interruptNet.sleep_for(std::chrono::milliseconds(SELECT_TIMEOUT_MILLISECONDS));\n-        return;\n-    }\n-\n-    std::unordered_map<SOCKET, struct pollfd> pollfds;\n-    for (SOCKET socket_id : recv_select_set) {\n-        pollfds[socket_id].fd = socket_id;\n-        pollfds[socket_id].events |= POLLIN;\n-    }\n-\n-    for (SOCKET socket_id : send_select_set) {\n-        pollfds[socket_id].fd = socket_id;\n-        pollfds[socket_id].events |= POLLOUT;\n-    }\n-\n-    for (SOCKET socket_id : error_select_set) {\n-        pollfds[socket_id].fd = socket_id;\n-        // These flags are ignored, but we set them for clarity\n-        pollfds[socket_id].events |= POLLERR|POLLHUP;\n-    }\n-\n-    std::vector<struct pollfd> vpollfds;\n-    vpollfds.reserve(pollfds.size());\n-    for (auto it : pollfds) {\n-        vpollfds.push_back(std::move(it.second));\n-    }\n-\n-    if (poll(vpollfds.data(), vpollfds.size(), SELECT_TIMEOUT_MILLISECONDS) < 0) return;\n-\n-    if (interruptNet) return;\n-\n-    for (struct pollfd pollfd_entry : vpollfds) {\n-        if (pollfd_entry.revents & POLLIN)            recv_set.insert(pollfd_entry.fd);\n-        if (pollfd_entry.revents & POLLOUT)           send_set.insert(pollfd_entry.fd);\n-        if (pollfd_entry.revents & (POLLERR|POLLHUP)) error_set.insert(pollfd_entry.fd);\n-    }\n-}\n-#else\n-void CConnman::SocketEvents(const std::vector<CNode*>& nodes,\n-                            std::set<SOCKET>& recv_set,\n-                            std::set<SOCKET>& send_set,\n-                            std::set<SOCKET>& error_set)\n-{\n-    std::set<SOCKET> recv_select_set, send_select_set, error_select_set;\n-    if (!GenerateSelectSet(nodes, recv_select_set, send_select_set, error_select_set)) {\n-        interruptNet.sleep_for(std::chrono::milliseconds(SELECT_TIMEOUT_MILLISECONDS));\n-        return;\n-    }\n-\n-    //\n-    // Find which sockets have data to receive\n-    //\n-    struct timeval timeout;\n-    timeout.tv_sec  = 0;\n-    timeout.tv_usec = SELECT_TIMEOUT_MILLISECONDS * 1000; // frequency to poll pnode->vSend\n-\n-    fd_set fdsetRecv;\n-    fd_set fdsetSend;\n-    fd_set fdsetError;\n-    FD_ZERO(&fdsetRecv);\n-    FD_ZERO(&fdsetSend);\n-    FD_ZERO(&fdsetError);\n-    SOCKET hSocketMax = 0;\n-\n-    for (SOCKET hSocket : recv_select_set) {\n-        FD_SET(hSocket, &fdsetRecv);\n-        hSocketMax = std::max(hSocketMax, hSocket);\n-    }\n-\n-    for (SOCKET hSocket : send_select_set) {\n-        FD_SET(hSocket, &fdsetSend);\n-        hSocketMax = std::max(hSocketMax, hSocket);\n-    }\n-\n-    for (SOCKET hSocket : error_select_set) {\n-        FD_SET(hSocket, &fdsetError);\n-        hSocketMax = std::max(hSocketMax, hSocket);\n-    }\n-\n-    int nSelect = select(hSocketMax + 1, &fdsetRecv, &fdsetSend, &fdsetError, &timeout);\n-\n-    if (interruptNet)\n-        return;\n-\n-    if (nSelect == SOCKET_ERROR)\n-    {\n-        int nErr = WSAGetLastError();\n-        LogPrintf(\"socket select error %s\\n\", NetworkErrorString(nErr));\n-        for (unsigned int i = 0; i <= hSocketMax; i++)\n-            FD_SET(i, &fdsetRecv);\n-        FD_ZERO(&fdsetSend);\n-        FD_ZERO(&fdsetError);\n-        if (!interruptNet.sleep_for(std::chrono::milliseconds(SELECT_TIMEOUT_MILLISECONDS)))\n-            return;\n-    }\n-\n-    for (SOCKET hSocket : recv_select_set) {\n-        if (FD_ISSET(hSocket, &fdsetRecv)) {\n-            recv_set.insert(hSocket);\n+            requested = Sock::SEND;\n+        } else if (select_recv) {\n+            requested = Sock::RECV;\n         }\n-    }\n \n-    for (SOCKET hSocket : send_select_set) {\n-        if (FD_ISSET(hSocket, &fdsetSend)) {\n-            send_set.insert(hSocket);\n-        }\n+        events_per_sock.emplace(pnode->m_sock, Sock::Events{requested});\n     }\n \n-    for (SOCKET hSocket : error_select_set) {\n-        if (FD_ISSET(hSocket, &fdsetError)) {\n-            error_set.insert(hSocket);\n-        }\n-    }\n+    return events_per_sock;\n }\n-#endif\n \n void CConnman::SocketHandler()\n {\n     AssertLockNotHeld(m_total_bytes_sent_mutex);\n \n-    std::set<SOCKET> recv_set;\n-    std::set<SOCKET> send_set;\n-    std::set<SOCKET> error_set;\n+    Sock::EventsPerSock events_per_sock;\n \n     {\n         const NodesSnapshot snap{*this, /*shuffle=*/false};\n \n+        const auto timeout = std::chrono::milliseconds(SELECT_TIMEOUT_MILLISECONDS);\n+\n         // Check for the readiness of the already connected sockets and the\n         // listening sockets in one call (\"readiness\" as in poll(2) or\n         // select(2)). If none are ready, wait for a short while and return\n         // empty sets.\n-        SocketEvents(snap.Nodes(), recv_set, send_set, error_set);\n+        events_per_sock = GenerateWaitSockets(snap.Nodes());\n+        if (events_per_sock.empty() || !events_per_sock.begin()->first->WaitMany(timeout, events_per_sock)) {",
      "path": "src/net.cpp",
      "position": 185,
      "original_position": 185,
      "commit_id": "6e68ccbefea6509c61fc4405a391a517c6057bb0",
      "original_commit_id": "6747729cb850914d925f9c4a7a809fff547da746",
      "in_reply_to_id": 892275813,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That's a good point. We don't really have a parent object (e.g. some `EventManager` or such) that this could be a method on, and abusing a global function would be quite ugly too.",
      "created_at": "2022-06-09T12:53:47Z",
      "updated_at": "2022-06-09T12:54:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24356#discussion_r893465961",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/893465961"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1459,
      "original_line": 1459,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/893573881",
      "pull_request_review_id": 1001434443,
      "id": 893573881,
      "node_id": "PRRC_kwDOABII5841Qtr5",
      "diff_hunk": "@@ -980,28 +980,9 @@ class CConnman\n     /**\n      * Generate a collection of sockets to check for IO readiness.\n      * @param[in] nodes Select from these nodes' sockets.\n-     * @param[out] recv_set Sockets to check for read readiness.\n-     * @param[out] send_set Sockets to check for write readiness.\n-     * @param[out] error_set Sockets to check for errors.\n-     * @return true if at least one socket is to be checked (the returned set is not empty)\n+     * @return sockets to check for readiness\n      */\n-    bool GenerateSelectSet(const std::vector<CNode*>& nodes,\n-                           std::set<SOCKET>& recv_set,\n-                           std::set<SOCKET>& send_set,\n-                           std::set<SOCKET>& error_set);\n-\n-    /**\n-     * Check which sockets are ready for IO.\n-     * @param[in] nodes Select from these nodes' sockets.\n-     * @param[out] recv_set Sockets which are ready for read.\n-     * @param[out] send_set Sockets which are ready for write.\n-     * @param[out] error_set Sockets which have errors.\n-     * This calls `GenerateSelectSet()` to gather a list of sockets to check.\n-     */\n-    void SocketEvents(const std::vector<CNode*>& nodes,\n-                      std::set<SOCKET>& recv_set,\n-                      std::set<SOCKET>& send_set,\n-                      std::set<SOCKET>& error_set);\n+    Sock::EventsPerSock GenerateWaitSockets(const std::vector<CNode*>& nodes);",
      "path": "src/net.h",
      "position": null,
      "original_position": 27,
      "commit_id": "6e68ccbefea6509c61fc4405a391a517c6057bb0",
      "original_commit_id": "6747729cb850914d925f9c4a7a809fff547da746",
      "in_reply_to_id": 892202995,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Alright, having it `Span<CNode* const>` works (not `Span<const CNode*>`)! The pointer itself has to be constant - should not be able to re-point it to another `CNode` object. And that pointer is pointing to a non-constant `CNode` object, so that we can modify it (or at least lock its member mutex which is equivalent to modifying). Changed!\r\n\r\nPS `std::span` is a `C++20` thing, we are using our own `Span` while on `C++17`.",
      "created_at": "2022-06-09T14:25:40Z",
      "updated_at": "2022-06-09T14:25:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24356#discussion_r893573881",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/893573881"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 985,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/893579020",
      "pull_request_review_id": 1001439399,
      "id": 893579020,
      "node_id": "PRRC_kwDOABII5841Qu8M",
      "diff_hunk": "@@ -1428,172 +1427,49 @@ bool CConnman::GenerateSelectSet(const std::vector<CNode*>& nodes,\n             continue;\n         }\n \n-        error_set.insert(pnode->m_sock->Get());\n+        Sock::Event requested{0};\n         if (select_send) {\n-            send_set.insert(pnode->m_sock->Get());\n-            continue;\n-        }\n-        if (select_recv) {\n-            recv_set.insert(pnode->m_sock->Get());\n-        }\n-    }\n-\n-    return !recv_set.empty() || !send_set.empty() || !error_set.empty();\n-}\n-\n-#ifdef USE_POLL\n-void CConnman::SocketEvents(const std::vector<CNode*>& nodes,\n-                            std::set<SOCKET>& recv_set,\n-                            std::set<SOCKET>& send_set,\n-                            std::set<SOCKET>& error_set)\n-{\n-    std::set<SOCKET> recv_select_set, send_select_set, error_select_set;\n-    if (!GenerateSelectSet(nodes, recv_select_set, send_select_set, error_select_set)) {\n-        interruptNet.sleep_for(std::chrono::milliseconds(SELECT_TIMEOUT_MILLISECONDS));\n-        return;\n-    }\n-\n-    std::unordered_map<SOCKET, struct pollfd> pollfds;\n-    for (SOCKET socket_id : recv_select_set) {\n-        pollfds[socket_id].fd = socket_id;\n-        pollfds[socket_id].events |= POLLIN;\n-    }\n-\n-    for (SOCKET socket_id : send_select_set) {\n-        pollfds[socket_id].fd = socket_id;\n-        pollfds[socket_id].events |= POLLOUT;\n-    }\n-\n-    for (SOCKET socket_id : error_select_set) {\n-        pollfds[socket_id].fd = socket_id;\n-        // These flags are ignored, but we set them for clarity\n-        pollfds[socket_id].events |= POLLERR|POLLHUP;\n-    }\n-\n-    std::vector<struct pollfd> vpollfds;\n-    vpollfds.reserve(pollfds.size());\n-    for (auto it : pollfds) {\n-        vpollfds.push_back(std::move(it.second));\n-    }\n-\n-    if (poll(vpollfds.data(), vpollfds.size(), SELECT_TIMEOUT_MILLISECONDS) < 0) return;\n-\n-    if (interruptNet) return;\n-\n-    for (struct pollfd pollfd_entry : vpollfds) {\n-        if (pollfd_entry.revents & POLLIN)            recv_set.insert(pollfd_entry.fd);\n-        if (pollfd_entry.revents & POLLOUT)           send_set.insert(pollfd_entry.fd);\n-        if (pollfd_entry.revents & (POLLERR|POLLHUP)) error_set.insert(pollfd_entry.fd);\n-    }\n-}\n-#else\n-void CConnman::SocketEvents(const std::vector<CNode*>& nodes,\n-                            std::set<SOCKET>& recv_set,\n-                            std::set<SOCKET>& send_set,\n-                            std::set<SOCKET>& error_set)\n-{\n-    std::set<SOCKET> recv_select_set, send_select_set, error_select_set;\n-    if (!GenerateSelectSet(nodes, recv_select_set, send_select_set, error_select_set)) {\n-        interruptNet.sleep_for(std::chrono::milliseconds(SELECT_TIMEOUT_MILLISECONDS));\n-        return;\n-    }\n-\n-    //\n-    // Find which sockets have data to receive\n-    //\n-    struct timeval timeout;\n-    timeout.tv_sec  = 0;\n-    timeout.tv_usec = SELECT_TIMEOUT_MILLISECONDS * 1000; // frequency to poll pnode->vSend\n-\n-    fd_set fdsetRecv;\n-    fd_set fdsetSend;\n-    fd_set fdsetError;\n-    FD_ZERO(&fdsetRecv);\n-    FD_ZERO(&fdsetSend);\n-    FD_ZERO(&fdsetError);\n-    SOCKET hSocketMax = 0;\n-\n-    for (SOCKET hSocket : recv_select_set) {\n-        FD_SET(hSocket, &fdsetRecv);\n-        hSocketMax = std::max(hSocketMax, hSocket);\n-    }\n-\n-    for (SOCKET hSocket : send_select_set) {\n-        FD_SET(hSocket, &fdsetSend);\n-        hSocketMax = std::max(hSocketMax, hSocket);\n-    }\n-\n-    for (SOCKET hSocket : error_select_set) {\n-        FD_SET(hSocket, &fdsetError);\n-        hSocketMax = std::max(hSocketMax, hSocket);\n-    }\n-\n-    int nSelect = select(hSocketMax + 1, &fdsetRecv, &fdsetSend, &fdsetError, &timeout);\n-\n-    if (interruptNet)\n-        return;\n-\n-    if (nSelect == SOCKET_ERROR)\n-    {\n-        int nErr = WSAGetLastError();\n-        LogPrintf(\"socket select error %s\\n\", NetworkErrorString(nErr));\n-        for (unsigned int i = 0; i <= hSocketMax; i++)\n-            FD_SET(i, &fdsetRecv);\n-        FD_ZERO(&fdsetSend);\n-        FD_ZERO(&fdsetError);\n-        if (!interruptNet.sleep_for(std::chrono::milliseconds(SELECT_TIMEOUT_MILLISECONDS)))\n-            return;\n-    }\n-\n-    for (SOCKET hSocket : recv_select_set) {\n-        if (FD_ISSET(hSocket, &fdsetRecv)) {\n-            recv_set.insert(hSocket);\n+            requested = Sock::SEND;\n+        } else if (select_recv) {\n+            requested = Sock::RECV;\n         }\n-    }\n \n-    for (SOCKET hSocket : send_select_set) {\n-        if (FD_ISSET(hSocket, &fdsetSend)) {\n-            send_set.insert(hSocket);\n-        }\n+        events_per_sock.emplace(pnode->m_sock, Sock::Events{requested});\n     }\n \n-    for (SOCKET hSocket : error_select_set) {\n-        if (FD_ISSET(hSocket, &fdsetError)) {\n-            error_set.insert(hSocket);\n-        }\n-    }\n+    return events_per_sock;\n }\n-#endif\n \n void CConnman::SocketHandler()\n {\n     AssertLockNotHeld(m_total_bytes_sent_mutex);\n \n-    std::set<SOCKET> recv_set;\n-    std::set<SOCKET> send_set;\n-    std::set<SOCKET> error_set;\n+    Sock::EventsPerSock events_per_sock;\n \n     {\n         const NodesSnapshot snap{*this, /*shuffle=*/false};\n \n+        const auto timeout = std::chrono::milliseconds(SELECT_TIMEOUT_MILLISECONDS);\n+\n         // Check for the readiness of the already connected sockets and the\n         // listening sockets in one call (\"readiness\" as in poll(2) or\n         // select(2)). If none are ready, wait for a short while and return\n         // empty sets.\n-        SocketEvents(snap.Nodes(), recv_set, send_set, error_set);\n+        events_per_sock = GenerateWaitSockets(snap.Nodes());\n+        if (events_per_sock.empty() || !events_per_sock.begin()->first->WaitMany(timeout, events_per_sock)) {",
      "path": "src/net.cpp",
      "position": 185,
      "original_position": 185,
      "commit_id": "6e68ccbefea6509c61fc4405a391a517c6057bb0",
      "original_commit_id": "6747729cb850914d925f9c4a7a809fff547da746",
      "in_reply_to_id": 892275813,
      "user": {
        "login": "vasild",
        "id": 266751,
        "node_id": "MDQ6VXNlcjI2Njc1MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vasild",
        "html_url": "https://github.com/vasild",
        "followers_url": "https://api.github.com/users/vasild/followers",
        "following_url": "https://api.github.com/users/vasild/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vasild/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vasild/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
        "organizations_url": "https://api.github.com/users/vasild/orgs",
        "repos_url": "https://api.github.com/users/vasild/repos",
        "events_url": "https://api.github.com/users/vasild/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vasild/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ok, leaving it as is now. I do not have a strong opinion, could change it later and am open to other ideas/suggestions.",
      "created_at": "2022-06-09T14:28:31Z",
      "updated_at": "2022-06-09T14:28:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24356#discussion_r893579020",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/893579020"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1459,
      "original_line": 1459,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/893733340",
      "pull_request_review_id": 1001671702,
      "id": 893733340,
      "node_id": "PRRC_kwDOABII5841RUnc",
      "diff_hunk": "@@ -1428,172 +1427,49 @@ bool CConnman::GenerateSelectSet(const std::vector<CNode*>& nodes,\n             continue;\n         }\n \n-        error_set.insert(pnode->m_sock->Get());\n+        Sock::Event requested{0};\n         if (select_send) {\n-            send_set.insert(pnode->m_sock->Get());\n-            continue;\n-        }\n-        if (select_recv) {\n-            recv_set.insert(pnode->m_sock->Get());\n-        }\n-    }\n-\n-    return !recv_set.empty() || !send_set.empty() || !error_set.empty();\n-}\n-\n-#ifdef USE_POLL\n-void CConnman::SocketEvents(const std::vector<CNode*>& nodes,\n-                            std::set<SOCKET>& recv_set,\n-                            std::set<SOCKET>& send_set,\n-                            std::set<SOCKET>& error_set)\n-{\n-    std::set<SOCKET> recv_select_set, send_select_set, error_select_set;\n-    if (!GenerateSelectSet(nodes, recv_select_set, send_select_set, error_select_set)) {\n-        interruptNet.sleep_for(std::chrono::milliseconds(SELECT_TIMEOUT_MILLISECONDS));\n-        return;\n-    }\n-\n-    std::unordered_map<SOCKET, struct pollfd> pollfds;\n-    for (SOCKET socket_id : recv_select_set) {\n-        pollfds[socket_id].fd = socket_id;\n-        pollfds[socket_id].events |= POLLIN;\n-    }\n-\n-    for (SOCKET socket_id : send_select_set) {\n-        pollfds[socket_id].fd = socket_id;\n-        pollfds[socket_id].events |= POLLOUT;\n-    }\n-\n-    for (SOCKET socket_id : error_select_set) {\n-        pollfds[socket_id].fd = socket_id;\n-        // These flags are ignored, but we set them for clarity\n-        pollfds[socket_id].events |= POLLERR|POLLHUP;\n-    }\n-\n-    std::vector<struct pollfd> vpollfds;\n-    vpollfds.reserve(pollfds.size());\n-    for (auto it : pollfds) {\n-        vpollfds.push_back(std::move(it.second));\n-    }\n-\n-    if (poll(vpollfds.data(), vpollfds.size(), SELECT_TIMEOUT_MILLISECONDS) < 0) return;\n-\n-    if (interruptNet) return;\n-\n-    for (struct pollfd pollfd_entry : vpollfds) {\n-        if (pollfd_entry.revents & POLLIN)            recv_set.insert(pollfd_entry.fd);\n-        if (pollfd_entry.revents & POLLOUT)           send_set.insert(pollfd_entry.fd);\n-        if (pollfd_entry.revents & (POLLERR|POLLHUP)) error_set.insert(pollfd_entry.fd);\n-    }\n-}\n-#else\n-void CConnman::SocketEvents(const std::vector<CNode*>& nodes,\n-                            std::set<SOCKET>& recv_set,\n-                            std::set<SOCKET>& send_set,\n-                            std::set<SOCKET>& error_set)\n-{\n-    std::set<SOCKET> recv_select_set, send_select_set, error_select_set;\n-    if (!GenerateSelectSet(nodes, recv_select_set, send_select_set, error_select_set)) {\n-        interruptNet.sleep_for(std::chrono::milliseconds(SELECT_TIMEOUT_MILLISECONDS));\n-        return;\n-    }\n-\n-    //\n-    // Find which sockets have data to receive\n-    //\n-    struct timeval timeout;\n-    timeout.tv_sec  = 0;\n-    timeout.tv_usec = SELECT_TIMEOUT_MILLISECONDS * 1000; // frequency to poll pnode->vSend\n-\n-    fd_set fdsetRecv;\n-    fd_set fdsetSend;\n-    fd_set fdsetError;\n-    FD_ZERO(&fdsetRecv);\n-    FD_ZERO(&fdsetSend);\n-    FD_ZERO(&fdsetError);\n-    SOCKET hSocketMax = 0;\n-\n-    for (SOCKET hSocket : recv_select_set) {\n-        FD_SET(hSocket, &fdsetRecv);\n-        hSocketMax = std::max(hSocketMax, hSocket);\n-    }\n-\n-    for (SOCKET hSocket : send_select_set) {\n-        FD_SET(hSocket, &fdsetSend);\n-        hSocketMax = std::max(hSocketMax, hSocket);\n-    }\n-\n-    for (SOCKET hSocket : error_select_set) {\n-        FD_SET(hSocket, &fdsetError);\n-        hSocketMax = std::max(hSocketMax, hSocket);\n-    }\n-\n-    int nSelect = select(hSocketMax + 1, &fdsetRecv, &fdsetSend, &fdsetError, &timeout);\n-\n-    if (interruptNet)\n-        return;\n-\n-    if (nSelect == SOCKET_ERROR)\n-    {\n-        int nErr = WSAGetLastError();\n-        LogPrintf(\"socket select error %s\\n\", NetworkErrorString(nErr));\n-        for (unsigned int i = 0; i <= hSocketMax; i++)\n-            FD_SET(i, &fdsetRecv);\n-        FD_ZERO(&fdsetSend);\n-        FD_ZERO(&fdsetError);\n-        if (!interruptNet.sleep_for(std::chrono::milliseconds(SELECT_TIMEOUT_MILLISECONDS)))\n-            return;\n-    }\n-\n-    for (SOCKET hSocket : recv_select_set) {\n-        if (FD_ISSET(hSocket, &fdsetRecv)) {\n-            recv_set.insert(hSocket);\n+            requested = Sock::SEND;\n+        } else if (select_recv) {\n+            requested = Sock::RECV;\n         }\n-    }\n \n-    for (SOCKET hSocket : send_select_set) {\n-        if (FD_ISSET(hSocket, &fdsetSend)) {\n-            send_set.insert(hSocket);\n-        }\n+        events_per_sock.emplace(pnode->m_sock, Sock::Events{requested});\n     }\n \n-    for (SOCKET hSocket : error_select_set) {\n-        if (FD_ISSET(hSocket, &fdsetError)) {\n-            error_set.insert(hSocket);\n-        }\n-    }\n+    return events_per_sock;\n }\n-#endif\n \n void CConnman::SocketHandler()\n {\n     AssertLockNotHeld(m_total_bytes_sent_mutex);\n \n-    std::set<SOCKET> recv_set;\n-    std::set<SOCKET> send_set;\n-    std::set<SOCKET> error_set;\n+    Sock::EventsPerSock events_per_sock;\n \n     {\n         const NodesSnapshot snap{*this, /*shuffle=*/false};\n \n+        const auto timeout = std::chrono::milliseconds(SELECT_TIMEOUT_MILLISECONDS);\n+\n         // Check for the readiness of the already connected sockets and the\n         // listening sockets in one call (\"readiness\" as in poll(2) or\n         // select(2)). If none are ready, wait for a short while and return\n         // empty sets.\n-        SocketEvents(snap.Nodes(), recv_set, send_set, error_set);\n+        events_per_sock = GenerateWaitSockets(snap.Nodes());\n+        if (events_per_sock.empty() || !events_per_sock.begin()->first->WaitMany(timeout, events_per_sock)) {",
      "path": "src/net.cpp",
      "position": 185,
      "original_position": 185,
      "commit_id": "6e68ccbefea6509c61fc4405a391a517c6057bb0",
      "original_commit_id": "6747729cb850914d925f9c4a7a809fff547da746",
      "in_reply_to_id": 892275813,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Agree",
      "created_at": "2022-06-09T16:40:22Z",
      "updated_at": "2022-06-09T16:40:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24356#discussion_r893733340",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/893733340"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1459,
      "original_line": 1459,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/893733584",
      "pull_request_review_id": 1001672109,
      "id": 893733584,
      "node_id": "PRRC_kwDOABII5841RUrQ",
      "diff_hunk": "@@ -980,28 +980,9 @@ class CConnman\n     /**\n      * Generate a collection of sockets to check for IO readiness.\n      * @param[in] nodes Select from these nodes' sockets.\n-     * @param[out] recv_set Sockets to check for read readiness.\n-     * @param[out] send_set Sockets to check for write readiness.\n-     * @param[out] error_set Sockets to check for errors.\n-     * @return true if at least one socket is to be checked (the returned set is not empty)\n+     * @return sockets to check for readiness\n      */\n-    bool GenerateSelectSet(const std::vector<CNode*>& nodes,\n-                           std::set<SOCKET>& recv_set,\n-                           std::set<SOCKET>& send_set,\n-                           std::set<SOCKET>& error_set);\n-\n-    /**\n-     * Check which sockets are ready for IO.\n-     * @param[in] nodes Select from these nodes' sockets.\n-     * @param[out] recv_set Sockets which are ready for read.\n-     * @param[out] send_set Sockets which are ready for write.\n-     * @param[out] error_set Sockets which have errors.\n-     * This calls `GenerateSelectSet()` to gather a list of sockets to check.\n-     */\n-    void SocketEvents(const std::vector<CNode*>& nodes,\n-                      std::set<SOCKET>& recv_set,\n-                      std::set<SOCKET>& send_set,\n-                      std::set<SOCKET>& error_set);\n+    Sock::EventsPerSock GenerateWaitSockets(const std::vector<CNode*>& nodes);",
      "path": "src/net.h",
      "position": null,
      "original_position": 27,
      "commit_id": "6e68ccbefea6509c61fc4405a391a517c6057bb0",
      "original_commit_id": "6747729cb850914d925f9c4a7a809fff547da746",
      "in_reply_to_id": 892202995,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Great!\r\n\r\n> PS std::span is a C++20 thing, we are using our own Span while on C++17.\r\n\r\nEh, yes, true.",
      "created_at": "2022-06-09T16:40:35Z",
      "updated_at": "2022-06-09T16:40:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/24356#discussion_r893733584",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/893733584"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/24356"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 985,
      "side": "RIGHT"
    }
  ]
}