{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771",
    "id": 154857220,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MTU0ODU3MjIw",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/11771",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/11771.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/11771.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11771",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11771/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/95e2e9af124595aae4801fc9813ee1c294d404cd",
    "number": 11771,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": " [tests] Change invalidtxrequest to use BitcoinTestFramework",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Next step in #10603\r\n\r\n- first commit changes log level for an internal log from INFO to DEBUG. (Not really related, but I started finding the INFO level logging annoying when debuging test failures)\r\n- second commit introduces a `P2PStub` class - a subclass of `NodeConnCB` which has its own block and tx store and responds appropriately to getdata requests. Not all the functionality is used in `invalidtxrequest.py`, but will be used in `invalidblockrequest.py` and `p2p-fullblocktest` when those are changed to use `BitcoinTestFramework`\r\n- third commit tidies up `invalidtxrequest.py`\r\n- fourth commit removes usage of `ComparisonTestFramework`",
    "labels": [
      {
        "id": 62963516,
        "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
        "name": "Tests",
        "color": "d4c5f9",
        "default": false
      }
    ],
    "active_lock_reason": "resolved",
    "created_at": "2017-11-27T16:35:17Z",
    "updated_at": "2021-09-08T11:52:42Z",
    "closed_at": "2018-02-13T09:32:23Z",
    "mergeable_state": "unknown",
    "merged_at": "2018-02-13T09:32:23Z",
    "merge_commit_sha": "95e2e9af124595aae4801fc9813ee1c294d404cd",
    "assignee": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "jnewbery:refactor_invalidtxrequest",
      "ref": "refactor_invalidtxrequest",
      "sha": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 68248485,
        "node_id": "MDEwOlJlcG9zaXRvcnk2ODI0ODQ4NQ==",
        "name": "bitcoin",
        "full_name": "jnewbery/bitcoin",
        "owner": {
          "login": "jnewbery",
          "id": 1063656,
          "node_id": "MDQ6VXNlcjEwNjM2NTY=",
          "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/jnewbery",
          "html_url": "https://github.com/jnewbery",
          "followers_url": "https://api.github.com/users/jnewbery/followers",
          "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
          "organizations_url": "https://api.github.com/users/jnewbery/orgs",
          "repos_url": "https://api.github.com/users/jnewbery/repos",
          "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/jnewbery/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/jnewbery/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/jnewbery/bitcoin",
        "archive_url": "https://api.github.com/repos/jnewbery/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/jnewbery/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/jnewbery/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/jnewbery/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/jnewbery/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/jnewbery/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/jnewbery/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/jnewbery/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/jnewbery/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/jnewbery/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/jnewbery/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/jnewbery/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/jnewbery/bitcoin/events",
        "forks_url": "https://api.github.com/repos/jnewbery/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/jnewbery/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/jnewbery/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/jnewbery/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/jnewbery/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/jnewbery/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/jnewbery/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/jnewbery/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/jnewbery/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/jnewbery/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/jnewbery/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/jnewbery/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/jnewbery/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/jnewbery/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/jnewbery/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/jnewbery/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:jnewbery/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/jnewbery/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/jnewbery/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/jnewbery/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/jnewbery/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/jnewbery/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/jnewbery/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/jnewbery/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/jnewbery/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/jnewbery/bitcoin/hooks",
        "svn_url": "https://github.com/jnewbery/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 1,
        "stargazers_count": 4,
        "watchers_count": 4,
        "size": 219109,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-04-21T11:07:55Z",
        "created_at": "2016-09-14T22:29:05Z",
        "updated_at": "2021-07-06T16:23:27Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "9cb2309050880c2887b4b5f7a7231e4fc6dc3f47",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69817,
        "watchers_count": 69817,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T22:42:00Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-07T00:11:53Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 182,
    "deletions": 48,
    "changed_files": 3,
    "commits": 4,
    "review_comments": 69,
    "comments": 19
  },
  "events": [
    {
      "event": "labeled",
      "id": 1360204051,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDEzNjAyMDQwNTE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1360204051",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-11-27T21:52:34Z",
      "label": {
        "name": "Tests",
        "color": "d4c5f9"
      }
    },
    {
      "event": "commented",
      "id": 348052948,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM0ODA1Mjk0OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/348052948",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-11-30T01:26:06Z",
      "updated_at": "2017-11-30T01:26:06Z",
      "author_association": "MEMBER",
      "body": "Needs a rebase.",
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#issuecomment-348052948",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11771"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1364872406,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTM2NDg3MjQwNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1364872406",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-11-30T03:33:20Z"
    },
    {
      "event": "commented",
      "id": 348072720,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM0ODA3MjcyMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/348072720",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-11-30T03:33:40Z",
      "updated_at": "2017-11-30T03:33:40Z",
      "author_association": "MEMBER",
      "body": "rebased",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#issuecomment-348072720",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11771"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1368927205,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTM2ODkyNzIwNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1368927205",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-12-02T16:23:03Z"
    },
    {
      "event": "commented",
      "id": 348702632,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM0ODcwMjYzMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/348702632",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-12-02T16:23:33Z",
      "updated_at": "2017-12-02T16:23:33Z",
      "author_association": "MEMBER",
      "body": "Rebased and made slight improvements to the P2PStub class.",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#issuecomment-348702632",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11771"
    },
    {
      "event": "reviewed",
      "id": 80684762,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODA2ODQ3NjI=",
      "url": null,
      "actor": null,
      "commit_id": "f4c080ff63ae819d794fb11634af00397714f844",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "utACK https://github.com/bitcoin/bitcoin/pull/11771/commits/8c3615f7fb932aba99b5b456119812c95fd8a605",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#pullrequestreview-80684762",
      "submitted_at": "2017-12-02T20:58:11Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1369043607,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTM2OTA0MzYwNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1369043607",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-12-02T22:19:31Z"
    },
    {
      "event": "commented",
      "id": 348724367,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM0ODcyNDM2Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/348724367",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-12-02T22:20:14Z",
      "updated_at": "2017-12-02T22:20:14Z",
      "author_association": "MEMBER",
      "body": "Thanks for the review @jamesob . I've removed the errant comment, and improved comments for the P2PStub methods.",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#issuecomment-348724367",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11771"
    },
    {
      "event": "mentioned",
      "id": 1369043840,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTM2OTA0Mzg0MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1369043840",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-12-02T22:20:14Z"
    },
    {
      "event": "subscribed",
      "id": 1369043841,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDEzNjkwNDM4NDE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1369043841",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-12-02T22:20:14Z"
    },
    {
      "event": "commented",
      "id": 348741681,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM0ODc0MTY4MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/348741681",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-12-03T05:30:09Z",
      "updated_at": "2017-12-03T05:30:09Z",
      "author_association": "MEMBER",
      "body": "utACK https://github.com/bitcoin/bitcoin/pull/11771/commits/e72c94cda663102c7e188b80e9cdb76026c0b6a7",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#issuecomment-348741681",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11771"
    },
    {
      "event": "commented",
      "id": 348741769,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM0ODc0MTc2OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/348741769",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-12-03T05:33:13Z",
      "updated_at": "2017-12-03T05:33:13Z",
      "author_association": "MEMBER",
      "body": "...modulo the legitimate-looking test failure: \r\n```\r\n  File \"/home/travis/build/bitcoin/bitcoin/build/bitcoin-x86_64-unknown-linux-gnu/test/functional/invalidtxrequest.py\", line 50, in run_test\r\n    node.p2p.send_txs_and_test([tx1], node, False, 16, b'mandatory-script-verify-flag-failed (Invalid OP_IF construction)')\r\n  File \"/home/travis/build/bitcoin/bitcoin/build/bitcoin-x86_64-unknown-linux-gnu/test/functional/test_framework/mininode.py\", line 540, in send_txs_and_test\r\n    assert_equal(reject_code, self.reject_code_received)\r\n  File \"/home/travis/build/bitcoin/bitcoin/build/bitcoin-x86_64-unknown-linux-gnu/test/functional/test_framework/util.py\", line 38, in assert_equal\r\n    raise AssertionError(\"not(%s)\" % \" == \".join(str(arg) for arg in (thing1, thing2) + args))\r\nAssertionError: not(16 == None)\r\n```",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#issuecomment-348741769",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11771"
    },
    {
      "event": "commented",
      "id": 348985760,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM0ODk4NTc2MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/348985760",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-12-04T14:55:58Z",
      "updated_at": "2017-12-04T14:55:58Z",
      "author_association": "MEMBER",
      "body": "Great. Travis caught a race condition. I wasn't able to reproduce it locally.\r\n\r\nShould be fixed in the final commit. @jamesob - let me know when you've taken a look and I'll squash into the *Add P2PStub class* commit.",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#issuecomment-348985760",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11771"
    },
    {
      "event": "mentioned",
      "id": 1370627057,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTM3MDYyNzA1Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1370627057",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-12-04T14:55:58Z"
    },
    {
      "event": "subscribed",
      "id": 1370627059,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDEzNzA2MjcwNTk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1370627059",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-12-04T14:55:58Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1381528012,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTM4MTUyODAxMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1381528012",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-12-11T14:25:34Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1381541700,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTM4MTU0MTcwMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1381541700",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-12-11T14:32:00Z"
    },
    {
      "event": "commented",
      "id": 350740471,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM1MDc0MDQ3MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/350740471",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-12-11T14:32:07Z",
      "updated_at": "2017-12-11T14:32:07Z",
      "author_association": "MEMBER",
      "body": "squashed fix and rebased",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#issuecomment-350740471",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11771"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1386215791,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTM4NjIxNTc5MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1386215791",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-12-13T18:30:09Z"
    },
    {
      "event": "reviewed",
      "id": 83554929,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODM1NTQ5Mjk=",
      "url": null,
      "actor": null,
      "commit_id": "3d2209f3359c241fc06ef37d4bc8bcf1c333f1d4",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK 0d5cfa3074\r\n\r\nSome questions inline",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#pullrequestreview-83554929",
      "submitted_at": "2017-12-14T16:44:04Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
    },
    {
      "event": "commented",
      "id": 351801429,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTgwMTQyOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/351801429",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-12-14T18:49:27Z",
      "updated_at": "2017-12-14T18:49:27Z",
      "author_association": "MEMBER",
      "body": "Fixed @MarcoFalke's comments, along with a few variable renamings. I've pushed as a fixup commit. Will squash once Marco confirms he's happy with the fixup.",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#issuecomment-351801429",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11771"
    },
    {
      "event": "mentioned",
      "id": 1388292221,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTM4ODI5MjIyMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1388292221",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-12-14T18:49:27Z"
    },
    {
      "event": "subscribed",
      "id": 1388292222,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDEzODgyOTIyMjI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1388292222",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-12-14T18:49:27Z"
    },
    {
      "event": "commented",
      "id": 351864741,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTg2NDc0MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/351864741",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-12-14T23:13:00Z",
      "updated_at": "2017-12-14T23:13:00Z",
      "author_association": "MEMBER",
      "body": "fixups look good, though a travis failure:\r\n\r\n```\r\n./test/functional/test_framework/mininode.py:26:1: F401 'test_framework.util.assert_equal' imported but unused\r\n\r\n^---- failure generated from contrib/devtools/lint-python.sh\r\n```\r\n\r\nFeel free to squash. I am going to review from scratch anyway.\r\n",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#issuecomment-351864741",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11771"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1390442726,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTM5MDQ0MjcyNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1390442726",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-12-15T22:34:58Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1390442754,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTM5MDQ0Mjc1NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1390442754",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-12-15T22:35:00Z"
    },
    {
      "event": "commented",
      "id": 352129111,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM1MjEyOTExMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/352129111",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-12-15T22:35:49Z",
      "updated_at": "2017-12-15T22:35:49Z",
      "author_association": "MEMBER",
      "body": "squashed && rebased",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#issuecomment-352129111",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11771"
    },
    {
      "event": "reviewed",
      "id": 84555442,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODQ1NTU0NDI=",
      "url": null,
      "actor": null,
      "commit_id": "3d2209f3359c241fc06ef37d4bc8bcf1c333f1d4",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "utACK 1c5aa93034a7ad213727ffdfb1bb71eab20f1f80. I left some suggestions, but they are all minor, and you should feel free to ignore them. Overall, this seems like a very nice addition to the test framework.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#pullrequestreview-84555442",
      "submitted_at": "2017-12-19T20:08:14Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
    },
    {
      "event": "reviewed",
      "id": 84882686,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODQ4ODI2ODY=",
      "url": null,
      "actor": null,
      "commit_id": "1c5aa93034a7ad213727ffdfb1bb71eab20f1f80",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#pullrequestreview-84882686",
      "submitted_at": "2017-12-20T20:09:20Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
    },
    {
      "event": "mentioned",
      "id": 1431220899,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTQzMTIyMDg5OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1431220899",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-01-18T20:32:09Z"
    },
    {
      "event": "subscribed",
      "id": 1431220900,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE0MzEyMjA5MDA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1431220900",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-01-18T20:32:09Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1431276137,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTQzMTI3NjEzNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1431276137",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-01-18T21:04:44Z"
    },
    {
      "event": "commented",
      "id": 358781287,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM1ODc4MTI4Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/358781287",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-01-18T21:05:20Z",
      "updated_at": "2018-01-18T21:05:20Z",
      "author_association": "MEMBER",
      "body": "Thanks for the review @ryanofsky - I think I've addressed all your comments",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#issuecomment-358781287",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11771"
    },
    {
      "event": "mentioned",
      "id": 1431277118,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTQzMTI3NzExOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1431277118",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-01-18T21:05:20Z"
    },
    {
      "event": "subscribed",
      "id": 1431277119,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE0MzEyNzcxMTk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1431277119",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-01-18T21:05:20Z"
    },
    {
      "event": "reviewed",
      "id": 90972937,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3OTA5NzI5Mzc=",
      "url": null,
      "actor": null,
      "commit_id": "b987a946aeb8983ef176f41cabbcd55290e3c1f5",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "utACK 348d4e37cffc7098ff3c2b8128396889e41ec941, looks great! There were too many changes to mention since previous review (mostly in P2PDataStore), all based on previous review comments.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#pullrequestreview-90972937",
      "submitted_at": "2018-01-23T20:50:58Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1438240897,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTQzODI0MDg5Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1438240897",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-01-23T21:09:43Z"
    },
    {
      "event": "reviewed",
      "id": 90986333,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3OTA5ODYzMzM=",
      "url": null,
      "actor": null,
      "commit_id": "c9772a83644e3c212d87dd0866384533054923a0",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "utACK c9772a83644e3c212d87dd0866384533054923a0. Only change is suggested typo fix.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#pullrequestreview-90986333",
      "submitted_at": "2018-01-23T21:23:59Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
    },
    {
      "event": "reviewed",
      "id": 91237918,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3OTEyMzc5MTg=",
      "url": null,
      "actor": null,
      "commit_id": "c9772a83644e3c212d87dd0866384533054923a0",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#pullrequestreview-91237918",
      "submitted_at": "2018-01-24T16:24:33Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1439897449,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTQzOTg5NzQ0OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1439897449",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-01-24T16:37:39Z"
    },
    {
      "event": "reviewed",
      "id": 91360476,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3OTEzNjA0NzY=",
      "url": null,
      "actor": null,
      "commit_id": "949074892393a683f4f56e1a162ec1397563e153",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#pullrequestreview-91360476",
      "submitted_at": "2018-01-24T22:52:12Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
    },
    {
      "event": "reviewed",
      "id": 91360713,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3OTEzNjA3MTM=",
      "url": null,
      "actor": null,
      "commit_id": "949074892393a683f4f56e1a162ec1397563e153",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#pullrequestreview-91360713",
      "submitted_at": "2018-01-24T22:53:08Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYzA0NmY2NmE3ZjNiYjhkNjE1OTk4ZWJjZTM4NDY4ZDkwYWQ4Njgx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cc046f66a7f3bb8d615998ebce38468d90ad8681",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/cc046f66a7f3bb8d615998ebce38468d90ad8681",
      "tree": {
        "sha": "497901cb2be54d90aa404a281000f301a40b0af6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/497901cb2be54d90aa404a281000f301a40b0af6"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6378e5c51414b1f084fe01d31003fe8fd66b9501",
          "sha": "6378e5c51414b1f084fe01d31003fe8fd66b9501",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/6378e5c51414b1f084fe01d31003fe8fd66b9501"
        }
      ],
      "message": "[tests] Reduce NodeConn connection logging from info to debug",
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-01-29T14:48:17Z"
      },
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-11-22T16:47:37Z"
      },
      "sha": "cc046f66a7f3bb8d615998ebce38468d90ad8681"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1446472770,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTQ0NjQ3Mjc3MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1446472770",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-01-29T14:53:12Z"
    },
    {
      "event": "commented",
      "id": 361269654,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM2MTI2OTY1NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/361269654",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-01-29T14:53:43Z",
      "updated_at": "2018-01-29T14:53:43Z",
      "author_association": "MEMBER",
      "body": "rebased to conform with new naming convention.",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#issuecomment-361269654",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11771"
    },
    {
      "event": "reviewed",
      "id": 92382585,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3OTIzODI1ODU=",
      "url": null,
      "actor": null,
      "commit_id": "e4a1b3bf7ef90afbd5cd5e957f36f22631fd5fb7",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "utACK https://github.com/bitcoin/bitcoin/pull/11771/commits/5921f2577287e5e0b05f900cf27f3aa537116563\r\n\r\nNice improvement. Feel free to ignore the few comments.",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#pullrequestreview-92382585",
      "submitted_at": "2018-01-29T22:49:06Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
    },
    {
      "event": "commented",
      "id": 361424329,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM2MTQyNDMyOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/361424329",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-01-29T23:34:53Z",
      "updated_at": "2018-01-29T23:34:53Z",
      "author_association": "MEMBER",
      "body": "Thanks for the review @jamesob . I've added a fixup commit that adds logging as suggested. If you're happy with that I'll squash it into the P2PDataStore commit.",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#issuecomment-361424329",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11771"
    },
    {
      "event": "mentioned",
      "id": 1447487407,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTQ0NzQ4NzQwNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1447487407",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-01-29T23:34:53Z"
    },
    {
      "event": "subscribed",
      "id": 1447487408,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE0NDc0ODc0MDg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1447487408",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-01-29T23:34:53Z"
    },
    {
      "event": "reviewed",
      "id": 92564943,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3OTI1NjQ5NDM=",
      "url": null,
      "actor": null,
      "commit_id": "2ca114cbf50d1161a213c870691d50148b480b9e",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "utACK https://github.com/bitcoin/bitcoin/pull/11771/commits/2ca114cbf50d1161a213c870691d50148b480b9e",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#pullrequestreview-92564943",
      "submitted_at": "2018-01-30T13:53:49Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMzJjZjlmNjIyODViNWNkMThhNTA2NGFlZTkxZjA4MDJmMGY4N2E4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c32cf9f62285b5cd18a5064aee91f0802f0f87a8",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c32cf9f62285b5cd18a5064aee91f0802f0f87a8",
      "tree": {
        "sha": "41e9fc0adb4a01c4deb9bf44d95885763f65c04f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/41e9fc0adb4a01c4deb9bf44d95885763f65c04f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cc046f66a7f3bb8d615998ebce38468d90ad8681",
          "sha": "cc046f66a7f3bb8d615998ebce38468d90ad8681",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/cc046f66a7f3bb8d615998ebce38468d90ad8681"
        }
      ],
      "message": "[tests] Add P2PDataStore class\n\nP2PDataStore subclasses NodeConnCB. This class keeps a store\nof txs and blocks and responds to getdata requests from\nthe node-under-test.",
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-01-30T14:31:31Z"
      },
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-11-22T16:45:14Z"
      },
      "sha": "c32cf9f62285b5cd18a5064aee91f0802f0f87a8"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNTlkMDY3NTcyNDliMzRiMzY2ODhlYWVmMzFlNzYyNmE0NmJkNTJh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/359d06757249b34b36688eaef31e7626a46bd52a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/359d06757249b34b36688eaef31e7626a46bd52a",
      "tree": {
        "sha": "fcdce74b27b036e2a6be66ea036cadf16808e360",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fcdce74b27b036e2a6be66ea036cadf16808e360"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c32cf9f62285b5cd18a5064aee91f0802f0f87a8",
          "sha": "c32cf9f62285b5cd18a5064aee91f0802f0f87a8",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c32cf9f62285b5cd18a5064aee91f0802f0f87a8"
        }
      ],
      "message": "[tests] Fix flake8 warnings in invalidtxrequest",
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-01-30T14:31:31Z"
      },
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-11-22T17:31:58Z"
      },
      "sha": "359d06757249b34b36688eaef31e7626a46bd52a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NWUyZTlhZjEyNDU5NWFhZTQ4MDFmYzk4MTNlZTFjMjk0ZDQwNGNk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/95e2e9af124595aae4801fc9813ee1c294d404cd",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/95e2e9af124595aae4801fc9813ee1c294d404cd",
      "tree": {
        "sha": "3454e73a7c31e30c1afc4e18aed4d723afa58299",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3454e73a7c31e30c1afc4e18aed4d723afa58299"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/359d06757249b34b36688eaef31e7626a46bd52a",
          "sha": "359d06757249b34b36688eaef31e7626a46bd52a",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/359d06757249b34b36688eaef31e7626a46bd52a"
        }
      ],
      "message": "[tests] Change invalidtxrequest to use BitcoinTestFramework",
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-01-30T14:31:31Z"
      },
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-04-10T13:01:22Z"
      },
      "sha": "95e2e9af124595aae4801fc9813ee1c294d404cd"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1448660454,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTQ0ODY2MDQ1NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1448660454",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-01-30T14:31:37Z"
    },
    {
      "event": "commented",
      "id": 361610392,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM2MTYxMDM5Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/361610392",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-01-30T14:31:47Z",
      "updated_at": "2018-01-30T14:31:47Z",
      "author_association": "MEMBER",
      "body": "thanks. Fixup commit squashed",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#issuecomment-361610392",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11771"
    },
    {
      "event": "commented",
      "id": 361737826,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM2MTczNzgyNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/361737826",
      "actor": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-01-30T21:20:07Z",
      "updated_at": "2018-01-30T21:20:07Z",
      "author_association": "MEMBER",
      "body": "utACK https://github.com/bitcoin/bitcoin/pull/11771/commits/359d06757249b34b36688eaef31e7626a46bd52a",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#issuecomment-361737826",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11771"
    },
    {
      "event": "comment_deleted",
      "id": 1449558885,
      "node_id": "MDE5OkNvbW1lbnREZWxldGVkRXZlbnQxNDQ5NTU4ODg1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1449558885",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-01-30T21:54:05Z"
    },
    {
      "event": "comment_deleted",
      "id": 1449559061,
      "node_id": "MDE5OkNvbW1lbnREZWxldGVkRXZlbnQxNDQ5NTU5MDYx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1449559061",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-01-30T21:54:10Z"
    },
    {
      "event": "comment_deleted",
      "id": 1449559336,
      "node_id": "MDE5OkNvbW1lbnREZWxldGVkRXZlbnQxNDQ5NTU5MzM2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1449559336",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-01-30T21:54:17Z"
    },
    {
      "event": "comment_deleted",
      "id": 1449670717,
      "node_id": "MDE5OkNvbW1lbnREZWxldGVkRXZlbnQxNDQ5NjcwNzE3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1449670717",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-01-30T23:02:47Z"
    },
    {
      "event": "reviewed",
      "id": 95969920,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3OTU5Njk5MjA=",
      "url": null,
      "actor": null,
      "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "conscott",
        "id": 14220652,
        "node_id": "MDQ6VXNlcjE0MjIwNjUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/14220652?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/conscott",
        "html_url": "https://github.com/conscott",
        "followers_url": "https://api.github.com/users/conscott/followers",
        "following_url": "https://api.github.com/users/conscott/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/conscott/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/conscott/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/conscott/subscriptions",
        "organizations_url": "https://api.github.com/users/conscott/orgs",
        "repos_url": "https://api.github.com/users/conscott/repos",
        "events_url": "https://api.github.com/users/conscott/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/conscott/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#pullrequestreview-95969920",
      "submitted_at": "2018-02-12T22:44:32Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
    },
    {
      "event": "reviewed",
      "id": 95970049,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3OTU5NzAwNDk=",
      "url": null,
      "actor": null,
      "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "conscott",
        "id": 14220652,
        "node_id": "MDQ6VXNlcjE0MjIwNjUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/14220652?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/conscott",
        "html_url": "https://github.com/conscott",
        "followers_url": "https://api.github.com/users/conscott/followers",
        "following_url": "https://api.github.com/users/conscott/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/conscott/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/conscott/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/conscott/subscriptions",
        "organizations_url": "https://api.github.com/users/conscott/orgs",
        "repos_url": "https://api.github.com/users/conscott/repos",
        "events_url": "https://api.github.com/users/conscott/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/conscott/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#pullrequestreview-95970049",
      "submitted_at": "2018-02-12T22:45:00Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
    },
    {
      "event": "reviewed",
      "id": 95979452,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3OTU5Nzk0NTI=",
      "url": null,
      "actor": null,
      "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "conscott",
        "id": 14220652,
        "node_id": "MDQ6VXNlcjE0MjIwNjUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/14220652?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/conscott",
        "html_url": "https://github.com/conscott",
        "followers_url": "https://api.github.com/users/conscott/followers",
        "following_url": "https://api.github.com/users/conscott/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/conscott/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/conscott/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/conscott/subscriptions",
        "organizations_url": "https://api.github.com/users/conscott/orgs",
        "repos_url": "https://api.github.com/users/conscott/repos",
        "events_url": "https://api.github.com/users/conscott/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/conscott/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#pullrequestreview-95979452",
      "submitted_at": "2018-02-12T23:24:48Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
    },
    {
      "event": "assigned",
      "id": 1471225244,
      "node_id": "MDEzOkFzc2lnbmVkRXZlbnQxNDcxMjI1MjQ0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1471225244",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-02-13T09:29:33Z",
      "assignee": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "commented",
      "id": 365204517,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM2NTIwNDUxNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/365204517",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-02-13T09:30:20Z",
      "updated_at": "2018-02-13T09:30:20Z",
      "author_association": "MEMBER",
      "body": "Seems to be ready for merge. If you don't mind @conscott I'll leave your suggestions for a future PR, this is only the first in a series.",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#issuecomment-365204517",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11771"
    },
    {
      "event": "mentioned",
      "id": 1471226657,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTQ3MTIyNjY1Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1471226657",
      "actor": {
        "login": "conscott",
        "id": 14220652,
        "node_id": "MDQ6VXNlcjE0MjIwNjUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/14220652?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/conscott",
        "html_url": "https://github.com/conscott",
        "followers_url": "https://api.github.com/users/conscott/followers",
        "following_url": "https://api.github.com/users/conscott/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/conscott/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/conscott/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/conscott/subscriptions",
        "organizations_url": "https://api.github.com/users/conscott/orgs",
        "repos_url": "https://api.github.com/users/conscott/repos",
        "events_url": "https://api.github.com/users/conscott/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/conscott/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-02-13T09:30:20Z"
    },
    {
      "event": "subscribed",
      "id": 1471226658,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE0NzEyMjY2NTg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1471226658",
      "actor": {
        "login": "conscott",
        "id": 14220652,
        "node_id": "MDQ6VXNlcjE0MjIwNjUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/14220652?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/conscott",
        "html_url": "https://github.com/conscott",
        "followers_url": "https://api.github.com/users/conscott/followers",
        "following_url": "https://api.github.com/users/conscott/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/conscott/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/conscott/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/conscott/subscriptions",
        "organizations_url": "https://api.github.com/users/conscott/orgs",
        "repos_url": "https://api.github.com/users/conscott/repos",
        "events_url": "https://api.github.com/users/conscott/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/conscott/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-02-13T09:30:20Z"
    },
    {
      "event": "merged",
      "id": 1471230640,
      "node_id": "MDExOk1lcmdlZEV2ZW50MTQ3MTIzMDY0MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1471230640",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95e2e9af124595aae4801fc9813ee1c294d404cd",
      "created_at": "2018-02-13T09:32:23Z"
    },
    {
      "event": "closed",
      "id": 1471230641,
      "node_id": "MDExOkNsb3NlZEV2ZW50MTQ3MTIzMDY0MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1471230641",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-02-13T09:32:23Z"
    },
    {
      "event": "referenced",
      "id": 1471231360,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDE0NzEyMzEzNjA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1471231360",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "2dbc4a4740cd2b9340e6a2f3ae6b13de40b5ee0d",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2dbc4a4740cd2b9340e6a2f3ae6b13de40b5ee0d",
      "created_at": "2018-02-13T09:32:47Z"
    },
    {
      "event": "commented",
      "id": 365273318,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM2NTI3MzMxOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/365273318",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-02-13T13:55:37Z",
      "updated_at": "2018-02-13T13:55:37Z",
      "author_association": "MEMBER",
      "body": "Thanks for the review @conscott . I'll address your points in #11772.",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#issuecomment-365273318",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11771"
    },
    {
      "event": "mentioned",
      "id": 1471675777,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTQ3MTY3NTc3Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1471675777",
      "actor": {
        "login": "conscott",
        "id": 14220652,
        "node_id": "MDQ6VXNlcjE0MjIwNjUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/14220652?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/conscott",
        "html_url": "https://github.com/conscott",
        "followers_url": "https://api.github.com/users/conscott/followers",
        "following_url": "https://api.github.com/users/conscott/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/conscott/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/conscott/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/conscott/subscriptions",
        "organizations_url": "https://api.github.com/users/conscott/orgs",
        "repos_url": "https://api.github.com/users/conscott/repos",
        "events_url": "https://api.github.com/users/conscott/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/conscott/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-02-13T13:55:37Z"
    },
    {
      "event": "subscribed",
      "id": 1471675778,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE0NzE2NzU3Nzg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1471675778",
      "actor": {
        "login": "conscott",
        "id": 14220652,
        "node_id": "MDQ6VXNlcjE0MjIwNjUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/14220652?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/conscott",
        "html_url": "https://github.com/conscott",
        "followers_url": "https://api.github.com/users/conscott/followers",
        "following_url": "https://api.github.com/users/conscott/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/conscott/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/conscott/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/conscott/subscriptions",
        "organizations_url": "https://api.github.com/users/conscott/orgs",
        "repos_url": "https://api.github.com/users/conscott/repos",
        "events_url": "https://api.github.com/users/conscott/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/conscott/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-02-13T13:55:37Z"
    },
    {
      "event": "head_ref_deleted",
      "id": 1471683839,
      "node_id": "MDE5OkhlYWRSZWZEZWxldGVkRXZlbnQxNDcxNjgzODM5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1471683839",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-02-13T13:59:41Z"
    },
    {
      "event": "referenced",
      "id": 1472623630,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDE0NzI2MjM2MzA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1472623630",
      "actor": {
        "login": "conscott",
        "id": 14220652,
        "node_id": "MDQ6VXNlcjE0MjIwNjUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/14220652?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/conscott",
        "html_url": "https://github.com/conscott",
        "followers_url": "https://api.github.com/users/conscott/followers",
        "following_url": "https://api.github.com/users/conscott/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/conscott/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/conscott/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/conscott/subscriptions",
        "organizations_url": "https://api.github.com/users/conscott/orgs",
        "repos_url": "https://api.github.com/users/conscott/repos",
        "events_url": "https://api.github.com/users/conscott/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/conscott/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "11c54829556c15387b19deaf1853772072215c5f",
      "commit_url": "https://api.github.com/repos/conscott/bitcoin/commits/11c54829556c15387b19deaf1853772072215c5f",
      "created_at": "2018-02-13T21:54:56Z"
    },
    {
      "event": "referenced",
      "id": 1472765119,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDE0NzI3NjUxMTk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1472765119",
      "actor": {
        "login": "conscott",
        "id": 14220652,
        "node_id": "MDQ6VXNlcjE0MjIwNjUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/14220652?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/conscott",
        "html_url": "https://github.com/conscott",
        "followers_url": "https://api.github.com/users/conscott/followers",
        "following_url": "https://api.github.com/users/conscott/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/conscott/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/conscott/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/conscott/subscriptions",
        "organizations_url": "https://api.github.com/users/conscott/orgs",
        "repos_url": "https://api.github.com/users/conscott/repos",
        "events_url": "https://api.github.com/users/conscott/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/conscott/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "84122956d0ce633375e79a07f528c8a5204b726d",
      "commit_url": "https://api.github.com/repos/conscott/bitcoin/commits/84122956d0ce633375e79a07f528c8a5204b726d",
      "created_at": "2018-02-13T23:26:23Z"
    },
    {
      "event": "referenced",
      "id": 1472778792,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDE0NzI3Nzg3OTI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1472778792",
      "actor": {
        "login": "conscott",
        "id": 14220652,
        "node_id": "MDQ6VXNlcjE0MjIwNjUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/14220652?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/conscott",
        "html_url": "https://github.com/conscott",
        "followers_url": "https://api.github.com/users/conscott/followers",
        "following_url": "https://api.github.com/users/conscott/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/conscott/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/conscott/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/conscott/subscriptions",
        "organizations_url": "https://api.github.com/users/conscott/orgs",
        "repos_url": "https://api.github.com/users/conscott/repos",
        "events_url": "https://api.github.com/users/conscott/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/conscott/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "88725ed71bb679944100af83616fc2eef1c75c1f",
      "commit_url": "https://api.github.com/repos/conscott/bitcoin/commits/88725ed71bb679944100af83616fc2eef1c75c1f",
      "created_at": "2018-02-13T23:37:08Z"
    },
    {
      "event": "referenced",
      "id": 1472796430,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDE0NzI3OTY0MzA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1472796430",
      "actor": {
        "login": "conscott",
        "id": 14220652,
        "node_id": "MDQ6VXNlcjE0MjIwNjUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/14220652?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/conscott",
        "html_url": "https://github.com/conscott",
        "followers_url": "https://api.github.com/users/conscott/followers",
        "following_url": "https://api.github.com/users/conscott/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/conscott/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/conscott/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/conscott/subscriptions",
        "organizations_url": "https://api.github.com/users/conscott/orgs",
        "repos_url": "https://api.github.com/users/conscott/repos",
        "events_url": "https://api.github.com/users/conscott/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/conscott/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "8001668b04041ad890714dcc41435d1258598c3d",
      "commit_url": "https://api.github.com/repos/conscott/bitcoin/commits/8001668b04041ad890714dcc41435d1258598c3d",
      "created_at": "2018-02-13T23:51:53Z"
    },
    {
      "event": "referenced",
      "id": 1472810591,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDE0NzI4MTA1OTE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1472810591",
      "actor": {
        "login": "conscott",
        "id": 14220652,
        "node_id": "MDQ6VXNlcjE0MjIwNjUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/14220652?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/conscott",
        "html_url": "https://github.com/conscott",
        "followers_url": "https://api.github.com/users/conscott/followers",
        "following_url": "https://api.github.com/users/conscott/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/conscott/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/conscott/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/conscott/subscriptions",
        "organizations_url": "https://api.github.com/users/conscott/orgs",
        "repos_url": "https://api.github.com/users/conscott/repos",
        "events_url": "https://api.github.com/users/conscott/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/conscott/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "87161b97f905142c71f691b2164dcf5cb105ab61",
      "commit_url": "https://api.github.com/repos/conscott/bitcoin/commits/87161b97f905142c71f691b2164dcf5cb105ab61",
      "created_at": "2018-02-14T00:04:03Z"
    },
    {
      "event": "referenced",
      "id": 1472811483,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDE0NzI4MTE0ODM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1472811483",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "e97b113b049fa1ca7152373d6ea911d56bf7ef4e",
      "commit_url": "https://api.github.com/repos/jnewbery/bitcoin/commits/e97b113b049fa1ca7152373d6ea911d56bf7ef4e",
      "created_at": "2018-02-14T00:04:49Z"
    },
    {
      "event": "reviewed",
      "id": 103594904,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAzNTk0OTA0",
      "url": null,
      "actor": null,
      "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "utACK 95e2e9af124595aae4801fc9813ee1c294d404cd, just some dead code and comment nits.",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#pullrequestreview-103594904",
      "submitted_at": "2018-03-13T20:25:30Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
    },
    {
      "event": "referenced",
      "id": 1519644668,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDE1MTk2NDQ2Njg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1519644668",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "0630974647dacaf25e7fcb7f9cbb785bb078ede6",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0630974647dacaf25e7fcb7f9cbb785bb078ede6",
      "created_at": "2018-03-13T21:13:51Z"
    },
    {
      "event": "commented",
      "id": 374063356,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM3NDA2MzM1Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/374063356",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-03-18T23:04:57Z",
      "updated_at": "2018-03-18T23:04:57Z",
      "author_association": "MEMBER",
      "body": "Agree with all of @MarcoFalke's comments, which can be addressed in a future PR.",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#issuecomment-374063356",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/11771"
    },
    {
      "event": "mentioned",
      "id": 1527482251,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTUyNzQ4MjI1MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1527482251",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-03-18T23:04:57Z"
    },
    {
      "event": "subscribed",
      "id": 1527482252,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE1Mjc0ODIyNTI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1527482252",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-03-18T23:04:57Z"
    },
    {
      "event": "reviewed",
      "id": 108201503,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTA4MjAxNTAz",
      "url": null,
      "actor": null,
      "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#pullrequestreview-108201503",
      "submitted_at": "2018-03-29T20:57:25Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
    },
    {
      "event": "referenced",
      "id": 1709474023,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDE3MDk0NzQwMjM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1709474023",
      "actor": {
        "login": "HashUnlimited",
        "id": 26601261,
        "node_id": "MDQ6VXNlcjI2NjAxMjYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/26601261?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/HashUnlimited",
        "html_url": "https://github.com/HashUnlimited",
        "followers_url": "https://api.github.com/users/HashUnlimited/followers",
        "following_url": "https://api.github.com/users/HashUnlimited/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/HashUnlimited/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/HashUnlimited/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/HashUnlimited/subscriptions",
        "organizations_url": "https://api.github.com/users/HashUnlimited/orgs",
        "repos_url": "https://api.github.com/users/HashUnlimited/repos",
        "events_url": "https://api.github.com/users/HashUnlimited/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/HashUnlimited/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "424b20b5121197de185a4c34a62e45b372a8c36f",
      "commit_url": "https://api.github.com/repos/HashUnlimited/chaincoin/commits/424b20b5121197de185a4c34a62e45b372a8c36f",
      "created_at": "2018-06-29T20:32:04Z"
    },
    {
      "event": "referenced",
      "id": 1725471833,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDE3MjU0NzE4MzM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1725471833",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "9abf7e3b270039f53e37a7a4b5296d4547bb73ed",
      "commit_url": "https://api.github.com/repos/bitcoinknots/bitcoin/commits/9abf7e3b270039f53e37a7a4b5296d4547bb73ed",
      "created_at": "2018-07-10T13:09:06Z"
    },
    {
      "event": "referenced",
      "id": 1728147592,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDE3MjgxNDc1OTI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1728147592",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "6a076dd41fc9887c675787486dbeeccbd629cb37",
      "commit_url": "https://api.github.com/repos/bitcoinknots/bitcoin/commits/6a076dd41fc9887c675787486dbeeccbd629cb37",
      "created_at": "2018-07-11T14:50:47Z"
    },
    {
      "event": "referenced",
      "id": 1950512559,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDE5NTA1MTI1NTk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1950512559",
      "actor": {
        "login": "lionello",
        "id": 591860,
        "node_id": "MDQ6VXNlcjU5MTg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/591860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/lionello",
        "html_url": "https://github.com/lionello",
        "followers_url": "https://api.github.com/users/lionello/followers",
        "following_url": "https://api.github.com/users/lionello/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/lionello/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/lionello/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/lionello/subscriptions",
        "organizations_url": "https://api.github.com/users/lionello/orgs",
        "repos_url": "https://api.github.com/users/lionello/repos",
        "events_url": "https://api.github.com/users/lionello/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/lionello/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "96cd3f1b4bc03ffdea2e8e671880ec6bca1a614d",
      "commit_url": "https://api.github.com/repos/enumatech/bitcoin/commits/96cd3f1b4bc03ffdea2e8e671880ec6bca1a614d",
      "created_at": "2018-11-07T01:10:57Z"
    },
    {
      "event": "referenced",
      "id": 2673873540,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI2NzM4NzM1NDA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2673873540",
      "actor": {
        "login": "codablock",
        "id": 1884269,
        "node_id": "MDQ6VXNlcjE4ODQyNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1884269?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/codablock",
        "html_url": "https://github.com/codablock",
        "followers_url": "https://api.github.com/users/codablock/followers",
        "following_url": "https://api.github.com/users/codablock/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/codablock/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/codablock/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/codablock/subscriptions",
        "organizations_url": "https://api.github.com/users/codablock/orgs",
        "repos_url": "https://api.github.com/users/codablock/repos",
        "events_url": "https://api.github.com/users/codablock/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/codablock/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "e3a7aeab7b56a654b5cfa584a0c54553421034b9",
      "commit_url": "https://api.github.com/repos/codablock/dash/commits/e3a7aeab7b56a654b5cfa584a0c54553421034b9",
      "created_at": "2019-09-30T16:07:24Z"
    },
    {
      "event": "referenced",
      "id": 2673873546,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI2NzM4NzM1NDY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2673873546",
      "actor": {
        "login": "codablock",
        "id": 1884269,
        "node_id": "MDQ6VXNlcjE4ODQyNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1884269?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/codablock",
        "html_url": "https://github.com/codablock",
        "followers_url": "https://api.github.com/users/codablock/followers",
        "following_url": "https://api.github.com/users/codablock/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/codablock/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/codablock/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/codablock/subscriptions",
        "organizations_url": "https://api.github.com/users/codablock/orgs",
        "repos_url": "https://api.github.com/users/codablock/repos",
        "events_url": "https://api.github.com/users/codablock/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/codablock/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "21040f773ffd7195431e74a1a4a83f413e610cc6",
      "commit_url": "https://api.github.com/repos/codablock/dash/commits/21040f773ffd7195431e74a1a4a83f413e610cc6",
      "created_at": "2019-09-30T16:07:25Z"
    },
    {
      "event": "referenced",
      "id": 2674066519,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI2NzQwNjY1MTk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2674066519",
      "actor": {
        "login": "codablock",
        "id": 1884269,
        "node_id": "MDQ6VXNlcjE4ODQyNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1884269?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/codablock",
        "html_url": "https://github.com/codablock",
        "followers_url": "https://api.github.com/users/codablock/followers",
        "following_url": "https://api.github.com/users/codablock/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/codablock/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/codablock/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/codablock/subscriptions",
        "organizations_url": "https://api.github.com/users/codablock/orgs",
        "repos_url": "https://api.github.com/users/codablock/repos",
        "events_url": "https://api.github.com/users/codablock/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/codablock/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "8b88ad62b568228d4b3943be78e6bf49049d31a1",
      "commit_url": "https://api.github.com/repos/codablock/dash/commits/8b88ad62b568228d4b3943be78e6bf49049d31a1",
      "created_at": "2019-09-30T17:08:37Z"
    },
    {
      "event": "referenced",
      "id": 2674066523,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI2NzQwNjY1MjM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2674066523",
      "actor": {
        "login": "codablock",
        "id": 1884269,
        "node_id": "MDQ6VXNlcjE4ODQyNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1884269?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/codablock",
        "html_url": "https://github.com/codablock",
        "followers_url": "https://api.github.com/users/codablock/followers",
        "following_url": "https://api.github.com/users/codablock/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/codablock/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/codablock/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/codablock/subscriptions",
        "organizations_url": "https://api.github.com/users/codablock/orgs",
        "repos_url": "https://api.github.com/users/codablock/repos",
        "events_url": "https://api.github.com/users/codablock/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/codablock/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "33c77c4039641dec0c70d544f348508746deca6f",
      "commit_url": "https://api.github.com/repos/codablock/dash/commits/33c77c4039641dec0c70d544f348508746deca6f",
      "created_at": "2019-09-30T17:08:37Z"
    },
    {
      "event": "referenced",
      "id": 2679891712,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI2Nzk4OTE3MTI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2679891712",
      "actor": {
        "login": "codablock",
        "id": 1884269,
        "node_id": "MDQ6VXNlcjE4ODQyNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1884269?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/codablock",
        "html_url": "https://github.com/codablock",
        "followers_url": "https://api.github.com/users/codablock/followers",
        "following_url": "https://api.github.com/users/codablock/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/codablock/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/codablock/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/codablock/subscriptions",
        "organizations_url": "https://api.github.com/users/codablock/orgs",
        "repos_url": "https://api.github.com/users/codablock/repos",
        "events_url": "https://api.github.com/users/codablock/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/codablock/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "9895e2b20eba8c62dc5f6bfbe5af25eac9664fac",
      "commit_url": "https://api.github.com/repos/codablock/dash/commits/9895e2b20eba8c62dc5f6bfbe5af25eac9664fac",
      "created_at": "2019-10-02T09:20:59Z"
    },
    {
      "event": "referenced",
      "id": 2679891718,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI2Nzk4OTE3MTg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2679891718",
      "actor": {
        "login": "codablock",
        "id": 1884269,
        "node_id": "MDQ6VXNlcjE4ODQyNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1884269?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/codablock",
        "html_url": "https://github.com/codablock",
        "followers_url": "https://api.github.com/users/codablock/followers",
        "following_url": "https://api.github.com/users/codablock/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/codablock/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/codablock/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/codablock/subscriptions",
        "organizations_url": "https://api.github.com/users/codablock/orgs",
        "repos_url": "https://api.github.com/users/codablock/repos",
        "events_url": "https://api.github.com/users/codablock/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/codablock/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "e720d73770a88e7e75594eb76e2c235824af9595",
      "commit_url": "https://api.github.com/repos/codablock/dash/commits/e720d73770a88e7e75594eb76e2c235824af9595",
      "created_at": "2019-10-02T09:21:00Z"
    },
    {
      "event": "referenced",
      "id": 2680575363,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI2ODA1NzUzNjM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2680575363",
      "actor": {
        "login": "codablock",
        "id": 1884269,
        "node_id": "MDQ6VXNlcjE4ODQyNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1884269?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/codablock",
        "html_url": "https://github.com/codablock",
        "followers_url": "https://api.github.com/users/codablock/followers",
        "following_url": "https://api.github.com/users/codablock/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/codablock/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/codablock/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/codablock/subscriptions",
        "organizations_url": "https://api.github.com/users/codablock/orgs",
        "repos_url": "https://api.github.com/users/codablock/repos",
        "events_url": "https://api.github.com/users/codablock/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/codablock/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "dc335cdee35720c97e105245b12f61775470a7e3",
      "commit_url": "https://api.github.com/repos/codablock/dash/commits/dc335cdee35720c97e105245b12f61775470a7e3",
      "created_at": "2019-10-02T13:26:31Z"
    },
    {
      "event": "referenced",
      "id": 2680575369,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI2ODA1NzUzNjk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2680575369",
      "actor": {
        "login": "codablock",
        "id": 1884269,
        "node_id": "MDQ6VXNlcjE4ODQyNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1884269?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/codablock",
        "html_url": "https://github.com/codablock",
        "followers_url": "https://api.github.com/users/codablock/followers",
        "following_url": "https://api.github.com/users/codablock/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/codablock/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/codablock/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/codablock/subscriptions",
        "organizations_url": "https://api.github.com/users/codablock/orgs",
        "repos_url": "https://api.github.com/users/codablock/repos",
        "events_url": "https://api.github.com/users/codablock/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/codablock/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "d40f2e58255fefad1c7e7c0060596f0b098cf49f",
      "commit_url": "https://api.github.com/repos/codablock/dash/commits/d40f2e58255fefad1c7e7c0060596f0b098cf49f",
      "created_at": "2019-10-02T13:26:31Z"
    },
    {
      "event": "referenced",
      "id": 2683608806,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI2ODM2MDg4MDY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2683608806",
      "actor": {
        "login": "UdjinM6",
        "id": 1935069,
        "node_id": "MDQ6VXNlcjE5MzUwNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/UdjinM6",
        "html_url": "https://github.com/UdjinM6",
        "followers_url": "https://api.github.com/users/UdjinM6/followers",
        "following_url": "https://api.github.com/users/UdjinM6/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/UdjinM6/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/UdjinM6/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
        "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
        "repos_url": "https://api.github.com/users/UdjinM6/repos",
        "events_url": "https://api.github.com/users/UdjinM6/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "6902ac1f2beaef0ef4ea1a2673fd3f9a74f11cd0",
      "commit_url": "https://api.github.com/repos/UdjinM6/dash/commits/6902ac1f2beaef0ef4ea1a2673fd3f9a74f11cd0",
      "created_at": "2019-10-03T10:48:33Z"
    },
    {
      "event": "referenced",
      "id": 2683608818,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI2ODM2MDg4MTg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2683608818",
      "actor": {
        "login": "UdjinM6",
        "id": 1935069,
        "node_id": "MDQ6VXNlcjE5MzUwNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/UdjinM6",
        "html_url": "https://github.com/UdjinM6",
        "followers_url": "https://api.github.com/users/UdjinM6/followers",
        "following_url": "https://api.github.com/users/UdjinM6/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/UdjinM6/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/UdjinM6/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
        "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
        "repos_url": "https://api.github.com/users/UdjinM6/repos",
        "events_url": "https://api.github.com/users/UdjinM6/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "beed5cf1f2679b09915048ec5c3fbb712ce1c8e4",
      "commit_url": "https://api.github.com/repos/UdjinM6/dash/commits/beed5cf1f2679b09915048ec5c3fbb712ce1c8e4",
      "created_at": "2019-10-03T10:48:33Z"
    },
    {
      "event": "referenced",
      "id": 2683815092,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI2ODM4MTUwOTI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2683815092",
      "actor": {
        "login": "codablock",
        "id": 1884269,
        "node_id": "MDQ6VXNlcjE4ODQyNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1884269?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/codablock",
        "html_url": "https://github.com/codablock",
        "followers_url": "https://api.github.com/users/codablock/followers",
        "following_url": "https://api.github.com/users/codablock/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/codablock/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/codablock/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/codablock/subscriptions",
        "organizations_url": "https://api.github.com/users/codablock/orgs",
        "repos_url": "https://api.github.com/users/codablock/repos",
        "events_url": "https://api.github.com/users/codablock/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/codablock/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "01c138e86b09c4142362e9cb60ecd61df68a259f",
      "commit_url": "https://api.github.com/repos/codablock/dash/commits/01c138e86b09c4142362e9cb60ecd61df68a259f",
      "created_at": "2019-10-03T12:10:01Z"
    },
    {
      "event": "referenced",
      "id": 2683815099,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI2ODM4MTUwOTk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2683815099",
      "actor": {
        "login": "codablock",
        "id": 1884269,
        "node_id": "MDQ6VXNlcjE4ODQyNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1884269?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/codablock",
        "html_url": "https://github.com/codablock",
        "followers_url": "https://api.github.com/users/codablock/followers",
        "following_url": "https://api.github.com/users/codablock/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/codablock/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/codablock/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/codablock/subscriptions",
        "organizations_url": "https://api.github.com/users/codablock/orgs",
        "repos_url": "https://api.github.com/users/codablock/repos",
        "events_url": "https://api.github.com/users/codablock/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/codablock/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "3e72a09c16d534005d8be3087dd2c1b323aea2da",
      "commit_url": "https://api.github.com/repos/codablock/dash/commits/3e72a09c16d534005d8be3087dd2c1b323aea2da",
      "created_at": "2019-10-03T12:10:01Z"
    },
    {
      "event": "referenced",
      "id": 2971477764,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI5NzE0Nzc3NjQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2971477764",
      "actor": {
        "login": "barrystyle",
        "id": 14147070,
        "node_id": "MDQ6VXNlcjE0MTQ3MDcw",
        "avatar_url": "https://avatars.githubusercontent.com/u/14147070?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/barrystyle",
        "html_url": "https://github.com/barrystyle",
        "followers_url": "https://api.github.com/users/barrystyle/followers",
        "following_url": "https://api.github.com/users/barrystyle/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/barrystyle/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/barrystyle/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/barrystyle/subscriptions",
        "organizations_url": "https://api.github.com/users/barrystyle/orgs",
        "repos_url": "https://api.github.com/users/barrystyle/repos",
        "events_url": "https://api.github.com/users/barrystyle/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/barrystyle/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "3598c04df5b0d58693ae6a6ee5a9faa5483fce9c",
      "commit_url": "https://api.github.com/repos/PACGlobalOfficial/PAC/commits/3598c04df5b0d58693ae6a6ee5a9faa5483fce9c",
      "created_at": "2020-01-22T20:22:35Z"
    },
    {
      "event": "referenced",
      "id": 2971477773,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI5NzE0Nzc3NzM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2971477773",
      "actor": {
        "login": "barrystyle",
        "id": 14147070,
        "node_id": "MDQ6VXNlcjE0MTQ3MDcw",
        "avatar_url": "https://avatars.githubusercontent.com/u/14147070?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/barrystyle",
        "html_url": "https://github.com/barrystyle",
        "followers_url": "https://api.github.com/users/barrystyle/followers",
        "following_url": "https://api.github.com/users/barrystyle/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/barrystyle/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/barrystyle/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/barrystyle/subscriptions",
        "organizations_url": "https://api.github.com/users/barrystyle/orgs",
        "repos_url": "https://api.github.com/users/barrystyle/repos",
        "events_url": "https://api.github.com/users/barrystyle/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/barrystyle/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "2b7f14e0550c2b56841e734799c84eb2dc156ef4",
      "commit_url": "https://api.github.com/repos/PACGlobalOfficial/PAC/commits/2b7f14e0550c2b56841e734799c84eb2dc156ef4",
      "created_at": "2020-01-22T20:22:35Z"
    },
    {
      "event": "referenced",
      "id": 4683226758,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ2ODMyMjY3NTg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4683226758",
      "actor": {
        "login": "random-zebra",
        "id": 18186894,
        "node_id": "MDQ6VXNlcjE4MTg2ODk0",
        "avatar_url": "https://avatars.githubusercontent.com/u/18186894?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/random-zebra",
        "html_url": "https://github.com/random-zebra",
        "followers_url": "https://api.github.com/users/random-zebra/followers",
        "following_url": "https://api.github.com/users/random-zebra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/random-zebra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/random-zebra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/random-zebra/subscriptions",
        "organizations_url": "https://api.github.com/users/random-zebra/orgs",
        "repos_url": "https://api.github.com/users/random-zebra/repos",
        "events_url": "https://api.github.com/users/random-zebra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/random-zebra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "2ab948e1ad7a3f65bd5d5c5b3d63dd8fe98563e4",
      "commit_url": "https://api.github.com/repos/PIVX-Project/PIVX/commits/2ab948e1ad7a3f65bd5d5c5b3d63dd8fe98563e4",
      "created_at": "2021-05-04T13:01:44Z"
    },
    {
      "event": "locked",
      "id": 5271795392,
      "node_id": "LOE_lADOABII584Qg_gmzwAAAAE6OTbA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5271795392",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-08T11:52:42Z",
      "lock_reason": "resolved"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/154506637",
      "pull_request_review_id": 80684762,
      "id": 154506637,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDUwNjYzNw==",
      "diff_hunk": "@@ -412,3 +414,110 @@ def run(self):\n             [obj.handle_close() for obj in disconnected]\n             asyncore.loop(0.1, use_poll=True, map=mininode_socket_map, count=1)\n         logger.debug(\"Network thread closing\")\n+\n+class P2PStub(P2PInterface):\n+    \"\"\"A P2P Stub class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        self.block_store = OrderedDict()\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if inv.type == 1 or inv.type == 1 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.tx_store.keys():\n+                    self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif inv.type == 2 or inv.type == 2 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.block_store.keys():\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if len(self.block_store) == 0:\n+            return\n+        current_block_header = self.block_store[next(reversed(self.block_store))]\n+        # current_block_header = super(current_tip)",
      "path": "test/functional/test_framework/mininode.py",
      "position": null,
      "original_position": 67,
      "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "original_commit_id": "f4c080ff63ae819d794fb11634af00397714f844",
      "in_reply_to_id": null,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Unnecessary comment?",
      "created_at": "2017-12-02T20:50:45Z",
      "updated_at": "2018-01-30T14:31:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r154506637",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/154506637"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 448,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/154508628",
      "pull_request_review_id": 80686571,
      "id": 154508628,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDUwODYyOA==",
      "diff_hunk": "@@ -412,3 +414,110 @@ def run(self):\n             [obj.handle_close() for obj in disconnected]\n             asyncore.loop(0.1, use_poll=True, map=mininode_socket_map, count=1)\n         logger.debug(\"Network thread closing\")\n+\n+class P2PStub(P2PInterface):\n+    \"\"\"A P2P Stub class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        self.block_store = OrderedDict()\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if inv.type == 1 or inv.type == 1 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.tx_store.keys():\n+                    self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif inv.type == 2 or inv.type == 2 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.block_store.keys():\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if len(self.block_store) == 0:\n+            return\n+        current_block_header = self.block_store[next(reversed(self.block_store))]\n+        # current_block_header = super(current_tip)",
      "path": "test/functional/test_framework/mininode.py",
      "position": null,
      "original_position": 67,
      "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "original_commit_id": "f4c080ff63ae819d794fb11634af00397714f844",
      "in_reply_to_id": 154506637,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "duh. Vestigial garbage. I'll remove.",
      "created_at": "2017-12-02T22:19:43Z",
      "updated_at": "2018-01-30T14:31:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r154508628",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/154508628"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 448,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/156986892",
      "pull_request_review_id": 83554929,
      "id": 156986892,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Njk4Njg5Mg==",
      "diff_hunk": "@@ -440,3 +454,127 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PStub(P2PInterface):\n+    \"\"\"A P2P Stub class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        self.block_store = OrderedDict()\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if inv.type == 1 or inv.type == 1 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.tx_store.keys():\n+                    self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif inv.type == 2 or inv.type == 2 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.block_store.keys():\n+                    self.send_message(msg_block(self.block_store[inv.hash]))",
      "path": "test/functional/test_framework/mininode.py",
      "position": null,
      "original_position": 64,
      "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "original_commit_id": "3d2209f3359c241fc06ef37d4bc8bcf1c333f1d4",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Mind to simplify the nested ifs?\r\n\r\n```py\r\nelif inv.type & MSG_TX and inv.hash in self.block_store.keys():\r\n    self.send...",
      "created_at": "2017-12-14T16:08:30Z",
      "updated_at": "2018-01-30T14:31:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r156986892",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/156986892"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 480,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/156988773",
      "pull_request_review_id": 83554929,
      "id": 156988773,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Njk4ODc3Mw==",
      "diff_hunk": "@@ -440,3 +454,127 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PStub(P2PInterface):\n+    \"\"\"A P2P Stub class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        self.block_store = OrderedDict()\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if inv.type == 1 or inv.type == 1 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.tx_store.keys():\n+                    self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif inv.type == 2 or inv.type == 2 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.block_store.keys():\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if len(self.block_store) == 0:\n+            return\n+        current_block_header = self.block_store[next(reversed(self.block_store))]\n+        if current_block_header is None:",
      "path": "test/functional/test_framework/mininode.py",
      "position": null,
      "original_position": 75,
      "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "original_commit_id": "3d2209f3359c241fc06ef37d4bc8bcf1c333f1d4",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: Add a comment why this would ever be true and not dead code?",
      "created_at": "2017-12-14T16:14:41Z",
      "updated_at": "2018-01-30T14:31:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r156988773",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/156988773"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 491,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/156992833",
      "pull_request_review_id": 83554929,
      "id": 156992833,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Njk5MjgzMw==",
      "diff_hunk": "@@ -440,3 +454,127 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PStub(P2PInterface):\n+    \"\"\"A P2P Stub class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        self.block_store = OrderedDict()\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if inv.type == 1 or inv.type == 1 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.tx_store.keys():\n+                    self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif inv.type == 2 or inv.type == 2 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.block_store.keys():\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if len(self.block_store) == 0:\n+            return\n+        current_block_header = self.block_store[next(reversed(self.block_store))]\n+        if current_block_header is None:\n+            return\n+\n+        response = msg_headers()\n+        headersList = [current_block_header]\n+        maxheaders = 2000\n+        while (headersList[0].sha256 not in locator.vHave):\n+            # Walk back through the block store, adding headers to headersList\n+            # as we go.\n+            prevBlockHash = headersList[0].hashPrevBlock\n+            if prevBlockHash in self.block_store:\n+                prevBlockHeader = self.block_store[prevBlockHash]\n+                headersList.insert(0, prevBlockHeader)\n+            else:\n+                break\n+\n+        # Truncate the list if there are too many headers\n+        headersList = headersList[:maxheaders]\n+        hashList = [x.sha256 for x in headersList]\n+\n+        # Stop the list at the hash_stop header if found\n+        index = len(headersList)\n+        if (hash_stop in hashList):\n+            index = hashList.index(hash_stop) + 1\n+        response.headers = headersList[:index]\n+\n+        if response is not None:\n+            self.send_message(response)\n+\n+    def on_reject(self, message):\n+        \"\"\"Store reject reason and code for testing.\"\"\"\n+        self.reject_code_received = message.code\n+        self.reject_reason_received = message.reason\n+\n+    def send_blocks_and_test(self, blocks, rpc, success=True, reject_code=None, reject_reason=None, request_block=True):\n+        \"\"\"Send blocks to test node and test whether the tip advances.\n+\n+         - add all blocks to our block_store\n+         - send a headers message for the final block\n+         - the on_getheaders handler will ensure that any getheaders are responded to\n+         - if request_block is True: wait for getdata for each of the blocks. The on_getdata handler will\n+           ensure that any getdata messages are responded to\n+         - if reject_code and reject_reason are set: assert that the correct reject message is received\n+         - if success is True: assert that the node's tip advances to the most recent block.\n+         - if success is False: assert that the node's tip doesn't advance.\"\"\"\n+\n+        with mininode_lock:\n+            self.reject_code_received = None\n+            self.reject_reason_received = None\n+\n+        for block in blocks:\n+            self.block_store[block.sha256] = block\n+\n+        self.send_message(msg_headers([blocks[-1]]))\n+\n+        if request_block:\n+            wait_until(lambda: blocks[-1].sha256 in self.getdata_requests)",
      "path": "test/functional/test_framework/mininode.py",
      "position": null,
      "original_position": 131,
      "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "original_commit_id": "3d2209f3359c241fc06ef37d4bc8bcf1c333f1d4",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Since `getdata_requests` is written to with the mininode lock, why is a `lock=mininode_lock` not required when reading?",
      "created_at": "2017-12-14T16:27:51Z",
      "updated_at": "2018-01-30T14:31:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r156992833",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/156992833"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 547,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/156996583",
      "pull_request_review_id": 83554929,
      "id": 156996583,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Njk5NjU4Mw==",
      "diff_hunk": "@@ -440,3 +454,127 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PStub(P2PInterface):\n+    \"\"\"A P2P Stub class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        self.block_store = OrderedDict()\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if inv.type == 1 or inv.type == 1 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.tx_store.keys():\n+                    self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif inv.type == 2 or inv.type == 2 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.block_store.keys():\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if len(self.block_store) == 0:\n+            return\n+        current_block_header = self.block_store[next(reversed(self.block_store))]\n+        if current_block_header is None:\n+            return\n+\n+        response = msg_headers()\n+        headersList = [current_block_header]\n+        maxheaders = 2000\n+        while (headersList[0].sha256 not in locator.vHave):\n+            # Walk back through the block store, adding headers to headersList\n+            # as we go.\n+            prevBlockHash = headersList[0].hashPrevBlock\n+            if prevBlockHash in self.block_store:\n+                prevBlockHeader = self.block_store[prevBlockHash]\n+                headersList.insert(0, prevBlockHeader)\n+            else:\n+                break\n+\n+        # Truncate the list if there are too many headers\n+        headersList = headersList[:maxheaders]\n+        hashList = [x.sha256 for x in headersList]\n+\n+        # Stop the list at the hash_stop header if found\n+        index = len(headersList)\n+        if (hash_stop in hashList):\n+            index = hashList.index(hash_stop) + 1\n+        response.headers = headersList[:index]\n+\n+        if response is not None:\n+            self.send_message(response)\n+\n+    def on_reject(self, message):\n+        \"\"\"Store reject reason and code for testing.\"\"\"\n+        self.reject_code_received = message.code\n+        self.reject_reason_received = message.reason\n+\n+    def send_blocks_and_test(self, blocks, rpc, success=True, reject_code=None, reject_reason=None, request_block=True):\n+        \"\"\"Send blocks to test node and test whether the tip advances.\n+\n+         - add all blocks to our block_store\n+         - send a headers message for the final block\n+         - the on_getheaders handler will ensure that any getheaders are responded to\n+         - if request_block is True: wait for getdata for each of the blocks. The on_getdata handler will\n+           ensure that any getdata messages are responded to\n+         - if reject_code and reject_reason are set: assert that the correct reject message is received\n+         - if success is True: assert that the node's tip advances to the most recent block.\n+         - if success is False: assert that the node's tip doesn't advance.\"\"\"\n+\n+        with mininode_lock:\n+            self.reject_code_received = None\n+            self.reject_reason_received = None\n+\n+        for block in blocks:\n+            self.block_store[block.sha256] = block\n+\n+        self.send_message(msg_headers([blocks[-1]]))\n+\n+        if request_block:\n+            wait_until(lambda: blocks[-1].sha256 in self.getdata_requests)\n+\n+        if success:\n+            wait_until(lambda: rpc.getbestblockhash() == blocks[-1].hash)\n+        else:\n+            assert rpc.getbestblockhash() != blocks[-1].hash\n+            if reject_code is not None:\n+                wait_until(lambda: self.reject_code_received == reject_code, lock=mininode_lock)\n+            if reject_reason is not None:\n+                wait_until(lambda: self.reject_reason_received == reject_reason, lock=mininode_lock)\n+\n+    def send_txs_and_test(self, txs, rpc, success=True, reject_code=None, reject_reason=None):\n+        \"\"\"Send txs to test node and test whether they're accepted to the mempool.\n+\n+         - add all txs to our tx_store\n+         - send tx messages for all txs\n+         - if reject_code and reject_reason are set: assert that the correct reject message is received\n+         - if success is True: assert that the tx is accepted to the mempool\n+         - if success is False: assert that the tx is not accepted to the mempool.\"\"\"\n+\n+        for tx in txs:\n+            self.tx_store[tx.sha256] = tx\n+            self.send_message(msg_tx(tx))\n+\n+        self.sync_with_ping()\n+\n+        if success:\n+            assert tx.hash in rpc.getrawmempool()",
      "path": "test/functional/test_framework/mininode.py",
      "position": null,
      "original_position": 158,
      "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "original_commit_id": "3d2209f3359c241fc06ef37d4bc8bcf1c333f1d4",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The documentation states \"whether *they* are accepted\", but you only check one.",
      "created_at": "2017-12-14T16:39:49Z",
      "updated_at": "2018-01-30T14:31:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r156996583",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/156996583"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 574,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157002945",
      "pull_request_review_id": 83574367,
      "id": 157002945,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzAwMjk0NQ==",
      "diff_hunk": "@@ -440,3 +454,127 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PStub(P2PInterface):\n+    \"\"\"A P2P Stub class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        self.block_store = OrderedDict()\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if inv.type == 1 or inv.type == 1 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.tx_store.keys():\n+                    self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif inv.type == 2 or inv.type == 2 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.block_store.keys():\n+                    self.send_message(msg_block(self.block_store[inv.hash]))",
      "path": "test/functional/test_framework/mininode.py",
      "position": null,
      "original_position": 64,
      "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "original_commit_id": "3d2209f3359c241fc06ef37d4bc8bcf1c333f1d4",
      "in_reply_to_id": 156986892,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "inv types are not bit flags in general, so `inv.type & MSG_TX` evaluates to true for MSG_FILTERED_BLOCK (and `inv.type & MSG_BLOCK` also evalutes to true for MSG_FILTERED_BLOCK).\r\n\r\nFlattening the nested ifs would give:\r\n\r\n```python\r\n            if (inv.type == 1 or inv.type == 1 | MSG_WITNESS_FLAG) and inv.hash in self.tx_store.keys():\r\n                self.send_message(msg_tx(self.tx_store[inv.hash]))\r\n            elif (inv.type == 2 or inv.type == 2 | MSG_WITNESS_FLAG) and inv.hash in self.block_store.keys():\r\n                self.send_message(msg_block(self.block_store[inv.hash]))\r\n```\r\n\r\nI'm not sure if that's any clearer due to the length of the if statements, but I'm happy to change it if you think it's an improvement.",
      "created_at": "2017-12-14T17:01:45Z",
      "updated_at": "2018-01-30T14:31:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r157002945",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157002945"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 480,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157015179",
      "pull_request_review_id": 83588664,
      "id": 157015179,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzAxNTE3OQ==",
      "diff_hunk": "@@ -440,3 +454,127 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PStub(P2PInterface):\n+    \"\"\"A P2P Stub class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        self.block_store = OrderedDict()\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if inv.type == 1 or inv.type == 1 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.tx_store.keys():\n+                    self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif inv.type == 2 or inv.type == 2 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.block_store.keys():\n+                    self.send_message(msg_block(self.block_store[inv.hash]))",
      "path": "test/functional/test_framework/mininode.py",
      "position": null,
      "original_position": 64,
      "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "original_commit_id": "3d2209f3359c241fc06ef37d4bc8bcf1c333f1d4",
      "in_reply_to_id": 156986892,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nope, fine to leave as is.",
      "created_at": "2017-12-14T17:47:46Z",
      "updated_at": "2018-01-30T14:31:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r157015179",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157015179"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 480,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157019524",
      "pull_request_review_id": 83593794,
      "id": 157019524,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzAxOTUyNA==",
      "diff_hunk": "@@ -440,3 +454,127 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PStub(P2PInterface):\n+    \"\"\"A P2P Stub class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        self.block_store = OrderedDict()\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if inv.type == 1 or inv.type == 1 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.tx_store.keys():\n+                    self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif inv.type == 2 or inv.type == 2 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.block_store.keys():\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if len(self.block_store) == 0:\n+            return\n+        current_block_header = self.block_store[next(reversed(self.block_store))]\n+        if current_block_header is None:",
      "path": "test/functional/test_framework/mininode.py",
      "position": null,
      "original_position": 75,
      "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "original_commit_id": "3d2209f3359c241fc06ef37d4bc8bcf1c333f1d4",
      "in_reply_to_id": 156988773,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This isn't actually required. Removing.",
      "created_at": "2017-12-14T18:05:23Z",
      "updated_at": "2018-01-30T14:31:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r157019524",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157019524"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 491,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157019699",
      "pull_request_review_id": 83594018,
      "id": 157019699,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzAxOTY5OQ==",
      "diff_hunk": "@@ -440,3 +454,127 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PStub(P2PInterface):\n+    \"\"\"A P2P Stub class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        self.block_store = OrderedDict()\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if inv.type == 1 or inv.type == 1 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.tx_store.keys():\n+                    self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif inv.type == 2 or inv.type == 2 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.block_store.keys():\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if len(self.block_store) == 0:\n+            return\n+        current_block_header = self.block_store[next(reversed(self.block_store))]\n+        if current_block_header is None:\n+            return\n+\n+        response = msg_headers()\n+        headersList = [current_block_header]\n+        maxheaders = 2000\n+        while (headersList[0].sha256 not in locator.vHave):\n+            # Walk back through the block store, adding headers to headersList\n+            # as we go.\n+            prevBlockHash = headersList[0].hashPrevBlock\n+            if prevBlockHash in self.block_store:\n+                prevBlockHeader = self.block_store[prevBlockHash]\n+                headersList.insert(0, prevBlockHeader)\n+            else:\n+                break\n+\n+        # Truncate the list if there are too many headers\n+        headersList = headersList[:maxheaders]\n+        hashList = [x.sha256 for x in headersList]\n+\n+        # Stop the list at the hash_stop header if found\n+        index = len(headersList)\n+        if (hash_stop in hashList):\n+            index = hashList.index(hash_stop) + 1\n+        response.headers = headersList[:index]\n+\n+        if response is not None:\n+            self.send_message(response)\n+\n+    def on_reject(self, message):\n+        \"\"\"Store reject reason and code for testing.\"\"\"\n+        self.reject_code_received = message.code\n+        self.reject_reason_received = message.reason\n+\n+    def send_blocks_and_test(self, blocks, rpc, success=True, reject_code=None, reject_reason=None, request_block=True):\n+        \"\"\"Send blocks to test node and test whether the tip advances.\n+\n+         - add all blocks to our block_store\n+         - send a headers message for the final block\n+         - the on_getheaders handler will ensure that any getheaders are responded to\n+         - if request_block is True: wait for getdata for each of the blocks. The on_getdata handler will\n+           ensure that any getdata messages are responded to\n+         - if reject_code and reject_reason are set: assert that the correct reject message is received\n+         - if success is True: assert that the node's tip advances to the most recent block.\n+         - if success is False: assert that the node's tip doesn't advance.\"\"\"\n+\n+        with mininode_lock:\n+            self.reject_code_received = None\n+            self.reject_reason_received = None\n+\n+        for block in blocks:\n+            self.block_store[block.sha256] = block\n+\n+        self.send_message(msg_headers([blocks[-1]]))\n+\n+        if request_block:\n+            wait_until(lambda: blocks[-1].sha256 in self.getdata_requests)",
      "path": "test/functional/test_framework/mininode.py",
      "position": null,
      "original_position": 131,
      "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "original_commit_id": "3d2209f3359c241fc06ef37d4bc8bcf1c333f1d4",
      "in_reply_to_id": 156992833,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You're right. This is required. Updating.",
      "created_at": "2017-12-14T18:06:10Z",
      "updated_at": "2018-01-30T14:31:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r157019699",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157019699"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 547,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157029429",
      "pull_request_review_id": 83605941,
      "id": 157029429,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NzAyOTQyOQ==",
      "diff_hunk": "@@ -440,3 +454,127 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PStub(P2PInterface):\n+    \"\"\"A P2P Stub class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        self.block_store = OrderedDict()\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if inv.type == 1 or inv.type == 1 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.tx_store.keys():\n+                    self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif inv.type == 2 or inv.type == 2 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.block_store.keys():\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if len(self.block_store) == 0:\n+            return\n+        current_block_header = self.block_store[next(reversed(self.block_store))]\n+        if current_block_header is None:\n+            return\n+\n+        response = msg_headers()\n+        headersList = [current_block_header]\n+        maxheaders = 2000\n+        while (headersList[0].sha256 not in locator.vHave):\n+            # Walk back through the block store, adding headers to headersList\n+            # as we go.\n+            prevBlockHash = headersList[0].hashPrevBlock\n+            if prevBlockHash in self.block_store:\n+                prevBlockHeader = self.block_store[prevBlockHash]\n+                headersList.insert(0, prevBlockHeader)\n+            else:\n+                break\n+\n+        # Truncate the list if there are too many headers\n+        headersList = headersList[:maxheaders]\n+        hashList = [x.sha256 for x in headersList]\n+\n+        # Stop the list at the hash_stop header if found\n+        index = len(headersList)\n+        if (hash_stop in hashList):\n+            index = hashList.index(hash_stop) + 1\n+        response.headers = headersList[:index]\n+\n+        if response is not None:\n+            self.send_message(response)\n+\n+    def on_reject(self, message):\n+        \"\"\"Store reject reason and code for testing.\"\"\"\n+        self.reject_code_received = message.code\n+        self.reject_reason_received = message.reason\n+\n+    def send_blocks_and_test(self, blocks, rpc, success=True, reject_code=None, reject_reason=None, request_block=True):\n+        \"\"\"Send blocks to test node and test whether the tip advances.\n+\n+         - add all blocks to our block_store\n+         - send a headers message for the final block\n+         - the on_getheaders handler will ensure that any getheaders are responded to\n+         - if request_block is True: wait for getdata for each of the blocks. The on_getdata handler will\n+           ensure that any getdata messages are responded to\n+         - if reject_code and reject_reason are set: assert that the correct reject message is received\n+         - if success is True: assert that the node's tip advances to the most recent block.\n+         - if success is False: assert that the node's tip doesn't advance.\"\"\"\n+\n+        with mininode_lock:\n+            self.reject_code_received = None\n+            self.reject_reason_received = None\n+\n+        for block in blocks:\n+            self.block_store[block.sha256] = block\n+\n+        self.send_message(msg_headers([blocks[-1]]))\n+\n+        if request_block:\n+            wait_until(lambda: blocks[-1].sha256 in self.getdata_requests)\n+\n+        if success:\n+            wait_until(lambda: rpc.getbestblockhash() == blocks[-1].hash)\n+        else:\n+            assert rpc.getbestblockhash() != blocks[-1].hash\n+            if reject_code is not None:\n+                wait_until(lambda: self.reject_code_received == reject_code, lock=mininode_lock)\n+            if reject_reason is not None:\n+                wait_until(lambda: self.reject_reason_received == reject_reason, lock=mininode_lock)\n+\n+    def send_txs_and_test(self, txs, rpc, success=True, reject_code=None, reject_reason=None):\n+        \"\"\"Send txs to test node and test whether they're accepted to the mempool.\n+\n+         - add all txs to our tx_store\n+         - send tx messages for all txs\n+         - if reject_code and reject_reason are set: assert that the correct reject message is received\n+         - if success is True: assert that the tx is accepted to the mempool\n+         - if success is False: assert that the tx is not accepted to the mempool.\"\"\"\n+\n+        for tx in txs:\n+            self.tx_store[tx.sha256] = tx\n+            self.send_message(msg_tx(tx))\n+\n+        self.sync_with_ping()\n+\n+        if success:\n+            assert tx.hash in rpc.getrawmempool()",
      "path": "test/functional/test_framework/mininode.py",
      "position": null,
      "original_position": 158,
      "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "original_commit_id": "3d2209f3359c241fc06ef37d4bc8bcf1c333f1d4",
      "in_reply_to_id": 156996583,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "fixed",
      "created_at": "2017-12-14T18:48:32Z",
      "updated_at": "2018-01-30T14:31:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r157029429",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157029429"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 574,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157845293",
      "pull_request_review_id": 84555442,
      "id": 157845293,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Nzg0NTI5Mw==",
      "diff_hunk": "@@ -440,3 +454,127 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PStub(P2PInterface):\n+    \"\"\"A P2P Stub class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        self.block_store = OrderedDict()\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if inv.type == 1 or inv.type == 1 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.tx_store.keys():\n+                    self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif inv.type == 2 or inv.type == 2 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.block_store.keys():\n+                    self.send_message(msg_block(self.block_store[inv.hash]))",
      "path": "test/functional/test_framework/mininode.py",
      "position": null,
      "original_position": 64,
      "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "original_commit_id": "3d2209f3359c241fc06ef37d4bc8bcf1c333f1d4",
      "in_reply_to_id": 156986892,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r156986892\r\n\r\nIn commit \"Add P2PStub class\"\r\n\r\nI also think this is fine as is, but I would suggest taking constants from the c++ code and writing:\r\n\r\n```python3\r\nif (inv.type & MSG_TYPE_MASK) == MSG_TX and inv.hash in self.tx_store.keys():\r\n```",
      "created_at": "2017-12-19T19:00:25Z",
      "updated_at": "2018-01-30T14:31:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r157845293",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157845293"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 480,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157846565",
      "pull_request_review_id": 84555442,
      "id": 157846565,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Nzg0NjU2NQ==",
      "diff_hunk": "@@ -440,3 +454,136 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PStub(P2PInterface):\n+    \"\"\"A P2P Stub class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        self.block_store = OrderedDict()\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if inv.type == 1 or inv.type == 1 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.tx_store.keys():\n+                    self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif inv.type == 2 or inv.type == 2 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.block_store.keys():\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if len(self.block_store) == 0:",
      "path": "test/functional/test_framework/mininode.py",
      "position": null,
      "original_position": 72,
      "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "original_commit_id": "86dec601882e82a867daf856e51f18df1ce1ec3c",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Add P2PStub class\"\r\n\r\nIf following PEP8 this should be `if not self.block_store:`",
      "created_at": "2017-12-19T19:05:38Z",
      "updated_at": "2018-01-30T14:31:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r157846565",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157846565"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 488,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157846703",
      "pull_request_review_id": 84555442,
      "id": 157846703,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Nzg0NjcwMw==",
      "diff_hunk": "@@ -440,3 +454,136 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PStub(P2PInterface):\n+    \"\"\"A P2P Stub class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        self.block_store = OrderedDict()\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if inv.type == 1 or inv.type == 1 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.tx_store.keys():\n+                    self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif inv.type == 2 or inv.type == 2 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.block_store.keys():\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if len(self.block_store) == 0:\n+            return\n+        current_block_header = self.block_store[next(reversed(self.block_store))]\n+\n+        response = msg_headers()\n+        headers_list = [current_block_header]\n+        maxheaders = 2000\n+        while (headers_list[0].sha256 not in locator.vHave):",
      "path": "test/functional/test_framework/mininode.py",
      "position": null,
      "original_position": 79,
      "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "original_commit_id": "86dec601882e82a867daf856e51f18df1ce1ec3c",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Add P2PStub class\"\r\n\r\nUnnecessary parentheses",
      "created_at": "2017-12-19T19:06:09Z",
      "updated_at": "2018-01-30T14:31:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r157846703",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157846703"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 495,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157848246",
      "pull_request_review_id": 84555442,
      "id": 157848246,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Nzg0ODI0Ng==",
      "diff_hunk": "@@ -440,3 +454,136 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PStub(P2PInterface):\n+    \"\"\"A P2P Stub class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        self.block_store = OrderedDict()\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if inv.type == 1 or inv.type == 1 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.tx_store.keys():\n+                    self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif inv.type == 2 or inv.type == 2 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.block_store.keys():\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if len(self.block_store) == 0:\n+            return\n+        current_block_header = self.block_store[next(reversed(self.block_store))]\n+\n+        response = msg_headers()\n+        headers_list = [current_block_header]\n+        maxheaders = 2000\n+        while (headers_list[0].sha256 not in locator.vHave):\n+            # Walk back through the block store, adding headers to headers_list\n+            # as we go.\n+            prev_block_hash = headers_list[0].hashPrevBlock\n+            if prev_block_hash in self.block_store:\n+                prev_block_header = self.block_store[prev_block_hash]\n+                headers_list.insert(0, prev_block_header)",
      "path": "test/functional/test_framework/mininode.py",
      "position": null,
      "original_position": 85,
      "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "original_commit_id": "86dec601882e82a867daf856e51f18df1ce1ec3c",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Add P2PStub class\"\r\n\r\nUsually better to append to end of list than insert at beginning of list. You can get the last maxheaders in reverse order with `header_list[:-maxheaders-1:-1]",
      "created_at": "2017-12-19T19:12:10Z",
      "updated_at": "2018-01-30T14:31:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r157848246",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157848246"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 501,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157849606",
      "pull_request_review_id": 84555442,
      "id": 157849606,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Nzg0OTYwNg==",
      "diff_hunk": "@@ -440,3 +454,136 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PStub(P2PInterface):\n+    \"\"\"A P2P Stub class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        self.block_store = OrderedDict()\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if inv.type == 1 or inv.type == 1 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.tx_store.keys():\n+                    self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif inv.type == 2 or inv.type == 2 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.block_store.keys():\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if len(self.block_store) == 0:\n+            return\n+        current_block_header = self.block_store[next(reversed(self.block_store))]\n+\n+        response = msg_headers()\n+        headers_list = [current_block_header]\n+        maxheaders = 2000\n+        while (headers_list[0].sha256 not in locator.vHave):\n+            # Walk back through the block store, adding headers to headers_list\n+            # as we go.\n+            prev_block_hash = headers_list[0].hashPrevBlock\n+            if prev_block_hash in self.block_store:\n+                prev_block_header = self.block_store[prev_block_hash]\n+                headers_list.insert(0, prev_block_header)\n+            else:\n+                break\n+\n+        # Truncate the list if there are too many headers\n+        headers_list = headers_list[:maxheaders]\n+        hash_list = [x.sha256 for x in headers_list]\n+\n+        # Stop the list at the hash_stop header if found\n+        index = len(headers_list)\n+        if (hash_stop in hash_list):\n+            index = hash_list.index(hash_stop) + 1\n+        response.headers = headers_list[:index]\n+\n+        if response is not None:\n+            self.send_message(response)\n+\n+    def on_reject(self, message):\n+        \"\"\"Store reject reason and code for testing.\"\"\"\n+        self.reject_code_received = message.code\n+        self.reject_reason_received = message.reason\n+\n+    def send_blocks_and_test(self, blocks, rpc, success=True, request_block=True, reject_code=None, reject_reason=None, timeout=60):\n+        \"\"\"Send blocks to test node and test whether the tip advances.\n+\n+         - add all blocks to our block_store\n+         - send a headers message for the final block\n+         - the on_getheaders handler will ensure that any getheaders are responded to\n+         - if request_block is True: wait for getdata for each of the blocks. The on_getdata handler will\n+           ensure that any getdata messages are responded to\n+         - if success is True: assert that the node's tip advances to the most recent block\n+         - if success is False: assert that the node's tip doesn't advance\n+         - if reject_code and reject_reason are set: assert that the correct reject message is received\"\"\"\n+\n+        with mininode_lock:\n+            self.reject_code_received = None\n+            self.reject_reason_received = None\n+\n+        for block in blocks:\n+            self.block_store[block.sha256] = block",
      "path": "test/functional/test_framework/mininode.py",
      "position": null,
      "original_position": 124,
      "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "original_commit_id": "86dec601882e82a867daf856e51f18df1ce1ec3c",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe `assert block.sha256 not in block_store` because if this is not true, ordering assumption could be broken and next(reversed(block_store)) might not actually return the last block.",
      "created_at": "2017-12-19T19:17:56Z",
      "updated_at": "2018-01-30T14:31:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r157849606",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157849606"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 540,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157851175",
      "pull_request_review_id": 84555442,
      "id": 157851175,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Nzg1MTE3NQ==",
      "diff_hunk": "@@ -440,3 +454,136 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PStub(P2PInterface):\n+    \"\"\"A P2P Stub class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        self.block_store = OrderedDict()",
      "path": "test/functional/test_framework/mininode.py",
      "position": null,
      "original_position": 51,
      "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "original_commit_id": "86dec601882e82a867daf856e51f18df1ce1ec3c",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Add P2PStub class\"\r\n\r\nUsing OrderedDict for this seems fragile, and also seems like it requires storing unnecessary ordering information. The only place ordering seems to be used is in the `reversed(next(block_store))` call returning the most recent block hash. But it would seem more straightforward and efficient just to add a `last_block_hash` member variable to hold this instead of trying to encode it within the dict.",
      "created_at": "2017-12-19T19:23:56Z",
      "updated_at": "2018-01-30T14:31:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r157851175",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157851175"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 467,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157851682",
      "pull_request_review_id": 84555442,
      "id": 157851682,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Nzg1MTY4Mg==",
      "diff_hunk": "@@ -440,3 +454,136 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PStub(P2PInterface):\n+    \"\"\"A P2P Stub class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        self.block_store = OrderedDict()",
      "path": "test/functional/test_framework/mininode.py",
      "position": null,
      "original_position": 51,
      "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "original_commit_id": "86dec601882e82a867daf856e51f18df1ce1ec3c",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Add P2PStub class\"\r\n\r\nCould use a comment here like `# block hash -> CBlock` to indicate what the keys and values are.",
      "created_at": "2017-12-19T19:25:42Z",
      "updated_at": "2018-01-30T14:31:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r157851682",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157851682"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 467,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157851969",
      "pull_request_review_id": 84555442,
      "id": 157851969,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Nzg1MTk2OQ==",
      "diff_hunk": "@@ -440,3 +454,136 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PStub(P2PInterface):\n+    \"\"\"A P2P Stub class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        self.block_store = OrderedDict()\n+        self.tx_store = {}",
      "path": "test/functional/test_framework/mininode.py",
      "position": null,
      "original_position": 52,
      "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "original_commit_id": "86dec601882e82a867daf856e51f18df1ce1ec3c",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Add P2PStub class\"\r\n\r\nCould use a comment here like `# tx hash -> CTransaction` to indicate what the keys and values are.",
      "created_at": "2017-12-19T19:26:47Z",
      "updated_at": "2018-01-30T14:31:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r157851969",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157851969"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 471,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157853684",
      "pull_request_review_id": 84555442,
      "id": 157853684,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Nzg1MzY4NA==",
      "diff_hunk": "@@ -440,3 +454,136 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PStub(P2PInterface):\n+    \"\"\"A P2P Stub class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        self.block_store = OrderedDict()\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if inv.type == 1 or inv.type == 1 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.tx_store.keys():\n+                    self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif inv.type == 2 or inv.type == 2 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.block_store.keys():\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if len(self.block_store) == 0:\n+            return\n+        current_block_header = self.block_store[next(reversed(self.block_store))]\n+\n+        response = msg_headers()\n+        headers_list = [current_block_header]\n+        maxheaders = 2000\n+        while (headers_list[0].sha256 not in locator.vHave):\n+            # Walk back through the block store, adding headers to headers_list\n+            # as we go.\n+            prev_block_hash = headers_list[0].hashPrevBlock\n+            if prev_block_hash in self.block_store:\n+                prev_block_header = self.block_store[prev_block_hash]\n+                headers_list.insert(0, prev_block_header)\n+            else:\n+                break\n+\n+        # Truncate the list if there are too many headers\n+        headers_list = headers_list[:maxheaders]\n+        hash_list = [x.sha256 for x in headers_list]\n+\n+        # Stop the list at the hash_stop header if found\n+        index = len(headers_list)\n+        if (hash_stop in hash_list):",
      "path": "test/functional/test_framework/mininode.py",
      "position": null,
      "original_position": 95,
      "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "original_commit_id": "86dec601882e82a867daf856e51f18df1ce1ec3c",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Add P2PStub class\"\r\n\r\nUnnecessary parentheses. Also it, seems like you could just check `headers_list[0].sha256 != hash_stop` in the while loop above and drop this extra truncation code.",
      "created_at": "2017-12-19T19:33:25Z",
      "updated_at": "2018-01-30T14:31:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r157853684",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157853684"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 511,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157854985",
      "pull_request_review_id": 84555442,
      "id": 157854985,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Nzg1NDk4NQ==",
      "diff_hunk": "@@ -440,3 +454,136 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PStub(P2PInterface):\n+    \"\"\"A P2P Stub class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        self.block_store = OrderedDict()\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if inv.type == 1 or inv.type == 1 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.tx_store.keys():\n+                    self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif inv.type == 2 or inv.type == 2 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.block_store.keys():\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if len(self.block_store) == 0:\n+            return\n+        current_block_header = self.block_store[next(reversed(self.block_store))]\n+\n+        response = msg_headers()\n+        headers_list = [current_block_header]\n+        maxheaders = 2000\n+        while (headers_list[0].sha256 not in locator.vHave):\n+            # Walk back through the block store, adding headers to headers_list\n+            # as we go.\n+            prev_block_hash = headers_list[0].hashPrevBlock\n+            if prev_block_hash in self.block_store:\n+                prev_block_header = self.block_store[prev_block_hash]\n+                headers_list.insert(0, prev_block_header)\n+            else:\n+                break\n+\n+        # Truncate the list if there are too many headers\n+        headers_list = headers_list[:maxheaders]\n+        hash_list = [x.sha256 for x in headers_list]\n+\n+        # Stop the list at the hash_stop header if found\n+        index = len(headers_list)\n+        if (hash_stop in hash_list):\n+            index = hash_list.index(hash_stop) + 1\n+        response.headers = headers_list[:index]\n+\n+        if response is not None:\n+            self.send_message(response)\n+\n+    def on_reject(self, message):\n+        \"\"\"Store reject reason and code for testing.\"\"\"\n+        self.reject_code_received = message.code\n+        self.reject_reason_received = message.reason\n+\n+    def send_blocks_and_test(self, blocks, rpc, success=True, request_block=True, reject_code=None, reject_reason=None, timeout=60):\n+        \"\"\"Send blocks to test node and test whether the tip advances.\n+\n+         - add all blocks to our block_store\n+         - send a headers message for the final block\n+         - the on_getheaders handler will ensure that any getheaders are responded to\n+         - if request_block is True: wait for getdata for each of the blocks. The on_getdata handler will\n+           ensure that any getdata messages are responded to\n+         - if success is True: assert that the node's tip advances to the most recent block\n+         - if success is False: assert that the node's tip doesn't advance\n+         - if reject_code and reject_reason are set: assert that the correct reject message is received\"\"\"\n+\n+        with mininode_lock:\n+            self.reject_code_received = None\n+            self.reject_reason_received = None\n+\n+        for block in blocks:\n+            self.block_store[block.sha256] = block",
      "path": "test/functional/test_framework/mininode.py",
      "position": null,
      "original_position": 124,
      "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "original_commit_id": "86dec601882e82a867daf856e51f18df1ce1ec3c",
      "in_reply_to_id": 157849606,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Add P2PStub class\"\r\n\r\nNeed mininode_lock here?",
      "created_at": "2017-12-19T19:38:33Z",
      "updated_at": "2018-01-30T14:31:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r157854985",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157854985"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 540,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157855530",
      "pull_request_review_id": 84555442,
      "id": 157855530,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Nzg1NTUzMA==",
      "diff_hunk": "@@ -440,3 +454,136 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PStub(P2PInterface):\n+    \"\"\"A P2P Stub class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        self.block_store = OrderedDict()\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if inv.type == 1 or inv.type == 1 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.tx_store.keys():\n+                    self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif inv.type == 2 or inv.type == 2 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.block_store.keys():\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if len(self.block_store) == 0:\n+            return\n+        current_block_header = self.block_store[next(reversed(self.block_store))]\n+\n+        response = msg_headers()\n+        headers_list = [current_block_header]\n+        maxheaders = 2000\n+        while (headers_list[0].sha256 not in locator.vHave):\n+            # Walk back through the block store, adding headers to headers_list\n+            # as we go.\n+            prev_block_hash = headers_list[0].hashPrevBlock\n+            if prev_block_hash in self.block_store:\n+                prev_block_header = self.block_store[prev_block_hash]\n+                headers_list.insert(0, prev_block_header)\n+            else:\n+                break\n+\n+        # Truncate the list if there are too many headers\n+        headers_list = headers_list[:maxheaders]\n+        hash_list = [x.sha256 for x in headers_list]\n+\n+        # Stop the list at the hash_stop header if found\n+        index = len(headers_list)\n+        if (hash_stop in hash_list):\n+            index = hash_list.index(hash_stop) + 1\n+        response.headers = headers_list[:index]\n+\n+        if response is not None:\n+            self.send_message(response)\n+\n+    def on_reject(self, message):\n+        \"\"\"Store reject reason and code for testing.\"\"\"\n+        self.reject_code_received = message.code\n+        self.reject_reason_received = message.reason\n+\n+    def send_blocks_and_test(self, blocks, rpc, success=True, request_block=True, reject_code=None, reject_reason=None, timeout=60):\n+        \"\"\"Send blocks to test node and test whether the tip advances.\n+\n+         - add all blocks to our block_store\n+         - send a headers message for the final block\n+         - the on_getheaders handler will ensure that any getheaders are responded to\n+         - if request_block is True: wait for getdata for each of the blocks. The on_getdata handler will\n+           ensure that any getdata messages are responded to\n+         - if success is True: assert that the node's tip advances to the most recent block\n+         - if success is False: assert that the node's tip doesn't advance\n+         - if reject_code and reject_reason are set: assert that the correct reject message is received\"\"\"\n+\n+        with mininode_lock:\n+            self.reject_code_received = None\n+            self.reject_reason_received = None\n+\n+        for block in blocks:\n+            self.block_store[block.sha256] = block\n+\n+        self.send_message(msg_headers([blocks[-1]]))\n+\n+        if request_block:\n+            wait_until(lambda: blocks[-1].sha256 in self.getdata_requests, timeout=timeout, lock=mininode_lock)\n+\n+        if success:\n+            wait_until(lambda: rpc.getbestblockhash() == blocks[-1].hash, timeout=timeout)\n+        else:\n+            assert rpc.getbestblockhash() != blocks[-1].hash\n+\n+        if reject_code is not None:\n+            wait_until(lambda: self.reject_code_received == reject_code, lock=mininode_lock)\n+        if reject_reason is not None:\n+            wait_until(lambda: self.reject_reason_received == reject_reason, lock=mininode_lock)\n+\n+    def send_txs_and_test(self, txs, rpc, success=True, reject_code=None, reject_reason=None):\n+        \"\"\"Send txs to test node and test whether they're accepted to the mempool.\n+\n+         - add all txs to our tx_store\n+         - send tx messages for all txs\n+         - if success is True: assert that the tx is accepted to the mempool\n+         - if success is False: assert that the tx is not accepted to the mempool\n+         - if reject_code and reject_reason are set: assert that the correct reject message is received.\"\"\"\n+\n+        with mininode_lock:\n+            self.reject_code_received = None\n+            self.reject_reason_received = None\n+\n+        for tx in txs:\n+            self.tx_store[tx.sha256] = tx",
      "path": "test/functional/test_framework/mininode.py",
      "position": null,
      "original_position": 155,
      "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "original_commit_id": "86dec601882e82a867daf856e51f18df1ce1ec3c",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Add P2PStub class\"\r\n\r\nNeed mininode_lock?",
      "created_at": "2017-12-19T19:40:48Z",
      "updated_at": "2018-01-30T14:31:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r157855530",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157855530"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 571,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157858302",
      "pull_request_review_id": 84555442,
      "id": 157858302,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Nzg1ODMwMg==",
      "diff_hunk": "@@ -32,13 +28,10 @@ def run_test(self):\n         test.run()\n \n     def get_tests(self):\n-        if self.tip is None:",
      "path": "test/functional/invalidtxrequest.py",
      "position": null,
      "original_position": 32,
      "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "original_commit_id": "534e6092b4bbb544587c743bc03f855799593df9",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit `[tests] Fix flake8 warnings in invalidtxrequest`\r\n\r\nI see you are removing `self.tip` variable entirely in next commit, but it seems safer not to drop the `None` condition in this commit, which is supposed to only be fixing flake8 warnings.",
      "created_at": "2017-12-19T19:51:23Z",
      "updated_at": "2018-01-30T14:31:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r157858302",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157858302"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 35,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157859281",
      "pull_request_review_id": 84555442,
      "id": 157859281,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Nzg1OTI4MQ==",
      "diff_hunk": "@@ -440,3 +454,136 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PStub(P2PInterface):",
      "path": "test/functional/test_framework/mininode.py",
      "position": null,
      "original_position": 42,
      "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "original_commit_id": "86dec601882e82a867daf856e51f18df1ce1ec3c",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Add P2PStub class\"\r\n\r\nName like `P2PDataStore` might more suggestive than `P2PStub`",
      "created_at": "2017-12-19T19:55:23Z",
      "updated_at": "2018-01-30T14:31:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r157859281",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157859281"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 458,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157859689",
      "pull_request_review_id": 84555442,
      "id": 157859689,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Nzg1OTY4OQ==",
      "diff_hunk": "@@ -8,55 +8,46 @@\n import time\n \n from test_framework.blocktools import create_block, create_coinbase, create_transaction\n-from test_framework.comptool import RejectResult, TestInstance, TestManager\n from test_framework.messages import COIN\n-from test_framework.mininode import network_thread_start\n-from test_framework.test_framework import ComparisonTestFramework\n+from test_framework.mininode import network_thread_start, P2PStub\n+from test_framework.test_framework import BitcoinTestFramework\n \n-class InvalidTxRequestTest(ComparisonTestFramework):\n+class InvalidTxRequestTest(BitcoinTestFramework):\n \n     def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n+        self.extra_args = [[\"-whitelist=127.0.0.1\"]]\n \n     def run_test(self):\n-        test = TestManager(self, self.options.tmpdir)\n-        test.add_all_connections(self.nodes)\n-        self.tip = None\n-        self.block_time = None\n+        # Add p2p connection to node0\n+        node = self.nodes[0]  # convenience reference to the node\n+        node.add_p2p_connection(P2PStub())\n+\n         network_thread_start()\n-        test.run()\n+        node.p2p.wait_for_verack()\n \n-    def get_tests(self):\n-        self.tip = int(\"0x\" + self.nodes[0].getbestblockhash(), 0)\n-        self.block_time = int(time.time()) + 1\n+        tip = int(\"0x\" + self.nodes[0].getbestblockhash(), 0)",
      "path": "test/functional/invalidtxrequest.py",
      "position": null,
      "original_position": 35,
      "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "original_commit_id": "1c5aa93034a7ad213727ffdfb1bb71eab20f1f80",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Change invalidtxrequest to use BitcoinTestFramework\"\r\n\r\nCould do `int(self.nodes[0].getbestblockhash(), 16)` and drop \"0x\" prefix, I think.",
      "created_at": "2017-12-19T19:57:12Z",
      "updated_at": "2018-01-30T14:31:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r157859689",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157859689"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157860199",
      "pull_request_review_id": 84555442,
      "id": 157860199,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Nzg2MDE5OQ==",
      "diff_hunk": "@@ -8,55 +8,46 @@\n import time\n \n from test_framework.blocktools import create_block, create_coinbase, create_transaction\n-from test_framework.comptool import RejectResult, TestInstance, TestManager\n from test_framework.messages import COIN\n-from test_framework.mininode import network_thread_start\n-from test_framework.test_framework import ComparisonTestFramework\n+from test_framework.mininode import network_thread_start, P2PStub\n+from test_framework.test_framework import BitcoinTestFramework\n \n-class InvalidTxRequestTest(ComparisonTestFramework):\n+class InvalidTxRequestTest(BitcoinTestFramework):\n \n     def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n+        self.extra_args = [[\"-whitelist=127.0.0.1\"]]\n \n     def run_test(self):\n-        test = TestManager(self, self.options.tmpdir)\n-        test.add_all_connections(self.nodes)\n-        self.tip = None\n-        self.block_time = None\n+        # Add p2p connection to node0\n+        node = self.nodes[0]  # convenience reference to the node\n+        node.add_p2p_connection(P2PStub())\n+\n         network_thread_start()\n-        test.run()\n+        node.p2p.wait_for_verack()\n \n-    def get_tests(self):\n-        self.tip = int(\"0x\" + self.nodes[0].getbestblockhash(), 0)\n-        self.block_time = int(time.time()) + 1\n+        tip = int(\"0x\" + self.nodes[0].getbestblockhash(), 0)\n+        block_time = int(time.time()) + 1\n \n         self.log.info(\"Create a new block with an anyone-can-spend coinbase.\")\n         height = 1\n-        block = create_block(self.tip, create_coinbase(height), self.block_time)\n-        self.block_time += 1\n+        block = create_block(tip, create_coinbase(height), block_time)\n+        block_time += 1\n         block.solve()\n         # Save the coinbase for later\n-        self.block1 = block\n-        self.tip = block.sha256\n+        block1 = block\n+        tip = block.sha256\n         height += 1\n-        yield TestInstance([[block, True]])\n+        node.p2p.send_blocks_and_test([block], node, True)",
      "path": "test/functional/invalidtxrequest.py",
      "position": null,
      "original_position": 52,
      "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "original_commit_id": "1c5aa93034a7ad213727ffdfb1bb71eab20f1f80",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Change invalidtxrequest to use BitcoinTestFramework\"\r\n\r\nMaybe drop `True` since that seems to be the default value, or write `success=True`. Plain `True` by itself doesn't convey anything and just seems suspicious.",
      "created_at": "2017-12-19T19:59:15Z",
      "updated_at": "2018-01-30T14:31:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r157860199",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157860199"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157860702",
      "pull_request_review_id": 84555442,
      "id": 157860702,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Nzg2MDcwMg==",
      "diff_hunk": "@@ -8,55 +8,46 @@\n import time\n \n from test_framework.blocktools import create_block, create_coinbase, create_transaction\n-from test_framework.comptool import RejectResult, TestInstance, TestManager\n from test_framework.messages import COIN\n-from test_framework.mininode import network_thread_start\n-from test_framework.test_framework import ComparisonTestFramework\n+from test_framework.mininode import network_thread_start, P2PStub\n+from test_framework.test_framework import BitcoinTestFramework\n \n-class InvalidTxRequestTest(ComparisonTestFramework):\n+class InvalidTxRequestTest(BitcoinTestFramework):\n \n     def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n+        self.extra_args = [[\"-whitelist=127.0.0.1\"]]\n \n     def run_test(self):\n-        test = TestManager(self, self.options.tmpdir)\n-        test.add_all_connections(self.nodes)\n-        self.tip = None\n-        self.block_time = None\n+        # Add p2p connection to node0\n+        node = self.nodes[0]  # convenience reference to the node\n+        node.add_p2p_connection(P2PStub())\n+\n         network_thread_start()\n-        test.run()\n+        node.p2p.wait_for_verack()\n \n-    def get_tests(self):\n-        self.tip = int(\"0x\" + self.nodes[0].getbestblockhash(), 0)\n-        self.block_time = int(time.time()) + 1\n+        tip = int(\"0x\" + self.nodes[0].getbestblockhash(), 0)\n+        block_time = int(time.time()) + 1\n \n         self.log.info(\"Create a new block with an anyone-can-spend coinbase.\")\n         height = 1\n-        block = create_block(self.tip, create_coinbase(height), self.block_time)\n-        self.block_time += 1\n+        block = create_block(tip, create_coinbase(height), block_time)\n+        block_time += 1\n         block.solve()\n         # Save the coinbase for later\n-        self.block1 = block\n-        self.tip = block.sha256\n+        block1 = block\n+        tip = block.sha256\n         height += 1\n-        yield TestInstance([[block, True]])\n+        node.p2p.send_blocks_and_test([block], node, True)\n \n         self.log.info(\"Mature the block.\")\n-        test = TestInstance(sync_every_block=False)\n-        for i in range(100):\n-            block = create_block(self.tip, create_coinbase(height), self.block_time)\n-            block.solve()\n-            self.tip = block.sha256\n-            self.block_time += 1\n-            test.blocks_and_transactions.append([block, True])\n-            height += 1\n-        yield test\n+        self.nodes[0].generate(100)\n \n         # b'\\x64' is OP_NOTIF\n         # Transaction will be rejected with code 16 (REJECT_INVALID)\n-        tx1 = create_transaction(self.block1.vtx[0], 0, b'\\x64', 50 * COIN - 12000)\n-        yield TestInstance([[tx1, RejectResult(16, b'mandatory-script-verify-flag-failed')]])\n+        tx1 = create_transaction(block1.vtx[0], 0, b'\\x64', 50 * COIN - 12000)\n+        node.p2p.send_txs_and_test([tx1], node, False, 16, b'mandatory-script-verify-flag-failed (Invalid OP_IF construction)')",
      "path": "test/functional/invalidtxrequest.py",
      "position": null,
      "original_position": 71,
      "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "original_commit_id": "1c5aa93034a7ad213727ffdfb1bb71eab20f1f80",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Change invalidtxrequest to use BitcoinTestFramework\"\r\n\r\nMaybe add `success=`, `reject_code=`, keywords for future proofing and clarity.",
      "created_at": "2017-12-19T20:01:31Z",
      "updated_at": "2018-01-30T14:31:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r157860702",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/157860702"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 50,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/158123643",
      "pull_request_review_id": 84882686,
      "id": 158123643,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODEyMzY0Mw==",
      "diff_hunk": "@@ -8,55 +8,46 @@\n import time\n \n from test_framework.blocktools import create_block, create_coinbase, create_transaction\n-from test_framework.comptool import RejectResult, TestInstance, TestManager\n from test_framework.messages import COIN\n-from test_framework.mininode import network_thread_start\n-from test_framework.test_framework import ComparisonTestFramework\n+from test_framework.mininode import network_thread_start, P2PStub\n+from test_framework.test_framework import BitcoinTestFramework\n \n-class InvalidTxRequestTest(ComparisonTestFramework):\n+class InvalidTxRequestTest(BitcoinTestFramework):\n \n     def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n+        self.extra_args = [[\"-whitelist=127.0.0.1\"]]\n \n     def run_test(self):\n-        test = TestManager(self, self.options.tmpdir)\n-        test.add_all_connections(self.nodes)\n-        self.tip = None\n-        self.block_time = None\n+        # Add p2p connection to node0\n+        node = self.nodes[0]  # convenience reference to the node\n+        node.add_p2p_connection(P2PStub())\n+\n         network_thread_start()\n-        test.run()\n+        node.p2p.wait_for_verack()\n \n-    def get_tests(self):\n-        self.tip = int(\"0x\" + self.nodes[0].getbestblockhash(), 0)\n-        self.block_time = int(time.time()) + 1\n+        tip = int(\"0x\" + self.nodes[0].getbestblockhash(), 0)\n+        block_time = int(time.time()) + 1",
      "path": "test/functional/invalidtxrequest.py",
      "position": null,
      "original_position": 36,
      "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "original_commit_id": "1c5aa93034a7ad213727ffdfb1bb71eab20f1f80",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Change invalidtxrequest to use BitcoinTestFramework\"\r\n\r\nCould maybe switch from time.time() to best_block[\"time\"] to be consistent with invalidblockrequest change in #11172. It seems better in a test environment, to be using information from the environment instead of calling out to the OS.",
      "created_at": "2017-12-20T20:07:43Z",
      "updated_at": "2018-01-30T14:31:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r158123643",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/158123643"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 31,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162058516",
      "pull_request_review_id": 89449917,
      "id": 162058516,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjA1ODUxNg==",
      "diff_hunk": "@@ -32,13 +28,10 @@ def run_test(self):\n         test.run()\n \n     def get_tests(self):\n-        if self.tip is None:",
      "path": "test/functional/invalidtxrequest.py",
      "position": null,
      "original_position": 32,
      "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "original_commit_id": "534e6092b4bbb544587c743bc03f855799593df9",
      "in_reply_to_id": 157858302,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`self.tip` is set to `None` in `run_test()` and then `run()` is called, which calls `get_tests()`, so `self.tip` has to be `None` at this point.\r\n\r\nSo yes, this isn't strictly fixing a flake8 warning, but it's a safe tidy-up which is removed in the next commit.",
      "created_at": "2018-01-17T14:05:37Z",
      "updated_at": "2018-01-30T14:31:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r162058516",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162058516"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 35,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162422447",
      "pull_request_review_id": 89877438,
      "id": 162422447,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjQyMjQ0Nw==",
      "diff_hunk": "@@ -8,55 +8,46 @@\n import time\n \n from test_framework.blocktools import create_block, create_coinbase, create_transaction\n-from test_framework.comptool import RejectResult, TestInstance, TestManager\n from test_framework.messages import COIN\n-from test_framework.mininode import network_thread_start\n-from test_framework.test_framework import ComparisonTestFramework\n+from test_framework.mininode import network_thread_start, P2PStub\n+from test_framework.test_framework import BitcoinTestFramework\n \n-class InvalidTxRequestTest(ComparisonTestFramework):\n+class InvalidTxRequestTest(BitcoinTestFramework):\n \n     def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n+        self.extra_args = [[\"-whitelist=127.0.0.1\"]]\n \n     def run_test(self):\n-        test = TestManager(self, self.options.tmpdir)\n-        test.add_all_connections(self.nodes)\n-        self.tip = None\n-        self.block_time = None\n+        # Add p2p connection to node0\n+        node = self.nodes[0]  # convenience reference to the node\n+        node.add_p2p_connection(P2PStub())\n+\n         network_thread_start()\n-        test.run()\n+        node.p2p.wait_for_verack()\n \n-    def get_tests(self):\n-        self.tip = int(\"0x\" + self.nodes[0].getbestblockhash(), 0)\n-        self.block_time = int(time.time()) + 1\n+        tip = int(\"0x\" + self.nodes[0].getbestblockhash(), 0)",
      "path": "test/functional/invalidtxrequest.py",
      "position": null,
      "original_position": 35,
      "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "original_commit_id": "1c5aa93034a7ad213727ffdfb1bb71eab20f1f80",
      "in_reply_to_id": 157859689,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "agree. That's better",
      "created_at": "2018-01-18T18:01:46Z",
      "updated_at": "2018-01-30T14:31:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r162422447",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162422447"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162422751",
      "pull_request_review_id": 89877797,
      "id": 162422751,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjQyMjc1MQ==",
      "diff_hunk": "@@ -8,55 +8,46 @@\n import time\n \n from test_framework.blocktools import create_block, create_coinbase, create_transaction\n-from test_framework.comptool import RejectResult, TestInstance, TestManager\n from test_framework.messages import COIN\n-from test_framework.mininode import network_thread_start\n-from test_framework.test_framework import ComparisonTestFramework\n+from test_framework.mininode import network_thread_start, P2PStub\n+from test_framework.test_framework import BitcoinTestFramework\n \n-class InvalidTxRequestTest(ComparisonTestFramework):\n+class InvalidTxRequestTest(BitcoinTestFramework):\n \n     def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n+        self.extra_args = [[\"-whitelist=127.0.0.1\"]]\n \n     def run_test(self):\n-        test = TestManager(self, self.options.tmpdir)\n-        test.add_all_connections(self.nodes)\n-        self.tip = None\n-        self.block_time = None\n+        # Add p2p connection to node0\n+        node = self.nodes[0]  # convenience reference to the node\n+        node.add_p2p_connection(P2PStub())\n+\n         network_thread_start()\n-        test.run()\n+        node.p2p.wait_for_verack()\n \n-    def get_tests(self):\n-        self.tip = int(\"0x\" + self.nodes[0].getbestblockhash(), 0)\n-        self.block_time = int(time.time()) + 1\n+        tip = int(\"0x\" + self.nodes[0].getbestblockhash(), 0)\n+        block_time = int(time.time()) + 1\n \n         self.log.info(\"Create a new block with an anyone-can-spend coinbase.\")\n         height = 1\n-        block = create_block(self.tip, create_coinbase(height), self.block_time)\n-        self.block_time += 1\n+        block = create_block(tip, create_coinbase(height), block_time)\n+        block_time += 1\n         block.solve()\n         # Save the coinbase for later\n-        self.block1 = block\n-        self.tip = block.sha256\n+        block1 = block\n+        tip = block.sha256\n         height += 1\n-        yield TestInstance([[block, True]])\n+        node.p2p.send_blocks_and_test([block], node, True)",
      "path": "test/functional/invalidtxrequest.py",
      "position": null,
      "original_position": 52,
      "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "original_commit_id": "1c5aa93034a7ad213727ffdfb1bb71eab20f1f80",
      "in_reply_to_id": 157860199,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "yes",
      "created_at": "2018-01-18T18:03:02Z",
      "updated_at": "2018-01-30T14:31:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r162422751",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162422751"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162424116",
      "pull_request_review_id": 89879272,
      "id": 162424116,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjQyNDExNg==",
      "diff_hunk": "@@ -8,55 +8,46 @@\n import time\n \n from test_framework.blocktools import create_block, create_coinbase, create_transaction\n-from test_framework.comptool import RejectResult, TestInstance, TestManager\n from test_framework.messages import COIN\n-from test_framework.mininode import network_thread_start\n-from test_framework.test_framework import ComparisonTestFramework\n+from test_framework.mininode import network_thread_start, P2PStub\n+from test_framework.test_framework import BitcoinTestFramework\n \n-class InvalidTxRequestTest(ComparisonTestFramework):\n+class InvalidTxRequestTest(BitcoinTestFramework):\n \n     def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n+        self.extra_args = [[\"-whitelist=127.0.0.1\"]]\n \n     def run_test(self):\n-        test = TestManager(self, self.options.tmpdir)\n-        test.add_all_connections(self.nodes)\n-        self.tip = None\n-        self.block_time = None\n+        # Add p2p connection to node0\n+        node = self.nodes[0]  # convenience reference to the node\n+        node.add_p2p_connection(P2PStub())\n+\n         network_thread_start()\n-        test.run()\n+        node.p2p.wait_for_verack()\n \n-    def get_tests(self):\n-        self.tip = int(\"0x\" + self.nodes[0].getbestblockhash(), 0)\n-        self.block_time = int(time.time()) + 1\n+        tip = int(\"0x\" + self.nodes[0].getbestblockhash(), 0)\n+        block_time = int(time.time()) + 1\n \n         self.log.info(\"Create a new block with an anyone-can-spend coinbase.\")\n         height = 1\n-        block = create_block(self.tip, create_coinbase(height), self.block_time)\n-        self.block_time += 1\n+        block = create_block(tip, create_coinbase(height), block_time)\n+        block_time += 1\n         block.solve()\n         # Save the coinbase for later\n-        self.block1 = block\n-        self.tip = block.sha256\n+        block1 = block\n+        tip = block.sha256\n         height += 1\n-        yield TestInstance([[block, True]])\n+        node.p2p.send_blocks_and_test([block], node, True)\n \n         self.log.info(\"Mature the block.\")\n-        test = TestInstance(sync_every_block=False)\n-        for i in range(100):\n-            block = create_block(self.tip, create_coinbase(height), self.block_time)\n-            block.solve()\n-            self.tip = block.sha256\n-            self.block_time += 1\n-            test.blocks_and_transactions.append([block, True])\n-            height += 1\n-        yield test\n+        self.nodes[0].generate(100)\n \n         # b'\\x64' is OP_NOTIF\n         # Transaction will be rejected with code 16 (REJECT_INVALID)\n-        tx1 = create_transaction(self.block1.vtx[0], 0, b'\\x64', 50 * COIN - 12000)\n-        yield TestInstance([[tx1, RejectResult(16, b'mandatory-script-verify-flag-failed')]])\n+        tx1 = create_transaction(block1.vtx[0], 0, b'\\x64', 50 * COIN - 12000)\n+        node.p2p.send_txs_and_test([tx1], node, False, 16, b'mandatory-script-verify-flag-failed (Invalid OP_IF construction)')",
      "path": "test/functional/invalidtxrequest.py",
      "position": null,
      "original_position": 71,
      "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "original_commit_id": "1c5aa93034a7ad213727ffdfb1bb71eab20f1f80",
      "in_reply_to_id": 157860702,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "yes",
      "created_at": "2018-01-18T18:07:55Z",
      "updated_at": "2018-01-30T14:31:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r162424116",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162424116"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 50,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162424146",
      "pull_request_review_id": 89879316,
      "id": 162424146,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjQyNDE0Ng==",
      "diff_hunk": "@@ -440,3 +454,136 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PStub(P2PInterface):",
      "path": "test/functional/test_framework/mininode.py",
      "position": null,
      "original_position": 42,
      "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "original_commit_id": "86dec601882e82a867daf856e51f18df1ce1ec3c",
      "in_reply_to_id": 157859281,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ok, changed to `P2PDataStore`",
      "created_at": "2018-01-18T18:08:04Z",
      "updated_at": "2018-01-30T14:31:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r162424146",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162424146"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 458,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162458575",
      "pull_request_review_id": 89920463,
      "id": 162458575,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjQ1ODU3NQ==",
      "diff_hunk": "@@ -440,3 +454,136 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PStub(P2PInterface):\n+    \"\"\"A P2P Stub class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        self.block_store = OrderedDict()",
      "path": "test/functional/test_framework/mininode.py",
      "position": null,
      "original_position": 51,
      "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "original_commit_id": "86dec601882e82a867daf856e51f18df1ce1ec3c",
      "in_reply_to_id": 157851175,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "yes - makes more sense.",
      "created_at": "2018-01-18T20:21:36Z",
      "updated_at": "2018-01-30T14:31:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r162458575",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162458575"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 467,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162458847",
      "pull_request_review_id": 89920801,
      "id": 162458847,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjQ1ODg0Nw==",
      "diff_hunk": "@@ -440,3 +454,136 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PStub(P2PInterface):\n+    \"\"\"A P2P Stub class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        self.block_store = OrderedDict()",
      "path": "test/functional/test_framework/mininode.py",
      "position": null,
      "original_position": 51,
      "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "original_commit_id": "86dec601882e82a867daf856e51f18df1ce1ec3c",
      "in_reply_to_id": 157851682,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "added",
      "created_at": "2018-01-18T20:22:44Z",
      "updated_at": "2018-01-30T14:31:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r162458847",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162458847"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 467,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162458865",
      "pull_request_review_id": 89920822,
      "id": 162458865,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjQ1ODg2NQ==",
      "diff_hunk": "@@ -440,3 +454,136 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PStub(P2PInterface):\n+    \"\"\"A P2P Stub class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        self.block_store = OrderedDict()\n+        self.tx_store = {}",
      "path": "test/functional/test_framework/mininode.py",
      "position": null,
      "original_position": 52,
      "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "original_commit_id": "86dec601882e82a867daf856e51f18df1ce1ec3c",
      "in_reply_to_id": 157851969,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "added",
      "created_at": "2018-01-18T20:22:49Z",
      "updated_at": "2018-01-30T14:31:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r162458865",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162458865"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 471,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162461080",
      "pull_request_review_id": 89923458,
      "id": 162461080,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjQ2MTA4MA==",
      "diff_hunk": "@@ -440,3 +454,127 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PStub(P2PInterface):\n+    \"\"\"A P2P Stub class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        self.block_store = OrderedDict()\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if inv.type == 1 or inv.type == 1 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.tx_store.keys():\n+                    self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif inv.type == 2 or inv.type == 2 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.block_store.keys():\n+                    self.send_message(msg_block(self.block_store[inv.hash]))",
      "path": "test/functional/test_framework/mininode.py",
      "position": null,
      "original_position": 64,
      "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "original_commit_id": "3d2209f3359c241fc06ef37d4bc8bcf1c333f1d4",
      "in_reply_to_id": 156986892,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "taken @ryanofsky's suggested change",
      "created_at": "2018-01-18T20:32:09Z",
      "updated_at": "2018-01-30T14:31:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r162461080",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162461080"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 480,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162461207",
      "pull_request_review_id": 89923605,
      "id": 162461207,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjQ2MTIwNw==",
      "diff_hunk": "@@ -440,3 +454,136 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PStub(P2PInterface):\n+    \"\"\"A P2P Stub class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        self.block_store = OrderedDict()\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if inv.type == 1 or inv.type == 1 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.tx_store.keys():\n+                    self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif inv.type == 2 or inv.type == 2 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.block_store.keys():\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if len(self.block_store) == 0:",
      "path": "test/functional/test_framework/mininode.py",
      "position": null,
      "original_position": 72,
      "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "original_commit_id": "86dec601882e82a867daf856e51f18df1ce1ec3c",
      "in_reply_to_id": 157846565,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "indeed",
      "created_at": "2018-01-18T20:32:46Z",
      "updated_at": "2018-01-30T14:31:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r162461207",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162461207"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 488,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162461266",
      "pull_request_review_id": 89923672,
      "id": 162461266,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjQ2MTI2Ng==",
      "diff_hunk": "@@ -440,3 +454,136 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PStub(P2PInterface):\n+    \"\"\"A P2P Stub class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        self.block_store = OrderedDict()\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if inv.type == 1 or inv.type == 1 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.tx_store.keys():\n+                    self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif inv.type == 2 or inv.type == 2 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.block_store.keys():\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if len(self.block_store) == 0:\n+            return\n+        current_block_header = self.block_store[next(reversed(self.block_store))]\n+\n+        response = msg_headers()\n+        headers_list = [current_block_header]\n+        maxheaders = 2000\n+        while (headers_list[0].sha256 not in locator.vHave):",
      "path": "test/functional/test_framework/mininode.py",
      "position": null,
      "original_position": 79,
      "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "original_commit_id": "86dec601882e82a867daf856e51f18df1ce1ec3c",
      "in_reply_to_id": 157846703,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "removed",
      "created_at": "2018-01-18T20:33:01Z",
      "updated_at": "2018-01-30T14:31:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r162461266",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162461266"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 495,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162461717",
      "pull_request_review_id": 89924170,
      "id": 162461717,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjQ2MTcxNw==",
      "diff_hunk": "@@ -440,3 +454,136 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PStub(P2PInterface):\n+    \"\"\"A P2P Stub class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        self.block_store = OrderedDict()\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if inv.type == 1 or inv.type == 1 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.tx_store.keys():\n+                    self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif inv.type == 2 or inv.type == 2 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.block_store.keys():\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if len(self.block_store) == 0:\n+            return\n+        current_block_header = self.block_store[next(reversed(self.block_store))]\n+\n+        response = msg_headers()\n+        headers_list = [current_block_header]\n+        maxheaders = 2000\n+        while (headers_list[0].sha256 not in locator.vHave):\n+            # Walk back through the block store, adding headers to headers_list\n+            # as we go.\n+            prev_block_hash = headers_list[0].hashPrevBlock\n+            if prev_block_hash in self.block_store:\n+                prev_block_header = self.block_store[prev_block_hash]\n+                headers_list.insert(0, prev_block_header)",
      "path": "test/functional/test_framework/mininode.py",
      "position": null,
      "original_position": 85,
      "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "original_commit_id": "86dec601882e82a867daf856e51f18df1ce1ec3c",
      "in_reply_to_id": 157848246,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "changed",
      "created_at": "2018-01-18T20:34:44Z",
      "updated_at": "2018-01-30T14:31:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r162461717",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162461717"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 501,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162465832",
      "pull_request_review_id": 89928956,
      "id": 162465832,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjQ2NTgzMg==",
      "diff_hunk": "@@ -440,3 +454,136 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PStub(P2PInterface):\n+    \"\"\"A P2P Stub class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        self.block_store = OrderedDict()\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if inv.type == 1 or inv.type == 1 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.tx_store.keys():\n+                    self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif inv.type == 2 or inv.type == 2 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.block_store.keys():\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if len(self.block_store) == 0:\n+            return\n+        current_block_header = self.block_store[next(reversed(self.block_store))]\n+\n+        response = msg_headers()\n+        headers_list = [current_block_header]\n+        maxheaders = 2000\n+        while (headers_list[0].sha256 not in locator.vHave):\n+            # Walk back through the block store, adding headers to headers_list\n+            # as we go.\n+            prev_block_hash = headers_list[0].hashPrevBlock\n+            if prev_block_hash in self.block_store:\n+                prev_block_header = self.block_store[prev_block_hash]\n+                headers_list.insert(0, prev_block_header)\n+            else:\n+                break\n+\n+        # Truncate the list if there are too many headers\n+        headers_list = headers_list[:maxheaders]\n+        hash_list = [x.sha256 for x in headers_list]\n+\n+        # Stop the list at the hash_stop header if found\n+        index = len(headers_list)\n+        if (hash_stop in hash_list):",
      "path": "test/functional/test_framework/mininode.py",
      "position": null,
      "original_position": 95,
      "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "original_commit_id": "86dec601882e82a867daf856e51f18df1ce1ec3c",
      "in_reply_to_id": 157853684,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "yes. This code was copied from an blockstore.py. I've tidied up as you've suggested.",
      "created_at": "2018-01-18T20:51:34Z",
      "updated_at": "2018-01-30T14:31:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r162465832",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162465832"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 511,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162467440",
      "pull_request_review_id": 89930823,
      "id": 162467440,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjQ2NzQ0MA==",
      "diff_hunk": "@@ -440,3 +454,136 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PStub(P2PInterface):\n+    \"\"\"A P2P Stub class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        self.block_store = OrderedDict()\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if inv.type == 1 or inv.type == 1 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.tx_store.keys():\n+                    self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif inv.type == 2 or inv.type == 2 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.block_store.keys():\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if len(self.block_store) == 0:\n+            return\n+        current_block_header = self.block_store[next(reversed(self.block_store))]\n+\n+        response = msg_headers()\n+        headers_list = [current_block_header]\n+        maxheaders = 2000\n+        while (headers_list[0].sha256 not in locator.vHave):\n+            # Walk back through the block store, adding headers to headers_list\n+            # as we go.\n+            prev_block_hash = headers_list[0].hashPrevBlock\n+            if prev_block_hash in self.block_store:\n+                prev_block_header = self.block_store[prev_block_hash]\n+                headers_list.insert(0, prev_block_header)\n+            else:\n+                break\n+\n+        # Truncate the list if there are too many headers\n+        headers_list = headers_list[:maxheaders]\n+        hash_list = [x.sha256 for x in headers_list]\n+\n+        # Stop the list at the hash_stop header if found\n+        index = len(headers_list)\n+        if (hash_stop in hash_list):\n+            index = hash_list.index(hash_stop) + 1\n+        response.headers = headers_list[:index]\n+\n+        if response is not None:\n+            self.send_message(response)\n+\n+    def on_reject(self, message):\n+        \"\"\"Store reject reason and code for testing.\"\"\"\n+        self.reject_code_received = message.code\n+        self.reject_reason_received = message.reason\n+\n+    def send_blocks_and_test(self, blocks, rpc, success=True, request_block=True, reject_code=None, reject_reason=None, timeout=60):\n+        \"\"\"Send blocks to test node and test whether the tip advances.\n+\n+         - add all blocks to our block_store\n+         - send a headers message for the final block\n+         - the on_getheaders handler will ensure that any getheaders are responded to\n+         - if request_block is True: wait for getdata for each of the blocks. The on_getdata handler will\n+           ensure that any getdata messages are responded to\n+         - if success is True: assert that the node's tip advances to the most recent block\n+         - if success is False: assert that the node's tip doesn't advance\n+         - if reject_code and reject_reason are set: assert that the correct reject message is received\"\"\"\n+\n+        with mininode_lock:\n+            self.reject_code_received = None\n+            self.reject_reason_received = None\n+\n+        for block in blocks:\n+            self.block_store[block.sha256] = block",
      "path": "test/functional/test_framework/mininode.py",
      "position": null,
      "original_position": 124,
      "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "original_commit_id": "86dec601882e82a867daf856e51f18df1ce1ec3c",
      "in_reply_to_id": 157849606,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "added mininode_lock. I don't think the assert is necessary - we may wish to send the same block over the same P2P interface more than once.",
      "created_at": "2018-01-18T20:58:10Z",
      "updated_at": "2018-01-30T14:31:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r162467440",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162467440"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 540,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162467464",
      "pull_request_review_id": 89930849,
      "id": 162467464,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjQ2NzQ2NA==",
      "diff_hunk": "@@ -440,3 +454,136 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PStub(P2PInterface):\n+    \"\"\"A P2P Stub class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        self.block_store = OrderedDict()\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if inv.type == 1 or inv.type == 1 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.tx_store.keys():\n+                    self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif inv.type == 2 or inv.type == 2 | MSG_WITNESS_FLAG:\n+                if inv.hash in self.block_store.keys():\n+                    self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if len(self.block_store) == 0:\n+            return\n+        current_block_header = self.block_store[next(reversed(self.block_store))]\n+\n+        response = msg_headers()\n+        headers_list = [current_block_header]\n+        maxheaders = 2000\n+        while (headers_list[0].sha256 not in locator.vHave):\n+            # Walk back through the block store, adding headers to headers_list\n+            # as we go.\n+            prev_block_hash = headers_list[0].hashPrevBlock\n+            if prev_block_hash in self.block_store:\n+                prev_block_header = self.block_store[prev_block_hash]\n+                headers_list.insert(0, prev_block_header)\n+            else:\n+                break\n+\n+        # Truncate the list if there are too many headers\n+        headers_list = headers_list[:maxheaders]\n+        hash_list = [x.sha256 for x in headers_list]\n+\n+        # Stop the list at the hash_stop header if found\n+        index = len(headers_list)\n+        if (hash_stop in hash_list):\n+            index = hash_list.index(hash_stop) + 1\n+        response.headers = headers_list[:index]\n+\n+        if response is not None:\n+            self.send_message(response)\n+\n+    def on_reject(self, message):\n+        \"\"\"Store reject reason and code for testing.\"\"\"\n+        self.reject_code_received = message.code\n+        self.reject_reason_received = message.reason\n+\n+    def send_blocks_and_test(self, blocks, rpc, success=True, request_block=True, reject_code=None, reject_reason=None, timeout=60):\n+        \"\"\"Send blocks to test node and test whether the tip advances.\n+\n+         - add all blocks to our block_store\n+         - send a headers message for the final block\n+         - the on_getheaders handler will ensure that any getheaders are responded to\n+         - if request_block is True: wait for getdata for each of the blocks. The on_getdata handler will\n+           ensure that any getdata messages are responded to\n+         - if success is True: assert that the node's tip advances to the most recent block\n+         - if success is False: assert that the node's tip doesn't advance\n+         - if reject_code and reject_reason are set: assert that the correct reject message is received\"\"\"\n+\n+        with mininode_lock:\n+            self.reject_code_received = None\n+            self.reject_reason_received = None\n+\n+        for block in blocks:\n+            self.block_store[block.sha256] = block\n+\n+        self.send_message(msg_headers([blocks[-1]]))\n+\n+        if request_block:\n+            wait_until(lambda: blocks[-1].sha256 in self.getdata_requests, timeout=timeout, lock=mininode_lock)\n+\n+        if success:\n+            wait_until(lambda: rpc.getbestblockhash() == blocks[-1].hash, timeout=timeout)\n+        else:\n+            assert rpc.getbestblockhash() != blocks[-1].hash\n+\n+        if reject_code is not None:\n+            wait_until(lambda: self.reject_code_received == reject_code, lock=mininode_lock)\n+        if reject_reason is not None:\n+            wait_until(lambda: self.reject_reason_received == reject_reason, lock=mininode_lock)\n+\n+    def send_txs_and_test(self, txs, rpc, success=True, reject_code=None, reject_reason=None):\n+        \"\"\"Send txs to test node and test whether they're accepted to the mempool.\n+\n+         - add all txs to our tx_store\n+         - send tx messages for all txs\n+         - if success is True: assert that the tx is accepted to the mempool\n+         - if success is False: assert that the tx is not accepted to the mempool\n+         - if reject_code and reject_reason are set: assert that the correct reject message is received.\"\"\"\n+\n+        with mininode_lock:\n+            self.reject_code_received = None\n+            self.reject_reason_received = None\n+\n+        for tx in txs:\n+            self.tx_store[tx.sha256] = tx",
      "path": "test/functional/test_framework/mininode.py",
      "position": null,
      "original_position": 155,
      "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "original_commit_id": "86dec601882e82a867daf856e51f18df1ce1ec3c",
      "in_reply_to_id": 157855530,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "added",
      "created_at": "2018-01-18T20:58:14Z",
      "updated_at": "2018-01-30T14:31:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r162467464",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162467464"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 571,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162469069",
      "pull_request_review_id": 89932830,
      "id": 162469069,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MjQ2OTA2OQ==",
      "diff_hunk": "@@ -8,55 +8,46 @@\n import time\n \n from test_framework.blocktools import create_block, create_coinbase, create_transaction\n-from test_framework.comptool import RejectResult, TestInstance, TestManager\n from test_framework.messages import COIN\n-from test_framework.mininode import network_thread_start\n-from test_framework.test_framework import ComparisonTestFramework\n+from test_framework.mininode import network_thread_start, P2PStub\n+from test_framework.test_framework import BitcoinTestFramework\n \n-class InvalidTxRequestTest(ComparisonTestFramework):\n+class InvalidTxRequestTest(BitcoinTestFramework):\n \n     def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n+        self.extra_args = [[\"-whitelist=127.0.0.1\"]]\n \n     def run_test(self):\n-        test = TestManager(self, self.options.tmpdir)\n-        test.add_all_connections(self.nodes)\n-        self.tip = None\n-        self.block_time = None\n+        # Add p2p connection to node0\n+        node = self.nodes[0]  # convenience reference to the node\n+        node.add_p2p_connection(P2PStub())\n+\n         network_thread_start()\n-        test.run()\n+        node.p2p.wait_for_verack()\n \n-    def get_tests(self):\n-        self.tip = int(\"0x\" + self.nodes[0].getbestblockhash(), 0)\n-        self.block_time = int(time.time()) + 1\n+        tip = int(\"0x\" + self.nodes[0].getbestblockhash(), 0)\n+        block_time = int(time.time()) + 1",
      "path": "test/functional/invalidtxrequest.py",
      "position": null,
      "original_position": 36,
      "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "original_commit_id": "1c5aa93034a7ad213727ffdfb1bb71eab20f1f80",
      "in_reply_to_id": 158123643,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, good idea",
      "created_at": "2018-01-18T21:04:51Z",
      "updated_at": "2018-01-30T14:31:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r162469069",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/162469069"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 31,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163369999",
      "pull_request_review_id": 90972937,
      "id": 163369999,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MzM2OTk5OQ==",
      "diff_hunk": "@@ -440,3 +454,136 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PDataStore(P2PInterface):\n+    \"\"\"A P2P data store class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        # store of blocks. key is block hash, value is a CBlock object\n+        self.block_store = {}\n+        self.last_block_hash = ''\n+        # store of txs. key is txid, value is a CTransaction object\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_TX and inv.hash in self.tx_store.keys():\n+                self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif (inv.type & MSG_TYPE_MASK) == MSG_BLOCK and inv.hash in self.block_store.keys():\n+                self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if not self.block_store:\n+            return\n+        current_block_header = self.last_block_hash\n+\n+        headers_list = [current_block_header]\n+        maxheaders = 2000\n+        while headers_list[-1].sha256 not in locator.vHave:\n+            # Walk back through the block store, adding headers to headers_list\n+            # as we go.\n+            prev_block_hash = headers_list[-1].hashPrevBlock\n+            if prev_block_hash in self.block_store:\n+                prev_block_header = self.block_store[prev_block_hash]\n+                headers_list.append(prev_block_header)\n+                if prev_block_header.sha256 == hash_stop:\n+                    # if this is gthe hashstop header, stop here",
      "path": "test/functional/test_framework/mininode.py",
      "position": null,
      "original_position": 84,
      "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "original_commit_id": "b987a946aeb8983ef176f41cabbcd55290e3c1f5",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "[tests] Add P2PDataStore class\r\n\r\nTypo \"gthe\"",
      "created_at": "2018-01-23T20:39:34Z",
      "updated_at": "2018-01-30T14:31:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r163369999",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163369999"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 503,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163377563",
      "pull_request_review_id": 90981886,
      "id": 163377563,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MzM3NzU2Mw==",
      "diff_hunk": "@@ -440,3 +454,136 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PDataStore(P2PInterface):\n+    \"\"\"A P2P data store class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        # store of blocks. key is block hash, value is a CBlock object\n+        self.block_store = {}\n+        self.last_block_hash = ''\n+        # store of txs. key is txid, value is a CTransaction object\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_TX and inv.hash in self.tx_store.keys():\n+                self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif (inv.type & MSG_TYPE_MASK) == MSG_BLOCK and inv.hash in self.block_store.keys():\n+                self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if not self.block_store:\n+            return\n+        current_block_header = self.last_block_hash\n+\n+        headers_list = [current_block_header]\n+        maxheaders = 2000\n+        while headers_list[-1].sha256 not in locator.vHave:\n+            # Walk back through the block store, adding headers to headers_list\n+            # as we go.\n+            prev_block_hash = headers_list[-1].hashPrevBlock\n+            if prev_block_hash in self.block_store:\n+                prev_block_header = self.block_store[prev_block_hash]\n+                headers_list.append(prev_block_header)\n+                if prev_block_header.sha256 == hash_stop:\n+                    # if this is gthe hashstop header, stop here",
      "path": "test/functional/test_framework/mininode.py",
      "position": null,
      "original_position": 84,
      "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "original_commit_id": "b987a946aeb8983ef176f41cabbcd55290e3c1f5",
      "in_reply_to_id": 163369999,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "fixed",
      "created_at": "2018-01-23T21:09:45Z",
      "updated_at": "2018-01-30T14:31:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r163377563",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163377563"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 503,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163599441",
      "pull_request_review_id": 91237918,
      "id": 163599441,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MzU5OTQ0MQ==",
      "diff_hunk": "@@ -440,3 +454,136 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PDataStore(P2PInterface):\n+    \"\"\"A P2P data store class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        # store of blocks. key is block hash, value is a CBlock object\n+        self.block_store = {}\n+        self.last_block_hash = ''\n+        # store of txs. key is txid, value is a CTransaction object\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_TX and inv.hash in self.tx_store.keys():\n+                self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif (inv.type & MSG_TYPE_MASK) == MSG_BLOCK and inv.hash in self.block_store.keys():\n+                self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if not self.block_store:\n+            return\n+        current_block_header = self.last_block_hash\n+\n+        headers_list = [current_block_header]\n+        maxheaders = 2000\n+        while headers_list[-1].sha256 not in locator.vHave:",
      "path": "test/functional/test_framework/mininode.py",
      "position": null,
      "original_position": 85,
      "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "original_commit_id": "c9772a83644e3c212d87dd0866384533054923a0",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "the type is already a hash (i.e. int)\r\n```\r\nAttributeError: 'int' object has no attribute 'sha256'",
      "created_at": "2018-01-24T16:24:33Z",
      "updated_at": "2018-01-30T14:31:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r163599441",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163599441"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 496,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163603978",
      "pull_request_review_id": 91243444,
      "id": 163603978,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MzYwMzk3OA==",
      "diff_hunk": "@@ -440,3 +454,136 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PDataStore(P2PInterface):\n+    \"\"\"A P2P data store class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        # store of blocks. key is block hash, value is a CBlock object\n+        self.block_store = {}\n+        self.last_block_hash = ''\n+        # store of txs. key is txid, value is a CTransaction object\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_TX and inv.hash in self.tx_store.keys():\n+                self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif (inv.type & MSG_TYPE_MASK) == MSG_BLOCK and inv.hash in self.block_store.keys():\n+                self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if not self.block_store:\n+            return\n+        current_block_header = self.last_block_hash\n+\n+        headers_list = [current_block_header]\n+        maxheaders = 2000\n+        while headers_list[-1].sha256 not in locator.vHave:",
      "path": "test/functional/test_framework/mininode.py",
      "position": null,
      "original_position": 85,
      "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "original_commit_id": "c9772a83644e3c212d87dd0866384533054923a0",
      "in_reply_to_id": 163599441,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks Marco. This was a bug introduced when changing from an orderedDict to just storing the last_block_hash in the P2PDataStore class. Only hit on travis because of a timing window.\r\n\r\nThis is now fixed.",
      "created_at": "2018-01-24T16:38:51Z",
      "updated_at": "2018-01-30T14:31:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r163603978",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163603978"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 496,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163703787",
      "pull_request_review_id": 91360476,
      "id": 163703787,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MzcwMzc4Nw==",
      "diff_hunk": "@@ -440,3 +454,135 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PDataStore(P2PInterface):\n+    \"\"\"A P2P data store class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        # store of blocks. key is block hash, value is a CBlock object\n+        self.block_store = {}\n+        self.last_block_hash = ''\n+        # store of txs. key is txid, value is a CTransaction object\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_TX and inv.hash in self.tx_store.keys():\n+                self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif (inv.type & MSG_TYPE_MASK) == MSG_BLOCK and inv.hash in self.block_store.keys():\n+                self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if not self.block_store:\n+            return\n+\n+        headers_list = [self.block_store[self.last_block_hash]]\n+        maxheaders = 2000\n+        while headers_list[-1].sha256 not in locator.vHave:\n+            # Walk back through the block store, adding headers to headers_list\n+            # as we go.\n+            prev_block_hash = headers_list[-1].hashPrevBlock\n+            if prev_block_hash in self.block_store:\n+                prev_block_header = self.block_store[prev_block_hash]\n+                headers_list.append(prev_block_header)\n+                if prev_block_header.sha256 == hash_stop:\n+                    # if this is the hashstop header, stop here\n+                    break\n+            else:\n+                break\n+\n+        # Truncate the list if there are too many headers\n+        headers_list = headers_list[:-maxheaders - 1:-1]",
      "path": "test/functional/test_framework/mininode.py",
      "position": null,
      "original_position": 98,
      "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "original_commit_id": "949074892393a683f4f56e1a162ec1397563e153",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This will send the headers in the opposite order of what the protocol requires?",
      "created_at": "2018-01-24T22:52:12Z",
      "updated_at": "2018-01-30T14:31:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r163703787",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163703787"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 511,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163703992",
      "pull_request_review_id": 91360713,
      "id": 163703992,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MzcwMzk5Mg==",
      "diff_hunk": "@@ -440,3 +454,135 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PDataStore(P2PInterface):\n+    \"\"\"A P2P data store class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        # store of blocks. key is block hash, value is a CBlock object\n+        self.block_store = {}\n+        self.last_block_hash = ''\n+        # store of txs. key is txid, value is a CTransaction object\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_TX and inv.hash in self.tx_store.keys():\n+                self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif (inv.type & MSG_TYPE_MASK) == MSG_BLOCK and inv.hash in self.block_store.keys():\n+                self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if not self.block_store:\n+            return\n+\n+        headers_list = [self.block_store[self.last_block_hash]]\n+        maxheaders = 2000\n+        while headers_list[-1].sha256 not in locator.vHave:\n+            # Walk back through the block store, adding headers to headers_list\n+            # as we go.\n+            prev_block_hash = headers_list[-1].hashPrevBlock\n+            if prev_block_hash in self.block_store:\n+                prev_block_header = self.block_store[prev_block_hash]\n+                headers_list.append(prev_block_header)\n+                if prev_block_header.sha256 == hash_stop:\n+                    # if this is the hashstop header, stop here\n+                    break\n+            else:\n+                break\n+\n+        # Truncate the list if there are too many headers\n+        headers_list = headers_list[:-maxheaders - 1:-1]\n+        response = msg_headers(headers_list)\n+\n+        if response is not None:",
      "path": "test/functional/test_framework/mininode.py",
      "position": 104,
      "original_position": 101,
      "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "original_commit_id": "949074892393a683f4f56e1a162ec1397563e153",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't see how this could be None",
      "created_at": "2018-01-24T22:53:08Z",
      "updated_at": "2018-01-30T14:31:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r163703992",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163703992"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 514,
      "original_line": 514,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163704370",
      "pull_request_review_id": 91361173,
      "id": 163704370,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MzcwNDM3MA==",
      "diff_hunk": "@@ -440,3 +454,135 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PDataStore(P2PInterface):\n+    \"\"\"A P2P data store class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        # store of blocks. key is block hash, value is a CBlock object\n+        self.block_store = {}\n+        self.last_block_hash = ''\n+        # store of txs. key is txid, value is a CTransaction object\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_TX and inv.hash in self.tx_store.keys():\n+                self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif (inv.type & MSG_TYPE_MASK) == MSG_BLOCK and inv.hash in self.block_store.keys():\n+                self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if not self.block_store:\n+            return\n+\n+        headers_list = [self.block_store[self.last_block_hash]]\n+        maxheaders = 2000\n+        while headers_list[-1].sha256 not in locator.vHave:\n+            # Walk back through the block store, adding headers to headers_list\n+            # as we go.\n+            prev_block_hash = headers_list[-1].hashPrevBlock\n+            if prev_block_hash in self.block_store:\n+                prev_block_header = self.block_store[prev_block_hash]\n+                headers_list.append(prev_block_header)\n+                if prev_block_header.sha256 == hash_stop:\n+                    # if this is the hashstop header, stop here\n+                    break\n+            else:\n+                break\n+\n+        # Truncate the list if there are too many headers\n+        headers_list = headers_list[:-maxheaders - 1:-1]\n+        response = msg_headers(headers_list)\n+\n+        if response is not None:",
      "path": "test/functional/test_framework/mininode.py",
      "position": 104,
      "original_position": 101,
      "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "original_commit_id": "949074892393a683f4f56e1a162ec1397563e153",
      "in_reply_to_id": 163703992,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Couldn't you use the existing blockstore code? I know that for the purpose of this test saving blocks to disk twice is overkill, but by reducing the code and diff, wouldn't that be preferable?",
      "created_at": "2018-01-24T22:55:10Z",
      "updated_at": "2018-01-30T14:31:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r163704370",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163704370"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 514,
      "original_line": 514,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163717494",
      "pull_request_review_id": 91376023,
      "id": 163717494,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MzcxNzQ5NA==",
      "diff_hunk": "@@ -440,3 +454,135 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PDataStore(P2PInterface):\n+    \"\"\"A P2P data store class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        # store of blocks. key is block hash, value is a CBlock object\n+        self.block_store = {}\n+        self.last_block_hash = ''\n+        # store of txs. key is txid, value is a CTransaction object\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_TX and inv.hash in self.tx_store.keys():\n+                self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif (inv.type & MSG_TYPE_MASK) == MSG_BLOCK and inv.hash in self.block_store.keys():\n+                self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if not self.block_store:\n+            return\n+\n+        headers_list = [self.block_store[self.last_block_hash]]\n+        maxheaders = 2000\n+        while headers_list[-1].sha256 not in locator.vHave:\n+            # Walk back through the block store, adding headers to headers_list\n+            # as we go.\n+            prev_block_hash = headers_list[-1].hashPrevBlock\n+            if prev_block_hash in self.block_store:\n+                prev_block_header = self.block_store[prev_block_hash]\n+                headers_list.append(prev_block_header)\n+                if prev_block_header.sha256 == hash_stop:\n+                    # if this is the hashstop header, stop here\n+                    break\n+            else:\n+                break\n+\n+        # Truncate the list if there are too many headers\n+        headers_list = headers_list[:-maxheaders - 1:-1]\n+        response = msg_headers(headers_list)\n+\n+        if response is not None:",
      "path": "test/functional/test_framework/mininode.py",
      "position": 104,
      "original_position": 101,
      "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "original_commit_id": "949074892393a683f4f56e1a162ec1397563e153",
      "in_reply_to_id": 163703992,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is just ported directly from `on_getheaders()` in comptool.py (which calls into `headers_for()` in blockstore.py).\r\n\r\nYou're right that this could never be `None`. That was the case before in the original code. I could fix this here (which would make the logical diff from the existing code bigger), or fix it in a follow-up PR.",
      "created_at": "2018-01-25T00:08:53Z",
      "updated_at": "2018-01-30T14:31:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r163717494",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163717494"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 514,
      "original_line": 514,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163717972",
      "pull_request_review_id": 91376578,
      "id": 163717972,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MzcxNzk3Mg==",
      "diff_hunk": "@@ -440,3 +454,135 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PDataStore(P2PInterface):\n+    \"\"\"A P2P data store class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        # store of blocks. key is block hash, value is a CBlock object\n+        self.block_store = {}\n+        self.last_block_hash = ''\n+        # store of txs. key is txid, value is a CTransaction object\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_TX and inv.hash in self.tx_store.keys():\n+                self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif (inv.type & MSG_TYPE_MASK) == MSG_BLOCK and inv.hash in self.block_store.keys():\n+                self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if not self.block_store:\n+            return\n+\n+        headers_list = [self.block_store[self.last_block_hash]]\n+        maxheaders = 2000\n+        while headers_list[-1].sha256 not in locator.vHave:\n+            # Walk back through the block store, adding headers to headers_list\n+            # as we go.\n+            prev_block_hash = headers_list[-1].hashPrevBlock\n+            if prev_block_hash in self.block_store:\n+                prev_block_header = self.block_store[prev_block_hash]\n+                headers_list.append(prev_block_header)\n+                if prev_block_header.sha256 == hash_stop:\n+                    # if this is the hashstop header, stop here\n+                    break\n+            else:\n+                break\n+\n+        # Truncate the list if there are too many headers\n+        headers_list = headers_list[:-maxheaders - 1:-1]",
      "path": "test/functional/test_framework/mininode.py",
      "position": null,
      "original_position": 98,
      "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "original_commit_id": "949074892393a683f4f56e1a162ec1397563e153",
      "in_reply_to_id": 163703787,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is the same as the existing blockstore.py code. In that code, the headers were inserted at the front of the list and then a msg_headers was constructed. In this version we append the headers at the end of the list and then reverse the order before constructing the msg_headers.",
      "created_at": "2018-01-25T00:12:04Z",
      "updated_at": "2018-01-30T14:31:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r163717972",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163717972"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 511,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/164586641",
      "pull_request_review_id": 92382585,
      "id": 164586641,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NDU4NjY0MQ==",
      "diff_hunk": "@@ -440,3 +454,135 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PDataStore(P2PInterface):\n+    \"\"\"A P2P data store class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        # store of blocks. key is block hash, value is a CBlock object\n+        self.block_store = {}\n+        self.last_block_hash = ''\n+        # store of txs. key is txid, value is a CTransaction object\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_TX and inv.hash in self.tx_store.keys():\n+                self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif (inv.type & MSG_TYPE_MASK) == MSG_BLOCK and inv.hash in self.block_store.keys():\n+                self.send_message(msg_block(self.block_store[inv.hash]))",
      "path": "test/functional/test_framework/mininode.py",
      "position": 71,
      "original_position": 71,
      "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "original_commit_id": "e4a1b3bf7ef90afbd5cd5e957f36f22631fd5fb7",
      "in_reply_to_id": null,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Minor thought for debuggability: is it conceivable there's a case for which an `else:` clause that logs an unexpected message type might come in handy? ",
      "created_at": "2018-01-29T22:34:05Z",
      "updated_at": "2018-01-30T14:31:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r164586641",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/164586641"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 481,
      "original_line": 481,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/164586814",
      "pull_request_review_id": 92382585,
      "id": 164586814,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NDU4NjgxNA==",
      "diff_hunk": "@@ -440,3 +454,135 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PDataStore(P2PInterface):\n+    \"\"\"A P2P data store class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        # store of blocks. key is block hash, value is a CBlock object\n+        self.block_store = {}\n+        self.last_block_hash = ''\n+        # store of txs. key is txid, value is a CTransaction object\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_TX and inv.hash in self.tx_store.keys():\n+                self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif (inv.type & MSG_TYPE_MASK) == MSG_BLOCK and inv.hash in self.block_store.keys():\n+                self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if not self.block_store:\n+            return\n+\n+        headers_list = [self.block_store[self.last_block_hash]]\n+        maxheaders = 2000\n+        while headers_list[-1].sha256 not in locator.vHave:\n+            # Walk back through the block store, adding headers to headers_list\n+            # as we go.\n+            prev_block_hash = headers_list[-1].hashPrevBlock\n+            if prev_block_hash in self.block_store:\n+                prev_block_header = self.block_store[prev_block_hash]\n+                headers_list.append(prev_block_header)\n+                if prev_block_header.sha256 == hash_stop:\n+                    # if this is the hashstop header, stop here\n+                    break\n+            else:",
      "path": "test/functional/test_framework/mininode.py",
      "position": 96,
      "original_position": 94,
      "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "original_commit_id": "e4a1b3bf7ef90afbd5cd5e957f36f22631fd5fb7",
      "in_reply_to_id": null,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Worth logging some indication of a miss?",
      "created_at": "2018-01-29T22:34:56Z",
      "updated_at": "2018-01-30T14:31:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r164586814",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/164586814"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 506,
      "original_line": 506,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/164589777",
      "pull_request_review_id": 92382585,
      "id": 164589777,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NDU4OTc3Nw==",
      "diff_hunk": "@@ -440,3 +454,135 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PDataStore(P2PInterface):\n+    \"\"\"A P2P data store class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        # store of blocks. key is block hash, value is a CBlock object\n+        self.block_store = {}\n+        self.last_block_hash = ''\n+        # store of txs. key is txid, value is a CTransaction object\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_TX and inv.hash in self.tx_store.keys():\n+                self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif (inv.type & MSG_TYPE_MASK) == MSG_BLOCK and inv.hash in self.block_store.keys():\n+                self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if not self.block_store:\n+            return\n+\n+        headers_list = [self.block_store[self.last_block_hash]]\n+        maxheaders = 2000\n+        while headers_list[-1].sha256 not in locator.vHave:\n+            # Walk back through the block store, adding headers to headers_list\n+            # as we go.\n+            prev_block_hash = headers_list[-1].hashPrevBlock\n+            if prev_block_hash in self.block_store:\n+                prev_block_header = self.block_store[prev_block_hash]\n+                headers_list.append(prev_block_header)\n+                if prev_block_header.sha256 == hash_stop:\n+                    # if this is the hashstop header, stop here\n+                    break\n+            else:\n+                break\n+\n+        # Truncate the list if there are too many headers\n+        headers_list = headers_list[:-maxheaders - 1:-1]\n+        response = msg_headers(headers_list)\n+\n+        if response is not None:\n+            self.send_message(response)\n+\n+    def on_reject(self, message):\n+        \"\"\"Store reject reason and code for testing.\"\"\"\n+        self.reject_code_received = message.code\n+        self.reject_reason_received = message.reason\n+\n+    def send_blocks_and_test(self, blocks, rpc, success=True, request_block=True, reject_code=None, reject_reason=None, timeout=60):\n+        \"\"\"Send blocks to test node and test whether the tip advances.\n+\n+         - add all blocks to our block_store\n+         - send a headers message for the final block\n+         - the on_getheaders handler will ensure that any getheaders are responded to\n+         - if request_block is True: wait for getdata for each of the blocks. The on_getdata handler will\n+           ensure that any getdata messages are responded to\n+         - if success is True: assert that the node's tip advances to the most recent block\n+         - if success is False: assert that the node's tip doesn't advance\n+         - if reject_code and reject_reason are set: assert that the correct reject message is received\"\"\"\n+\n+        with mininode_lock:\n+            self.reject_code_received = None\n+            self.reject_reason_received = None\n+\n+            for block in blocks:\n+                self.block_store[block.sha256] = block\n+                self.last_block_hash = block.sha256\n+\n+        self.send_message(msg_headers([blocks[-1]]))\n+\n+        if request_block:\n+            wait_until(lambda: blocks[-1].sha256 in self.getdata_requests, timeout=timeout, lock=mininode_lock)\n+\n+        if success:\n+            wait_until(lambda: rpc.getbestblockhash() == blocks[-1].hash, timeout=timeout)\n+        else:\n+            assert rpc.getbestblockhash() != blocks[-1].hash\n+\n+        if reject_code is not None:\n+            wait_until(lambda: self.reject_code_received == reject_code, lock=mininode_lock)\n+        if reject_reason is not None:\n+            wait_until(lambda: self.reject_reason_received == reject_reason, lock=mininode_lock)\n+\n+    def send_txs_and_test(self, txs, rpc, success=True, reject_code=None, reject_reason=None):\n+        \"\"\"Send txs to test node and test whether they're accepted to the mempool.\n+\n+         - add all txs to our tx_store\n+         - send tx messages for all txs\n+         - if success is True: assert that the tx is accepted to the mempool\n+         - if success is False: assert that the tx is not accepted to the mempool\n+         - if reject_code and reject_reason are set: assert that the correct reject message is received.\"\"\"\n+\n+        with mininode_lock:\n+            self.reject_code_received = None\n+            self.reject_reason_received = None\n+\n+            for tx in txs:\n+                self.tx_store[tx.sha256] = tx\n+\n+        for tx in txs:\n+            self.send_message(msg_tx(tx))\n+\n+        self.sync_with_ping()\n+\n+        raw_mempool = rpc.getrawmempool()\n+        if success:\n+            # Check that all txs are now in the mempool\n+            for tx in txs:\n+                assert tx.hash in raw_mempool, \"{} not found in mempool\".format(tx.hash)",
      "path": "test/functional/test_framework/mininode.py",
      "position": 172,
      "original_position": 169,
      "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "original_commit_id": "e4a1b3bf7ef90afbd5cd5e957f36f22631fd5fb7",
      "in_reply_to_id": null,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I've found f strings convenient (`f'{tx.hash} not found in mempool'`) but that's personal preference.",
      "created_at": "2018-01-29T22:48:16Z",
      "updated_at": "2018-01-30T14:31:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r164589777",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/164589777"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 582,
      "original_line": 582,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/164590810",
      "pull_request_review_id": 92387395,
      "id": 164590810,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NDU5MDgxMA==",
      "diff_hunk": "@@ -440,3 +454,135 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PDataStore(P2PInterface):\n+    \"\"\"A P2P data store class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        # store of blocks. key is block hash, value is a CBlock object\n+        self.block_store = {}\n+        self.last_block_hash = ''\n+        # store of txs. key is txid, value is a CTransaction object\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_TX and inv.hash in self.tx_store.keys():\n+                self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif (inv.type & MSG_TYPE_MASK) == MSG_BLOCK and inv.hash in self.block_store.keys():\n+                self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if not self.block_store:\n+            return\n+\n+        headers_list = [self.block_store[self.last_block_hash]]\n+        maxheaders = 2000\n+        while headers_list[-1].sha256 not in locator.vHave:\n+            # Walk back through the block store, adding headers to headers_list\n+            # as we go.\n+            prev_block_hash = headers_list[-1].hashPrevBlock\n+            if prev_block_hash in self.block_store:\n+                prev_block_header = self.block_store[prev_block_hash]\n+                headers_list.append(prev_block_header)\n+                if prev_block_header.sha256 == hash_stop:\n+                    # if this is the hashstop header, stop here\n+                    break\n+            else:\n+                break\n+\n+        # Truncate the list if there are too many headers\n+        headers_list = headers_list[:-maxheaders - 1:-1]\n+        response = msg_headers(headers_list)\n+\n+        if response is not None:\n+            self.send_message(response)\n+\n+    def on_reject(self, message):\n+        \"\"\"Store reject reason and code for testing.\"\"\"\n+        self.reject_code_received = message.code\n+        self.reject_reason_received = message.reason\n+\n+    def send_blocks_and_test(self, blocks, rpc, success=True, request_block=True, reject_code=None, reject_reason=None, timeout=60):\n+        \"\"\"Send blocks to test node and test whether the tip advances.\n+\n+         - add all blocks to our block_store\n+         - send a headers message for the final block\n+         - the on_getheaders handler will ensure that any getheaders are responded to\n+         - if request_block is True: wait for getdata for each of the blocks. The on_getdata handler will\n+           ensure that any getdata messages are responded to\n+         - if success is True: assert that the node's tip advances to the most recent block\n+         - if success is False: assert that the node's tip doesn't advance\n+         - if reject_code and reject_reason are set: assert that the correct reject message is received\"\"\"\n+\n+        with mininode_lock:\n+            self.reject_code_received = None\n+            self.reject_reason_received = None\n+\n+            for block in blocks:\n+                self.block_store[block.sha256] = block\n+                self.last_block_hash = block.sha256\n+\n+        self.send_message(msg_headers([blocks[-1]]))\n+\n+        if request_block:\n+            wait_until(lambda: blocks[-1].sha256 in self.getdata_requests, timeout=timeout, lock=mininode_lock)\n+\n+        if success:\n+            wait_until(lambda: rpc.getbestblockhash() == blocks[-1].hash, timeout=timeout)\n+        else:\n+            assert rpc.getbestblockhash() != blocks[-1].hash\n+\n+        if reject_code is not None:\n+            wait_until(lambda: self.reject_code_received == reject_code, lock=mininode_lock)\n+        if reject_reason is not None:\n+            wait_until(lambda: self.reject_reason_received == reject_reason, lock=mininode_lock)\n+\n+    def send_txs_and_test(self, txs, rpc, success=True, reject_code=None, reject_reason=None):\n+        \"\"\"Send txs to test node and test whether they're accepted to the mempool.\n+\n+         - add all txs to our tx_store\n+         - send tx messages for all txs\n+         - if success is True: assert that the tx is accepted to the mempool\n+         - if success is False: assert that the tx is not accepted to the mempool\n+         - if reject_code and reject_reason are set: assert that the correct reject message is received.\"\"\"\n+\n+        with mininode_lock:\n+            self.reject_code_received = None\n+            self.reject_reason_received = None\n+\n+            for tx in txs:\n+                self.tx_store[tx.sha256] = tx\n+\n+        for tx in txs:\n+            self.send_message(msg_tx(tx))\n+\n+        self.sync_with_ping()\n+\n+        raw_mempool = rpc.getrawmempool()\n+        if success:\n+            # Check that all txs are now in the mempool\n+            for tx in txs:\n+                assert tx.hash in raw_mempool, \"{} not found in mempool\".format(tx.hash)",
      "path": "test/functional/test_framework/mininode.py",
      "position": 172,
      "original_position": 169,
      "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "original_commit_id": "e4a1b3bf7ef90afbd5cd5e957f36f22631fd5fb7",
      "in_reply_to_id": 164589777,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I also like f strings, but they're new in v3.6, and we support older Python versions than that (back to v3.4 at least).",
      "created_at": "2018-01-29T22:53:32Z",
      "updated_at": "2018-01-30T14:31:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r164590810",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/164590810"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 582,
      "original_line": 582,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/164591418",
      "pull_request_review_id": 92388159,
      "id": 164591418,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NDU5MTQxOA==",
      "diff_hunk": "@@ -440,3 +454,135 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PDataStore(P2PInterface):\n+    \"\"\"A P2P data store class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        # store of blocks. key is block hash, value is a CBlock object\n+        self.block_store = {}\n+        self.last_block_hash = ''\n+        # store of txs. key is txid, value is a CTransaction object\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_TX and inv.hash in self.tx_store.keys():\n+                self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif (inv.type & MSG_TYPE_MASK) == MSG_BLOCK and inv.hash in self.block_store.keys():\n+                self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if not self.block_store:\n+            return\n+\n+        headers_list = [self.block_store[self.last_block_hash]]\n+        maxheaders = 2000\n+        while headers_list[-1].sha256 not in locator.vHave:\n+            # Walk back through the block store, adding headers to headers_list\n+            # as we go.\n+            prev_block_hash = headers_list[-1].hashPrevBlock\n+            if prev_block_hash in self.block_store:\n+                prev_block_header = self.block_store[prev_block_hash]\n+                headers_list.append(prev_block_header)\n+                if prev_block_header.sha256 == hash_stop:\n+                    # if this is the hashstop header, stop here\n+                    break\n+            else:\n+                break\n+\n+        # Truncate the list if there are too many headers\n+        headers_list = headers_list[:-maxheaders - 1:-1]\n+        response = msg_headers(headers_list)\n+\n+        if response is not None:\n+            self.send_message(response)\n+\n+    def on_reject(self, message):\n+        \"\"\"Store reject reason and code for testing.\"\"\"\n+        self.reject_code_received = message.code\n+        self.reject_reason_received = message.reason\n+\n+    def send_blocks_and_test(self, blocks, rpc, success=True, request_block=True, reject_code=None, reject_reason=None, timeout=60):\n+        \"\"\"Send blocks to test node and test whether the tip advances.\n+\n+         - add all blocks to our block_store\n+         - send a headers message for the final block\n+         - the on_getheaders handler will ensure that any getheaders are responded to\n+         - if request_block is True: wait for getdata for each of the blocks. The on_getdata handler will\n+           ensure that any getdata messages are responded to\n+         - if success is True: assert that the node's tip advances to the most recent block\n+         - if success is False: assert that the node's tip doesn't advance\n+         - if reject_code and reject_reason are set: assert that the correct reject message is received\"\"\"\n+\n+        with mininode_lock:\n+            self.reject_code_received = None\n+            self.reject_reason_received = None\n+\n+            for block in blocks:\n+                self.block_store[block.sha256] = block\n+                self.last_block_hash = block.sha256\n+\n+        self.send_message(msg_headers([blocks[-1]]))\n+\n+        if request_block:\n+            wait_until(lambda: blocks[-1].sha256 in self.getdata_requests, timeout=timeout, lock=mininode_lock)\n+\n+        if success:\n+            wait_until(lambda: rpc.getbestblockhash() == blocks[-1].hash, timeout=timeout)\n+        else:\n+            assert rpc.getbestblockhash() != blocks[-1].hash\n+\n+        if reject_code is not None:\n+            wait_until(lambda: self.reject_code_received == reject_code, lock=mininode_lock)\n+        if reject_reason is not None:\n+            wait_until(lambda: self.reject_reason_received == reject_reason, lock=mininode_lock)\n+\n+    def send_txs_and_test(self, txs, rpc, success=True, reject_code=None, reject_reason=None):\n+        \"\"\"Send txs to test node and test whether they're accepted to the mempool.\n+\n+         - add all txs to our tx_store\n+         - send tx messages for all txs\n+         - if success is True: assert that the tx is accepted to the mempool\n+         - if success is False: assert that the tx is not accepted to the mempool\n+         - if reject_code and reject_reason are set: assert that the correct reject message is received.\"\"\"\n+\n+        with mininode_lock:\n+            self.reject_code_received = None\n+            self.reject_reason_received = None\n+\n+            for tx in txs:\n+                self.tx_store[tx.sha256] = tx\n+\n+        for tx in txs:\n+            self.send_message(msg_tx(tx))\n+\n+        self.sync_with_ping()\n+\n+        raw_mempool = rpc.getrawmempool()\n+        if success:\n+            # Check that all txs are now in the mempool\n+            for tx in txs:\n+                assert tx.hash in raw_mempool, \"{} not found in mempool\".format(tx.hash)",
      "path": "test/functional/test_framework/mininode.py",
      "position": 172,
      "original_position": 169,
      "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "original_commit_id": "e4a1b3bf7ef90afbd5cd5e957f36f22631fd5fb7",
      "in_reply_to_id": 164589777,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ah, makes sense.",
      "created_at": "2018-01-29T22:56:42Z",
      "updated_at": "2018-01-30T14:31:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r164591418",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/164591418"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 582,
      "original_line": 582,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/164599000",
      "pull_request_review_id": 92396793,
      "id": 164599000,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NDU5OTAwMA==",
      "diff_hunk": "@@ -440,3 +454,135 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PDataStore(P2PInterface):\n+    \"\"\"A P2P data store class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        # store of blocks. key is block hash, value is a CBlock object\n+        self.block_store = {}\n+        self.last_block_hash = ''\n+        # store of txs. key is txid, value is a CTransaction object\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_TX and inv.hash in self.tx_store.keys():\n+                self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif (inv.type & MSG_TYPE_MASK) == MSG_BLOCK and inv.hash in self.block_store.keys():\n+                self.send_message(msg_block(self.block_store[inv.hash]))",
      "path": "test/functional/test_framework/mininode.py",
      "position": 71,
      "original_position": 71,
      "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "original_commit_id": "e4a1b3bf7ef90afbd5cd5e957f36f22631fd5fb7",
      "in_reply_to_id": 164586641,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "added logging",
      "created_at": "2018-01-29T23:34:00Z",
      "updated_at": "2018-01-30T14:31:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r164599000",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/164599000"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 481,
      "original_line": 481,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/164599019",
      "pull_request_review_id": 92396816,
      "id": 164599019,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NDU5OTAxOQ==",
      "diff_hunk": "@@ -440,3 +454,135 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PDataStore(P2PInterface):\n+    \"\"\"A P2P data store class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        # store of blocks. key is block hash, value is a CBlock object\n+        self.block_store = {}\n+        self.last_block_hash = ''\n+        # store of txs. key is txid, value is a CTransaction object\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_TX and inv.hash in self.tx_store.keys():\n+                self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif (inv.type & MSG_TYPE_MASK) == MSG_BLOCK and inv.hash in self.block_store.keys():\n+                self.send_message(msg_block(self.block_store[inv.hash]))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if not self.block_store:\n+            return\n+\n+        headers_list = [self.block_store[self.last_block_hash]]\n+        maxheaders = 2000\n+        while headers_list[-1].sha256 not in locator.vHave:\n+            # Walk back through the block store, adding headers to headers_list\n+            # as we go.\n+            prev_block_hash = headers_list[-1].hashPrevBlock\n+            if prev_block_hash in self.block_store:\n+                prev_block_header = self.block_store[prev_block_hash]\n+                headers_list.append(prev_block_header)\n+                if prev_block_header.sha256 == hash_stop:\n+                    # if this is the hashstop header, stop here\n+                    break\n+            else:",
      "path": "test/functional/test_framework/mininode.py",
      "position": 96,
      "original_position": 94,
      "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "original_commit_id": "e4a1b3bf7ef90afbd5cd5e957f36f22631fd5fb7",
      "in_reply_to_id": 164586814,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "added logging",
      "created_at": "2018-01-29T23:34:07Z",
      "updated_at": "2018-01-30T14:31:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r164599019",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/164599019"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 506,
      "original_line": 506,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167710791",
      "pull_request_review_id": 95969920,
      "id": 167710791,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NzcxMDc5MQ==",
      "diff_hunk": "@@ -4,68 +4,50 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test node responses to invalid transactions.\n \n-In this test we connect to one node over p2p, and test tx requests.\n-\"\"\"\n+In this test we connect to one node over p2p, and test tx requests.\"\"\"\n+from test_framework.blocktools import create_block, create_coinbase, create_transaction\n+from test_framework.messages import COIN\n+from test_framework.mininode import network_thread_start, P2PDataStore\n+from test_framework.test_framework import BitcoinTestFramework\n \n-from test_framework.test_framework import ComparisonTestFramework\n-from test_framework.comptool import TestManager, TestInstance, RejectResult\n-from test_framework.blocktools import *\n-import time\n+class InvalidTxRequestTest(BitcoinTestFramework):\n \n-\n-\n-# Use the ComparisonTestFramework with 1 node: only use --testbinary.\n-class InvalidTxRequestTest(ComparisonTestFramework):\n-\n-    ''' Can either run this test as 1 node with expected answers, or two and compare them. \n-        Change the \"outcome\" variable from each TestInstance object to only do the comparison. '''\n     def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n+        self.extra_args = [[\"-whitelist=127.0.0.1\"]]\n \n     def run_test(self):\n-        test = TestManager(self, self.options.tmpdir)\n-        test.add_all_connections(self.nodes)\n-        self.tip = None\n-        self.block_time = None\n+        # Add p2p connection to node0\n+        node = self.nodes[0]  # convenience reference to the node\n+        node.add_p2p_connection(P2PDataStore())\n+\n         network_thread_start()\n-        test.run()\n+        node.p2p.wait_for_verack()\n \n-    def get_tests(self):\n-        if self.tip is None:\n-            self.tip = int(\"0x\" + self.nodes[0].getbestblockhash(), 0)\n-        self.block_time = int(time.time())+1\n+        best_block = self.nodes[0].getbestblockhash()\n+        tip = int(best_block, 16)\n+        best_block_time = self.nodes[0].getblock(best_block)['time']\n+        block_time = best_block_time + 1\n \n-        '''\n-        Create a new block with an anyone-can-spend coinbase\n-        '''\n+        self.log.info(\"Create a new block with an anyone-can-spend coinbase.\")\n         height = 1\n-        block = create_block(self.tip, create_coinbase(height), self.block_time)\n-        self.block_time += 1\n+        block = create_block(tip, create_coinbase(height), block_time)\n+        block_time += 1",
      "path": "test/functional/p2p_invalid_tx.py",
      "position": 60,
      "original_position": 60,
      "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "original_commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "in_reply_to_id": null,
      "user": {
        "login": "conscott",
        "id": 14220652,
        "node_id": "MDQ6VXNlcjE0MjIwNjUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/14220652?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/conscott",
        "html_url": "https://github.com/conscott",
        "followers_url": "https://api.github.com/users/conscott/followers",
        "following_url": "https://api.github.com/users/conscott/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/conscott/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/conscott/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/conscott/subscriptions",
        "organizations_url": "https://api.github.com/users/conscott/orgs",
        "repos_url": "https://api.github.com/users/conscott/repos",
        "events_url": "https://api.github.com/users/conscott/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/conscott/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This line can be removed. `block_time` is never used again. ",
      "created_at": "2018-02-12T22:44:32Z",
      "updated_at": "2018-02-12T22:44:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r167710791",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167710791"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 36,
      "original_line": 36,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167710892",
      "pull_request_review_id": 95970049,
      "id": 167710892,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NzcxMDg5Mg==",
      "diff_hunk": "@@ -4,68 +4,50 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test node responses to invalid transactions.\n \n-In this test we connect to one node over p2p, and test tx requests.\n-\"\"\"\n+In this test we connect to one node over p2p, and test tx requests.\"\"\"\n+from test_framework.blocktools import create_block, create_coinbase, create_transaction\n+from test_framework.messages import COIN\n+from test_framework.mininode import network_thread_start, P2PDataStore\n+from test_framework.test_framework import BitcoinTestFramework\n \n-from test_framework.test_framework import ComparisonTestFramework\n-from test_framework.comptool import TestManager, TestInstance, RejectResult\n-from test_framework.blocktools import *\n-import time\n+class InvalidTxRequestTest(BitcoinTestFramework):\n \n-\n-\n-# Use the ComparisonTestFramework with 1 node: only use --testbinary.\n-class InvalidTxRequestTest(ComparisonTestFramework):\n-\n-    ''' Can either run this test as 1 node with expected answers, or two and compare them. \n-        Change the \"outcome\" variable from each TestInstance object to only do the comparison. '''\n     def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n+        self.extra_args = [[\"-whitelist=127.0.0.1\"]]\n \n     def run_test(self):\n-        test = TestManager(self, self.options.tmpdir)\n-        test.add_all_connections(self.nodes)\n-        self.tip = None\n-        self.block_time = None\n+        # Add p2p connection to node0\n+        node = self.nodes[0]  # convenience reference to the node\n+        node.add_p2p_connection(P2PDataStore())\n+\n         network_thread_start()\n-        test.run()\n+        node.p2p.wait_for_verack()\n \n-    def get_tests(self):\n-        if self.tip is None:\n-            self.tip = int(\"0x\" + self.nodes[0].getbestblockhash(), 0)\n-        self.block_time = int(time.time())+1\n+        best_block = self.nodes[0].getbestblockhash()\n+        tip = int(best_block, 16)\n+        best_block_time = self.nodes[0].getblock(best_block)['time']\n+        block_time = best_block_time + 1\n \n-        '''\n-        Create a new block with an anyone-can-spend coinbase\n-        '''\n+        self.log.info(\"Create a new block with an anyone-can-spend coinbase.\")\n         height = 1\n-        block = create_block(self.tip, create_coinbase(height), self.block_time)\n-        self.block_time += 1\n+        block = create_block(tip, create_coinbase(height), block_time)\n+        block_time += 1\n         block.solve()\n         # Save the coinbase for later\n-        self.block1 = block\n-        self.tip = block.sha256\n+        block1 = block\n+        tip = block.sha256\n         height += 1",
      "path": "test/functional/p2p_invalid_tx.py",
      "position": 67,
      "original_position": 67,
      "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "original_commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "in_reply_to_id": null,
      "user": {
        "login": "conscott",
        "id": 14220652,
        "node_id": "MDQ6VXNlcjE0MjIwNjUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/14220652?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/conscott",
        "html_url": "https://github.com/conscott",
        "followers_url": "https://api.github.com/users/conscott/followers",
        "following_url": "https://api.github.com/users/conscott/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/conscott/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/conscott/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/conscott/subscriptions",
        "organizations_url": "https://api.github.com/users/conscott/orgs",
        "repos_url": "https://api.github.com/users/conscott/repos",
        "events_url": "https://api.github.com/users/conscott/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/conscott/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This line can also be removed. `height` is never used again. ",
      "created_at": "2018-02-12T22:45:00Z",
      "updated_at": "2018-02-12T22:45:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r167710892",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167710892"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 41,
      "original_line": 41,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167718956",
      "pull_request_review_id": 95979452,
      "id": 167718956,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NzcxODk1Ng==",
      "diff_hunk": "@@ -4,68 +4,50 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test node responses to invalid transactions.\n \n-In this test we connect to one node over p2p, and test tx requests.\n-\"\"\"\n+In this test we connect to one node over p2p, and test tx requests.\"\"\"\n+from test_framework.blocktools import create_block, create_coinbase, create_transaction\n+from test_framework.messages import COIN\n+from test_framework.mininode import network_thread_start, P2PDataStore\n+from test_framework.test_framework import BitcoinTestFramework\n \n-from test_framework.test_framework import ComparisonTestFramework\n-from test_framework.comptool import TestManager, TestInstance, RejectResult\n-from test_framework.blocktools import *\n-import time\n+class InvalidTxRequestTest(BitcoinTestFramework):\n \n-\n-\n-# Use the ComparisonTestFramework with 1 node: only use --testbinary.\n-class InvalidTxRequestTest(ComparisonTestFramework):\n-\n-    ''' Can either run this test as 1 node with expected answers, or two and compare them. \n-        Change the \"outcome\" variable from each TestInstance object to only do the comparison. '''\n     def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n+        self.extra_args = [[\"-whitelist=127.0.0.1\"]]\n \n     def run_test(self):\n-        test = TestManager(self, self.options.tmpdir)\n-        test.add_all_connections(self.nodes)\n-        self.tip = None\n-        self.block_time = None\n+        # Add p2p connection to node0\n+        node = self.nodes[0]  # convenience reference to the node\n+        node.add_p2p_connection(P2PDataStore())\n+\n         network_thread_start()\n-        test.run()\n+        node.p2p.wait_for_verack()\n \n-    def get_tests(self):\n-        if self.tip is None:\n-            self.tip = int(\"0x\" + self.nodes[0].getbestblockhash(), 0)\n-        self.block_time = int(time.time())+1\n+        best_block = self.nodes[0].getbestblockhash()\n+        tip = int(best_block, 16)\n+        best_block_time = self.nodes[0].getblock(best_block)['time']\n+        block_time = best_block_time + 1\n \n-        '''\n-        Create a new block with an anyone-can-spend coinbase\n-        '''\n+        self.log.info(\"Create a new block with an anyone-can-spend coinbase.\")\n         height = 1\n-        block = create_block(self.tip, create_coinbase(height), self.block_time)\n-        self.block_time += 1\n+        block = create_block(tip, create_coinbase(height), block_time)\n+        block_time += 1\n         block.solve()\n         # Save the coinbase for later\n-        self.block1 = block\n-        self.tip = block.sha256\n+        block1 = block\n+        tip = block.sha256\n         height += 1\n-        yield TestInstance([[block, True]])\n+        node.p2p.send_blocks_and_test([block], node, success=True)\n \n-        '''\n-        Now we need that block to mature so we can spend the coinbase.\n-        '''\n-        test = TestInstance(sync_every_block=False)\n-        for i in range(100):\n-            block = create_block(self.tip, create_coinbase(height), self.block_time)\n-            block.solve()\n-            self.tip = block.sha256\n-            self.block_time += 1\n-            test.blocks_and_transactions.append([block, True])\n-            height += 1\n-        yield test\n+        self.log.info(\"Mature the block.\")\n+        self.nodes[0].generate(100)\n \n         # b'\\x64' is OP_NOTIF\n         # Transaction will be rejected with code 16 (REJECT_INVALID)\n-        tx1 = create_transaction(self.block1.vtx[0], 0, b'\\x64', 50 * COIN - 12000)\n-        yield TestInstance([[tx1, RejectResult(16, b'mandatory-script-verify-flag-failed')]])\n+        tx1 = create_transaction(block1.vtx[0], 0, b'\\x64', 50 * COIN - 12000)\n+        node.p2p.send_txs_and_test([tx1], node, success=False, reject_code=16, reject_reason=b'mandatory-script-verify-flag-failed (Invalid OP_IF construction)')",
      "path": "test/functional/p2p_invalid_tx.py",
      "position": 91,
      "original_position": 91,
      "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "original_commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "in_reply_to_id": null,
      "user": {
        "login": "conscott",
        "id": 14220652,
        "node_id": "MDQ6VXNlcjE0MjIwNjUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/14220652?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/conscott",
        "html_url": "https://github.com/conscott",
        "followers_url": "https://api.github.com/users/conscott/followers",
        "following_url": "https://api.github.com/users/conscott/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/conscott/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/conscott/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/conscott/subscriptions",
        "organizations_url": "https://api.github.com/users/conscott/orgs",
        "repos_url": "https://api.github.com/users/conscott/repos",
        "events_url": "https://api.github.com/users/conscott/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/conscott/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`send_txs_and_test` is created in this PR, but I do not see it being called with `sucess=True` in any PRs mentioned in #10603 \r\n\r\nDoes it make sense to also send a valid transaction in this code block as well, to verify that codepath? ",
      "created_at": "2018-02-12T23:24:47Z",
      "updated_at": "2018-02-12T23:24:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r167718956",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167718956"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 50,
      "original_line": 50,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174269247",
      "pull_request_review_id": 103594904,
      "id": 174269247,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NDI2OTI0Nw==",
      "diff_hunk": "@@ -440,3 +454,138 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PDataStore(P2PInterface):\n+    \"\"\"A P2P data store class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        # store of blocks. key is block hash, value is a CBlock object\n+        self.block_store = {}\n+        self.last_block_hash = ''\n+        # store of txs. key is txid, value is a CTransaction object\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_TX and inv.hash in self.tx_store.keys():\n+                self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif (inv.type & MSG_TYPE_MASK) == MSG_BLOCK and inv.hash in self.block_store.keys():\n+                self.send_message(msg_block(self.block_store[inv.hash]))\n+            else:\n+                logger.debug('getdata message type {} received.'.format(hex(inv.type)))",
      "path": "test/functional/test_framework/mininode.py",
      "position": 73,
      "original_position": 73,
      "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "original_commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Could be removed. This is already done by `P2PConnection._log_message`.",
      "created_at": "2018-03-13T20:14:28Z",
      "updated_at": "2018-03-13T20:25:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r174269247",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174269247"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 483,
      "original_line": 483,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174269362",
      "pull_request_review_id": 103594904,
      "id": 174269362,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NDI2OTM2Mg==",
      "diff_hunk": "@@ -440,3 +454,138 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PDataStore(P2PInterface):\n+    \"\"\"A P2P data store class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        # store of blocks. key is block hash, value is a CBlock object\n+        self.block_store = {}\n+        self.last_block_hash = ''\n+        # store of txs. key is txid, value is a CTransaction object\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_TX and inv.hash in self.tx_store.keys():\n+                self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif (inv.type & MSG_TYPE_MASK) == MSG_BLOCK and inv.hash in self.block_store.keys():\n+                self.send_message(msg_block(self.block_store[inv.hash]))\n+            else:\n+                logger.debug('getdata message type {} received.'.format(hex(inv.type)))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if not self.block_store:\n+            return\n+\n+        headers_list = [self.block_store[self.last_block_hash]]\n+        maxheaders = 2000\n+        while headers_list[-1].sha256 not in locator.vHave:\n+            # Walk back through the block store, adding headers to headers_list\n+            # as we go.\n+            prev_block_hash = headers_list[-1].hashPrevBlock\n+            if prev_block_hash in self.block_store:\n+                prev_block_header = self.block_store[prev_block_hash]\n+                headers_list.append(prev_block_header)\n+                if prev_block_header.sha256 == hash_stop:\n+                    # if this is the hashstop header, stop here\n+                    break\n+            else:\n+                logger.debug('block hash {} not found in block store'.format(hex(prev_block_hash)))\n+                break\n+\n+        # Truncate the list if there are too many headers\n+        headers_list = headers_list[:-maxheaders - 1:-1]\n+        response = msg_headers(headers_list)\n+\n+        if response is not None:",
      "path": "test/functional/test_framework/mininode.py",
      "position": 104,
      "original_position": 104,
      "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "original_commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Could be removed per my previous review.",
      "created_at": "2018-03-13T20:14:50Z",
      "updated_at": "2018-03-13T20:25:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r174269362",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174269362"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 514,
      "original_line": 514,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174269574",
      "pull_request_review_id": 103594904,
      "id": 174269574,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NDI2OTU3NA==",
      "diff_hunk": "@@ -440,3 +454,138 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PDataStore(P2PInterface):\n+    \"\"\"A P2P data store class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        # store of blocks. key is block hash, value is a CBlock object\n+        self.block_store = {}\n+        self.last_block_hash = ''\n+        # store of txs. key is txid, value is a CTransaction object\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_TX and inv.hash in self.tx_store.keys():\n+                self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif (inv.type & MSG_TYPE_MASK) == MSG_BLOCK and inv.hash in self.block_store.keys():\n+                self.send_message(msg_block(self.block_store[inv.hash]))\n+            else:\n+                logger.debug('getdata message type {} received.'.format(hex(inv.type)))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if not self.block_store:\n+            return\n+\n+        headers_list = [self.block_store[self.last_block_hash]]\n+        maxheaders = 2000\n+        while headers_list[-1].sha256 not in locator.vHave:\n+            # Walk back through the block store, adding headers to headers_list\n+            # as we go.\n+            prev_block_hash = headers_list[-1].hashPrevBlock\n+            if prev_block_hash in self.block_store:\n+                prev_block_header = self.block_store[prev_block_hash]\n+                headers_list.append(prev_block_header)\n+                if prev_block_header.sha256 == hash_stop:\n+                    # if this is the hashstop header, stop here\n+                    break\n+            else:\n+                logger.debug('block hash {} not found in block store'.format(hex(prev_block_hash)))\n+                break\n+\n+        # Truncate the list if there are too many headers\n+        headers_list = headers_list[:-maxheaders - 1:-1]\n+        response = msg_headers(headers_list)\n+\n+        if response is not None:\n+            self.send_message(response)\n+\n+    def on_reject(self, message):\n+        \"\"\"Store reject reason and code for testing.\"\"\"\n+        self.reject_code_received = message.code\n+        self.reject_reason_received = message.reason\n+\n+    def send_blocks_and_test(self, blocks, rpc, success=True, request_block=True, reject_code=None, reject_reason=None, timeout=60):\n+        \"\"\"Send blocks to test node and test whether the tip advances.\n+\n+         - add all blocks to our block_store\n+         - send a headers message for the final block\n+         - the on_getheaders handler will ensure that any getheaders are responded to\n+         - if request_block is True: wait for getdata for each of the blocks. The on_getdata handler will\n+           ensure that any getdata messages are responded to\n+         - if success is True: assert that the node's tip advances to the most recent block\n+         - if success is False: assert that the node's tip doesn't advance\n+         - if reject_code and reject_reason are set: assert that the correct reject message is received\"\"\"\n+\n+        with mininode_lock:\n+            self.reject_code_received = None\n+            self.reject_reason_received = None\n+\n+            for block in blocks:\n+                self.block_store[block.sha256] = block\n+                self.last_block_hash = block.sha256\n+\n+        self.send_message(msg_headers([blocks[-1]]))\n+\n+        if request_block:\n+            wait_until(lambda: blocks[-1].sha256 in self.getdata_requests, timeout=timeout, lock=mininode_lock)\n+\n+        if success:\n+            wait_until(lambda: rpc.getbestblockhash() == blocks[-1].hash, timeout=timeout)\n+        else:\n+            assert rpc.getbestblockhash() != blocks[-1].hash\n+\n+        if reject_code is not None:\n+            wait_until(lambda: self.reject_code_received == reject_code, lock=mininode_lock)\n+        if reject_reason is not None:\n+            wait_until(lambda: self.reject_reason_received == reject_reason, lock=mininode_lock)\n+\n+    def send_txs_and_test(self, txs, rpc, success=True, reject_code=None, reject_reason=None):\n+        \"\"\"Send txs to test node and test whether they're accepted to the mempool.\n+\n+         - add all txs to our tx_store\n+         - send tx messages for all txs\n+         - if success is True: assert that the tx is accepted to the mempool\n+         - if success is False: assert that the tx is not accepted to the mempool",
      "path": "test/functional/test_framework/mininode.py",
      "position": 153,
      "original_position": 153,
      "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "original_commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: Replace \"tx is\" with \"txs are\"",
      "created_at": "2018-03-13T20:15:41Z",
      "updated_at": "2018-03-13T20:25:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r174269574",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174269574"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 563,
      "original_line": 563,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/178179559",
      "pull_request_review_id": 108201503,
      "id": 178179559,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODE3OTU1OQ==",
      "diff_hunk": "@@ -440,3 +454,138 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PDataStore(P2PInterface):\n+    \"\"\"A P2P data store class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        # store of blocks. key is block hash, value is a CBlock object\n+        self.block_store = {}\n+        self.last_block_hash = ''\n+        # store of txs. key is txid, value is a CTransaction object\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_TX and inv.hash in self.tx_store.keys():\n+                self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif (inv.type & MSG_TYPE_MASK) == MSG_BLOCK and inv.hash in self.block_store.keys():\n+                self.send_message(msg_block(self.block_store[inv.hash]))\n+            else:\n+                logger.debug('getdata message type {} received.'.format(hex(inv.type)))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if not self.block_store:\n+            return\n+\n+        headers_list = [self.block_store[self.last_block_hash]]\n+        maxheaders = 2000\n+        while headers_list[-1].sha256 not in locator.vHave:\n+            # Walk back through the block store, adding headers to headers_list\n+            # as we go.\n+            prev_block_hash = headers_list[-1].hashPrevBlock\n+            if prev_block_hash in self.block_store:\n+                prev_block_header = self.block_store[prev_block_hash]\n+                headers_list.append(prev_block_header)\n+                if prev_block_header.sha256 == hash_stop:\n+                    # if this is the hashstop header, stop here\n+                    break\n+            else:\n+                logger.debug('block hash {} not found in block store'.format(hex(prev_block_hash)))\n+                break\n+\n+        # Truncate the list if there are too many headers\n+        headers_list = headers_list[:-maxheaders - 1:-1]\n+        response = msg_headers(headers_list)\n+\n+        if response is not None:\n+            self.send_message(response)\n+\n+    def on_reject(self, message):\n+        \"\"\"Store reject reason and code for testing.\"\"\"\n+        self.reject_code_received = message.code\n+        self.reject_reason_received = message.reason\n+\n+    def send_blocks_and_test(self, blocks, rpc, success=True, request_block=True, reject_code=None, reject_reason=None, timeout=60):\n+        \"\"\"Send blocks to test node and test whether the tip advances.\n+\n+         - add all blocks to our block_store\n+         - send a headers message for the final block\n+         - the on_getheaders handler will ensure that any getheaders are responded to\n+         - if request_block is True: wait for getdata for each of the blocks. The on_getdata handler will\n+           ensure that any getdata messages are responded to\n+         - if success is True: assert that the node's tip advances to the most recent block\n+         - if success is False: assert that the node's tip doesn't advance\n+         - if reject_code and reject_reason are set: assert that the correct reject message is received\"\"\"\n+\n+        with mininode_lock:\n+            self.reject_code_received = None\n+            self.reject_reason_received = None\n+\n+            for block in blocks:\n+                self.block_store[block.sha256] = block\n+                self.last_block_hash = block.sha256\n+\n+        self.send_message(msg_headers([blocks[-1]]))",
      "path": "test/functional/test_framework/mininode.py",
      "position": 132,
      "original_position": 132,
      "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "original_commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I can't find a reason why you are sending the full block in a headers message instead of just the header? If there is a reason, it should be documented, otherwise I'd suggest sending just the header.",
      "created_at": "2018-03-29T20:57:25Z",
      "updated_at": "2018-03-29T20:57:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r178179559",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/178179559"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 542,
      "original_line": 542,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/178370087",
      "pull_request_review_id": 108425794,
      "id": 178370087,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODM3MDA4Nw==",
      "diff_hunk": "@@ -440,3 +454,138 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PDataStore(P2PInterface):\n+    \"\"\"A P2P data store class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        # store of blocks. key is block hash, value is a CBlock object\n+        self.block_store = {}\n+        self.last_block_hash = ''\n+        # store of txs. key is txid, value is a CTransaction object\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_TX and inv.hash in self.tx_store.keys():\n+                self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif (inv.type & MSG_TYPE_MASK) == MSG_BLOCK and inv.hash in self.block_store.keys():\n+                self.send_message(msg_block(self.block_store[inv.hash]))\n+            else:\n+                logger.debug('getdata message type {} received.'.format(hex(inv.type)))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if not self.block_store:\n+            return\n+\n+        headers_list = [self.block_store[self.last_block_hash]]\n+        maxheaders = 2000\n+        while headers_list[-1].sha256 not in locator.vHave:\n+            # Walk back through the block store, adding headers to headers_list\n+            # as we go.\n+            prev_block_hash = headers_list[-1].hashPrevBlock\n+            if prev_block_hash in self.block_store:\n+                prev_block_header = self.block_store[prev_block_hash]\n+                headers_list.append(prev_block_header)\n+                if prev_block_header.sha256 == hash_stop:\n+                    # if this is the hashstop header, stop here\n+                    break\n+            else:\n+                logger.debug('block hash {} not found in block store'.format(hex(prev_block_hash)))\n+                break\n+\n+        # Truncate the list if there are too many headers\n+        headers_list = headers_list[:-maxheaders - 1:-1]\n+        response = msg_headers(headers_list)\n+\n+        if response is not None:\n+            self.send_message(response)\n+\n+    def on_reject(self, message):\n+        \"\"\"Store reject reason and code for testing.\"\"\"\n+        self.reject_code_received = message.code\n+        self.reject_reason_received = message.reason\n+\n+    def send_blocks_and_test(self, blocks, rpc, success=True, request_block=True, reject_code=None, reject_reason=None, timeout=60):\n+        \"\"\"Send blocks to test node and test whether the tip advances.\n+\n+         - add all blocks to our block_store\n+         - send a headers message for the final block\n+         - the on_getheaders handler will ensure that any getheaders are responded to\n+         - if request_block is True: wait for getdata for each of the blocks. The on_getdata handler will\n+           ensure that any getdata messages are responded to\n+         - if success is True: assert that the node's tip advances to the most recent block\n+         - if success is False: assert that the node's tip doesn't advance\n+         - if reject_code and reject_reason are set: assert that the correct reject message is received\"\"\"\n+\n+        with mininode_lock:\n+            self.reject_code_received = None\n+            self.reject_reason_received = None\n+\n+            for block in blocks:\n+                self.block_store[block.sha256] = block\n+                self.last_block_hash = block.sha256\n+\n+        self.send_message(msg_headers([blocks[-1]]))",
      "path": "test/functional/test_framework/mininode.py",
      "position": 132,
      "original_position": 132,
      "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "original_commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "in_reply_to_id": 178179559,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, I agree - this should be changed to just be the header.",
      "created_at": "2018-03-30T20:21:12Z",
      "updated_at": "2018-03-30T20:21:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r178370087",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/178370087"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 542,
      "original_line": 542,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/178630570",
      "pull_request_review_id": 108718371,
      "id": 178630570,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3ODYzMDU3MA==",
      "diff_hunk": "@@ -440,3 +454,138 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PDataStore(P2PInterface):\n+    \"\"\"A P2P data store class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        # store of blocks. key is block hash, value is a CBlock object\n+        self.block_store = {}\n+        self.last_block_hash = ''\n+        # store of txs. key is txid, value is a CTransaction object\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_TX and inv.hash in self.tx_store.keys():\n+                self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif (inv.type & MSG_TYPE_MASK) == MSG_BLOCK and inv.hash in self.block_store.keys():\n+                self.send_message(msg_block(self.block_store[inv.hash]))\n+            else:\n+                logger.debug('getdata message type {} received.'.format(hex(inv.type)))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if not self.block_store:\n+            return\n+\n+        headers_list = [self.block_store[self.last_block_hash]]\n+        maxheaders = 2000\n+        while headers_list[-1].sha256 not in locator.vHave:\n+            # Walk back through the block store, adding headers to headers_list\n+            # as we go.\n+            prev_block_hash = headers_list[-1].hashPrevBlock\n+            if prev_block_hash in self.block_store:\n+                prev_block_header = self.block_store[prev_block_hash]\n+                headers_list.append(prev_block_header)\n+                if prev_block_header.sha256 == hash_stop:\n+                    # if this is the hashstop header, stop here\n+                    break\n+            else:\n+                logger.debug('block hash {} not found in block store'.format(hex(prev_block_hash)))\n+                break\n+\n+        # Truncate the list if there are too many headers\n+        headers_list = headers_list[:-maxheaders - 1:-1]\n+        response = msg_headers(headers_list)\n+\n+        if response is not None:\n+            self.send_message(response)\n+\n+    def on_reject(self, message):\n+        \"\"\"Store reject reason and code for testing.\"\"\"\n+        self.reject_code_received = message.code\n+        self.reject_reason_received = message.reason\n+\n+    def send_blocks_and_test(self, blocks, rpc, success=True, request_block=True, reject_code=None, reject_reason=None, timeout=60):\n+        \"\"\"Send blocks to test node and test whether the tip advances.\n+\n+         - add all blocks to our block_store\n+         - send a headers message for the final block\n+         - the on_getheaders handler will ensure that any getheaders are responded to\n+         - if request_block is True: wait for getdata for each of the blocks. The on_getdata handler will\n+           ensure that any getdata messages are responded to\n+         - if success is True: assert that the node's tip advances to the most recent block\n+         - if success is False: assert that the node's tip doesn't advance\n+         - if reject_code and reject_reason are set: assert that the correct reject message is received\"\"\"\n+\n+        with mininode_lock:\n+            self.reject_code_received = None\n+            self.reject_reason_received = None\n+\n+            for block in blocks:\n+                self.block_store[block.sha256] = block\n+                self.last_block_hash = block.sha256\n+\n+        self.send_message(msg_headers([blocks[-1]]))",
      "path": "test/functional/test_framework/mininode.py",
      "position": 132,
      "original_position": 132,
      "commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "original_commit_id": "95e2e9af124595aae4801fc9813ee1c294d404cd",
      "in_reply_to_id": 178179559,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed in #12861",
      "created_at": "2018-04-02T19:45:03Z",
      "updated_at": "2018-04-02T19:45:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/11771#discussion_r178630570",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/178630570"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/11771"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 542,
      "original_line": 542,
      "side": "RIGHT"
    }
  ]
}